
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a19c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  0801a360  0801a360  0002a360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac8c  0801ac8c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac8c  0801ac8c  0002ac8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac94  0801ac94  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ac94  0801ac94  0002ac94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ac9c  0801ac9c  0002ac9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801aca0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00049b28  200001e0  0801ae7c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20049d08  0801ae7c  00039d08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c32f  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c40  00000000  00000000  0006c53b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00074180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002150  00000000  00000000  000765a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354f1  00000000  00000000  000786f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026b6c  00000000  00000000  000adbe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011187d  00000000  00000000  000d474d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e5fca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a98c  00000000  00000000  001e6048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801a344 	.word	0x0801a344

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801a344 	.word	0x0801a344

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00b feae 	bl	800cd38 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200477fc 	.word	0x200477fc

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00b fe96 	bl	800cd38 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200477fc 	.word	0x200477fc

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00b fd1f 	bl	800ca64 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f00a fa86 	bl	800b538 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f00a fa80 	bl	800b538 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f00a fa7a 	bl	800b538 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f00a fa74 	bl	800b538 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f00a fa6e 	bl	800b538 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f00a fa68 	bl	800b538 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f00a fa62 	bl	800b538 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f00a fa5c 	bl	800b538 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f00a fa56 	bl	800b538 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f00a fa50 	bl	800b538 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f00a fa44 	bl	800b538 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00a fa3e 	bl	800b538 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 fcd5 	bl	8017ad8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00f fb66 	bl	80108c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00f fb62 	bl	80108c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00f fb5e 	bl	80108c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00f fb5a 	bl	80108c8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200478e8 	.word	0x200478e8
 8001248:	20047850 	.word	0x20047850
 800124c:	20047970 	.word	0x20047970

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200478e8 	.word	0x200478e8
 800137c:	20047970 	.word	0x20047970
 8001380:	20047850 	.word	0x20047850

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200478e8 	.word	0x200478e8
 80013c4:	20047850 	.word	0x20047850
 80013c8:	20047970 	.word	0x20047970

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		side_line_ignore_distance_(), cross_line_ignore_distance_(0), goal_judge_distance_(0){}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <_ZN7Encoder4initEv+0x30>)
 8001440:	f00f fb12 	bl	8010a68 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001444:	213c      	movs	r1, #60	; 0x3c
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <_ZN7Encoder4initEv+0x34>)
 8001448:	f00f fb0e 	bl	8010a68 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <_ZN7Encoder4initEv+0x38>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <_ZN7Encoder4initEv+0x3c>)
 8001456:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20047a50 	.word	0x20047a50
 8001468:	20047734 	.word	0x20047734
 800146c:	40010000 	.word	0x40010000
 8001470:	40010400 	.word	0x40010400
 8001474:	00000000 	.word	0x00000000

08001478 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <_ZN7Encoder6updateEv+0x120>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800159c <_ZN7Encoder6updateEv+0x124>
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <_ZN7Encoder6updateEv+0x12c>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800159c <_ZN7Encoder6updateEv+0x124>
 80014b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	ee17 0a90 	vmov	r0, s15
 80014e0:	f7ff f84a 	bl	8000578 <__aeabi_f2d>
 80014e4:	a32a      	add	r3, pc, #168	; (adr r3, 8001590 <_ZN7Encoder6updateEv+0x118>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f89d 	bl	8000628 <__aeabi_dmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4618      	mov	r0, r3
 80014f4:	4621      	mov	r1, r4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fe:	f7ff f9bd 	bl	800087c <__aeabi_ddiv>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fb85 	bl	8000c18 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a05 	vldr	s14, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a02 	vldr	s15, [r3, #8]
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edc3 7a06 	vstr	s15, [r3, #24]
	side_line_ignore_distance_ += distance_;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ed93 7a07 	vldr	s14, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edd3 7a02 	vldr	s15, [r3, #8]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edc3 7a07 	vstr	s15, [r3, #28]
	cross_line_ignore_distance_ += distance_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	ed93 7a08 	vldr	s14, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edc3 7a08 	vstr	s15, [r3, #32]
	goal_judge_distance_ += distance_;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a02 	vldr	s15, [r3, #8]
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//monitor_distance = distance_10mm_;
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	ce73a049 	.word	0xce73a049
 8001594:	3f77a3f6 	.word	0x3f77a3f6
 8001598:	40010000 	.word	0x40010000
 800159c:	47000000 	.word	0x47000000
 80015a0:	3f912547 	.word	0x3f912547
 80015a4:	40010400 	.word	0x40010400

080015a8 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_ZN7Encoder5clearEv+0x3c>)
 80015c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_ZN7Encoder5clearEv+0x40>)
 80015ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40010400 	.word	0x40010400

080015ec <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return distance_;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	ee07 3a90 	vmov	s15, r3
}
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	ee07 3a90 	vmov	s15, r3
}
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	619a      	str	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_ZN7Encoder25getSideLineIgnoreDistanceEv>:

float Encoder::getSideLineIgnoreDistance()
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	return side_line_ignore_distance_;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	ee07 3a90 	vmov	s15, r3
}
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>:

void Encoder::clearSideLineIgnoreDistance()
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	side_line_ignore_distance_ = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:
float Encoder::getCrossLineIgnoreDistance()
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	ee07 3a90 	vmov	s15, r3
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_ZN7Encoder20getGoalJudgeDistanceEv>:

float Encoder::getGoalJudgeDistance()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	return goal_judge_distance_;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	ee07 3a90 	vmov	s15, r3
}
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>:

void Encoder::clearGoalJudgeDistance()
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	goal_judge_distance_= 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f978 	bl	8001a78 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001788:	f000 f98c 	bl	8001aa4 <fopen_folder_and_file>

	return ret;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <user_fclose+0x1c>)
 80017a4:	f013 feba 	bl	801551c <f_close>

	return ret;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20046640 	.word	0x20046640

080017b8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	4613      	mov	r3, r2
 80017c6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017cc:	2300      	movs	r3, #0
 80017ce:	81fb      	strh	r3, [r7, #14]
 80017d0:	e030      	b.n	8001834 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feca 	bl	8000578 <__aeabi_f2d>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	e9cd 3400 	strd	r3, r4, [sp]
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <sd_write_float+0x94>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	4817      	ldr	r0, [pc, #92]	; (8001850 <sd_write_float+0x98>)
 80017f2:	f015 fa23 	bl	8016c3c <sniprintf>

		if(state == ADD_WRITE){
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <sd_write_float+0x9c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4619      	mov	r1, r3
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <sd_write_float+0x9c>)
 8001804:	f013 fefe 	bl	8015604 <f_lseek>
 8001808:	e003      	b.n	8001812 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800180a:	2100      	movs	r1, #0
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <sd_write_float+0x9c>)
 800180e:	f013 fef9 	bl	8015604 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <sd_write_float+0x98>)
 8001814:	f7fe fcf4 	bl	8000200 <strlen>
 8001818:	4602      	mov	r2, r0
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <sd_write_float+0xa0>)
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <sd_write_float+0x98>)
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <sd_write_float+0x9c>)
 8001820:	f013 fc67 	bl	80150f2 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001824:	f000 f958 	bl	8001ad8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800182c:	b29b      	uxth	r3, r3
 800182e:	3301      	adds	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	81fb      	strh	r3, [r7, #14]
 8001834:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbc8      	blt.n	80017d2 <sd_write_float+0x1a>
	}
	return ret;
 8001840:	7b7b      	ldrb	r3, [r7, #13]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	0801a360 	.word	0x0801a360
 8001850:	200465b0 	.word	0x200465b0
 8001854:	20046640 	.word	0x20046640
 8001858:	20046630 	.word	0x20046630

0800185c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f900 	bl	8001a78 <create_path>

	if(state == OVER_WRITE){
 8001878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d108      	bne.n	8001892 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001880:	4822      	ldr	r0, [pc, #136]	; (800190c <sd_write_array_float+0xb0>)
 8001882:	f013 fe75 	bl	8015570 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001886:	4822      	ldr	r0, [pc, #136]	; (8001910 <sd_write_array_float+0xb4>)
 8001888:	f014 f8e0 	bl	8015a4c <f_unlink>
		f_chdir("..");
 800188c:	4821      	ldr	r0, [pc, #132]	; (8001914 <sd_write_array_float+0xb8>)
 800188e:	f013 fe6f 	bl	8015570 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001892:	f000 f907 	bl	8001aa4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001896:	2300      	movs	r3, #0
 8001898:	82fb      	strh	r3, [r7, #22]
 800189a:	e028      	b.n	80018ee <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800189c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe65 	bl	8000578 <__aeabi_f2d>
 80018ae:	4603      	mov	r3, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	e9cd 3400 	strd	r3, r4, [sp]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <sd_write_array_float+0xbc>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	4818      	ldr	r0, [pc, #96]	; (800191c <sd_write_array_float+0xc0>)
 80018bc:	f015 f9be 	bl	8016c3c <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <sd_write_array_float+0xc4>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <sd_write_array_float+0xc4>)
 80018c8:	f013 fe9c 	bl	8015604 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <sd_write_array_float+0xc0>)
 80018ce:	f7fe fc97 	bl	8000200 <strlen>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <sd_write_array_float+0xc8>)
 80018d6:	4911      	ldr	r1, [pc, #68]	; (800191c <sd_write_array_float+0xc0>)
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <sd_write_array_float+0xc4>)
 80018da:	f013 fc0a 	bl	80150f2 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018de:	f000 f8fb 	bl	8001ad8 <bufclear>
	for(short i = 0 ; i < size; i++){
 80018e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	82fb      	strh	r3, [r7, #22]
 80018ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbd0      	blt.n	800189c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <sd_write_array_float+0xc4>)
 80018fc:	f013 fe0e 	bl	801551c <f_close>

	return ret;
 8001900:	7d7b      	ldrb	r3, [r7, #21]
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	200464b0 	.word	0x200464b0
 8001910:	20045370 	.word	0x20045370
 8001914:	0801a37c 	.word	0x0801a37c
 8001918:	0801a360 	.word	0x0801a360
 800191c:	200465b0 	.word	0x200465b0
 8001920:	20046640 	.word	0x20046640
 8001924:	20046630 	.word	0x20046630

08001928 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f898 	bl	8001a78 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001948:	f000 f8ac 	bl	8001aa4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800194c:	e019      	b.n	8001982 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800194e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4913      	ldr	r1, [pc, #76]	; (80019a8 <sd_read_array_float+0x80>)
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <sd_read_array_float+0x84>)
 800195e:	f015 f9c1 	bl	8016ce4 <siscanf>
		i++;
 8001962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001966:	b29b      	uxth	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800196e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	429a      	cmp	r2, r3
 8001978:	db03      	blt.n	8001982 <sd_read_array_float+0x5a>
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	3b01      	subs	r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <sd_read_array_float+0x88>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <sd_read_array_float+0x84>)
 8001988:	f014 fa3e 	bl	8015e08 <f_gets>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1dd      	bne.n	800194e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001992:	f000 f8a1 	bl	8001ad8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <sd_read_array_float+0x88>)
 8001998:	f013 fdc0 	bl	801551c <f_close>

	return ret;
 800199c:	7d7b      	ldrb	r3, [r7, #21]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	0801a36c 	.word	0x0801a36c
 80019ac:	200465b0 	.word	0x200465b0
 80019b0:	20046640 	.word	0x20046640

080019b4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f852 	bl	8001a78 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019d4:	f000 f866 	bl	8001aa4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019d8:	e019      	b.n	8001a0e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4913      	ldr	r1, [pc, #76]	; (8001a34 <sd_read_array_double+0x80>)
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <sd_read_array_double+0x84>)
 80019ea:	f015 f97b 	bl	8016ce4 <siscanf>
		i++;
 80019ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80019fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	db03      	blt.n	8001a0e <sd_read_array_double+0x5a>
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <sd_read_array_double+0x88>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <sd_read_array_double+0x84>)
 8001a14:	f014 f9f8 	bl	8015e08 <f_gets>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1dd      	bne.n	80019da <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a1e:	f000 f85b 	bl	8001ad8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <sd_read_array_double+0x88>)
 8001a24:	f013 fd7a 	bl	801551c <f_close>

	return ret;
 8001a28:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	0801a378 	.word	0x0801a378
 8001a38:	200465b0 	.word	0x200465b0
 8001a3c:	20046640 	.word	0x20046640

08001a40 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4908      	ldr	r1, [pc, #32]	; (8001a70 <sd_mount+0x30>)
 8001a4e:	4809      	ldr	r0, [pc, #36]	; (8001a74 <sd_mount+0x34>)
 8001a50:	f012 ffdc 	bl	8014a0c <f_mount>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <sd_mount+0x20>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	e001      	b.n	8001a64 <sd_mount+0x24>
	else ret = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	0801a388 	.word	0x0801a388
 8001a74:	20045470 	.word	0x20045470

08001a78 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <create_path+0x24>)
 8001a86:	f015 f959 	bl	8016d3c <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <create_path+0x28>)
 8001a8e:	f015 f955 	bl	8016d3c <strcpy>

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200464b0 	.word	0x200464b0
 8001aa0:	20045370 	.word	0x20045370

08001aa4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <fopen_folder_and_file+0x24>)
 8001aaa:	f014 f891 	bl	8015bd0 <f_mkdir>

	f_chdir(dirpath);
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <fopen_folder_and_file+0x24>)
 8001ab0:	f013 fd5e 	bl	8015570 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ab4:	2213      	movs	r2, #19
 8001ab6:	4905      	ldr	r1, [pc, #20]	; (8001acc <fopen_folder_and_file+0x28>)
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <fopen_folder_and_file+0x2c>)
 8001aba:	f012 ffed 	bl	8014a98 <f_open>

	f_chdir("..");
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <fopen_folder_and_file+0x30>)
 8001ac0:	f013 fd56 	bl	8015570 <f_chdir>


}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200464b0 	.word	0x200464b0
 8001acc:	20045370 	.word	0x20045370
 8001ad0:	20046640 	.word	0x20046640
 8001ad4:	0801a37c 	.word	0x0801a37c

08001ad8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	e007      	b.n	8001af4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001ae4:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <bufclear+0x30>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3301      	adds	r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b7f      	cmp	r3, #127	; 0x7f
 8001af8:	ddf4      	ble.n	8001ae4 <bufclear+0xc>
	}
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200465b0 	.word	0x200465b0

08001b0c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <read_byte+0x54>)
 8001b28:	f00a ff9c 	bl	800ca64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b2c:	f107 010f 	add.w	r1, r7, #15
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	2201      	movs	r2, #1
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <read_byte+0x58>)
 8001b36:	f00e f95d 	bl	800fdf4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b3a:	f107 010e 	add.w	r1, r7, #14
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	2201      	movs	r2, #1
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <read_byte+0x58>)
 8001b44:	f00e fa8a 	bl	801005c <HAL_SPI_Receive>
	CS_SET;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <read_byte+0x54>)
 8001b50:	f00a ff88 	bl	800ca64 <HAL_GPIO_WritePin>

	return val;
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020400 	.word	0x40020400
 8001b64:	200476dc 	.word	0x200476dc

08001b68 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <write_byte+0x54>)
 8001b8a:	f00a ff6b 	bl	800ca64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b8e:	f107 010f 	add.w	r1, r7, #15
 8001b92:	2364      	movs	r3, #100	; 0x64
 8001b94:	2201      	movs	r2, #1
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <write_byte+0x58>)
 8001b98:	f00e f92c 	bl	800fdf4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001b9c:	1db9      	adds	r1, r7, #6
 8001b9e:	2364      	movs	r3, #100	; 0x64
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <write_byte+0x58>)
 8001ba4:	f00e f926 	bl	800fdf4 <HAL_SPI_Transmit>
	CS_SET;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bae:	4803      	ldr	r0, [pc, #12]	; (8001bbc <write_byte+0x54>)
 8001bb0:	f00a ff58 	bl	800ca64 <HAL_GPIO_WritePin>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	200476dc 	.word	0x200476dc

08001bc4 <IMU_init>:

uint16_t IMU_init() {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff ff9c 	bl	8001b0c <read_byte>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	2be0      	cmp	r3, #224	; 0xe0
 8001bdc:	d119      	bne.n	8001c12 <IMU_init+0x4e>
		ret = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001be2:	2101      	movs	r1, #1
 8001be4:	2006      	movs	r0, #6
 8001be6:	f7ff ffbf 	bl	8001b68 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001bea:	2110      	movs	r1, #16
 8001bec:	2003      	movs	r0, #3
 8001bee:	f7ff ffbb 	bl	8001b68 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	207f      	movs	r0, #127	; 0x7f
 8001bf6:	f7ff ffb7 	bl	8001b68 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001bfa:	2106      	movs	r1, #6
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff ffb3 	bl	8001b68 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c02:	2106      	movs	r1, #6
 8001c04:	2014      	movs	r0, #20
 8001c06:	f7ff ffaf 	bl	8001b68 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	207f      	movs	r0, #127	; 0x7f
 8001c0e:	f7ff ffab 	bl	8001b68 <write_byte>
	}
	return ret;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <read_gyro_data>:

void read_gyro_data() {
 8001c1c:	b598      	push	{r3, r4, r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c20:	2033      	movs	r0, #51	; 0x33
 8001c22:	f7ff ff73 	bl	8001b0c <read_byte>
 8001c26:	4603      	mov	r3, r0
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b21c      	sxth	r4, r3
 8001c2c:	2034      	movs	r0, #52	; 0x34
 8001c2e:	f7ff ff6d 	bl	8001b0c <read_byte>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4323      	orrs	r3, r4
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <read_gyro_data+0x64>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c3e:	2035      	movs	r0, #53	; 0x35
 8001c40:	f7ff ff64 	bl	8001b0c <read_byte>
 8001c44:	4603      	mov	r3, r0
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b21c      	sxth	r4, r3
 8001c4a:	2036      	movs	r0, #54	; 0x36
 8001c4c:	f7ff ff5e 	bl	8001b0c <read_byte>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	4323      	orrs	r3, r4
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <read_gyro_data+0x68>)
 8001c5a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c5c:	2037      	movs	r0, #55	; 0x37
 8001c5e:	f7ff ff55 	bl	8001b0c <read_byte>
 8001c62:	4603      	mov	r3, r0
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21c      	sxth	r4, r3
 8001c68:	2038      	movs	r0, #56	; 0x38
 8001c6a:	f7ff ff4f 	bl	8001b0c <read_byte>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4323      	orrs	r3, r4
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <read_gyro_data+0x6c>)
 8001c78:	801a      	strh	r2, [r3, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	bd98      	pop	{r3, r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20047678 	.word	0x20047678
 8001c84:	20047676 	.word	0x20047676
 8001c88:	20047670 	.word	0x20047670

08001c8c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	805a      	strh	r2, [r3, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	809a      	strh	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	80da      	strh	r2, [r3, #6]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	811a      	strh	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	815a      	strh	r2, [r3, #10]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
{

}
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cd8:	f7ff ff74 	bl	8001bc4 <IMU_init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001ce0:	f7ff f9de 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff f9ea 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <_ZN3IMU4initEv+0x44>)
 8001cee:	f7ff fa11 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff f9e3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001cfa:	89fb      	ldrh	r3, [r7, #14]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <_ZN3IMU4initEv+0x48>)
 8001d00:	f7ff fa08 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d08:	f009 fc16 	bl	800b538 <HAL_Delay>

}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	0801a38c 	.word	0x0801a38c
 8001d18:	0801a398 	.word	0x0801a398
 8001d1c:	00000000 	.word	0x00000000

08001d20 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d28:	f7ff ff78 	bl	8001c1c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbff 	bl	8000554 <__aeabi_i2d>
 8001d56:	a316      	add	r3, pc, #88	; (adr r3, 8001db0 <_ZN3IMU12updateValuesEv+0x90>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fc64 	bl	8000628 <__aeabi_dmul>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	4625      	mov	r5, r4
 8001d66:	461c      	mov	r4, r3
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <_ZN3IMU12updateValuesEv+0xac>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbf0 	bl	8000554 <__aeabi_i2d>
 8001d74:	a310      	add	r3, pc, #64	; (adr r3, 8001db8 <_ZN3IMU12updateValuesEv+0x98>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fc55 	bl	8000628 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe fa99 	bl	80002bc <__adddf3>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4621      	mov	r1, r4
 8001d92:	f7fe fef9 	bl	8000b88 <__aeabi_d2iz>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <_ZN3IMU12updateValuesEv+0xac>)
 8001da6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bdb0      	pop	{r4, r5, r7, pc}
 8001db0:	47ae147b 	.word	0x47ae147b
 8001db4:	3f847ae1 	.word	0x3f847ae1
 8001db8:	7ae147ae 	.word	0x7ae147ae
 8001dbc:	3fefae14 	.word	0x3fefae14
 8001dc0:	20047678 	.word	0x20047678
 8001dc4:	20047676 	.word	0x20047676
 8001dc8:	20047670 	.word	0x20047670
 8001dcc:	200001fc 	.word	0x200001fc

08001dd0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7fe fbbf 	bl	8000578 <__aeabi_f2d>
 8001dfa:	a316      	add	r3, pc, #88	; (adr r3, 8001e54 <_ZN3IMU8getOmegaEv+0x84>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fd3c 	bl	800087c <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4614      	mov	r4, r2
 8001e0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e0e:	a313      	add	r3, pc, #76	; (adr r3, 8001e5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fc06 	bl	8000628 <__aeabi_dmul>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	4618      	mov	r0, r3
 8001e22:	4621      	mov	r1, r4
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <_ZN3IMU8getOmegaEv+0x80>)
 8001e2a:	f7fe fd27 	bl	800087c <__aeabi_ddiv>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	4618      	mov	r0, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7fe feef 	bl	8000c18 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	ee07 3a90 	vmov	s15, r3
}
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40668000 	.word	0x40668000
 8001e54:	66666666 	.word	0x66666666
 8001e58:	40306666 	.word	0x40306666
 8001e5c:	54411744 	.word	0x54411744
 8001e60:	400921fb 	.word	0x400921fb

08001e64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e6c:	466b      	mov	r3, sp
 8001e6e:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001e70:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e74:	f009 fb60 	bl	800b538 <HAL_Delay>
	lcd_clear();
 8001e78:	f7ff f912 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff f91e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001e84:	4840      	ldr	r0, [pc, #256]	; (8001f88 <_ZN3IMU11calibrationEv+0x124>)
 8001e86:	f7ff f945 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff f917 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001e92:	483e      	ldr	r0, [pc, #248]	; (8001f8c <_ZN3IMU11calibrationEv+0x128>)
 8001e94:	f7ff f93e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001e98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001e9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ea2:	1e5d      	subs	r5, r3, #1
 8001ea4:	61bd      	str	r5, [r7, #24]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	f04f 0400 	mov.w	r4, #0
 8001eb8:	0154      	lsls	r4, r2, #5
 8001eba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ebe:	014b      	lsls	r3, r1, #5
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	f04f 0400 	mov.w	r4, #0
 8001ed2:	0154      	lsls	r4, r2, #5
 8001ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ed8:	014b      	lsls	r3, r1, #5
 8001eda:	462b      	mov	r3, r5
 8001edc:	3301      	adds	r3, #1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3303      	adds	r3, #3
 8001ee2:	3307      	adds	r3, #7
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8001eec:	466b      	mov	r3, sp
 8001eee:	3303      	adds	r3, #3
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	83fb      	strh	r3, [r7, #30]
 8001efa:	8bfa      	ldrh	r2, [r7, #30]
 8001efc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	da13      	bge.n	8001f2c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f0a:	8bfb      	ldrh	r3, [r7, #30]
 8001f0c:	ee07 2a90 	vmov	s15, r2
 8001f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f009 fb0a 	bl	800b538 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f24:	8bfb      	ldrh	r3, [r7, #30]
 8001f26:	3301      	adds	r3, #1
 8001f28:	83fb      	strh	r3, [r7, #30]
 8001f2a:	e7e6      	b.n	8001efa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	462b      	mov	r3, r5
 8001f34:	3301      	adds	r3, #1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d00e      	beq.n	8001f62 <_ZN3IMU11calibrationEv+0xfe>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e7ec      	b.n	8001f3c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f7c:	46b5      	mov	sp, r6
}
 8001f7e:	bf00      	nop
 8001f80:	372c      	adds	r7, #44	; 0x2c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0801a39c 	.word	0x0801a39c
 8001f8c:	0801a3a8 	.word	0x0801a3a8

08001f90 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fa0:	79bb      	ldrb	r3, [r7, #6]
 8001fa2:	b299      	uxth	r1, r3
 8001fa4:	1dfa      	adds	r2, r7, #7
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <INA260_read+0x50>)
 8001fae:	f00a fec3 	bl	800cd38 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	f107 020c 	add.w	r2, r7, #12
 8001fba:	2364      	movs	r3, #100	; 0x64
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <INA260_read+0x50>)
 8001fc2:	f00a ffb7 	bl	800cf34 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001fc6:	7b3b      	ldrb	r3, [r7, #12]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	7b7b      	ldrb	r3, [r7, #13]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20047890 	.word	0x20047890

08001fe4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	4604      	mov	r4, r0
 8001fec:	4608      	mov	r0, r1
 8001fee:	4611      	mov	r1, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71bb      	strb	r3, [r7, #6]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	717b      	strb	r3, [r7, #5]
 8001ffe:	4613      	mov	r3, r2
 8002000:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	733b      	strb	r3, [r7, #12]
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	737b      	strb	r3, [r7, #13]
 800200a:	797b      	ldrb	r3, [r7, #5]
 800200c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800200e:	793b      	ldrb	r3, [r7, #4]
 8002010:	b299      	uxth	r1, r3
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	2364      	movs	r3, #100	; 0x64
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2303      	movs	r3, #3
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <INA260_write+0x48>)
 800201e:	f00a fe8b 	bl	800cd38 <HAL_I2C_Master_Transmit>
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	20047890 	.word	0x20047890

08002030 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	460b      	mov	r3, r1
 800203c:	71bb      	strb	r3, [r7, #6]
 800203e:	4613      	mov	r3, r2
 8002040:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002042:	797b      	ldrb	r3, [r7, #5]
 8002044:	79ba      	ldrb	r2, [r7, #6]
 8002046:	79f9      	ldrb	r1, [r7, #7]
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff ffcb 	bl	8001fe4 <INA260_write>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	461a      	mov	r2, r3
 8002064:	21df      	movs	r1, #223	; 0xdf
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff ffe2 	bl	8002030 <setConfig>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
{

}
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209c:	482a      	ldr	r0, [pc, #168]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 800209e:	f00a fcc9 	bl	800ca34 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <_ZN8JoyStick8getValueEv+0x2e>
 80020b2:	89fb      	ldrh	r3, [r7, #14]
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020ba:	2101      	movs	r1, #1
 80020bc:	4823      	ldr	r0, [pc, #140]	; (800214c <_ZN8JoyStick8getValueEv+0xc0>)
 80020be:	f00a fcb9 	bl	800ca34 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <_ZN8JoyStick8getValueEv+0x4e>
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80020da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020de:	481a      	ldr	r0, [pc, #104]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 80020e0:	f00a fca8 	bl	800ca34 <HAL_GPIO_ReadPin>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <_ZN8JoyStick8getValueEv+0x70>
 80020f4:	89fb      	ldrh	r3, [r7, #14]
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80020fc:	2104      	movs	r1, #4
 80020fe:	4814      	ldr	r0, [pc, #80]	; (8002150 <_ZN8JoyStick8getValueEv+0xc4>)
 8002100:	f00a fc98 	bl	800ca34 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <_ZN8JoyStick8getValueEv+0x90>
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	480a      	ldr	r0, [pc, #40]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 8002120:	f00a fc88 	bl	800ca34 <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0xb0>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0310 	orr.w	r3, r3, #16
 800213a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800213c:	89fb      	ldrh	r3, [r7, #14]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40020400 	.word	0x40020400

08002154 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	2b52      	cmp	r3, #82	; 0x52
 8002164:	d112      	bne.n	800218c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216c:	4856      	ldr	r0, [pc, #344]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800216e:	f00a fc79 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002178:	4853      	ldr	r0, [pc, #332]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800217a:	f00a fc73 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002184:	4850      	ldr	r0, [pc, #320]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002186:	f00a fc6d 	bl	800ca64 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800218a:	e098      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b47      	cmp	r3, #71	; 0x47
 8002190:	d112      	bne.n	80021b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002198:	484b      	ldr	r0, [pc, #300]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800219a:	f00a fc63 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a4:	4848      	ldr	r0, [pc, #288]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021a6:	f00a fc5d 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b0:	4845      	ldr	r0, [pc, #276]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021b2:	f00a fc57 	bl	800ca64 <HAL_GPIO_WritePin>
}
 80021b6:	e082      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	2b42      	cmp	r3, #66	; 0x42
 80021bc:	d112      	bne.n	80021e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c4:	4840      	ldr	r0, [pc, #256]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f00a fc4d 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021d0:	483d      	ldr	r0, [pc, #244]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021d2:	f00a fc47 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021dc:	483a      	ldr	r0, [pc, #232]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021de:	f00a fc41 	bl	800ca64 <HAL_GPIO_WritePin>
}
 80021e2:	e06c      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	2b43      	cmp	r3, #67	; 0x43
 80021e8:	d112      	bne.n	8002210 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f0:	4835      	ldr	r0, [pc, #212]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f00a fc37 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021fc:	4832      	ldr	r0, [pc, #200]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021fe:	f00a fc31 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002208:	482f      	ldr	r0, [pc, #188]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800220a:	f00a fc2b 	bl	800ca64 <HAL_GPIO_WritePin>
}
 800220e:	e056      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b4d      	cmp	r3, #77	; 0x4d
 8002214:	d112      	bne.n	800223c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800221c:	482a      	ldr	r0, [pc, #168]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f00a fc21 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002228:	4827      	ldr	r0, [pc, #156]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800222a:	f00a fc1b 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002234:	4824      	ldr	r0, [pc, #144]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002236:	f00a fc15 	bl	800ca64 <HAL_GPIO_WritePin>
}
 800223a:	e040      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b59      	cmp	r3, #89	; 0x59
 8002240:	d112      	bne.n	8002268 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002248:	481f      	ldr	r0, [pc, #124]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f00a fc0b 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002254:	481c      	ldr	r0, [pc, #112]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002256:	f00a fc05 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002260:	4819      	ldr	r0, [pc, #100]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002262:	f00a fbff 	bl	800ca64 <HAL_GPIO_WritePin>
}
 8002266:	e02a      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b57      	cmp	r3, #87	; 0x57
 800226c:	d112      	bne.n	8002294 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002274:	4814      	ldr	r0, [pc, #80]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f00a fbf5 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002280:	4811      	ldr	r0, [pc, #68]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002282:	f00a fbef 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228c:	480e      	ldr	r0, [pc, #56]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800228e:	f00a fbe9 	bl	800ca64 <HAL_GPIO_WritePin>
}
 8002292:	e014      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	2b7e      	cmp	r3, #126	; 0x7e
 8002298:	d111      	bne.n	80022be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a0:	4809      	ldr	r0, [pc, #36]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f00a fbdf 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ac:	4806      	ldr	r0, [pc, #24]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022ae:	f00a fbd9 	bl	800ca64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022ba:	f00a fbd3 	bl	800ca64 <HAL_GPIO_WritePin>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40020000 	.word	0x40020000

080022cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
 80022d8:	4613      	mov	r3, r2
 80022da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80022dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ea:	4813      	ldr	r0, [pc, #76]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 80022ec:	f00a fbba 	bl	800ca64 <HAL_GPIO_WritePin>
 80022f0:	e009      	b.n	8002306 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80022f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 8002302:	f00a fbaf 	bl	800ca64 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002306:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002314:	4808      	ldr	r0, [pc, #32]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 8002316:	f00a fba5 	bl	800ca64 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800231a:	e009      	b.n	8002330 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800231c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232a:	4803      	ldr	r0, [pc, #12]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 800232c:	f00a fb9a 	bl	800ca64 <HAL_GPIO_WritePin>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40020000 	.word	0x40020000

0800233c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800233c:	b580      	push	{r7, lr}
 800233e:	b092      	sub	sp, #72	; 0x48
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fe92 	bl	8002074 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	647b      	str	r3, [r7, #68]	; 0x44
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	331c      	adds	r3, #28
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
 800235e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	429a      	cmp	r2, r3
 8002364:	d008      	beq.n	8002378 <_ZN10LineSensorC1Ev+0x3c>
 8002366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	2200      	movs	r2, #0
 800236e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002372:	3302      	adds	r3, #2
 8002374:	647b      	str	r3, [r7, #68]	; 0x44
 8002376:	e7f2      	b.n	800235e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	643b      	str	r3, [r7, #64]	; 0x40
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	3338      	adds	r3, #56	; 0x38
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	429a      	cmp	r2, r3
 8002390:	d009      	beq.n	80023a6 <_ZN10LineSensorC1Ev+0x6a>
 8002392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002394:	623b      	str	r3, [r7, #32]
		s = 0;
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800239e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a0:	3304      	adds	r3, #4
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
 80023a4:	e7f1      	b.n	800238a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3338      	adds	r3, #56	; 0x38
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d009      	beq.n	80023d4 <_ZN10LineSensorC1Ev+0x98>
 80023c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80023cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ce:	3304      	adds	r3, #4
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	e7f1      	b.n	80023b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	3338      	adds	r3, #56	; 0x38
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d009      	beq.n	8002402 <_ZN10LineSensorC1Ev+0xc6>
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	3304      	adds	r3, #4
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002400:	e7f1      	b.n	80023e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	3748      	adds	r7, #72	; 0x48
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	220e      	movs	r2, #14
 8002418:	4619      	mov	r1, r3
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800241c:	f009 f8f2 	bl	800b604 <HAL_ADC_Start_DMA>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200477b4 	.word	0x200477b4

0800242c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b0d      	cmp	r3, #13
 800243c:	dc2f      	bgt.n	800249e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3392      	adds	r3, #146	; 0x92
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	ed93 7a00 	vldr	s14, [r3]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	33a0      	adds	r3, #160	; 0xa0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a5b      	subs	r3, r3, r1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	440b      	add	r3, r1
 800248a:	3306      	adds	r3, #6
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e7cc      	b.n	8002438 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b09      	cmp	r3, #9
 80024b0:	d902      	bls.n	80024b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]


}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	200001fe 	.word	0x200001fe

080024c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80024c8:	b490      	push	{r4, r7}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024da:	2b0d      	cmp	r3, #13
 80024dc:	f200 8087 	bhi.w	80025ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80024e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d81c      	bhi.n	8002528 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80024ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80024f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80024f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4423      	add	r3, r4
 8002506:	3306      	adds	r3, #6
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4403      	add	r3, r0
 800250c:	3304      	adds	r3, #4
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	008b      	lsls	r3, r1, #2
 8002512:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002516:	440b      	add	r3, r1
 8002518:	3b30      	subs	r3, #48	; 0x30
 800251a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800251c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002520:	3301      	adds	r3, #1
 8002522:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002526:	e7de      	b.n	80024e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800252e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002532:	2b09      	cmp	r3, #9
 8002534:	d84d      	bhi.n	80025d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002536:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800253a:	3301      	adds	r3, #1
 800253c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002540:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002544:	2b09      	cmp	r3, #9
 8002546:	d83e      	bhi.n	80025c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002548:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002552:	4413      	add	r3, r2
 8002554:	3b30      	subs	r3, #48	; 0x30
 8002556:	ed93 7a00 	vldr	s14, [r3]
 800255a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002564:	4413      	add	r3, r2
 8002566:	3b30      	subs	r3, #48	; 0x30
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d521      	bpl.n	80025ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002576:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002580:	4413      	add	r3, r2
 8002582:	3b30      	subs	r3, #48	; 0x30
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002588:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800258c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002596:	440a      	add	r2, r1
 8002598:	3a30      	subs	r2, #48	; 0x30
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025a2:	440b      	add	r3, r1
 80025a4:	3b30      	subs	r3, #48	; 0x30
 80025a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025b2:	4413      	add	r3, r2
 80025b4:	3b30      	subs	r3, #48	; 0x30
 80025b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025be:	3301      	adds	r3, #1
 80025c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025c4:	e7bc      	b.n	8002540 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80025c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ca:	3301      	adds	r3, #1
 80025cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025d0:	e7ad      	b.n	800252e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 80025d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	33b0      	adds	r3, #176	; 0xb0
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025e6:	3301      	adds	r3, #1
 80025e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025ec:	e773      	b.n	80024d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 80025ee:	bf00      	nop
 80025f0:	3738      	adds	r7, #56	; 0x38
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc90      	pop	{r4, r7}
 80025f6:	4770      	bx	lr

080025f8 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0a0      	sub	sp, #128	; 0x80
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002600:	2064      	movs	r0, #100	; 0x64
 8002602:	f008 ff99 	bl	800b538 <HAL_Delay>

	lcd_clear();
 8002606:	f7fe fd4b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800260a:	2100      	movs	r1, #0
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe fd57 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002612:	4886      	ldr	r0, [pc, #536]	; (800282c <_ZN10LineSensor11calibrationEv+0x234>)
 8002614:	f7fe fd7e 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002618:	2101      	movs	r1, #1
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fd50 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002620:	4883      	ldr	r0, [pc, #524]	; (8002830 <_ZN10LineSensor11calibrationEv+0x238>)
 8002622:	f7fe fd77 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002626:	2300      	movs	r3, #0
 8002628:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800262c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002630:	2b0d      	cmp	r3, #13
 8002632:	d823      	bhi.n	800267c <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002634:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002638:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	32b0      	adds	r2, #176	; 0xb0
 8002640:	0092      	lsls	r2, r2, #2
 8002642:	440a      	add	r2, r1
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800264c:	440b      	add	r3, r1
 800264e:	3b40      	subs	r3, #64	; 0x40
 8002650:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002652:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002656:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	32b0      	adds	r2, #176	; 0xb0
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	440a      	add	r2, r1
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800266a:	440b      	add	r3, r1
 800266c:	3b78      	subs	r3, #120	; 0x78
 800266e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002670:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002674:	3301      	adds	r3, #1
 8002676:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800267a:	e7d7      	b.n	800262c <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd02 	bl	800208c <_ZN8JoyStick8getValueEv>
 8002688:	4603      	mov	r3, r0
 800268a:	2b02      	cmp	r3, #2
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d079      	beq.n	800278c <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002698:	2300      	movs	r3, #0
 800269a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800269e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026a2:	2b0d      	cmp	r3, #13
 80026a4:	d850      	bhi.n	8002748 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80026a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026b0:	4413      	add	r3, r2
 80026b2:	3b40      	subs	r3, #64	; 0x40
 80026b4:	ed93 7a00 	vldr	s14, [r3]
 80026b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	33b0      	adds	r3, #176	; 0xb0
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d50f      	bpl.n	80026f2 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80026d2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80026d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	32b0      	adds	r2, #176	; 0xb0
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	440a      	add	r2, r1
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026ea:	440b      	add	r3, r1
 80026ec:	3b40      	subs	r3, #64	; 0x40
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e024      	b.n	800273c <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80026f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026fc:	4413      	add	r3, r2
 80026fe:	3b78      	subs	r3, #120	; 0x78
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	33b0      	adds	r3, #176	; 0xb0
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	dd0e      	ble.n	800273c <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800271e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002722:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	32b0      	adds	r2, #176	; 0xb0
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	440a      	add	r2, r1
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002736:	440b      	add	r3, r1
 8002738:	3b78      	subs	r3, #120	; 0x78
 800273a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800273c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002740:	3301      	adds	r3, #1
 8002742:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002746:	e7aa      	b.n	800269e <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800274e:	4618      	mov	r0, r3
 8002750:	f003 f9d8 	bl	8005b04 <_ZN12RotarySwitch8getValueEv>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800276a:	2201      	movs	r2, #1
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fdab 	bl	80022cc <_ZN3LED2LREaa>
 8002776:	e781      	b.n	800267c <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800277e:	2200      	movs	r2, #0
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fda1 	bl	80022cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800278a:	e777      	b.n	800267c <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800278c:	2300      	movs	r3, #0
 800278e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002792:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002796:	2b0d      	cmp	r3, #13
 8002798:	d826      	bhi.n	80027e8 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800279a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027a4:	4413      	add	r3, r2
 80027a6:	3b40      	subs	r3, #64	; 0x40
 80027a8:	ed93 7a00 	vldr	s14, [r3]
 80027ac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027b6:	4413      	add	r3, r2
 80027b8:	3b78      	subs	r3, #120	; 0x78
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027c6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002834 <_ZN10LineSensor11calibrationEv+0x23c>
 80027ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	3392      	adds	r3, #146	; 0x92
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	3304      	adds	r3, #4
 80027d8:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027dc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027e0:	3301      	adds	r3, #1
 80027e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80027e6:	e7d4      	b.n	8002792 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80027ee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027f2:	2b0d      	cmp	r3, #13
 80027f4:	d815      	bhi.n	8002822 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80027f6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80027fa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002804:	440a      	add	r2, r1
 8002806:	3a78      	subs	r2, #120	; 0x78
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	33a0      	adds	r3, #160	; 0xa0
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3304      	adds	r3, #4
 8002814:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002816:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800281a:	3301      	adds	r3, #1
 800281c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002820:	e7e5      	b.n	80027ee <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002822:	bf00      	nop
 8002824:	3780      	adds	r7, #128	; 0x80
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	0801a3b4 	.word	0x0801a3b4
 8002830:	0801a3c0 	.word	0x0801a3c0
 8002834:	447a0000 	.word	0x447a0000

08002838 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002844:	2303      	movs	r3, #3
 8002846:	81bb      	strh	r3, [r7, #12]
 8002848:	89bb      	ldrh	r3, [r7, #12]
 800284a:	2b0a      	cmp	r3, #10
 800284c:	d814      	bhi.n	8002878 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 800284e:	89bb      	ldrh	r3, [r7, #12]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	33b0      	adds	r3, #176	; 0xb0
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80028cc <_ZN10LineSensor13emergencyStopEv+0x94>
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	db02      	blt.n	8002870 <_ZN10LineSensor13emergencyStopEv+0x38>
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	3301      	adds	r3, #1
 800286e:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002870:	89bb      	ldrh	r3, [r7, #12]
 8002872:	3301      	adds	r3, #1
 8002874:	81bb      	strh	r3, [r7, #12]
 8002876:	e7e7      	b.n	8002848 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	2b07      	cmp	r3, #7
 800287c:	d906      	bls.n	800288c <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	e002      	b.n	8002892 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800288e:	2200      	movs	r2, #0
 8002890:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	2b63      	cmp	r3, #99	; 0x63
 8002898:	d903      	bls.n	80028a2 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e002      	b.n	80028a8 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d903      	bls.n	80028bc <_ZN10LineSensor13emergencyStopEv+0x84>
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80028b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80028ba:	801a      	strh	r2, [r3, #0]

	return flag;
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80028be:	781b      	ldrb	r3, [r3, #0]

}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	44098000 	.word	0x44098000
 80028d0:	20000200 	.word	0x20000200
 80028d4:	20000202 	.word	0x20000202

080028d8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	ed87 0a01 	vstr	s0, [r7, #4]
 80028e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e6:	eef0 7ae7 	vabs.f32	s15, s15
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
				target_velocity_(0), max_velocity_(0), min_velocity_(0), max_velocity2_(0),  min_velocity2_(0), max_velocity3_(0),  min_velocity3_(0), max_velocity4_(0),  min_velocity4_(0),
				logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_flag_force_(false), stable_cnt_reset_flag_(false),
				max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), max_acc3_(0), max_dec3_(0), max_acc4_(0), max_dec4_(0),
				correction_check_cnt_(0), store_check_cnt_(0), ignore_check_cnt_(0), all_sideline_flag_(false)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800299e:	331c      	adds	r3, #28
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80029ac:	3360      	adds	r3, #96	; 0x60
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80029b8:	3362      	adds	r3, #98	; 0x62
 80029ba:	2200      	movs	r2, #0
 80029bc:	801a      	strh	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80029c4:	3364      	adds	r3, #100	; 0x64
 80029c6:	2200      	movs	r2, #0
 80029c8:	801a      	strh	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029d0:	3328      	adds	r3, #40	; 0x28
 80029d2:	2200      	movs	r2, #0
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029dc:	332c      	adds	r3, #44	; 0x2c
 80029de:	2200      	movs	r2, #0
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029e8:	332e      	adds	r3, #46	; 0x2e
 80029ea:	2200      	movs	r2, #0
 80029ec:	801a      	strh	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029f4:	3330      	adds	r3, #48	; 0x30
 80029f6:	2200      	movs	r2, #0
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a00:	3332      	adds	r3, #50	; 0x32
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a0c:	3333      	adds	r3, #51	; 0x33
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a18:	3334      	adds	r3, #52	; 0x34
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a24:	3335      	adds	r3, #53	; 0x35
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a30:	3338      	adds	r3, #56	; 0x38
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a3e:	333c      	adds	r3, #60	; 0x3c
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a4c:	3340      	adds	r3, #64	; 0x40
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a5a:	3344      	adds	r3, #68	; 0x44
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a68:	3348      	adds	r3, #72	; 0x48
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a76:	334c      	adds	r3, #76	; 0x4c
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a84:	3350      	adds	r3, #80	; 0x50
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a92:	3354      	adds	r3, #84	; 0x54
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002aa0:	3358      	adds	r3, #88	; 0x58
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002aac:	335a      	adds	r3, #90	; 0x5a
 8002aae:	2200      	movs	r2, #0
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	2200      	movs	r2, #0
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ac4:	335e      	adds	r3, #94	; 0x5e
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae0:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae6:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aec:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af2:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af8:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b00:	2300      	movs	r3, #0
 8002b02:	83fb      	strh	r3, [r7, #30]
 8002b04:	8bfb      	ldrh	r3, [r7, #30]
 8002b06:	f241 726f 	movw	r2, #5999	; 0x176f
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d80d      	bhi.n	8002b2a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
		velocity_table_[i] = 0;
 8002b0e:	8bfb      	ldrh	r3, [r7, #30]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002b16:	3308      	adds	r3, #8
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b22:	8bfb      	ldrh	r3, [r7, #30]
 8002b24:	3301      	adds	r3, #1
 8002b26:	83fb      	strh	r3, [r7, #30]
 8002b28:	e7ec      	b.n	8002b04 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	83bb      	strh	r3, [r7, #28]
 8002b2e:	8bbb      	ldrh	r3, [r7, #28]
 8002b30:	2b63      	cmp	r3, #99	; 0x63
 8002b32:	d80d      	bhi.n	8002b50 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x258>
		crossline_distance_[i] = 0;
 8002b34:	8bbb      	ldrh	r3, [r7, #28]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002b3c:	331a      	adds	r3, #26
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b48:	8bbb      	ldrh	r3, [r7, #28]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	83bb      	strh	r3, [r7, #28]
 8002b4e:	e7ee      	b.n	8002b2e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x236>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b50:	2300      	movs	r3, #0
 8002b52:	837b      	strh	r3, [r7, #26]
 8002b54:	8b7b      	ldrh	r3, [r7, #26]
 8002b56:	2b63      	cmp	r3, #99	; 0x63
 8002b58:	d80d      	bhi.n	8002b76 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x27e>
		crossline_distance2_[i] = 0;
 8002b5a:	8b7b      	ldrh	r3, [r7, #26]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002b62:	333e      	adds	r3, #62	; 0x3e
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b6e:	8b7b      	ldrh	r3, [r7, #26]
 8002b70:	3301      	adds	r3, #1
 8002b72:	837b      	strh	r3, [r7, #26]
 8002b74:	e7ee      	b.n	8002b54 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x25c>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b76:	2300      	movs	r3, #0
 8002b78:	833b      	strh	r3, [r7, #24]
 8002b7a:	8b3b      	ldrh	r3, [r7, #24]
 8002b7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b80:	d20d      	bcs.n	8002b9e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2a6>
		sideline_distance_[i] = 0;
 8002b82:	8b3b      	ldrh	r3, [r7, #24]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002b8a:	3322      	adds	r3, #34	; 0x22
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b96:	8b3b      	ldrh	r3, [r7, #24]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	833b      	strh	r3, [r7, #24]
 8002b9c:	e7ed      	b.n	8002b7a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x282>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	82fb      	strh	r3, [r7, #22]
 8002ba2:	8afb      	ldrh	r3, [r7, #22]
 8002ba4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ba8:	d20d      	bcs.n	8002bc6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2ce>
		sideline_distance2_[i] = 0;
 8002baa:	8afb      	ldrh	r3, [r7, #22]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002bb2:	3316      	adds	r3, #22
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002bbe:	8afb      	ldrh	r3, [r7, #22]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	82fb      	strh	r3, [r7, #22]
 8002bc4:	e7ed      	b.n	8002ba2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2aa>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3724      	adds	r7, #36	; 0x24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002bec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002c0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c20:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	ee07 3a90 	vmov	s15, r3

}
 8002c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ffc7 	bl	8002bd4 <_ZN9LineTrace9calcErrorEv>
 8002c46:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002c54:	4b6a      	ldr	r3, [pc, #424]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c6a:	3364      	adds	r3, #100	; 0x64
 8002c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d150      	bne.n	8002d16 <_ZN9LineTrace8pidTraceEv+0xde>
		p = kp_slow_ * diff;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002c7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c82:	edc7 7a05 	vstr	s15, [r7, #20]
		d = (kd_slow_ / 10) * (diff - pre_diff) / DELTA_T;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002c8c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002c90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c94:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca6:	ee17 0a90 	vmov	r0, s15
 8002caa:	f7fd fc65 	bl	8000578 <__aeabi_f2d>
 8002cae:	a352      	add	r3, pc, #328	; (adr r3, 8002df8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd fde2 	bl	800087c <__aeabi_ddiv>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	f7fd ffaa 	bl	8000c18 <__aeabi_d2f>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002cc8:	4b4d      	ldr	r3, [pc, #308]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fc53 	bl	8000578 <__aeabi_f2d>
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	460d      	mov	r5, r1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce4:	ee17 0a90 	vmov	r0, s15
 8002ce8:	f7fd fc46 	bl	8000578 <__aeabi_f2d>
 8002cec:	a342      	add	r3, pc, #264	; (adr r3, 8002df8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fc99 	bl	8000628 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f7fd fadd 	bl	80002bc <__adddf3>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	4618      	mov	r0, r3
 8002d08:	4621      	mov	r1, r4
 8002d0a:	f7fd ff85 	bl	8000c18 <__aeabi_d2f>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e04f      	b.n	8002db6 <_ZN9LineTrace8pidTraceEv+0x17e>
	}
	else{
		p = kp_ * diff;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d24:	edc7 7a05 	vstr	s15, [r7, #20]
		d = (kd_ / 10) * (diff - pre_diff) / DELTA_T;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d2e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002d32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d36:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	ee17 0a90 	vmov	r0, s15
 8002d4c:	f7fd fc14 	bl	8000578 <__aeabi_f2d>
 8002d50:	a329      	add	r3, pc, #164	; (adr r3, 8002df8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fd91 	bl	800087c <__aeabi_ddiv>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	4621      	mov	r1, r4
 8002d62:	f7fd ff59 	bl	8000c18 <__aeabi_d2f>
 8002d66:	4603      	mov	r3, r0
 8002d68:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002d6a:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fc02 	bl	8000578 <__aeabi_f2d>
 8002d74:	4604      	mov	r4, r0
 8002d76:	460d      	mov	r5, r1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d86:	ee17 0a90 	vmov	r0, s15
 8002d8a:	f7fd fbf5 	bl	8000578 <__aeabi_f2d>
 8002d8e:	a31a      	add	r3, pc, #104	; (adr r3, 8002df8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fc48 	bl	8000628 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd fa8c 	bl	80002bc <__adddf3>
 8002da4:	4603      	mov	r3, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	4618      	mov	r0, r3
 8002daa:	4621      	mov	r1, r4
 8002dac:	f7fd ff34 	bl	8000c18 <__aeabi_d2f>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002db4:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002db6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dba:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002dda:	edd7 0a02 	vldr	s1, [r7, #8]
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	4610      	mov	r0, r2
 8002de4:	f003 fb20 	bl	8006428 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002de8:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6013      	str	r3, [r2, #0]

}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bdb0      	pop	{r4, r5, r7, pc}
 8002df6:	bf00      	nop
 8002df8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002dfc:	3f50624d 	.word	0x3f50624d
 8002e00:	20000214 	.word	0x20000214
 8002e04:	20000210 	.word	0x20000210

08002e08 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe fc39 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 fd2f 	bl	8005882 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogsDis2();
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fabe 	bl	80053aa <_ZN6Logger13resetLogsDis2Ev>

	logging_flag_ = true;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 fb84 	bl	8005558 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e72:	3328      	adds	r3, #40	; 0x28
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	461c      	mov	r4, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7fe fbe9 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002e7e:	eef0 7a40 	vmov.f32	s15, s0
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002e88:	331a      	adds	r3, #26
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e98:	3328      	adds	r3, #40	; 0x28
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea6:	3328      	adds	r3, #40	; 0x28
 8002ea8:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eb0:	3328      	adds	r3, #40	; 0x28
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	2b63      	cmp	r3, #99	; 0x63
 8002eb6:	d905      	bls.n	8002ec4 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ebe:	3328      	adds	r3, #40	; 0x28
 8002ec0:	2263      	movs	r2, #99	; 0x63
 8002ec2:	801a      	strh	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd90      	pop	{r4, r7, pc}

08002ecc <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ede:	332a      	adds	r3, #42	; 0x2a
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	461c      	mov	r4, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f7fe fbb3 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002eea:	eef0 7a40 	vmov.f32	s15, s0
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002ef4:	333e      	adds	r3, #62	; 0x3e
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f04:	332a      	adds	r3, #42	; 0x2a
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f12:	332a      	adds	r3, #42	; 0x2a
 8002f14:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f1c:	332a      	adds	r3, #42	; 0x2a
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	2b63      	cmp	r3, #99	; 0x63
 8002f22:	d905      	bls.n	8002f30 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f2a:	332a      	adds	r3, #42	; 0x2a
 8002f2c:	2263      	movs	r2, #99	; 0x63
 8002f2e:	801a      	strh	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}

08002f38 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f4a:	332c      	adds	r3, #44	; 0x2c
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	461c      	mov	r4, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f7fe fb7d 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002f56:	eef0 7a40 	vmov.f32	s15, s0
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002f60:	3322      	adds	r3, #34	; 0x22
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f70:	332c      	adds	r3, #44	; 0x2c
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f7e:	332c      	adds	r3, #44	; 0x2c
 8002f80:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f88:	332c      	adds	r3, #44	; 0x2c
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f90:	d306      	bcc.n	8002fa0 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f98:	332c      	adds	r3, #44	; 0x2c
 8002f9a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f9e:	801a      	strh	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd90      	pop	{r4, r7, pc}

08002fa8 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fba:	332e      	adds	r3, #46	; 0x2e
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	461c      	mov	r4, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f7fe fb45 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002fc6:	eef0 7a40 	vmov.f32	s15, s0
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002fd0:	3316      	adds	r3, #22
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fe0:	332e      	adds	r3, #46	; 0x2e
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fee:	332e      	adds	r3, #46	; 0x2e
 8002ff0:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ff8:	332e      	adds	r3, #46	; 0x2e
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003000:	d306      	bcc.n	8003010 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003008:	332e      	adds	r3, #46	; 0x2e
 800300a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800300e:	801a      	strh	r2, [r3, #0]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}

08003018 <_ZN9LineTrace23clearCrossLineDistance2Ev>:
		c = 0;
	}
}

void LineTrace::clearCrossLineDistance2()
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	for(auto &c : crossline_distance2_){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003026:	33f8      	adds	r3, #248	; 0xf8
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	429a      	cmp	r2, r3
 800303c:	d009      	beq.n	8003052 <_ZN9LineTrace23clearCrossLineDistance2Ev+0x3a>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	60bb      	str	r3, [r7, #8]
		c = 0;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
	for(auto &c : crossline_distance2_){
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3304      	adds	r3, #4
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e7f1      	b.n	8003036 <_ZN9LineTrace23clearCrossLineDistance2Ev+0x1e>
	}

}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <_ZN9LineTrace22clearSideLineDistance2Ev>:
	}

}

void LineTrace::clearSideLineDistance2()
{
 800305e:	b480      	push	{r7}
 8003060:	b087      	sub	sp, #28
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
	for(auto &s : sideline_distance2_){
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 800306c:	3358      	adds	r3, #88	; 0x58
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	429a      	cmp	r2, r3
 8003082:	d009      	beq.n	8003098 <_ZN9LineTrace22clearSideLineDistance2Ev+0x3a>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	60bb      	str	r3, [r7, #8]
		s = 0;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
	for(auto &s : sideline_distance2_){
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3304      	adds	r3, #4
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e7f1      	b.n	800307c <_ZN9LineTrace22clearSideLineDistance2Ev+0x1e>
	}

}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	ed2d 8b02 	vpush	{d8}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d046      	beq.n	8003148 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030c0:	3364      	adds	r3, #100	; 0x64
 80030c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11c      	bne.n	8003104 <_ZN9LineTrace9storeLogsEv+0x60>
			//logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69dc      	ldr	r4, [r3, #28]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe faad 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 80030d8:	eeb0 8a40 	vmov.f32	s16, s0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f002 fbbd 	bl	8005860 <_ZN8Odometry13getDeltaThetaEv>
 80030e6:	ec53 2b10 	vmov	r2, r3, d0
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fd fd93 	bl	8000c18 <__aeabi_d2f>
 80030f2:	4603      	mov	r3, r0
 80030f4:	ee00 3a90 	vmov	s1, r3
 80030f8:	eeb0 0a48 	vmov.f32	s0, s16
 80030fc:	4620      	mov	r0, r4
 80030fe:	f002 f85f 	bl	80051c0 <_ZN6Logger21storeDistanceAndThetaEff>
 8003102:	e01b      	b.n	800313c <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69dc      	ldr	r4, [r3, #28]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fa90 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8003112:	eeb0 8a40 	vmov.f32	s16, s0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	4618      	mov	r0, r3
 800311c:	f002 fba0 	bl	8005860 <_ZN8Odometry13getDeltaThetaEv>
 8003120:	ec53 2b10 	vmov	r2, r3, d0
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f7fd fd76 	bl	8000c18 <__aeabi_d2f>
 800312c:	4603      	mov	r3, r0
 800312e:	ee00 3a90 	vmov	s1, r3
 8003132:	eeb0 0a48 	vmov.f32	s0, s16
 8003136:	4620      	mov	r0, r4
 8003138:	f002 f842 	bl	80051c0 <_ZN6Logger21storeDistanceAndThetaEff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003146:	801a      	strh	r2, [r3, #0]
	}
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	ecbd 8b02 	vpop	{d8}
 8003152:	bd90      	pop	{r4, r7, pc}
 8003154:	20000204 	.word	0x20000204

08003158 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003166:	3328      	adds	r3, #40	; 0x28
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d85a      	bhi.n	8003224 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003174:	3328      	adds	r3, #40	; 0x28
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800317e:	331a      	adds	r3, #26
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fa5f 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8003192:	eeb0 7a40 	vmov.f32	s14, s0
 8003196:	edd7 7a03 	vldr	s15, [r7, #12]
 800319a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800319e:	eeb0 0a67 	vmov.f32	s0, s15
 80031a2:	f7ff fb99 	bl	80028d8 <_ZSt3absf>
 80031a6:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 80031aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003248 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 80031b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	d826      	bhi.n	800320a <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031c2:	3358      	adds	r3, #88	; 0x58
 80031c4:	2200      	movs	r2, #0
 80031c6:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6959      	ldr	r1, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031d2:	3328      	adds	r3, #40	; 0x28
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80031dc:	331a      	adds	r3, #26
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ea:	4608      	mov	r0, r1
 80031ec:	f7fe fa3f 	bl	800166e <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031f6:	3328      	adds	r3, #40	; 0x28
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003204:	3328      	adds	r3, #40	; 0x28
 8003206:	801a      	strh	r2, [r3, #0]
			break;
 8003208:	e00c      	b.n	8003224 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003210:	3328      	adds	r3, #40	; 0x28
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	3301      	adds	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800321e:	3328      	adds	r3, #40	; 0x28
 8003220:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 8003222:	e79d      	b.n	8003160 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800322a:	3328      	adds	r3, #40	; 0x28
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	2b63      	cmp	r3, #99	; 0x63
 8003230:	d905      	bls.n	800323e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003238:	3328      	adds	r3, #40	; 0x28
 800323a:	2263      	movs	r2, #99	; 0x63
 800323c:	801a      	strh	r2, [r3, #0]

}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	437a0000 	.word	0x437a0000

0800324c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003254:	2300      	movs	r3, #0
 8003256:	82fb      	strh	r3, [r7, #22]
 8003258:	8afb      	ldrh	r3, [r7, #22]
 800325a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800325e:	d23d      	bcs.n	80032dc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 8003260:	8afb      	ldrh	r3, [r7, #22]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003268:	3322      	adds	r3, #34	; 0x22
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe f9ea 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 800327c:	eeb0 7a40 	vmov.f32	s14, s0
 8003280:	edd7 7a04 	vldr	s15, [r7, #16]
 8003284:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003288:	eeb0 0a67 	vmov.f32	s0, s15
 800328c:	f7ff fb24 	bl	80028d8 <_ZSt3absf>
 8003290:	ed87 0a03 	vstr	s0, [r7, #12]
		//if(diff <= 230){
		if(diff <= 550){
 8003294:	edd7 7a03 	vldr	s15, [r7, #12]
 8003298:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003304 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 800329c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a4:	d816      	bhi.n	80032d4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032ac:	3358      	adds	r3, #88	; 0x58
 80032ae:	2200      	movs	r2, #0
 80032b0:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6959      	ldr	r1, [r3, #20]
 80032b6:	8afb      	ldrh	r3, [r7, #22]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80032be:	3322      	adds	r3, #34	; 0x22
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	edd3 7a00 	vldr	s15, [r3]
 80032c8:	eeb0 0a67 	vmov.f32	s0, s15
 80032cc:	4608      	mov	r0, r1
 80032ce:	f7fe f9ce 	bl	800166e <_ZN7Encoder16setTotalDistanceEf>
			break;
 80032d2:	e003      	b.n	80032dc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80032d4:	8afb      	ldrh	r3, [r7, #22]
 80032d6:	3301      	adds	r3, #1
 80032d8:	82fb      	strh	r3, [r7, #22]
 80032da:	e7bd      	b.n	8003258 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032e2:	332c      	adds	r3, #44	; 0x2c
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032ea:	d306      	bcc.n	80032fa <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032f2:	332c      	adds	r3, #44	; 0x2c
 80032f4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032f8:	801a      	strh	r2, [r3, #0]

}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	44098000 	.word	0x44098000

08003308 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800331a:	3364      	adds	r3, #100	; 0x64
 800331c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d144      	bne.n	80033ae <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 8003324:	edd7 7a00 	vldr	s15, [r7]
 8003328:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80035c4 <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 800332c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003334:	d504      	bpl.n	8003340 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e136      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 1.5;
 8003340:	edd7 7a00 	vldr	s15, [r7]
 8003344:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80035c8 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 8003348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	d503      	bpl.n	800335a <_ZN9LineTrace15radius2VelocityEf+0x52>
 8003352:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e129      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 2.0;
 800335a:	edd7 7a00 	vldr	s15, [r7]
 800335e:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80035cc <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 8003362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	d503      	bpl.n	8003374 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 800336c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e11c      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1500) velocity = 2.5;
 8003374:	edd7 7a00 	vldr	s15, [r7]
 8003378:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80035d0 <_ZN9LineTrace15radius2VelocityEf+0x2c8>
 800337c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d502      	bpl.n	800338c <_ZN9LineTrace15radius2VelocityEf+0x84>
 8003386:	4b93      	ldr	r3, [pc, #588]	; (80035d4 <_ZN9LineTrace15radius2VelocityEf+0x2cc>)
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	e110      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2000) velocity = 3.0;
 800338c:	edd7 7a00 	vldr	s15, [r7]
 8003390:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80035d8 <_ZN9LineTrace15radius2VelocityEf+0x2d0>
 8003394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339c:	d502      	bpl.n	80033a4 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 800339e:	4b8f      	ldr	r3, [pc, #572]	; (80035dc <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e104      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity_;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e0ff      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033b4:	3364      	adds	r3, #100	; 0x64
 80033b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d144      	bne.n	8003448 <_ZN9LineTrace15radius2VelocityEf+0x140>
		if(radius < 400) velocity = min_velocity2_;
 80033be:	edd7 7a00 	vldr	s15, [r7]
 80033c2:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80035c4 <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 80033c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	d504      	bpl.n	80033da <_ZN9LineTrace15radius2VelocityEf+0xd2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e0e9      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 1.5;
 80033da:	edd7 7a00 	vldr	s15, [r7]
 80033de:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80035c8 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 80033e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	d503      	bpl.n	80033f4 <_ZN9LineTrace15radius2VelocityEf+0xec>
 80033ec:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	e0dc      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 2.0;
 80033f4:	edd7 7a00 	vldr	s15, [r7]
 80033f8:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80035cc <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 80033fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003404:	d503      	bpl.n	800340e <_ZN9LineTrace15radius2VelocityEf+0x106>
 8003406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e0cf      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1500) velocity = 2.5;
 800340e:	edd7 7a00 	vldr	s15, [r7]
 8003412:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80035d0 <_ZN9LineTrace15radius2VelocityEf+0x2c8>
 8003416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341e:	d502      	bpl.n	8003426 <_ZN9LineTrace15radius2VelocityEf+0x11e>
 8003420:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <_ZN9LineTrace15radius2VelocityEf+0x2cc>)
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e0c3      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2000) velocity = 3.3;
 8003426:	edd7 7a00 	vldr	s15, [r7]
 800342a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80035d8 <_ZN9LineTrace15radius2VelocityEf+0x2d0>
 800342e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003436:	d502      	bpl.n	800343e <_ZN9LineTrace15radius2VelocityEf+0x136>
 8003438:	4b69      	ldr	r3, [pc, #420]	; (80035e0 <_ZN9LineTrace15radius2VelocityEf+0x2d8>)
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e0b7      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity2_;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	e0b2      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800344e:	3364      	adds	r3, #100	; 0x64
 8003450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d150      	bne.n	80034fa <_ZN9LineTrace15radius2VelocityEf+0x1f2>
		if(radius < 400) velocity = min_velocity3_;
 8003458:	edd7 7a00 	vldr	s15, [r7]
 800345c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80035c4 <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 8003460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003468:	d504      	bpl.n	8003474 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e09c      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 2.0;
 8003474:	edd7 7a00 	vldr	s15, [r7]
 8003478:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80035c8 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 800347c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	d503      	bpl.n	800348e <_ZN9LineTrace15radius2VelocityEf+0x186>
 8003486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e08f      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 2.0;
 800348e:	edd7 7a00 	vldr	s15, [r7]
 8003492:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80035cc <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 8003496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349e:	d503      	bpl.n	80034a8 <_ZN9LineTrace15radius2VelocityEf+0x1a0>
 80034a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e082      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1100) velocity = 3.0;
 80034a8:	edd7 7a00 	vldr	s15, [r7]
 80034ac:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80035e4 <_ZN9LineTrace15radius2VelocityEf+0x2dc>
 80034b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b8:	d502      	bpl.n	80034c0 <_ZN9LineTrace15radius2VelocityEf+0x1b8>
 80034ba:	4b48      	ldr	r3, [pc, #288]	; (80035dc <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e076      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1900) velocity = 3.0;
 80034c0:	edd7 7a00 	vldr	s15, [r7]
 80034c4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80035e8 <_ZN9LineTrace15radius2VelocityEf+0x2e0>
 80034c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	d502      	bpl.n	80034d8 <_ZN9LineTrace15radius2VelocityEf+0x1d0>
 80034d2:	4b42      	ldr	r3, [pc, #264]	; (80035dc <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	e06a      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2500) velocity = 3.5;
 80034d8:	edd7 7a00 	vldr	s15, [r7]
 80034dc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80035ec <_ZN9LineTrace15radius2VelocityEf+0x2e4>
 80034e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e8:	d502      	bpl.n	80034f0 <_ZN9LineTrace15radius2VelocityEf+0x1e8>
 80034ea:	4b41      	ldr	r3, [pc, #260]	; (80035f0 <_ZN9LineTrace15radius2VelocityEf+0x2e8>)
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e05e      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity3_;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e059      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003500:	3364      	adds	r3, #100	; 0x64
 8003502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003506:	2b04      	cmp	r3, #4
 8003508:	d14f      	bne.n	80035aa <_ZN9LineTrace15radius2VelocityEf+0x2a2>
		if(radius < 400) velocity = min_velocity4_;
 800350a:	edd7 7a00 	vldr	s15, [r7]
 800350e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80035c4 <_ZN9LineTrace15radius2VelocityEf+0x2bc>
 8003512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351a:	d504      	bpl.n	8003526 <_ZN9LineTrace15radius2VelocityEf+0x21e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e043      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 500) velocity = 2.5;
 8003526:	edd7 7a00 	vldr	s15, [r7]
 800352a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80035c8 <_ZN9LineTrace15radius2VelocityEf+0x2c0>
 800352e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003536:	d502      	bpl.n	800353e <_ZN9LineTrace15radius2VelocityEf+0x236>
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <_ZN9LineTrace15radius2VelocityEf+0x2cc>)
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e037      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 650) velocity = 3.0;
 800353e:	edd7 7a00 	vldr	s15, [r7]
 8003542:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80035cc <_ZN9LineTrace15radius2VelocityEf+0x2c4>
 8003546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354e:	d502      	bpl.n	8003556 <_ZN9LineTrace15radius2VelocityEf+0x24e>
 8003550:	4b22      	ldr	r3, [pc, #136]	; (80035dc <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e02b      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1100) velocity = 3.0;
 8003556:	edd7 7a00 	vldr	s15, [r7]
 800355a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80035e4 <_ZN9LineTrace15radius2VelocityEf+0x2dc>
 800355e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003566:	d502      	bpl.n	800356e <_ZN9LineTrace15radius2VelocityEf+0x266>
 8003568:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <_ZN9LineTrace15radius2VelocityEf+0x2d4>)
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	e01f      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 1900) velocity = 3.3;
 800356e:	edd7 7a00 	vldr	s15, [r7]
 8003572:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80035e8 <_ZN9LineTrace15radius2VelocityEf+0x2e0>
 8003576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357e:	d502      	bpl.n	8003586 <_ZN9LineTrace15radius2VelocityEf+0x27e>
 8003580:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <_ZN9LineTrace15radius2VelocityEf+0x2d8>)
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	e013      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else if(radius < 2500) velocity = 4.0;
 8003586:	edd7 7a00 	vldr	s15, [r7]
 800358a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80035ec <_ZN9LineTrace15radius2VelocityEf+0x2e4>
 800358e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	d503      	bpl.n	80035a0 <_ZN9LineTrace15radius2VelocityEf+0x298>
 8003598:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	e006      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
		else velocity = max_velocity4_;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e001      	b.n	80035ae <_ZN9LineTrace15radius2VelocityEf+0x2a6>
	}
	else velocity = 1.3;
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <_ZN9LineTrace15radius2VelocityEf+0x2ec>)
 80035ac:	60fb      	str	r3, [r7, #12]

	return velocity;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	ee07 3a90 	vmov	s15, r3
}
 80035b4:	eeb0 0a67 	vmov.f32	s0, s15
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	43c80000 	.word	0x43c80000
 80035c8:	43fa0000 	.word	0x43fa0000
 80035cc:	44228000 	.word	0x44228000
 80035d0:	44bb8000 	.word	0x44bb8000
 80035d4:	40200000 	.word	0x40200000
 80035d8:	44fa0000 	.word	0x44fa0000
 80035dc:	40400000 	.word	0x40400000
 80035e0:	40533333 	.word	0x40533333
 80035e4:	44898000 	.word	0x44898000
 80035e8:	44ed8000 	.word	0x44ed8000
 80035ec:	451c4000 	.word	0x451c4000
 80035f0:	40600000 	.word	0x40600000
 80035f4:	3fa66666 	.word	0x3fa66666

080035f8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	ed87 0a02 	vstr	s0, [r7, #8]
 8003604:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003606:	f241 736f 	movw	r3, #5999	; 0x176f
 800360a:	83fb      	strh	r3, [r7, #30]
 800360c:	8bfb      	ldrh	r3, [r7, #30]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 808d 	beq.w	800372e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003614:	8bfb      	ldrh	r3, [r7, #30]
 8003616:	3b01      	subs	r3, #1
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800361e:	3308      	adds	r3, #8
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	ed93 7a00 	vldr	s14, [r3]
 8003628:	8bfb      	ldrh	r3, [r7, #30]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003630:	3308      	adds	r3, #8
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003642:	edd7 7a06 	vldr	s15, [r7, #24]
 8003646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364e:	dd6a      	ble.n	8003726 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003650:	8bfb      	ldrh	r3, [r7, #30]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fc ff8c 	bl	8000578 <__aeabi_f2d>
 8003660:	a335      	add	r3, pc, #212	; (adr r3, 8003738 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003666:	f7fc ffdf 	bl	8000628 <__aeabi_dmul>
 800366a:	4603      	mov	r3, r0
 800366c:	460c      	mov	r4, r1
 800366e:	4625      	mov	r5, r4
 8003670:	461c      	mov	r4, r3
 8003672:	69b8      	ldr	r0, [r7, #24]
 8003674:	f7fc ff80 	bl	8000578 <__aeabi_f2d>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4620      	mov	r0, r4
 800367e:	4629      	mov	r1, r5
 8003680:	f7fd f8fc 	bl	800087c <__aeabi_ddiv>
 8003684:	4603      	mov	r3, r0
 8003686:	460c      	mov	r4, r1
 8003688:	4618      	mov	r0, r3
 800368a:	4621      	mov	r1, r4
 800368c:	f7fd fac4 	bl	8000c18 <__aeabi_d2f>
 8003690:	4603      	mov	r3, r0
 8003692:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003694:	edd7 6a06 	vldr	s13, [r7, #24]
 8003698:	ed97 7a05 	vldr	s14, [r7, #20]
 800369c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a0:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80036a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80036a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b4:	dd37      	ble.n	8003726 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80036b6:	8bfb      	ldrh	r3, [r7, #30]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036be:	3308      	adds	r3, #8
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fc ff56 	bl	8000578 <__aeabi_f2d>
 80036cc:	4604      	mov	r4, r0
 80036ce:	460d      	mov	r5, r1
 80036d0:	8bfb      	ldrh	r3, [r7, #30]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	ed93 7a00 	vldr	s14, [r3]
 80036dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80036e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e4:	ee17 0a90 	vmov	r0, s15
 80036e8:	f7fc ff46 	bl	8000578 <__aeabi_f2d>
 80036ec:	a312      	add	r3, pc, #72	; (adr r3, 8003738 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f7fc ff99 	bl	8000628 <__aeabi_dmul>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4620      	mov	r0, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	f7fc fddd 	bl	80002bc <__adddf3>
 8003702:	4603      	mov	r3, r0
 8003704:	460c      	mov	r4, r1
 8003706:	4619      	mov	r1, r3
 8003708:	4622      	mov	r2, r4
 800370a:	8bfb      	ldrh	r3, [r7, #30]
 800370c:	1e5c      	subs	r4, r3, #1
 800370e:	4608      	mov	r0, r1
 8003710:	4611      	mov	r1, r2
 8003712:	f7fd fa81 	bl	8000c18 <__aeabi_d2f>
 8003716:	4601      	mov	r1, r0
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800371e:	3308      	adds	r3, #8
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003726:	8bfb      	ldrh	r3, [r7, #30]
 8003728:	3b01      	subs	r3, #1
 800372a:	83fb      	strh	r3, [r7, #30]
 800372c:	e76e      	b.n	800360c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800372e:	bf00      	nop
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bdb0      	pop	{r4, r5, r7, pc}
 8003736:	bf00      	nop
 8003738:	d2f1a9fc 	.word	0xd2f1a9fc
 800373c:	3f50624d 	.word	0x3f50624d

08003740 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003740:	b5b0      	push	{r4, r5, r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	ed87 0a02 	vstr	s0, [r7, #8]
 800374c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800374e:	2300      	movs	r3, #0
 8003750:	83fb      	strh	r3, [r7, #30]
 8003752:	8bfb      	ldrh	r3, [r7, #30]
 8003754:	f241 726f 	movw	r2, #5999	; 0x176f
 8003758:	4293      	cmp	r3, r2
 800375a:	f200 808d 	bhi.w	8003878 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800375e:	8bfb      	ldrh	r3, [r7, #30]
 8003760:	3301      	adds	r3, #1
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003768:	3308      	adds	r3, #8
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	ed93 7a00 	vldr	s14, [r3]
 8003772:	8bfb      	ldrh	r3, [r7, #30]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800377a:	3308      	adds	r3, #8
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003788:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800378c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	dd6a      	ble.n	8003870 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800379a:	8bfb      	ldrh	r3, [r7, #30]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fc fee7 	bl	8000578 <__aeabi_f2d>
 80037aa:	a335      	add	r3, pc, #212	; (adr r3, 8003880 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f7fc ff3a 	bl	8000628 <__aeabi_dmul>
 80037b4:	4603      	mov	r3, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	4625      	mov	r5, r4
 80037ba:	461c      	mov	r4, r3
 80037bc:	69b8      	ldr	r0, [r7, #24]
 80037be:	f7fc fedb 	bl	8000578 <__aeabi_f2d>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4620      	mov	r0, r4
 80037c8:	4629      	mov	r1, r5
 80037ca:	f7fd f857 	bl	800087c <__aeabi_ddiv>
 80037ce:	4603      	mov	r3, r0
 80037d0:	460c      	mov	r4, r1
 80037d2:	4618      	mov	r0, r3
 80037d4:	4621      	mov	r1, r4
 80037d6:	f7fd fa1f 	bl	8000c18 <__aeabi_d2f>
 80037da:	4603      	mov	r3, r0
 80037dc:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80037de:	edd7 6a06 	vldr	s13, [r7, #24]
 80037e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80037e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ea:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80037ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80037f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fe:	dd37      	ble.n	8003870 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003800:	8bfb      	ldrh	r3, [r7, #30]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003808:	3308      	adds	r3, #8
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc feb1 	bl	8000578 <__aeabi_f2d>
 8003816:	4604      	mov	r4, r0
 8003818:	460d      	mov	r5, r1
 800381a:	8bfb      	ldrh	r3, [r7, #30]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	ed93 7a00 	vldr	s14, [r3]
 8003826:	edd7 7a02 	vldr	s15, [r7, #8]
 800382a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382e:	ee17 0a90 	vmov	r0, s15
 8003832:	f7fc fea1 	bl	8000578 <__aeabi_f2d>
 8003836:	a312      	add	r3, pc, #72	; (adr r3, 8003880 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f7fc fef4 	bl	8000628 <__aeabi_dmul>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4620      	mov	r0, r4
 8003846:	4629      	mov	r1, r5
 8003848:	f7fc fd38 	bl	80002bc <__adddf3>
 800384c:	4603      	mov	r3, r0
 800384e:	460c      	mov	r4, r1
 8003850:	4619      	mov	r1, r3
 8003852:	4622      	mov	r2, r4
 8003854:	8bfb      	ldrh	r3, [r7, #30]
 8003856:	1c5c      	adds	r4, r3, #1
 8003858:	4608      	mov	r0, r1
 800385a:	4611      	mov	r1, r2
 800385c:	f7fd f9dc 	bl	8000c18 <__aeabi_d2f>
 8003860:	4601      	mov	r1, r0
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003868:	3308      	adds	r3, #8
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003870:	8bfb      	ldrh	r3, [r7, #30]
 8003872:	3301      	adds	r3, #1
 8003874:	83fb      	strh	r3, [r7, #30]
 8003876:	e76c      	b.n	8003752 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003878:	bf00      	nop
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bdb0      	pop	{r4, r5, r7, pc}
 8003880:	d2f1a9fc 	.word	0xd2f1a9fc
 8003884:	3f50624d 	.word	0x3f50624d

08003888 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd ff07 	bl	80016a8 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038a0:	3360      	adds	r3, #96	; 0x60
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038ac:	3362      	adds	r3, #98	; 0x62
 80038ae:	2200      	movs	r2, #0
 80038b0:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80038b8:	331c      	adds	r3, #28
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038d6:	3360      	adds	r3, #96	; 0x60
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038e2:	3362      	adds	r3, #98	; 0x62
 80038e4:	2200      	movs	r2, #0
 80038e6:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80038ee:	331c      	adds	r3, #28
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003910:	3360      	adds	r3, #96	; 0x60
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05e      	beq.n	80039d6 <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fe97 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8003922:	eeb0 7a40 	vmov.f32	s14, s0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800392c:	331c      	adds	r3, #28
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393a:	bfac      	ite	ge
 800393c:	2301      	movge	r3, #1
 800393e:	2300      	movlt	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d025      	beq.n	8003992 <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800394c:	331c      	adds	r3, #28
 800394e:	ed93 7a00 	vldr	s14, [r3]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003958:	3362      	adds	r3, #98	; 0x62
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	3336      	adds	r3, #54	; 0x36
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	edd3 7a00 	vldr	s15, [r3]
 800396a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003974:	331c      	adds	r3, #28
 8003976:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003980:	3362      	adds	r3, #98	; 0x62
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	3301      	adds	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800398e:	3362      	adds	r3, #98	; 0x62
 8003990:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003998:	3362      	adds	r3, #98	; 0x62
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	f241 726f 	movw	r2, #5999	; 0x176f
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d906      	bls.n	80039b2 <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80039aa:	3362      	adds	r3, #98	; 0x62
 80039ac:	f241 726f 	movw	r2, #5999	; 0x176f
 80039b0:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80039b8:	3362      	adds	r3, #98	; 0x62
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80039c2:	3308      	adds	r3, #8
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	eeb0 0a67 	vmov.f32	s0, s15
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fb50 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd fe1d 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 80039f8:	eeb0 7a40 	vmov.f32	s14, s0
 80039fc:	edd7 7a00 	vldr	s15, [r7]
 8003a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a08:	bf94      	ite	ls
 8003a0a:	2301      	movls	r3, #1
 8003a0c:	2300      	movhi	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	//float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
	//float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8003a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a48:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8003a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a60:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a68:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	//static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003a6c:	4a3b      	ldr	r2, [pc, #236]	; (8003b5c <_ZN9LineTrace11isCrossLineEv+0x138>)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003a72:	4a3b      	ldr	r2, [pc, #236]	; (8003b60 <_ZN9LineTrace11isCrossLineEv+0x13c>)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6013      	str	r3, [r2, #0]

	//if(white_flag == false){
		if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700 && encoder_->getCrossLineIgnoreDistance() >= 50){
 8003a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a7c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003b64 <_ZN9LineTrace11isCrossLineEv+0x140>
 8003a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a88:	d518      	bpl.n	8003abc <_ZN9LineTrace11isCrossLineEv+0x98>
 8003a8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a8e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003b64 <_ZN9LineTrace11isCrossLineEv+0x140>
 8003a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	d50f      	bpl.n	8003abc <_ZN9LineTrace11isCrossLineEv+0x98>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fd fe2c 	bl	80016fe <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8003aaa:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8003b68 <_ZN9LineTrace11isCrossLineEv+0x144>
 8003aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab6:	db01      	blt.n	8003abc <_ZN9LineTrace11isCrossLineEv+0x98>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <_ZN9LineTrace11isCrossLineEv+0x9a>
 8003abc:	2300      	movs	r3, #0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	e002      	b.n	8003ad6 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d938      	bls.n	8003b50 <_ZN9LineTrace11isCrossLineEv+0x12c>
			flag = true;
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
			//white_flag = true;
			cnt = 0;
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	801a      	strh	r2, [r3, #0]

			side_sensor_->enableIgnore();
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 f962 	bl	8005db8 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearSideLineIgnoreDistance();
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fd fdf2 	bl	80016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fe0a 	bl	800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003b0e:	3335      	adds	r3, #53	; 0x35
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
			//stable_flag_force_ = true;
			if(mode_selector_ == FIRST_RUNNING){
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003b1a:	3364      	adds	r3, #100	; 0x64
 8003b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <_ZN9LineTrace11isCrossLineEv+0x114>
				store_check_cnt_ = 0;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003b2a:	335a      	adds	r3, #90	; 0x5a
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff f995 	bl	8002e60 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003b36:	e00b      	b.n	8003b50 <_ZN9LineTrace11isCrossLineEv+0x12c>
			}
			else{
				store_check_cnt_ = 0;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003b3e:	335a      	adds	r3, #90	; 0x5a
 8003b40:	2200      	movs	r2, #0
 8003b42:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fb07 	bl	8003158 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff f9be 	bl	8002ecc <_ZN9LineTrace23storeCrossLineDistance2Ev>
		}

	}
	*/

	return flag;
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000208 	.word	0x20000208
 8003b60:	2000020c 	.word	0x2000020c
 8003b64:	442f0000 	.word	0x442f0000
 8003b68:	42480000 	.word	0x42480000
 8003b6c:	20000218 	.word	0x20000218
 8003b70:	2000021a 	.word	0x2000021a

08003b74 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd fd54 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8003b8a:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fe53 	bl	800583e <_ZN8Odometry8getThetaEv>
 8003b98:	ec54 3b10 	vmov	r3, r4, d0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	f7fd f83a 	bl	8000c18 <__aeabi_d2f>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003ba8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	d101      	bne.n	8003bba <_ZN9LineTrace8isStableEv+0x46>
 8003bb6:	4b23      	ldr	r3, [pc, #140]	; (8003c44 <_ZN9LineTrace8isStableEv+0xd0>)
 8003bb8:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003bba:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003bc6:	eeb0 0a66 	vmov.f32	s0, s13
 8003bca:	f7fe fe85 	bl	80028d8 <_ZSt3absf>
 8003bce:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003bd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003c48 <_ZN9LineTrace8isStableEv+0xd4>
 8003bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	db01      	blt.n	8003be8 <_ZN9LineTrace8isStableEv+0x74>
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <_ZN9LineTrace8isStableEv+0xd8>)
 8003be6:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003bee:	3335      	adds	r3, #53	; 0x35
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <_ZN9LineTrace8isStableEv+0xdc>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003c02:	3335      	adds	r3, #53	; 0x35
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c0c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003c54 <_ZN9LineTrace8isStableEv+0xe0>
 8003c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c18:	db06      	blt.n	8003c28 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <_ZN9LineTrace8isStableEv+0xdc>)
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <_ZN9LineTrace8isStableEv+0xdc>)
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	e002      	b.n	8003c2e <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <_ZN9LineTrace8isStableEv+0xdc>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <_ZN9LineTrace8isStableEv+0xdc>)
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	2b18      	cmp	r3, #24
 8003c34:	d901      	bls.n	8003c3a <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd90      	pop	{r4, r7, pc}
 8003c44:	3727c5ac 	.word	0x3727c5ac
 8003c48:	459c4000 	.word	0x459c4000
 8003c4c:	459c4000 	.word	0x459c4000
 8003c50:	2000021c 	.word	0x2000021c
 8003c54:	44fa0000 	.word	0x44fa0000

08003c58 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b09a      	sub	sp, #104	; 0x68
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003c60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c64:	2201      	movs	r2, #1
 8003c66:	499e      	ldr	r1, [pc, #632]	; (8003ee0 <_ZN9LineTrace4initEv+0x288>)
 8003c68:	489e      	ldr	r0, [pc, #632]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003c6a:	f7fd fe5d 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003c6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c72:	2201      	movs	r2, #1
 8003c74:	499c      	ldr	r1, [pc, #624]	; (8003ee8 <_ZN9LineTrace4initEv+0x290>)
 8003c76:	489b      	ldr	r0, [pc, #620]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003c78:	f7fd fe56 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003c7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c80:	2201      	movs	r2, #1
 8003c82:	499a      	ldr	r1, [pc, #616]	; (8003eec <_ZN9LineTrace4initEv+0x294>)
 8003c84:	4897      	ldr	r0, [pc, #604]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003c86:	f7fd fe4f 	bl	8001928 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003c8a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003c8e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003c92:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8003c96:	eeb0 1a66 	vmov.f32	s2, s13
 8003c9a:	eef0 0a47 	vmov.f32	s1, s14
 8003c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f94c 	bl	8003f40 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003ca8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003cac:	2201      	movs	r2, #1
 8003cae:	4990      	ldr	r1, [pc, #576]	; (8003ef0 <_ZN9LineTrace4initEv+0x298>)
 8003cb0:	488c      	ldr	r0, [pc, #560]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003cb2:	f7fd fe39 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003cb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cba:	2201      	movs	r2, #1
 8003cbc:	498d      	ldr	r1, [pc, #564]	; (8003ef4 <_ZN9LineTrace4initEv+0x29c>)
 8003cbe:	4889      	ldr	r0, [pc, #548]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003cc0:	f7fd fe32 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003cc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cc8:	2201      	movs	r2, #1
 8003cca:	498b      	ldr	r1, [pc, #556]	; (8003ef8 <_ZN9LineTrace4initEv+0x2a0>)
 8003ccc:	4885      	ldr	r0, [pc, #532]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003cce:	f7fd fe2b 	bl	8001928 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003cd2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003cd6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003cda:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003cde:	eeb0 1a66 	vmov.f32	s2, s13
 8003ce2:	eef0 0a47 	vmov.f32	s1, s14
 8003ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f96e 	bl	8003fcc <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_min_velocity, temp_max_velocity2, temp_min_velocity2,
		temp_max_velocity3, temp_min_velocity3, temp_max_velocity4, temp_min_velocity4;
	sd_read_array_float("PARAMS", "TARVEL.TXT", 1, &temp_velocity);
 8003cf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4981      	ldr	r1, [pc, #516]	; (8003efc <_ZN9LineTrace4initEv+0x2a4>)
 8003cf8:	487a      	ldr	r0, [pc, #488]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003cfa:	f7fd fe15 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003cfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d02:	2201      	movs	r2, #1
 8003d04:	497e      	ldr	r1, [pc, #504]	; (8003f00 <_ZN9LineTrace4initEv+0x2a8>)
 8003d06:	4877      	ldr	r0, [pc, #476]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003d08:	f7fd fe0e 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity);
 8003d0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d10:	2201      	movs	r2, #1
 8003d12:	497c      	ldr	r1, [pc, #496]	; (8003f04 <_ZN9LineTrace4initEv+0x2ac>)
 8003d14:	4873      	ldr	r0, [pc, #460]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003d16:	f7fd fe07 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003d1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4979      	ldr	r1, [pc, #484]	; (8003f08 <_ZN9LineTrace4initEv+0x2b0>)
 8003d22:	4870      	ldr	r0, [pc, #448]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003d24:	f7fd fe00 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL3.TXT", 1, &temp_min_velocity2);
 8003d28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4977      	ldr	r1, [pc, #476]	; (8003f0c <_ZN9LineTrace4initEv+0x2b4>)
 8003d30:	486c      	ldr	r0, [pc, #432]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003d32:	f7fd fdf9 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL4.TXT", 1, &temp_max_velocity3);
 8003d36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	4974      	ldr	r1, [pc, #464]	; (8003f10 <_ZN9LineTrace4initEv+0x2b8>)
 8003d3e:	4869      	ldr	r0, [pc, #420]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003d40:	f7fd fdf2 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL4.TXT", 1, &temp_min_velocity3);
 8003d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4972      	ldr	r1, [pc, #456]	; (8003f14 <_ZN9LineTrace4initEv+0x2bc>)
 8003d4c:	4865      	ldr	r0, [pc, #404]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003d4e:	f7fd fdeb 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL5.TXT", 1, &temp_max_velocity4);
 8003d52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d56:	2201      	movs	r2, #1
 8003d58:	496f      	ldr	r1, [pc, #444]	; (8003f18 <_ZN9LineTrace4initEv+0x2c0>)
 8003d5a:	4862      	ldr	r0, [pc, #392]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003d5c:	f7fd fde4 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL5.TXT", 1, &temp_min_velocity4);
 8003d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d64:	2201      	movs	r2, #1
 8003d66:	496d      	ldr	r1, [pc, #436]	; (8003f1c <_ZN9LineTrace4initEv+0x2c4>)
 8003d68:	485e      	ldr	r0, [pc, #376]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003d6a:	f7fd fddd 	bl	8001928 <sd_read_array_float>

	setTargetVelocity(temp_velocity);
 8003d6e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003d72:	eeb0 0a67 	vmov.f32	s0, s15
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f97d 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003d7c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003d80:	eeb0 0a67 	vmov.f32	s0, s15
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f986 	bl	8004096 <_ZN9LineTrace14setMaxVelocityEf>
	setMinVelocity(temp_min_velocity);
 8003d8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f98f 	bl	80040b6 <_ZN9LineTrace14setMinVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003d98:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f998 	bl	80040d6 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity2(temp_min_velocity2);
 8003da6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003daa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f9a1 	bl	80040f6 <_ZN9LineTrace15setMinVelocity2Ef>
	setMaxVelocity3(temp_max_velocity3);
 8003db4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003db8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f9aa 	bl	8004116 <_ZN9LineTrace15setMaxVelocity3Ef>
	setMinVelocity3(temp_min_velocity3);
 8003dc2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f9b3 	bl	8004136 <_ZN9LineTrace15setMinVelocity3Ef>
	setMaxVelocity4(temp_max_velocity4);
 8003dd0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f9bc 	bl	8004156 <_ZN9LineTrace15setMaxVelocity4Ef>
	setMinVelocity4(temp_min_velocity4);
 8003dde:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003de2:	eeb0 0a67 	vmov.f32	s0, s15
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f9c5 	bl	8004176 <_ZN9LineTrace15setMinVelocity4Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003df0:	2201      	movs	r2, #1
 8003df2:	494b      	ldr	r1, [pc, #300]	; (8003f20 <_ZN9LineTrace4initEv+0x2c8>)
 8003df4:	483b      	ldr	r0, [pc, #236]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003df6:	f7fd fd97 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dfe:	2201      	movs	r2, #1
 8003e00:	4948      	ldr	r1, [pc, #288]	; (8003f24 <_ZN9LineTrace4initEv+0x2cc>)
 8003e02:	4838      	ldr	r0, [pc, #224]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003e04:	f7fd fd90 	bl	8001928 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003e08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e0c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003e10:	eef0 0a47 	vmov.f32	s1, s14
 8003e14:	eeb0 0a67 	vmov.f32	s0, s15
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fa4c 	bl	80042b6 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	623b      	str	r3, [r7, #32]
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003e2a:	f107 0320 	add.w	r3, r7, #32
 8003e2e:	2201      	movs	r2, #1
 8003e30:	493d      	ldr	r1, [pc, #244]	; (8003f28 <_ZN9LineTrace4initEv+0x2d0>)
 8003e32:	482c      	ldr	r0, [pc, #176]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003e34:	f7fd fd78 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003e38:	f107 031c 	add.w	r3, r7, #28
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	493b      	ldr	r1, [pc, #236]	; (8003f2c <_ZN9LineTrace4initEv+0x2d4>)
 8003e40:	4828      	ldr	r0, [pc, #160]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003e42:	f7fd fd71 	bl	8001928 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003e46:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e4e:	eef0 0a47 	vmov.f32	s1, s14
 8003e52:	eeb0 0a67 	vmov.f32	s0, s15
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fa47 	bl	80042ea <_ZN9LineTrace13setMaxAccDec2Eff>

	float temp_acc3 = 0, temp_dec3 = 0;
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
	sd_read_array_float("PARAMS", "ACC3.TXT", 1, &temp_acc3);
 8003e68:	f107 0318 	add.w	r3, r7, #24
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4930      	ldr	r1, [pc, #192]	; (8003f30 <_ZN9LineTrace4initEv+0x2d8>)
 8003e70:	481c      	ldr	r0, [pc, #112]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003e72:	f7fd fd59 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC3.TXT", 1, &temp_dec3);
 8003e76:	f107 0314 	add.w	r3, r7, #20
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	492d      	ldr	r1, [pc, #180]	; (8003f34 <_ZN9LineTrace4initEv+0x2dc>)
 8003e7e:	4819      	ldr	r0, [pc, #100]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003e80:	f7fd fd52 	bl	8001928 <sd_read_array_float>
	setMaxAccDec3(temp_acc3, temp_dec3);
 8003e84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e88:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e8c:	eef0 0a47 	vmov.f32	s1, s14
 8003e90:	eeb0 0a67 	vmov.f32	s0, s15
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fa42 	bl	800431e <_ZN9LineTrace13setMaxAccDec3Eff>

	float temp_acc4 = 0, temp_dec4 = 0;
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC4.TXT", 1, &temp_acc4);
 8003ea6:	f107 0310 	add.w	r3, r7, #16
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4922      	ldr	r1, [pc, #136]	; (8003f38 <_ZN9LineTrace4initEv+0x2e0>)
 8003eae:	480d      	ldr	r0, [pc, #52]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003eb0:	f7fd fd3a 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC4.TXT", 1, &temp_dec4);
 8003eb4:	f107 030c 	add.w	r3, r7, #12
 8003eb8:	2201      	movs	r2, #1
 8003eba:	4920      	ldr	r1, [pc, #128]	; (8003f3c <_ZN9LineTrace4initEv+0x2e4>)
 8003ebc:	4809      	ldr	r0, [pc, #36]	; (8003ee4 <_ZN9LineTrace4initEv+0x28c>)
 8003ebe:	f7fd fd33 	bl	8001928 <sd_read_array_float>
	setMaxAccDec4(temp_acc4, temp_dec4);
 8003ec2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ec6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003eca:	eef0 0a47 	vmov.f32	s1, s14
 8003ece:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa3d 	bl	8004352 <_ZN9LineTrace13setMaxAccDec4Eff>
}
 8003ed8:	bf00      	nop
 8003eda:	3768      	adds	r7, #104	; 0x68
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	0801a400 	.word	0x0801a400
 8003ee4:	0801a408 	.word	0x0801a408
 8003ee8:	0801a410 	.word	0x0801a410
 8003eec:	0801a418 	.word	0x0801a418
 8003ef0:	0801a420 	.word	0x0801a420
 8003ef4:	0801a42c 	.word	0x0801a42c
 8003ef8:	0801a438 	.word	0x0801a438
 8003efc:	0801a444 	.word	0x0801a444
 8003f00:	0801a450 	.word	0x0801a450
 8003f04:	0801a45c 	.word	0x0801a45c
 8003f08:	0801a468 	.word	0x0801a468
 8003f0c:	0801a474 	.word	0x0801a474
 8003f10:	0801a480 	.word	0x0801a480
 8003f14:	0801a48c 	.word	0x0801a48c
 8003f18:	0801a498 	.word	0x0801a498
 8003f1c:	0801a4a4 	.word	0x0801a4a4
 8003f20:	0801a4b0 	.word	0x0801a4b0
 8003f24:	0801a4b8 	.word	0x0801a4b8
 8003f28:	0801a4c0 	.word	0x0801a4c0
 8003f2c:	0801a4cc 	.word	0x0801a4cc
 8003f30:	0801a4d8 	.word	0x0801a4d8
 8003f34:	0801a4e4 	.word	0x0801a4e4
 8003f38:	0801a4f0 	.word	0x0801a4f0
 8003f3c:	0801a4fc 	.word	0x0801a4fc

08003f40 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f4c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f50:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
	return kp_;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	ee07 3a90 	vmov	s15, r3
}
 8003f82:	eeb0 0a67 	vmov.f32	s0, s15
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	return ki_;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	ee07 3a90 	vmov	s15, r3
}
 8003fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
	return kd_;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	ee07 3a90 	vmov	s15, r3
}
 8003fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003fd8:	edc7 0a01 	vstr	s1, [r7, #4]
 8003fdc:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400a:	ee07 3a90 	vmov	s15, r3
}
 800400e:	eeb0 0a67 	vmov.f32	s0, s15
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004028:	ee07 3a90 	vmov	s15, r3
}
 800402c:	eeb0 0a67 	vmov.f32	s0, s15
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	ee07 3a90 	vmov	s15, r3
}
 800404a:	eeb0 0a67 	vmov.f32	s0, s15
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <_ZN9LineTrace15setMaxVelocity3Ef>:

void LineTrace::setMaxVelocity3(float velocity)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity3_ = velocity;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <_ZN9LineTrace15setMinVelocity3Ef>:

void LineTrace::setMinVelocity3(float velocity)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity3_ = velocity;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <_ZN9LineTrace15setMaxVelocity4Ef>:

void LineTrace::setMaxVelocity4(float velocity)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity4_ = velocity;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <_ZN9LineTrace15setMinVelocity4Ef>:

void LineTrace::setMinVelocity4(float velocity)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity4_ = velocity;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041a4:	ee07 3a90 	vmov	s15, r3
}
 80041a8:	eeb0 0a67 	vmov.f32	s0, s15
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80041c4:	ee07 3a90 	vmov	s15, r3
}
 80041c8:	eeb0 0a67 	vmov.f32	s0, s15
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80041e4:	ee07 3a90 	vmov	s15, r3
}
 80041e8:	eeb0 0a67 	vmov.f32	s0, s15
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004204:	ee07 3a90 	vmov	s15, r3
}
 8004208:	eeb0 0a67 	vmov.f32	s0, s15
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004224:	ee07 3a90 	vmov	s15, r3
}
 8004228:	eeb0 0a67 	vmov.f32	s0, s15
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <_ZN9LineTrace15getMaxVelocity3Ev>:

float LineTrace::getMaxVelocity3()
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
	return max_velocity3_;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004244:	ee07 3a90 	vmov	s15, r3
}
 8004248:	eeb0 0a67 	vmov.f32	s0, s15
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <_ZN9LineTrace15getMinVelocity3Ev>:

float LineTrace::getMinVelocity3()
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
	return min_velocity3_;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004264:	ee07 3a90 	vmov	s15, r3
}
 8004268:	eeb0 0a67 	vmov.f32	s0, s15
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <_ZN9LineTrace15getMaxVelocity4Ev>:

float LineTrace::getMaxVelocity4()

{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
	return max_velocity4_;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004284:	ee07 3a90 	vmov	s15, r3
}
 8004288:	eeb0 0a67 	vmov.f32	s0, s15
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <_ZN9LineTrace15getMinVelocity4Ev>:

float LineTrace::getMinVelocity4()
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
	return min_velocity4_;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80042a4:	ee07 3a90 	vmov	s15, r3
}
 80042a8:	eeb0 0a67 	vmov.f32	s0, s15
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <_ZN9LineTrace12setMaxAccDecEff>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	ed87 0a02 	vstr	s0, [r7, #8]
 80042c2:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042cc:	3338      	adds	r3, #56	; 0x38
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042d8:	333c      	adds	r3, #60	; 0x3c
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80042f6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004300:	3340      	adds	r3, #64	; 0x40
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800430c:	3344      	adds	r3, #68	; 0x44
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <_ZN9LineTrace13setMaxAccDec3Eff>:

void LineTrace::setMaxAccDec3(const float acc, const float dec)
{
 800431e:	b480      	push	{r7}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	ed87 0a02 	vstr	s0, [r7, #8]
 800432a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc3_ = acc;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004334:	3348      	adds	r3, #72	; 0x48
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	601a      	str	r2, [r3, #0]
	max_dec3_ = dec;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004340:	334c      	adds	r3, #76	; 0x4c
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	601a      	str	r2, [r3, #0]
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <_ZN9LineTrace13setMaxAccDec4Eff>:

void LineTrace::setMaxAccDec4(const float acc, const float dec)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	ed87 0a02 	vstr	s0, [r7, #8]
 800435e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc4_ = acc;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004368:	3350      	adds	r3, #80	; 0x50
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	601a      	str	r2, [r3, #0]
	max_dec4_ = dec;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004374:	3354      	adds	r3, #84	; 0x54
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	601a      	str	r2, [r3, #0]
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
	return max_acc_;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004394:	3338      	adds	r3, #56	; 0x38
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	ee07 3a90 	vmov	s15, r3
}
 800439c:	eeb0 0a67 	vmov.f32	s0, s15
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
	return max_dec_;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043b8:	333c      	adds	r3, #60	; 0x3c
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	ee07 3a90 	vmov	s15, r3
}
 80043c0:	eeb0 0a67 	vmov.f32	s0, s15
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043dc:	3340      	adds	r3, #64	; 0x40
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	ee07 3a90 	vmov	s15, r3
}
 80043e4:	eeb0 0a67 	vmov.f32	s0, s15
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004400:	3344      	adds	r3, #68	; 0x44
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	ee07 3a90 	vmov	s15, r3
}
 8004408:	eeb0 0a67 	vmov.f32	s0, s15
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <_ZN9LineTrace10getMaxAcc3Ev>:

float LineTrace::getMaxAcc3()
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
	return max_acc3_;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004424:	3348      	adds	r3, #72	; 0x48
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	ee07 3a90 	vmov	s15, r3
}
 800442c:	eeb0 0a67 	vmov.f32	s0, s15
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <_ZN9LineTrace10getMaxDec3Ev>:

float LineTrace::getMaxDec3()
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
	return max_dec3_;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004448:	334c      	adds	r3, #76	; 0x4c
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	ee07 3a90 	vmov	s15, r3
}
 8004450:	eeb0 0a67 	vmov.f32	s0, s15
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <_ZN9LineTrace10getMaxAcc4Ev>:

float LineTrace::getMaxAcc4()
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
	return max_acc4_;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800446c:	3350      	adds	r3, #80	; 0x50
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	ee07 3a90 	vmov	s15, r3
}
 8004474:	eeb0 0a67 	vmov.f32	s0, s15
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <_ZN9LineTrace10getMaxDec4Ev>:

float LineTrace::getMaxDec4()
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
	return max_dec4_;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004490:	3354      	adds	r3, #84	; 0x54
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	ee07 3a90 	vmov	s15, r3
}
 8004498:	eeb0 0a67 	vmov.f32	s0, s15
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80b4 	beq.w	8004624 <_ZN9LineTrace4flipEv+0x17c>
		// ---- line following processing -----//
		pidTrace();
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fe fbbb 	bl	8002c38 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fa1d 	bl	8003902 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 80044c8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff fa86 	bl	80039de <_ZN9LineTrace16isTargetDistanceEf>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d028      	beq.n	800452a <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7fe fde3 	bl	80030a4 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fb48 	bl	8003b74 <_ZN9LineTrace8isStableEv>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00c      	beq.n	8004504 <_ZN9LineTrace4flipEv+0x5c>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 fc3a 	bl	8005d68 <_ZN10SideSensor10getStatusLEv>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f083 0301 	eor.w	r3, r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <_ZN9LineTrace4flipEv+0x5c>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <_ZN9LineTrace4flipEv+0x5e>
 8004504:	2300      	movs	r3, #0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004510:	3333      	adds	r3, #51	; 0x33
 8004512:	2201      	movs	r2, #1
 8004514:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fd f8b6 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	4618      	mov	r0, r3
 8004526:	f001 f9ac 	bl	8005882 <_ZN8Odometry13clearPotitionEv>
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff fa7a 	bl	8003a24 <_ZN9LineTrace11isCrossLineEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004536:	3333      	adds	r3, #51	; 0x33
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <_ZN9LineTrace4flipEv+0xaa>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	4618      	mov	r0, r3
 8004544:	f001 fc10 	bl	8005d68 <_ZN10SideSensor10getStatusLEv>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <_ZN9LineTrace4flipEv+0xaa>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <_ZN9LineTrace4flipEv+0xac>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d02f      	beq.n	80045b8 <_ZN9LineTrace4flipEv+0x110>
		//if((stable_flag_force_ == true || stable_flag_ == true) && side_sensor_->getStatusL() == true && encoder_->getSideLineIgnoreDistance() >= 120){ //Stabilizing and side sensor is white
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800455e:	3364      	adds	r3, #100	; 0x64
 8004560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <_ZN9LineTrace4flipEv+0xd4>
				store_check_cnt_ = 0;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800456e:	335a      	adds	r3, #90	; 0x5a
 8004570:	2200      	movs	r2, #0
 8004572:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7fe fcdf 	bl	8002f38 <_ZN9LineTrace21storeSideLineDistanceEv>
 800457a:	e00b      	b.n	8004594 <_ZN9LineTrace4flipEv+0xec>
			}
			else{
				store_check_cnt_ = 0;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004582:	335a      	adds	r3, #90	; 0x5a
 8004584:	2200      	movs	r2, #0
 8004586:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fe fe5f 	bl	800324c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fe fd0a 	bl	8002fa8 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800459a:	3333      	adds	r3, #51	; 0x33
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
			stable_flag_force_ = false;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80045a6:	3334      	adds	r3, #52	; 0x34
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80045b2:	3335      	adds	r3, #53	; 0x35
 80045b4:	2201      	movs	r2, #1
 80045b6:	701a      	strb	r2, [r3, #0]
		}



		if(side_sensor_->getIgnoreFlag() == true && encoder_->getSideLineIgnoreDistance() >= 100){
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 fc15 	bl	8005dec <_ZN10SideSensor13getIgnoreFlagEv>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00f      	beq.n	80045e8 <_ZN9LineTrace4flipEv+0x140>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fd f879 	bl	80016c4 <_ZN7Encoder25getSideLineIgnoreDistanceEv>
 80045d2:	eeb0 7a40 	vmov.f32	s14, s0
 80045d6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800462c <_ZN9LineTrace4flipEv+0x184>
 80045da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e2:	db01      	blt.n	80045e8 <_ZN9LineTrace4flipEv+0x140>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <_ZN9LineTrace4flipEv+0x142>
 80045e8:	2300      	movs	r3, #0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d004      	beq.n	80045f8 <_ZN9LineTrace4flipEv+0x150>
			side_sensor_->disableIgnore();
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 fbed 	bl	8005dd2 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe f91b 	bl	8002838 <_ZN10LineSensor13emergencyStopEv>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <_ZN9LineTrace4flipEv+0x17c>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	eddf 0a08 	vldr	s1, [pc, #32]	; 8004630 <_ZN9LineTrace4flipEv+0x188>
 8004610:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004630 <_ZN9LineTrace4flipEv+0x188>
 8004614:	4618      	mov	r0, r3
 8004616:	f001 ff07 	bl	8006428 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	4618      	mov	r0, r3
 8004620:	f7fc feb0 	bl	8001384 <_ZN3ESC3offEv>
			//led_.LR(0, -1);
		}


	}
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	42c80000 	.word	0x42c80000
 8004630:	00000000 	.word	0x00000000

08004634 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004646:	3364      	adds	r3, #100	; 0x64
 8004648:	887a      	ldrh	r2, [r7, #2]
 800464a:	801a      	strh	r2, [r3, #0]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4618      	mov	r0, r3
 8004676:	f001 ff30 	bl	80064da <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	4618      	mov	r0, r3
 8004680:	f001 fb8a 	bl	8005d98 <_ZN10SideSensor17resetWhiteLineCntEv>
	//clearSideLineDistance();
	clearSideLineDistance2();
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7fe fcea 	bl	800305e <_ZN9LineTrace22clearSideLineDistance2Ev>
	//clearCrossLineDistance();
	clearCrossLineDistance2();
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fe fcc4 	bl	8003018 <_ZN9LineTrace23clearCrossLineDistance2Ev>
	crossline_idx_ = 0;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004696:	3328      	adds	r3, #40	; 0x28
 8004698:	2200      	movs	r2, #0
 800469a:	801a      	strh	r2, [r3, #0]
	crossline_idx2_ = 0;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046a2:	332a      	adds	r3, #42	; 0x2a
 80046a4:	2200      	movs	r2, #0
 80046a6:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046ae:	332c      	adds	r3, #44	; 0x2c
 80046b0:	2200      	movs	r2, #0
 80046b2:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046ba:	332e      	adds	r3, #46	; 0x2e
 80046bc:	2200      	movs	r2, #0
 80046be:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80046c6:	3330      	adds	r3, #48	; 0x30
 80046c8:	2200      	movs	r2, #0
 80046ca:	801a      	strh	r2, [r3, #0]
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80046e0:	2300      	movs	r3, #0
 80046e2:	737b      	strb	r3, [r7, #13]
	bool goal_judge_flag = false;
 80046e4:	2300      	movs	r3, #0
 80046e6:	733b      	strb	r3, [r7, #12]
	start();
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ffb5 	bl	8004658 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80046ee:	7b7b      	ldrb	r3, [r7, #13]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 815f 	bne.w	80049b4 <_ZN9LineTrace7runningEv+0x2e0>
		switch(stage){
 80046f6:	89fb      	ldrh	r3, [r7, #14]
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	d03a      	beq.n	8004772 <_ZN9LineTrace7runningEv+0x9e>
 80046fc:	2b0a      	cmp	r3, #10
 80046fe:	d047      	beq.n	8004790 <_ZN9LineTrace7runningEv+0xbc>
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 80c7 	bne.w	8004894 <_ZN9LineTrace7runningEv+0x1c0>
		case 0:
			//if(side_sensor_->getWhiteLineCntR() == 1){
			if(side_sensor_->getStatusR() == true){
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	4618      	mov	r0, r3
 800470c:	f001 fb38 	bl	8005d80 <_ZN10SideSensor10getStatusREv>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80b9 	beq.w	800488a <_ZN9LineTrace7runningEv+0x1b6>
				loggerStart();
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7fe fb75 	bl	8002e08 <_ZN9LineTrace11loggerStartEv>
				logger_->start();
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fef9 	bl	800551a <_ZN6Logger5startEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800472e:	3364      	adds	r3, #100	; 0x64
 8004730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <_ZN9LineTrace7runningEv+0x6a>
					startVelocityPlay();
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff f8a5 	bl	8003888 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearSideLineIgnoreDistance();
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4618      	mov	r0, r3
 8004744:	f7fc ffcd 	bl	80016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
				encoder_->clearCrossLineIgnoreDistance();
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	4618      	mov	r0, r3
 800474e:	f7fc ffe5 	bl	800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fc ffa6 	bl	80016a8 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	330c      	adds	r3, #12
 8004760:	f04f 32ff 	mov.w	r2, #4294967295
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fdb0 	bl	80022cc <_ZN3LED2LREaa>
				stage = 5;
 800476c:	2305      	movs	r3, #5
 800476e:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8004770:	e08b      	b.n	800488a <_ZN9LineTrace7runningEv+0x1b6>

		case 5:
			if(side_sensor_->getStatusR() == false) stage = 10;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	4618      	mov	r0, r3
 8004778:	f001 fb02 	bl	8005d80 <_ZN10SideSensor10getStatusREv>
 800477c:	4603      	mov	r3, r0
 800477e:	f083 0301 	eor.w	r3, r3, #1
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8082 	beq.w	800488e <_ZN9LineTrace7runningEv+0x1ba>
 800478a:	230a      	movs	r3, #10
 800478c:	81fb      	strh	r3, [r7, #14]

			break;
 800478e:	e07e      	b.n	800488e <_ZN9LineTrace7runningEv+0x1ba>
		case 10:
			//if(side_sensor_->getWhiteLineCntR() == 2){
			if(side_sensor_->getStatusL() == true){
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	4618      	mov	r0, r3
 8004796:	f001 fae7 	bl	8005d68 <_ZN10SideSensor10getStatusLEv>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00c      	beq.n	80047ba <_ZN9LineTrace7runningEv+0xe6>
				goal_judge_flag = false;
 80047a0:	2300      	movs	r3, #0
 80047a2:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fc ffd4 	bl	8001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				led_.fullColor('B');
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	330c      	adds	r3, #12
 80047b2:	2142      	movs	r1, #66	; 0x42
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fd fccd 	bl	8002154 <_ZN3LED9fullColorEc>
			}

			if(goal_judge_flag == false && side_sensor_->getStatusR() == true && encoder_->getGoalJudgeDistance() >= 30){
 80047ba:	7b3b      	ldrb	r3, [r7, #12]
 80047bc:	f083 0301 	eor.w	r3, r3, #1
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d017      	beq.n	80047f6 <_ZN9LineTrace7runningEv+0x122>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 fad8 	bl	8005d80 <_ZN10SideSensor10getStatusREv>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00f      	beq.n	80047f6 <_ZN9LineTrace7runningEv+0x122>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc ffac 	bl	8001738 <_ZN7Encoder20getGoalJudgeDistanceEv>
 80047e0:	eeb0 7a40 	vmov.f32	s14, s0
 80047e4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80047e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f0:	db01      	blt.n	80047f6 <_ZN9LineTrace7runningEv+0x122>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <_ZN9LineTrace7runningEv+0x124>
 80047f6:	2300      	movs	r3, #0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d013      	beq.n	8004824 <_ZN9LineTrace7runningEv+0x150>
				goal_judge_flag = true;
 80047fc:	2301      	movs	r3, #1
 80047fe:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc ffa6 	bl	8001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				ignore_check_cnt_ = 0;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004810:	335c      	adds	r3, #92	; 0x5c
 8004812:	2200      	movs	r2, #0
 8004814:	801a      	strh	r2, [r3, #0]

				led_.fullColor('Y');
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	330c      	adds	r3, #12
 800481a:	2159      	movs	r1, #89	; 0x59
 800481c:	4618      	mov	r0, r3
 800481e:	f7fd fc99 	bl	8002154 <_ZN3LED9fullColorEc>
				goal_flag = true;
				goal_judge_flag = false;

			}

			break;
 8004822:	e036      	b.n	8004892 <_ZN9LineTrace7runningEv+0x1be>
			else if(goal_judge_flag == true && encoder_->getGoalJudgeDistance() >= 30){
 8004824:	7b3b      	ldrb	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00f      	beq.n	800484a <_ZN9LineTrace7runningEv+0x176>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fc ff82 	bl	8001738 <_ZN7Encoder20getGoalJudgeDistanceEv>
 8004834:	eeb0 7a40 	vmov.f32	s14, s0
 8004838:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800483c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004844:	db01      	blt.n	800484a <_ZN9LineTrace7runningEv+0x176>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <_ZN9LineTrace7runningEv+0x178>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d020      	beq.n	8004892 <_ZN9LineTrace7runningEv+0x1be>
				led_.fullColor('M');
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	330c      	adds	r3, #12
 8004854:	214d      	movs	r1, #77	; 0x4d
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd fc7c 	bl	8002154 <_ZN3LED9fullColorEc>
				loggerStop();
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7fe faee 	bl	8002e3e <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff f830 	bl	80038c8 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004868:	2064      	movs	r0, #100	; 0x64
 800486a:	f006 fe65 	bl	800b538 <HAL_Delay>
				setTargetVelocity(0);
 800486e:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80049c4 <_ZN9LineTrace7runningEv+0x2f0>
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff fbff 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800487c:	f006 fe5c 	bl	800b538 <HAL_Delay>
				goal_flag = true;
 8004880:	2301      	movs	r3, #1
 8004882:	737b      	strb	r3, [r7, #13]
				goal_judge_flag = false;
 8004884:	2300      	movs	r3, #0
 8004886:	733b      	strb	r3, [r7, #12]
			break;
 8004888:	e003      	b.n	8004892 <_ZN9LineTrace7runningEv+0x1be>
			break;
 800488a:	bf00      	nop
 800488c:	e002      	b.n	8004894 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 8004892:	bf00      	nop
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800489a:	3358      	adds	r3, #88	; 0x58
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	3301      	adds	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048a8:	3358      	adds	r3, #88	; 0x58
 80048aa:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048b2:	3358      	adds	r3, #88	; 0x58
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d906      	bls.n	80048cc <_ZN9LineTrace7runningEv+0x1f8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048c4:	3358      	adds	r3, #88	; 0x58
 80048c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80048ca:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048d2:	3358      	adds	r3, #88	; 0x58
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80048da:	d805      	bhi.n	80048e8 <_ZN9LineTrace7runningEv+0x214>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	330c      	adds	r3, #12
 80048e0:	2152      	movs	r1, #82	; 0x52
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fd fc36 	bl	8002154 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048ee:	335a      	adds	r3, #90	; 0x5a
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048fc:	335a      	adds	r3, #90	; 0x5a
 80048fe:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004906:	335a      	adds	r3, #90	; 0x5a
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	f242 720f 	movw	r2, #9999	; 0x270f
 800490e:	4293      	cmp	r3, r2
 8004910:	d906      	bls.n	8004920 <_ZN9LineTrace7runningEv+0x24c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004918:	335a      	adds	r3, #90	; 0x5a
 800491a:	f242 7210 	movw	r2, #10000	; 0x2710
 800491e:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 500) led_.LR(1, -1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004926:	335a      	adds	r3, #90	; 0x5a
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800492e:	d808      	bhi.n	8004942 <_ZN9LineTrace7runningEv+0x26e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	330c      	adds	r3, #12
 8004934:	f04f 32ff 	mov.w	r2, #4294967295
 8004938:	2101      	movs	r1, #1
 800493a:	4618      	mov	r0, r3
 800493c:	f7fd fcc6 	bl	80022cc <_ZN3LED2LREaa>
 8004940:	e007      	b.n	8004952 <_ZN9LineTrace7runningEv+0x27e>
		else led_.LR(0, -1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	330c      	adds	r3, #12
 8004946:	f04f 32ff 	mov.w	r2, #4294967295
 800494a:	2100      	movs	r1, #0
 800494c:	4618      	mov	r0, r3
 800494e:	f7fd fcbd 	bl	80022cc <_ZN3LED2LREaa>

		ignore_check_cnt_++;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004958:	335c      	adds	r3, #92	; 0x5c
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	3301      	adds	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004966:	335c      	adds	r3, #92	; 0x5c
 8004968:	801a      	strh	r2, [r3, #0]
		if(ignore_check_cnt_>= 10000) ignore_check_cnt_= 10000;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004970:	335c      	adds	r3, #92	; 0x5c
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	f242 720f 	movw	r2, #9999	; 0x270f
 8004978:	4293      	cmp	r3, r2
 800497a:	d906      	bls.n	800498a <_ZN9LineTrace7runningEv+0x2b6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004982:	335c      	adds	r3, #92	; 0x5c
 8004984:	f242 7210 	movw	r2, #10000	; 0x2710
 8004988:	801a      	strh	r2, [r3, #0]

		if(ignore_check_cnt_ <= 200) led_.fullColor('Y');
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004990:	335c      	adds	r3, #92	; 0x5c
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	2bc8      	cmp	r3, #200	; 0xc8
 8004996:	d806      	bhi.n	80049a6 <_ZN9LineTrace7runningEv+0x2d2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	330c      	adds	r3, #12
 800499c:	2159      	movs	r1, #89	; 0x59
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fd fbd8 	bl	8002154 <_ZN3LED9fullColorEc>
 80049a4:	e6a3      	b.n	80046ee <_ZN9LineTrace7runningEv+0x1a>
		else led_.fullColor('B');
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	330c      	adds	r3, #12
 80049aa:	2142      	movs	r1, #66	; 0x42
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fd fbd1 	bl	8002154 <_ZN3LED9fullColorEc>
	while(goal_flag == false){
 80049b2:	e69c      	b.n	80046ee <_ZN9LineTrace7runningEv+0x1a>
	}

	stop();
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f807 	bl	80049c8 <_ZN9LineTrace4stopEv>
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	00000000 	.word	0x00000000

080049c8 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4618      	mov	r0, r3
 80049de:	f001 fd8f 	bl	8006500 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	330c      	adds	r3, #12
 80049e6:	2201      	movs	r2, #1
 80049e8:	f04f 31ff 	mov.w	r1, #4294967295
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fd fc6d 	bl	80022cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80049f8:	3364      	adds	r3, #100	; 0x64
 80049fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d11e      	bne.n	8004a40 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69d8      	ldr	r0, [r3, #28]
 8004a06:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <_ZN9LineTrace4stopEv+0xd8>)
 8004a08:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <_ZN9LineTrace4stopEv+0xdc>)
 8004a0a:	4927      	ldr	r1, [pc, #156]	; (8004aa8 <_ZN9LineTrace4stopEv+0xe0>)
 8004a0c:	f000 fc67 	bl	80052de <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004a16:	3368      	adds	r3, #104	; 0x68
 8004a18:	2200      	movs	r2, #0
 8004a1a:	9200      	str	r2, [sp, #0]
 8004a1c:	2264      	movs	r2, #100	; 0x64
 8004a1e:	4923      	ldr	r1, [pc, #140]	; (8004aac <_ZN9LineTrace4stopEv+0xe4>)
 8004a20:	4821      	ldr	r0, [pc, #132]	; (8004aa8 <_ZN9LineTrace4stopEv+0xe0>)
 8004a22:	f7fc ff1b 	bl	800185c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004a2c:	3388      	adds	r3, #136	; 0x88
 8004a2e:	2200      	movs	r2, #0
 8004a30:	9200      	str	r2, [sp, #0]
 8004a32:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a36:	491e      	ldr	r1, [pc, #120]	; (8004ab0 <_ZN9LineTrace4stopEv+0xe8>)
 8004a38:	481b      	ldr	r0, [pc, #108]	; (8004aa8 <_ZN9LineTrace4stopEv+0xe0>)
 8004a3a:	f7fc ff0f 	bl	800185c <sd_write_array_float>
 8004a3e:	e01d      	b.n	8004a7c <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69d8      	ldr	r0, [r3, #28]
 8004a44:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <_ZN9LineTrace4stopEv+0xec>)
 8004a46:	4a1c      	ldr	r2, [pc, #112]	; (8004ab8 <_ZN9LineTrace4stopEv+0xf0>)
 8004a48:	4917      	ldr	r1, [pc, #92]	; (8004aa8 <_ZN9LineTrace4stopEv+0xe0>)
 8004a4a:	f000 fc6b 	bl	8005324 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004a54:	33f8      	adds	r3, #248	; 0xf8
 8004a56:	2200      	movs	r2, #0
 8004a58:	9200      	str	r2, [sp, #0]
 8004a5a:	2264      	movs	r2, #100	; 0x64
 8004a5c:	4917      	ldr	r1, [pc, #92]	; (8004abc <_ZN9LineTrace4stopEv+0xf4>)
 8004a5e:	4812      	ldr	r0, [pc, #72]	; (8004aa8 <_ZN9LineTrace4stopEv+0xe0>)
 8004a60:	f7fc fefc 	bl	800185c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 8004a6a:	3358      	adds	r3, #88	; 0x58
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	9200      	str	r2, [sp, #0]
 8004a70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a74:	4912      	ldr	r1, [pc, #72]	; (8004ac0 <_ZN9LineTrace4stopEv+0xf8>)
 8004a76:	480c      	ldr	r0, [pc, #48]	; (8004aa8 <_ZN9LineTrace4stopEv+0xe0>)
 8004a78:	f7fc fef0 	bl	800185c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	2200      	movs	r2, #0
 8004a82:	f04f 31ff 	mov.w	r1, #4294967295
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fd fc20 	bl	80022cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fd23 	bl	80054dc <_ZN6Logger8resetIdxEv>
	//logger_->resetLogsDis2();
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	0801a508 	.word	0x0801a508
 8004aa4:	0801a514 	.word	0x0801a514
 8004aa8:	0801a524 	.word	0x0801a524
 8004aac:	0801a530 	.word	0x0801a530
 8004ab0:	0801a540 	.word	0x0801a540
 8004ab4:	0801a54c 	.word	0x0801a54c
 8004ab8:	0801a558 	.word	0x0801a558
 8004abc:	0801a568 	.word	0x0801a568
 8004ac0:	0801a578 	.word	0x0801a578

08004ac4 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b08b      	sub	sp, #44	; 0x2c
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fbbe 	bl	8005252 <_ZN6Logger23getDistanceArrayPointerEv>
 8004ad6:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fbc6 	bl	800526e <_ZN6Logger20getThetaArrayPointerEv>
 8004ae2:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	837b      	strh	r3, [r7, #26]
 8004ae8:	8b7b      	ldrh	r3, [r7, #26]
 8004aea:	f241 726f 	movw	r2, #5999	; 0x176f
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d84b      	bhi.n	8004b8a <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8004af2:	8b7b      	ldrh	r3, [r7, #26]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4413      	add	r3, r2
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004afe:	8b7b      	ldrh	r3, [r7, #26]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004b0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b16:	d101      	bne.n	8004b1c <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004b18:	4b75      	ldr	r3, [pc, #468]	; (8004cf0 <_ZN9LineTrace20createVelocityTabeleEv+0x22c>)
 8004b1a:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004b1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b20:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004b28:	eeb0 0a66 	vmov.f32	s0, s13
 8004b2c:	f7fd fed4 	bl	80028d8 <_ZSt3absf>
 8004b30:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004b34:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b38:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004cf4 <_ZN9LineTrace20createVelocityTabeleEv+0x230>
 8004b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b44:	db01      	blt.n	8004b4a <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8004b46:	4b6c      	ldr	r3, [pc, #432]	; (8004cf8 <_ZN9LineTrace20createVelocityTabeleEv+0x234>)
 8004b48:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004b4a:	8b7c      	ldrh	r4, [r7, #26]
 8004b4c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7fe fbd9 	bl	8003308 <_ZN9LineTrace15radius2VelocityEf>
 8004b56:	eef0 7a40 	vmov.f32	s15, s0
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004b60:	3308      	adds	r3, #8
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004b6a:	8b7b      	ldrh	r3, [r7, #26]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	441a      	add	r2, r3
 8004b72:	8b7b      	ldrh	r3, [r7, #26]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	3336      	adds	r3, #54	; 0x36
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	3304      	adds	r3, #4
 8004b80:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004b82:	8b7b      	ldrh	r3, [r7, #26]
 8004b84:	3301      	adds	r3, #1
 8004b86:	837b      	strh	r3, [r7, #26]
 8004b88:	e7ae      	b.n	8004ae8 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004b90:	3364      	adds	r3, #100	; 0x64
 8004b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d120      	bne.n	8004bdc <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004ba6:	3320      	adds	r3, #32
 8004ba8:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004bb0:	333c      	adds	r3, #60	; 0x3c
 8004bb2:	edd3 7a00 	vldr	s15, [r3]
 8004bb6:	6939      	ldr	r1, [r7, #16]
 8004bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fe fd1b 	bl	80035f8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004bc8:	3338      	adds	r3, #56	; 0x38
 8004bca:	edd3 7a00 	vldr	s15, [r3]
 8004bce:	6939      	ldr	r1, [r7, #16]
 8004bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fe fdb3 	bl	8003740 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004bda:	e079      	b.n	8004cd0 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004be2:	3364      	adds	r3, #100	; 0x64
 8004be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d120      	bne.n	8004c2e <_ZN9LineTrace20createVelocityTabeleEv+0x16a>
		velocity_table_[0] = min_velocity2_;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004bf8:	3320      	adds	r3, #32
 8004bfa:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004c02:	3344      	adds	r3, #68	; 0x44
 8004c04:	edd3 7a00 	vldr	s15, [r3]
 8004c08:	6939      	ldr	r1, [r7, #16]
 8004c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fe fcf2 	bl	80035f8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004c1a:	3340      	adds	r3, #64	; 0x40
 8004c1c:	edd3 7a00 	vldr	s15, [r3]
 8004c20:	6939      	ldr	r1, [r7, #16]
 8004c22:	eeb0 0a67 	vmov.f32	s0, s15
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fe fd8a 	bl	8003740 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004c2c:	e050      	b.n	8004cd0 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004c34:	3364      	adds	r3, #100	; 0x64
 8004c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d120      	bne.n	8004c80 <_ZN9LineTrace20createVelocityTabeleEv+0x1bc>
		velocity_table_[0] = min_velocity3_;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004c4a:	3320      	adds	r3, #32
 8004c4c:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec3_, p_distance);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004c54:	334c      	adds	r3, #76	; 0x4c
 8004c56:	edd3 7a00 	vldr	s15, [r3]
 8004c5a:	6939      	ldr	r1, [r7, #16]
 8004c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7fe fcc9 	bl	80035f8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc3_, p_distance);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004c6c:	3348      	adds	r3, #72	; 0x48
 8004c6e:	edd3 7a00 	vldr	s15, [r3]
 8004c72:	6939      	ldr	r1, [r7, #16]
 8004c74:	eeb0 0a67 	vmov.f32	s0, s15
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7fe fd61 	bl	8003740 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004c7e:	e027      	b.n	8004cd0 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004c86:	3364      	adds	r3, #100	; 0x64
 8004c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d11f      	bne.n	8004cd0 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
		velocity_table_[0] = min_velocity4_;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004c9c:	3320      	adds	r3, #32
 8004c9e:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec4_, p_distance);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004ca6:	3354      	adds	r3, #84	; 0x54
 8004ca8:	edd3 7a00 	vldr	s15, [r3]
 8004cac:	6939      	ldr	r1, [r7, #16]
 8004cae:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fe fca0 	bl	80035f8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc4_, p_distance);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004cbe:	3350      	adds	r3, #80	; 0x50
 8004cc0:	edd3 7a00 	vldr	s15, [r3]
 8004cc4:	6939      	ldr	r1, [r7, #16]
 8004cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fe fd38 	bl	8003740 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004cd6:	3320      	adds	r3, #32
 8004cd8:	2200      	movs	r2, #0
 8004cda:	9200      	str	r2, [sp, #0]
 8004cdc:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ce0:	4906      	ldr	r1, [pc, #24]	; (8004cfc <_ZN9LineTrace20createVelocityTabeleEv+0x238>)
 8004ce2:	4807      	ldr	r0, [pc, #28]	; (8004d00 <_ZN9LineTrace20createVelocityTabeleEv+0x23c>)
 8004ce4:	f7fc fdba 	bl	800185c <sd_write_array_float>

}
 8004ce8:	bf00      	nop
 8004cea:	3724      	adds	r7, #36	; 0x24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd90      	pop	{r4, r7, pc}
 8004cf0:	3727c5ac 	.word	0x3727c5ac
 8004cf4:	459c4000 	.word	0x459c4000
 8004cf8:	459c4000 	.word	0x459c4000
 8004cfc:	0801a588 	.word	0x0801a588
 8004d00:	0801a524 	.word	0x0801a524

08004d04 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b08b      	sub	sp, #44	; 0x2c
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69d8      	ldr	r0, [r3, #28]
 8004d10:	4b94      	ldr	r3, [pc, #592]	; (8004f64 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x260>)
 8004d12:	4a95      	ldr	r2, [pc, #596]	; (8004f68 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x264>)
 8004d14:	4995      	ldr	r1, [pc, #596]	; (8004f6c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004d16:	f000 fb29 	bl	800536c <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004d20:	3368      	adds	r3, #104	; 0x68
 8004d22:	2264      	movs	r2, #100	; 0x64
 8004d24:	4992      	ldr	r1, [pc, #584]	; (8004f70 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x26c>)
 8004d26:	4891      	ldr	r0, [pc, #580]	; (8004f6c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004d28:	f7fc fdfe 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004d32:	3388      	adds	r3, #136	; 0x88
 8004d34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d38:	498e      	ldr	r1, [pc, #568]	; (8004f74 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x270>)
 8004d3a:	488c      	ldr	r0, [pc, #560]	; (8004f6c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004d3c:	f7fc fdf4 	bl	8001928 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fa84 	bl	8005252 <_ZN6Logger23getDistanceArrayPointerEv>
 8004d4a:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fa8c 	bl	800526e <_ZN6Logger20getThetaArrayPointerEv>
 8004d56:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004d58:	2300      	movs	r3, #0
 8004d5a:	837b      	strh	r3, [r7, #26]
 8004d5c:	8b7b      	ldrh	r3, [r7, #26]
 8004d5e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d84b      	bhi.n	8004dfe <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 8004d66:	8b7b      	ldrh	r3, [r7, #26]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004d72:	8b7b      	ldrh	r3, [r7, #26]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004d7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8a:	d101      	bne.n	8004d90 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004d8c:	4b7a      	ldr	r3, [pc, #488]	; (8004f78 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x274>)
 8004d8e:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004d90:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d94:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d9c:	eeb0 0a66 	vmov.f32	s0, s13
 8004da0:	f7fd fd9a 	bl	80028d8 <_ZSt3absf>
 8004da4:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004da8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004dac:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004f7c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x278>
 8004db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db8:	db01      	blt.n	8004dbe <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004dba:	4b71      	ldr	r3, [pc, #452]	; (8004f80 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x27c>)
 8004dbc:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004dbe:	8b7c      	ldrh	r4, [r7, #26]
 8004dc0:	ed97 0a05 	vldr	s0, [r7, #20]
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7fe fa9f 	bl	8003308 <_ZN9LineTrace15radius2VelocityEf>
 8004dca:	eef0 7a40 	vmov.f32	s15, s0
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004dde:	8b7b      	ldrh	r3, [r7, #26]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	441a      	add	r2, r3
 8004de6:	8b7b      	ldrh	r3, [r7, #26]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	3336      	adds	r3, #54	; 0x36
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3304      	adds	r3, #4
 8004df4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004df6:	8b7b      	ldrh	r3, [r7, #26]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	837b      	strh	r3, [r7, #26]
 8004dfc:	e7ae      	b.n	8004d5c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004e04:	3364      	adds	r3, #100	; 0x64
 8004e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d120      	bne.n	8004e50 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004e1a:	3320      	adds	r3, #32
 8004e1c:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004e24:	333c      	adds	r3, #60	; 0x3c
 8004e26:	edd3 7a00 	vldr	s15, [r3]
 8004e2a:	6939      	ldr	r1, [r7, #16]
 8004e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fe fbe1 	bl	80035f8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004e3c:	3338      	adds	r3, #56	; 0x38
 8004e3e:	edd3 7a00 	vldr	s15, [r3]
 8004e42:	6939      	ldr	r1, [r7, #16]
 8004e44:	eeb0 0a67 	vmov.f32	s0, s15
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fe fc79 	bl	8003740 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004e4e:	e079      	b.n	8004f44 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004e56:	3364      	adds	r3, #100	; 0x64
 8004e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d120      	bne.n	8004ea2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19e>
		velocity_table_[0] = min_velocity2_;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004e6c:	3320      	adds	r3, #32
 8004e6e:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004e76:	3344      	adds	r3, #68	; 0x44
 8004e78:	edd3 7a00 	vldr	s15, [r3]
 8004e7c:	6939      	ldr	r1, [r7, #16]
 8004e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fe fbb8 	bl	80035f8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004e8e:	3340      	adds	r3, #64	; 0x40
 8004e90:	edd3 7a00 	vldr	s15, [r3]
 8004e94:	6939      	ldr	r1, [r7, #16]
 8004e96:	eeb0 0a67 	vmov.f32	s0, s15
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fe fc50 	bl	8003740 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004ea0:	e050      	b.n	8004f44 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004ea8:	3364      	adds	r3, #100	; 0x64
 8004eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d120      	bne.n	8004ef4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1f0>
		velocity_table_[0] = min_velocity3_;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004ebe:	3320      	adds	r3, #32
 8004ec0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec3_, p_distance);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004ec8:	334c      	adds	r3, #76	; 0x4c
 8004eca:	edd3 7a00 	vldr	s15, [r3]
 8004ece:	6939      	ldr	r1, [r7, #16]
 8004ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7fe fb8f 	bl	80035f8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc3_, p_distance);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004ee0:	3348      	adds	r3, #72	; 0x48
 8004ee2:	edd3 7a00 	vldr	s15, [r3]
 8004ee6:	6939      	ldr	r1, [r7, #16]
 8004ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fe fc27 	bl	8003740 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004ef2:	e027      	b.n	8004f44 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004efa:	3364      	adds	r3, #100	; 0x64
 8004efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d11f      	bne.n	8004f44 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
		velocity_table_[0] = min_velocity4_;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004f10:	3320      	adds	r3, #32
 8004f12:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec4_, p_distance);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004f1a:	3354      	adds	r3, #84	; 0x54
 8004f1c:	edd3 7a00 	vldr	s15, [r3]
 8004f20:	6939      	ldr	r1, [r7, #16]
 8004f22:	eeb0 0a67 	vmov.f32	s0, s15
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fe fb66 	bl	80035f8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc4_, p_distance);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004f32:	3350      	adds	r3, #80	; 0x50
 8004f34:	edd3 7a00 	vldr	s15, [r3]
 8004f38:	6939      	ldr	r1, [r7, #16]
 8004f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fe fbfe 	bl	8003740 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004f4a:	3320      	adds	r3, #32
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	9200      	str	r2, [sp, #0]
 8004f50:	f241 7270 	movw	r2, #6000	; 0x1770
 8004f54:	490b      	ldr	r1, [pc, #44]	; (8004f84 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x280>)
 8004f56:	4805      	ldr	r0, [pc, #20]	; (8004f6c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004f58:	f7fc fc80 	bl	800185c <sd_write_array_float>

}
 8004f5c:	bf00      	nop
 8004f5e:	3724      	adds	r7, #36	; 0x24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd90      	pop	{r4, r7, pc}
 8004f64:	0801a508 	.word	0x0801a508
 8004f68:	0801a514 	.word	0x0801a514
 8004f6c:	0801a524 	.word	0x0801a524
 8004f70:	0801a530 	.word	0x0801a530
 8004f74:	0801a540 	.word	0x0801a540
 8004f78:	3727c5ac 	.word	0x3727c5ac
 8004f7c:	459c4000 	.word	0x459c4000
 8004f80:	459c4000 	.word	0x459c4000
 8004f84:	0801a588 	.word	0x0801a588

08004f88 <_ZN6LoggerC1Ev>:
#include "AQM0802.h"

uint16_t mon_idx1, mon_idx2;
float mon_data1, mon_data2, mon_data3;

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f96:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fa4:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004fa8:	2200      	movs	r2, #0
 8004faa:	801a      	strh	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fb2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fc0:	f203 33a6 	addw	r3, r3, #934	; 0x3a6
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	801a      	strh	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fce:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004fdc:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8005000:	f7fc fd1e 	bl	8001a40 <sd_mount>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	bf0c      	ite	eq
 800500a:	2301      	moveq	r3, #1
 800500c:	2300      	movne	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d016      	beq.n	8005042 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8005014:	f7fc f844 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8005018:	2100      	movs	r1, #0
 800501a:	2000      	movs	r0, #0
 800501c:	f7fc f850 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8005020:	4815      	ldr	r0, [pc, #84]	; (8005078 <_ZN6Logger10sdCardInitEv+0x84>)
 8005022:	f7fc f877 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8005026:	2101      	movs	r1, #1
 8005028:	2000      	movs	r0, #0
 800502a:	f7fc f849 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800502e:	4813      	ldr	r0, [pc, #76]	; (800507c <_ZN6Logger10sdCardInitEv+0x88>)
 8005030:	f7fc f870 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8005034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005038:	f006 fa7e 	bl	800b538 <HAL_Delay>

	  ret = true;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
 8005040:	e015      	b.n	800506e <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8005042:	f7fc f82d 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8005046:	2100      	movs	r1, #0
 8005048:	2000      	movs	r0, #0
 800504a:	f7fc f839 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800504e:	480a      	ldr	r0, [pc, #40]	; (8005078 <_ZN6Logger10sdCardInitEv+0x84>)
 8005050:	f7fc f860 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8005054:	2101      	movs	r1, #1
 8005056:	2000      	movs	r0, #0
 8005058:	f7fc f832 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 800505c:	4808      	ldr	r0, [pc, #32]	; (8005080 <_ZN6Logger10sdCardInitEv+0x8c>)
 800505e:	f7fc f859 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8005062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005066:	f006 fa67 	bl	800b538 <HAL_Delay>

	  ret = false;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	0801a598 	.word	0x0801a598
 800507c:	0801a5a4 	.word	0x0801a5a4
 8005080:	0801a5ac 	.word	0x0801a5ac

08005084 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005096:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d034      	beq.n	800510a <_ZN6Logger8storeLogEf+0x86>
		store_data_float_[log_index_tim_] = data;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80050a6:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80050bc:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	3301      	adds	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80050cc:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80050d0:	801a      	strh	r2, [r3, #0]
		mon_idx1 = log_index_tim_;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80050d8:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80050dc:	881a      	ldrh	r2, [r3, #0]
 80050de:	4b0e      	ldr	r3, [pc, #56]	; (8005118 <_ZN6Logger8storeLogEf+0x94>)
 80050e0:	801a      	strh	r2, [r3, #0]
		mon_data1 = data;
 80050e2:	4a0e      	ldr	r2, [pc, #56]	; (800511c <_ZN6Logger8storeLogEf+0x98>)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6013      	str	r3, [r2, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80050ee:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d906      	bls.n	800510a <_ZN6Logger8storeLogEf+0x86>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005102:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8005106:	2200      	movs	r2, #0
 8005108:	801a      	strh	r2, [r3, #0]
	}
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	2000021e 	.word	0x2000021e
 800511c:	20000224 	.word	0x20000224

08005120 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005132:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d036      	beq.n	80051aa <_ZN6Logger9storeLog2Ef+0x8a>
		store_data_float2_[log_index_tim2_] = data;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005142:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800515c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800516c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005170:	801a      	strh	r2, [r3, #0]
		mon_idx2 = log_index_tim2_;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005178:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800517c:	881a      	ldrh	r2, [r3, #0]
 800517e:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <_ZN6Logger9storeLog2Ef+0x98>)
 8005180:	801a      	strh	r2, [r3, #0]
		mon_data2 = data;
 8005182:	4a0e      	ldr	r2, [pc, #56]	; (80051bc <_ZN6Logger9storeLog2Ef+0x9c>)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6013      	str	r3, [r2, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800518e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005198:	4293      	cmp	r3, r2
 800519a:	d906      	bls.n	80051aa <_ZN6Logger9storeLog2Ef+0x8a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80051a2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80051a6:	2200      	movs	r2, #0
 80051a8:	801a      	strh	r2, [r3, #0]
	}
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	20000220 	.word	0x20000220
 80051bc:	20000228 	.word	0x20000228

080051c0 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80051cc:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80051d6:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 80051e2:	3328      	adds	r3, #40	; 0x28
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80051f2:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80051fe:	3318      	adds	r3, #24
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800520e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800521e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005222:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800522a:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	f241 726f 	movw	r2, #5999	; 0x176f
 8005234:	4293      	cmp	r3, r2
 8005236:	d906      	bls.n	8005246 <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800523e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005242:	2200      	movs	r2, #0
 8005244:	801a      	strh	r2, [r3, #0]
	//}
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <_ZN6Logger23getDistanceArrayPointerEv>:

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	//}
}
const float *Logger::getDistanceArrayPointer()
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8005260:	33a0      	adds	r3, #160	; 0xa0
}
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800527c:	3360      	adds	r3, #96	; 0x60
}
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	af02      	add	r7, sp, #8
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	2300      	movs	r3, #0
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	68b8      	ldr	r0, [r7, #8]
 80052a6:	f7fc fad9 	bl	800185c <sd_write_array_float>
}
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b086      	sub	sp, #24
 80052b6:	af02      	add	r7, sp, #8
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80052c4:	3320      	adds	r3, #32
 80052c6:	2200      	movs	r2, #0
 80052c8:	9200      	str	r2, [sp, #0]
 80052ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	68b8      	ldr	r0, [r7, #8]
 80052d2:	f7fc fac3 	bl	800185c <sd_write_array_float>
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b086      	sub	sp, #24
 80052e2:	af02      	add	r7, sp, #8
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
 80052ea:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80052f2:	33a0      	adds	r3, #160	; 0xa0
 80052f4:	2200      	movs	r2, #0
 80052f6:	9200      	str	r2, [sp, #0]
 80052f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	68b8      	ldr	r0, [r7, #8]
 8005300:	f7fc faac 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800530a:	3360      	adds	r3, #96	; 0x60
 800530c:	2200      	movs	r2, #0
 800530e:	9200      	str	r2, [sp, #0]
 8005310:	f241 7270 	movw	r2, #6000	; 0x1770
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	68b8      	ldr	r0, [r7, #8]
 8005318:	f7fc faa0 	bl	800185c <sd_write_array_float>
}
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005338:	3320      	adds	r3, #32
 800533a:	2200      	movs	r2, #0
 800533c:	9200      	str	r2, [sp, #0]
 800533e:	f241 7270 	movw	r2, #6000	; 0x1770
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	68b8      	ldr	r0, [r7, #8]
 8005346:	f7fc fa89 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8005350:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005354:	2200      	movs	r2, #0
 8005356:	9200      	str	r2, [sp, #0]
 8005358:	f241 7270 	movw	r2, #6000	; 0x1770
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	68b8      	ldr	r0, [r7, #8]
 8005360:	f7fc fa7c 	bl	800185c <sd_write_array_float>
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8005380:	33a0      	adds	r3, #160	; 0xa0
 8005382:	f241 7270 	movw	r2, #6000	; 0x1770
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	68b8      	ldr	r0, [r7, #8]
 800538a:	f7fc facd 	bl	8001928 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8005394:	3360      	adds	r3, #96	; 0x60
 8005396:	f241 7270 	movw	r2, #6000	; 0x1770
 800539a:	6839      	ldr	r1, [r7, #0]
 800539c:	68b8      	ldr	r0, [r7, #8]
 800539e:	f7fc fac3 	bl	8001928 <sd_read_array_float>
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <_ZN6Logger13resetLogsDis2Ev>:

	log_index_tim_ = 0;
}

void Logger::resetLogsDis2()
{
 80053aa:	b480      	push	{r7}
 80053ac:	b08b      	sub	sp, #44	; 0x2c
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80053b8:	3320      	adds	r3, #32
 80053ba:	61fb      	str	r3, [r7, #28]
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80053c6:	3340      	adds	r3, #64	; 0x40
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d009      	beq.n	80053e6 <_ZN6Logger13resetLogsDis2Ev+0x3c>
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	617b      	str	r3, [r7, #20]
		log = 0;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	3304      	adds	r3, #4
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
 80053e4:	e7f1      	b.n	80053ca <_ZN6Logger13resetLogsDis2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 80053ec:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	623b      	str	r3, [r7, #32]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80053fc:	3340      	adds	r3, #64	; 0x40
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	6a3a      	ldr	r2, [r7, #32]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	429a      	cmp	r2, r3
 8005406:	d009      	beq.n	800541c <_ZN6Logger13resetLogsDis2Ev+0x72>
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	60bb      	str	r3, [r7, #8]
		log = 0;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	3304      	adds	r3, #4
 8005418:	623b      	str	r3, [r7, #32]
 800541a:	e7f1      	b.n	8005400 <_ZN6Logger13resetLogsDis2Ev+0x56>
	}

	log_index_tim2_ = 0;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005422:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005426:	2200      	movs	r2, #0
 8005428:	801a      	strh	r2, [r3, #0]
}
 800542a:	bf00      	nop
 800542c:	372c      	adds	r7, #44	; 0x2c
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <_ZN6Logger13resetLogsTim1Ev>:

void Logger::resetLogsTim1()
{
 8005436:	b480      	push	{r7}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800544c:	3320      	adds	r3, #32
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	429a      	cmp	r2, r3
 8005456:	d009      	beq.n	800546c <_ZN6Logger13resetLogsTim1Ev+0x36>
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	60bb      	str	r3, [r7, #8]
		log = 0;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3304      	adds	r3, #4
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e7f1      	b.n	8005450 <_ZN6Logger13resetLogsTim1Ev+0x1a>
	}

	log_index_tim_ = 0;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005472:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8005476:	2200      	movs	r2, #0
 8005478:	801a      	strh	r2, [r3, #0]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <_ZN6Logger13resetLogsTim2Ev>:

void Logger::resetLogsTim2()
{
 8005486:	b480      	push	{r7}
 8005488:	b087      	sub	sp, #28
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float2_){
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8005494:	3320      	adds	r3, #32
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80054a2:	3320      	adds	r3, #32
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d009      	beq.n	80054c2 <_ZN6Logger13resetLogsTim2Ev+0x3c>
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	60bb      	str	r3, [r7, #8]
		log = 0;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	3304      	adds	r3, #4
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	e7f1      	b.n	80054a6 <_ZN6Logger13resetLogsTim2Ev+0x20>
	}

	log_index_tim2_ = 0;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80054c8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80054cc:	2200      	movs	r2, #0
 80054ce:	801a      	strh	r2, [r3, #0]
}
 80054d0:	bf00      	nop
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80054ea:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80054ee:	2200      	movs	r2, #0
 80054f0:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80054f8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80054fc:	2200      	movs	r2, #0
 80054fe:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005506:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800550a:	2200      	movs	r2, #0
 800550c:	801a      	strh	r2, [r3, #0]
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <_ZN6Logger5startEv>:

void Logger::start()
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005528:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 800552c:	2200      	movs	r2, #0
 800552e:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005536:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800553a:	2200      	movs	r2, #0
 800553c:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005544:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8005548:	2201      	movs	r2, #1
 800554a:	701a      	strb	r2, [r3, #0]
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005566:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	805a      	strh	r2, [r3, #2]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <_ZN5Motor4initEv>:

void Motor::init()
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80055a4:	2108      	movs	r1, #8
 80055a6:	4805      	ldr	r0, [pc, #20]	; (80055bc <_ZN5Motor4initEv+0x20>)
 80055a8:	f00b f98e 	bl	80108c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80055ac:	210c      	movs	r1, #12
 80055ae:	4803      	ldr	r0, [pc, #12]	; (80055bc <_ZN5Motor4initEv+0x20>)
 80055b0:	f00b f98a 	bl	80108c8 <HAL_TIM_PWM_Start>

}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20047774 	.word	0x20047774

080055c0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	da0d      	bge.n	80055ee <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80055d2:	2200      	movs	r2, #0
 80055d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055d8:	481f      	ldr	r0, [pc, #124]	; (8005658 <_ZN5Motor9motorCtrlEv+0x98>)
 80055da:	f007 fa43 	bl	800ca64 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	425b      	negs	r3, r3
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	81fb      	strh	r3, [r7, #14]
 80055ec:	e00a      	b.n	8005604 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80055ee:	2201      	movs	r2, #1
 80055f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055f4:	4818      	ldr	r0, [pc, #96]	; (8005658 <_ZN5Motor9motorCtrlEv+0x98>)
 80055f6:	f007 fa35 	bl	800ca64 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005600:	b29b      	uxth	r3, r3
 8005602:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800560a:	2b00      	cmp	r3, #0
 800560c:	da0d      	bge.n	800562a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800560e:	2201      	movs	r2, #1
 8005610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005614:	4810      	ldr	r0, [pc, #64]	; (8005658 <_ZN5Motor9motorCtrlEv+0x98>)
 8005616:	f007 fa25 	bl	800ca64 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005620:	b29b      	uxth	r3, r3
 8005622:	425b      	negs	r3, r3
 8005624:	b29b      	uxth	r3, r3
 8005626:	81bb      	strh	r3, [r7, #12]
 8005628:	e00a      	b.n	8005640 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800562a:	2200      	movs	r2, #0
 800562c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005630:	4809      	ldr	r0, [pc, #36]	; (8005658 <_ZN5Motor9motorCtrlEv+0x98>)
 8005632:	f007 fa17 	bl	800ca64 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800563c:	b29b      	uxth	r3, r3
 800563e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8005640:	89fa      	ldrh	r2, [r7, #14]
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <_ZN5Motor9motorCtrlEv+0x9c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8005648:	89ba      	ldrh	r2, [r7, #12]
 800564a:	4b04      	ldr	r3, [pc, #16]	; (800565c <_ZN5Motor9motorCtrlEv+0x9c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40020c00 	.word	0x40020c00
 800565c:	20047774 	.word	0x20047774

08005660 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8005660:	b590      	push	{r4, r7, lr}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6178      	str	r0, [r7, #20]
 8005668:	ed87 0b02 	vstr	d0, [r7, #8]
 800566c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	4b30      	ldr	r3, [pc, #192]	; (8005738 <_ZN5Motor8setRatioEdd+0xd8>)
 8005676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800567a:	f7fb fa65 	bl	8000b48 <__aeabi_dcmpgt>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <_ZN5Motor8setRatioEdd+0x30>
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	4c2b      	ldr	r4, [pc, #172]	; (8005738 <_ZN5Motor8setRatioEdd+0xd8>)
 800568a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800568e:	e00e      	b.n	80056ae <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	4b29      	ldr	r3, [pc, #164]	; (800573c <_ZN5Motor8setRatioEdd+0xdc>)
 8005696:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800569a:	f7fb fa37 	bl	8000b0c <__aeabi_dcmplt>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <_ZN5Motor8setRatioEdd+0x4e>
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	4c24      	ldr	r4, [pc, #144]	; (800573c <_ZN5Motor8setRatioEdd+0xdc>)
 80056aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	4b21      	ldr	r3, [pc, #132]	; (8005738 <_ZN5Motor8setRatioEdd+0xd8>)
 80056b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056b8:	f7fb fa46 	bl	8000b48 <__aeabi_dcmpgt>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <_ZN5Motor8setRatioEdd+0x6e>
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	4c1c      	ldr	r4, [pc, #112]	; (8005738 <_ZN5Motor8setRatioEdd+0xd8>)
 80056c8:	e9c7 3400 	strd	r3, r4, [r7]
 80056cc:	e00e      	b.n	80056ec <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	4b1a      	ldr	r3, [pc, #104]	; (800573c <_ZN5Motor8setRatioEdd+0xdc>)
 80056d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d8:	f7fb fa18 	bl	8000b0c <__aeabi_dcmplt>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <_ZN5Motor8setRatioEdd+0x8c>
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	4c15      	ldr	r4, [pc, #84]	; (800573c <_ZN5Motor8setRatioEdd+0xdc>)
 80056e8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	4b13      	ldr	r3, [pc, #76]	; (8005740 <_ZN5Motor8setRatioEdd+0xe0>)
 80056f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056f6:	f7fa ff97 	bl	8000628 <__aeabi_dmul>
 80056fa:	4603      	mov	r3, r0
 80056fc:	460c      	mov	r4, r1
 80056fe:	4618      	mov	r0, r3
 8005700:	4621      	mov	r1, r4
 8005702:	f7fb fa41 	bl	8000b88 <__aeabi_d2iz>
 8005706:	4603      	mov	r3, r0
 8005708:	b21a      	sxth	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <_ZN5Motor8setRatioEdd+0xe0>)
 8005714:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005718:	f7fa ff86 	bl	8000628 <__aeabi_dmul>
 800571c:	4603      	mov	r3, r0
 800571e:	460c      	mov	r4, r1
 8005720:	4618      	mov	r0, r3
 8005722:	4621      	mov	r1, r4
 8005724:	f7fb fa30 	bl	8000b88 <__aeabi_d2iz>
 8005728:	4603      	mov	r3, r0
 800572a:	b21a      	sxth	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	805a      	strh	r2, [r3, #2]

}
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd90      	pop	{r4, r7, pc}
 8005738:	3ff00000 	.word	0x3ff00000
 800573c:	bff00000 	.word	0xbff00000
 8005740:	409c2000 	.word	0x409c2000

08005744 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8005744:	b490      	push	{r4, r7}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	f04f 0400 	mov.w	r4, #0
 800575c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	f04f 0400 	mov.w	r4, #0
 800576a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	f04f 0400 	mov.w	r4, #0
 8005778:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	f04f 0400 	mov.w	r4, #0
 8005786:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	f04f 0400 	mov.w	r4, #0
 8005794:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	609a      	str	r2, [r3, #8]
}
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc90      	pop	{r4, r7}
 80057b4:	4770      	bx	lr
	...

080057b8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fc fb03 	bl	8001dd0 <_ZN3IMU8getOmegaEv>
 80057ca:	ee10 3a10 	vmov	r3, s0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fa fed2 	bl	8000578 <__aeabi_f2d>
 80057d4:	4603      	mov	r3, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 80057dc:	a310      	add	r3, pc, #64	; (adr r3, 8005820 <_ZN8Odometry12calcPotitionEv+0x68>)
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057e6:	f7fa ff1f 	bl	8000628 <__aeabi_dmul>
 80057ea:	4603      	mov	r3, r0
 80057ec:	460c      	mov	r4, r1
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005800:	461a      	mov	r2, r3
 8005802:	4623      	mov	r3, r4
 8005804:	f7fa fd5a 	bl	80002bc <__adddf3>
 8005808:	4603      	mov	r3, r0
 800580a:	460c      	mov	r4, r1
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	bd90      	pop	{r4, r7, pc}
 800581a:	bf00      	nop
 800581c:	f3af 8000 	nop.w
 8005820:	d2f1a9fc 	.word	0xd2f1a9fc
 8005824:	3f50624d 	.word	0x3f50624d

08005828 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ffc1 	bl	80057b8 <_ZN8Odometry12calcPotitionEv>
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800583e:	b490      	push	{r4, r7}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
	return theta_;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800584c:	ec44 3b17 	vmov	d7, r3, r4
}
 8005850:	eeb0 0a47 	vmov.f32	s0, s14
 8005854:	eef0 0a67 	vmov.f32	s1, s15
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bc90      	pop	{r4, r7}
 800585e:	4770      	bx	lr

08005860 <_ZN8Odometry13getDeltaThetaEv>:

double Odometry::getDeltaTheta()
{
 8005860:	b490      	push	{r4, r7}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	return delta_theta_;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800586e:	ec44 3b17 	vmov	d7, r3, r4
}
 8005872:	eeb0 0a47 	vmov.f32	s0, s14
 8005876:	eef0 0a67 	vmov.f32	s1, s15
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bc90      	pop	{r4, r7}
 8005880:	4770      	bx	lr

08005882 <_ZN8Odometry13clearPotitionEv>:

void Odometry::clearPotition()
{
 8005882:	b490      	push	{r4, r7}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	f04f 0400 	mov.w	r4, #0
 8005894:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	f04f 0400 	mov.w	r4, #0
 80058a2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	f04f 0400 	mov.w	r4, #0
 80058b0:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80058b4:	bf00      	nop
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc90      	pop	{r4, r7}
 80058bc:	4770      	bx	lr
	...

080058c0 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80058c0:	b490      	push	{r4, r7}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	f04f 0400 	mov.w	r4, #0
 80058d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	f04f 0400 	mov.w	r4, #0
 80058e6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	f04f 0300 	mov.w	r3, #0
 80058f0:	f04f 0400 	mov.w	r4, #0
 80058f4:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80058fe:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005902:	2200      	movs	r2, #0
 8005904:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005906:	4a29      	ldr	r2, [pc, #164]	; (80059ac <_ZN13PathFollowingC1Ev+0xec>)
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	f04f 0400 	mov.w	r4, #0
 8005910:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005914:	4a25      	ldr	r2, [pc, #148]	; (80059ac <_ZN13PathFollowingC1Ev+0xec>)
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	f04f 0400 	mov.w	r4, #0
 800591e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005922:	4a22      	ldr	r2, [pc, #136]	; (80059ac <_ZN13PathFollowingC1Ev+0xec>)
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	f04f 0400 	mov.w	r4, #0
 800592c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005930:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <_ZN13PathFollowingC1Ev+0xf0>)
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	f04f 0400 	mov.w	r4, #0
 800593a:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800593e:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <_ZN13PathFollowingC1Ev+0xf0>)
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	f04f 0400 	mov.w	r4, #0
 8005948:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800594c:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <_ZN13PathFollowingC1Ev+0xf0>)
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	f04f 0400 	mov.w	r4, #0
 8005956:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800595a:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <_ZN13PathFollowingC1Ev+0xf0>)
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	f04f 0400 	mov.w	r4, #0
 8005964:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005968:	4a11      	ldr	r2, [pc, #68]	; (80059b0 <_ZN13PathFollowingC1Ev+0xf0>)
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	f04f 0400 	mov.w	r4, #0
 8005972:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8005976:	4a0e      	ldr	r2, [pc, #56]	; (80059b0 <_ZN13PathFollowingC1Ev+0xf0>)
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	f04f 0400 	mov.w	r4, #0
 8005980:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005984:	4a0b      	ldr	r2, [pc, #44]	; (80059b4 <_ZN13PathFollowingC1Ev+0xf4>)
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	f04f 0400 	mov.w	r4, #0
 800598e:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8005992:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <_ZN13PathFollowingC1Ev+0xf4>)
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	f04f 0400 	mov.w	r4, #0
 800599c:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc90      	pop	{r4, r7}
 80059aa:	4770      	bx	lr
 80059ac:	20047c78 	.word	0x20047c78
 80059b0:	20047c08 	.word	0x20047c08
 80059b4:	20047c68 	.word	0x20047c68

080059b8 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80059c0:	f001 fd62 	bl	8007488 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80059c4:	f107 0318 	add.w	r3, r7, #24
 80059c8:	2201      	movs	r2, #1
 80059ca:	4915      	ldr	r1, [pc, #84]	; (8005a20 <_ZN13PathFollowing4initEv+0x68>)
 80059cc:	4815      	ldr	r0, [pc, #84]	; (8005a24 <_ZN13PathFollowing4initEv+0x6c>)
 80059ce:	f7fb fff1 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80059d2:	f107 0310 	add.w	r3, r7, #16
 80059d6:	2201      	movs	r2, #1
 80059d8:	4913      	ldr	r1, [pc, #76]	; (8005a28 <_ZN13PathFollowing4initEv+0x70>)
 80059da:	4812      	ldr	r0, [pc, #72]	; (8005a24 <_ZN13PathFollowing4initEv+0x6c>)
 80059dc:	f7fb ffea 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80059e0:	f107 0308 	add.w	r3, r7, #8
 80059e4:	2201      	movs	r2, #1
 80059e6:	4911      	ldr	r1, [pc, #68]	; (8005a2c <_ZN13PathFollowing4initEv+0x74>)
 80059e8:	480e      	ldr	r0, [pc, #56]	; (8005a24 <_ZN13PathFollowing4initEv+0x6c>)
 80059ea:	f7fb ffe3 	bl	80019b4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80059ee:	ed97 7b06 	vldr	d7, [r7, #24]
 80059f2:	ed97 6b04 	vldr	d6, [r7, #16]
 80059f6:	ed97 5b02 	vldr	d5, [r7, #8]
 80059fa:	eeb0 2a45 	vmov.f32	s4, s10
 80059fe:	eef0 2a65 	vmov.f32	s5, s11
 8005a02:	eeb0 1a46 	vmov.f32	s2, s12
 8005a06:	eef0 1a66 	vmov.f32	s3, s13
 8005a0a:	eeb0 0a47 	vmov.f32	s0, s14
 8005a0e:	eef0 0a67 	vmov.f32	s1, s15
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f80c 	bl	8005a30 <_ZN13PathFollowing7setGainEddd>
}
 8005a18:	bf00      	nop
 8005a1a:	3720      	adds	r7, #32
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	0801a5b4 	.word	0x0801a5b4
 8005a24:	0801a5bc 	.word	0x0801a5bc
 8005a28:	0801a5c4 	.word	0x0801a5c4
 8005a2c:	0801a5cc 	.word	0x0801a5cc

08005a30 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005a30:	b490      	push	{r4, r7}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	61f8      	str	r0, [r7, #28]
 8005a38:	ed87 0b04 	vstr	d0, [r7, #16]
 8005a3c:	ed87 1b02 	vstr	d1, [r7, #8]
 8005a40:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005a44:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005a46:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005a4a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005a4e:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005a50:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005a54:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005a58:	4a04      	ldr	r2, [pc, #16]	; (8005a6c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005a5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005a5e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8005a62:	bf00      	nop
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc90      	pop	{r4, r7}
 8005a6a:	4770      	bx	lr
 8005a6c:	20047c78 	.word	0x20047c78

08005a70 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005a78:	2088      	movs	r0, #136	; 0x88
 8005a7a:	f7fc faec 	bl	8002056 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8005a7e:	2080      	movs	r0, #128	; 0x80
 8005a80:	f7fc fae9 	bl	8002056 <INA260_init>
}
 8005a84:	bf00      	nop
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	0000      	movs	r0, r0
	...

08005a90 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005a98:	2188      	movs	r1, #136	; 0x88
 8005a9a:	2002      	movs	r0, #2
 8005a9c:	f7fc fa78 	bl	8001f90 <INA260_read>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fa fd56 	bl	8000554 <__aeabi_i2d>
 8005aa8:	a30c      	add	r3, pc, #48	; (adr r3, 8005adc <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fdbb 	bl	8000628 <__aeabi_dmul>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	4621      	mov	r1, r4
 8005aba:	f7fb f8ad 	bl	8000c18 <__aeabi_d2f>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	4a03      	ldr	r2, [pc, #12]	; (8005ad8 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005aca:	6013      	str	r3, [r2, #0]
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd90      	pop	{r4, r7, pc}
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	2000022c 	.word	0x2000022c
 8005adc:	47ae147b 	.word	0x47ae147b
 8005ae0:	3f547ae1 	.word	0x3f547ae1

08005ae4 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	ee07 3a90 	vmov	s15, r3

}
 8005af4:	eeb0 0a67 	vmov.f32	s0, s15
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005b10:	2102      	movs	r1, #2
 8005b12:	4822      	ldr	r0, [pc, #136]	; (8005b9c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005b14:	f006 ff8e 	bl	800ca34 <HAL_GPIO_ReadPin>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005b28:	89fb      	ldrh	r3, [r7, #14]
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005b30:	2108      	movs	r1, #8
 8005b32:	481a      	ldr	r0, [pc, #104]	; (8005b9c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005b34:	f006 ff7e 	bl	800ca34 <HAL_GPIO_ReadPin>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bf0c      	ite	eq
 8005b3e:	2301      	moveq	r3, #1
 8005b40:	2300      	movne	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005b48:	89fb      	ldrh	r3, [r7, #14]
 8005b4a:	f043 0302 	orr.w	r3, r3, #2
 8005b4e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005b50:	2110      	movs	r1, #16
 8005b52:	4812      	ldr	r0, [pc, #72]	; (8005b9c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005b54:	f006 ff6e 	bl	800ca34 <HAL_GPIO_ReadPin>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bf0c      	ite	eq
 8005b5e:	2301      	moveq	r3, #1
 8005b60:	2300      	movne	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005b68:	89fb      	ldrh	r3, [r7, #14]
 8005b6a:	f043 0304 	orr.w	r3, r3, #4
 8005b6e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005b70:	2180      	movs	r1, #128	; 0x80
 8005b72:	480a      	ldr	r0, [pc, #40]	; (8005b9c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005b74:	f006 ff5e 	bl	800ca34 <HAL_GPIO_ReadPin>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005b88:	89fb      	ldrh	r3, [r7, #14]
 8005b8a:	f043 0308 	orr.w	r3, r3, #8
 8005b8e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005b90:	89fb      	ldrh	r3, [r7, #14]

}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40020c00 	.word	0x40020c00

08005ba0 <_ZN10SideSensorC1Ev>:
uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;
bool mon_rise_fall_flag = true;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false),
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
		timer_R_(0), timer_L_(0), rise_fall_flag_R_(true), rise_fall_flag_L_(true)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	709a      	strb	r2, [r3, #2]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	70da      	strb	r2, [r3, #3]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	809a      	strh	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	80da      	strh	r2, [r3, #6]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	721a      	strb	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	815a      	strh	r2, [r3, #10]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	819a      	strh	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	739a      	strb	r2, [r3, #14]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	73da      	strb	r2, [r3, #15]
{

}
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4618      	mov	r0, r3
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <_ZN10SideSensor21updateStatusRightExtiEv>:

void SideSensor::updateStatusRightExti()
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET){ // 立ち上がり Black
 8005bfc:	2104      	movs	r1, #4
 8005bfe:	480e      	ldr	r0, [pc, #56]	; (8005c38 <_ZN10SideSensor21updateStatusRightExtiEv+0x44>)
 8005c00:	f006 ff18 	bl	800ca34 <HAL_GPIO_ReadPin>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	bf0c      	ite	eq
 8005c0a:	2301      	moveq	r3, #1
 8005c0c:	2300      	movne	r3, #0
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d006      	beq.n	8005c22 <_ZN10SideSensor21updateStatusRightExtiEv+0x2e>
		timer_R_ = 0;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = true;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	739a      	strb	r2, [r3, #14]
	}
	else{	//White
		timer_R_ = 0;
		rise_fall_flag_R_ = false;
	}
}
 8005c20:	e005      	b.n	8005c2e <_ZN10SideSensor21updateStatusRightExtiEv+0x3a>
		timer_R_ = 0;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = false;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	739a      	strb	r2, [r3, #14]
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40021000 	.word	0x40021000

08005c3c <_ZN10SideSensor20updateStatusLeftExtiEv>:

void SideSensor::updateStatusLeftExti()
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET){ // 立ち上がり Black
 8005c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c48:	480d      	ldr	r0, [pc, #52]	; (8005c80 <_ZN10SideSensor20updateStatusLeftExtiEv+0x44>)
 8005c4a:	f006 fef3 	bl	800ca34 <HAL_GPIO_ReadPin>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	bf0c      	ite	eq
 8005c54:	2301      	moveq	r3, #1
 8005c56:	2300      	movne	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d006      	beq.n	8005c6c <_ZN10SideSensor20updateStatusLeftExtiEv+0x30>
		timer_L_ = 0;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = true;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	73da      	strb	r2, [r3, #15]
	}
	else{	//White
		timer_L_ = 0;
		rise_fall_flag_L_ = false;
	}
}
 8005c6a:	e005      	b.n	8005c78 <_ZN10SideSensor20updateStatusLeftExtiEv+0x3c>
		timer_L_ = 0;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = false;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	73da      	strb	r2, [r3, #15]
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40020c00 	.word	0x40020c00

08005c84 <_ZN10SideSensor12updateStatusEv>:

void SideSensor::updateStatus() // called timer flip
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	timer_R_++;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	895b      	ldrh	r3, [r3, #10]
 8005c90:	3301      	adds	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	815a      	strh	r2, [r3, #10]
	timer_L_++;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	899b      	ldrh	r3, [r3, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	819a      	strh	r2, [r3, #12]
	if(timer_R_ >= 10000) timer_R_ = 10000;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	895b      	ldrh	r3, [r3, #10]
 8005ca8:	f242 720f 	movw	r2, #9999	; 0x270f
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d903      	bls.n	8005cb8 <_ZN10SideSensor12updateStatusEv+0x34>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cb6:	815a      	strh	r2, [r3, #10]
	if(timer_L_ >= 10000) timer_L_ = 10000;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	899b      	ldrh	r3, [r3, #12]
 8005cbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d903      	bls.n	8005ccc <_ZN10SideSensor12updateStatusEv+0x48>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cca:	819a      	strh	r2, [r3, #12]

	if(ignore_flag_ == false){
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7a1b      	ldrb	r3, [r3, #8]
 8005cd0:	f083 0301 	eor.w	r3, r3, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d019      	beq.n	8005d0e <_ZN10SideSensor12updateStatusEv+0x8a>
		if(rise_fall_flag_R_ == true && timer_R_ >= 2){
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	7b9b      	ldrb	r3, [r3, #14]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <_ZN10SideSensor12updateStatusEv+0x6e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	895b      	ldrh	r3, [r3, #10]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d903      	bls.n	8005cf2 <_ZN10SideSensor12updateStatusEv+0x6e>
			status_R_ = false;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	70da      	strb	r2, [r3, #3]
 8005cf0:	e00d      	b.n	8005d0e <_ZN10SideSensor12updateStatusEv+0x8a>
		}
		else if(rise_fall_flag_R_ == false && timer_R_ >= 2){
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	7b9b      	ldrb	r3, [r3, #14]
 8005cf6:	f083 0301 	eor.w	r3, r3, #1
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d006      	beq.n	8005d0e <_ZN10SideSensor12updateStatusEv+0x8a>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	895b      	ldrh	r3, [r3, #10]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d902      	bls.n	8005d0e <_ZN10SideSensor12updateStatusEv+0x8a>
			status_R_ = true;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	70da      	strb	r2, [r3, #3]
		}
	}

	if(rise_fall_flag_L_ == true && timer_L_ >= 2){
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7bdb      	ldrb	r3, [r3, #15]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <_ZN10SideSensor12updateStatusEv+0xa2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	899b      	ldrh	r3, [r3, #12]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d903      	bls.n	8005d26 <_ZN10SideSensor12updateStatusEv+0xa2>
		status_L_ = false;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	709a      	strb	r2, [r3, #2]
 8005d24:	e00d      	b.n	8005d42 <_ZN10SideSensor12updateStatusEv+0xbe>
	}
	else if(rise_fall_flag_L_ == false && timer_L_ >= 2){
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	7bdb      	ldrb	r3, [r3, #15]
 8005d2a:	f083 0301 	eor.w	r3, r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d006      	beq.n	8005d42 <_ZN10SideSensor12updateStatusEv+0xbe>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	899b      	ldrh	r3, [r3, #12]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d902      	bls.n	8005d42 <_ZN10SideSensor12updateStatusEv+0xbe>
		status_L_ = true;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	709a      	strb	r2, [r3, #2]
	}

	mon_status_R = status_R_;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	78da      	ldrb	r2, [r3, #3]
 8005d46:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <_ZN10SideSensor12updateStatusEv+0xdc>)
 8005d48:	701a      	strb	r2, [r3, #0]
	mon_status_L = status_L_;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	789a      	ldrb	r2, [r3, #2]
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <_ZN10SideSensor12updateStatusEv+0xe0>)
 8005d50:	701a      	strb	r2, [r3, #0]
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	20000231 	.word	0x20000231
 8005d64:	20000230 	.word	0x20000230

08005d68 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	789b      	ldrb	r3, [r3, #2]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <_ZN10SideSensor10getStatusREv>:

bool SideSensor::getStatusR()
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
	return status_R_;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	78db      	ldrb	r3, [r3, #3]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <_ZN10SideSensor17resetWhiteLineCntEv>:
{
	return white_line_cnt_r_;
}

void SideSensor::resetWhiteLineCnt()
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	80da      	strh	r2, [r3, #6]
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	721a      	strb	r2, [r3, #8]
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	721a      	strb	r2, [r3, #8]
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	7a1b      	ldrb	r3, [r3, #8]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3308      	adds	r3, #8
 8005e14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005e18:	2100      	movs	r1, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f010 f8c2 	bl	8015fa4 <memset>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e26:	811a      	strh	r2, [r3, #8]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e2e:	815a      	strh	r2, [r3, #10]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e36:	819a      	strh	r2, [r3, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e3e:	81da      	strh	r2, [r3, #14]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e46:	821a      	strh	r2, [r3, #16]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e4e:	825a      	strh	r2, [r3, #18]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	829a      	strh	r2, [r3, #20]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	82da      	strh	r2, [r3, #22]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	831a      	strh	r2, [r3, #24]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	835a      	strh	r2, [r3, #26]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	839a      	strh	r2, [r3, #28]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	83da      	strh	r2, [r3, #30]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	841a      	strh	r2, [r3, #32]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e80:	845a      	strh	r2, [r3, #34]	; 0x22
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	849a      	strh	r2, [r3, #36]	; 0x24
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e8e:	84da      	strh	r2, [r3, #38]	; 0x26
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	851a      	strh	r2, [r3, #40]	; 0x28
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eaa:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eb2:	861a      	strh	r2, [r3, #48]	; 0x30
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	865a      	strh	r2, [r3, #50]	; 0x32
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	869a      	strh	r2, [r3, #52]	; 0x34
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ec6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ece:	871a      	strh	r2, [r3, #56]	; 0x38
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ee8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f52:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005faa:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fc4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fd6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ff0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800600a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006014:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006026:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006030:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006042:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800604c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006056:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006078:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006082:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800608c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006096:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060a8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060da:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060e4:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060f6:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006108:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2201      	movs	r2, #1
 8006118:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800612a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006134:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800614e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006160:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	609a      	str	r2, [r3, #8]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	60da      	str	r2, [r3, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	611a      	str	r2, [r3, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	615a      	str	r2, [r3, #20]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	619a      	str	r2, [r3, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	61da      	str	r2, [r3, #28]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	621a      	str	r2, [r3, #32]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	625a      	str	r2, [r3, #36]	; 0x24
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	639a      	str	r2, [r3, #56]	; 0x38

}
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	0000      	movs	r0, r0
 800622c:	0000      	movs	r0, r0
	...

08006230 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623c:	f107 020c 	add.w	r2, r7, #12
 8006240:	f107 0110 	add.w	r1, r7, #16
 8006244:	4618      	mov	r0, r3
 8006246:	f7fb f9d1 	bl	80015ec <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800624a:	ed97 7a04 	vldr	s14, [r7, #16]
 800624e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006252:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006256:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800625a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800625e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7fa f988 	bl	8000578 <__aeabi_f2d>
 8006268:	a30e      	add	r3, pc, #56	; (adr r3, 80062a4 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7fa f9db 	bl	8000628 <__aeabi_dmul>
 8006272:	4603      	mov	r3, r0
 8006274:	460c      	mov	r4, r1
 8006276:	4618      	mov	r0, r3
 8006278:	4621      	mov	r1, r4
 800627a:	f7fa fccd 	bl	8000c18 <__aeabi_d2f>
 800627e:	4602      	mov	r2, r0
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4a05      	ldr	r2, [pc, #20]	; (80062a0 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 800628a:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	ee07 3a90 	vmov	s15, r3
}
 8006294:	eeb0 0a67 	vmov.f32	s0, s15
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	bd90      	pop	{r4, r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000234 	.word	0x20000234
 80062a4:	1ab1d998 	.word	0x1ab1d998
 80062a8:	3f7830b5 	.word	0x3f7830b5
 80062ac:	00000000 	.word	0x00000000

080062b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80062b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	ed93 7a00 	vldr	s14, [r3]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80062c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062c8:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d007      	beq.n	80062e6 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 80062d6:	4b48      	ldr	r3, [pc, #288]	; (80063f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80062ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80062f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80062f8:	4b3f      	ldr	r3, [pc, #252]	; (80063f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fa f93b 	bl	8000578 <__aeabi_f2d>
 8006302:	4604      	mov	r4, r0
 8006304:	460d      	mov	r5, r1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	ed93 7a06 	vldr	s14, [r3, #24]
 800630c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006314:	ee17 0a90 	vmov	r0, s15
 8006318:	f7fa f92e 	bl	8000578 <__aeabi_f2d>
 800631c:	a334      	add	r3, pc, #208	; (adr r3, 80063f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7fa f981 	bl	8000628 <__aeabi_dmul>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4620      	mov	r0, r4
 800632c:	4629      	mov	r1, r5
 800632e:	f7f9 ffc5 	bl	80002bc <__adddf3>
 8006332:	4603      	mov	r3, r0
 8006334:	460c      	mov	r4, r1
 8006336:	4618      	mov	r0, r3
 8006338:	4621      	mov	r1, r4
 800633a:	f7fa fc6d 	bl	8000c18 <__aeabi_d2f>
 800633e:	4602      	mov	r2, r0
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8006342:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	ed93 7a05 	vldr	s14, [r3, #20]
 800634a:	4b2c      	ldr	r3, [pc, #176]	; (80063fc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800634c:	edd3 7a00 	vldr	s15, [r3]
 8006350:	edd7 6a05 	vldr	s13, [r7, #20]
 8006354:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635c:	ee17 0a90 	vmov	r0, s15
 8006360:	f7fa f90a 	bl	8000578 <__aeabi_f2d>
 8006364:	a322      	add	r3, pc, #136	; (adr r3, 80063f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f7fa fa87 	bl	800087c <__aeabi_ddiv>
 800636e:	4603      	mov	r3, r0
 8006370:	460c      	mov	r4, r1
 8006372:	4618      	mov	r0, r3
 8006374:	4621      	mov	r1, r4
 8006376:	f7fa fc4f 	bl	8000c18 <__aeabi_d2f>
 800637a:	4603      	mov	r3, r0
 800637c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 800637e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006382:	edd7 7a03 	vldr	s15, [r7, #12]
 8006386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800638a:	4b1b      	ldr	r3, [pc, #108]	; (80063f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800638c:	edd3 7a00 	vldr	s15, [r3]
 8006390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006394:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80063a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80063a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063aa:	ee17 0a90 	vmov	r0, s15
 80063ae:	f7fa f8e3 	bl	8000578 <__aeabi_f2d>
 80063b2:	4605      	mov	r5, r0
 80063b4:	460e      	mov	r6, r1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80063bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80063c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c4:	ee17 0a90 	vmov	r0, s15
 80063c8:	f7fa f8d6 	bl	8000578 <__aeabi_f2d>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	ec43 2b11 	vmov	d1, r2, r3
 80063d4:	ec46 5b10 	vmov	d0, r5, r6
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff f941 	bl	8005660 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80063de:	4a07      	ldr	r2, [pc, #28]	; (80063fc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	6013      	str	r3, [r2, #0]
}
 80063e4:	bf00      	nop
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ec:	f3af 8000 	nop.w
 80063f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80063f4:	3f50624d 	.word	0x3f50624d
 80063f8:	2000023c 	.word	0x2000023c
 80063fc:	20000238 	.word	0x20000238

08006400 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	ed87 0a02 	vstr	s0, [r7, #8]
 800640c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	605a      	str	r2, [r3, #4]
}
 800641c:	bf00      	nop
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	ed87 0a02 	vstr	s0, [r7, #8]
 8006434:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006444:	bf00      	nop
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	ed87 0a02 	vstr	s0, [r7, #8]
 800645c:	edc7 0a01 	vstr	s1, [r7, #4]
 8006460:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	615a      	str	r2, [r3, #20]
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	ed87 0a02 	vstr	s0, [r7, #8]
 800648e:	edc7 0a01 	vstr	s1, [r7, #4]
 8006492:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	621a      	str	r2, [r3, #32]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff feb7 	bl	8006230 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff feef 	bl	80062b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80064d2:	bf00      	nop
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8006530 <_ZN12VelocityCtrl4stopEv+0x30>
 8006518:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8006530 <_ZN12VelocityCtrl4stopEv+0x30>
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff f89f 	bl	8005660 <_ZN5Motor8setRatioEdd>

}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w
	...

08006538 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	ee07 3a90 	vmov	s15, r3
}
 8006548:	eeb0 0a67 	vmov.f32	s0, s15
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <HAL_GPIO_EXTI_Callback>:
  return len;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
 800655c:	4603      	mov	r3, r0
 800655e:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8006560:	88fb      	ldrh	r3, [r7, #6]
 8006562:	4618      	mov	r0, r3
 8006564:	f001 fe68 	bl	8008238 <cppExit>
}
 8006568:	bf00      	nop
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d10e      	bne.n	80065a0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8006582:	f001 fe31 	bl	80081e8 <cppFlip100ns>

		tim7_timer++;
 8006586:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	4a1b      	ldr	r2, [pc, #108]	; (80065fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800658e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8006590:	4b1a      	ldr	r3, [pc, #104]	; (80065fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1a      	ldr	r2, [pc, #104]	; (8006600 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d902      	bls.n	80065a0 <HAL_TIM_PeriodElapsedCallback+0x30>
 800659a:	4b18      	ldr	r3, [pc, #96]	; (80065fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a17      	ldr	r2, [pc, #92]	; (8006604 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d10e      	bne.n	80065c8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80065aa:	f001 fded 	bl	8008188 <cppFlip1ms>

		tim6_timer++;
 80065ae:	4b16      	ldr	r3, [pc, #88]	; (8006608 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	4a14      	ldr	r2, [pc, #80]	; (8006608 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80065b6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80065b8:	4b13      	ldr	r3, [pc, #76]	; (8006608 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a10      	ldr	r2, [pc, #64]	; (8006600 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d902      	bls.n	80065c8 <HAL_TIM_PeriodElapsedCallback+0x58>
 80065c2:	4b11      	ldr	r3, [pc, #68]	; (8006608 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a0f      	ldr	r2, [pc, #60]	; (800660c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d10e      	bne.n	80065f0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80065d2:	f001 fe13 	bl	80081fc <cppFlip10ms>

		tim13_timer++;
 80065d6:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3301      	adds	r3, #1
 80065dc:	4a0c      	ldr	r2, [pc, #48]	; (8006610 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80065de:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a06      	ldr	r2, [pc, #24]	; (8006600 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d902      	bls.n	80065f0 <HAL_TIM_PeriodElapsedCallback+0x80>
 80065ea:	4b09      	ldr	r3, [pc, #36]	; (8006610 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
	}

}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40001400 	.word	0x40001400
 80065fc:	20047928 	.word	0x20047928
 8006600:	0001869f 	.word	0x0001869f
 8006604:	40001000 	.word	0x40001000
 8006608:	200478e4 	.word	0x200478e4
 800660c:	40001c00 	.word	0x40001c00
 8006610:	2004792c 	.word	0x2004792c

08006614 <init>:

void init()
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8006618:	2201      	movs	r2, #1
 800661a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800661e:	4808      	ldr	r0, [pc, #32]	; (8006640 <init+0x2c>)
 8006620:	f006 fa20 	bl	800ca64 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8006624:	4807      	ldr	r0, [pc, #28]	; (8006644 <init+0x30>)
 8006626:	f00a f900 	bl	801082a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800662a:	4807      	ldr	r0, [pc, #28]	; (8006648 <init+0x34>)
 800662c:	f00a f8fd 	bl	801082a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8006630:	4806      	ldr	r0, [pc, #24]	; (800664c <init+0x38>)
 8006632:	f00a f8fa 	bl	801082a <HAL_TIM_Base_Start_IT>

	cppInit();
 8006636:	f001 fd05 	bl	8008044 <cppInit>

	//path_following_initialize();

}
 800663a:	bf00      	nop
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000
 8006644:	20047a10 	.word	0x20047a10
 8006648:	20047bb4 	.word	0x20047bb4
 800664c:	20047930 	.word	0x20047930

08006650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006654:	f004 fefe 	bl	800b454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006658:	f000 f82a 	bl	80066b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800665c:	f000 fdbc 	bl	80071d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006660:	f000 fd8a 	bl	8007178 <MX_DMA_Init>
  MX_I2C2_Init();
 8006664:	f000 f9e8 	bl	8006a38 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006668:	f000 fa14 	bl	8006a94 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800666c:	f000 fa32 	bl	8006ad4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8006670:	f000 fa66 	bl	8006b40 <MX_TIM1_Init>
  MX_TIM4_Init();
 8006674:	f000 fb70 	bl	8006d58 <MX_TIM4_Init>
  MX_TIM8_Init();
 8006678:	f000 fc3c 	bl	8006ef4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800667c:	f000 fd52 	bl	8007124 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006680:	f00c f8a6 	bl	80127d0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8006684:	f000 fbcc 	bl	8006e20 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006688:	f000 f9a8 	bl	80069dc <MX_I2C1_Init>
  MX_TIM3_Init();
 800668c:	f000 fb00 	bl	8006c90 <MX_TIM3_Init>
  MX_TIM10_Init();
 8006690:	f000 fc88 	bl	8006fa4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8006694:	f000 fcd4 	bl	8007040 <MX_TIM11_Init>
  MX_ADC2_Init();
 8006698:	f000 f898 	bl	80067cc <MX_ADC2_Init>
  MX_TIM7_Init();
 800669c:	f000 fbf6 	bl	8006e8c <MX_TIM7_Init>
  MX_TIM13_Init();
 80066a0:	f000 fd1c 	bl	80070dc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80066a4:	f7ff ffb6 	bl	8006614 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80066a8:	f001 fde2 	bl	8008270 <cppLoop>
 80066ac:	e7fc      	b.n	80066a8 <main+0x58>
	...

080066b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b0a4      	sub	sp, #144	; 0x90
 80066b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80066b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80066ba:	2234      	movs	r2, #52	; 0x34
 80066bc:	2100      	movs	r1, #0
 80066be:	4618      	mov	r0, r3
 80066c0:	f00f fc70 	bl	8015fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80066c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	609a      	str	r2, [r3, #8]
 80066d0:	60da      	str	r2, [r3, #12]
 80066d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80066d4:	f107 030c 	add.w	r3, r7, #12
 80066d8:	223c      	movs	r2, #60	; 0x3c
 80066da:	2100      	movs	r1, #0
 80066dc:	4618      	mov	r0, r3
 80066de:	f00f fc61 	bl	8015fa4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80066e2:	2300      	movs	r3, #0
 80066e4:	60bb      	str	r3, [r7, #8]
 80066e6:	4b37      	ldr	r3, [pc, #220]	; (80067c4 <SystemClock_Config+0x114>)
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	4a36      	ldr	r2, [pc, #216]	; (80067c4 <SystemClock_Config+0x114>)
 80066ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f0:	6413      	str	r3, [r2, #64]	; 0x40
 80066f2:	4b34      	ldr	r3, [pc, #208]	; (80067c4 <SystemClock_Config+0x114>)
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fa:	60bb      	str	r3, [r7, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80066fe:	2300      	movs	r3, #0
 8006700:	607b      	str	r3, [r7, #4]
 8006702:	4b31      	ldr	r3, [pc, #196]	; (80067c8 <SystemClock_Config+0x118>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a30      	ldr	r2, [pc, #192]	; (80067c8 <SystemClock_Config+0x118>)
 8006708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	4b2e      	ldr	r3, [pc, #184]	; (80067c8 <SystemClock_Config+0x118>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800671a:	2301      	movs	r3, #1
 800671c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800671e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006722:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006724:	2302      	movs	r3, #2
 8006726:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006728:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800672c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800672e:	2308      	movs	r3, #8
 8006730:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006732:	23b4      	movs	r3, #180	; 0xb4
 8006734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006738:	2302      	movs	r3, #2
 800673a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800673e:	2308      	movs	r3, #8
 8006740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006744:	2302      	movs	r3, #2
 8006746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800674a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800674e:	4618      	mov	r0, r3
 8006750:	f007 fdc2 	bl	800e2d8 <HAL_RCC_OscConfig>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800675a:	f000 fe91 	bl	8007480 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800675e:	f007 f93d 	bl	800d9dc <HAL_PWREx_EnableOverDrive>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006768:	f000 fe8a 	bl	8007480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800676c:	230f      	movs	r3, #15
 800676e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006770:	2302      	movs	r3, #2
 8006772:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006774:	2300      	movs	r3, #0
 8006776:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006778:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800677c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800677e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006782:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006788:	2105      	movs	r1, #5
 800678a:	4618      	mov	r0, r3
 800678c:	f007 f976 	bl	800da7c <HAL_RCC_ClockConfig>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8006796:	f000 fe73 	bl	8007480 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800679a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800679e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80067a0:	2300      	movs	r3, #0
 80067a2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80067a4:	2300      	movs	r3, #0
 80067a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067a8:	f107 030c 	add.w	r3, r7, #12
 80067ac:	4618      	mov	r0, r3
 80067ae:	f007 fb55 	bl	800de5c <HAL_RCCEx_PeriphCLKConfig>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80067b8:	f000 fe62 	bl	8007480 <Error_Handler>
  }
}
 80067bc:	bf00      	nop
 80067be:	3790      	adds	r7, #144	; 0x90
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40023800 	.word	0x40023800
 80067c8:	40007000 	.word	0x40007000

080067cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80067d2:	463b      	mov	r3, r7
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	609a      	str	r2, [r3, #8]
 80067dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80067de:	4b7c      	ldr	r3, [pc, #496]	; (80069d0 <MX_ADC2_Init+0x204>)
 80067e0:	4a7c      	ldr	r2, [pc, #496]	; (80069d4 <MX_ADC2_Init+0x208>)
 80067e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80067e4:	4b7a      	ldr	r3, [pc, #488]	; (80069d0 <MX_ADC2_Init+0x204>)
 80067e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80067ec:	4b78      	ldr	r3, [pc, #480]	; (80069d0 <MX_ADC2_Init+0x204>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80067f2:	4b77      	ldr	r3, [pc, #476]	; (80069d0 <MX_ADC2_Init+0x204>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80067f8:	4b75      	ldr	r3, [pc, #468]	; (80069d0 <MX_ADC2_Init+0x204>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80067fe:	4b74      	ldr	r3, [pc, #464]	; (80069d0 <MX_ADC2_Init+0x204>)
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006806:	4b72      	ldr	r3, [pc, #456]	; (80069d0 <MX_ADC2_Init+0x204>)
 8006808:	2200      	movs	r2, #0
 800680a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800680c:	4b70      	ldr	r3, [pc, #448]	; (80069d0 <MX_ADC2_Init+0x204>)
 800680e:	4a72      	ldr	r2, [pc, #456]	; (80069d8 <MX_ADC2_Init+0x20c>)
 8006810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006812:	4b6f      	ldr	r3, [pc, #444]	; (80069d0 <MX_ADC2_Init+0x204>)
 8006814:	2200      	movs	r2, #0
 8006816:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006818:	4b6d      	ldr	r3, [pc, #436]	; (80069d0 <MX_ADC2_Init+0x204>)
 800681a:	220e      	movs	r2, #14
 800681c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800681e:	4b6c      	ldr	r3, [pc, #432]	; (80069d0 <MX_ADC2_Init+0x204>)
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006826:	4b6a      	ldr	r3, [pc, #424]	; (80069d0 <MX_ADC2_Init+0x204>)
 8006828:	2201      	movs	r2, #1
 800682a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800682c:	4868      	ldr	r0, [pc, #416]	; (80069d0 <MX_ADC2_Init+0x204>)
 800682e:	f004 fea5 	bl	800b57c <HAL_ADC_Init>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006838:	f000 fe22 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800683c:	230a      	movs	r3, #10
 800683e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006840:	2301      	movs	r3, #1
 8006842:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006844:	2306      	movs	r3, #6
 8006846:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006848:	463b      	mov	r3, r7
 800684a:	4619      	mov	r1, r3
 800684c:	4860      	ldr	r0, [pc, #384]	; (80069d0 <MX_ADC2_Init+0x204>)
 800684e:	f004 ffe9 	bl	800b824 <HAL_ADC_ConfigChannel>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006858:	f000 fe12 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800685c:	230b      	movs	r3, #11
 800685e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006860:	2302      	movs	r3, #2
 8006862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006864:	463b      	mov	r3, r7
 8006866:	4619      	mov	r1, r3
 8006868:	4859      	ldr	r0, [pc, #356]	; (80069d0 <MX_ADC2_Init+0x204>)
 800686a:	f004 ffdb 	bl	800b824 <HAL_ADC_ConfigChannel>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006874:	f000 fe04 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006878:	230c      	movs	r3, #12
 800687a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800687c:	2303      	movs	r3, #3
 800687e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006880:	463b      	mov	r3, r7
 8006882:	4619      	mov	r1, r3
 8006884:	4852      	ldr	r0, [pc, #328]	; (80069d0 <MX_ADC2_Init+0x204>)
 8006886:	f004 ffcd 	bl	800b824 <HAL_ADC_ConfigChannel>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006890:	f000 fdf6 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006894:	230d      	movs	r3, #13
 8006896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006898:	2304      	movs	r3, #4
 800689a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800689c:	463b      	mov	r3, r7
 800689e:	4619      	mov	r1, r3
 80068a0:	484b      	ldr	r0, [pc, #300]	; (80069d0 <MX_ADC2_Init+0x204>)
 80068a2:	f004 ffbf 	bl	800b824 <HAL_ADC_ConfigChannel>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80068ac:	f000 fde8 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80068b4:	2305      	movs	r3, #5
 80068b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068b8:	463b      	mov	r3, r7
 80068ba:	4619      	mov	r1, r3
 80068bc:	4844      	ldr	r0, [pc, #272]	; (80069d0 <MX_ADC2_Init+0x204>)
 80068be:	f004 ffb1 	bl	800b824 <HAL_ADC_ConfigChannel>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80068c8:	f000 fdda 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80068cc:	2301      	movs	r3, #1
 80068ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80068d0:	2306      	movs	r3, #6
 80068d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068d4:	463b      	mov	r3, r7
 80068d6:	4619      	mov	r1, r3
 80068d8:	483d      	ldr	r0, [pc, #244]	; (80069d0 <MX_ADC2_Init+0x204>)
 80068da:	f004 ffa3 	bl	800b824 <HAL_ADC_ConfigChannel>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80068e4:	f000 fdcc 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80068e8:	2302      	movs	r3, #2
 80068ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80068ec:	2307      	movs	r3, #7
 80068ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068f0:	463b      	mov	r3, r7
 80068f2:	4619      	mov	r1, r3
 80068f4:	4836      	ldr	r0, [pc, #216]	; (80069d0 <MX_ADC2_Init+0x204>)
 80068f6:	f004 ff95 	bl	800b824 <HAL_ADC_ConfigChannel>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006900:	f000 fdbe 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006904:	2303      	movs	r3, #3
 8006906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006908:	2308      	movs	r3, #8
 800690a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800690c:	463b      	mov	r3, r7
 800690e:	4619      	mov	r1, r3
 8006910:	482f      	ldr	r0, [pc, #188]	; (80069d0 <MX_ADC2_Init+0x204>)
 8006912:	f004 ff87 	bl	800b824 <HAL_ADC_ConfigChannel>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800691c:	f000 fdb0 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006920:	2304      	movs	r3, #4
 8006922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006924:	2309      	movs	r3, #9
 8006926:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006928:	463b      	mov	r3, r7
 800692a:	4619      	mov	r1, r3
 800692c:	4828      	ldr	r0, [pc, #160]	; (80069d0 <MX_ADC2_Init+0x204>)
 800692e:	f004 ff79 	bl	800b824 <HAL_ADC_ConfigChannel>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006938:	f000 fda2 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800693c:	2305      	movs	r3, #5
 800693e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006940:	230a      	movs	r3, #10
 8006942:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006944:	463b      	mov	r3, r7
 8006946:	4619      	mov	r1, r3
 8006948:	4821      	ldr	r0, [pc, #132]	; (80069d0 <MX_ADC2_Init+0x204>)
 800694a:	f004 ff6b 	bl	800b824 <HAL_ADC_ConfigChannel>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8006954:	f000 fd94 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006958:	2306      	movs	r3, #6
 800695a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800695c:	230b      	movs	r3, #11
 800695e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006960:	463b      	mov	r3, r7
 8006962:	4619      	mov	r1, r3
 8006964:	481a      	ldr	r0, [pc, #104]	; (80069d0 <MX_ADC2_Init+0x204>)
 8006966:	f004 ff5d 	bl	800b824 <HAL_ADC_ConfigChannel>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006970:	f000 fd86 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006974:	2307      	movs	r3, #7
 8006976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006978:	230c      	movs	r3, #12
 800697a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800697c:	463b      	mov	r3, r7
 800697e:	4619      	mov	r1, r3
 8006980:	4813      	ldr	r0, [pc, #76]	; (80069d0 <MX_ADC2_Init+0x204>)
 8006982:	f004 ff4f 	bl	800b824 <HAL_ADC_ConfigChannel>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800698c:	f000 fd78 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006990:	2308      	movs	r3, #8
 8006992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8006994:	230d      	movs	r3, #13
 8006996:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006998:	463b      	mov	r3, r7
 800699a:	4619      	mov	r1, r3
 800699c:	480c      	ldr	r0, [pc, #48]	; (80069d0 <MX_ADC2_Init+0x204>)
 800699e:	f004 ff41 	bl	800b824 <HAL_ADC_ConfigChannel>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80069a8:	f000 fd6a 	bl	8007480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80069ac:	2309      	movs	r3, #9
 80069ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80069b0:	230e      	movs	r3, #14
 80069b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80069b4:	463b      	mov	r3, r7
 80069b6:	4619      	mov	r1, r3
 80069b8:	4805      	ldr	r0, [pc, #20]	; (80069d0 <MX_ADC2_Init+0x204>)
 80069ba:	f004 ff33 	bl	800b824 <HAL_ADC_ConfigChannel>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80069c4:	f000 fd5c 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80069c8:	bf00      	nop
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	200477b4 	.word	0x200477b4
 80069d4:	40012100 	.word	0x40012100
 80069d8:	0f000001 	.word	0x0f000001

080069dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80069e0:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <MX_I2C1_Init+0x50>)
 80069e2:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <MX_I2C1_Init+0x54>)
 80069e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <MX_I2C1_Init+0x50>)
 80069e8:	4a12      	ldr	r2, [pc, #72]	; (8006a34 <MX_I2C1_Init+0x58>)
 80069ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80069ec:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <MX_I2C1_Init+0x50>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80069f2:	4b0e      	ldr	r3, [pc, #56]	; (8006a2c <MX_I2C1_Init+0x50>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80069f8:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <MX_I2C1_Init+0x50>)
 80069fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <MX_I2C1_Init+0x50>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006a06:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <MX_I2C1_Init+0x50>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006a0c:	4b07      	ldr	r3, [pc, #28]	; (8006a2c <MX_I2C1_Init+0x50>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006a12:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <MX_I2C1_Init+0x50>)
 8006a14:	2280      	movs	r2, #128	; 0x80
 8006a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006a18:	4804      	ldr	r0, [pc, #16]	; (8006a2c <MX_I2C1_Init+0x50>)
 8006a1a:	f006 f855 	bl	800cac8 <HAL_I2C_Init>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006a24:	f000 fd2c 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006a28:	bf00      	nop
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	200477fc 	.word	0x200477fc
 8006a30:	40005400 	.word	0x40005400
 8006a34:	000186a0 	.word	0x000186a0

08006a38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006a3c:	4b12      	ldr	r3, [pc, #72]	; (8006a88 <MX_I2C2_Init+0x50>)
 8006a3e:	4a13      	ldr	r2, [pc, #76]	; (8006a8c <MX_I2C2_Init+0x54>)
 8006a40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006a42:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <MX_I2C2_Init+0x50>)
 8006a44:	4a12      	ldr	r2, [pc, #72]	; (8006a90 <MX_I2C2_Init+0x58>)
 8006a46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006a48:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <MX_I2C2_Init+0x50>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006a4e:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <MX_I2C2_Init+0x50>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006a54:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <MX_I2C2_Init+0x50>)
 8006a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <MX_I2C2_Init+0x50>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <MX_I2C2_Init+0x50>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006a68:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <MX_I2C2_Init+0x50>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006a6e:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <MX_I2C2_Init+0x50>)
 8006a70:	2280      	movs	r2, #128	; 0x80
 8006a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006a74:	4804      	ldr	r0, [pc, #16]	; (8006a88 <MX_I2C2_Init+0x50>)
 8006a76:	f006 f827 	bl	800cac8 <HAL_I2C_Init>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006a80:	f000 fcfe 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006a84:	bf00      	nop
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20047890 	.word	0x20047890
 8006a8c:	40005800 	.word	0x40005800
 8006a90:	000186a0 	.word	0x000186a0

08006a94 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <MX_SDIO_SD_Init+0x38>)
 8006a9a:	4a0d      	ldr	r2, [pc, #52]	; (8006ad0 <MX_SDIO_SD_Init+0x3c>)
 8006a9c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <MX_SDIO_SD_Init+0x38>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006aa4:	4b09      	ldr	r3, [pc, #36]	; (8006acc <MX_SDIO_SD_Init+0x38>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006aaa:	4b08      	ldr	r3, [pc, #32]	; (8006acc <MX_SDIO_SD_Init+0x38>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006ab0:	4b06      	ldr	r3, [pc, #24]	; (8006acc <MX_SDIO_SD_Init+0x38>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <MX_SDIO_SD_Init+0x38>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8006abc:	4b03      	ldr	r3, [pc, #12]	; (8006acc <MX_SDIO_SD_Init+0x38>)
 8006abe:	2204      	movs	r2, #4
 8006ac0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006ac2:	bf00      	nop
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	20047a90 	.word	0x20047a90
 8006ad0:	40012c00 	.word	0x40012c00

08006ad4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006ad8:	4b17      	ldr	r3, [pc, #92]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006ada:	4a18      	ldr	r2, [pc, #96]	; (8006b3c <MX_SPI2_Init+0x68>)
 8006adc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006ade:	4b16      	ldr	r3, [pc, #88]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006ae4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006aec:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006af2:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006af4:	2202      	movs	r2, #2
 8006af6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006af8:	4b0f      	ldr	r3, [pc, #60]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006afe:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006b06:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006b08:	2220      	movs	r2, #32
 8006b0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b18:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006b1e:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006b20:	220a      	movs	r2, #10
 8006b22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006b24:	4804      	ldr	r0, [pc, #16]	; (8006b38 <MX_SPI2_Init+0x64>)
 8006b26:	f009 f901 	bl	800fd2c <HAL_SPI_Init>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006b30:	f000 fca6 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006b34:	bf00      	nop
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	200476dc 	.word	0x200476dc
 8006b3c:	40003800 	.word	0x40003800

08006b40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b09a      	sub	sp, #104	; 0x68
 8006b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006b46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b4a:	2224      	movs	r2, #36	; 0x24
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f00f fa28 	bl	8015fa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b5e:	f107 0320 	add.w	r3, r7, #32
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	605a      	str	r2, [r3, #4]
 8006b68:	609a      	str	r2, [r3, #8]
 8006b6a:	60da      	str	r2, [r3, #12]
 8006b6c:	611a      	str	r2, [r3, #16]
 8006b6e:	615a      	str	r2, [r3, #20]
 8006b70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006b72:	463b      	mov	r3, r7
 8006b74:	2220      	movs	r2, #32
 8006b76:	2100      	movs	r1, #0
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f00f fa13 	bl	8015fa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006b7e:	4b42      	ldr	r3, [pc, #264]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006b80:	4a42      	ldr	r2, [pc, #264]	; (8006c8c <MX_TIM1_Init+0x14c>)
 8006b82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006b84:	4b40      	ldr	r3, [pc, #256]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b8a:	4b3f      	ldr	r3, [pc, #252]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006b90:	4b3d      	ldr	r3, [pc, #244]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b98:	4b3b      	ldr	r3, [pc, #236]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006b9e:	4b3a      	ldr	r3, [pc, #232]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ba4:	4b38      	ldr	r3, [pc, #224]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006baa:	4837      	ldr	r0, [pc, #220]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006bac:	f009 fe61 	bl	8010872 <HAL_TIM_PWM_Init>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006bb6:	f000 fc63 	bl	8007480 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006bde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006be2:	4619      	mov	r1, r3
 8006be4:	4828      	ldr	r0, [pc, #160]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006be6:	f009 fead 	bl	8010944 <HAL_TIM_Encoder_Init>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006bf0:	f000 fc46 	bl	8007480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006bfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006c00:	4619      	mov	r1, r3
 8006c02:	4821      	ldr	r0, [pc, #132]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006c04:	f00a fbd4 	bl	80113b0 <HAL_TIMEx_MasterConfigSynchronization>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006c0e:	f000 fc37 	bl	8007480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c12:	2360      	movs	r3, #96	; 0x60
 8006c14:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006c26:	2300      	movs	r3, #0
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006c2e:	f107 0320 	add.w	r3, r7, #32
 8006c32:	2208      	movs	r2, #8
 8006c34:	4619      	mov	r1, r3
 8006c36:	4814      	ldr	r0, [pc, #80]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006c38:	f00a f856 	bl	8010ce8 <HAL_TIM_PWM_ConfigChannel>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006c42:	f000 fc1d 	bl	8007480 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006c56:	2300      	movs	r3, #0
 8006c58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006c5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006c64:	463b      	mov	r3, r7
 8006c66:	4619      	mov	r1, r3
 8006c68:	4807      	ldr	r0, [pc, #28]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006c6a:	f00a fc1d 	bl	80114a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006c74:	f000 fc04 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006c78:	4803      	ldr	r0, [pc, #12]	; (8006c88 <MX_TIM1_Init+0x148>)
 8006c7a:	f000 fff1 	bl	8007c60 <HAL_TIM_MspPostInit>

}
 8006c7e:	bf00      	nop
 8006c80:	3768      	adds	r7, #104	; 0x68
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20047a50 	.word	0x20047a50
 8006c8c:	40010000 	.word	0x40010000

08006c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	; 0x28
 8006c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c96:	f107 0320 	add.w	r3, r7, #32
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ca0:	1d3b      	adds	r3, r7, #4
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	605a      	str	r2, [r3, #4]
 8006ca8:	609a      	str	r2, [r3, #8]
 8006caa:	60da      	str	r2, [r3, #12]
 8006cac:	611a      	str	r2, [r3, #16]
 8006cae:	615a      	str	r2, [r3, #20]
 8006cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006cb2:	4b27      	ldr	r3, [pc, #156]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006cb4:	4a27      	ldr	r2, [pc, #156]	; (8006d54 <MX_TIM3_Init+0xc4>)
 8006cb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006cb8:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cbe:	4b24      	ldr	r3, [pc, #144]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8006cc4:	4b22      	ldr	r3, [pc, #136]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006cc6:	f241 1293 	movw	r2, #4499	; 0x1193
 8006cca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ccc:	4b20      	ldr	r3, [pc, #128]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cd2:	4b1f      	ldr	r3, [pc, #124]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006cd8:	481d      	ldr	r0, [pc, #116]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006cda:	f009 fdca 	bl	8010872 <HAL_TIM_PWM_Init>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006ce4:	f000 fbcc 	bl	8007480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006cf0:	f107 0320 	add.w	r3, r7, #32
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4816      	ldr	r0, [pc, #88]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006cf8:	f00a fb5a 	bl	80113b0 <HAL_TIMEx_MasterConfigSynchronization>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006d02:	f000 fbbd 	bl	8007480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d06:	2360      	movs	r3, #96	; 0x60
 8006d08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006d16:	1d3b      	adds	r3, r7, #4
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	480c      	ldr	r0, [pc, #48]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006d1e:	f009 ffe3 	bl	8010ce8 <HAL_TIM_PWM_ConfigChannel>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006d28:	f000 fbaa 	bl	8007480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d2c:	1d3b      	adds	r3, r7, #4
 8006d2e:	2204      	movs	r2, #4
 8006d30:	4619      	mov	r1, r3
 8006d32:	4807      	ldr	r0, [pc, #28]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006d34:	f009 ffd8 	bl	8010ce8 <HAL_TIM_PWM_ConfigChannel>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006d3e:	f000 fb9f 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006d42:	4803      	ldr	r0, [pc, #12]	; (8006d50 <MX_TIM3_Init+0xc0>)
 8006d44:	f000 ff8c 	bl	8007c60 <HAL_TIM_MspPostInit>

}
 8006d48:	bf00      	nop
 8006d4a:	3728      	adds	r7, #40	; 0x28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	200478e8 	.word	0x200478e8
 8006d54:	40000400 	.word	0x40000400

08006d58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d5e:	f107 0320 	add.w	r3, r7, #32
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d68:	1d3b      	adds	r3, r7, #4
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	605a      	str	r2, [r3, #4]
 8006d70:	609a      	str	r2, [r3, #8]
 8006d72:	60da      	str	r2, [r3, #12]
 8006d74:	611a      	str	r2, [r3, #16]
 8006d76:	615a      	str	r2, [r3, #20]
 8006d78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006d7a:	4b27      	ldr	r3, [pc, #156]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006d7c:	4a27      	ldr	r2, [pc, #156]	; (8006e1c <MX_TIM4_Init+0xc4>)
 8006d7e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006d80:	4b25      	ldr	r3, [pc, #148]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d86:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006d8c:	4b22      	ldr	r3, [pc, #136]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006d8e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006d92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d94:	4b20      	ldr	r3, [pc, #128]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d9a:	4b1f      	ldr	r3, [pc, #124]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006da0:	481d      	ldr	r0, [pc, #116]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006da2:	f009 fd66 	bl	8010872 <HAL_TIM_PWM_Init>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006dac:	f000 fb68 	bl	8007480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006db0:	2300      	movs	r3, #0
 8006db2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006db8:	f107 0320 	add.w	r3, r7, #32
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4816      	ldr	r0, [pc, #88]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006dc0:	f00a faf6 	bl	80113b0 <HAL_TIMEx_MasterConfigSynchronization>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006dca:	f000 fb59 	bl	8007480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006dce:	2360      	movs	r3, #96	; 0x60
 8006dd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006dde:	1d3b      	adds	r3, r7, #4
 8006de0:	2208      	movs	r2, #8
 8006de2:	4619      	mov	r1, r3
 8006de4:	480c      	ldr	r0, [pc, #48]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006de6:	f009 ff7f 	bl	8010ce8 <HAL_TIM_PWM_ConfigChannel>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006df0:	f000 fb46 	bl	8007480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006df4:	1d3b      	adds	r3, r7, #4
 8006df6:	220c      	movs	r2, #12
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4807      	ldr	r0, [pc, #28]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006dfc:	f009 ff74 	bl	8010ce8 <HAL_TIM_PWM_ConfigChannel>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006e06:	f000 fb3b 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006e0a:	4803      	ldr	r0, [pc, #12]	; (8006e18 <MX_TIM4_Init+0xc0>)
 8006e0c:	f000 ff28 	bl	8007c60 <HAL_TIM_MspPostInit>

}
 8006e10:	bf00      	nop
 8006e12:	3728      	adds	r7, #40	; 0x28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20047774 	.word	0x20047774
 8006e1c:	40000800 	.word	0x40000800

08006e20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e26:	463b      	mov	r3, r7
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006e2e:	4b15      	ldr	r3, [pc, #84]	; (8006e84 <MX_TIM6_Init+0x64>)
 8006e30:	4a15      	ldr	r2, [pc, #84]	; (8006e88 <MX_TIM6_Init+0x68>)
 8006e32:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006e34:	4b13      	ldr	r3, [pc, #76]	; (8006e84 <MX_TIM6_Init+0x64>)
 8006e36:	2259      	movs	r2, #89	; 0x59
 8006e38:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <MX_TIM6_Init+0x64>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006e40:	4b10      	ldr	r3, [pc, #64]	; (8006e84 <MX_TIM6_Init+0x64>)
 8006e42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006e46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006e48:	4b0e      	ldr	r3, [pc, #56]	; (8006e84 <MX_TIM6_Init+0x64>)
 8006e4a:	2280      	movs	r2, #128	; 0x80
 8006e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006e4e:	480d      	ldr	r0, [pc, #52]	; (8006e84 <MX_TIM6_Init+0x64>)
 8006e50:	f009 fcc0 	bl	80107d4 <HAL_TIM_Base_Init>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006e5a:	f000 fb11 	bl	8007480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006e66:	463b      	mov	r3, r7
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4806      	ldr	r0, [pc, #24]	; (8006e84 <MX_TIM6_Init+0x64>)
 8006e6c:	f00a faa0 	bl	80113b0 <HAL_TIMEx_MasterConfigSynchronization>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006e76:	f000 fb03 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20047a10 	.word	0x20047a10
 8006e88:	40001000 	.word	0x40001000

08006e8c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e92:	463b      	mov	r3, r7
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006e9a:	4b14      	ldr	r3, [pc, #80]	; (8006eec <MX_TIM7_Init+0x60>)
 8006e9c:	4a14      	ldr	r2, [pc, #80]	; (8006ef0 <MX_TIM7_Init+0x64>)
 8006e9e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006ea0:	4b12      	ldr	r3, [pc, #72]	; (8006eec <MX_TIM7_Init+0x60>)
 8006ea2:	22b3      	movs	r2, #179	; 0xb3
 8006ea4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ea6:	4b11      	ldr	r3, [pc, #68]	; (8006eec <MX_TIM7_Init+0x60>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <MX_TIM7_Init+0x60>)
 8006eae:	2231      	movs	r2, #49	; 0x31
 8006eb0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006eb2:	4b0e      	ldr	r3, [pc, #56]	; (8006eec <MX_TIM7_Init+0x60>)
 8006eb4:	2280      	movs	r2, #128	; 0x80
 8006eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006eb8:	480c      	ldr	r0, [pc, #48]	; (8006eec <MX_TIM7_Init+0x60>)
 8006eba:	f009 fc8b 	bl	80107d4 <HAL_TIM_Base_Init>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006ec4:	f000 fadc 	bl	8007480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4805      	ldr	r0, [pc, #20]	; (8006eec <MX_TIM7_Init+0x60>)
 8006ed6:	f00a fa6b 	bl	80113b0 <HAL_TIMEx_MasterConfigSynchronization>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006ee0:	f000 face 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	20047bb4 	.word	0x20047bb4
 8006ef0:	40001400 	.word	0x40001400

08006ef4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08c      	sub	sp, #48	; 0x30
 8006ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006efa:	f107 030c 	add.w	r3, r7, #12
 8006efe:	2224      	movs	r2, #36	; 0x24
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f00f f84e 	bl	8015fa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f08:	1d3b      	adds	r3, r7, #4
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006f10:	4b22      	ldr	r3, [pc, #136]	; (8006f9c <MX_TIM8_Init+0xa8>)
 8006f12:	4a23      	ldr	r2, [pc, #140]	; (8006fa0 <MX_TIM8_Init+0xac>)
 8006f14:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006f16:	4b21      	ldr	r3, [pc, #132]	; (8006f9c <MX_TIM8_Init+0xa8>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006f1c:	4b1f      	ldr	r3, [pc, #124]	; (8006f9c <MX_TIM8_Init+0xa8>)
 8006f1e:	2210      	movs	r2, #16
 8006f20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006f22:	4b1e      	ldr	r3, [pc, #120]	; (8006f9c <MX_TIM8_Init+0xa8>)
 8006f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f28:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f2a:	4b1c      	ldr	r3, [pc, #112]	; (8006f9c <MX_TIM8_Init+0xa8>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006f30:	4b1a      	ldr	r3, [pc, #104]	; (8006f9c <MX_TIM8_Init+0xa8>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f36:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <MX_TIM8_Init+0xa8>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006f40:	2300      	movs	r3, #0
 8006f42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006f44:	2301      	movs	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006f50:	2300      	movs	r3, #0
 8006f52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006f54:	2301      	movs	r3, #1
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006f60:	f107 030c 	add.w	r3, r7, #12
 8006f64:	4619      	mov	r1, r3
 8006f66:	480d      	ldr	r0, [pc, #52]	; (8006f9c <MX_TIM8_Init+0xa8>)
 8006f68:	f009 fcec 	bl	8010944 <HAL_TIM_Encoder_Init>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006f72:	f000 fa85 	bl	8007480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f76:	2300      	movs	r3, #0
 8006f78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006f7e:	1d3b      	adds	r3, r7, #4
 8006f80:	4619      	mov	r1, r3
 8006f82:	4806      	ldr	r0, [pc, #24]	; (8006f9c <MX_TIM8_Init+0xa8>)
 8006f84:	f00a fa14 	bl	80113b0 <HAL_TIMEx_MasterConfigSynchronization>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006f8e:	f000 fa77 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006f92:	bf00      	nop
 8006f94:	3730      	adds	r7, #48	; 0x30
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20047734 	.word	0x20047734
 8006fa0:	40010400 	.word	0x40010400

08006fa4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006faa:	1d3b      	adds	r3, r7, #4
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	605a      	str	r2, [r3, #4]
 8006fb2:	609a      	str	r2, [r3, #8]
 8006fb4:	60da      	str	r2, [r3, #12]
 8006fb6:	611a      	str	r2, [r3, #16]
 8006fb8:	615a      	str	r2, [r3, #20]
 8006fba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006fbc:	4b1e      	ldr	r3, [pc, #120]	; (8007038 <MX_TIM10_Init+0x94>)
 8006fbe:	4a1f      	ldr	r2, [pc, #124]	; (800703c <MX_TIM10_Init+0x98>)
 8006fc0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006fc2:	4b1d      	ldr	r3, [pc, #116]	; (8007038 <MX_TIM10_Init+0x94>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fc8:	4b1b      	ldr	r3, [pc, #108]	; (8007038 <MX_TIM10_Init+0x94>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006fce:	4b1a      	ldr	r3, [pc, #104]	; (8007038 <MX_TIM10_Init+0x94>)
 8006fd0:	f242 3227 	movw	r2, #8999	; 0x2327
 8006fd4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fd6:	4b18      	ldr	r3, [pc, #96]	; (8007038 <MX_TIM10_Init+0x94>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <MX_TIM10_Init+0x94>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006fe2:	4815      	ldr	r0, [pc, #84]	; (8007038 <MX_TIM10_Init+0x94>)
 8006fe4:	f009 fbf6 	bl	80107d4 <HAL_TIM_Base_Init>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006fee:	f000 fa47 	bl	8007480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006ff2:	4811      	ldr	r0, [pc, #68]	; (8007038 <MX_TIM10_Init+0x94>)
 8006ff4:	f009 fc3d 	bl	8010872 <HAL_TIM_PWM_Init>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006ffe:	f000 fa3f 	bl	8007480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007002:	2360      	movs	r3, #96	; 0x60
 8007004:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007012:	1d3b      	adds	r3, r7, #4
 8007014:	2200      	movs	r2, #0
 8007016:	4619      	mov	r1, r3
 8007018:	4807      	ldr	r0, [pc, #28]	; (8007038 <MX_TIM10_Init+0x94>)
 800701a:	f009 fe65 	bl	8010ce8 <HAL_TIM_PWM_ConfigChannel>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8007024:	f000 fa2c 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8007028:	4803      	ldr	r0, [pc, #12]	; (8007038 <MX_TIM10_Init+0x94>)
 800702a:	f000 fe19 	bl	8007c60 <HAL_TIM_MspPostInit>

}
 800702e:	bf00      	nop
 8007030:	3720      	adds	r7, #32
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20047850 	.word	0x20047850
 800703c:	40014400 	.word	0x40014400

08007040 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007046:	1d3b      	adds	r3, r7, #4
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
 800704c:	605a      	str	r2, [r3, #4]
 800704e:	609a      	str	r2, [r3, #8]
 8007050:	60da      	str	r2, [r3, #12]
 8007052:	611a      	str	r2, [r3, #16]
 8007054:	615a      	str	r2, [r3, #20]
 8007056:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8007058:	4b1e      	ldr	r3, [pc, #120]	; (80070d4 <MX_TIM11_Init+0x94>)
 800705a:	4a1f      	ldr	r2, [pc, #124]	; (80070d8 <MX_TIM11_Init+0x98>)
 800705c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800705e:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <MX_TIM11_Init+0x94>)
 8007060:	2201      	movs	r2, #1
 8007062:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007064:	4b1b      	ldr	r3, [pc, #108]	; (80070d4 <MX_TIM11_Init+0x94>)
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 800706a:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <MX_TIM11_Init+0x94>)
 800706c:	f242 3227 	movw	r2, #8999	; 0x2327
 8007070:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007072:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <MX_TIM11_Init+0x94>)
 8007074:	2200      	movs	r2, #0
 8007076:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007078:	4b16      	ldr	r3, [pc, #88]	; (80070d4 <MX_TIM11_Init+0x94>)
 800707a:	2200      	movs	r2, #0
 800707c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800707e:	4815      	ldr	r0, [pc, #84]	; (80070d4 <MX_TIM11_Init+0x94>)
 8007080:	f009 fba8 	bl	80107d4 <HAL_TIM_Base_Init>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800708a:	f000 f9f9 	bl	8007480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800708e:	4811      	ldr	r0, [pc, #68]	; (80070d4 <MX_TIM11_Init+0x94>)
 8007090:	f009 fbef 	bl	8010872 <HAL_TIM_PWM_Init>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800709a:	f000 f9f1 	bl	8007480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800709e:	2360      	movs	r3, #96	; 0x60
 80070a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80070ae:	1d3b      	adds	r3, r7, #4
 80070b0:	2200      	movs	r2, #0
 80070b2:	4619      	mov	r1, r3
 80070b4:	4807      	ldr	r0, [pc, #28]	; (80070d4 <MX_TIM11_Init+0x94>)
 80070b6:	f009 fe17 	bl	8010ce8 <HAL_TIM_PWM_ConfigChannel>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80070c0:	f000 f9de 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80070c4:	4803      	ldr	r0, [pc, #12]	; (80070d4 <MX_TIM11_Init+0x94>)
 80070c6:	f000 fdcb 	bl	8007c60 <HAL_TIM_MspPostInit>

}
 80070ca:	bf00      	nop
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20047970 	.word	0x20047970
 80070d8:	40014800 	.word	0x40014800

080070dc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80070e0:	4b0e      	ldr	r3, [pc, #56]	; (800711c <MX_TIM13_Init+0x40>)
 80070e2:	4a0f      	ldr	r2, [pc, #60]	; (8007120 <MX_TIM13_Init+0x44>)
 80070e4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80070e6:	4b0d      	ldr	r3, [pc, #52]	; (800711c <MX_TIM13_Init+0x40>)
 80070e8:	2259      	movs	r2, #89	; 0x59
 80070ea:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070ec:	4b0b      	ldr	r3, [pc, #44]	; (800711c <MX_TIM13_Init+0x40>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80070f2:	4b0a      	ldr	r3, [pc, #40]	; (800711c <MX_TIM13_Init+0x40>)
 80070f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80070f8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070fa:	4b08      	ldr	r3, [pc, #32]	; (800711c <MX_TIM13_Init+0x40>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007100:	4b06      	ldr	r3, [pc, #24]	; (800711c <MX_TIM13_Init+0x40>)
 8007102:	2280      	movs	r2, #128	; 0x80
 8007104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007106:	4805      	ldr	r0, [pc, #20]	; (800711c <MX_TIM13_Init+0x40>)
 8007108:	f009 fb64 	bl	80107d4 <HAL_TIM_Base_Init>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8007112:	f000 f9b5 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8007116:	bf00      	nop
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20047930 	.word	0x20047930
 8007120:	40001c00 	.word	0x40001c00

08007124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007128:	4b11      	ldr	r3, [pc, #68]	; (8007170 <MX_USART2_UART_Init+0x4c>)
 800712a:	4a12      	ldr	r2, [pc, #72]	; (8007174 <MX_USART2_UART_Init+0x50>)
 800712c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800712e:	4b10      	ldr	r3, [pc, #64]	; (8007170 <MX_USART2_UART_Init+0x4c>)
 8007130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007136:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <MX_USART2_UART_Init+0x4c>)
 8007138:	2200      	movs	r2, #0
 800713a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800713c:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <MX_USART2_UART_Init+0x4c>)
 800713e:	2200      	movs	r2, #0
 8007140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007142:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <MX_USART2_UART_Init+0x4c>)
 8007144:	2200      	movs	r2, #0
 8007146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007148:	4b09      	ldr	r3, [pc, #36]	; (8007170 <MX_USART2_UART_Init+0x4c>)
 800714a:	220c      	movs	r2, #12
 800714c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800714e:	4b08      	ldr	r3, [pc, #32]	; (8007170 <MX_USART2_UART_Init+0x4c>)
 8007150:	2200      	movs	r2, #0
 8007152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007154:	4b06      	ldr	r3, [pc, #24]	; (8007170 <MX_USART2_UART_Init+0x4c>)
 8007156:	2200      	movs	r2, #0
 8007158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800715a:	4805      	ldr	r0, [pc, #20]	; (8007170 <MX_USART2_UART_Init+0x4c>)
 800715c:	f00a fa0a 	bl	8011574 <HAL_UART_Init>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007166:	f000 f98b 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800716a:	bf00      	nop
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20047b14 	.word	0x20047b14
 8007174:	40004400 	.word	0x40004400

08007178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800717e:	2300      	movs	r3, #0
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	4b14      	ldr	r3, [pc, #80]	; (80071d4 <MX_DMA_Init+0x5c>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	4a13      	ldr	r2, [pc, #76]	; (80071d4 <MX_DMA_Init+0x5c>)
 8007188:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800718c:	6313      	str	r3, [r2, #48]	; 0x30
 800718e:	4b11      	ldr	r3, [pc, #68]	; (80071d4 <MX_DMA_Init+0x5c>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007196:	607b      	str	r3, [r7, #4]
 8007198:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800719a:	2200      	movs	r2, #0
 800719c:	2100      	movs	r1, #0
 800719e:	203a      	movs	r0, #58	; 0x3a
 80071a0:	f004 fecb 	bl	800bf3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80071a4:	203a      	movs	r0, #58	; 0x3a
 80071a6:	f004 fee4 	bl	800bf72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80071aa:	2200      	movs	r2, #0
 80071ac:	2100      	movs	r1, #0
 80071ae:	203b      	movs	r0, #59	; 0x3b
 80071b0:	f004 fec3 	bl	800bf3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80071b4:	203b      	movs	r0, #59	; 0x3b
 80071b6:	f004 fedc 	bl	800bf72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	2045      	movs	r0, #69	; 0x45
 80071c0:	f004 febb 	bl	800bf3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80071c4:	2045      	movs	r0, #69	; 0x45
 80071c6:	f004 fed4 	bl	800bf72 <HAL_NVIC_EnableIRQ>

}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	40023800 	.word	0x40023800

080071d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08c      	sub	sp, #48	; 0x30
 80071dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071de:	f107 031c 	add.w	r3, r7, #28
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	605a      	str	r2, [r3, #4]
 80071e8:	609a      	str	r2, [r3, #8]
 80071ea:	60da      	str	r2, [r3, #12]
 80071ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80071ee:	2300      	movs	r3, #0
 80071f0:	61bb      	str	r3, [r7, #24]
 80071f2:	4b9c      	ldr	r3, [pc, #624]	; (8007464 <MX_GPIO_Init+0x28c>)
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	4a9b      	ldr	r2, [pc, #620]	; (8007464 <MX_GPIO_Init+0x28c>)
 80071f8:	f043 0310 	orr.w	r3, r3, #16
 80071fc:	6313      	str	r3, [r2, #48]	; 0x30
 80071fe:	4b99      	ldr	r3, [pc, #612]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	f003 0310 	and.w	r3, r3, #16
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800720a:	2300      	movs	r3, #0
 800720c:	617b      	str	r3, [r7, #20]
 800720e:	4b95      	ldr	r3, [pc, #596]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	4a94      	ldr	r2, [pc, #592]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007218:	6313      	str	r3, [r2, #48]	; 0x30
 800721a:	4b92      	ldr	r3, [pc, #584]	; (8007464 <MX_GPIO_Init+0x28c>)
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007226:	2300      	movs	r3, #0
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	4b8e      	ldr	r3, [pc, #568]	; (8007464 <MX_GPIO_Init+0x28c>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	4a8d      	ldr	r2, [pc, #564]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007230:	f043 0304 	orr.w	r3, r3, #4
 8007234:	6313      	str	r3, [r2, #48]	; 0x30
 8007236:	4b8b      	ldr	r3, [pc, #556]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	613b      	str	r3, [r7, #16]
 8007240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	4b87      	ldr	r3, [pc, #540]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	4a86      	ldr	r2, [pc, #536]	; (8007464 <MX_GPIO_Init+0x28c>)
 800724c:	f043 0301 	orr.w	r3, r3, #1
 8007250:	6313      	str	r3, [r2, #48]	; 0x30
 8007252:	4b84      	ldr	r3, [pc, #528]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	4b80      	ldr	r3, [pc, #512]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	4a7f      	ldr	r2, [pc, #508]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007268:	f043 0302 	orr.w	r3, r3, #2
 800726c:	6313      	str	r3, [r2, #48]	; 0x30
 800726e:	4b7d      	ldr	r3, [pc, #500]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	60bb      	str	r3, [r7, #8]
 8007278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800727a:	2300      	movs	r3, #0
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	4b79      	ldr	r3, [pc, #484]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	4a78      	ldr	r2, [pc, #480]	; (8007464 <MX_GPIO_Init+0x28c>)
 8007284:	f043 0308 	orr.w	r3, r3, #8
 8007288:	6313      	str	r3, [r2, #48]	; 0x30
 800728a:	4b76      	ldr	r3, [pc, #472]	; (8007464 <MX_GPIO_Init+0x28c>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	607b      	str	r3, [r7, #4]
 8007294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8007296:	2200      	movs	r2, #0
 8007298:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800729c:	4872      	ldr	r0, [pc, #456]	; (8007468 <MX_GPIO_Init+0x290>)
 800729e:	f005 fbe1 	bl	800ca64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80072a2:	2200      	movs	r2, #0
 80072a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80072a8:	4870      	ldr	r0, [pc, #448]	; (800746c <MX_GPIO_Init+0x294>)
 80072aa:	f005 fbdb 	bl	800ca64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80072ae:	2200      	movs	r2, #0
 80072b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80072b4:	486e      	ldr	r0, [pc, #440]	; (8007470 <MX_GPIO_Init+0x298>)
 80072b6:	f005 fbd5 	bl	800ca64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80072ba:	2200      	movs	r2, #0
 80072bc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80072c0:	486c      	ldr	r0, [pc, #432]	; (8007474 <MX_GPIO_Init+0x29c>)
 80072c2:	f005 fbcf 	bl	800ca64 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80072c6:	2304      	movs	r3, #4
 80072c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80072ca:	4b6b      	ldr	r3, [pc, #428]	; (8007478 <MX_GPIO_Init+0x2a0>)
 80072cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072d2:	f107 031c 	add.w	r3, r7, #28
 80072d6:	4619      	mov	r1, r3
 80072d8:	4863      	ldr	r0, [pc, #396]	; (8007468 <MX_GPIO_Init+0x290>)
 80072da:	f005 fa01 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80072de:	230f      	movs	r3, #15
 80072e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072e2:	2303      	movs	r3, #3
 80072e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072ea:	f107 031c 	add.w	r3, r7, #28
 80072ee:	4619      	mov	r1, r3
 80072f0:	4862      	ldr	r0, [pc, #392]	; (800747c <MX_GPIO_Init+0x2a4>)
 80072f2:	f005 f9f5 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80072f6:	23e1      	movs	r3, #225	; 0xe1
 80072f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072fa:	2303      	movs	r3, #3
 80072fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007302:	f107 031c 	add.w	r3, r7, #28
 8007306:	4619      	mov	r1, r3
 8007308:	485a      	ldr	r0, [pc, #360]	; (8007474 <MX_GPIO_Init+0x29c>)
 800730a:	f005 f9e9 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800730e:	2303      	movs	r3, #3
 8007310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007312:	2303      	movs	r3, #3
 8007314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007316:	2300      	movs	r3, #0
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800731a:	f107 031c 	add.w	r3, r7, #28
 800731e:	4619      	mov	r1, r3
 8007320:	4852      	ldr	r0, [pc, #328]	; (800746c <MX_GPIO_Init+0x294>)
 8007322:	f005 f9dd 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007326:	2304      	movs	r3, #4
 8007328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800732a:	2300      	movs	r3, #0
 800732c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800732e:	2301      	movs	r3, #1
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007332:	f107 031c 	add.w	r3, r7, #28
 8007336:	4619      	mov	r1, r3
 8007338:	484c      	ldr	r0, [pc, #304]	; (800746c <MX_GPIO_Init+0x294>)
 800733a:	f005 f9d1 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800733e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8007342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007344:	2300      	movs	r3, #0
 8007346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007348:	2301      	movs	r3, #1
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800734c:	f107 031c 	add.w	r3, r7, #28
 8007350:	4619      	mov	r1, r3
 8007352:	4845      	ldr	r0, [pc, #276]	; (8007468 <MX_GPIO_Init+0x290>)
 8007354:	f005 f9c4 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800735c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800735e:	2301      	movs	r3, #1
 8007360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007362:	2300      	movs	r3, #0
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007366:	2300      	movs	r3, #0
 8007368:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800736a:	f107 031c 	add.w	r3, r7, #28
 800736e:	4619      	mov	r1, r3
 8007370:	483d      	ldr	r0, [pc, #244]	; (8007468 <MX_GPIO_Init+0x290>)
 8007372:	f005 f9b5 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800737a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800737c:	2301      	movs	r3, #1
 800737e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007380:	2300      	movs	r3, #0
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007384:	2300      	movs	r3, #0
 8007386:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007388:	f107 031c 	add.w	r3, r7, #28
 800738c:	4619      	mov	r1, r3
 800738e:	4837      	ldr	r0, [pc, #220]	; (800746c <MX_GPIO_Init+0x294>)
 8007390:	f005 f9a6 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800739a:	4b37      	ldr	r3, [pc, #220]	; (8007478 <MX_GPIO_Init+0x2a0>)
 800739c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80073a2:	f107 031c 	add.w	r3, r7, #28
 80073a6:	4619      	mov	r1, r3
 80073a8:	4831      	ldr	r0, [pc, #196]	; (8007470 <MX_GPIO_Init+0x298>)
 80073aa:	f005 f999 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80073ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073b4:	2301      	movs	r3, #1
 80073b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073bc:	2300      	movs	r3, #0
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80073c0:	f107 031c 	add.w	r3, r7, #28
 80073c4:	4619      	mov	r1, r3
 80073c6:	482a      	ldr	r0, [pc, #168]	; (8007470 <MX_GPIO_Init+0x298>)
 80073c8:	f005 f98a 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80073cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073d2:	2301      	movs	r3, #1
 80073d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073d6:	2301      	movs	r3, #1
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073da:	2300      	movs	r3, #0
 80073dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80073de:	f107 031c 	add.w	r3, r7, #28
 80073e2:	4619      	mov	r1, r3
 80073e4:	4822      	ldr	r0, [pc, #136]	; (8007470 <MX_GPIO_Init+0x298>)
 80073e6:	f005 f97b 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80073ea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80073ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073f0:	2301      	movs	r3, #1
 80073f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073f8:	2300      	movs	r3, #0
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073fc:	f107 031c 	add.w	r3, r7, #28
 8007400:	4619      	mov	r1, r3
 8007402:	481c      	ldr	r0, [pc, #112]	; (8007474 <MX_GPIO_Init+0x29c>)
 8007404:	f005 f96c 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800740c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800740e:	2300      	movs	r3, #0
 8007410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007412:	2300      	movs	r3, #0
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007416:	f107 031c 	add.w	r3, r7, #28
 800741a:	4619      	mov	r1, r3
 800741c:	4815      	ldr	r0, [pc, #84]	; (8007474 <MX_GPIO_Init+0x29c>)
 800741e:	f005 f95f 	bl	800c6e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8007422:	239b      	movs	r3, #155	; 0x9b
 8007424:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007426:	2300      	movs	r3, #0
 8007428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800742a:	2301      	movs	r3, #1
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800742e:	f107 031c 	add.w	r3, r7, #28
 8007432:	4619      	mov	r1, r3
 8007434:	480e      	ldr	r0, [pc, #56]	; (8007470 <MX_GPIO_Init+0x298>)
 8007436:	f005 f953 	bl	800c6e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800743a:	2200      	movs	r2, #0
 800743c:	2100      	movs	r1, #0
 800743e:	2008      	movs	r0, #8
 8007440:	f004 fd7b 	bl	800bf3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8007444:	2008      	movs	r0, #8
 8007446:	f004 fd94 	bl	800bf72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	2017      	movs	r0, #23
 8007450:	f004 fd73 	bl	800bf3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007454:	2017      	movs	r0, #23
 8007456:	f004 fd8c 	bl	800bf72 <HAL_NVIC_EnableIRQ>

}
 800745a:	bf00      	nop
 800745c:	3730      	adds	r7, #48	; 0x30
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40023800 	.word	0x40023800
 8007468:	40021000 	.word	0x40021000
 800746c:	40020400 	.word	0x40020400
 8007470:	40020c00 	.word	0x40020c00
 8007474:	40020000 	.word	0x40020000
 8007478:	10310000 	.word	0x10310000
 800747c:	40020800 	.word	0x40020800

08007480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007484:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007486:	e7fe      	b.n	8007486 <Error_Handler+0x6>

08007488 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 800748c:	bf00      	nop
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
	...

08007498 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800749e:	2300      	movs	r3, #0
 80074a0:	607b      	str	r3, [r7, #4]
 80074a2:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <HAL_MspInit+0x4c>)
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	4a0f      	ldr	r2, [pc, #60]	; (80074e4 <HAL_MspInit+0x4c>)
 80074a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ac:	6453      	str	r3, [r2, #68]	; 0x44
 80074ae:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <HAL_MspInit+0x4c>)
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b6:	607b      	str	r3, [r7, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80074ba:	2300      	movs	r3, #0
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <HAL_MspInit+0x4c>)
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	4a08      	ldr	r2, [pc, #32]	; (80074e4 <HAL_MspInit+0x4c>)
 80074c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074c8:	6413      	str	r3, [r2, #64]	; 0x40
 80074ca:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <HAL_MspInit+0x4c>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40023800 	.word	0x40023800

080074e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08c      	sub	sp, #48	; 0x30
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f0:	f107 031c 	add.w	r3, r7, #28
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	605a      	str	r2, [r3, #4]
 80074fa:	609a      	str	r2, [r3, #8]
 80074fc:	60da      	str	r2, [r3, #12]
 80074fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a4a      	ldr	r2, [pc, #296]	; (8007630 <HAL_ADC_MspInit+0x148>)
 8007506:	4293      	cmp	r3, r2
 8007508:	f040 808e 	bne.w	8007628 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800750c:	2300      	movs	r3, #0
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	4b48      	ldr	r3, [pc, #288]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 8007512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007514:	4a47      	ldr	r2, [pc, #284]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 8007516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800751a:	6453      	str	r3, [r2, #68]	; 0x44
 800751c:	4b45      	ldr	r3, [pc, #276]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 800751e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007528:	2300      	movs	r3, #0
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	4b41      	ldr	r3, [pc, #260]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	4a40      	ldr	r2, [pc, #256]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 8007532:	f043 0304 	orr.w	r3, r3, #4
 8007536:	6313      	str	r3, [r2, #48]	; 0x30
 8007538:	4b3e      	ldr	r3, [pc, #248]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 800753a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007544:	2300      	movs	r3, #0
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	4b3a      	ldr	r3, [pc, #232]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	4a39      	ldr	r2, [pc, #228]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	6313      	str	r3, [r2, #48]	; 0x30
 8007554:	4b37      	ldr	r3, [pc, #220]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 8007556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	4b33      	ldr	r3, [pc, #204]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	4a32      	ldr	r2, [pc, #200]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 800756a:	f043 0302 	orr.w	r3, r3, #2
 800756e:	6313      	str	r3, [r2, #48]	; 0x30
 8007570:	4b30      	ldr	r3, [pc, #192]	; (8007634 <HAL_ADC_MspInit+0x14c>)
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800757c:	230f      	movs	r3, #15
 800757e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007580:	2303      	movs	r3, #3
 8007582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007584:	2300      	movs	r3, #0
 8007586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007588:	f107 031c 	add.w	r3, r7, #28
 800758c:	4619      	mov	r1, r3
 800758e:	482a      	ldr	r0, [pc, #168]	; (8007638 <HAL_ADC_MspInit+0x150>)
 8007590:	f005 f8a6 	bl	800c6e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007594:	23ff      	movs	r3, #255	; 0xff
 8007596:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007598:	2303      	movs	r3, #3
 800759a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759c:	2300      	movs	r3, #0
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075a0:	f107 031c 	add.w	r3, r7, #28
 80075a4:	4619      	mov	r1, r3
 80075a6:	4825      	ldr	r0, [pc, #148]	; (800763c <HAL_ADC_MspInit+0x154>)
 80075a8:	f005 f89a 	bl	800c6e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80075ac:	2303      	movs	r3, #3
 80075ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075b0:	2303      	movs	r3, #3
 80075b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075b8:	f107 031c 	add.w	r3, r7, #28
 80075bc:	4619      	mov	r1, r3
 80075be:	4820      	ldr	r0, [pc, #128]	; (8007640 <HAL_ADC_MspInit+0x158>)
 80075c0:	f005 f88e 	bl	800c6e0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80075c4:	4b1f      	ldr	r3, [pc, #124]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 80075c6:	4a20      	ldr	r2, [pc, #128]	; (8007648 <HAL_ADC_MspInit+0x160>)
 80075c8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80075ca:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 80075cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075d0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075d2:	4b1c      	ldr	r3, [pc, #112]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80075d8:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 80075da:	2200      	movs	r2, #0
 80075dc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80075de:	4b19      	ldr	r3, [pc, #100]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 80075e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075e4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80075e6:	4b17      	ldr	r3, [pc, #92]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 80075e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075ec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80075ee:	4b15      	ldr	r3, [pc, #84]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 80075f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075f4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80075f6:	4b13      	ldr	r3, [pc, #76]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 80075f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075fc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80075fe:	4b11      	ldr	r3, [pc, #68]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 8007600:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007604:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 8007608:	2200      	movs	r2, #0
 800760a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800760c:	480d      	ldr	r0, [pc, #52]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 800760e:	f004 fccb 	bl	800bfa8 <HAL_DMA_Init>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8007618:	f7ff ff32 	bl	8007480 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a09      	ldr	r2, [pc, #36]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 8007620:	639a      	str	r2, [r3, #56]	; 0x38
 8007622:	4a08      	ldr	r2, [pc, #32]	; (8007644 <HAL_ADC_MspInit+0x15c>)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007628:	bf00      	nop
 800762a:	3730      	adds	r7, #48	; 0x30
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40012100 	.word	0x40012100
 8007634:	40023800 	.word	0x40023800
 8007638:	40020800 	.word	0x40020800
 800763c:	40020000 	.word	0x40020000
 8007640:	40020400 	.word	0x40020400
 8007644:	20047b54 	.word	0x20047b54
 8007648:	40026440 	.word	0x40026440

0800764c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08c      	sub	sp, #48	; 0x30
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007654:	f107 031c 	add.w	r3, r7, #28
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	605a      	str	r2, [r3, #4]
 800765e:	609a      	str	r2, [r3, #8]
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a32      	ldr	r2, [pc, #200]	; (8007734 <HAL_I2C_MspInit+0xe8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d12c      	bne.n	80076c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800766e:	2300      	movs	r3, #0
 8007670:	61bb      	str	r3, [r7, #24]
 8007672:	4b31      	ldr	r3, [pc, #196]	; (8007738 <HAL_I2C_MspInit+0xec>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	4a30      	ldr	r2, [pc, #192]	; (8007738 <HAL_I2C_MspInit+0xec>)
 8007678:	f043 0302 	orr.w	r3, r3, #2
 800767c:	6313      	str	r3, [r2, #48]	; 0x30
 800767e:	4b2e      	ldr	r3, [pc, #184]	; (8007738 <HAL_I2C_MspInit+0xec>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	61bb      	str	r3, [r7, #24]
 8007688:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800768a:	23c0      	movs	r3, #192	; 0xc0
 800768c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800768e:	2312      	movs	r3, #18
 8007690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007692:	2301      	movs	r3, #1
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007696:	2303      	movs	r3, #3
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800769a:	2304      	movs	r3, #4
 800769c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800769e:	f107 031c 	add.w	r3, r7, #28
 80076a2:	4619      	mov	r1, r3
 80076a4:	4825      	ldr	r0, [pc, #148]	; (800773c <HAL_I2C_MspInit+0xf0>)
 80076a6:	f005 f81b 	bl	800c6e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
 80076ae:	4b22      	ldr	r3, [pc, #136]	; (8007738 <HAL_I2C_MspInit+0xec>)
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	4a21      	ldr	r2, [pc, #132]	; (8007738 <HAL_I2C_MspInit+0xec>)
 80076b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076b8:	6413      	str	r3, [r2, #64]	; 0x40
 80076ba:	4b1f      	ldr	r3, [pc, #124]	; (8007738 <HAL_I2C_MspInit+0xec>)
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80076c6:	e031      	b.n	800772c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1c      	ldr	r2, [pc, #112]	; (8007740 <HAL_I2C_MspInit+0xf4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d12c      	bne.n	800772c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076d2:	2300      	movs	r3, #0
 80076d4:	613b      	str	r3, [r7, #16]
 80076d6:	4b18      	ldr	r3, [pc, #96]	; (8007738 <HAL_I2C_MspInit+0xec>)
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	4a17      	ldr	r2, [pc, #92]	; (8007738 <HAL_I2C_MspInit+0xec>)
 80076dc:	f043 0302 	orr.w	r3, r3, #2
 80076e0:	6313      	str	r3, [r2, #48]	; 0x30
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <HAL_I2C_MspInit+0xec>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	613b      	str	r3, [r7, #16]
 80076ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80076ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80076f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076f4:	2312      	movs	r3, #18
 80076f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076f8:	2301      	movs	r3, #1
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076fc:	2303      	movs	r3, #3
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007700:	2304      	movs	r3, #4
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007704:	f107 031c 	add.w	r3, r7, #28
 8007708:	4619      	mov	r1, r3
 800770a:	480c      	ldr	r0, [pc, #48]	; (800773c <HAL_I2C_MspInit+0xf0>)
 800770c:	f004 ffe8 	bl	800c6e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007710:	2300      	movs	r3, #0
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	4b08      	ldr	r3, [pc, #32]	; (8007738 <HAL_I2C_MspInit+0xec>)
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	4a07      	ldr	r2, [pc, #28]	; (8007738 <HAL_I2C_MspInit+0xec>)
 800771a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800771e:	6413      	str	r3, [r2, #64]	; 0x40
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <HAL_I2C_MspInit+0xec>)
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
}
 800772c:	bf00      	nop
 800772e:	3730      	adds	r7, #48	; 0x30
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40005400 	.word	0x40005400
 8007738:	40023800 	.word	0x40023800
 800773c:	40020400 	.word	0x40020400
 8007740:	40005800 	.word	0x40005800

08007744 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800774c:	f107 0314 	add.w	r3, r7, #20
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	605a      	str	r2, [r3, #4]
 8007756:	609a      	str	r2, [r3, #8]
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a69      	ldr	r2, [pc, #420]	; (8007908 <HAL_SD_MspInit+0x1c4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	f040 80cb 	bne.w	80078fe <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	4b67      	ldr	r3, [pc, #412]	; (800790c <HAL_SD_MspInit+0x1c8>)
 800776e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007770:	4a66      	ldr	r2, [pc, #408]	; (800790c <HAL_SD_MspInit+0x1c8>)
 8007772:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007776:	6453      	str	r3, [r2, #68]	; 0x44
 8007778:	4b64      	ldr	r3, [pc, #400]	; (800790c <HAL_SD_MspInit+0x1c8>)
 800777a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	4b60      	ldr	r3, [pc, #384]	; (800790c <HAL_SD_MspInit+0x1c8>)
 800778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778c:	4a5f      	ldr	r2, [pc, #380]	; (800790c <HAL_SD_MspInit+0x1c8>)
 800778e:	f043 0304 	orr.w	r3, r3, #4
 8007792:	6313      	str	r3, [r2, #48]	; 0x30
 8007794:	4b5d      	ldr	r3, [pc, #372]	; (800790c <HAL_SD_MspInit+0x1c8>)
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	60fb      	str	r3, [r7, #12]
 800779e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077a0:	2300      	movs	r3, #0
 80077a2:	60bb      	str	r3, [r7, #8]
 80077a4:	4b59      	ldr	r3, [pc, #356]	; (800790c <HAL_SD_MspInit+0x1c8>)
 80077a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a8:	4a58      	ldr	r2, [pc, #352]	; (800790c <HAL_SD_MspInit+0x1c8>)
 80077aa:	f043 0308 	orr.w	r3, r3, #8
 80077ae:	6313      	str	r3, [r2, #48]	; 0x30
 80077b0:	4b56      	ldr	r3, [pc, #344]	; (800790c <HAL_SD_MspInit+0x1c8>)
 80077b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	60bb      	str	r3, [r7, #8]
 80077ba:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80077bc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80077c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077c2:	2302      	movs	r3, #2
 80077c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077ca:	2303      	movs	r3, #3
 80077cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80077ce:	230c      	movs	r3, #12
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077d2:	f107 0314 	add.w	r3, r7, #20
 80077d6:	4619      	mov	r1, r3
 80077d8:	484d      	ldr	r0, [pc, #308]	; (8007910 <HAL_SD_MspInit+0x1cc>)
 80077da:	f004 ff81 	bl	800c6e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80077de:	2304      	movs	r3, #4
 80077e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e2:	2302      	movs	r3, #2
 80077e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077ea:	2303      	movs	r3, #3
 80077ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80077ee:	230c      	movs	r3, #12
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077f2:	f107 0314 	add.w	r3, r7, #20
 80077f6:	4619      	mov	r1, r3
 80077f8:	4846      	ldr	r0, [pc, #280]	; (8007914 <HAL_SD_MspInit+0x1d0>)
 80077fa:	f004 ff71 	bl	800c6e0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80077fe:	4b46      	ldr	r3, [pc, #280]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 8007800:	4a46      	ldr	r2, [pc, #280]	; (800791c <HAL_SD_MspInit+0x1d8>)
 8007802:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007804:	4b44      	ldr	r3, [pc, #272]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 8007806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800780a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800780c:	4b42      	ldr	r3, [pc, #264]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 800780e:	2200      	movs	r2, #0
 8007810:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007812:	4b41      	ldr	r3, [pc, #260]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 8007814:	2200      	movs	r2, #0
 8007816:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007818:	4b3f      	ldr	r3, [pc, #252]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 800781a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800781e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007820:	4b3d      	ldr	r3, [pc, #244]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 8007822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007826:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007828:	4b3b      	ldr	r3, [pc, #236]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 800782a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800782e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007830:	4b39      	ldr	r3, [pc, #228]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 8007832:	2220      	movs	r2, #32
 8007834:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007836:	4b38      	ldr	r3, [pc, #224]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 8007838:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800783c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800783e:	4b36      	ldr	r3, [pc, #216]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 8007840:	2204      	movs	r2, #4
 8007842:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007844:	4b34      	ldr	r3, [pc, #208]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 8007846:	2203      	movs	r2, #3
 8007848:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800784a:	4b33      	ldr	r3, [pc, #204]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 800784c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007850:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007852:	4b31      	ldr	r3, [pc, #196]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 8007854:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007858:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800785a:	482f      	ldr	r0, [pc, #188]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 800785c:	f004 fba4 	bl	800bfa8 <HAL_DMA_Init>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007866:	f7ff fe0b 	bl	8007480 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a2a      	ldr	r2, [pc, #168]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 800786e:	641a      	str	r2, [r3, #64]	; 0x40
 8007870:	4a29      	ldr	r2, [pc, #164]	; (8007918 <HAL_SD_MspInit+0x1d4>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007876:	4b2a      	ldr	r3, [pc, #168]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 8007878:	4a2a      	ldr	r2, [pc, #168]	; (8007924 <HAL_SD_MspInit+0x1e0>)
 800787a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800787c:	4b28      	ldr	r3, [pc, #160]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 800787e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007882:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007884:	4b26      	ldr	r3, [pc, #152]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 8007886:	2240      	movs	r2, #64	; 0x40
 8007888:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800788a:	4b25      	ldr	r3, [pc, #148]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 800788c:	2200      	movs	r2, #0
 800788e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007890:	4b23      	ldr	r3, [pc, #140]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 8007892:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007896:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007898:	4b21      	ldr	r3, [pc, #132]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 800789a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800789e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80078a0:	4b1f      	ldr	r3, [pc, #124]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 80078a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80078a6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80078a8:	4b1d      	ldr	r3, [pc, #116]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 80078aa:	2220      	movs	r2, #32
 80078ac:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80078ae:	4b1c      	ldr	r3, [pc, #112]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 80078b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80078b4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80078b6:	4b1a      	ldr	r3, [pc, #104]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 80078b8:	2204      	movs	r2, #4
 80078ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80078bc:	4b18      	ldr	r3, [pc, #96]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 80078be:	2203      	movs	r2, #3
 80078c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80078c2:	4b17      	ldr	r3, [pc, #92]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 80078c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80078c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80078ca:	4b15      	ldr	r3, [pc, #84]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 80078cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80078d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80078d2:	4813      	ldr	r0, [pc, #76]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 80078d4:	f004 fb68 	bl	800bfa8 <HAL_DMA_Init>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80078de:	f7ff fdcf 	bl	8007480 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a0e      	ldr	r2, [pc, #56]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 80078e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80078e8:	4a0d      	ldr	r2, [pc, #52]	; (8007920 <HAL_SD_MspInit+0x1dc>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80078ee:	2200      	movs	r2, #0
 80078f0:	2100      	movs	r1, #0
 80078f2:	2031      	movs	r0, #49	; 0x31
 80078f4:	f004 fb21 	bl	800bf3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80078f8:	2031      	movs	r0, #49	; 0x31
 80078fa:	f004 fb3a 	bl	800bf72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80078fe:	bf00      	nop
 8007900:	3728      	adds	r7, #40	; 0x28
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40023800 	.word	0x40023800
 8007910:	40020800 	.word	0x40020800
 8007914:	40020c00 	.word	0x40020c00
 8007918:	2004767c 	.word	0x2004767c
 800791c:	40026458 	.word	0x40026458
 8007920:	200479b0 	.word	0x200479b0
 8007924:	400264a0 	.word	0x400264a0

08007928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	; 0x28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007930:	f107 0314 	add.w	r3, r7, #20
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	605a      	str	r2, [r3, #4]
 800793a:	609a      	str	r2, [r3, #8]
 800793c:	60da      	str	r2, [r3, #12]
 800793e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a19      	ldr	r2, [pc, #100]	; (80079ac <HAL_SPI_MspInit+0x84>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d12c      	bne.n	80079a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800794a:	2300      	movs	r3, #0
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	4b18      	ldr	r3, [pc, #96]	; (80079b0 <HAL_SPI_MspInit+0x88>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	4a17      	ldr	r2, [pc, #92]	; (80079b0 <HAL_SPI_MspInit+0x88>)
 8007954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007958:	6413      	str	r3, [r2, #64]	; 0x40
 800795a:	4b15      	ldr	r3, [pc, #84]	; (80079b0 <HAL_SPI_MspInit+0x88>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <HAL_SPI_MspInit+0x88>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	4a10      	ldr	r2, [pc, #64]	; (80079b0 <HAL_SPI_MspInit+0x88>)
 8007970:	f043 0302 	orr.w	r3, r3, #2
 8007974:	6313      	str	r3, [r2, #48]	; 0x30
 8007976:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <HAL_SPI_MspInit+0x88>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007982:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007988:	2302      	movs	r3, #2
 800798a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798c:	2300      	movs	r3, #0
 800798e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007990:	2303      	movs	r3, #3
 8007992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007994:	2305      	movs	r3, #5
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007998:	f107 0314 	add.w	r3, r7, #20
 800799c:	4619      	mov	r1, r3
 800799e:	4805      	ldr	r0, [pc, #20]	; (80079b4 <HAL_SPI_MspInit+0x8c>)
 80079a0:	f004 fe9e 	bl	800c6e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80079a4:	bf00      	nop
 80079a6:	3728      	adds	r7, #40	; 0x28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40003800 	.word	0x40003800
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40020400 	.word	0x40020400

080079b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08c      	sub	sp, #48	; 0x30
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c0:	f107 031c 	add.w	r3, r7, #28
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	605a      	str	r2, [r3, #4]
 80079ca:	609a      	str	r2, [r3, #8]
 80079cc:	60da      	str	r2, [r3, #12]
 80079ce:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a2d      	ldr	r2, [pc, #180]	; (8007a8c <HAL_TIM_PWM_MspInit+0xd4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d12d      	bne.n	8007a36 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80079da:	2300      	movs	r3, #0
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	4b2c      	ldr	r3, [pc, #176]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 80079e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e2:	4a2b      	ldr	r2, [pc, #172]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 80079e4:	f043 0301 	orr.w	r3, r3, #1
 80079e8:	6453      	str	r3, [r2, #68]	; 0x44
 80079ea:	4b29      	ldr	r3, [pc, #164]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 80079ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	61bb      	str	r3, [r7, #24]
 80079f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80079f6:	2300      	movs	r3, #0
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	4b25      	ldr	r3, [pc, #148]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	4a24      	ldr	r2, [pc, #144]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a00:	f043 0310 	orr.w	r3, r3, #16
 8007a04:	6313      	str	r3, [r2, #48]	; 0x30
 8007a06:	4b22      	ldr	r3, [pc, #136]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	f003 0310 	and.w	r3, r3, #16
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007a12:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a20:	2300      	movs	r3, #0
 8007a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007a24:	2301      	movs	r3, #1
 8007a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007a28:	f107 031c 	add.w	r3, r7, #28
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4819      	ldr	r0, [pc, #100]	; (8007a94 <HAL_TIM_PWM_MspInit+0xdc>)
 8007a30:	f004 fe56 	bl	800c6e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007a34:	e026      	b.n	8007a84 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <HAL_TIM_PWM_MspInit+0xe0>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10e      	bne.n	8007a5e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007a40:	2300      	movs	r3, #0
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	4b12      	ldr	r3, [pc, #72]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a4a:	f043 0302 	orr.w	r3, r3, #2
 8007a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8007a50:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	613b      	str	r3, [r7, #16]
 8007a5a:	693b      	ldr	r3, [r7, #16]
}
 8007a5c:	e012      	b.n	8007a84 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a0e      	ldr	r2, [pc, #56]	; (8007a9c <HAL_TIM_PWM_MspInit+0xe4>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d10d      	bne.n	8007a84 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	4a07      	ldr	r2, [pc, #28]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a72:	f043 0304 	orr.w	r3, r3, #4
 8007a76:	6413      	str	r3, [r2, #64]	; 0x40
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	bf00      	nop
 8007a86:	3730      	adds	r7, #48	; 0x30
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40010000 	.word	0x40010000
 8007a90:	40023800 	.word	0x40023800
 8007a94:	40021000 	.word	0x40021000
 8007a98:	40000400 	.word	0x40000400
 8007a9c:	40000800 	.word	0x40000800

08007aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a3e      	ldr	r2, [pc, #248]	; (8007ba8 <HAL_TIM_Base_MspInit+0x108>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d116      	bne.n	8007ae0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	4b3d      	ldr	r3, [pc, #244]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	4a3c      	ldr	r2, [pc, #240]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007abc:	f043 0310 	orr.w	r3, r3, #16
 8007ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ac2:	4b3a      	ldr	r3, [pc, #232]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	f003 0310 	and.w	r3, r3, #16
 8007aca:	61fb      	str	r3, [r7, #28]
 8007acc:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	2036      	movs	r0, #54	; 0x36
 8007ad4:	f004 fa31 	bl	800bf3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007ad8:	2036      	movs	r0, #54	; 0x36
 8007ada:	f004 fa4a 	bl	800bf72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007ade:	e05e      	b.n	8007b9e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a32      	ldr	r2, [pc, #200]	; (8007bb0 <HAL_TIM_Base_MspInit+0x110>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d116      	bne.n	8007b18 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007aea:	2300      	movs	r3, #0
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	4b2f      	ldr	r3, [pc, #188]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	4a2e      	ldr	r2, [pc, #184]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007af4:	f043 0320 	orr.w	r3, r3, #32
 8007af8:	6413      	str	r3, [r2, #64]	; 0x40
 8007afa:	4b2c      	ldr	r3, [pc, #176]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	61bb      	str	r3, [r7, #24]
 8007b04:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007b06:	2200      	movs	r2, #0
 8007b08:	2100      	movs	r1, #0
 8007b0a:	2037      	movs	r0, #55	; 0x37
 8007b0c:	f004 fa15 	bl	800bf3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007b10:	2037      	movs	r0, #55	; 0x37
 8007b12:	f004 fa2e 	bl	800bf72 <HAL_NVIC_EnableIRQ>
}
 8007b16:	e042      	b.n	8007b9e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a25      	ldr	r2, [pc, #148]	; (8007bb4 <HAL_TIM_Base_MspInit+0x114>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d10e      	bne.n	8007b40 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	4b21      	ldr	r3, [pc, #132]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2a:	4a20      	ldr	r2, [pc, #128]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b30:	6453      	str	r3, [r2, #68]	; 0x44
 8007b32:	4b1e      	ldr	r3, [pc, #120]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	697b      	ldr	r3, [r7, #20]
}
 8007b3e:	e02e      	b.n	8007b9e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a1c      	ldr	r2, [pc, #112]	; (8007bb8 <HAL_TIM_Base_MspInit+0x118>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d10e      	bne.n	8007b68 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	4b17      	ldr	r3, [pc, #92]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	4a16      	ldr	r2, [pc, #88]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b58:	6453      	str	r3, [r2, #68]	; 0x44
 8007b5a:	4b14      	ldr	r3, [pc, #80]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	693b      	ldr	r3, [r7, #16]
}
 8007b66:	e01a      	b.n	8007b9e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a13      	ldr	r2, [pc, #76]	; (8007bbc <HAL_TIM_Base_MspInit+0x11c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d115      	bne.n	8007b9e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	4b0d      	ldr	r3, [pc, #52]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	4a0c      	ldr	r2, [pc, #48]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b80:	6413      	str	r3, [r2, #64]	; 0x40
 8007b82:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <HAL_TIM_Base_MspInit+0x10c>)
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2100      	movs	r1, #0
 8007b92:	202c      	movs	r0, #44	; 0x2c
 8007b94:	f004 f9d1 	bl	800bf3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007b98:	202c      	movs	r0, #44	; 0x2c
 8007b9a:	f004 f9ea 	bl	800bf72 <HAL_NVIC_EnableIRQ>
}
 8007b9e:	bf00      	nop
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	40001000 	.word	0x40001000
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	40001400 	.word	0x40001400
 8007bb4:	40014400 	.word	0x40014400
 8007bb8:	40014800 	.word	0x40014800
 8007bbc:	40001c00 	.word	0x40001c00

08007bc0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	; 0x28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bc8:	f107 0314 	add.w	r3, r7, #20
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	605a      	str	r2, [r3, #4]
 8007bd2:	609a      	str	r2, [r3, #8]
 8007bd4:	60da      	str	r2, [r3, #12]
 8007bd6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a1d      	ldr	r2, [pc, #116]	; (8007c54 <HAL_TIM_Encoder_MspInit+0x94>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d133      	bne.n	8007c4a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007be2:	2300      	movs	r3, #0
 8007be4:	613b      	str	r3, [r7, #16]
 8007be6:	4b1c      	ldr	r3, [pc, #112]	; (8007c58 <HAL_TIM_Encoder_MspInit+0x98>)
 8007be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bea:	4a1b      	ldr	r2, [pc, #108]	; (8007c58 <HAL_TIM_Encoder_MspInit+0x98>)
 8007bec:	f043 0302 	orr.w	r3, r3, #2
 8007bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8007bf2:	4b19      	ldr	r3, [pc, #100]	; (8007c58 <HAL_TIM_Encoder_MspInit+0x98>)
 8007bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	613b      	str	r3, [r7, #16]
 8007bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	4b15      	ldr	r3, [pc, #84]	; (8007c58 <HAL_TIM_Encoder_MspInit+0x98>)
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	4a14      	ldr	r2, [pc, #80]	; (8007c58 <HAL_TIM_Encoder_MspInit+0x98>)
 8007c08:	f043 0304 	orr.w	r3, r3, #4
 8007c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c0e:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <HAL_TIM_Encoder_MspInit+0x98>)
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	f003 0304 	and.w	r3, r3, #4
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c1a:	23c0      	movs	r3, #192	; 0xc0
 8007c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c26:	2300      	movs	r3, #0
 8007c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c2e:	f107 0314 	add.w	r3, r7, #20
 8007c32:	4619      	mov	r1, r3
 8007c34:	4809      	ldr	r0, [pc, #36]	; (8007c5c <HAL_TIM_Encoder_MspInit+0x9c>)
 8007c36:	f004 fd53 	bl	800c6e0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	202c      	movs	r0, #44	; 0x2c
 8007c40:	f004 f97b 	bl	800bf3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007c44:	202c      	movs	r0, #44	; 0x2c
 8007c46:	f004 f994 	bl	800bf72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007c4a:	bf00      	nop
 8007c4c:	3728      	adds	r7, #40	; 0x28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	40010400 	.word	0x40010400
 8007c58:	40023800 	.word	0x40023800
 8007c5c:	40020800 	.word	0x40020800

08007c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08c      	sub	sp, #48	; 0x30
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c68:	f107 031c 	add.w	r3, r7, #28
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	605a      	str	r2, [r3, #4]
 8007c72:	609a      	str	r2, [r3, #8]
 8007c74:	60da      	str	r2, [r3, #12]
 8007c76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a5c      	ldr	r2, [pc, #368]	; (8007df0 <HAL_TIM_MspPostInit+0x190>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d11f      	bne.n	8007cc2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
 8007c86:	4b5b      	ldr	r3, [pc, #364]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	4a5a      	ldr	r2, [pc, #360]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007c8c:	f043 0310 	orr.w	r3, r3, #16
 8007c90:	6313      	str	r3, [r2, #48]	; 0x30
 8007c92:	4b58      	ldr	r3, [pc, #352]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	61bb      	str	r3, [r7, #24]
 8007c9c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007c9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cac:	2300      	movs	r3, #0
 8007cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007cb4:	f107 031c 	add.w	r3, r7, #28
 8007cb8:	4619      	mov	r1, r3
 8007cba:	484f      	ldr	r0, [pc, #316]	; (8007df8 <HAL_TIM_MspPostInit+0x198>)
 8007cbc:	f004 fd10 	bl	800c6e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007cc0:	e091      	b.n	8007de6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a4d      	ldr	r2, [pc, #308]	; (8007dfc <HAL_TIM_MspPostInit+0x19c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d11e      	bne.n	8007d0a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ccc:	2300      	movs	r3, #0
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	4b48      	ldr	r3, [pc, #288]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd4:	4a47      	ldr	r2, [pc, #284]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007cd6:	f043 0302 	orr.w	r3, r3, #2
 8007cda:	6313      	str	r3, [r2, #48]	; 0x30
 8007cdc:	4b45      	ldr	r3, [pc, #276]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	617b      	str	r3, [r7, #20]
 8007ce6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007ce8:	2330      	movs	r3, #48	; 0x30
 8007cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cec:	2302      	movs	r3, #2
 8007cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cfc:	f107 031c 	add.w	r3, r7, #28
 8007d00:	4619      	mov	r1, r3
 8007d02:	483f      	ldr	r0, [pc, #252]	; (8007e00 <HAL_TIM_MspPostInit+0x1a0>)
 8007d04:	f004 fcec 	bl	800c6e0 <HAL_GPIO_Init>
}
 8007d08:	e06d      	b.n	8007de6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a3d      	ldr	r2, [pc, #244]	; (8007e04 <HAL_TIM_MspPostInit+0x1a4>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d11f      	bne.n	8007d54 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d14:	2300      	movs	r3, #0
 8007d16:	613b      	str	r3, [r7, #16]
 8007d18:	4b36      	ldr	r3, [pc, #216]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1c:	4a35      	ldr	r2, [pc, #212]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007d1e:	f043 0308 	orr.w	r3, r3, #8
 8007d22:	6313      	str	r3, [r2, #48]	; 0x30
 8007d24:	4b33      	ldr	r3, [pc, #204]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d28:	f003 0308 	and.w	r3, r3, #8
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007d30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d36:	2302      	movs	r3, #2
 8007d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007d42:	2302      	movs	r3, #2
 8007d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d46:	f107 031c 	add.w	r3, r7, #28
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	482e      	ldr	r0, [pc, #184]	; (8007e08 <HAL_TIM_MspPostInit+0x1a8>)
 8007d4e:	f004 fcc7 	bl	800c6e0 <HAL_GPIO_Init>
}
 8007d52:	e048      	b.n	8007de6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a2c      	ldr	r2, [pc, #176]	; (8007e0c <HAL_TIM_MspPostInit+0x1ac>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d11f      	bne.n	8007d9e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	4b24      	ldr	r3, [pc, #144]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	4a23      	ldr	r2, [pc, #140]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007d68:	f043 0302 	orr.w	r3, r3, #2
 8007d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d6e:	4b21      	ldr	r3, [pc, #132]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d80:	2302      	movs	r3, #2
 8007d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d84:	2300      	movs	r3, #0
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d90:	f107 031c 	add.w	r3, r7, #28
 8007d94:	4619      	mov	r1, r3
 8007d96:	481a      	ldr	r0, [pc, #104]	; (8007e00 <HAL_TIM_MspPostInit+0x1a0>)
 8007d98:	f004 fca2 	bl	800c6e0 <HAL_GPIO_Init>
}
 8007d9c:	e023      	b.n	8007de6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <HAL_TIM_MspPostInit+0x1b0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d11e      	bne.n	8007de6 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007da8:	2300      	movs	r3, #0
 8007daa:	60bb      	str	r3, [r7, #8]
 8007dac:	4b11      	ldr	r3, [pc, #68]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db0:	4a10      	ldr	r2, [pc, #64]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007db2:	f043 0302 	orr.w	r3, r3, #2
 8007db6:	6313      	str	r3, [r2, #48]	; 0x30
 8007db8:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <HAL_TIM_MspPostInit+0x194>)
 8007dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	60bb      	str	r3, [r7, #8]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dca:	2302      	movs	r3, #2
 8007dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dda:	f107 031c 	add.w	r3, r7, #28
 8007dde:	4619      	mov	r1, r3
 8007de0:	4807      	ldr	r0, [pc, #28]	; (8007e00 <HAL_TIM_MspPostInit+0x1a0>)
 8007de2:	f004 fc7d 	bl	800c6e0 <HAL_GPIO_Init>
}
 8007de6:	bf00      	nop
 8007de8:	3730      	adds	r7, #48	; 0x30
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40010000 	.word	0x40010000
 8007df4:	40023800 	.word	0x40023800
 8007df8:	40021000 	.word	0x40021000
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40020400 	.word	0x40020400
 8007e04:	40000800 	.word	0x40000800
 8007e08:	40020c00 	.word	0x40020c00
 8007e0c:	40014400 	.word	0x40014400
 8007e10:	40014800 	.word	0x40014800

08007e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08a      	sub	sp, #40	; 0x28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e1c:	f107 0314 	add.w	r3, r7, #20
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	605a      	str	r2, [r3, #4]
 8007e26:	609a      	str	r2, [r3, #8]
 8007e28:	60da      	str	r2, [r3, #12]
 8007e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a19      	ldr	r2, [pc, #100]	; (8007e98 <HAL_UART_MspInit+0x84>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d12b      	bne.n	8007e8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
 8007e3a:	4b18      	ldr	r3, [pc, #96]	; (8007e9c <HAL_UART_MspInit+0x88>)
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	4a17      	ldr	r2, [pc, #92]	; (8007e9c <HAL_UART_MspInit+0x88>)
 8007e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e44:	6413      	str	r3, [r2, #64]	; 0x40
 8007e46:	4b15      	ldr	r3, [pc, #84]	; (8007e9c <HAL_UART_MspInit+0x88>)
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	4b11      	ldr	r3, [pc, #68]	; (8007e9c <HAL_UART_MspInit+0x88>)
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	4a10      	ldr	r2, [pc, #64]	; (8007e9c <HAL_UART_MspInit+0x88>)
 8007e5c:	f043 0308 	orr.w	r3, r3, #8
 8007e60:	6313      	str	r3, [r2, #48]	; 0x30
 8007e62:	4b0e      	ldr	r3, [pc, #56]	; (8007e9c <HAL_UART_MspInit+0x88>)
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	f003 0308 	and.w	r3, r3, #8
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007e6e:	2360      	movs	r3, #96	; 0x60
 8007e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e72:	2302      	movs	r3, #2
 8007e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007e7e:	2307      	movs	r3, #7
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e82:	f107 0314 	add.w	r3, r7, #20
 8007e86:	4619      	mov	r1, r3
 8007e88:	4805      	ldr	r0, [pc, #20]	; (8007ea0 <HAL_UART_MspInit+0x8c>)
 8007e8a:	f004 fc29 	bl	800c6e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007e8e:	bf00      	nop
 8007e90:	3728      	adds	r7, #40	; 0x28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	40004400 	.word	0x40004400
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	40020c00 	.word	0x40020c00

08007ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007ea8:	e7fe      	b.n	8007ea8 <NMI_Handler+0x4>

08007eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007eae:	e7fe      	b.n	8007eae <HardFault_Handler+0x4>

08007eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007eb4:	e7fe      	b.n	8007eb4 <MemManage_Handler+0x4>

08007eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007eba:	e7fe      	b.n	8007eba <BusFault_Handler+0x4>

08007ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ec0:	e7fe      	b.n	8007ec0 <UsageFault_Handler+0x4>

08007ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ec6:	bf00      	nop
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ed4:	bf00      	nop
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007ee2:	bf00      	nop
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007ef0:	f003 fb02 	bl	800b4f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ef4:	bf00      	nop
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007efc:	2004      	movs	r0, #4
 8007efe:	f004 fdcb 	bl	800ca98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007f02:	bf00      	nop
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007f0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007f0e:	f004 fdc3 	bl	800ca98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007f12:	bf00      	nop
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007f1c:	4803      	ldr	r0, [pc, #12]	; (8007f2c <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007f1e:	f008 fdda 	bl	8010ad6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007f22:	4803      	ldr	r0, [pc, #12]	; (8007f30 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007f24:	f008 fdd7 	bl	8010ad6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007f28:	bf00      	nop
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20047734 	.word	0x20047734
 8007f30:	20047930 	.word	0x20047930

08007f34 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007f38:	4802      	ldr	r0, [pc, #8]	; (8007f44 <SDIO_IRQHandler+0x10>)
 8007f3a:	f006 fe73 	bl	800ec24 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007f3e:	bf00      	nop
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20047a90 	.word	0x20047a90

08007f48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007f4c:	4802      	ldr	r0, [pc, #8]	; (8007f58 <TIM6_DAC_IRQHandler+0x10>)
 8007f4e:	f008 fdc2 	bl	8010ad6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007f52:	bf00      	nop
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20047a10 	.word	0x20047a10

08007f5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007f60:	4802      	ldr	r0, [pc, #8]	; (8007f6c <TIM7_IRQHandler+0x10>)
 8007f62:	f008 fdb8 	bl	8010ad6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007f66:	bf00      	nop
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20047bb4 	.word	0x20047bb4

08007f70 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007f74:	4802      	ldr	r0, [pc, #8]	; (8007f80 <DMA2_Stream2_IRQHandler+0x10>)
 8007f76:	f004 f93f 	bl	800c1f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007f7a:	bf00      	nop
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20047b54 	.word	0x20047b54

08007f84 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007f88:	4802      	ldr	r0, [pc, #8]	; (8007f94 <DMA2_Stream3_IRQHandler+0x10>)
 8007f8a:	f004 f935 	bl	800c1f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007f8e:	bf00      	nop
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	2004767c 	.word	0x2004767c

08007f98 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007f9c:	4802      	ldr	r0, [pc, #8]	; (8007fa8 <DMA2_Stream6_IRQHandler+0x10>)
 8007f9e:	f004 f92b 	bl	800c1f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007fa2:	bf00      	nop
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200479b0 	.word	0x200479b0

08007fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007fb4:	4a14      	ldr	r2, [pc, #80]	; (8008008 <_sbrk+0x5c>)
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <_sbrk+0x60>)
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007fc0:	4b13      	ldr	r3, [pc, #76]	; (8008010 <_sbrk+0x64>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007fc8:	4b11      	ldr	r3, [pc, #68]	; (8008010 <_sbrk+0x64>)
 8007fca:	4a12      	ldr	r2, [pc, #72]	; (8008014 <_sbrk+0x68>)
 8007fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007fce:	4b10      	ldr	r3, [pc, #64]	; (8008010 <_sbrk+0x64>)
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d207      	bcs.n	8007fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007fdc:	f00d ffb8 	bl	8015f50 <__errno>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fea:	e009      	b.n	8008000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007fec:	4b08      	ldr	r3, [pc, #32]	; (8008010 <_sbrk+0x64>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007ff2:	4b07      	ldr	r3, [pc, #28]	; (8008010 <_sbrk+0x64>)
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	4a05      	ldr	r2, [pc, #20]	; (8008010 <_sbrk+0x64>)
 8007ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20050000 	.word	0x20050000
 800800c:	00000800 	.word	0x00000800
 8008010:	20000240 	.word	0x20000240
 8008014:	20049d08 	.word	0x20049d08

08008018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800801c:	4b08      	ldr	r3, [pc, #32]	; (8008040 <SystemInit+0x28>)
 800801e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008022:	4a07      	ldr	r2, [pc, #28]	; (8008040 <SystemInit+0x28>)
 8008024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <SystemInit+0x28>)
 800802e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008032:	609a      	str	r2, [r3, #8]
#endif
}
 8008034:	bf00      	nop
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	e000ed00 	.word	0xe000ed00

08008044 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8008044:	b598      	push	{r3, r4, r7, lr}
 8008046:	af00      	add	r7, sp, #0
	lcd_init();
 8008048:	f7f8 ffe6 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 800804c:	483b      	ldr	r0, [pc, #236]	; (800813c <cppInit+0xf8>)
 800804e:	f7fd fd0f 	bl	8005a70 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8008052:	2064      	movs	r0, #100	; 0x64
 8008054:	f003 fa70 	bl	800b538 <HAL_Delay>
	power_sensor.updateValues();
 8008058:	4838      	ldr	r0, [pc, #224]	; (800813c <cppInit+0xf8>)
 800805a:	f7fd fd19 	bl	8005a90 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800805e:	f7f9 f81f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8008062:	2100      	movs	r1, #0
 8008064:	2000      	movs	r0, #0
 8008066:	f7f9 f82b 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800806a:	4835      	ldr	r0, [pc, #212]	; (8008140 <cppInit+0xfc>)
 800806c:	f7f9 f852 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8008070:	2101      	movs	r1, #1
 8008072:	2000      	movs	r0, #0
 8008074:	f7f9 f824 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8008078:	4830      	ldr	r0, [pc, #192]	; (800813c <cppInit+0xf8>)
 800807a:	f7fd fd33 	bl	8005ae4 <_ZN11PowerSensor17getButteryVoltageEv>
 800807e:	ee10 3a10 	vmov	r3, s0
 8008082:	4618      	mov	r0, r3
 8008084:	f7f8 fa78 	bl	8000578 <__aeabi_f2d>
 8008088:	4603      	mov	r3, r0
 800808a:	460c      	mov	r4, r1
 800808c:	461a      	mov	r2, r3
 800808e:	4623      	mov	r3, r4
 8008090:	482c      	ldr	r0, [pc, #176]	; (8008144 <cppInit+0x100>)
 8008092:	f7f9 f83f 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 8008096:	f44f 7048 	mov.w	r0, #800	; 0x320
 800809a:	f003 fa4d 	bl	800b538 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800809e:	482a      	ldr	r0, [pc, #168]	; (8008148 <cppInit+0x104>)
 80080a0:	f7fc ffa8 	bl	8004ff4 <_ZN6Logger10sdCardInitEv>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <cppInit+0x76>
		led.fullColor('G');
 80080aa:	2147      	movs	r1, #71	; 0x47
 80080ac:	4827      	ldr	r0, [pc, #156]	; (800814c <cppInit+0x108>)
 80080ae:	f7fa f851 	bl	8002154 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80080b2:	2064      	movs	r0, #100	; 0x64
 80080b4:	f003 fa40 	bl	800b538 <HAL_Delay>
 80080b8:	e006      	b.n	80080c8 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80080ba:	2152      	movs	r1, #82	; 0x52
 80080bc:	4823      	ldr	r0, [pc, #140]	; (800814c <cppInit+0x108>)
 80080be:	f7fa f849 	bl	8002154 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80080c2:	2064      	movs	r0, #100	; 0x64
 80080c4:	f003 fa38 	bl	800b538 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80080c8:	4821      	ldr	r0, [pc, #132]	; (8008150 <cppInit+0x10c>)
 80080ca:	f7fa f99f 	bl	800240c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80080ce:	4821      	ldr	r0, [pc, #132]	; (8008154 <cppInit+0x110>)
 80080d0:	f7fd fa64 	bl	800559c <_ZN5Motor4initEv>
	encoder.init();
 80080d4:	4820      	ldr	r0, [pc, #128]	; (8008158 <cppInit+0x114>)
 80080d6:	f7f9 f9ad 	bl	8001434 <_ZN7Encoder4initEv>
	imu.init();
 80080da:	4820      	ldr	r0, [pc, #128]	; (800815c <cppInit+0x118>)
 80080dc:	f7f9 fdf8 	bl	8001cd0 <_ZN3IMU4initEv>
	line_trace.init();
 80080e0:	481f      	ldr	r0, [pc, #124]	; (8008160 <cppInit+0x11c>)
 80080e2:	f7fb fdb9 	bl	8003c58 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80080e6:	481a      	ldr	r0, [pc, #104]	; (8008150 <cppInit+0x10c>)
 80080e8:	f7fa fa86 	bl	80025f8 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80080ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080f0:	f003 fa22 	bl	800b538 <HAL_Delay>

	led.fullColor('M');
 80080f4:	214d      	movs	r1, #77	; 0x4d
 80080f6:	4815      	ldr	r0, [pc, #84]	; (800814c <cppInit+0x108>)
 80080f8:	f7fa f82c 	bl	8002154 <_ZN3LED9fullColorEc>
	imu.calibration();
 80080fc:	4817      	ldr	r0, [pc, #92]	; (800815c <cppInit+0x118>)
 80080fe:	f7f9 feb1 	bl	8001e64 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 8008102:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8008164 <cppInit+0x120>
 8008106:	eddf 0a18 	vldr	s1, [pc, #96]	; 8008168 <cppInit+0x124>
 800810a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800816c <cppInit+0x128>
 800810e:	4818      	ldr	r0, [pc, #96]	; (8008170 <cppInit+0x12c>)
 8008110:	f7fe f99e 	bl	8006450 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8008114:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8008164 <cppInit+0x120>
 8008118:	eddf 0a16 	vldr	s1, [pc, #88]	; 8008174 <cppInit+0x130>
 800811c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8008178 <cppInit+0x134>
 8008120:	4813      	ldr	r0, [pc, #76]	; (8008170 <cppInit+0x12c>)
 8008122:	f7fe f9ae 	bl	8006482 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8008126:	4815      	ldr	r0, [pc, #84]	; (800817c <cppInit+0x138>)
 8008128:	f7fd fbab 	bl	8005882 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 800812c:	4814      	ldr	r0, [pc, #80]	; (8008180 <cppInit+0x13c>)
 800812e:	f7fd fc43 	bl	80059b8 <_ZN13PathFollowing4initEv>

	esc.init();
 8008132:	4814      	ldr	r0, [pc, #80]	; (8008184 <cppInit+0x140>)
 8008134:	f7f9 f85a 	bl	80011ec <_ZN3ESC4initEv>

}
 8008138:	bf00      	nop
 800813a:	bd98      	pop	{r3, r4, r7, pc}
 800813c:	2000055c 	.word	0x2000055c
 8008140:	0801a5fc 	.word	0x0801a5fc
 8008144:	0801a604 	.word	0x0801a604
 8008148:	2000057c 	.word	0x2000057c
 800814c:	20000558 	.word	0x20000558
 8008150:	20000244 	.word	0x20000244
 8008154:	20000554 	.word	0x20000554
 8008158:	20020928 	.word	0x20020928
 800815c:	20000568 	.word	0x20000568
 8008160:	200209d4 	.word	0x200209d4
 8008164:	00000000 	.word	0x00000000
 8008168:	4129999a 	.word	0x4129999a
 800816c:	3f99999a 	.word	0x3f99999a
 8008170:	20020950 	.word	0x20020950
 8008174:	3f5e3fbc 	.word	0x3f5e3fbc
 8008178:	3d75c28f 	.word	0x3d75c28f
 800817c:	20020990 	.word	0x20020990
 8008180:	2002db40 	.word	0x2002db40
 8008184:	200209d0 	.word	0x200209d0

08008188 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800818c:	480e      	ldr	r0, [pc, #56]	; (80081c8 <cppFlip1ms+0x40>)
 800818e:	f7fa f99b 	bl	80024c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8008192:	480e      	ldr	r0, [pc, #56]	; (80081cc <cppFlip1ms+0x44>)
 8008194:	f7f9 fdc4 	bl	8001d20 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8008198:	480d      	ldr	r0, [pc, #52]	; (80081d0 <cppFlip1ms+0x48>)
 800819a:	f7f9 f96d 	bl	8001478 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800819e:	480d      	ldr	r0, [pc, #52]	; (80081d4 <cppFlip1ms+0x4c>)
 80081a0:	f7fc f982 	bl	80044a8 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80081a4:	480c      	ldr	r0, [pc, #48]	; (80081d8 <cppFlip1ms+0x50>)
 80081a6:	f7fe f985 	bl	80064b4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80081aa:	480c      	ldr	r0, [pc, #48]	; (80081dc <cppFlip1ms+0x54>)
 80081ac:	f7fd fb3c 	bl	8005828 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80081b0:	480b      	ldr	r0, [pc, #44]	; (80081e0 <cppFlip1ms+0x58>)
 80081b2:	f7fd fd67 	bl	8005c84 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80081b6:	480b      	ldr	r0, [pc, #44]	; (80081e4 <cppFlip1ms+0x5c>)
 80081b8:	f7fd fa02 	bl	80055c0 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80081bc:	4804      	ldr	r0, [pc, #16]	; (80081d0 <cppFlip1ms+0x48>)
 80081be:	f7f9 f9f3 	bl	80015a8 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80081c2:	bf00      	nop
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20000244 	.word	0x20000244
 80081cc:	20000568 	.word	0x20000568
 80081d0:	20020928 	.word	0x20020928
 80081d4:	200209d4 	.word	0x200209d4
 80081d8:	20020950 	.word	0x20020950
 80081dc:	20020990 	.word	0x20020990
 80081e0:	2000053c 	.word	0x2000053c
 80081e4:	20000554 	.word	0x20000554

080081e8 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80081ec:	4802      	ldr	r0, [pc, #8]	; (80081f8 <cppFlip100ns+0x10>)
 80081ee:	f7fa f91d 	bl	800242c <_ZN10LineSensor17storeSensorValuesEv>
}
 80081f2:	bf00      	nop
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000244 	.word	0x20000244

080081fc <cppFlip10ms>:

void cppFlip10ms(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 8008200:	480a      	ldr	r0, [pc, #40]	; (800822c <cppFlip10ms+0x30>)
 8008202:	f7fb ffc8 	bl	8004196 <_ZN9LineTrace17getTargetVelocityEv>
 8008206:	eef0 7a40 	vmov.f32	s15, s0
 800820a:	eeb0 0a67 	vmov.f32	s0, s15
 800820e:	4808      	ldr	r0, [pc, #32]	; (8008230 <cppFlip10ms+0x34>)
 8008210:	f7fc ff38 	bl	8005084 <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 8008214:	4807      	ldr	r0, [pc, #28]	; (8008234 <cppFlip10ms+0x38>)
 8008216:	f7fe f98f 	bl	8006538 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 800821a:	eef0 7a40 	vmov.f32	s15, s0
 800821e:	eeb0 0a67 	vmov.f32	s0, s15
 8008222:	4803      	ldr	r0, [pc, #12]	; (8008230 <cppFlip10ms+0x34>)
 8008224:	f7fc ff7c 	bl	8005120 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8008228:	bf00      	nop
 800822a:	bd80      	pop	{r7, pc}
 800822c:	200209d4 	.word	0x200209d4
 8008230:	2000057c 	.word	0x2000057c
 8008234:	20020950 	.word	0x20020950

08008238 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	80fb      	strh	r3, [r7, #6]
	if(gpio_pin == GPIO_PIN_2){ //Right
 8008242:	88fb      	ldrh	r3, [r7, #6]
 8008244:	2b04      	cmp	r3, #4
 8008246:	d103      	bne.n	8008250 <cppExit+0x18>
		side_sensor.updateStatusRightExti();
 8008248:	4807      	ldr	r0, [pc, #28]	; (8008268 <cppExit+0x30>)
 800824a:	f7fd fcd3 	bl	8005bf4 <_ZN10SideSensor21updateStatusRightExtiEv>
	}
	else if(gpio_pin == GPIO_PIN_8){ //Left
		side_sensor.updateStatusLeftExti();
	}
}
 800824e:	e006      	b.n	800825e <cppExit+0x26>
	else if(gpio_pin == GPIO_PIN_8){ //Left
 8008250:	88fb      	ldrh	r3, [r7, #6]
 8008252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008256:	d102      	bne.n	800825e <cppExit+0x26>
		side_sensor.updateStatusLeftExti();
 8008258:	4803      	ldr	r0, [pc, #12]	; (8008268 <cppExit+0x30>)
 800825a:	f7fd fcef 	bl	8005c3c <_ZN10SideSensor20updateStatusLeftExtiEv>
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	2000053c 	.word	0x2000053c
 800826c:	00000000 	.word	0x00000000

08008270 <cppLoop>:

void cppLoop(void)
{
 8008270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008272:	b085      	sub	sp, #20
 8008274:	af02      	add	r7, sp, #8
	static int16_t selector_gain;
	static int16_t selector_run;
	static int16_t selector_acc;
	static int16_t selector_vel;

	static float adj_kp = line_trace.getKp();
 8008276:	4baf      	ldr	r3, [pc, #700]	; (8008534 <cppLoop+0x2c4>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	f3bf 8f5b 	dmb	ish
 800827e:	b2db      	uxtb	r3, r3
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	bf0c      	ite	eq
 8008288:	2301      	moveq	r3, #1
 800828a:	2300      	movne	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d015      	beq.n	80082be <cppLoop+0x4e>
 8008292:	48a8      	ldr	r0, [pc, #672]	; (8008534 <cppLoop+0x2c4>)
 8008294:	f00d fe4d 	bl	8015f32 <__cxa_guard_acquire>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	bf14      	ite	ne
 800829e:	2301      	movne	r3, #1
 80082a0:	2300      	moveq	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00a      	beq.n	80082be <cppLoop+0x4e>
 80082a8:	48a3      	ldr	r0, [pc, #652]	; (8008538 <cppLoop+0x2c8>)
 80082aa:	f7fb fe62 	bl	8003f72 <_ZN9LineTrace5getKpEv>
 80082ae:	eef0 7a40 	vmov.f32	s15, s0
 80082b2:	4ba2      	ldr	r3, [pc, #648]	; (800853c <cppLoop+0x2cc>)
 80082b4:	edc3 7a00 	vstr	s15, [r3]
 80082b8:	489e      	ldr	r0, [pc, #632]	; (8008534 <cppLoop+0x2c4>)
 80082ba:	f00d fe46 	bl	8015f4a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 80082be:	4ba0      	ldr	r3, [pc, #640]	; (8008540 <cppLoop+0x2d0>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	f3bf 8f5b 	dmb	ish
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bf0c      	ite	eq
 80082d0:	2301      	moveq	r3, #1
 80082d2:	2300      	movne	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d015      	beq.n	8008306 <cppLoop+0x96>
 80082da:	4899      	ldr	r0, [pc, #612]	; (8008540 <cppLoop+0x2d0>)
 80082dc:	f00d fe29 	bl	8015f32 <__cxa_guard_acquire>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bf14      	ite	ne
 80082e6:	2301      	movne	r3, #1
 80082e8:	2300      	moveq	r3, #0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <cppLoop+0x96>
 80082f0:	4891      	ldr	r0, [pc, #580]	; (8008538 <cppLoop+0x2c8>)
 80082f2:	f7fb fe4d 	bl	8003f90 <_ZN9LineTrace5getKiEv>
 80082f6:	eef0 7a40 	vmov.f32	s15, s0
 80082fa:	4b92      	ldr	r3, [pc, #584]	; (8008544 <cppLoop+0x2d4>)
 80082fc:	edc3 7a00 	vstr	s15, [r3]
 8008300:	488f      	ldr	r0, [pc, #572]	; (8008540 <cppLoop+0x2d0>)
 8008302:	f00d fe22 	bl	8015f4a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8008306:	4b90      	ldr	r3, [pc, #576]	; (8008548 <cppLoop+0x2d8>)
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	f3bf 8f5b 	dmb	ish
 800830e:	b2db      	uxtb	r3, r3
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	bf0c      	ite	eq
 8008318:	2301      	moveq	r3, #1
 800831a:	2300      	movne	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d015      	beq.n	800834e <cppLoop+0xde>
 8008322:	4889      	ldr	r0, [pc, #548]	; (8008548 <cppLoop+0x2d8>)
 8008324:	f00d fe05 	bl	8015f32 <__cxa_guard_acquire>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	bf14      	ite	ne
 800832e:	2301      	movne	r3, #1
 8008330:	2300      	moveq	r3, #0
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00a      	beq.n	800834e <cppLoop+0xde>
 8008338:	487f      	ldr	r0, [pc, #508]	; (8008538 <cppLoop+0x2c8>)
 800833a:	f7fb fe38 	bl	8003fae <_ZN9LineTrace5getKdEv>
 800833e:	eef0 7a40 	vmov.f32	s15, s0
 8008342:	4b82      	ldr	r3, [pc, #520]	; (800854c <cppLoop+0x2dc>)
 8008344:	edc3 7a00 	vstr	s15, [r3]
 8008348:	487f      	ldr	r0, [pc, #508]	; (8008548 <cppLoop+0x2d8>)
 800834a:	f00d fdfe 	bl	8015f4a <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 800834e:	4b80      	ldr	r3, [pc, #512]	; (8008550 <cppLoop+0x2e0>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	f3bf 8f5b 	dmb	ish
 8008356:	b2db      	uxtb	r3, r3
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	bf0c      	ite	eq
 8008360:	2301      	moveq	r3, #1
 8008362:	2300      	movne	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d015      	beq.n	8008396 <cppLoop+0x126>
 800836a:	4879      	ldr	r0, [pc, #484]	; (8008550 <cppLoop+0x2e0>)
 800836c:	f00d fde1 	bl	8015f32 <__cxa_guard_acquire>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	bf14      	ite	ne
 8008376:	2301      	movne	r3, #1
 8008378:	2300      	moveq	r3, #0
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <cppLoop+0x126>
 8008380:	486d      	ldr	r0, [pc, #436]	; (8008538 <cppLoop+0x2c8>)
 8008382:	f7fb fe3c 	bl	8003ffe <_ZN9LineTrace9getKpSlowEv>
 8008386:	eef0 7a40 	vmov.f32	s15, s0
 800838a:	4b72      	ldr	r3, [pc, #456]	; (8008554 <cppLoop+0x2e4>)
 800838c:	edc3 7a00 	vstr	s15, [r3]
 8008390:	486f      	ldr	r0, [pc, #444]	; (8008550 <cppLoop+0x2e0>)
 8008392:	f00d fdda 	bl	8015f4a <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8008396:	4b70      	ldr	r3, [pc, #448]	; (8008558 <cppLoop+0x2e8>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	f3bf 8f5b 	dmb	ish
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	bf0c      	ite	eq
 80083a8:	2301      	moveq	r3, #1
 80083aa:	2300      	movne	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d015      	beq.n	80083de <cppLoop+0x16e>
 80083b2:	4869      	ldr	r0, [pc, #420]	; (8008558 <cppLoop+0x2e8>)
 80083b4:	f00d fdbd 	bl	8015f32 <__cxa_guard_acquire>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	bf14      	ite	ne
 80083be:	2301      	movne	r3, #1
 80083c0:	2300      	moveq	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <cppLoop+0x16e>
 80083c8:	485b      	ldr	r0, [pc, #364]	; (8008538 <cppLoop+0x2c8>)
 80083ca:	f7fb fe27 	bl	800401c <_ZN9LineTrace9getKiSlowEv>
 80083ce:	eef0 7a40 	vmov.f32	s15, s0
 80083d2:	4b62      	ldr	r3, [pc, #392]	; (800855c <cppLoop+0x2ec>)
 80083d4:	edc3 7a00 	vstr	s15, [r3]
 80083d8:	485f      	ldr	r0, [pc, #380]	; (8008558 <cppLoop+0x2e8>)
 80083da:	f00d fdb6 	bl	8015f4a <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 80083de:	4b60      	ldr	r3, [pc, #384]	; (8008560 <cppLoop+0x2f0>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	f3bf 8f5b 	dmb	ish
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	bf0c      	ite	eq
 80083f0:	2301      	moveq	r3, #1
 80083f2:	2300      	movne	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d015      	beq.n	8008426 <cppLoop+0x1b6>
 80083fa:	4859      	ldr	r0, [pc, #356]	; (8008560 <cppLoop+0x2f0>)
 80083fc:	f00d fd99 	bl	8015f32 <__cxa_guard_acquire>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf14      	ite	ne
 8008406:	2301      	movne	r3, #1
 8008408:	2300      	moveq	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00a      	beq.n	8008426 <cppLoop+0x1b6>
 8008410:	4849      	ldr	r0, [pc, #292]	; (8008538 <cppLoop+0x2c8>)
 8008412:	f7fb fe12 	bl	800403a <_ZN9LineTrace9getKdSlowEv>
 8008416:	eef0 7a40 	vmov.f32	s15, s0
 800841a:	4b52      	ldr	r3, [pc, #328]	; (8008564 <cppLoop+0x2f4>)
 800841c:	edc3 7a00 	vstr	s15, [r3]
 8008420:	484f      	ldr	r0, [pc, #316]	; (8008560 <cppLoop+0x2f0>)
 8008422:	f00d fd92 	bl	8015f4a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8008426:	4b50      	ldr	r3, [pc, #320]	; (8008568 <cppLoop+0x2f8>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	f3bf 8f5b 	dmb	ish
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	bf0c      	ite	eq
 8008438:	2301      	moveq	r3, #1
 800843a:	2300      	movne	r3, #0
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d015      	beq.n	800846e <cppLoop+0x1fe>
 8008442:	4849      	ldr	r0, [pc, #292]	; (8008568 <cppLoop+0x2f8>)
 8008444:	f00d fd75 	bl	8015f32 <__cxa_guard_acquire>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	bf14      	ite	ne
 800844e:	2301      	movne	r3, #1
 8008450:	2300      	moveq	r3, #0
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00a      	beq.n	800846e <cppLoop+0x1fe>
 8008458:	4837      	ldr	r0, [pc, #220]	; (8008538 <cppLoop+0x2c8>)
 800845a:	f7fb fe9c 	bl	8004196 <_ZN9LineTrace17getTargetVelocityEv>
 800845e:	eef0 7a40 	vmov.f32	s15, s0
 8008462:	4b42      	ldr	r3, [pc, #264]	; (800856c <cppLoop+0x2fc>)
 8008464:	edc3 7a00 	vstr	s15, [r3]
 8008468:	483f      	ldr	r0, [pc, #252]	; (8008568 <cppLoop+0x2f8>)
 800846a:	f00d fd6e 	bl	8015f4a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 800846e:	4b40      	ldr	r3, [pc, #256]	; (8008570 <cppLoop+0x300>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	f3bf 8f5b 	dmb	ish
 8008476:	b2db      	uxtb	r3, r3
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	bf0c      	ite	eq
 8008480:	2301      	moveq	r3, #1
 8008482:	2300      	movne	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d015      	beq.n	80084b6 <cppLoop+0x246>
 800848a:	4839      	ldr	r0, [pc, #228]	; (8008570 <cppLoop+0x300>)
 800848c:	f00d fd51 	bl	8015f32 <__cxa_guard_acquire>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	bf14      	ite	ne
 8008496:	2301      	movne	r3, #1
 8008498:	2300      	moveq	r3, #0
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <cppLoop+0x246>
 80084a0:	4825      	ldr	r0, [pc, #148]	; (8008538 <cppLoop+0x2c8>)
 80084a2:	f7fb fe88 	bl	80041b6 <_ZN9LineTrace14getMaxVelocityEv>
 80084a6:	eef0 7a40 	vmov.f32	s15, s0
 80084aa:	4b32      	ldr	r3, [pc, #200]	; (8008574 <cppLoop+0x304>)
 80084ac:	edc3 7a00 	vstr	s15, [r3]
 80084b0:	482f      	ldr	r0, [pc, #188]	; (8008570 <cppLoop+0x300>)
 80084b2:	f00d fd4a 	bl	8015f4a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 80084b6:	4b30      	ldr	r3, [pc, #192]	; (8008578 <cppLoop+0x308>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	f3bf 8f5b 	dmb	ish
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bf0c      	ite	eq
 80084c8:	2301      	moveq	r3, #1
 80084ca:	2300      	movne	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d015      	beq.n	80084fe <cppLoop+0x28e>
 80084d2:	4829      	ldr	r0, [pc, #164]	; (8008578 <cppLoop+0x308>)
 80084d4:	f00d fd2d 	bl	8015f32 <__cxa_guard_acquire>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	bf14      	ite	ne
 80084de:	2301      	movne	r3, #1
 80084e0:	2300      	moveq	r3, #0
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00a      	beq.n	80084fe <cppLoop+0x28e>
 80084e8:	4813      	ldr	r0, [pc, #76]	; (8008538 <cppLoop+0x2c8>)
 80084ea:	f7fb fe74 	bl	80041d6 <_ZN9LineTrace14getMinVelocityEv>
 80084ee:	eef0 7a40 	vmov.f32	s15, s0
 80084f2:	4b22      	ldr	r3, [pc, #136]	; (800857c <cppLoop+0x30c>)
 80084f4:	edc3 7a00 	vstr	s15, [r3]
 80084f8:	481f      	ldr	r0, [pc, #124]	; (8008578 <cppLoop+0x308>)
 80084fa:	f00d fd26 	bl	8015f4a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 80084fe:	4b20      	ldr	r3, [pc, #128]	; (8008580 <cppLoop+0x310>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f3bf 8f5b 	dmb	ish
 8008506:	b2db      	uxtb	r3, r3
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b00      	cmp	r3, #0
 800850e:	bf0c      	ite	eq
 8008510:	2301      	moveq	r3, #1
 8008512:	2300      	movne	r3, #0
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d03f      	beq.n	800859a <cppLoop+0x32a>
 800851a:	4819      	ldr	r0, [pc, #100]	; (8008580 <cppLoop+0x310>)
 800851c:	f00d fd09 	bl	8015f32 <__cxa_guard_acquire>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	bf14      	ite	ne
 8008526:	2301      	movne	r3, #1
 8008528:	2300      	moveq	r3, #0
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d034      	beq.n	800859a <cppLoop+0x32a>
 8008530:	e028      	b.n	8008584 <cppLoop+0x314>
 8008532:	bf00      	nop
 8008534:	20045274 	.word	0x20045274
 8008538:	200209d4 	.word	0x200209d4
 800853c:	20045270 	.word	0x20045270
 8008540:	2004527c 	.word	0x2004527c
 8008544:	20045278 	.word	0x20045278
 8008548:	20045284 	.word	0x20045284
 800854c:	20045280 	.word	0x20045280
 8008550:	2004528c 	.word	0x2004528c
 8008554:	20045288 	.word	0x20045288
 8008558:	20045294 	.word	0x20045294
 800855c:	20045290 	.word	0x20045290
 8008560:	2004529c 	.word	0x2004529c
 8008564:	20045298 	.word	0x20045298
 8008568:	200452a4 	.word	0x200452a4
 800856c:	200452a0 	.word	0x200452a0
 8008570:	200452ac 	.word	0x200452ac
 8008574:	200452a8 	.word	0x200452a8
 8008578:	200452b4 	.word	0x200452b4
 800857c:	200452b0 	.word	0x200452b0
 8008580:	200452bc 	.word	0x200452bc
 8008584:	48ae      	ldr	r0, [pc, #696]	; (8008840 <cppLoop+0x5d0>)
 8008586:	f7fb fe36 	bl	80041f6 <_ZN9LineTrace15getMaxVelocity2Ev>
 800858a:	eef0 7a40 	vmov.f32	s15, s0
 800858e:	4bad      	ldr	r3, [pc, #692]	; (8008844 <cppLoop+0x5d4>)
 8008590:	edc3 7a00 	vstr	s15, [r3]
 8008594:	48ac      	ldr	r0, [pc, #688]	; (8008848 <cppLoop+0x5d8>)
 8008596:	f00d fcd8 	bl	8015f4a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 800859a:	4bac      	ldr	r3, [pc, #688]	; (800884c <cppLoop+0x5dc>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	f3bf 8f5b 	dmb	ish
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d015      	beq.n	80085e2 <cppLoop+0x372>
 80085b6:	48a5      	ldr	r0, [pc, #660]	; (800884c <cppLoop+0x5dc>)
 80085b8:	f00d fcbb 	bl	8015f32 <__cxa_guard_acquire>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bf14      	ite	ne
 80085c2:	2301      	movne	r3, #1
 80085c4:	2300      	moveq	r3, #0
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <cppLoop+0x372>
 80085cc:	489c      	ldr	r0, [pc, #624]	; (8008840 <cppLoop+0x5d0>)
 80085ce:	f7fb fe22 	bl	8004216 <_ZN9LineTrace15getMinVelocity2Ev>
 80085d2:	eef0 7a40 	vmov.f32	s15, s0
 80085d6:	4b9e      	ldr	r3, [pc, #632]	; (8008850 <cppLoop+0x5e0>)
 80085d8:	edc3 7a00 	vstr	s15, [r3]
 80085dc:	489b      	ldr	r0, [pc, #620]	; (800884c <cppLoop+0x5dc>)
 80085de:	f00d fcb4 	bl	8015f4a <__cxa_guard_release>
	static float adj_max_velocity3 = line_trace.getMaxVelocity3();
 80085e2:	4b9c      	ldr	r3, [pc, #624]	; (8008854 <cppLoop+0x5e4>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	f3bf 8f5b 	dmb	ish
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bf0c      	ite	eq
 80085f4:	2301      	moveq	r3, #1
 80085f6:	2300      	movne	r3, #0
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d015      	beq.n	800862a <cppLoop+0x3ba>
 80085fe:	4895      	ldr	r0, [pc, #596]	; (8008854 <cppLoop+0x5e4>)
 8008600:	f00d fc97 	bl	8015f32 <__cxa_guard_acquire>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	bf14      	ite	ne
 800860a:	2301      	movne	r3, #1
 800860c:	2300      	moveq	r3, #0
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00a      	beq.n	800862a <cppLoop+0x3ba>
 8008614:	488a      	ldr	r0, [pc, #552]	; (8008840 <cppLoop+0x5d0>)
 8008616:	f7fb fe0e 	bl	8004236 <_ZN9LineTrace15getMaxVelocity3Ev>
 800861a:	eef0 7a40 	vmov.f32	s15, s0
 800861e:	4b8e      	ldr	r3, [pc, #568]	; (8008858 <cppLoop+0x5e8>)
 8008620:	edc3 7a00 	vstr	s15, [r3]
 8008624:	488b      	ldr	r0, [pc, #556]	; (8008854 <cppLoop+0x5e4>)
 8008626:	f00d fc90 	bl	8015f4a <__cxa_guard_release>
	static float adj_min_velocity3 = line_trace.getMinVelocity3();
 800862a:	4b8c      	ldr	r3, [pc, #560]	; (800885c <cppLoop+0x5ec>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	f3bf 8f5b 	dmb	ish
 8008632:	b2db      	uxtb	r3, r3
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	2b00      	cmp	r3, #0
 800863a:	bf0c      	ite	eq
 800863c:	2301      	moveq	r3, #1
 800863e:	2300      	movne	r3, #0
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d015      	beq.n	8008672 <cppLoop+0x402>
 8008646:	4885      	ldr	r0, [pc, #532]	; (800885c <cppLoop+0x5ec>)
 8008648:	f00d fc73 	bl	8015f32 <__cxa_guard_acquire>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	bf14      	ite	ne
 8008652:	2301      	movne	r3, #1
 8008654:	2300      	moveq	r3, #0
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <cppLoop+0x402>
 800865c:	4878      	ldr	r0, [pc, #480]	; (8008840 <cppLoop+0x5d0>)
 800865e:	f7fb fdfa 	bl	8004256 <_ZN9LineTrace15getMinVelocity3Ev>
 8008662:	eef0 7a40 	vmov.f32	s15, s0
 8008666:	4b7e      	ldr	r3, [pc, #504]	; (8008860 <cppLoop+0x5f0>)
 8008668:	edc3 7a00 	vstr	s15, [r3]
 800866c:	487b      	ldr	r0, [pc, #492]	; (800885c <cppLoop+0x5ec>)
 800866e:	f00d fc6c 	bl	8015f4a <__cxa_guard_release>
	static float adj_max_velocity4 = line_trace.getMaxVelocity4();
 8008672:	4b7c      	ldr	r3, [pc, #496]	; (8008864 <cppLoop+0x5f4>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	f3bf 8f5b 	dmb	ish
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	bf0c      	ite	eq
 8008684:	2301      	moveq	r3, #1
 8008686:	2300      	movne	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d015      	beq.n	80086ba <cppLoop+0x44a>
 800868e:	4875      	ldr	r0, [pc, #468]	; (8008864 <cppLoop+0x5f4>)
 8008690:	f00d fc4f 	bl	8015f32 <__cxa_guard_acquire>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	bf14      	ite	ne
 800869a:	2301      	movne	r3, #1
 800869c:	2300      	moveq	r3, #0
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00a      	beq.n	80086ba <cppLoop+0x44a>
 80086a4:	4866      	ldr	r0, [pc, #408]	; (8008840 <cppLoop+0x5d0>)
 80086a6:	f7fb fde6 	bl	8004276 <_ZN9LineTrace15getMaxVelocity4Ev>
 80086aa:	eef0 7a40 	vmov.f32	s15, s0
 80086ae:	4b6e      	ldr	r3, [pc, #440]	; (8008868 <cppLoop+0x5f8>)
 80086b0:	edc3 7a00 	vstr	s15, [r3]
 80086b4:	486b      	ldr	r0, [pc, #428]	; (8008864 <cppLoop+0x5f4>)
 80086b6:	f00d fc48 	bl	8015f4a <__cxa_guard_release>
	static float adj_min_velocity4 = line_trace.getMinVelocity4();
 80086ba:	4b6c      	ldr	r3, [pc, #432]	; (800886c <cppLoop+0x5fc>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f3bf 8f5b 	dmb	ish
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bf0c      	ite	eq
 80086cc:	2301      	moveq	r3, #1
 80086ce:	2300      	movne	r3, #0
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d015      	beq.n	8008702 <cppLoop+0x492>
 80086d6:	4865      	ldr	r0, [pc, #404]	; (800886c <cppLoop+0x5fc>)
 80086d8:	f00d fc2b 	bl	8015f32 <__cxa_guard_acquire>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	bf14      	ite	ne
 80086e2:	2301      	movne	r3, #1
 80086e4:	2300      	moveq	r3, #0
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <cppLoop+0x492>
 80086ec:	4854      	ldr	r0, [pc, #336]	; (8008840 <cppLoop+0x5d0>)
 80086ee:	f7fb fdd2 	bl	8004296 <_ZN9LineTrace15getMinVelocity4Ev>
 80086f2:	eef0 7a40 	vmov.f32	s15, s0
 80086f6:	4b5e      	ldr	r3, [pc, #376]	; (8008870 <cppLoop+0x600>)
 80086f8:	edc3 7a00 	vstr	s15, [r3]
 80086fc:	485b      	ldr	r0, [pc, #364]	; (800886c <cppLoop+0x5fc>)
 80086fe:	f00d fc24 	bl	8015f4a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8008702:	4b5c      	ldr	r3, [pc, #368]	; (8008874 <cppLoop+0x604>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	f3bf 8f5b 	dmb	ish
 800870a:	b2db      	uxtb	r3, r3
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	bf0c      	ite	eq
 8008714:	2301      	moveq	r3, #1
 8008716:	2300      	movne	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d015      	beq.n	800874a <cppLoop+0x4da>
 800871e:	4855      	ldr	r0, [pc, #340]	; (8008874 <cppLoop+0x604>)
 8008720:	f00d fc07 	bl	8015f32 <__cxa_guard_acquire>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	bf14      	ite	ne
 800872a:	2301      	movne	r3, #1
 800872c:	2300      	moveq	r3, #0
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00a      	beq.n	800874a <cppLoop+0x4da>
 8008734:	4842      	ldr	r0, [pc, #264]	; (8008840 <cppLoop+0x5d0>)
 8008736:	f7fb fe26 	bl	8004386 <_ZN9LineTrace9getMaxAccEv>
 800873a:	eef0 7a40 	vmov.f32	s15, s0
 800873e:	4b4e      	ldr	r3, [pc, #312]	; (8008878 <cppLoop+0x608>)
 8008740:	edc3 7a00 	vstr	s15, [r3]
 8008744:	484b      	ldr	r0, [pc, #300]	; (8008874 <cppLoop+0x604>)
 8008746:	f00d fc00 	bl	8015f4a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 800874a:	4b4c      	ldr	r3, [pc, #304]	; (800887c <cppLoop+0x60c>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f3bf 8f5b 	dmb	ish
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	bf0c      	ite	eq
 800875c:	2301      	moveq	r3, #1
 800875e:	2300      	movne	r3, #0
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d015      	beq.n	8008792 <cppLoop+0x522>
 8008766:	4845      	ldr	r0, [pc, #276]	; (800887c <cppLoop+0x60c>)
 8008768:	f00d fbe3 	bl	8015f32 <__cxa_guard_acquire>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	bf14      	ite	ne
 8008772:	2301      	movne	r3, #1
 8008774:	2300      	moveq	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00a      	beq.n	8008792 <cppLoop+0x522>
 800877c:	4830      	ldr	r0, [pc, #192]	; (8008840 <cppLoop+0x5d0>)
 800877e:	f7fb fe14 	bl	80043aa <_ZN9LineTrace9getMaxDecEv>
 8008782:	eef0 7a40 	vmov.f32	s15, s0
 8008786:	4b3e      	ldr	r3, [pc, #248]	; (8008880 <cppLoop+0x610>)
 8008788:	edc3 7a00 	vstr	s15, [r3]
 800878c:	483b      	ldr	r0, [pc, #236]	; (800887c <cppLoop+0x60c>)
 800878e:	f00d fbdc 	bl	8015f4a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8008792:	4b3c      	ldr	r3, [pc, #240]	; (8008884 <cppLoop+0x614>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	f3bf 8f5b 	dmb	ish
 800879a:	b2db      	uxtb	r3, r3
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bf0c      	ite	eq
 80087a4:	2301      	moveq	r3, #1
 80087a6:	2300      	movne	r3, #0
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d015      	beq.n	80087da <cppLoop+0x56a>
 80087ae:	4835      	ldr	r0, [pc, #212]	; (8008884 <cppLoop+0x614>)
 80087b0:	f00d fbbf 	bl	8015f32 <__cxa_guard_acquire>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	bf14      	ite	ne
 80087ba:	2301      	movne	r3, #1
 80087bc:	2300      	moveq	r3, #0
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00a      	beq.n	80087da <cppLoop+0x56a>
 80087c4:	481e      	ldr	r0, [pc, #120]	; (8008840 <cppLoop+0x5d0>)
 80087c6:	f7fb fe02 	bl	80043ce <_ZN9LineTrace10getMaxAcc2Ev>
 80087ca:	eef0 7a40 	vmov.f32	s15, s0
 80087ce:	4b2e      	ldr	r3, [pc, #184]	; (8008888 <cppLoop+0x618>)
 80087d0:	edc3 7a00 	vstr	s15, [r3]
 80087d4:	482b      	ldr	r0, [pc, #172]	; (8008884 <cppLoop+0x614>)
 80087d6:	f00d fbb8 	bl	8015f4a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 80087da:	4b2c      	ldr	r3, [pc, #176]	; (800888c <cppLoop+0x61c>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	f3bf 8f5b 	dmb	ish
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	bf0c      	ite	eq
 80087ec:	2301      	moveq	r3, #1
 80087ee:	2300      	movne	r3, #0
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d015      	beq.n	8008822 <cppLoop+0x5b2>
 80087f6:	4825      	ldr	r0, [pc, #148]	; (800888c <cppLoop+0x61c>)
 80087f8:	f00d fb9b 	bl	8015f32 <__cxa_guard_acquire>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bf14      	ite	ne
 8008802:	2301      	movne	r3, #1
 8008804:	2300      	moveq	r3, #0
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <cppLoop+0x5b2>
 800880c:	480c      	ldr	r0, [pc, #48]	; (8008840 <cppLoop+0x5d0>)
 800880e:	f7fb fdf0 	bl	80043f2 <_ZN9LineTrace10getMaxDec2Ev>
 8008812:	eef0 7a40 	vmov.f32	s15, s0
 8008816:	4b1e      	ldr	r3, [pc, #120]	; (8008890 <cppLoop+0x620>)
 8008818:	edc3 7a00 	vstr	s15, [r3]
 800881c:	481b      	ldr	r0, [pc, #108]	; (800888c <cppLoop+0x61c>)
 800881e:	f00d fb94 	bl	8015f4a <__cxa_guard_release>
	static float adj_acc3 = line_trace.getMaxAcc3();
 8008822:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <cppLoop+0x624>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	f3bf 8f5b 	dmb	ish
 800882a:	b2db      	uxtb	r3, r3
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	bf0c      	ite	eq
 8008834:	2301      	moveq	r3, #1
 8008836:	2300      	movne	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d042      	beq.n	80088c4 <cppLoop+0x654>
 800883e:	e02b      	b.n	8008898 <cppLoop+0x628>
 8008840:	200209d4 	.word	0x200209d4
 8008844:	200452b8 	.word	0x200452b8
 8008848:	200452bc 	.word	0x200452bc
 800884c:	200452c4 	.word	0x200452c4
 8008850:	200452c0 	.word	0x200452c0
 8008854:	200452cc 	.word	0x200452cc
 8008858:	200452c8 	.word	0x200452c8
 800885c:	200452d4 	.word	0x200452d4
 8008860:	200452d0 	.word	0x200452d0
 8008864:	200452dc 	.word	0x200452dc
 8008868:	200452d8 	.word	0x200452d8
 800886c:	200452e4 	.word	0x200452e4
 8008870:	200452e0 	.word	0x200452e0
 8008874:	200452ec 	.word	0x200452ec
 8008878:	200452e8 	.word	0x200452e8
 800887c:	200452f4 	.word	0x200452f4
 8008880:	200452f0 	.word	0x200452f0
 8008884:	200452fc 	.word	0x200452fc
 8008888:	200452f8 	.word	0x200452f8
 800888c:	20045304 	.word	0x20045304
 8008890:	20045300 	.word	0x20045300
 8008894:	2004530c 	.word	0x2004530c
 8008898:	48bf      	ldr	r0, [pc, #764]	; (8008b98 <cppLoop+0x928>)
 800889a:	f00d fb4a 	bl	8015f32 <__cxa_guard_acquire>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bf14      	ite	ne
 80088a4:	2301      	movne	r3, #1
 80088a6:	2300      	moveq	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <cppLoop+0x654>
 80088ae:	48bb      	ldr	r0, [pc, #748]	; (8008b9c <cppLoop+0x92c>)
 80088b0:	f7fb fdb1 	bl	8004416 <_ZN9LineTrace10getMaxAcc3Ev>
 80088b4:	eef0 7a40 	vmov.f32	s15, s0
 80088b8:	4bb9      	ldr	r3, [pc, #740]	; (8008ba0 <cppLoop+0x930>)
 80088ba:	edc3 7a00 	vstr	s15, [r3]
 80088be:	48b6      	ldr	r0, [pc, #728]	; (8008b98 <cppLoop+0x928>)
 80088c0:	f00d fb43 	bl	8015f4a <__cxa_guard_release>
	static float adj_dec3 = line_trace.getMaxDec3();
 80088c4:	4bb7      	ldr	r3, [pc, #732]	; (8008ba4 <cppLoop+0x934>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	f3bf 8f5b 	dmb	ish
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf0c      	ite	eq
 80088d6:	2301      	moveq	r3, #1
 80088d8:	2300      	movne	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d015      	beq.n	800890c <cppLoop+0x69c>
 80088e0:	48b0      	ldr	r0, [pc, #704]	; (8008ba4 <cppLoop+0x934>)
 80088e2:	f00d fb26 	bl	8015f32 <__cxa_guard_acquire>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bf14      	ite	ne
 80088ec:	2301      	movne	r3, #1
 80088ee:	2300      	moveq	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <cppLoop+0x69c>
 80088f6:	48a9      	ldr	r0, [pc, #676]	; (8008b9c <cppLoop+0x92c>)
 80088f8:	f7fb fd9f 	bl	800443a <_ZN9LineTrace10getMaxDec3Ev>
 80088fc:	eef0 7a40 	vmov.f32	s15, s0
 8008900:	4ba9      	ldr	r3, [pc, #676]	; (8008ba8 <cppLoop+0x938>)
 8008902:	edc3 7a00 	vstr	s15, [r3]
 8008906:	48a7      	ldr	r0, [pc, #668]	; (8008ba4 <cppLoop+0x934>)
 8008908:	f00d fb1f 	bl	8015f4a <__cxa_guard_release>
	static float adj_acc4 = line_trace.getMaxAcc4();
 800890c:	4ba7      	ldr	r3, [pc, #668]	; (8008bac <cppLoop+0x93c>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f3bf 8f5b 	dmb	ish
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	bf0c      	ite	eq
 800891e:	2301      	moveq	r3, #1
 8008920:	2300      	movne	r3, #0
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d015      	beq.n	8008954 <cppLoop+0x6e4>
 8008928:	48a0      	ldr	r0, [pc, #640]	; (8008bac <cppLoop+0x93c>)
 800892a:	f00d fb02 	bl	8015f32 <__cxa_guard_acquire>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	bf14      	ite	ne
 8008934:	2301      	movne	r3, #1
 8008936:	2300      	moveq	r3, #0
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <cppLoop+0x6e4>
 800893e:	4897      	ldr	r0, [pc, #604]	; (8008b9c <cppLoop+0x92c>)
 8008940:	f7fb fd8d 	bl	800445e <_ZN9LineTrace10getMaxAcc4Ev>
 8008944:	eef0 7a40 	vmov.f32	s15, s0
 8008948:	4b99      	ldr	r3, [pc, #612]	; (8008bb0 <cppLoop+0x940>)
 800894a:	edc3 7a00 	vstr	s15, [r3]
 800894e:	4897      	ldr	r0, [pc, #604]	; (8008bac <cppLoop+0x93c>)
 8008950:	f00d fafb 	bl	8015f4a <__cxa_guard_release>
	static float adj_dec4 = line_trace.getMaxDec4();
 8008954:	4b97      	ldr	r3, [pc, #604]	; (8008bb4 <cppLoop+0x944>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	f3bf 8f5b 	dmb	ish
 800895c:	b2db      	uxtb	r3, r3
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	bf0c      	ite	eq
 8008966:	2301      	moveq	r3, #1
 8008968:	2300      	movne	r3, #0
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d015      	beq.n	800899c <cppLoop+0x72c>
 8008970:	4890      	ldr	r0, [pc, #576]	; (8008bb4 <cppLoop+0x944>)
 8008972:	f00d fade 	bl	8015f32 <__cxa_guard_acquire>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	bf14      	ite	ne
 800897c:	2301      	movne	r3, #1
 800897e:	2300      	moveq	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <cppLoop+0x72c>
 8008986:	4885      	ldr	r0, [pc, #532]	; (8008b9c <cppLoop+0x92c>)
 8008988:	f7fb fd7b 	bl	8004482 <_ZN9LineTrace10getMaxDec4Ev>
 800898c:	eef0 7a40 	vmov.f32	s15, s0
 8008990:	4b89      	ldr	r3, [pc, #548]	; (8008bb8 <cppLoop+0x948>)
 8008992:	edc3 7a00 	vstr	s15, [r3]
 8008996:	4887      	ldr	r0, [pc, #540]	; (8008bb4 <cppLoop+0x944>)
 8008998:	f00d fad7 	bl	8015f4a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 800899c:	4887      	ldr	r0, [pc, #540]	; (8008bbc <cppLoop+0x94c>)
 800899e:	f7fd f8b1 	bl	8005b04 <_ZN12RotarySwitch8getValueEv>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b0f      	cmp	r3, #15
 80089a6:	f202 847b 	bhi.w	800b2a0 <cppLoop+0x3030>
 80089aa:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <cppLoop+0x740>)
 80089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b0:	080089f1 	.word	0x080089f1
 80089b4:	08008d7d 	.word	0x08008d7d
 80089b8:	0800913d 	.word	0x0800913d
 80089bc:	080093f5 	.word	0x080093f5
 80089c0:	080097db 	.word	0x080097db
 80089c4:	08009c25 	.word	0x08009c25
 80089c8:	0800a029 	.word	0x0800a029
 80089cc:	0800a43d 	.word	0x0800a43d
 80089d0:	0800a6c7 	.word	0x0800a6c7
 80089d4:	0800a953 	.word	0x0800a953
 80089d8:	0800abd9 	.word	0x0800abd9
 80089dc:	0800ae65 	.word	0x0800ae65
 80089e0:	0800af05 	.word	0x0800af05
 80089e4:	0800afc1 	.word	0x0800afc1
 80089e8:	0800b087 	.word	0x0800b087
 80089ec:	0800b1c9 	.word	0x0800b1c9
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 1 -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 0:
		led.fullColor('W');
 80089f0:	2157      	movs	r1, #87	; 0x57
 80089f2:	4873      	ldr	r0, [pc, #460]	; (8008bc0 <cppLoop+0x950>)
 80089f4:	f7f9 fbae 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 80089f8:	f7f8 fb52 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089fc:	2100      	movs	r1, #0
 80089fe:	2000      	movs	r0, #0
 8008a00:	f7f8 fb5e 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 8008a04:	4865      	ldr	r0, [pc, #404]	; (8008b9c <cppLoop+0x92c>)
 8008a06:	f7fb fafa 	bl	8003ffe <_ZN9LineTrace9getKpSlowEv>
 8008a0a:	eeb0 7a40 	vmov.f32	s14, s0
 8008a0e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8008bc4 <cppLoop+0x954>
 8008a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a16:	eeb0 0a67 	vmov.f32	s0, s15
 8008a1a:	f7f9 ff5d 	bl	80028d8 <_ZSt3absf>
 8008a1e:	ee10 3a10 	vmov	r3, s0
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f7 fda8 	bl	8000578 <__aeabi_f2d>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4623      	mov	r3, r4
 8008a30:	4865      	ldr	r0, [pc, #404]	; (8008bc8 <cppLoop+0x958>)
 8008a32:	f7f8 fb6f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008a36:	2101      	movs	r1, #1
 8008a38:	2000      	movs	r0, #0
 8008a3a:	f7f8 fb41 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*10000));
 8008a3e:	4857      	ldr	r0, [pc, #348]	; (8008b9c <cppLoop+0x92c>)
 8008a40:	f7fb faec 	bl	800401c <_ZN9LineTrace9getKiSlowEv>
 8008a44:	eeb0 7a40 	vmov.f32	s14, s0
 8008a48:	eddf 7a60 	vldr	s15, [pc, #384]	; 8008bcc <cppLoop+0x95c>
 8008a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a50:	eeb0 0a67 	vmov.f32	s0, s15
 8008a54:	f7f9 ff40 	bl	80028d8 <_ZSt3absf>
 8008a58:	ee10 3a10 	vmov	r3, s0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7f7 fd8b 	bl	8000578 <__aeabi_f2d>
 8008a62:	4605      	mov	r5, r0
 8008a64:	460e      	mov	r6, r1
 8008a66:	484d      	ldr	r0, [pc, #308]	; (8008b9c <cppLoop+0x92c>)
 8008a68:	f7fb fae7 	bl	800403a <_ZN9LineTrace9getKdSlowEv>
 8008a6c:	eeb0 7a40 	vmov.f32	s14, s0
 8008a70:	eddf 7a54 	vldr	s15, [pc, #336]	; 8008bc4 <cppLoop+0x954>
 8008a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a78:	eeb0 0a67 	vmov.f32	s0, s15
 8008a7c:	f7f9 ff2c 	bl	80028d8 <_ZSt3absf>
 8008a80:	ee10 3a10 	vmov	r3, s0
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7f7 fd77 	bl	8000578 <__aeabi_f2d>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	e9cd 3400 	strd	r3, r4, [sp]
 8008a92:	462a      	mov	r2, r5
 8008a94:	4633      	mov	r3, r6
 8008a96:	484e      	ldr	r0, [pc, #312]	; (8008bd0 <cppLoop+0x960>)
 8008a98:	f7f8 fb3c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8008a9c:	484d      	ldr	r0, [pc, #308]	; (8008bd4 <cppLoop+0x964>)
 8008a9e:	f7f9 faf5 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	bf0c      	ite	eq
 8008aa8:	2301      	moveq	r3, #1
 8008aaa:	2300      	movne	r3, #0
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d022      	beq.n	8008af8 <cppLoop+0x888>
			led.LR(-1, 1);
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ab8:	4841      	ldr	r0, [pc, #260]	; (8008bc0 <cppLoop+0x950>)
 8008aba:	f7f9 fc07 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008abe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ac2:	f002 fd39 	bl	800b538 <HAL_Delay>

			selector_gain++;
 8008ac6:	4b44      	ldr	r3, [pc, #272]	; (8008bd8 <cppLoop+0x968>)
 8008ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	3301      	adds	r3, #1
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	b21a      	sxth	r2, r3
 8008ad4:	4b40      	ldr	r3, [pc, #256]	; (8008bd8 <cppLoop+0x968>)
 8008ad6:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8008ad8:	4b3f      	ldr	r3, [pc, #252]	; (8008bd8 <cppLoop+0x968>)
 8008ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	dd02      	ble.n	8008ae8 <cppLoop+0x878>
 8008ae2:	4b3d      	ldr	r3, [pc, #244]	; (8008bd8 <cppLoop+0x968>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f04f 31ff 	mov.w	r1, #4294967295
 8008aee:	4834      	ldr	r0, [pc, #208]	; (8008bc0 <cppLoop+0x950>)
 8008af0:	f7f9 fbec 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008af4:	f002 bbd6 	b.w	800b2a4 <cppLoop+0x3034>
		else if(joy_stick.getValue() == JOY_R){
 8008af8:	4836      	ldr	r0, [pc, #216]	; (8008bd4 <cppLoop+0x964>)
 8008afa:	f7f9 fac7 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b10      	cmp	r3, #16
 8008b02:	bf0c      	ite	eq
 8008b04:	2301      	moveq	r3, #1
 8008b06:	2300      	movne	r3, #0
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 8089 	beq.w	8008c22 <cppLoop+0x9b2>
			led.LR(-1, 1);
 8008b10:	2201      	movs	r2, #1
 8008b12:	f04f 31ff 	mov.w	r1, #4294967295
 8008b16:	482a      	ldr	r0, [pc, #168]	; (8008bc0 <cppLoop+0x950>)
 8008b18:	f7f9 fbd8 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b1c:	2064      	movs	r0, #100	; 0x64
 8008b1e:	f002 fd0b 	bl	800b538 <HAL_Delay>
			if(selector_gain == 0){
 8008b22:	4b2d      	ldr	r3, [pc, #180]	; (8008bd8 <cppLoop+0x968>)
 8008b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d113      	bne.n	8008b54 <cppLoop+0x8e4>
				adj_kp_slow = adj_kp_slow + 0.000001;
 8008b2c:	4b2b      	ldr	r3, [pc, #172]	; (8008bdc <cppLoop+0x96c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f7 fd21 	bl	8000578 <__aeabi_f2d>
 8008b36:	a314      	add	r3, pc, #80	; (adr r3, 8008b88 <cppLoop+0x918>)
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f7f7 fbbe 	bl	80002bc <__adddf3>
 8008b40:	4603      	mov	r3, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	4618      	mov	r0, r3
 8008b46:	4621      	mov	r1, r4
 8008b48:	f7f8 f866 	bl	8000c18 <__aeabi_d2f>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	4b23      	ldr	r3, [pc, #140]	; (8008bdc <cppLoop+0x96c>)
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e05a      	b.n	8008c0a <cppLoop+0x99a>
			else if(selector_gain == 1){
 8008b54:	4b20      	ldr	r3, [pc, #128]	; (8008bd8 <cppLoop+0x968>)
 8008b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d142      	bne.n	8008be4 <cppLoop+0x974>
				adj_ki_slow = adj_ki_slow + 0.00001;
 8008b5e:	4b20      	ldr	r3, [pc, #128]	; (8008be0 <cppLoop+0x970>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f7 fd08 	bl	8000578 <__aeabi_f2d>
 8008b68:	a309      	add	r3, pc, #36	; (adr r3, 8008b90 <cppLoop+0x920>)
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	f7f7 fba5 	bl	80002bc <__adddf3>
 8008b72:	4603      	mov	r3, r0
 8008b74:	460c      	mov	r4, r1
 8008b76:	4618      	mov	r0, r3
 8008b78:	4621      	mov	r1, r4
 8008b7a:	f7f8 f84d 	bl	8000c18 <__aeabi_d2f>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <cppLoop+0x970>)
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	e041      	b.n	8008c0a <cppLoop+0x99a>
 8008b86:	bf00      	nop
 8008b88:	a0b5ed8d 	.word	0xa0b5ed8d
 8008b8c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008b90:	88e368f1 	.word	0x88e368f1
 8008b94:	3ee4f8b5 	.word	0x3ee4f8b5
 8008b98:	2004530c 	.word	0x2004530c
 8008b9c:	200209d4 	.word	0x200209d4
 8008ba0:	20045308 	.word	0x20045308
 8008ba4:	20045314 	.word	0x20045314
 8008ba8:	20045310 	.word	0x20045310
 8008bac:	2004531c 	.word	0x2004531c
 8008bb0:	20045318 	.word	0x20045318
 8008bb4:	20045324 	.word	0x20045324
 8008bb8:	20045320 	.word	0x20045320
 8008bbc:	20000550 	.word	0x20000550
 8008bc0:	20000558 	.word	0x20000558
 8008bc4:	461c4000 	.word	0x461c4000
 8008bc8:	0801a608 	.word	0x0801a608
 8008bcc:	447a0000 	.word	0x447a0000
 8008bd0:	0801a614 	.word	0x0801a614
 8008bd4:	2000054c 	.word	0x2000054c
 8008bd8:	20045268 	.word	0x20045268
 8008bdc:	20045288 	.word	0x20045288
 8008be0:	20045290 	.word	0x20045290
				adj_kd_slow = adj_kd_slow + 0.000001;
 8008be4:	4bc2      	ldr	r3, [pc, #776]	; (8008ef0 <cppLoop+0xc80>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7f7 fcc5 	bl	8000578 <__aeabi_f2d>
 8008bee:	a3bc      	add	r3, pc, #752	; (adr r3, 8008ee0 <cppLoop+0xc70>)
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	f7f7 fb62 	bl	80002bc <__adddf3>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	4621      	mov	r1, r4
 8008c00:	f7f8 f80a 	bl	8000c18 <__aeabi_d2f>
 8008c04:	4602      	mov	r2, r0
 8008c06:	4bba      	ldr	r3, [pc, #744]	; (8008ef0 <cppLoop+0xc80>)
 8008c08:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008c0a:	2152      	movs	r1, #82	; 0x52
 8008c0c:	48b9      	ldr	r0, [pc, #740]	; (8008ef4 <cppLoop+0xc84>)
 8008c0e:	f7f9 faa1 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008c12:	2200      	movs	r2, #0
 8008c14:	f04f 31ff 	mov.w	r1, #4294967295
 8008c18:	48b6      	ldr	r0, [pc, #728]	; (8008ef4 <cppLoop+0xc84>)
 8008c1a:	f7f9 fb57 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008c1e:	f002 bb41 	b.w	800b2a4 <cppLoop+0x3034>
		else if(joy_stick.getValue() == JOY_L){
 8008c22:	48b5      	ldr	r0, [pc, #724]	; (8008ef8 <cppLoop+0xc88>)
 8008c24:	f7f9 fa32 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	bf0c      	ite	eq
 8008c2e:	2301      	moveq	r3, #1
 8008c30:	2300      	movne	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d059      	beq.n	8008cec <cppLoop+0xa7c>
			led.LR(-1, 1);
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c3e:	48ad      	ldr	r0, [pc, #692]	; (8008ef4 <cppLoop+0xc84>)
 8008c40:	f7f9 fb44 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c44:	2064      	movs	r0, #100	; 0x64
 8008c46:	f002 fc77 	bl	800b538 <HAL_Delay>
			if(selector_gain == 0){
 8008c4a:	4bac      	ldr	r3, [pc, #688]	; (8008efc <cppLoop+0xc8c>)
 8008c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d113      	bne.n	8008c7c <cppLoop+0xa0c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 8008c54:	4baa      	ldr	r3, [pc, #680]	; (8008f00 <cppLoop+0xc90>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7f7 fc8d 	bl	8000578 <__aeabi_f2d>
 8008c5e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008ee0 <cppLoop+0xc70>)
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f7f7 fb28 	bl	80002b8 <__aeabi_dsub>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	4621      	mov	r1, r4
 8008c70:	f7f7 ffd2 	bl	8000c18 <__aeabi_d2f>
 8008c74:	4602      	mov	r2, r0
 8008c76:	4ba2      	ldr	r3, [pc, #648]	; (8008f00 <cppLoop+0xc90>)
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	e02b      	b.n	8008cd4 <cppLoop+0xa64>
			else if(selector_gain == 1){
 8008c7c:	4b9f      	ldr	r3, [pc, #636]	; (8008efc <cppLoop+0xc8c>)
 8008c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d113      	bne.n	8008cae <cppLoop+0xa3e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 8008c86:	4b9f      	ldr	r3, [pc, #636]	; (8008f04 <cppLoop+0xc94>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7f7 fc74 	bl	8000578 <__aeabi_f2d>
 8008c90:	a395      	add	r3, pc, #596	; (adr r3, 8008ee8 <cppLoop+0xc78>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 fb0f 	bl	80002b8 <__aeabi_dsub>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	460c      	mov	r4, r1
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	f7f7 ffb9 	bl	8000c18 <__aeabi_d2f>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	4b96      	ldr	r3, [pc, #600]	; (8008f04 <cppLoop+0xc94>)
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	e012      	b.n	8008cd4 <cppLoop+0xa64>
				adj_kd_slow = adj_kd_slow - 0.000001;
 8008cae:	4b90      	ldr	r3, [pc, #576]	; (8008ef0 <cppLoop+0xc80>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7f7 fc60 	bl	8000578 <__aeabi_f2d>
 8008cb8:	a389      	add	r3, pc, #548	; (adr r3, 8008ee0 <cppLoop+0xc70>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fafb 	bl	80002b8 <__aeabi_dsub>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	4621      	mov	r1, r4
 8008cca:	f7f7 ffa5 	bl	8000c18 <__aeabi_d2f>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	4b87      	ldr	r3, [pc, #540]	; (8008ef0 <cppLoop+0xc80>)
 8008cd2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008cd4:	2152      	movs	r1, #82	; 0x52
 8008cd6:	4887      	ldr	r0, [pc, #540]	; (8008ef4 <cppLoop+0xc84>)
 8008cd8:	f7f9 fa3c 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f04f 31ff 	mov.w	r1, #4294967295
 8008ce2:	4884      	ldr	r0, [pc, #528]	; (8008ef4 <cppLoop+0xc84>)
 8008ce4:	f7f9 faf2 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008ce8:	f002 badc 	b.w	800b2a4 <cppLoop+0x3034>
		else if(joy_stick.getValue() == JOY_C){
 8008cec:	4882      	ldr	r0, [pc, #520]	; (8008ef8 <cppLoop+0xc88>)
 8008cee:	f7f9 f9cd 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	bf0c      	ite	eq
 8008cf8:	2301      	moveq	r3, #1
 8008cfa:	2300      	movne	r3, #0
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f002 82d0 	beq.w	800b2a4 <cppLoop+0x3034>
			led.LR(-1, 1);
 8008d04:	2201      	movs	r2, #1
 8008d06:	f04f 31ff 	mov.w	r1, #4294967295
 8008d0a:	487a      	ldr	r0, [pc, #488]	; (8008ef4 <cppLoop+0xc84>)
 8008d0c:	f7f9 fade 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d14:	f002 fc10 	bl	800b538 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	4b78      	ldr	r3, [pc, #480]	; (8008f00 <cppLoop+0xc90>)
 8008d1e:	2201      	movs	r2, #1
 8008d20:	4979      	ldr	r1, [pc, #484]	; (8008f08 <cppLoop+0xc98>)
 8008d22:	487a      	ldr	r0, [pc, #488]	; (8008f0c <cppLoop+0xc9c>)
 8008d24:	f7f8 fd9a 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	4b75      	ldr	r3, [pc, #468]	; (8008f04 <cppLoop+0xc94>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	4977      	ldr	r1, [pc, #476]	; (8008f10 <cppLoop+0xca0>)
 8008d32:	4876      	ldr	r0, [pc, #472]	; (8008f0c <cppLoop+0xc9c>)
 8008d34:	f7f8 fd92 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	4b6c      	ldr	r3, [pc, #432]	; (8008ef0 <cppLoop+0xc80>)
 8008d3e:	2201      	movs	r2, #1
 8008d40:	4974      	ldr	r1, [pc, #464]	; (8008f14 <cppLoop+0xca4>)
 8008d42:	4872      	ldr	r0, [pc, #456]	; (8008f0c <cppLoop+0xc9c>)
 8008d44:	f7f8 fd8a 	bl	800185c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008d48:	4b6d      	ldr	r3, [pc, #436]	; (8008f00 <cppLoop+0xc90>)
 8008d4a:	edd3 7a00 	vldr	s15, [r3]
 8008d4e:	4b6d      	ldr	r3, [pc, #436]	; (8008f04 <cppLoop+0xc94>)
 8008d50:	ed93 7a00 	vldr	s14, [r3]
 8008d54:	4b66      	ldr	r3, [pc, #408]	; (8008ef0 <cppLoop+0xc80>)
 8008d56:	edd3 6a00 	vldr	s13, [r3]
 8008d5a:	eeb0 1a66 	vmov.f32	s2, s13
 8008d5e:	eef0 0a47 	vmov.f32	s1, s14
 8008d62:	eeb0 0a67 	vmov.f32	s0, s15
 8008d66:	486c      	ldr	r0, [pc, #432]	; (8008f18 <cppLoop+0xca8>)
 8008d68:	f7fb f930 	bl	8003fcc <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d72:	4860      	ldr	r0, [pc, #384]	; (8008ef4 <cppLoop+0xc84>)
 8008d74:	f7f9 faaa 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008d78:	f002 ba94 	b.w	800b2a4 <cppLoop+0x3034>
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 2 -----------------------*/
	/*-------------------------------------------------------------------------*/

	case 1:
		led.fullColor('W');
 8008d7c:	2157      	movs	r1, #87	; 0x57
 8008d7e:	485d      	ldr	r0, [pc, #372]	; (8008ef4 <cppLoop+0xc84>)
 8008d80:	f7f9 f9e8 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d84:	f7f8 f98c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d88:	2100      	movs	r1, #0
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	f7f8 f998 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*10000));
 8008d90:	4861      	ldr	r0, [pc, #388]	; (8008f18 <cppLoop+0xca8>)
 8008d92:	f7fb f8ee 	bl	8003f72 <_ZN9LineTrace5getKpEv>
 8008d96:	eeb0 7a40 	vmov.f32	s14, s0
 8008d9a:	eddf 7a60 	vldr	s15, [pc, #384]	; 8008f1c <cppLoop+0xcac>
 8008d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da2:	eeb0 0a67 	vmov.f32	s0, s15
 8008da6:	f7f9 fd97 	bl	80028d8 <_ZSt3absf>
 8008daa:	ee10 3a10 	vmov	r3, s0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7f7 fbe2 	bl	8000578 <__aeabi_f2d>
 8008db4:	4603      	mov	r3, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	461a      	mov	r2, r3
 8008dba:	4623      	mov	r3, r4
 8008dbc:	4858      	ldr	r0, [pc, #352]	; (8008f20 <cppLoop+0xcb0>)
 8008dbe:	f7f8 f9a9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	f7f8 f97b 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*10000));
 8008dca:	4853      	ldr	r0, [pc, #332]	; (8008f18 <cppLoop+0xca8>)
 8008dcc:	f7fb f8e0 	bl	8003f90 <_ZN9LineTrace5getKiEv>
 8008dd0:	eeb0 7a40 	vmov.f32	s14, s0
 8008dd4:	eddf 7a53 	vldr	s15, [pc, #332]	; 8008f24 <cppLoop+0xcb4>
 8008dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8008de0:	f7f9 fd7a 	bl	80028d8 <_ZSt3absf>
 8008de4:	ee10 3a10 	vmov	r3, s0
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7f7 fbc5 	bl	8000578 <__aeabi_f2d>
 8008dee:	4605      	mov	r5, r0
 8008df0:	460e      	mov	r6, r1
 8008df2:	4849      	ldr	r0, [pc, #292]	; (8008f18 <cppLoop+0xca8>)
 8008df4:	f7fb f8db 	bl	8003fae <_ZN9LineTrace5getKdEv>
 8008df8:	eeb0 7a40 	vmov.f32	s14, s0
 8008dfc:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008f1c <cppLoop+0xcac>
 8008e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e04:	eeb0 0a67 	vmov.f32	s0, s15
 8008e08:	f7f9 fd66 	bl	80028d8 <_ZSt3absf>
 8008e0c:	ee10 3a10 	vmov	r3, s0
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7f7 fbb1 	bl	8000578 <__aeabi_f2d>
 8008e16:	4603      	mov	r3, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	e9cd 3400 	strd	r3, r4, [sp]
 8008e1e:	462a      	mov	r2, r5
 8008e20:	4633      	mov	r3, r6
 8008e22:	4841      	ldr	r0, [pc, #260]	; (8008f28 <cppLoop+0xcb8>)
 8008e24:	f7f8 f976 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8008e28:	4833      	ldr	r0, [pc, #204]	; (8008ef8 <cppLoop+0xc88>)
 8008e2a:	f7f9 f92f 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	bf0c      	ite	eq
 8008e34:	2301      	moveq	r3, #1
 8008e36:	2300      	movne	r3, #0
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d022      	beq.n	8008e84 <cppLoop+0xc14>
			led.LR(-1, 1);
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f04f 31ff 	mov.w	r1, #4294967295
 8008e44:	482b      	ldr	r0, [pc, #172]	; (8008ef4 <cppLoop+0xc84>)
 8008e46:	f7f9 fa41 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e4e:	f002 fb73 	bl	800b538 <HAL_Delay>

			selector_gain++;
 8008e52:	4b2a      	ldr	r3, [pc, #168]	; (8008efc <cppLoop+0xc8c>)
 8008e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	b21a      	sxth	r2, r3
 8008e60:	4b26      	ldr	r3, [pc, #152]	; (8008efc <cppLoop+0xc8c>)
 8008e62:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8008e64:	4b25      	ldr	r3, [pc, #148]	; (8008efc <cppLoop+0xc8c>)
 8008e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	dd02      	ble.n	8008e74 <cppLoop+0xc04>
 8008e6e:	4b23      	ldr	r3, [pc, #140]	; (8008efc <cppLoop+0xc8c>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008e74:	2200      	movs	r2, #0
 8008e76:	f04f 31ff 	mov.w	r1, #4294967295
 8008e7a:	481e      	ldr	r0, [pc, #120]	; (8008ef4 <cppLoop+0xc84>)
 8008e7c:	f7f9 fa26 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8008e80:	f002 ba12 	b.w	800b2a8 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_R){
 8008e84:	481c      	ldr	r0, [pc, #112]	; (8008ef8 <cppLoop+0xc88>)
 8008e86:	f7f9 f901 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b10      	cmp	r3, #16
 8008e8e:	bf0c      	ite	eq
 8008e90:	2301      	moveq	r3, #1
 8008e92:	2300      	movne	r3, #0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 8082 	beq.w	8008fa0 <cppLoop+0xd30>
			led.LR(-1, 1);
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8008ea2:	4814      	ldr	r0, [pc, #80]	; (8008ef4 <cppLoop+0xc84>)
 8008ea4:	f7f9 fa12 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ea8:	2064      	movs	r0, #100	; 0x64
 8008eaa:	f002 fb45 	bl	800b538 <HAL_Delay>
			if(selector_gain == 0){
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <cppLoop+0xc8c>)
 8008eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d13b      	bne.n	8008f30 <cppLoop+0xcc0>
				adj_kp = adj_kp + 0.000001;
 8008eb8:	4b1c      	ldr	r3, [pc, #112]	; (8008f2c <cppLoop+0xcbc>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7f7 fb5b 	bl	8000578 <__aeabi_f2d>
 8008ec2:	a307      	add	r3, pc, #28	; (adr r3, 8008ee0 <cppLoop+0xc70>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 f9f8 	bl	80002bc <__adddf3>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	f7f7 fea0 	bl	8000c18 <__aeabi_d2f>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	4b14      	ldr	r3, [pc, #80]	; (8008f2c <cppLoop+0xcbc>)
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	e053      	b.n	8008f88 <cppLoop+0xd18>
 8008ee0:	a0b5ed8d 	.word	0xa0b5ed8d
 8008ee4:	3eb0c6f7 	.word	0x3eb0c6f7
 8008ee8:	88e368f1 	.word	0x88e368f1
 8008eec:	3ee4f8b5 	.word	0x3ee4f8b5
 8008ef0:	20045298 	.word	0x20045298
 8008ef4:	20000558 	.word	0x20000558
 8008ef8:	2000054c 	.word	0x2000054c
 8008efc:	20045268 	.word	0x20045268
 8008f00:	20045288 	.word	0x20045288
 8008f04:	20045290 	.word	0x20045290
 8008f08:	0801a624 	.word	0x0801a624
 8008f0c:	0801a630 	.word	0x0801a630
 8008f10:	0801a638 	.word	0x0801a638
 8008f14:	0801a644 	.word	0x0801a644
 8008f18:	200209d4 	.word	0x200209d4
 8008f1c:	461c4000 	.word	0x461c4000
 8008f20:	0801a650 	.word	0x0801a650
 8008f24:	447a0000 	.word	0x447a0000
 8008f28:	0801a614 	.word	0x0801a614
 8008f2c:	20045270 	.word	0x20045270
			else if(selector_gain == 1){
 8008f30:	4b77      	ldr	r3, [pc, #476]	; (8009110 <cppLoop+0xea0>)
 8008f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d113      	bne.n	8008f62 <cppLoop+0xcf2>
				adj_ki = adj_ki + 0.00001;
 8008f3a:	4b76      	ldr	r3, [pc, #472]	; (8009114 <cppLoop+0xea4>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7f7 fb1a 	bl	8000578 <__aeabi_f2d>
 8008f44:	a36e      	add	r3, pc, #440	; (adr r3, 8009100 <cppLoop+0xe90>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f9b7 	bl	80002bc <__adddf3>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	4618      	mov	r0, r3
 8008f54:	4621      	mov	r1, r4
 8008f56:	f7f7 fe5f 	bl	8000c18 <__aeabi_d2f>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	4b6d      	ldr	r3, [pc, #436]	; (8009114 <cppLoop+0xea4>)
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	e012      	b.n	8008f88 <cppLoop+0xd18>
				adj_kd = adj_kd + 0.000001;
 8008f62:	4b6d      	ldr	r3, [pc, #436]	; (8009118 <cppLoop+0xea8>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7f7 fb06 	bl	8000578 <__aeabi_f2d>
 8008f6c:	a366      	add	r3, pc, #408	; (adr r3, 8009108 <cppLoop+0xe98>)
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f7f7 f9a3 	bl	80002bc <__adddf3>
 8008f76:	4603      	mov	r3, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f7f7 fe4b 	bl	8000c18 <__aeabi_d2f>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4b64      	ldr	r3, [pc, #400]	; (8009118 <cppLoop+0xea8>)
 8008f86:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008f88:	2152      	movs	r1, #82	; 0x52
 8008f8a:	4864      	ldr	r0, [pc, #400]	; (800911c <cppLoop+0xeac>)
 8008f8c:	f7f9 f8e2 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008f90:	2200      	movs	r2, #0
 8008f92:	f04f 31ff 	mov.w	r1, #4294967295
 8008f96:	4861      	ldr	r0, [pc, #388]	; (800911c <cppLoop+0xeac>)
 8008f98:	f7f9 f998 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008f9c:	f002 b984 	b.w	800b2a8 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_L){
 8008fa0:	485f      	ldr	r0, [pc, #380]	; (8009120 <cppLoop+0xeb0>)
 8008fa2:	f7f9 f873 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	bf0c      	ite	eq
 8008fac:	2301      	moveq	r3, #1
 8008fae:	2300      	movne	r3, #0
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d059      	beq.n	800906a <cppLoop+0xdfa>
			led.LR(-1, 1);
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8008fbc:	4857      	ldr	r0, [pc, #348]	; (800911c <cppLoop+0xeac>)
 8008fbe:	f7f9 f985 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008fc2:	2064      	movs	r0, #100	; 0x64
 8008fc4:	f002 fab8 	bl	800b538 <HAL_Delay>
			if(selector_gain == 0){
 8008fc8:	4b51      	ldr	r3, [pc, #324]	; (8009110 <cppLoop+0xea0>)
 8008fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d113      	bne.n	8008ffa <cppLoop+0xd8a>
				adj_kp = adj_kp - 0.000001;
 8008fd2:	4b54      	ldr	r3, [pc, #336]	; (8009124 <cppLoop+0xeb4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7f7 face 	bl	8000578 <__aeabi_f2d>
 8008fdc:	a34a      	add	r3, pc, #296	; (adr r3, 8009108 <cppLoop+0xe98>)
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	f7f7 f969 	bl	80002b8 <__aeabi_dsub>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	460c      	mov	r4, r1
 8008fea:	4618      	mov	r0, r3
 8008fec:	4621      	mov	r1, r4
 8008fee:	f7f7 fe13 	bl	8000c18 <__aeabi_d2f>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	4b4b      	ldr	r3, [pc, #300]	; (8009124 <cppLoop+0xeb4>)
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	e02b      	b.n	8009052 <cppLoop+0xde2>
			else if(selector_gain == 1){
 8008ffa:	4b45      	ldr	r3, [pc, #276]	; (8009110 <cppLoop+0xea0>)
 8008ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d113      	bne.n	800902c <cppLoop+0xdbc>
				adj_ki = adj_ki - 0.00001;
 8009004:	4b43      	ldr	r3, [pc, #268]	; (8009114 <cppLoop+0xea4>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	f7f7 fab5 	bl	8000578 <__aeabi_f2d>
 800900e:	a33c      	add	r3, pc, #240	; (adr r3, 8009100 <cppLoop+0xe90>)
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	f7f7 f950 	bl	80002b8 <__aeabi_dsub>
 8009018:	4603      	mov	r3, r0
 800901a:	460c      	mov	r4, r1
 800901c:	4618      	mov	r0, r3
 800901e:	4621      	mov	r1, r4
 8009020:	f7f7 fdfa 	bl	8000c18 <__aeabi_d2f>
 8009024:	4602      	mov	r2, r0
 8009026:	4b3b      	ldr	r3, [pc, #236]	; (8009114 <cppLoop+0xea4>)
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	e012      	b.n	8009052 <cppLoop+0xde2>
				adj_kd = adj_kd - 0.000001;
 800902c:	4b3a      	ldr	r3, [pc, #232]	; (8009118 <cppLoop+0xea8>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4618      	mov	r0, r3
 8009032:	f7f7 faa1 	bl	8000578 <__aeabi_f2d>
 8009036:	a334      	add	r3, pc, #208	; (adr r3, 8009108 <cppLoop+0xe98>)
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f7f7 f93c 	bl	80002b8 <__aeabi_dsub>
 8009040:	4603      	mov	r3, r0
 8009042:	460c      	mov	r4, r1
 8009044:	4618      	mov	r0, r3
 8009046:	4621      	mov	r1, r4
 8009048:	f7f7 fde6 	bl	8000c18 <__aeabi_d2f>
 800904c:	4602      	mov	r2, r0
 800904e:	4b32      	ldr	r3, [pc, #200]	; (8009118 <cppLoop+0xea8>)
 8009050:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009052:	2152      	movs	r1, #82	; 0x52
 8009054:	4831      	ldr	r0, [pc, #196]	; (800911c <cppLoop+0xeac>)
 8009056:	f7f9 f87d 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800905a:	2200      	movs	r2, #0
 800905c:	f04f 31ff 	mov.w	r1, #4294967295
 8009060:	482e      	ldr	r0, [pc, #184]	; (800911c <cppLoop+0xeac>)
 8009062:	f7f9 f933 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009066:	f002 b91f 	b.w	800b2a8 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_C){
 800906a:	482d      	ldr	r0, [pc, #180]	; (8009120 <cppLoop+0xeb0>)
 800906c:	f7f9 f80e 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009070:	4603      	mov	r3, r0
 8009072:	2b02      	cmp	r3, #2
 8009074:	bf0c      	ite	eq
 8009076:	2301      	moveq	r3, #1
 8009078:	2300      	movne	r3, #0
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	f002 8113 	beq.w	800b2a8 <cppLoop+0x3038>
			led.LR(-1, 1);
 8009082:	2201      	movs	r2, #1
 8009084:	f04f 31ff 	mov.w	r1, #4294967295
 8009088:	4824      	ldr	r0, [pc, #144]	; (800911c <cppLoop+0xeac>)
 800908a:	f7f9 f91f 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800908e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009092:	f002 fa51 	bl	800b538 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009096:	2300      	movs	r3, #0
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	4b22      	ldr	r3, [pc, #136]	; (8009124 <cppLoop+0xeb4>)
 800909c:	2201      	movs	r2, #1
 800909e:	4922      	ldr	r1, [pc, #136]	; (8009128 <cppLoop+0xeb8>)
 80090a0:	4822      	ldr	r0, [pc, #136]	; (800912c <cppLoop+0xebc>)
 80090a2:	f7f8 fbdb 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80090a6:	2300      	movs	r3, #0
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <cppLoop+0xea4>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	4920      	ldr	r1, [pc, #128]	; (8009130 <cppLoop+0xec0>)
 80090b0:	481e      	ldr	r0, [pc, #120]	; (800912c <cppLoop+0xebc>)
 80090b2:	f7f8 fbd3 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80090b6:	2300      	movs	r3, #0
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	4b17      	ldr	r3, [pc, #92]	; (8009118 <cppLoop+0xea8>)
 80090bc:	2201      	movs	r2, #1
 80090be:	491d      	ldr	r1, [pc, #116]	; (8009134 <cppLoop+0xec4>)
 80090c0:	481a      	ldr	r0, [pc, #104]	; (800912c <cppLoop+0xebc>)
 80090c2:	f7f8 fbcb 	bl	800185c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80090c6:	4b17      	ldr	r3, [pc, #92]	; (8009124 <cppLoop+0xeb4>)
 80090c8:	edd3 7a00 	vldr	s15, [r3]
 80090cc:	4b11      	ldr	r3, [pc, #68]	; (8009114 <cppLoop+0xea4>)
 80090ce:	ed93 7a00 	vldr	s14, [r3]
 80090d2:	4b11      	ldr	r3, [pc, #68]	; (8009118 <cppLoop+0xea8>)
 80090d4:	edd3 6a00 	vldr	s13, [r3]
 80090d8:	eeb0 1a66 	vmov.f32	s2, s13
 80090dc:	eef0 0a47 	vmov.f32	s1, s14
 80090e0:	eeb0 0a67 	vmov.f32	s0, s15
 80090e4:	4814      	ldr	r0, [pc, #80]	; (8009138 <cppLoop+0xec8>)
 80090e6:	f7fa ff2b 	bl	8003f40 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80090ea:	2200      	movs	r2, #0
 80090ec:	f04f 31ff 	mov.w	r1, #4294967295
 80090f0:	480a      	ldr	r0, [pc, #40]	; (800911c <cppLoop+0xeac>)
 80090f2:	f7f9 f8eb 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80090f6:	f002 b8d7 	b.w	800b2a8 <cppLoop+0x3038>
 80090fa:	bf00      	nop
 80090fc:	f3af 8000 	nop.w
 8009100:	88e368f1 	.word	0x88e368f1
 8009104:	3ee4f8b5 	.word	0x3ee4f8b5
 8009108:	a0b5ed8d 	.word	0xa0b5ed8d
 800910c:	3eb0c6f7 	.word	0x3eb0c6f7
 8009110:	20045268 	.word	0x20045268
 8009114:	20045278 	.word	0x20045278
 8009118:	20045280 	.word	0x20045280
 800911c:	20000558 	.word	0x20000558
 8009120:	2000054c 	.word	0x2000054c
 8009124:	20045270 	.word	0x20045270
 8009128:	0801a65c 	.word	0x0801a65c
 800912c:	0801a630 	.word	0x0801a630
 8009130:	0801a664 	.word	0x0801a664
 8009134:	0801a66c 	.word	0x0801a66c
 8009138:	200209d4 	.word	0x200209d4

	/*-------------------------------------------------------------------------*/
	/*----------------------------------- First running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 2:
		led.fullColor('C');
 800913c:	2143      	movs	r1, #67	; 0x43
 800913e:	489e      	ldr	r0, [pc, #632]	; (80093b8 <cppLoop+0x1148>)
 8009140:	f7f9 f808 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8009144:	489d      	ldr	r0, [pc, #628]	; (80093bc <cppLoop+0x114c>)
 8009146:	f7f8 ffa1 	bl	800208c <_ZN8JoyStick8getValueEv>
 800914a:	4603      	mov	r3, r0
 800914c:	2b04      	cmp	r3, #4
 800914e:	bf0c      	ite	eq
 8009150:	2301      	moveq	r3, #1
 8009152:	2300      	movne	r3, #0
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d020      	beq.n	800919c <cppLoop+0xf2c>
			led.LR(-1, 1);
 800915a:	2201      	movs	r2, #1
 800915c:	f04f 31ff 	mov.w	r1, #4294967295
 8009160:	4895      	ldr	r0, [pc, #596]	; (80093b8 <cppLoop+0x1148>)
 8009162:	f7f9 f8b3 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009166:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800916a:	f002 f9e5 	bl	800b538 <HAL_Delay>

			selector_run++;
 800916e:	4b94      	ldr	r3, [pc, #592]	; (80093c0 <cppLoop+0x1150>)
 8009170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009174:	b29b      	uxth	r3, r3
 8009176:	3301      	adds	r3, #1
 8009178:	b29b      	uxth	r3, r3
 800917a:	b21a      	sxth	r2, r3
 800917c:	4b90      	ldr	r3, [pc, #576]	; (80093c0 <cppLoop+0x1150>)
 800917e:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009180:	4b8f      	ldr	r3, [pc, #572]	; (80093c0 <cppLoop+0x1150>)
 8009182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009186:	2b01      	cmp	r3, #1
 8009188:	dd02      	ble.n	8009190 <cppLoop+0xf20>
 800918a:	4b8d      	ldr	r3, [pc, #564]	; (80093c0 <cppLoop+0x1150>)
 800918c:	2200      	movs	r2, #0
 800918e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009190:	2200      	movs	r2, #0
 8009192:	f04f 31ff 	mov.w	r1, #4294967295
 8009196:	4888      	ldr	r0, [pc, #544]	; (80093b8 <cppLoop+0x1148>)
 8009198:	f7f9 f898 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 800919c:	4b88      	ldr	r3, [pc, #544]	; (80093c0 <cppLoop+0x1150>)
 800919e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d15c      	bne.n	8009260 <cppLoop+0xff0>
			lcd_clear();
 80091a6:	f7f7 ff7b 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 80091aa:	2100      	movs	r1, #0
 80091ac:	2000      	movs	r0, #0
 80091ae:	f7f7 ff87 	bl	80010c0 <lcd_locate>
			lcd_printf("1:   ");
 80091b2:	4884      	ldr	r0, [pc, #528]	; (80093c4 <cppLoop+0x1154>)
 80091b4:	f7f7 ffae 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 80091b8:	2101      	movs	r1, #1
 80091ba:	2000      	movs	r0, #0
 80091bc:	f7f7 ff80 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_velocity);
 80091c0:	4b81      	ldr	r3, [pc, #516]	; (80093c8 <cppLoop+0x1158>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7f7 f9d7 	bl	8000578 <__aeabi_f2d>
 80091ca:	4603      	mov	r3, r0
 80091cc:	460c      	mov	r4, r1
 80091ce:	461a      	mov	r2, r3
 80091d0:	4623      	mov	r3, r4
 80091d2:	487e      	ldr	r0, [pc, #504]	; (80093cc <cppLoop+0x115c>)
 80091d4:	f7f7 ff9e 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 80091d8:	4878      	ldr	r0, [pc, #480]	; (80093bc <cppLoop+0x114c>)
 80091da:	f7f8 ff57 	bl	800208c <_ZN8JoyStick8getValueEv>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	bf0c      	ite	eq
 80091e4:	2301      	moveq	r3, #1
 80091e6:	2300      	movne	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f002 805e 	beq.w	800b2ac <cppLoop+0x303c>
				HAL_Delay(500);
 80091f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091f4:	f002 f9a0 	bl	800b538 <HAL_Delay>

				line_trace.setTargetVelocity(adj_velocity);
 80091f8:	4b73      	ldr	r3, [pc, #460]	; (80093c8 <cppLoop+0x1158>)
 80091fa:	edd3 7a00 	vldr	s15, [r3]
 80091fe:	eeb0 0a67 	vmov.f32	s0, s15
 8009202:	4873      	ldr	r0, [pc, #460]	; (80093d0 <cppLoop+0x1160>)
 8009204:	f7fa ff37 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(1, -1);
 8009208:	f04f 32ff 	mov.w	r2, #4294967295
 800920c:	2101      	movs	r1, #1
 800920e:	486a      	ldr	r0, [pc, #424]	; (80093b8 <cppLoop+0x1148>)
 8009210:	f7f9 f85c 	bl	80022cc <_ZN3LED2LREaa>

				// Record start
				HAL_Delay(1000);
 8009214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009218:	f002 f98e 	bl	800b538 <HAL_Delay>

				// Run
				line_trace.setMode(FIRST_RUNNING);
 800921c:	2100      	movs	r1, #0
 800921e:	486c      	ldr	r0, [pc, #432]	; (80093d0 <cppLoop+0x1160>)
 8009220:	f7fb fa08 	bl	8004634 <_ZN9LineTrace7setModeEs>

				logger.resetLogsTim1();
 8009224:	486b      	ldr	r0, [pc, #428]	; (80093d4 <cppLoop+0x1164>)
 8009226:	f7fc f906 	bl	8005436 <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 800922a:	486a      	ldr	r0, [pc, #424]	; (80093d4 <cppLoop+0x1164>)
 800922c:	f7fc f92b 	bl	8005486 <_ZN6Logger13resetLogsTim2Ev>

				line_trace.running();
 8009230:	4867      	ldr	r0, [pc, #412]	; (80093d0 <cppLoop+0x1160>)
 8009232:	f7fb fa4f 	bl	80046d4 <_ZN9LineTrace7runningEv>

				logger.stop();
 8009236:	4867      	ldr	r0, [pc, #412]	; (80093d4 <cppLoop+0x1164>)
 8009238:	f7fc f98e 	bl	8005558 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 800923c:	4a66      	ldr	r2, [pc, #408]	; (80093d8 <cppLoop+0x1168>)
 800923e:	4967      	ldr	r1, [pc, #412]	; (80093dc <cppLoop+0x116c>)
 8009240:	4864      	ldr	r0, [pc, #400]	; (80093d4 <cppLoop+0x1164>)
 8009242:	f7fc f822 	bl	800528a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009246:	4a66      	ldr	r2, [pc, #408]	; (80093e0 <cppLoop+0x1170>)
 8009248:	4964      	ldr	r1, [pc, #400]	; (80093dc <cppLoop+0x116c>)
 800924a:	4862      	ldr	r0, [pc, #392]	; (80093d4 <cppLoop+0x1164>)
 800924c:	f7fc f831 	bl	80052b2 <_ZN6Logger9saveLogs2EPKcS1_>


				led.LR(0, -1);
 8009250:	f04f 32ff 	mov.w	r2, #4294967295
 8009254:	2100      	movs	r1, #0
 8009256:	4858      	ldr	r0, [pc, #352]	; (80093b8 <cppLoop+0x1148>)
 8009258:	f7f9 f838 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}
		}

		break;
 800925c:	f002 b826 	b.w	800b2ac <cppLoop+0x303c>
			lcd_clear();
 8009260:	f7f7 ff1e 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009264:	2100      	movs	r1, #0
 8009266:	2000      	movs	r0, #0
 8009268:	f7f7 ff2a 	bl	80010c0 <lcd_locate>
			lcd_printf("1: ");
 800926c:	485d      	ldr	r0, [pc, #372]	; (80093e4 <cppLoop+0x1174>)
 800926e:	f7f7 ff51 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009272:	2101      	movs	r1, #1
 8009274:	2000      	movs	r0, #0
 8009276:	f7f7 ff23 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", adj_velocity);
 800927a:	4b53      	ldr	r3, [pc, #332]	; (80093c8 <cppLoop+0x1158>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f7f7 f97a 	bl	8000578 <__aeabi_f2d>
 8009284:	4603      	mov	r3, r0
 8009286:	460c      	mov	r4, r1
 8009288:	461a      	mov	r2, r3
 800928a:	4623      	mov	r3, r4
 800928c:	4856      	ldr	r0, [pc, #344]	; (80093e8 <cppLoop+0x1178>)
 800928e:	f7f7 ff41 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_R){
 8009292:	484a      	ldr	r0, [pc, #296]	; (80093bc <cppLoop+0x114c>)
 8009294:	f7f8 fefa 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009298:	4603      	mov	r3, r0
 800929a:	2b10      	cmp	r3, #16
 800929c:	bf0c      	ite	eq
 800929e:	2301      	moveq	r3, #1
 80092a0:	2300      	movne	r3, #0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d023      	beq.n	80092f0 <cppLoop+0x1080>
				led.LR(-1, 1);
 80092a8:	2201      	movs	r2, #1
 80092aa:	f04f 31ff 	mov.w	r1, #4294967295
 80092ae:	4842      	ldr	r0, [pc, #264]	; (80093b8 <cppLoop+0x1148>)
 80092b0:	f7f9 f80c 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 80092b4:	2064      	movs	r0, #100	; 0x64
 80092b6:	f002 f93f 	bl	800b538 <HAL_Delay>
				adj_velocity = adj_velocity + 0.1;
 80092ba:	4b43      	ldr	r3, [pc, #268]	; (80093c8 <cppLoop+0x1158>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f7f7 f95a 	bl	8000578 <__aeabi_f2d>
 80092c4:	a33a      	add	r3, pc, #232	; (adr r3, 80093b0 <cppLoop+0x1140>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f6 fff7 	bl	80002bc <__adddf3>
 80092ce:	4603      	mov	r3, r0
 80092d0:	460c      	mov	r4, r1
 80092d2:	4618      	mov	r0, r3
 80092d4:	4621      	mov	r1, r4
 80092d6:	f7f7 fc9f 	bl	8000c18 <__aeabi_d2f>
 80092da:	4602      	mov	r2, r0
 80092dc:	4b3a      	ldr	r3, [pc, #232]	; (80093c8 <cppLoop+0x1158>)
 80092de:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 80092e0:	2200      	movs	r2, #0
 80092e2:	f04f 31ff 	mov.w	r1, #4294967295
 80092e6:	4834      	ldr	r0, [pc, #208]	; (80093b8 <cppLoop+0x1148>)
 80092e8:	f7f8 fff0 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80092ec:	f001 bfde 	b.w	800b2ac <cppLoop+0x303c>
			else if(joy_stick.getValue() == JOY_L){
 80092f0:	4832      	ldr	r0, [pc, #200]	; (80093bc <cppLoop+0x114c>)
 80092f2:	f7f8 fecb 	bl	800208c <_ZN8JoyStick8getValueEv>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	bf0c      	ite	eq
 80092fc:	2301      	moveq	r3, #1
 80092fe:	2300      	movne	r3, #0
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d023      	beq.n	800934e <cppLoop+0x10de>
				led.LR(-1, 1);
 8009306:	2201      	movs	r2, #1
 8009308:	f04f 31ff 	mov.w	r1, #4294967295
 800930c:	482a      	ldr	r0, [pc, #168]	; (80093b8 <cppLoop+0x1148>)
 800930e:	f7f8 ffdd 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009312:	2064      	movs	r0, #100	; 0x64
 8009314:	f002 f910 	bl	800b538 <HAL_Delay>
				adj_velocity = adj_velocity - 0.1;
 8009318:	4b2b      	ldr	r3, [pc, #172]	; (80093c8 <cppLoop+0x1158>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4618      	mov	r0, r3
 800931e:	f7f7 f92b 	bl	8000578 <__aeabi_f2d>
 8009322:	a323      	add	r3, pc, #140	; (adr r3, 80093b0 <cppLoop+0x1140>)
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	f7f6 ffc6 	bl	80002b8 <__aeabi_dsub>
 800932c:	4603      	mov	r3, r0
 800932e:	460c      	mov	r4, r1
 8009330:	4618      	mov	r0, r3
 8009332:	4621      	mov	r1, r4
 8009334:	f7f7 fc70 	bl	8000c18 <__aeabi_d2f>
 8009338:	4602      	mov	r2, r0
 800933a:	4b23      	ldr	r3, [pc, #140]	; (80093c8 <cppLoop+0x1158>)
 800933c:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800933e:	2200      	movs	r2, #0
 8009340:	f04f 31ff 	mov.w	r1, #4294967295
 8009344:	481c      	ldr	r0, [pc, #112]	; (80093b8 <cppLoop+0x1148>)
 8009346:	f7f8 ffc1 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800934a:	f001 bfaf 	b.w	800b2ac <cppLoop+0x303c>
			else if(joy_stick.getValue() == JOY_C){
 800934e:	481b      	ldr	r0, [pc, #108]	; (80093bc <cppLoop+0x114c>)
 8009350:	f7f8 fe9c 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009354:	4603      	mov	r3, r0
 8009356:	2b02      	cmp	r3, #2
 8009358:	bf0c      	ite	eq
 800935a:	2301      	moveq	r3, #1
 800935c:	2300      	movne	r3, #0
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	f001 87a3 	beq.w	800b2ac <cppLoop+0x303c>
				led.LR(-1, 1);
 8009366:	2201      	movs	r2, #1
 8009368:	f04f 31ff 	mov.w	r1, #4294967295
 800936c:	4812      	ldr	r0, [pc, #72]	; (80093b8 <cppLoop+0x1148>)
 800936e:	f7f8 ffad 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009372:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009376:	f002 f8df 	bl	800b538 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL.TXT", 1, &adj_velocity, OVER_WRITE);
 800937a:	2300      	movs	r3, #0
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	4b12      	ldr	r3, [pc, #72]	; (80093c8 <cppLoop+0x1158>)
 8009380:	2201      	movs	r2, #1
 8009382:	491a      	ldr	r1, [pc, #104]	; (80093ec <cppLoop+0x117c>)
 8009384:	481a      	ldr	r0, [pc, #104]	; (80093f0 <cppLoop+0x1180>)
 8009386:	f7f8 fa69 	bl	800185c <sd_write_array_float>
				line_trace.setTargetVelocity(adj_velocity);
 800938a:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <cppLoop+0x1158>)
 800938c:	edd3 7a00 	vldr	s15, [r3]
 8009390:	eeb0 0a67 	vmov.f32	s0, s15
 8009394:	480e      	ldr	r0, [pc, #56]	; (80093d0 <cppLoop+0x1160>)
 8009396:	f7fa fe6e 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(-1, 0);
 800939a:	2200      	movs	r2, #0
 800939c:	f04f 31ff 	mov.w	r1, #4294967295
 80093a0:	4805      	ldr	r0, [pc, #20]	; (80093b8 <cppLoop+0x1148>)
 80093a2:	f7f8 ff93 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80093a6:	f001 bf81 	b.w	800b2ac <cppLoop+0x303c>
 80093aa:	bf00      	nop
 80093ac:	f3af 8000 	nop.w
 80093b0:	9999999a 	.word	0x9999999a
 80093b4:	3fb99999 	.word	0x3fb99999
 80093b8:	20000558 	.word	0x20000558
 80093bc:	2000054c 	.word	0x2000054c
 80093c0:	2004526a 	.word	0x2004526a
 80093c4:	0801a674 	.word	0x0801a674
 80093c8:	200452a0 	.word	0x200452a0
 80093cc:	0801a67c 	.word	0x0801a67c
 80093d0:	200209d4 	.word	0x200209d4
 80093d4:	2000057c 	.word	0x2000057c
 80093d8:	0801a688 	.word	0x0801a688
 80093dc:	0801a694 	.word	0x0801a694
 80093e0:	0801a6a0 	.word	0x0801a6a0
 80093e4:	0801a6ac 	.word	0x0801a6ac
 80093e8:	0801a6b0 	.word	0x0801a6b0
 80093ec:	0801a6bc 	.word	0x0801a6bc
 80093f0:	0801a630 	.word	0x0801a630

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Second running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 3:
		led.fullColor('Y');
 80093f4:	2159      	movs	r1, #89	; 0x59
 80093f6:	48be      	ldr	r0, [pc, #760]	; (80096f0 <cppLoop+0x1480>)
 80093f8:	f7f8 feac 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 80093fc:	48bd      	ldr	r0, [pc, #756]	; (80096f4 <cppLoop+0x1484>)
 80093fe:	f7f8 fe45 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009402:	4603      	mov	r3, r0
 8009404:	2b04      	cmp	r3, #4
 8009406:	bf0c      	ite	eq
 8009408:	2301      	moveq	r3, #1
 800940a:	2300      	movne	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d020      	beq.n	8009454 <cppLoop+0x11e4>
			led.LR(-1, 1);
 8009412:	2201      	movs	r2, #1
 8009414:	f04f 31ff 	mov.w	r1, #4294967295
 8009418:	48b5      	ldr	r0, [pc, #724]	; (80096f0 <cppLoop+0x1480>)
 800941a:	f7f8 ff57 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800941e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009422:	f002 f889 	bl	800b538 <HAL_Delay>

			selector_run++;
 8009426:	4bb4      	ldr	r3, [pc, #720]	; (80096f8 <cppLoop+0x1488>)
 8009428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800942c:	b29b      	uxth	r3, r3
 800942e:	3301      	adds	r3, #1
 8009430:	b29b      	uxth	r3, r3
 8009432:	b21a      	sxth	r2, r3
 8009434:	4bb0      	ldr	r3, [pc, #704]	; (80096f8 <cppLoop+0x1488>)
 8009436:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009438:	4baf      	ldr	r3, [pc, #700]	; (80096f8 <cppLoop+0x1488>)
 800943a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800943e:	2b01      	cmp	r3, #1
 8009440:	dd02      	ble.n	8009448 <cppLoop+0x11d8>
 8009442:	4bad      	ldr	r3, [pc, #692]	; (80096f8 <cppLoop+0x1488>)
 8009444:	2200      	movs	r2, #0
 8009446:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009448:	2200      	movs	r2, #0
 800944a:	f04f 31ff 	mov.w	r1, #4294967295
 800944e:	48a8      	ldr	r0, [pc, #672]	; (80096f0 <cppLoop+0x1480>)
 8009450:	f7f8 ff3c 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009454:	4ba8      	ldr	r3, [pc, #672]	; (80096f8 <cppLoop+0x1488>)
 8009456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d178      	bne.n	8009550 <cppLoop+0x12e0>
			lcd_clear();
 800945e:	f7f7 fe1f 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009462:	2100      	movs	r1, #0
 8009464:	2000      	movs	r0, #0
 8009466:	f7f7 fe2b 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", adj_max_velocity);
 800946a:	4ba4      	ldr	r3, [pc, #656]	; (80096fc <cppLoop+0x148c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4618      	mov	r0, r3
 8009470:	f7f7 f882 	bl	8000578 <__aeabi_f2d>
 8009474:	4603      	mov	r3, r0
 8009476:	460c      	mov	r4, r1
 8009478:	461a      	mov	r2, r3
 800947a:	4623      	mov	r3, r4
 800947c:	48a0      	ldr	r0, [pc, #640]	; (8009700 <cppLoop+0x1490>)
 800947e:	f7f7 fe49 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009482:	2101      	movs	r1, #1
 8009484:	2000      	movs	r0, #0
 8009486:	f7f7 fe1b 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity);
 800948a:	4b9e      	ldr	r3, [pc, #632]	; (8009704 <cppLoop+0x1494>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4618      	mov	r0, r3
 8009490:	f7f7 f872 	bl	8000578 <__aeabi_f2d>
 8009494:	4603      	mov	r3, r0
 8009496:	460c      	mov	r4, r1
 8009498:	461a      	mov	r2, r3
 800949a:	4623      	mov	r3, r4
 800949c:	489a      	ldr	r0, [pc, #616]	; (8009708 <cppLoop+0x1498>)
 800949e:	f7f7 fe39 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_C){
 80094a2:	4894      	ldr	r0, [pc, #592]	; (80096f4 <cppLoop+0x1484>)
 80094a4:	f7f8 fdf2 	bl	800208c <_ZN8JoyStick8getValueEv>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	bf0c      	ite	eq
 80094ae:	2301      	moveq	r3, #1
 80094b0:	2300      	movne	r3, #0
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f001 86fb 	beq.w	800b2b0 <cppLoop+0x3040>
				HAL_Delay(500);
 80094ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094be:	f002 f83b 	bl	800b538 <HAL_Delay>

				led.LR(1, -1);
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295
 80094c6:	2101      	movs	r1, #1
 80094c8:	4889      	ldr	r0, [pc, #548]	; (80096f0 <cppLoop+0x1480>)
 80094ca:	f7f8 feff 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setMode(SECOND_RUNNING);
 80094ce:	2101      	movs	r1, #1
 80094d0:	488e      	ldr	r0, [pc, #568]	; (800970c <cppLoop+0x149c>)
 80094d2:	f7fb f8af 	bl	8004634 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity);
 80094d6:	4b8b      	ldr	r3, [pc, #556]	; (8009704 <cppLoop+0x1494>)
 80094d8:	edd3 7a00 	vldr	s15, [r3]
 80094dc:	eeb0 0a67 	vmov.f32	s0, s15
 80094e0:	488a      	ldr	r0, [pc, #552]	; (800970c <cppLoop+0x149c>)
 80094e2:	f7fa fdc8 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity(adj_max_velocity);
 80094e6:	4b85      	ldr	r3, [pc, #532]	; (80096fc <cppLoop+0x148c>)
 80094e8:	edd3 7a00 	vldr	s15, [r3]
 80094ec:	eeb0 0a67 	vmov.f32	s0, s15
 80094f0:	4886      	ldr	r0, [pc, #536]	; (800970c <cppLoop+0x149c>)
 80094f2:	f7fa fdd0 	bl	8004096 <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 80094f6:	4b83      	ldr	r3, [pc, #524]	; (8009704 <cppLoop+0x1494>)
 80094f8:	edd3 7a00 	vldr	s15, [r3]
 80094fc:	eeb0 0a67 	vmov.f32	s0, s15
 8009500:	4882      	ldr	r0, [pc, #520]	; (800970c <cppLoop+0x149c>)
 8009502:	f7fa fdd8 	bl	80040b6 <_ZN9LineTrace14setMinVelocityEf>
				line_trace.createVelocityTabele();
 8009506:	4881      	ldr	r0, [pc, #516]	; (800970c <cppLoop+0x149c>)
 8009508:	f7fb fadc 	bl	8004ac4 <_ZN9LineTrace20createVelocityTabeleEv>

				HAL_Delay(1000);
 800950c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009510:	f002 f812 	bl	800b538 <HAL_Delay>

				logger.resetLogsTim1();
 8009514:	487e      	ldr	r0, [pc, #504]	; (8009710 <cppLoop+0x14a0>)
 8009516:	f7fb ff8e 	bl	8005436 <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 800951a:	487d      	ldr	r0, [pc, #500]	; (8009710 <cppLoop+0x14a0>)
 800951c:	f7fb ffb3 	bl	8005486 <_ZN6Logger13resetLogsTim2Ev>
				//logger.start();

				line_trace.running();
 8009520:	487a      	ldr	r0, [pc, #488]	; (800970c <cppLoop+0x149c>)
 8009522:	f7fb f8d7 	bl	80046d4 <_ZN9LineTrace7runningEv>

				logger.stop();
 8009526:	487a      	ldr	r0, [pc, #488]	; (8009710 <cppLoop+0x14a0>)
 8009528:	f7fc f816 	bl	8005558 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 800952c:	4a79      	ldr	r2, [pc, #484]	; (8009714 <cppLoop+0x14a4>)
 800952e:	497a      	ldr	r1, [pc, #488]	; (8009718 <cppLoop+0x14a8>)
 8009530:	4877      	ldr	r0, [pc, #476]	; (8009710 <cppLoop+0x14a0>)
 8009532:	f7fb feaa 	bl	800528a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009536:	4a79      	ldr	r2, [pc, #484]	; (800971c <cppLoop+0x14ac>)
 8009538:	4977      	ldr	r1, [pc, #476]	; (8009718 <cppLoop+0x14a8>)
 800953a:	4875      	ldr	r0, [pc, #468]	; (8009710 <cppLoop+0x14a0>)
 800953c:	f7fb feb9 	bl	80052b2 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009540:	f04f 32ff 	mov.w	r2, #4294967295
 8009544:	2100      	movs	r1, #0
 8009546:	486a      	ldr	r0, [pc, #424]	; (80096f0 <cppLoop+0x1480>)
 8009548:	f7f8 fec0 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setMinVelocity(adj_min_velocity);

				led.LR(-1, 0);
			}
		}
		break;
 800954c:	f001 beb0 	b.w	800b2b0 <cppLoop+0x3040>
			lcd_clear();
 8009550:	f7f7 fda6 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009554:	2100      	movs	r1, #0
 8009556:	2000      	movs	r0, #0
 8009558:	f7f7 fdb2 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800955c:	486b      	ldr	r0, [pc, #428]	; (800970c <cppLoop+0x149c>)
 800955e:	f7fa fe2a 	bl	80041b6 <_ZN9LineTrace14getMaxVelocityEv>
 8009562:	ee10 3a10 	vmov	r3, s0
 8009566:	4618      	mov	r0, r3
 8009568:	f7f7 f806 	bl	8000578 <__aeabi_f2d>
 800956c:	4603      	mov	r3, r0
 800956e:	460c      	mov	r4, r1
 8009570:	461a      	mov	r2, r3
 8009572:	4623      	mov	r3, r4
 8009574:	4862      	ldr	r0, [pc, #392]	; (8009700 <cppLoop+0x1490>)
 8009576:	f7f7 fdcd 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800957a:	2101      	movs	r1, #1
 800957c:	2000      	movs	r0, #0
 800957e:	f7f7 fd9f 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8009582:	4862      	ldr	r0, [pc, #392]	; (800970c <cppLoop+0x149c>)
 8009584:	f7fa fe27 	bl	80041d6 <_ZN9LineTrace14getMinVelocityEv>
 8009588:	ee10 3a10 	vmov	r3, s0
 800958c:	4618      	mov	r0, r3
 800958e:	f7f6 fff3 	bl	8000578 <__aeabi_f2d>
 8009592:	4603      	mov	r3, r0
 8009594:	460c      	mov	r4, r1
 8009596:	461a      	mov	r2, r3
 8009598:	4623      	mov	r3, r4
 800959a:	4861      	ldr	r0, [pc, #388]	; (8009720 <cppLoop+0x14b0>)
 800959c:	f7f7 fdba 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 80095a0:	4854      	ldr	r0, [pc, #336]	; (80096f4 <cppLoop+0x1484>)
 80095a2:	f7f8 fd73 	bl	800208c <_ZN8JoyStick8getValueEv>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b08      	cmp	r3, #8
 80095aa:	bf0c      	ite	eq
 80095ac:	2301      	moveq	r3, #1
 80095ae:	2300      	movne	r3, #0
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d022      	beq.n	80095fc <cppLoop+0x138c>
				led.LR(-1, 1);
 80095b6:	2201      	movs	r2, #1
 80095b8:	f04f 31ff 	mov.w	r1, #4294967295
 80095bc:	484c      	ldr	r0, [pc, #304]	; (80096f0 <cppLoop+0x1480>)
 80095be:	f7f8 fe85 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 80095c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80095c6:	f001 ffb7 	bl	800b538 <HAL_Delay>
				selector_vel++;
 80095ca:	4b56      	ldr	r3, [pc, #344]	; (8009724 <cppLoop+0x14b4>)
 80095cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	3301      	adds	r3, #1
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	b21a      	sxth	r2, r3
 80095d8:	4b52      	ldr	r3, [pc, #328]	; (8009724 <cppLoop+0x14b4>)
 80095da:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 80095dc:	4b51      	ldr	r3, [pc, #324]	; (8009724 <cppLoop+0x14b4>)
 80095de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	dd02      	ble.n	80095ec <cppLoop+0x137c>
 80095e6:	4b4f      	ldr	r3, [pc, #316]	; (8009724 <cppLoop+0x14b4>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 80095ec:	2200      	movs	r2, #0
 80095ee:	f04f 31ff 	mov.w	r1, #4294967295
 80095f2:	483f      	ldr	r0, [pc, #252]	; (80096f0 <cppLoop+0x1480>)
 80095f4:	f7f8 fe6a 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80095f8:	f001 be5a 	b.w	800b2b0 <cppLoop+0x3040>
			else if(joy_stick.getValue() == JOY_R){
 80095fc:	483d      	ldr	r0, [pc, #244]	; (80096f4 <cppLoop+0x1484>)
 80095fe:	f7f8 fd45 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009602:	4603      	mov	r3, r0
 8009604:	2b10      	cmp	r3, #16
 8009606:	bf0c      	ite	eq
 8009608:	2301      	moveq	r3, #1
 800960a:	2300      	movne	r3, #0
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d03c      	beq.n	800968c <cppLoop+0x141c>
				led.LR(-1, 1);
 8009612:	2201      	movs	r2, #1
 8009614:	f04f 31ff 	mov.w	r1, #4294967295
 8009618:	4835      	ldr	r0, [pc, #212]	; (80096f0 <cppLoop+0x1480>)
 800961a:	f7f8 fe57 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 800961e:	2064      	movs	r0, #100	; 0x64
 8009620:	f001 ff8a 	bl	800b538 <HAL_Delay>
				if(selector_vel == 0)
 8009624:	4b3f      	ldr	r3, [pc, #252]	; (8009724 <cppLoop+0x14b4>)
 8009626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d113      	bne.n	8009656 <cppLoop+0x13e6>
					adj_max_velocity = adj_max_velocity + 0.1;
 800962e:	4b33      	ldr	r3, [pc, #204]	; (80096fc <cppLoop+0x148c>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4618      	mov	r0, r3
 8009634:	f7f6 ffa0 	bl	8000578 <__aeabi_f2d>
 8009638:	a32b      	add	r3, pc, #172	; (adr r3, 80096e8 <cppLoop+0x1478>)
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	f7f6 fe3d 	bl	80002bc <__adddf3>
 8009642:	4603      	mov	r3, r0
 8009644:	460c      	mov	r4, r1
 8009646:	4618      	mov	r0, r3
 8009648:	4621      	mov	r1, r4
 800964a:	f7f7 fae5 	bl	8000c18 <__aeabi_d2f>
 800964e:	4602      	mov	r2, r0
 8009650:	4b2a      	ldr	r3, [pc, #168]	; (80096fc <cppLoop+0x148c>)
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	e012      	b.n	800967c <cppLoop+0x140c>
					adj_min_velocity = adj_min_velocity + 0.1;
 8009656:	4b2b      	ldr	r3, [pc, #172]	; (8009704 <cppLoop+0x1494>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4618      	mov	r0, r3
 800965c:	f7f6 ff8c 	bl	8000578 <__aeabi_f2d>
 8009660:	a321      	add	r3, pc, #132	; (adr r3, 80096e8 <cppLoop+0x1478>)
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	f7f6 fe29 	bl	80002bc <__adddf3>
 800966a:	4603      	mov	r3, r0
 800966c:	460c      	mov	r4, r1
 800966e:	4618      	mov	r0, r3
 8009670:	4621      	mov	r1, r4
 8009672:	f7f7 fad1 	bl	8000c18 <__aeabi_d2f>
 8009676:	4602      	mov	r2, r0
 8009678:	4b22      	ldr	r3, [pc, #136]	; (8009704 <cppLoop+0x1494>)
 800967a:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800967c:	2200      	movs	r2, #0
 800967e:	f04f 31ff 	mov.w	r1, #4294967295
 8009682:	481b      	ldr	r0, [pc, #108]	; (80096f0 <cppLoop+0x1480>)
 8009684:	f7f8 fe22 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009688:	f001 be12 	b.w	800b2b0 <cppLoop+0x3040>
			else if(joy_stick.getValue() == JOY_L){
 800968c:	4819      	ldr	r0, [pc, #100]	; (80096f4 <cppLoop+0x1484>)
 800968e:	f7f8 fcfd 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009692:	4603      	mov	r3, r0
 8009694:	2b01      	cmp	r3, #1
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d05d      	beq.n	800975e <cppLoop+0x14ee>
				led.LR(-1, 1);
 80096a2:	2201      	movs	r2, #1
 80096a4:	f04f 31ff 	mov.w	r1, #4294967295
 80096a8:	4811      	ldr	r0, [pc, #68]	; (80096f0 <cppLoop+0x1480>)
 80096aa:	f7f8 fe0f 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 80096ae:	2064      	movs	r0, #100	; 0x64
 80096b0:	f001 ff42 	bl	800b538 <HAL_Delay>
				if(selector_vel == 0)
 80096b4:	4b1b      	ldr	r3, [pc, #108]	; (8009724 <cppLoop+0x14b4>)
 80096b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d134      	bne.n	8009728 <cppLoop+0x14b8>
					adj_max_velocity = adj_max_velocity - 0.1;
 80096be:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <cppLoop+0x148c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7f6 ff58 	bl	8000578 <__aeabi_f2d>
 80096c8:	a307      	add	r3, pc, #28	; (adr r3, 80096e8 <cppLoop+0x1478>)
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	f7f6 fdf3 	bl	80002b8 <__aeabi_dsub>
 80096d2:	4603      	mov	r3, r0
 80096d4:	460c      	mov	r4, r1
 80096d6:	4618      	mov	r0, r3
 80096d8:	4621      	mov	r1, r4
 80096da:	f7f7 fa9d 	bl	8000c18 <__aeabi_d2f>
 80096de:	4602      	mov	r2, r0
 80096e0:	4b06      	ldr	r3, [pc, #24]	; (80096fc <cppLoop+0x148c>)
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	e033      	b.n	800974e <cppLoop+0x14de>
 80096e6:	bf00      	nop
 80096e8:	9999999a 	.word	0x9999999a
 80096ec:	3fb99999 	.word	0x3fb99999
 80096f0:	20000558 	.word	0x20000558
 80096f4:	2000054c 	.word	0x2000054c
 80096f8:	2004526a 	.word	0x2004526a
 80096fc:	200452a8 	.word	0x200452a8
 8009700:	0801a6c8 	.word	0x0801a6c8
 8009704:	200452b0 	.word	0x200452b0
 8009708:	0801a67c 	.word	0x0801a67c
 800970c:	200209d4 	.word	0x200209d4
 8009710:	2000057c 	.word	0x2000057c
 8009714:	0801a688 	.word	0x0801a688
 8009718:	0801a694 	.word	0x0801a694
 800971c:	0801a6a0 	.word	0x0801a6a0
 8009720:	0801a6b0 	.word	0x0801a6b0
 8009724:	2004526e 	.word	0x2004526e
					adj_min_velocity = adj_min_velocity - 0.1;
 8009728:	4bb5      	ldr	r3, [pc, #724]	; (8009a00 <cppLoop+0x1790>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4618      	mov	r0, r3
 800972e:	f7f6 ff23 	bl	8000578 <__aeabi_f2d>
 8009732:	a3b1      	add	r3, pc, #708	; (adr r3, 80099f8 <cppLoop+0x1788>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f7f6 fdbe 	bl	80002b8 <__aeabi_dsub>
 800973c:	4603      	mov	r3, r0
 800973e:	460c      	mov	r4, r1
 8009740:	4618      	mov	r0, r3
 8009742:	4621      	mov	r1, r4
 8009744:	f7f7 fa68 	bl	8000c18 <__aeabi_d2f>
 8009748:	4602      	mov	r2, r0
 800974a:	4bad      	ldr	r3, [pc, #692]	; (8009a00 <cppLoop+0x1790>)
 800974c:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800974e:	2200      	movs	r2, #0
 8009750:	f04f 31ff 	mov.w	r1, #4294967295
 8009754:	48ab      	ldr	r0, [pc, #684]	; (8009a04 <cppLoop+0x1794>)
 8009756:	f7f8 fdb9 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800975a:	f001 bda9 	b.w	800b2b0 <cppLoop+0x3040>
			else if(joy_stick.getValue() == JOY_C){
 800975e:	48aa      	ldr	r0, [pc, #680]	; (8009a08 <cppLoop+0x1798>)
 8009760:	f7f8 fc94 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009764:	4603      	mov	r3, r0
 8009766:	2b02      	cmp	r3, #2
 8009768:	bf0c      	ite	eq
 800976a:	2301      	moveq	r3, #1
 800976c:	2300      	movne	r3, #0
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	f001 859d 	beq.w	800b2b0 <cppLoop+0x3040>
				led.LR(-1, 1);
 8009776:	2201      	movs	r2, #1
 8009778:	f04f 31ff 	mov.w	r1, #4294967295
 800977c:	48a1      	ldr	r0, [pc, #644]	; (8009a04 <cppLoop+0x1794>)
 800977e:	f7f8 fda5 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009782:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009786:	f001 fed7 	bl	800b538 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 800978a:	2300      	movs	r3, #0
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	4b9f      	ldr	r3, [pc, #636]	; (8009a0c <cppLoop+0x179c>)
 8009790:	2201      	movs	r2, #1
 8009792:	499f      	ldr	r1, [pc, #636]	; (8009a10 <cppLoop+0x17a0>)
 8009794:	489f      	ldr	r0, [pc, #636]	; (8009a14 <cppLoop+0x17a4>)
 8009796:	f7f8 f861 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity, OVER_WRITE);
 800979a:	2300      	movs	r3, #0
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	4b98      	ldr	r3, [pc, #608]	; (8009a00 <cppLoop+0x1790>)
 80097a0:	2201      	movs	r2, #1
 80097a2:	499d      	ldr	r1, [pc, #628]	; (8009a18 <cppLoop+0x17a8>)
 80097a4:	489b      	ldr	r0, [pc, #620]	; (8009a14 <cppLoop+0x17a4>)
 80097a6:	f7f8 f859 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity(adj_max_velocity);
 80097aa:	4b98      	ldr	r3, [pc, #608]	; (8009a0c <cppLoop+0x179c>)
 80097ac:	edd3 7a00 	vldr	s15, [r3]
 80097b0:	eeb0 0a67 	vmov.f32	s0, s15
 80097b4:	4899      	ldr	r0, [pc, #612]	; (8009a1c <cppLoop+0x17ac>)
 80097b6:	f7fa fc6e 	bl	8004096 <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 80097ba:	4b91      	ldr	r3, [pc, #580]	; (8009a00 <cppLoop+0x1790>)
 80097bc:	edd3 7a00 	vldr	s15, [r3]
 80097c0:	eeb0 0a67 	vmov.f32	s0, s15
 80097c4:	4895      	ldr	r0, [pc, #596]	; (8009a1c <cppLoop+0x17ac>)
 80097c6:	f7fa fc76 	bl	80040b6 <_ZN9LineTrace14setMinVelocityEf>
				led.LR(-1, 0);
 80097ca:	2200      	movs	r2, #0
 80097cc:	f04f 31ff 	mov.w	r1, #4294967295
 80097d0:	488c      	ldr	r0, [pc, #560]	; (8009a04 <cppLoop+0x1794>)
 80097d2:	f7f8 fd7b 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80097d6:	f001 bd6b 	b.w	800b2b0 <cppLoop+0x3040>

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Third running-----------------------*/
	/*-------------------------------------------------------------------------*/
	case 4:
		led.fullColor('M');
 80097da:	214d      	movs	r1, #77	; 0x4d
 80097dc:	4889      	ldr	r0, [pc, #548]	; (8009a04 <cppLoop+0x1794>)
 80097de:	f7f8 fcb9 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 80097e2:	4889      	ldr	r0, [pc, #548]	; (8009a08 <cppLoop+0x1798>)
 80097e4:	f7f8 fc52 	bl	800208c <_ZN8JoyStick8getValueEv>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	bf0c      	ite	eq
 80097ee:	2301      	moveq	r3, #1
 80097f0:	2300      	movne	r3, #0
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d020      	beq.n	800983a <cppLoop+0x15ca>
			led.LR(-1, 1);
 80097f8:	2201      	movs	r2, #1
 80097fa:	f04f 31ff 	mov.w	r1, #4294967295
 80097fe:	4881      	ldr	r0, [pc, #516]	; (8009a04 <cppLoop+0x1794>)
 8009800:	f7f8 fd64 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009804:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009808:	f001 fe96 	bl	800b538 <HAL_Delay>

			selector_run++;
 800980c:	4b84      	ldr	r3, [pc, #528]	; (8009a20 <cppLoop+0x17b0>)
 800980e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009812:	b29b      	uxth	r3, r3
 8009814:	3301      	adds	r3, #1
 8009816:	b29b      	uxth	r3, r3
 8009818:	b21a      	sxth	r2, r3
 800981a:	4b81      	ldr	r3, [pc, #516]	; (8009a20 <cppLoop+0x17b0>)
 800981c:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 800981e:	4b80      	ldr	r3, [pc, #512]	; (8009a20 <cppLoop+0x17b0>)
 8009820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009824:	2b01      	cmp	r3, #1
 8009826:	dd02      	ble.n	800982e <cppLoop+0x15be>
 8009828:	4b7d      	ldr	r3, [pc, #500]	; (8009a20 <cppLoop+0x17b0>)
 800982a:	2200      	movs	r2, #0
 800982c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800982e:	2200      	movs	r2, #0
 8009830:	f04f 31ff 	mov.w	r1, #4294967295
 8009834:	4873      	ldr	r0, [pc, #460]	; (8009a04 <cppLoop+0x1794>)
 8009836:	f7f8 fd49 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 800983a:	4b79      	ldr	r3, [pc, #484]	; (8009a20 <cppLoop+0x17b0>)
 800983c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 8081 	bne.w	8009948 <cppLoop+0x16d8>
			lcd_clear();
 8009846:	f7f7 fc2b 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800984a:	2100      	movs	r1, #0
 800984c:	2000      	movs	r0, #0
 800984e:	f7f7 fc37 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", adj_max_velocity2);
 8009852:	4b74      	ldr	r3, [pc, #464]	; (8009a24 <cppLoop+0x17b4>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4618      	mov	r0, r3
 8009858:	f7f6 fe8e 	bl	8000578 <__aeabi_f2d>
 800985c:	4603      	mov	r3, r0
 800985e:	460c      	mov	r4, r1
 8009860:	461a      	mov	r2, r3
 8009862:	4623      	mov	r3, r4
 8009864:	4870      	ldr	r0, [pc, #448]	; (8009a28 <cppLoop+0x17b8>)
 8009866:	f7f7 fc55 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800986a:	2101      	movs	r1, #1
 800986c:	2000      	movs	r0, #0
 800986e:	f7f7 fc27 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity2);
 8009872:	4b6e      	ldr	r3, [pc, #440]	; (8009a2c <cppLoop+0x17bc>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4618      	mov	r0, r3
 8009878:	f7f6 fe7e 	bl	8000578 <__aeabi_f2d>
 800987c:	4603      	mov	r3, r0
 800987e:	460c      	mov	r4, r1
 8009880:	461a      	mov	r2, r3
 8009882:	4623      	mov	r3, r4
 8009884:	486a      	ldr	r0, [pc, #424]	; (8009a30 <cppLoop+0x17c0>)
 8009886:	f7f7 fc45 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 800988a:	485f      	ldr	r0, [pc, #380]	; (8009a08 <cppLoop+0x1798>)
 800988c:	f7f8 fbfe 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009890:	4603      	mov	r3, r0
 8009892:	2b02      	cmp	r3, #2
 8009894:	bf0c      	ite	eq
 8009896:	2301      	moveq	r3, #1
 8009898:	2300      	movne	r3, #0
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	f001 8509 	beq.w	800b2b4 <cppLoop+0x3044>
				HAL_Delay(500);
 80098a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80098a6:	f001 fe47 	bl	800b538 <HAL_Delay>

				led.LR(1, -1);
 80098aa:	f04f 32ff 	mov.w	r2, #4294967295
 80098ae:	2101      	movs	r1, #1
 80098b0:	4854      	ldr	r0, [pc, #336]	; (8009a04 <cppLoop+0x1794>)
 80098b2:	f7f8 fd0b 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80098b6:	4b5f      	ldr	r3, [pc, #380]	; (8009a34 <cppLoop+0x17c4>)
 80098b8:	edd3 7a00 	vldr	s15, [r3]
 80098bc:	4b5e      	ldr	r3, [pc, #376]	; (8009a38 <cppLoop+0x17c8>)
 80098be:	ed93 7a00 	vldr	s14, [r3]
 80098c2:	4b5e      	ldr	r3, [pc, #376]	; (8009a3c <cppLoop+0x17cc>)
 80098c4:	edd3 6a00 	vldr	s13, [r3]
 80098c8:	eeb0 1a66 	vmov.f32	s2, s13
 80098cc:	eef0 0a47 	vmov.f32	s1, s14
 80098d0:	eeb0 0a67 	vmov.f32	s0, s15
 80098d4:	4851      	ldr	r0, [pc, #324]	; (8009a1c <cppLoop+0x17ac>)
 80098d6:	f7fa fb33 	bl	8003f40 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(THIRD_RUNNING);
 80098da:	2102      	movs	r1, #2
 80098dc:	484f      	ldr	r0, [pc, #316]	; (8009a1c <cppLoop+0x17ac>)
 80098de:	f7fa fea9 	bl	8004634 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity2);
 80098e2:	4b52      	ldr	r3, [pc, #328]	; (8009a2c <cppLoop+0x17bc>)
 80098e4:	edd3 7a00 	vldr	s15, [r3]
 80098e8:	eeb0 0a67 	vmov.f32	s0, s15
 80098ec:	484b      	ldr	r0, [pc, #300]	; (8009a1c <cppLoop+0x17ac>)
 80098ee:	f7fa fbc2 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 80098f2:	4b4c      	ldr	r3, [pc, #304]	; (8009a24 <cppLoop+0x17b4>)
 80098f4:	edd3 7a00 	vldr	s15, [r3]
 80098f8:	eeb0 0a67 	vmov.f32	s0, s15
 80098fc:	4847      	ldr	r0, [pc, #284]	; (8009a1c <cppLoop+0x17ac>)
 80098fe:	f7fa fbea 	bl	80040d6 <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 8009902:	4b4a      	ldr	r3, [pc, #296]	; (8009a2c <cppLoop+0x17bc>)
 8009904:	edd3 7a00 	vldr	s15, [r3]
 8009908:	eeb0 0a67 	vmov.f32	s0, s15
 800990c:	4843      	ldr	r0, [pc, #268]	; (8009a1c <cppLoop+0x17ac>)
 800990e:	f7fa fbf2 	bl	80040f6 <_ZN9LineTrace15setMinVelocity2Ef>
				line_trace.createVelocityTabele();
 8009912:	4842      	ldr	r0, [pc, #264]	; (8009a1c <cppLoop+0x17ac>)
 8009914:	f7fb f8d6 	bl	8004ac4 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 8009918:	4840      	ldr	r0, [pc, #256]	; (8009a1c <cppLoop+0x17ac>)
 800991a:	f7fa fedb 	bl	80046d4 <_ZN9LineTrace7runningEv>

				logger.stop();
 800991e:	4848      	ldr	r0, [pc, #288]	; (8009a40 <cppLoop+0x17d0>)
 8009920:	f7fb fe1a 	bl	8005558 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8009924:	4a47      	ldr	r2, [pc, #284]	; (8009a44 <cppLoop+0x17d4>)
 8009926:	4948      	ldr	r1, [pc, #288]	; (8009a48 <cppLoop+0x17d8>)
 8009928:	4845      	ldr	r0, [pc, #276]	; (8009a40 <cppLoop+0x17d0>)
 800992a:	f7fb fcae 	bl	800528a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 800992e:	4a47      	ldr	r2, [pc, #284]	; (8009a4c <cppLoop+0x17dc>)
 8009930:	4945      	ldr	r1, [pc, #276]	; (8009a48 <cppLoop+0x17d8>)
 8009932:	4843      	ldr	r0, [pc, #268]	; (8009a40 <cppLoop+0x17d0>)
 8009934:	f7fb fcbd 	bl	80052b2 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009938:	f04f 32ff 	mov.w	r2, #4294967295
 800993c:	2100      	movs	r1, #0
 800993e:	4831      	ldr	r0, [pc, #196]	; (8009a04 <cppLoop+0x1794>)
 8009940:	f7f8 fcc4 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 8009944:	f001 bcb6 	b.w	800b2b4 <cppLoop+0x3044>
			lcd_clear();
 8009948:	f7f7 fbaa 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800994c:	2100      	movs	r1, #0
 800994e:	2000      	movs	r0, #0
 8009950:	f7f7 fbb6 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8009954:	4831      	ldr	r0, [pc, #196]	; (8009a1c <cppLoop+0x17ac>)
 8009956:	f7fa fc4e 	bl	80041f6 <_ZN9LineTrace15getMaxVelocity2Ev>
 800995a:	ee10 3a10 	vmov	r3, s0
 800995e:	4618      	mov	r0, r3
 8009960:	f7f6 fe0a 	bl	8000578 <__aeabi_f2d>
 8009964:	4603      	mov	r3, r0
 8009966:	460c      	mov	r4, r1
 8009968:	461a      	mov	r2, r3
 800996a:	4623      	mov	r3, r4
 800996c:	482e      	ldr	r0, [pc, #184]	; (8009a28 <cppLoop+0x17b8>)
 800996e:	f7f7 fbd1 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009972:	2101      	movs	r1, #1
 8009974:	2000      	movs	r0, #0
 8009976:	f7f7 fba3 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 800997a:	4828      	ldr	r0, [pc, #160]	; (8009a1c <cppLoop+0x17ac>)
 800997c:	f7fa fc4b 	bl	8004216 <_ZN9LineTrace15getMinVelocity2Ev>
 8009980:	ee10 3a10 	vmov	r3, s0
 8009984:	4618      	mov	r0, r3
 8009986:	f7f6 fdf7 	bl	8000578 <__aeabi_f2d>
 800998a:	4603      	mov	r3, r0
 800998c:	460c      	mov	r4, r1
 800998e:	461a      	mov	r2, r3
 8009990:	4623      	mov	r3, r4
 8009992:	482f      	ldr	r0, [pc, #188]	; (8009a50 <cppLoop+0x17e0>)
 8009994:	f7f7 fbbe 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009998:	481b      	ldr	r0, [pc, #108]	; (8009a08 <cppLoop+0x1798>)
 800999a:	f7f8 fb77 	bl	800208c <_ZN8JoyStick8getValueEv>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b08      	cmp	r3, #8
 80099a2:	bf0c      	ite	eq
 80099a4:	2301      	moveq	r3, #1
 80099a6:	2300      	movne	r3, #0
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d054      	beq.n	8009a58 <cppLoop+0x17e8>
				led.LR(-1, 1);
 80099ae:	2201      	movs	r2, #1
 80099b0:	f04f 31ff 	mov.w	r1, #4294967295
 80099b4:	4813      	ldr	r0, [pc, #76]	; (8009a04 <cppLoop+0x1794>)
 80099b6:	f7f8 fc89 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 80099ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099be:	f001 fdbb 	bl	800b538 <HAL_Delay>
				selector_vel++;
 80099c2:	4b24      	ldr	r3, [pc, #144]	; (8009a54 <cppLoop+0x17e4>)
 80099c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	3301      	adds	r3, #1
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	b21a      	sxth	r2, r3
 80099d0:	4b20      	ldr	r3, [pc, #128]	; (8009a54 <cppLoop+0x17e4>)
 80099d2:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 80099d4:	4b1f      	ldr	r3, [pc, #124]	; (8009a54 <cppLoop+0x17e4>)
 80099d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	dd02      	ble.n	80099e4 <cppLoop+0x1774>
 80099de:	4b1d      	ldr	r3, [pc, #116]	; (8009a54 <cppLoop+0x17e4>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 80099e4:	2200      	movs	r2, #0
 80099e6:	f04f 31ff 	mov.w	r1, #4294967295
 80099ea:	4806      	ldr	r0, [pc, #24]	; (8009a04 <cppLoop+0x1794>)
 80099ec:	f7f8 fc6e 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80099f0:	f001 bc60 	b.w	800b2b4 <cppLoop+0x3044>
 80099f4:	f3af 8000 	nop.w
 80099f8:	9999999a 	.word	0x9999999a
 80099fc:	3fb99999 	.word	0x3fb99999
 8009a00:	200452b0 	.word	0x200452b0
 8009a04:	20000558 	.word	0x20000558
 8009a08:	2000054c 	.word	0x2000054c
 8009a0c:	200452a8 	.word	0x200452a8
 8009a10:	0801a6d4 	.word	0x0801a6d4
 8009a14:	0801a630 	.word	0x0801a630
 8009a18:	0801a6e0 	.word	0x0801a6e0
 8009a1c:	200209d4 	.word	0x200209d4
 8009a20:	2004526a 	.word	0x2004526a
 8009a24:	200452b8 	.word	0x200452b8
 8009a28:	0801a6ec 	.word	0x0801a6ec
 8009a2c:	200452c0 	.word	0x200452c0
 8009a30:	0801a67c 	.word	0x0801a67c
 8009a34:	20045270 	.word	0x20045270
 8009a38:	20045278 	.word	0x20045278
 8009a3c:	20045280 	.word	0x20045280
 8009a40:	2000057c 	.word	0x2000057c
 8009a44:	0801a688 	.word	0x0801a688
 8009a48:	0801a694 	.word	0x0801a694
 8009a4c:	0801a6a0 	.word	0x0801a6a0
 8009a50:	0801a6b0 	.word	0x0801a6b0
 8009a54:	2004526e 	.word	0x2004526e
			else if(joy_stick.getValue() == JOY_R){
 8009a58:	4869      	ldr	r0, [pc, #420]	; (8009c00 <cppLoop+0x1990>)
 8009a5a:	f7f8 fb17 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b10      	cmp	r3, #16
 8009a62:	bf0c      	ite	eq
 8009a64:	2301      	moveq	r3, #1
 8009a66:	2300      	movne	r3, #0
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d03c      	beq.n	8009ae8 <cppLoop+0x1878>
				led.LR(-1, 1);
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f04f 31ff 	mov.w	r1, #4294967295
 8009a74:	4863      	ldr	r0, [pc, #396]	; (8009c04 <cppLoop+0x1994>)
 8009a76:	f7f8 fc29 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009a7a:	2064      	movs	r0, #100	; 0x64
 8009a7c:	f001 fd5c 	bl	800b538 <HAL_Delay>
				if(selector_vel == 0)
 8009a80:	4b61      	ldr	r3, [pc, #388]	; (8009c08 <cppLoop+0x1998>)
 8009a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d113      	bne.n	8009ab2 <cppLoop+0x1842>
					adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8009a8a:	4b60      	ldr	r3, [pc, #384]	; (8009c0c <cppLoop+0x199c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7f6 fd72 	bl	8000578 <__aeabi_f2d>
 8009a94:	a358      	add	r3, pc, #352	; (adr r3, 8009bf8 <cppLoop+0x1988>)
 8009a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9a:	f7f6 fc0f 	bl	80002bc <__adddf3>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	f7f7 f8b7 	bl	8000c18 <__aeabi_d2f>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	4b57      	ldr	r3, [pc, #348]	; (8009c0c <cppLoop+0x199c>)
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	e012      	b.n	8009ad8 <cppLoop+0x1868>
					adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8009ab2:	4b57      	ldr	r3, [pc, #348]	; (8009c10 <cppLoop+0x19a0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7f6 fd5e 	bl	8000578 <__aeabi_f2d>
 8009abc:	a34e      	add	r3, pc, #312	; (adr r3, 8009bf8 <cppLoop+0x1988>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f7f6 fbfb 	bl	80002bc <__adddf3>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	460c      	mov	r4, r1
 8009aca:	4618      	mov	r0, r3
 8009acc:	4621      	mov	r1, r4
 8009ace:	f7f7 f8a3 	bl	8000c18 <__aeabi_d2f>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	4b4e      	ldr	r3, [pc, #312]	; (8009c10 <cppLoop+0x19a0>)
 8009ad6:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f04f 31ff 	mov.w	r1, #4294967295
 8009ade:	4849      	ldr	r0, [pc, #292]	; (8009c04 <cppLoop+0x1994>)
 8009ae0:	f7f8 fbf4 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009ae4:	f001 bbe6 	b.w	800b2b4 <cppLoop+0x3044>
			else if(joy_stick.getValue() == JOY_L){
 8009ae8:	4845      	ldr	r0, [pc, #276]	; (8009c00 <cppLoop+0x1990>)
 8009aea:	f7f8 facf 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	bf0c      	ite	eq
 8009af4:	2301      	moveq	r3, #1
 8009af6:	2300      	movne	r3, #0
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d03c      	beq.n	8009b78 <cppLoop+0x1908>
				led.LR(-1, 1);
 8009afe:	2201      	movs	r2, #1
 8009b00:	f04f 31ff 	mov.w	r1, #4294967295
 8009b04:	483f      	ldr	r0, [pc, #252]	; (8009c04 <cppLoop+0x1994>)
 8009b06:	f7f8 fbe1 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009b0a:	2064      	movs	r0, #100	; 0x64
 8009b0c:	f001 fd14 	bl	800b538 <HAL_Delay>
				if(selector_vel == 0)
 8009b10:	4b3d      	ldr	r3, [pc, #244]	; (8009c08 <cppLoop+0x1998>)
 8009b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d113      	bne.n	8009b42 <cppLoop+0x18d2>
					adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8009b1a:	4b3c      	ldr	r3, [pc, #240]	; (8009c0c <cppLoop+0x199c>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7f6 fd2a 	bl	8000578 <__aeabi_f2d>
 8009b24:	a334      	add	r3, pc, #208	; (adr r3, 8009bf8 <cppLoop+0x1988>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	f7f6 fbc5 	bl	80002b8 <__aeabi_dsub>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	460c      	mov	r4, r1
 8009b32:	4618      	mov	r0, r3
 8009b34:	4621      	mov	r1, r4
 8009b36:	f7f7 f86f 	bl	8000c18 <__aeabi_d2f>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4b33      	ldr	r3, [pc, #204]	; (8009c0c <cppLoop+0x199c>)
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	e012      	b.n	8009b68 <cppLoop+0x18f8>
					adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8009b42:	4b33      	ldr	r3, [pc, #204]	; (8009c10 <cppLoop+0x19a0>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7f6 fd16 	bl	8000578 <__aeabi_f2d>
 8009b4c:	a32a      	add	r3, pc, #168	; (adr r3, 8009bf8 <cppLoop+0x1988>)
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	f7f6 fbb1 	bl	80002b8 <__aeabi_dsub>
 8009b56:	4603      	mov	r3, r0
 8009b58:	460c      	mov	r4, r1
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	f7f7 f85b 	bl	8000c18 <__aeabi_d2f>
 8009b62:	4602      	mov	r2, r0
 8009b64:	4b2a      	ldr	r3, [pc, #168]	; (8009c10 <cppLoop+0x19a0>)
 8009b66:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8009b6e:	4825      	ldr	r0, [pc, #148]	; (8009c04 <cppLoop+0x1994>)
 8009b70:	f7f8 fbac 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009b74:	f001 bb9e 	b.w	800b2b4 <cppLoop+0x3044>
			else if(joy_stick.getValue() == JOY_C){
 8009b78:	4821      	ldr	r0, [pc, #132]	; (8009c00 <cppLoop+0x1990>)
 8009b7a:	f7f8 fa87 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	bf0c      	ite	eq
 8009b84:	2301      	moveq	r3, #1
 8009b86:	2300      	movne	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f001 8392 	beq.w	800b2b4 <cppLoop+0x3044>
				led.LR(-1, 1);
 8009b90:	2201      	movs	r2, #1
 8009b92:	f04f 31ff 	mov.w	r1, #4294967295
 8009b96:	481b      	ldr	r0, [pc, #108]	; (8009c04 <cppLoop+0x1994>)
 8009b98:	f7f8 fb98 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009b9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009ba0:	f001 fcca 	bl	800b538 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	4b18      	ldr	r3, [pc, #96]	; (8009c0c <cppLoop+0x199c>)
 8009baa:	2201      	movs	r2, #1
 8009bac:	4919      	ldr	r1, [pc, #100]	; (8009c14 <cppLoop+0x19a4>)
 8009bae:	481a      	ldr	r0, [pc, #104]	; (8009c18 <cppLoop+0x19a8>)
 8009bb0:	f7f7 fe54 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL3.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <cppLoop+0x19a0>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	4917      	ldr	r1, [pc, #92]	; (8009c1c <cppLoop+0x19ac>)
 8009bbe:	4816      	ldr	r0, [pc, #88]	; (8009c18 <cppLoop+0x19a8>)
 8009bc0:	f7f7 fe4c 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 8009bc4:	4b11      	ldr	r3, [pc, #68]	; (8009c0c <cppLoop+0x199c>)
 8009bc6:	edd3 7a00 	vldr	s15, [r3]
 8009bca:	eeb0 0a67 	vmov.f32	s0, s15
 8009bce:	4814      	ldr	r0, [pc, #80]	; (8009c20 <cppLoop+0x19b0>)
 8009bd0:	f7fa fa81 	bl	80040d6 <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 8009bd4:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <cppLoop+0x19a0>)
 8009bd6:	edd3 7a00 	vldr	s15, [r3]
 8009bda:	eeb0 0a67 	vmov.f32	s0, s15
 8009bde:	4810      	ldr	r0, [pc, #64]	; (8009c20 <cppLoop+0x19b0>)
 8009be0:	f7fa fa89 	bl	80040f6 <_ZN9LineTrace15setMinVelocity2Ef>
				led.LR(-1, 0);
 8009be4:	2200      	movs	r2, #0
 8009be6:	f04f 31ff 	mov.w	r1, #4294967295
 8009bea:	4806      	ldr	r0, [pc, #24]	; (8009c04 <cppLoop+0x1994>)
 8009bec:	f7f8 fb6e 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009bf0:	f001 bb60 	b.w	800b2b4 <cppLoop+0x3044>
 8009bf4:	f3af 8000 	nop.w
 8009bf8:	9999999a 	.word	0x9999999a
 8009bfc:	3fb99999 	.word	0x3fb99999
 8009c00:	2000054c 	.word	0x2000054c
 8009c04:	20000558 	.word	0x20000558
 8009c08:	2004526e 	.word	0x2004526e
 8009c0c:	200452b8 	.word	0x200452b8
 8009c10:	200452c0 	.word	0x200452c0
 8009c14:	0801a6f8 	.word	0x0801a6f8
 8009c18:	0801a630 	.word	0x0801a630
 8009c1c:	0801a704 	.word	0x0801a704
 8009c20:	200209d4 	.word	0x200209d4

	case 5:
		led.fullColor('B');
 8009c24:	2142      	movs	r1, #66	; 0x42
 8009c26:	48ac      	ldr	r0, [pc, #688]	; (8009ed8 <cppLoop+0x1c68>)
 8009c28:	f7f8 fa94 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8009c2c:	48ab      	ldr	r0, [pc, #684]	; (8009edc <cppLoop+0x1c6c>)
 8009c2e:	f7f8 fa2d 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b04      	cmp	r3, #4
 8009c36:	bf0c      	ite	eq
 8009c38:	2301      	moveq	r3, #1
 8009c3a:	2300      	movne	r3, #0
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d020      	beq.n	8009c84 <cppLoop+0x1a14>
			led.LR(-1, 1);
 8009c42:	2201      	movs	r2, #1
 8009c44:	f04f 31ff 	mov.w	r1, #4294967295
 8009c48:	48a3      	ldr	r0, [pc, #652]	; (8009ed8 <cppLoop+0x1c68>)
 8009c4a:	f7f8 fb3f 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009c4e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009c52:	f001 fc71 	bl	800b538 <HAL_Delay>

			selector_run++;
 8009c56:	4ba2      	ldr	r3, [pc, #648]	; (8009ee0 <cppLoop+0x1c70>)
 8009c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	3301      	adds	r3, #1
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	b21a      	sxth	r2, r3
 8009c64:	4b9e      	ldr	r3, [pc, #632]	; (8009ee0 <cppLoop+0x1c70>)
 8009c66:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009c68:	4b9d      	ldr	r3, [pc, #628]	; (8009ee0 <cppLoop+0x1c70>)
 8009c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	dd02      	ble.n	8009c78 <cppLoop+0x1a08>
 8009c72:	4b9b      	ldr	r3, [pc, #620]	; (8009ee0 <cppLoop+0x1c70>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8009c7e:	4896      	ldr	r0, [pc, #600]	; (8009ed8 <cppLoop+0x1c68>)
 8009c80:	f7f8 fb24 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009c84:	4b96      	ldr	r3, [pc, #600]	; (8009ee0 <cppLoop+0x1c70>)
 8009c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f040 8081 	bne.w	8009d92 <cppLoop+0x1b22>
			lcd_clear();
 8009c90:	f7f7 fa06 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009c94:	2100      	movs	r1, #0
 8009c96:	2000      	movs	r0, #0
 8009c98:	f7f7 fa12 	bl	80010c0 <lcd_locate>
			lcd_printf("4:   %3.1f", adj_max_velocity3);
 8009c9c:	4b91      	ldr	r3, [pc, #580]	; (8009ee4 <cppLoop+0x1c74>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7f6 fc69 	bl	8000578 <__aeabi_f2d>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	460c      	mov	r4, r1
 8009caa:	461a      	mov	r2, r3
 8009cac:	4623      	mov	r3, r4
 8009cae:	488e      	ldr	r0, [pc, #568]	; (8009ee8 <cppLoop+0x1c78>)
 8009cb0:	f7f7 fa30 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f7f7 fa02 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity3);
 8009cbc:	4b8b      	ldr	r3, [pc, #556]	; (8009eec <cppLoop+0x1c7c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7f6 fc59 	bl	8000578 <__aeabi_f2d>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	460c      	mov	r4, r1
 8009cca:	461a      	mov	r2, r3
 8009ccc:	4623      	mov	r3, r4
 8009cce:	4888      	ldr	r0, [pc, #544]	; (8009ef0 <cppLoop+0x1c80>)
 8009cd0:	f7f7 fa20 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8009cd4:	4881      	ldr	r0, [pc, #516]	; (8009edc <cppLoop+0x1c6c>)
 8009cd6:	f7f8 f9d9 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	bf0c      	ite	eq
 8009ce0:	2301      	moveq	r3, #1
 8009ce2:	2300      	movne	r3, #0
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f001 82e6 	beq.w	800b2b8 <cppLoop+0x3048>
				HAL_Delay(500);
 8009cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cf0:	f001 fc22 	bl	800b538 <HAL_Delay>

				led.LR(1, -1);
 8009cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf8:	2101      	movs	r1, #1
 8009cfa:	4877      	ldr	r0, [pc, #476]	; (8009ed8 <cppLoop+0x1c68>)
 8009cfc:	f7f8 fae6 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009d00:	4b7c      	ldr	r3, [pc, #496]	; (8009ef4 <cppLoop+0x1c84>)
 8009d02:	edd3 7a00 	vldr	s15, [r3]
 8009d06:	4b7c      	ldr	r3, [pc, #496]	; (8009ef8 <cppLoop+0x1c88>)
 8009d08:	ed93 7a00 	vldr	s14, [r3]
 8009d0c:	4b7b      	ldr	r3, [pc, #492]	; (8009efc <cppLoop+0x1c8c>)
 8009d0e:	edd3 6a00 	vldr	s13, [r3]
 8009d12:	eeb0 1a66 	vmov.f32	s2, s13
 8009d16:	eef0 0a47 	vmov.f32	s1, s14
 8009d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8009d1e:	4878      	ldr	r0, [pc, #480]	; (8009f00 <cppLoop+0x1c90>)
 8009d20:	f7fa f90e 	bl	8003f40 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(FOURTH_RUNNING);
 8009d24:	2103      	movs	r1, #3
 8009d26:	4876      	ldr	r0, [pc, #472]	; (8009f00 <cppLoop+0x1c90>)
 8009d28:	f7fa fc84 	bl	8004634 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity3);
 8009d2c:	4b6f      	ldr	r3, [pc, #444]	; (8009eec <cppLoop+0x1c7c>)
 8009d2e:	edd3 7a00 	vldr	s15, [r3]
 8009d32:	eeb0 0a67 	vmov.f32	s0, s15
 8009d36:	4872      	ldr	r0, [pc, #456]	; (8009f00 <cppLoop+0x1c90>)
 8009d38:	f7fa f99d 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity3(adj_max_velocity3);
 8009d3c:	4b69      	ldr	r3, [pc, #420]	; (8009ee4 <cppLoop+0x1c74>)
 8009d3e:	edd3 7a00 	vldr	s15, [r3]
 8009d42:	eeb0 0a67 	vmov.f32	s0, s15
 8009d46:	486e      	ldr	r0, [pc, #440]	; (8009f00 <cppLoop+0x1c90>)
 8009d48:	f7fa f9e5 	bl	8004116 <_ZN9LineTrace15setMaxVelocity3Ef>
				line_trace.setMinVelocity3(adj_min_velocity3);
 8009d4c:	4b67      	ldr	r3, [pc, #412]	; (8009eec <cppLoop+0x1c7c>)
 8009d4e:	edd3 7a00 	vldr	s15, [r3]
 8009d52:	eeb0 0a67 	vmov.f32	s0, s15
 8009d56:	486a      	ldr	r0, [pc, #424]	; (8009f00 <cppLoop+0x1c90>)
 8009d58:	f7fa f9ed 	bl	8004136 <_ZN9LineTrace15setMinVelocity3Ef>
				line_trace.createVelocityTabele();
 8009d5c:	4868      	ldr	r0, [pc, #416]	; (8009f00 <cppLoop+0x1c90>)
 8009d5e:	f7fa feb1 	bl	8004ac4 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 8009d62:	4867      	ldr	r0, [pc, #412]	; (8009f00 <cppLoop+0x1c90>)
 8009d64:	f7fa fcb6 	bl	80046d4 <_ZN9LineTrace7runningEv>

				logger.stop();
 8009d68:	4866      	ldr	r0, [pc, #408]	; (8009f04 <cppLoop+0x1c94>)
 8009d6a:	f7fb fbf5 	bl	8005558 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8009d6e:	4a66      	ldr	r2, [pc, #408]	; (8009f08 <cppLoop+0x1c98>)
 8009d70:	4966      	ldr	r1, [pc, #408]	; (8009f0c <cppLoop+0x1c9c>)
 8009d72:	4864      	ldr	r0, [pc, #400]	; (8009f04 <cppLoop+0x1c94>)
 8009d74:	f7fb fa89 	bl	800528a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009d78:	4a65      	ldr	r2, [pc, #404]	; (8009f10 <cppLoop+0x1ca0>)
 8009d7a:	4964      	ldr	r1, [pc, #400]	; (8009f0c <cppLoop+0x1c9c>)
 8009d7c:	4861      	ldr	r0, [pc, #388]	; (8009f04 <cppLoop+0x1c94>)
 8009d7e:	f7fb fa98 	bl	80052b2 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009d82:	f04f 32ff 	mov.w	r2, #4294967295
 8009d86:	2100      	movs	r1, #0
 8009d88:	4853      	ldr	r0, [pc, #332]	; (8009ed8 <cppLoop+0x1c68>)
 8009d8a:	f7f8 fa9f 	bl	80022cc <_ZN3LED2LREaa>
				led.LR(-1, 0);
			}

		}

		break;
 8009d8e:	f001 ba93 	b.w	800b2b8 <cppLoop+0x3048>
			lcd_clear();
 8009d92:	f7f7 f985 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009d96:	2100      	movs	r1, #0
 8009d98:	2000      	movs	r0, #0
 8009d9a:	f7f7 f991 	bl	80010c0 <lcd_locate>
			lcd_printf("4:   %3.1f", line_trace.getMaxVelocity3());
 8009d9e:	4858      	ldr	r0, [pc, #352]	; (8009f00 <cppLoop+0x1c90>)
 8009da0:	f7fa fa49 	bl	8004236 <_ZN9LineTrace15getMaxVelocity3Ev>
 8009da4:	ee10 3a10 	vmov	r3, s0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7f6 fbe5 	bl	8000578 <__aeabi_f2d>
 8009dae:	4603      	mov	r3, r0
 8009db0:	460c      	mov	r4, r1
 8009db2:	461a      	mov	r2, r3
 8009db4:	4623      	mov	r3, r4
 8009db6:	484c      	ldr	r0, [pc, #304]	; (8009ee8 <cppLoop+0x1c78>)
 8009db8:	f7f7 f9ac 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	f7f7 f97e 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity3());
 8009dc4:	484e      	ldr	r0, [pc, #312]	; (8009f00 <cppLoop+0x1c90>)
 8009dc6:	f7fa fa46 	bl	8004256 <_ZN9LineTrace15getMinVelocity3Ev>
 8009dca:	ee10 3a10 	vmov	r3, s0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7f6 fbd2 	bl	8000578 <__aeabi_f2d>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4623      	mov	r3, r4
 8009ddc:	484d      	ldr	r0, [pc, #308]	; (8009f14 <cppLoop+0x1ca4>)
 8009dde:	f7f7 f999 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009de2:	483e      	ldr	r0, [pc, #248]	; (8009edc <cppLoop+0x1c6c>)
 8009de4:	f7f8 f952 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b08      	cmp	r3, #8
 8009dec:	bf0c      	ite	eq
 8009dee:	2301      	moveq	r3, #1
 8009df0:	2300      	movne	r3, #0
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d022      	beq.n	8009e3e <cppLoop+0x1bce>
				led.LR(-1, 1);
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8009dfe:	4836      	ldr	r0, [pc, #216]	; (8009ed8 <cppLoop+0x1c68>)
 8009e00:	f7f8 fa64 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009e04:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009e08:	f001 fb96 	bl	800b538 <HAL_Delay>
				selector_vel++;
 8009e0c:	4b42      	ldr	r3, [pc, #264]	; (8009f18 <cppLoop+0x1ca8>)
 8009e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	3301      	adds	r3, #1
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	b21a      	sxth	r2, r3
 8009e1a:	4b3f      	ldr	r3, [pc, #252]	; (8009f18 <cppLoop+0x1ca8>)
 8009e1c:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 8009e1e:	4b3e      	ldr	r3, [pc, #248]	; (8009f18 <cppLoop+0x1ca8>)
 8009e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	dd02      	ble.n	8009e2e <cppLoop+0x1bbe>
 8009e28:	4b3b      	ldr	r3, [pc, #236]	; (8009f18 <cppLoop+0x1ca8>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f04f 31ff 	mov.w	r1, #4294967295
 8009e34:	4828      	ldr	r0, [pc, #160]	; (8009ed8 <cppLoop+0x1c68>)
 8009e36:	f7f8 fa49 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009e3a:	f001 ba3d 	b.w	800b2b8 <cppLoop+0x3048>
			else if(joy_stick.getValue() == JOY_R){
 8009e3e:	4827      	ldr	r0, [pc, #156]	; (8009edc <cppLoop+0x1c6c>)
 8009e40:	f7f8 f924 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b10      	cmp	r3, #16
 8009e48:	bf0c      	ite	eq
 8009e4a:	2301      	moveq	r3, #1
 8009e4c:	2300      	movne	r3, #0
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d063      	beq.n	8009f1c <cppLoop+0x1cac>
				led.LR(-1, 1);
 8009e54:	2201      	movs	r2, #1
 8009e56:	f04f 31ff 	mov.w	r1, #4294967295
 8009e5a:	481f      	ldr	r0, [pc, #124]	; (8009ed8 <cppLoop+0x1c68>)
 8009e5c:	f7f8 fa36 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009e60:	2064      	movs	r0, #100	; 0x64
 8009e62:	f001 fb69 	bl	800b538 <HAL_Delay>
				if(selector_vel == 0)
 8009e66:	4b2c      	ldr	r3, [pc, #176]	; (8009f18 <cppLoop+0x1ca8>)
 8009e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d113      	bne.n	8009e98 <cppLoop+0x1c28>
					adj_max_velocity3 = adj_max_velocity3 + 0.1;
 8009e70:	4b1c      	ldr	r3, [pc, #112]	; (8009ee4 <cppLoop+0x1c74>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7f6 fb7f 	bl	8000578 <__aeabi_f2d>
 8009e7a:	a315      	add	r3, pc, #84	; (adr r3, 8009ed0 <cppLoop+0x1c60>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 fa1c 	bl	80002bc <__adddf3>
 8009e84:	4603      	mov	r3, r0
 8009e86:	460c      	mov	r4, r1
 8009e88:	4618      	mov	r0, r3
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	f7f6 fec4 	bl	8000c18 <__aeabi_d2f>
 8009e90:	4602      	mov	r2, r0
 8009e92:	4b14      	ldr	r3, [pc, #80]	; (8009ee4 <cppLoop+0x1c74>)
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	e012      	b.n	8009ebe <cppLoop+0x1c4e>
					adj_min_velocity3 = adj_min_velocity3 + 0.1;
 8009e98:	4b14      	ldr	r3, [pc, #80]	; (8009eec <cppLoop+0x1c7c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7f6 fb6b 	bl	8000578 <__aeabi_f2d>
 8009ea2:	a30b      	add	r3, pc, #44	; (adr r3, 8009ed0 <cppLoop+0x1c60>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f7f6 fa08 	bl	80002bc <__adddf3>
 8009eac:	4603      	mov	r3, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	f7f6 feb0 	bl	8000c18 <__aeabi_d2f>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	4b0c      	ldr	r3, [pc, #48]	; (8009eec <cppLoop+0x1c7c>)
 8009ebc:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ec4:	4804      	ldr	r0, [pc, #16]	; (8009ed8 <cppLoop+0x1c68>)
 8009ec6:	f7f8 fa01 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009eca:	f001 b9f5 	b.w	800b2b8 <cppLoop+0x3048>
 8009ece:	bf00      	nop
 8009ed0:	9999999a 	.word	0x9999999a
 8009ed4:	3fb99999 	.word	0x3fb99999
 8009ed8:	20000558 	.word	0x20000558
 8009edc:	2000054c 	.word	0x2000054c
 8009ee0:	2004526a 	.word	0x2004526a
 8009ee4:	200452c8 	.word	0x200452c8
 8009ee8:	0801a710 	.word	0x0801a710
 8009eec:	200452d0 	.word	0x200452d0
 8009ef0:	0801a67c 	.word	0x0801a67c
 8009ef4:	20045270 	.word	0x20045270
 8009ef8:	20045278 	.word	0x20045278
 8009efc:	20045280 	.word	0x20045280
 8009f00:	200209d4 	.word	0x200209d4
 8009f04:	2000057c 	.word	0x2000057c
 8009f08:	0801a688 	.word	0x0801a688
 8009f0c:	0801a694 	.word	0x0801a694
 8009f10:	0801a6a0 	.word	0x0801a6a0
 8009f14:	0801a6b0 	.word	0x0801a6b0
 8009f18:	2004526e 	.word	0x2004526e
			else if(joy_stick.getValue() == JOY_L){
 8009f1c:	48a0      	ldr	r0, [pc, #640]	; (800a1a0 <cppLoop+0x1f30>)
 8009f1e:	f7f8 f8b5 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	bf0c      	ite	eq
 8009f28:	2301      	moveq	r3, #1
 8009f2a:	2300      	movne	r3, #0
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d03c      	beq.n	8009fac <cppLoop+0x1d3c>
				led.LR(-1, 1);
 8009f32:	2201      	movs	r2, #1
 8009f34:	f04f 31ff 	mov.w	r1, #4294967295
 8009f38:	489a      	ldr	r0, [pc, #616]	; (800a1a4 <cppLoop+0x1f34>)
 8009f3a:	f7f8 f9c7 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009f3e:	2064      	movs	r0, #100	; 0x64
 8009f40:	f001 fafa 	bl	800b538 <HAL_Delay>
				if(selector_vel == 0)
 8009f44:	4b98      	ldr	r3, [pc, #608]	; (800a1a8 <cppLoop+0x1f38>)
 8009f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d113      	bne.n	8009f76 <cppLoop+0x1d06>
					adj_max_velocity3 = adj_max_velocity3 - 0.1;
 8009f4e:	4b97      	ldr	r3, [pc, #604]	; (800a1ac <cppLoop+0x1f3c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7f6 fb10 	bl	8000578 <__aeabi_f2d>
 8009f58:	a38f      	add	r3, pc, #572	; (adr r3, 800a198 <cppLoop+0x1f28>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	f7f6 f9ab 	bl	80002b8 <__aeabi_dsub>
 8009f62:	4603      	mov	r3, r0
 8009f64:	460c      	mov	r4, r1
 8009f66:	4618      	mov	r0, r3
 8009f68:	4621      	mov	r1, r4
 8009f6a:	f7f6 fe55 	bl	8000c18 <__aeabi_d2f>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	4b8e      	ldr	r3, [pc, #568]	; (800a1ac <cppLoop+0x1f3c>)
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	e012      	b.n	8009f9c <cppLoop+0x1d2c>
					adj_min_velocity3 = adj_min_velocity3 - 0.1;
 8009f76:	4b8e      	ldr	r3, [pc, #568]	; (800a1b0 <cppLoop+0x1f40>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7f6 fafc 	bl	8000578 <__aeabi_f2d>
 8009f80:	a385      	add	r3, pc, #532	; (adr r3, 800a198 <cppLoop+0x1f28>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 f997 	bl	80002b8 <__aeabi_dsub>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	4618      	mov	r0, r3
 8009f90:	4621      	mov	r1, r4
 8009f92:	f7f6 fe41 	bl	8000c18 <__aeabi_d2f>
 8009f96:	4602      	mov	r2, r0
 8009f98:	4b85      	ldr	r3, [pc, #532]	; (800a1b0 <cppLoop+0x1f40>)
 8009f9a:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8009fa2:	4880      	ldr	r0, [pc, #512]	; (800a1a4 <cppLoop+0x1f34>)
 8009fa4:	f7f8 f992 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009fa8:	f001 b986 	b.w	800b2b8 <cppLoop+0x3048>
			else if(joy_stick.getValue() == JOY_C){
 8009fac:	487c      	ldr	r0, [pc, #496]	; (800a1a0 <cppLoop+0x1f30>)
 8009fae:	f7f8 f86d 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	bf0c      	ite	eq
 8009fb8:	2301      	moveq	r3, #1
 8009fba:	2300      	movne	r3, #0
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f001 817a 	beq.w	800b2b8 <cppLoop+0x3048>
				led.LR(-1, 1);
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8009fca:	4876      	ldr	r0, [pc, #472]	; (800a1a4 <cppLoop+0x1f34>)
 8009fcc:	f7f8 f97e 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009fd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009fd4:	f001 fab0 	bl	800b538 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL4.TXT", 1, &adj_max_velocity3, OVER_WRITE);
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	4b73      	ldr	r3, [pc, #460]	; (800a1ac <cppLoop+0x1f3c>)
 8009fde:	2201      	movs	r2, #1
 8009fe0:	4974      	ldr	r1, [pc, #464]	; (800a1b4 <cppLoop+0x1f44>)
 8009fe2:	4875      	ldr	r0, [pc, #468]	; (800a1b8 <cppLoop+0x1f48>)
 8009fe4:	f7f7 fc3a 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL4.TXT", 1, &adj_min_velocity3, OVER_WRITE);
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	4b70      	ldr	r3, [pc, #448]	; (800a1b0 <cppLoop+0x1f40>)
 8009fee:	2201      	movs	r2, #1
 8009ff0:	4972      	ldr	r1, [pc, #456]	; (800a1bc <cppLoop+0x1f4c>)
 8009ff2:	4871      	ldr	r0, [pc, #452]	; (800a1b8 <cppLoop+0x1f48>)
 8009ff4:	f7f7 fc32 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity3(adj_max_velocity3);
 8009ff8:	4b6c      	ldr	r3, [pc, #432]	; (800a1ac <cppLoop+0x1f3c>)
 8009ffa:	edd3 7a00 	vldr	s15, [r3]
 8009ffe:	eeb0 0a67 	vmov.f32	s0, s15
 800a002:	486f      	ldr	r0, [pc, #444]	; (800a1c0 <cppLoop+0x1f50>)
 800a004:	f7fa f887 	bl	8004116 <_ZN9LineTrace15setMaxVelocity3Ef>
				line_trace.setMinVelocity3(adj_min_velocity3);
 800a008:	4b69      	ldr	r3, [pc, #420]	; (800a1b0 <cppLoop+0x1f40>)
 800a00a:	edd3 7a00 	vldr	s15, [r3]
 800a00e:	eeb0 0a67 	vmov.f32	s0, s15
 800a012:	486b      	ldr	r0, [pc, #428]	; (800a1c0 <cppLoop+0x1f50>)
 800a014:	f7fa f88f 	bl	8004136 <_ZN9LineTrace15setMinVelocity3Ef>
				led.LR(-1, 0);
 800a018:	2200      	movs	r2, #0
 800a01a:	f04f 31ff 	mov.w	r1, #4294967295
 800a01e:	4861      	ldr	r0, [pc, #388]	; (800a1a4 <cppLoop+0x1f34>)
 800a020:	f7f8 f954 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a024:	f001 b948 	b.w	800b2b8 <cppLoop+0x3048>

	case 6:
		led.fullColor('R');
 800a028:	2152      	movs	r1, #82	; 0x52
 800a02a:	485e      	ldr	r0, [pc, #376]	; (800a1a4 <cppLoop+0x1f34>)
 800a02c:	f7f8 f892 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 800a030:	485b      	ldr	r0, [pc, #364]	; (800a1a0 <cppLoop+0x1f30>)
 800a032:	f7f8 f82b 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a036:	4603      	mov	r3, r0
 800a038:	2b04      	cmp	r3, #4
 800a03a:	bf0c      	ite	eq
 800a03c:	2301      	moveq	r3, #1
 800a03e:	2300      	movne	r3, #0
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d020      	beq.n	800a088 <cppLoop+0x1e18>
			led.LR(-1, 1);
 800a046:	2201      	movs	r2, #1
 800a048:	f04f 31ff 	mov.w	r1, #4294967295
 800a04c:	4855      	ldr	r0, [pc, #340]	; (800a1a4 <cppLoop+0x1f34>)
 800a04e:	f7f8 f93d 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a052:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a056:	f001 fa6f 	bl	800b538 <HAL_Delay>

			selector_run++;
 800a05a:	4b5a      	ldr	r3, [pc, #360]	; (800a1c4 <cppLoop+0x1f54>)
 800a05c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a060:	b29b      	uxth	r3, r3
 800a062:	3301      	adds	r3, #1
 800a064:	b29b      	uxth	r3, r3
 800a066:	b21a      	sxth	r2, r3
 800a068:	4b56      	ldr	r3, [pc, #344]	; (800a1c4 <cppLoop+0x1f54>)
 800a06a:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 800a06c:	4b55      	ldr	r3, [pc, #340]	; (800a1c4 <cppLoop+0x1f54>)
 800a06e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a072:	2b01      	cmp	r3, #1
 800a074:	dd02      	ble.n	800a07c <cppLoop+0x1e0c>
 800a076:	4b53      	ldr	r3, [pc, #332]	; (800a1c4 <cppLoop+0x1f54>)
 800a078:	2200      	movs	r2, #0
 800a07a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a07c:	2200      	movs	r2, #0
 800a07e:	f04f 31ff 	mov.w	r1, #4294967295
 800a082:	4848      	ldr	r0, [pc, #288]	; (800a1a4 <cppLoop+0x1f34>)
 800a084:	f7f8 f922 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 800a088:	4b4e      	ldr	r3, [pc, #312]	; (800a1c4 <cppLoop+0x1f54>)
 800a08a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f040 80b0 	bne.w	800a1f4 <cppLoop+0x1f84>
			lcd_clear();
 800a094:	f7f7 f804 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800a098:	2100      	movs	r1, #0
 800a09a:	2000      	movs	r0, #0
 800a09c:	f7f7 f810 	bl	80010c0 <lcd_locate>
			lcd_printf("5:   %3.1f", adj_max_velocity4);
 800a0a0:	4b49      	ldr	r3, [pc, #292]	; (800a1c8 <cppLoop+0x1f58>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7f6 fa67 	bl	8000578 <__aeabi_f2d>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	4623      	mov	r3, r4
 800a0b2:	4846      	ldr	r0, [pc, #280]	; (800a1cc <cppLoop+0x1f5c>)
 800a0b4:	f7f7 f82e 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f7f7 f800 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity4);
 800a0c0:	4b43      	ldr	r3, [pc, #268]	; (800a1d0 <cppLoop+0x1f60>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7f6 fa57 	bl	8000578 <__aeabi_f2d>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	4623      	mov	r3, r4
 800a0d2:	4840      	ldr	r0, [pc, #256]	; (800a1d4 <cppLoop+0x1f64>)
 800a0d4:	f7f7 f81e 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 800a0d8:	4831      	ldr	r0, [pc, #196]	; (800a1a0 <cppLoop+0x1f30>)
 800a0da:	f7f7 ffd7 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	bf0c      	ite	eq
 800a0e4:	2301      	moveq	r3, #1
 800a0e6:	2300      	movne	r3, #0
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f001 80e6 	beq.w	800b2bc <cppLoop+0x304c>
				HAL_Delay(500);
 800a0f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0f4:	f001 fa20 	bl	800b538 <HAL_Delay>

				led.LR(1, -1);
 800a0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	4829      	ldr	r0, [pc, #164]	; (800a1a4 <cppLoop+0x1f34>)
 800a100:	f7f8 f8e4 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800a104:	4b34      	ldr	r3, [pc, #208]	; (800a1d8 <cppLoop+0x1f68>)
 800a106:	edd3 7a00 	vldr	s15, [r3]
 800a10a:	4b34      	ldr	r3, [pc, #208]	; (800a1dc <cppLoop+0x1f6c>)
 800a10c:	ed93 7a00 	vldr	s14, [r3]
 800a110:	4b33      	ldr	r3, [pc, #204]	; (800a1e0 <cppLoop+0x1f70>)
 800a112:	edd3 6a00 	vldr	s13, [r3]
 800a116:	eeb0 1a66 	vmov.f32	s2, s13
 800a11a:	eef0 0a47 	vmov.f32	s1, s14
 800a11e:	eeb0 0a67 	vmov.f32	s0, s15
 800a122:	4827      	ldr	r0, [pc, #156]	; (800a1c0 <cppLoop+0x1f50>)
 800a124:	f7f9 ff0c 	bl	8003f40 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(FIFTH_RUNNING);
 800a128:	2104      	movs	r1, #4
 800a12a:	4825      	ldr	r0, [pc, #148]	; (800a1c0 <cppLoop+0x1f50>)
 800a12c:	f7fa fa82 	bl	8004634 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity4);
 800a130:	4b27      	ldr	r3, [pc, #156]	; (800a1d0 <cppLoop+0x1f60>)
 800a132:	edd3 7a00 	vldr	s15, [r3]
 800a136:	eeb0 0a67 	vmov.f32	s0, s15
 800a13a:	4821      	ldr	r0, [pc, #132]	; (800a1c0 <cppLoop+0x1f50>)
 800a13c:	f7f9 ff9b 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity4(adj_max_velocity4);
 800a140:	4b21      	ldr	r3, [pc, #132]	; (800a1c8 <cppLoop+0x1f58>)
 800a142:	edd3 7a00 	vldr	s15, [r3]
 800a146:	eeb0 0a67 	vmov.f32	s0, s15
 800a14a:	481d      	ldr	r0, [pc, #116]	; (800a1c0 <cppLoop+0x1f50>)
 800a14c:	f7fa f803 	bl	8004156 <_ZN9LineTrace15setMaxVelocity4Ef>
				line_trace.setMinVelocity4(adj_min_velocity4);
 800a150:	4b1f      	ldr	r3, [pc, #124]	; (800a1d0 <cppLoop+0x1f60>)
 800a152:	edd3 7a00 	vldr	s15, [r3]
 800a156:	eeb0 0a67 	vmov.f32	s0, s15
 800a15a:	4819      	ldr	r0, [pc, #100]	; (800a1c0 <cppLoop+0x1f50>)
 800a15c:	f7fa f80b 	bl	8004176 <_ZN9LineTrace15setMinVelocity4Ef>
				line_trace.createVelocityTabele();
 800a160:	4817      	ldr	r0, [pc, #92]	; (800a1c0 <cppLoop+0x1f50>)
 800a162:	f7fa fcaf 	bl	8004ac4 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 800a166:	4816      	ldr	r0, [pc, #88]	; (800a1c0 <cppLoop+0x1f50>)
 800a168:	f7fa fab4 	bl	80046d4 <_ZN9LineTrace7runningEv>

				logger.stop();
 800a16c:	481d      	ldr	r0, [pc, #116]	; (800a1e4 <cppLoop+0x1f74>)
 800a16e:	f7fb f9f3 	bl	8005558 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 800a172:	4a1d      	ldr	r2, [pc, #116]	; (800a1e8 <cppLoop+0x1f78>)
 800a174:	491d      	ldr	r1, [pc, #116]	; (800a1ec <cppLoop+0x1f7c>)
 800a176:	481b      	ldr	r0, [pc, #108]	; (800a1e4 <cppLoop+0x1f74>)
 800a178:	f7fb f887 	bl	800528a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 800a17c:	4a1c      	ldr	r2, [pc, #112]	; (800a1f0 <cppLoop+0x1f80>)
 800a17e:	491b      	ldr	r1, [pc, #108]	; (800a1ec <cppLoop+0x1f7c>)
 800a180:	4818      	ldr	r0, [pc, #96]	; (800a1e4 <cppLoop+0x1f74>)
 800a182:	f7fb f896 	bl	80052b2 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 800a186:	f04f 32ff 	mov.w	r2, #4294967295
 800a18a:	2100      	movs	r1, #0
 800a18c:	4805      	ldr	r0, [pc, #20]	; (800a1a4 <cppLoop+0x1f34>)
 800a18e:	f7f8 f89d 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 800a192:	f001 b893 	b.w	800b2bc <cppLoop+0x304c>
 800a196:	bf00      	nop
 800a198:	9999999a 	.word	0x9999999a
 800a19c:	3fb99999 	.word	0x3fb99999
 800a1a0:	2000054c 	.word	0x2000054c
 800a1a4:	20000558 	.word	0x20000558
 800a1a8:	2004526e 	.word	0x2004526e
 800a1ac:	200452c8 	.word	0x200452c8
 800a1b0:	200452d0 	.word	0x200452d0
 800a1b4:	0801a71c 	.word	0x0801a71c
 800a1b8:	0801a630 	.word	0x0801a630
 800a1bc:	0801a728 	.word	0x0801a728
 800a1c0:	200209d4 	.word	0x200209d4
 800a1c4:	2004526a 	.word	0x2004526a
 800a1c8:	200452d8 	.word	0x200452d8
 800a1cc:	0801a734 	.word	0x0801a734
 800a1d0:	200452e0 	.word	0x200452e0
 800a1d4:	0801a67c 	.word	0x0801a67c
 800a1d8:	20045270 	.word	0x20045270
 800a1dc:	20045278 	.word	0x20045278
 800a1e0:	20045280 	.word	0x20045280
 800a1e4:	2000057c 	.word	0x2000057c
 800a1e8:	0801a688 	.word	0x0801a688
 800a1ec:	0801a694 	.word	0x0801a694
 800a1f0:	0801a6a0 	.word	0x0801a6a0
			lcd_clear();
 800a1f4:	f7f6 ff54 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	f7f6 ff60 	bl	80010c0 <lcd_locate>
			lcd_printf("5:   %3.1f", line_trace.getMaxVelocity4());
 800a200:	48bd      	ldr	r0, [pc, #756]	; (800a4f8 <cppLoop+0x2288>)
 800a202:	f7fa f838 	bl	8004276 <_ZN9LineTrace15getMaxVelocity4Ev>
 800a206:	ee10 3a10 	vmov	r3, s0
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f6 f9b4 	bl	8000578 <__aeabi_f2d>
 800a210:	4603      	mov	r3, r0
 800a212:	460c      	mov	r4, r1
 800a214:	461a      	mov	r2, r3
 800a216:	4623      	mov	r3, r4
 800a218:	48b8      	ldr	r0, [pc, #736]	; (800a4fc <cppLoop+0x228c>)
 800a21a:	f7f6 ff7b 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800a21e:	2101      	movs	r1, #1
 800a220:	2000      	movs	r0, #0
 800a222:	f7f6 ff4d 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity4());
 800a226:	48b4      	ldr	r0, [pc, #720]	; (800a4f8 <cppLoop+0x2288>)
 800a228:	f7fa f835 	bl	8004296 <_ZN9LineTrace15getMinVelocity4Ev>
 800a22c:	ee10 3a10 	vmov	r3, s0
 800a230:	4618      	mov	r0, r3
 800a232:	f7f6 f9a1 	bl	8000578 <__aeabi_f2d>
 800a236:	4603      	mov	r3, r0
 800a238:	460c      	mov	r4, r1
 800a23a:	461a      	mov	r2, r3
 800a23c:	4623      	mov	r3, r4
 800a23e:	48b0      	ldr	r0, [pc, #704]	; (800a500 <cppLoop+0x2290>)
 800a240:	f7f6 ff68 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 800a244:	48af      	ldr	r0, [pc, #700]	; (800a504 <cppLoop+0x2294>)
 800a246:	f7f7 ff21 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b08      	cmp	r3, #8
 800a24e:	bf0c      	ite	eq
 800a250:	2301      	moveq	r3, #1
 800a252:	2300      	movne	r3, #0
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b00      	cmp	r3, #0
 800a258:	d022      	beq.n	800a2a0 <cppLoop+0x2030>
				led.LR(-1, 1);
 800a25a:	2201      	movs	r2, #1
 800a25c:	f04f 31ff 	mov.w	r1, #4294967295
 800a260:	48a9      	ldr	r0, [pc, #676]	; (800a508 <cppLoop+0x2298>)
 800a262:	f7f8 f833 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 800a266:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a26a:	f001 f965 	bl	800b538 <HAL_Delay>
				selector_vel++;
 800a26e:	4ba7      	ldr	r3, [pc, #668]	; (800a50c <cppLoop+0x229c>)
 800a270:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a274:	b29b      	uxth	r3, r3
 800a276:	3301      	adds	r3, #1
 800a278:	b29b      	uxth	r3, r3
 800a27a:	b21a      	sxth	r2, r3
 800a27c:	4ba3      	ldr	r3, [pc, #652]	; (800a50c <cppLoop+0x229c>)
 800a27e:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 800a280:	4ba2      	ldr	r3, [pc, #648]	; (800a50c <cppLoop+0x229c>)
 800a282:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a286:	2b01      	cmp	r3, #1
 800a288:	dd02      	ble.n	800a290 <cppLoop+0x2020>
 800a28a:	4ba0      	ldr	r3, [pc, #640]	; (800a50c <cppLoop+0x229c>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 800a290:	2200      	movs	r2, #0
 800a292:	f04f 31ff 	mov.w	r1, #4294967295
 800a296:	489c      	ldr	r0, [pc, #624]	; (800a508 <cppLoop+0x2298>)
 800a298:	f7f8 f818 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a29c:	f001 b80e 	b.w	800b2bc <cppLoop+0x304c>
			else if(joy_stick.getValue() == JOY_R){
 800a2a0:	4898      	ldr	r0, [pc, #608]	; (800a504 <cppLoop+0x2294>)
 800a2a2:	f7f7 fef3 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b10      	cmp	r3, #16
 800a2aa:	bf0c      	ite	eq
 800a2ac:	2301      	moveq	r3, #1
 800a2ae:	2300      	movne	r3, #0
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d03c      	beq.n	800a330 <cppLoop+0x20c0>
				led.LR(-1, 1);
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a2bc:	4892      	ldr	r0, [pc, #584]	; (800a508 <cppLoop+0x2298>)
 800a2be:	f7f8 f805 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 800a2c2:	2064      	movs	r0, #100	; 0x64
 800a2c4:	f001 f938 	bl	800b538 <HAL_Delay>
				if(selector_vel == 0)
 800a2c8:	4b90      	ldr	r3, [pc, #576]	; (800a50c <cppLoop+0x229c>)
 800a2ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d113      	bne.n	800a2fa <cppLoop+0x208a>
					adj_max_velocity4 = adj_max_velocity4 + 0.1;
 800a2d2:	4b8f      	ldr	r3, [pc, #572]	; (800a510 <cppLoop+0x22a0>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7f6 f94e 	bl	8000578 <__aeabi_f2d>
 800a2dc:	a384      	add	r3, pc, #528	; (adr r3, 800a4f0 <cppLoop+0x2280>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f5 ffeb 	bl	80002bc <__adddf3>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	f7f6 fc93 	bl	8000c18 <__aeabi_d2f>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	4b86      	ldr	r3, [pc, #536]	; (800a510 <cppLoop+0x22a0>)
 800a2f6:	601a      	str	r2, [r3, #0]
 800a2f8:	e012      	b.n	800a320 <cppLoop+0x20b0>
					adj_min_velocity4 = adj_min_velocity4 + 0.1;
 800a2fa:	4b86      	ldr	r3, [pc, #536]	; (800a514 <cppLoop+0x22a4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7f6 f93a 	bl	8000578 <__aeabi_f2d>
 800a304:	a37a      	add	r3, pc, #488	; (adr r3, 800a4f0 <cppLoop+0x2280>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f5 ffd7 	bl	80002bc <__adddf3>
 800a30e:	4603      	mov	r3, r0
 800a310:	460c      	mov	r4, r1
 800a312:	4618      	mov	r0, r3
 800a314:	4621      	mov	r1, r4
 800a316:	f7f6 fc7f 	bl	8000c18 <__aeabi_d2f>
 800a31a:	4602      	mov	r2, r0
 800a31c:	4b7d      	ldr	r3, [pc, #500]	; (800a514 <cppLoop+0x22a4>)
 800a31e:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800a320:	2200      	movs	r2, #0
 800a322:	f04f 31ff 	mov.w	r1, #4294967295
 800a326:	4878      	ldr	r0, [pc, #480]	; (800a508 <cppLoop+0x2298>)
 800a328:	f7f7 ffd0 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a32c:	f000 bfc6 	b.w	800b2bc <cppLoop+0x304c>
			else if(joy_stick.getValue() == JOY_L){
 800a330:	4874      	ldr	r0, [pc, #464]	; (800a504 <cppLoop+0x2294>)
 800a332:	f7f7 feab 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a336:	4603      	mov	r3, r0
 800a338:	2b01      	cmp	r3, #1
 800a33a:	bf0c      	ite	eq
 800a33c:	2301      	moveq	r3, #1
 800a33e:	2300      	movne	r3, #0
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d03c      	beq.n	800a3c0 <cppLoop+0x2150>
				led.LR(-1, 1);
 800a346:	2201      	movs	r2, #1
 800a348:	f04f 31ff 	mov.w	r1, #4294967295
 800a34c:	486e      	ldr	r0, [pc, #440]	; (800a508 <cppLoop+0x2298>)
 800a34e:	f7f7 ffbd 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 800a352:	2064      	movs	r0, #100	; 0x64
 800a354:	f001 f8f0 	bl	800b538 <HAL_Delay>
				if(selector_vel == 0)
 800a358:	4b6c      	ldr	r3, [pc, #432]	; (800a50c <cppLoop+0x229c>)
 800a35a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d113      	bne.n	800a38a <cppLoop+0x211a>
					adj_max_velocity4 = adj_max_velocity4 - 0.1;
 800a362:	4b6b      	ldr	r3, [pc, #428]	; (800a510 <cppLoop+0x22a0>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4618      	mov	r0, r3
 800a368:	f7f6 f906 	bl	8000578 <__aeabi_f2d>
 800a36c:	a360      	add	r3, pc, #384	; (adr r3, 800a4f0 <cppLoop+0x2280>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	f7f5 ffa1 	bl	80002b8 <__aeabi_dsub>
 800a376:	4603      	mov	r3, r0
 800a378:	460c      	mov	r4, r1
 800a37a:	4618      	mov	r0, r3
 800a37c:	4621      	mov	r1, r4
 800a37e:	f7f6 fc4b 	bl	8000c18 <__aeabi_d2f>
 800a382:	4602      	mov	r2, r0
 800a384:	4b62      	ldr	r3, [pc, #392]	; (800a510 <cppLoop+0x22a0>)
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	e012      	b.n	800a3b0 <cppLoop+0x2140>
					adj_min_velocity4 = adj_min_velocity4 - 0.1;
 800a38a:	4b62      	ldr	r3, [pc, #392]	; (800a514 <cppLoop+0x22a4>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4618      	mov	r0, r3
 800a390:	f7f6 f8f2 	bl	8000578 <__aeabi_f2d>
 800a394:	a356      	add	r3, pc, #344	; (adr r3, 800a4f0 <cppLoop+0x2280>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7f5 ff8d 	bl	80002b8 <__aeabi_dsub>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f7f6 fc37 	bl	8000c18 <__aeabi_d2f>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	4b59      	ldr	r3, [pc, #356]	; (800a514 <cppLoop+0x22a4>)
 800a3ae:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f04f 31ff 	mov.w	r1, #4294967295
 800a3b6:	4854      	ldr	r0, [pc, #336]	; (800a508 <cppLoop+0x2298>)
 800a3b8:	f7f7 ff88 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a3bc:	f000 bf7e 	b.w	800b2bc <cppLoop+0x304c>
			else if(joy_stick.getValue() == JOY_C){
 800a3c0:	4850      	ldr	r0, [pc, #320]	; (800a504 <cppLoop+0x2294>)
 800a3c2:	f7f7 fe63 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	bf0c      	ite	eq
 800a3cc:	2301      	moveq	r3, #1
 800a3ce:	2300      	movne	r3, #0
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 8772 	beq.w	800b2bc <cppLoop+0x304c>
				led.LR(-1, 1);
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f04f 31ff 	mov.w	r1, #4294967295
 800a3de:	484a      	ldr	r0, [pc, #296]	; (800a508 <cppLoop+0x2298>)
 800a3e0:	f7f7 ff74 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 800a3e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a3e8:	f001 f8a6 	bl	800b538 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL5.TXT", 1, &adj_max_velocity4, OVER_WRITE);
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	4b47      	ldr	r3, [pc, #284]	; (800a510 <cppLoop+0x22a0>)
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	4948      	ldr	r1, [pc, #288]	; (800a518 <cppLoop+0x22a8>)
 800a3f6:	4849      	ldr	r0, [pc, #292]	; (800a51c <cppLoop+0x22ac>)
 800a3f8:	f7f7 fa30 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL5.TXT", 1, &adj_min_velocity4, OVER_WRITE);
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	4b44      	ldr	r3, [pc, #272]	; (800a514 <cppLoop+0x22a4>)
 800a402:	2201      	movs	r2, #1
 800a404:	4946      	ldr	r1, [pc, #280]	; (800a520 <cppLoop+0x22b0>)
 800a406:	4845      	ldr	r0, [pc, #276]	; (800a51c <cppLoop+0x22ac>)
 800a408:	f7f7 fa28 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity4(adj_max_velocity4);
 800a40c:	4b40      	ldr	r3, [pc, #256]	; (800a510 <cppLoop+0x22a0>)
 800a40e:	edd3 7a00 	vldr	s15, [r3]
 800a412:	eeb0 0a67 	vmov.f32	s0, s15
 800a416:	4838      	ldr	r0, [pc, #224]	; (800a4f8 <cppLoop+0x2288>)
 800a418:	f7f9 fe9d 	bl	8004156 <_ZN9LineTrace15setMaxVelocity4Ef>
				line_trace.setMinVelocity4(adj_min_velocity4);
 800a41c:	4b3d      	ldr	r3, [pc, #244]	; (800a514 <cppLoop+0x22a4>)
 800a41e:	edd3 7a00 	vldr	s15, [r3]
 800a422:	eeb0 0a67 	vmov.f32	s0, s15
 800a426:	4834      	ldr	r0, [pc, #208]	; (800a4f8 <cppLoop+0x2288>)
 800a428:	f7f9 fea5 	bl	8004176 <_ZN9LineTrace15setMinVelocity4Ef>
				led.LR(-1, 0);
 800a42c:	2200      	movs	r2, #0
 800a42e:	f04f 31ff 	mov.w	r1, #4294967295
 800a432:	4835      	ldr	r0, [pc, #212]	; (800a508 <cppLoop+0x2298>)
 800a434:	f7f7 ff4a 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a438:	f000 bf40 	b.w	800b2bc <cppLoop+0x304c>
	case 7:
		led.fullColor('W');
 800a43c:	2157      	movs	r1, #87	; 0x57
 800a43e:	4832      	ldr	r0, [pc, #200]	; (800a508 <cppLoop+0x2298>)
 800a440:	f7f7 fe88 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a444:	f7f6 fe2c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a448:	2100      	movs	r1, #0
 800a44a:	2000      	movs	r0, #0
 800a44c:	f7f6 fe38 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc());
 800a450:	4829      	ldr	r0, [pc, #164]	; (800a4f8 <cppLoop+0x2288>)
 800a452:	f7f9 ff98 	bl	8004386 <_ZN9LineTrace9getMaxAccEv>
 800a456:	ee10 3a10 	vmov	r3, s0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7f6 f88c 	bl	8000578 <__aeabi_f2d>
 800a460:	4603      	mov	r3, r0
 800a462:	460c      	mov	r4, r1
 800a464:	461a      	mov	r2, r3
 800a466:	4623      	mov	r3, r4
 800a468:	482e      	ldr	r0, [pc, #184]	; (800a524 <cppLoop+0x22b4>)
 800a46a:	f7f6 fe53 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a46e:	2101      	movs	r1, #1
 800a470:	2000      	movs	r0, #0
 800a472:	f7f6 fe25 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec());
 800a476:	4820      	ldr	r0, [pc, #128]	; (800a4f8 <cppLoop+0x2288>)
 800a478:	f7f9 ff97 	bl	80043aa <_ZN9LineTrace9getMaxDecEv>
 800a47c:	ee10 3a10 	vmov	r3, s0
 800a480:	4618      	mov	r0, r3
 800a482:	f7f6 f879 	bl	8000578 <__aeabi_f2d>
 800a486:	4603      	mov	r3, r0
 800a488:	460c      	mov	r4, r1
 800a48a:	461a      	mov	r2, r3
 800a48c:	4623      	mov	r3, r4
 800a48e:	4826      	ldr	r0, [pc, #152]	; (800a528 <cppLoop+0x22b8>)
 800a490:	f7f6 fe40 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a494:	481b      	ldr	r0, [pc, #108]	; (800a504 <cppLoop+0x2294>)
 800a496:	f7f7 fdf9 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	bf0c      	ite	eq
 800a4a0:	2301      	moveq	r3, #1
 800a4a2:	2300      	movne	r3, #0
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d042      	beq.n	800a530 <cppLoop+0x22c0>
			led.LR(-1, 1);
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f04f 31ff 	mov.w	r1, #4294967295
 800a4b0:	4815      	ldr	r0, [pc, #84]	; (800a508 <cppLoop+0x2298>)
 800a4b2:	f7f7 ff0b 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a4b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a4ba:	f001 f83d 	bl	800b538 <HAL_Delay>

			selector_acc++;
 800a4be:	4b1b      	ldr	r3, [pc, #108]	; (800a52c <cppLoop+0x22bc>)
 800a4c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	b21a      	sxth	r2, r3
 800a4cc:	4b17      	ldr	r3, [pc, #92]	; (800a52c <cppLoop+0x22bc>)
 800a4ce:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a4d0:	4b16      	ldr	r3, [pc, #88]	; (800a52c <cppLoop+0x22bc>)
 800a4d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	dd02      	ble.n	800a4e0 <cppLoop+0x2270>
 800a4da:	4b14      	ldr	r3, [pc, #80]	; (800a52c <cppLoop+0x22bc>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f04f 31ff 	mov.w	r1, #4294967295
 800a4e6:	4808      	ldr	r0, [pc, #32]	; (800a508 <cppLoop+0x2298>)
 800a4e8:	f7f7 fef0 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 800a4ec:	f000 bee8 	b.w	800b2c0 <cppLoop+0x3050>
 800a4f0:	9999999a 	.word	0x9999999a
 800a4f4:	3fb99999 	.word	0x3fb99999
 800a4f8:	200209d4 	.word	0x200209d4
 800a4fc:	0801a734 	.word	0x0801a734
 800a500:	0801a6b0 	.word	0x0801a6b0
 800a504:	2000054c 	.word	0x2000054c
 800a508:	20000558 	.word	0x20000558
 800a50c:	2004526e 	.word	0x2004526e
 800a510:	200452d8 	.word	0x200452d8
 800a514:	200452e0 	.word	0x200452e0
 800a518:	0801a740 	.word	0x0801a740
 800a51c:	0801a630 	.word	0x0801a630
 800a520:	0801a74c 	.word	0x0801a74c
 800a524:	0801a758 	.word	0x0801a758
 800a528:	0801a764 	.word	0x0801a764
 800a52c:	2004526c 	.word	0x2004526c
		else if(joy_stick.getValue() == JOY_R){
 800a530:	48b9      	ldr	r0, [pc, #740]	; (800a818 <cppLoop+0x25a8>)
 800a532:	f7f7 fdab 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a536:	4603      	mov	r3, r0
 800a538:	2b10      	cmp	r3, #16
 800a53a:	bf0c      	ite	eq
 800a53c:	2301      	moveq	r3, #1
 800a53e:	2300      	movne	r3, #0
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d03c      	beq.n	800a5c0 <cppLoop+0x2350>
			led.LR(-1, 1);
 800a546:	2201      	movs	r2, #1
 800a548:	f04f 31ff 	mov.w	r1, #4294967295
 800a54c:	48b3      	ldr	r0, [pc, #716]	; (800a81c <cppLoop+0x25ac>)
 800a54e:	f7f7 febd 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a552:	2064      	movs	r0, #100	; 0x64
 800a554:	f000 fff0 	bl	800b538 <HAL_Delay>
			if(selector_acc == 0){
 800a558:	4bb1      	ldr	r3, [pc, #708]	; (800a820 <cppLoop+0x25b0>)
 800a55a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d113      	bne.n	800a58a <cppLoop+0x231a>
				adj_acc = adj_acc + 0.1;
 800a562:	4bb0      	ldr	r3, [pc, #704]	; (800a824 <cppLoop+0x25b4>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4618      	mov	r0, r3
 800a568:	f7f6 f806 	bl	8000578 <__aeabi_f2d>
 800a56c:	a3a8      	add	r3, pc, #672	; (adr r3, 800a810 <cppLoop+0x25a0>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	f7f5 fea3 	bl	80002bc <__adddf3>
 800a576:	4603      	mov	r3, r0
 800a578:	460c      	mov	r4, r1
 800a57a:	4618      	mov	r0, r3
 800a57c:	4621      	mov	r1, r4
 800a57e:	f7f6 fb4b 	bl	8000c18 <__aeabi_d2f>
 800a582:	4602      	mov	r2, r0
 800a584:	4ba7      	ldr	r3, [pc, #668]	; (800a824 <cppLoop+0x25b4>)
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	e012      	b.n	800a5b0 <cppLoop+0x2340>
				adj_dec = adj_dec + 0.1;
 800a58a:	4ba7      	ldr	r3, [pc, #668]	; (800a828 <cppLoop+0x25b8>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f7f5 fff2 	bl	8000578 <__aeabi_f2d>
 800a594:	a39e      	add	r3, pc, #632	; (adr r3, 800a810 <cppLoop+0x25a0>)
 800a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59a:	f7f5 fe8f 	bl	80002bc <__adddf3>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	f7f6 fb37 	bl	8000c18 <__aeabi_d2f>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	4b9e      	ldr	r3, [pc, #632]	; (800a828 <cppLoop+0x25b8>)
 800a5ae:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f04f 31ff 	mov.w	r1, #4294967295
 800a5b6:	4899      	ldr	r0, [pc, #612]	; (800a81c <cppLoop+0x25ac>)
 800a5b8:	f7f7 fe88 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a5bc:	f000 be80 	b.w	800b2c0 <cppLoop+0x3050>
		else if(joy_stick.getValue() == JOY_L){
 800a5c0:	4895      	ldr	r0, [pc, #596]	; (800a818 <cppLoop+0x25a8>)
 800a5c2:	f7f7 fd63 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	bf0c      	ite	eq
 800a5cc:	2301      	moveq	r3, #1
 800a5ce:	2300      	movne	r3, #0
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d03c      	beq.n	800a650 <cppLoop+0x23e0>
			led.LR(-1, 1);
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a5dc:	488f      	ldr	r0, [pc, #572]	; (800a81c <cppLoop+0x25ac>)
 800a5de:	f7f7 fe75 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a5e2:	2064      	movs	r0, #100	; 0x64
 800a5e4:	f000 ffa8 	bl	800b538 <HAL_Delay>
			if(selector_acc == 0){
 800a5e8:	4b8d      	ldr	r3, [pc, #564]	; (800a820 <cppLoop+0x25b0>)
 800a5ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d113      	bne.n	800a61a <cppLoop+0x23aa>
				adj_acc = adj_acc - 0.1;
 800a5f2:	4b8c      	ldr	r3, [pc, #560]	; (800a824 <cppLoop+0x25b4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7f5 ffbe 	bl	8000578 <__aeabi_f2d>
 800a5fc:	a384      	add	r3, pc, #528	; (adr r3, 800a810 <cppLoop+0x25a0>)
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	f7f5 fe59 	bl	80002b8 <__aeabi_dsub>
 800a606:	4603      	mov	r3, r0
 800a608:	460c      	mov	r4, r1
 800a60a:	4618      	mov	r0, r3
 800a60c:	4621      	mov	r1, r4
 800a60e:	f7f6 fb03 	bl	8000c18 <__aeabi_d2f>
 800a612:	4602      	mov	r2, r0
 800a614:	4b83      	ldr	r3, [pc, #524]	; (800a824 <cppLoop+0x25b4>)
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	e012      	b.n	800a640 <cppLoop+0x23d0>
				adj_dec = adj_dec - 0.1;
 800a61a:	4b83      	ldr	r3, [pc, #524]	; (800a828 <cppLoop+0x25b8>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4618      	mov	r0, r3
 800a620:	f7f5 ffaa 	bl	8000578 <__aeabi_f2d>
 800a624:	a37a      	add	r3, pc, #488	; (adr r3, 800a810 <cppLoop+0x25a0>)
 800a626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62a:	f7f5 fe45 	bl	80002b8 <__aeabi_dsub>
 800a62e:	4603      	mov	r3, r0
 800a630:	460c      	mov	r4, r1
 800a632:	4618      	mov	r0, r3
 800a634:	4621      	mov	r1, r4
 800a636:	f7f6 faef 	bl	8000c18 <__aeabi_d2f>
 800a63a:	4602      	mov	r2, r0
 800a63c:	4b7a      	ldr	r3, [pc, #488]	; (800a828 <cppLoop+0x25b8>)
 800a63e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a640:	2200      	movs	r2, #0
 800a642:	f04f 31ff 	mov.w	r1, #4294967295
 800a646:	4875      	ldr	r0, [pc, #468]	; (800a81c <cppLoop+0x25ac>)
 800a648:	f7f7 fe40 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a64c:	f000 be38 	b.w	800b2c0 <cppLoop+0x3050>
		else if(joy_stick.getValue() == JOY_C){
 800a650:	4871      	ldr	r0, [pc, #452]	; (800a818 <cppLoop+0x25a8>)
 800a652:	f7f7 fd1b 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a656:	4603      	mov	r3, r0
 800a658:	2b02      	cmp	r3, #2
 800a65a:	bf0c      	ite	eq
 800a65c:	2301      	moveq	r3, #1
 800a65e:	2300      	movne	r3, #0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 862c 	beq.w	800b2c0 <cppLoop+0x3050>
			led.LR(-1, 1);
 800a668:	2201      	movs	r2, #1
 800a66a:	f04f 31ff 	mov.w	r1, #4294967295
 800a66e:	486b      	ldr	r0, [pc, #428]	; (800a81c <cppLoop+0x25ac>)
 800a670:	f7f7 fe2c 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a674:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a678:	f000 ff5e 	bl	800b538 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800a67c:	2300      	movs	r3, #0
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	4b68      	ldr	r3, [pc, #416]	; (800a824 <cppLoop+0x25b4>)
 800a682:	2201      	movs	r2, #1
 800a684:	4969      	ldr	r1, [pc, #420]	; (800a82c <cppLoop+0x25bc>)
 800a686:	486a      	ldr	r0, [pc, #424]	; (800a830 <cppLoop+0x25c0>)
 800a688:	f7f7 f8e8 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800a68c:	2300      	movs	r3, #0
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	4b65      	ldr	r3, [pc, #404]	; (800a828 <cppLoop+0x25b8>)
 800a692:	2201      	movs	r2, #1
 800a694:	4967      	ldr	r1, [pc, #412]	; (800a834 <cppLoop+0x25c4>)
 800a696:	4866      	ldr	r0, [pc, #408]	; (800a830 <cppLoop+0x25c0>)
 800a698:	f7f7 f8e0 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800a69c:	4b61      	ldr	r3, [pc, #388]	; (800a824 <cppLoop+0x25b4>)
 800a69e:	edd3 7a00 	vldr	s15, [r3]
 800a6a2:	4b61      	ldr	r3, [pc, #388]	; (800a828 <cppLoop+0x25b8>)
 800a6a4:	ed93 7a00 	vldr	s14, [r3]
 800a6a8:	eef0 0a47 	vmov.f32	s1, s14
 800a6ac:	eeb0 0a67 	vmov.f32	s0, s15
 800a6b0:	4861      	ldr	r0, [pc, #388]	; (800a838 <cppLoop+0x25c8>)
 800a6b2:	f7f9 fe00 	bl	80042b6 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a6bc:	4857      	ldr	r0, [pc, #348]	; (800a81c <cppLoop+0x25ac>)
 800a6be:	f7f7 fe05 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a6c2:	f000 bdfd 	b.w	800b2c0 <cppLoop+0x3050>

	case 8 :
		led.fullColor('W');
 800a6c6:	2157      	movs	r1, #87	; 0x57
 800a6c8:	4854      	ldr	r0, [pc, #336]	; (800a81c <cppLoop+0x25ac>)
 800a6ca:	f7f7 fd43 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a6ce:	f7f6 fce7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	f7f6 fcf3 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC3:%3.1f", line_trace.getMaxAcc2());
 800a6da:	4857      	ldr	r0, [pc, #348]	; (800a838 <cppLoop+0x25c8>)
 800a6dc:	f7f9 fe77 	bl	80043ce <_ZN9LineTrace10getMaxAcc2Ev>
 800a6e0:	ee10 3a10 	vmov	r3, s0
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7f5 ff47 	bl	8000578 <__aeabi_f2d>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	460c      	mov	r4, r1
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	4623      	mov	r3, r4
 800a6f2:	4852      	ldr	r0, [pc, #328]	; (800a83c <cppLoop+0x25cc>)
 800a6f4:	f7f6 fd0e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a6f8:	2101      	movs	r1, #1
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	f7f6 fce0 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC3:%3.1f", line_trace.getMaxDec2());
 800a700:	484d      	ldr	r0, [pc, #308]	; (800a838 <cppLoop+0x25c8>)
 800a702:	f7f9 fe76 	bl	80043f2 <_ZN9LineTrace10getMaxDec2Ev>
 800a706:	ee10 3a10 	vmov	r3, s0
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7f5 ff34 	bl	8000578 <__aeabi_f2d>
 800a710:	4603      	mov	r3, r0
 800a712:	460c      	mov	r4, r1
 800a714:	461a      	mov	r2, r3
 800a716:	4623      	mov	r3, r4
 800a718:	4849      	ldr	r0, [pc, #292]	; (800a840 <cppLoop+0x25d0>)
 800a71a:	f7f6 fcfb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a71e:	483e      	ldr	r0, [pc, #248]	; (800a818 <cppLoop+0x25a8>)
 800a720:	f7f7 fcb4 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a724:	4603      	mov	r3, r0
 800a726:	2b04      	cmp	r3, #4
 800a728:	bf0c      	ite	eq
 800a72a:	2301      	moveq	r3, #1
 800a72c:	2300      	movne	r3, #0
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b00      	cmp	r3, #0
 800a732:	d022      	beq.n	800a77a <cppLoop+0x250a>
			led.LR(-1, 1);
 800a734:	2201      	movs	r2, #1
 800a736:	f04f 31ff 	mov.w	r1, #4294967295
 800a73a:	4838      	ldr	r0, [pc, #224]	; (800a81c <cppLoop+0x25ac>)
 800a73c:	f7f7 fdc6 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a740:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a744:	f000 fef8 	bl	800b538 <HAL_Delay>

			selector_acc++;
 800a748:	4b35      	ldr	r3, [pc, #212]	; (800a820 <cppLoop+0x25b0>)
 800a74a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a74e:	b29b      	uxth	r3, r3
 800a750:	3301      	adds	r3, #1
 800a752:	b29b      	uxth	r3, r3
 800a754:	b21a      	sxth	r2, r3
 800a756:	4b32      	ldr	r3, [pc, #200]	; (800a820 <cppLoop+0x25b0>)
 800a758:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a75a:	4b31      	ldr	r3, [pc, #196]	; (800a820 <cppLoop+0x25b0>)
 800a75c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a760:	2b01      	cmp	r3, #1
 800a762:	dd02      	ble.n	800a76a <cppLoop+0x24fa>
 800a764:	4b2e      	ldr	r3, [pc, #184]	; (800a820 <cppLoop+0x25b0>)
 800a766:	2200      	movs	r2, #0
 800a768:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a76a:	2200      	movs	r2, #0
 800a76c:	f04f 31ff 	mov.w	r1, #4294967295
 800a770:	482a      	ldr	r0, [pc, #168]	; (800a81c <cppLoop+0x25ac>)
 800a772:	f7f7 fdab 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 800a776:	f000 bda5 	b.w	800b2c4 <cppLoop+0x3054>
		else if(joy_stick.getValue() == JOY_R){
 800a77a:	4827      	ldr	r0, [pc, #156]	; (800a818 <cppLoop+0x25a8>)
 800a77c:	f7f7 fc86 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a780:	4603      	mov	r3, r0
 800a782:	2b10      	cmp	r3, #16
 800a784:	bf0c      	ite	eq
 800a786:	2301      	moveq	r3, #1
 800a788:	2300      	movne	r3, #0
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d05d      	beq.n	800a84c <cppLoop+0x25dc>
			led.LR(-1, 1);
 800a790:	2201      	movs	r2, #1
 800a792:	f04f 31ff 	mov.w	r1, #4294967295
 800a796:	4821      	ldr	r0, [pc, #132]	; (800a81c <cppLoop+0x25ac>)
 800a798:	f7f7 fd98 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a79c:	2064      	movs	r0, #100	; 0x64
 800a79e:	f000 fecb 	bl	800b538 <HAL_Delay>
			if(selector_acc == 0){
 800a7a2:	4b1f      	ldr	r3, [pc, #124]	; (800a820 <cppLoop+0x25b0>)
 800a7a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d113      	bne.n	800a7d4 <cppLoop+0x2564>
				adj_acc2 = adj_acc2 + 0.1;
 800a7ac:	4b25      	ldr	r3, [pc, #148]	; (800a844 <cppLoop+0x25d4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7f5 fee1 	bl	8000578 <__aeabi_f2d>
 800a7b6:	a316      	add	r3, pc, #88	; (adr r3, 800a810 <cppLoop+0x25a0>)
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	f7f5 fd7e 	bl	80002bc <__adddf3>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	f7f6 fa26 	bl	8000c18 <__aeabi_d2f>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	4b1d      	ldr	r3, [pc, #116]	; (800a844 <cppLoop+0x25d4>)
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	e012      	b.n	800a7fa <cppLoop+0x258a>
				adj_dec2 = adj_dec2 + 0.1;
 800a7d4:	4b1c      	ldr	r3, [pc, #112]	; (800a848 <cppLoop+0x25d8>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7f5 fecd 	bl	8000578 <__aeabi_f2d>
 800a7de:	a30c      	add	r3, pc, #48	; (adr r3, 800a810 <cppLoop+0x25a0>)
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	f7f5 fd6a 	bl	80002bc <__adddf3>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	f7f6 fa12 	bl	8000c18 <__aeabi_d2f>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	4b14      	ldr	r3, [pc, #80]	; (800a848 <cppLoop+0x25d8>)
 800a7f8:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f04f 31ff 	mov.w	r1, #4294967295
 800a800:	4806      	ldr	r0, [pc, #24]	; (800a81c <cppLoop+0x25ac>)
 800a802:	f7f7 fd63 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a806:	f000 bd5d 	b.w	800b2c4 <cppLoop+0x3054>
 800a80a:	bf00      	nop
 800a80c:	f3af 8000 	nop.w
 800a810:	9999999a 	.word	0x9999999a
 800a814:	3fb99999 	.word	0x3fb99999
 800a818:	2000054c 	.word	0x2000054c
 800a81c:	20000558 	.word	0x20000558
 800a820:	2004526c 	.word	0x2004526c
 800a824:	200452e8 	.word	0x200452e8
 800a828:	200452f0 	.word	0x200452f0
 800a82c:	0801a770 	.word	0x0801a770
 800a830:	0801a630 	.word	0x0801a630
 800a834:	0801a778 	.word	0x0801a778
 800a838:	200209d4 	.word	0x200209d4
 800a83c:	0801a780 	.word	0x0801a780
 800a840:	0801a78c 	.word	0x0801a78c
 800a844:	200452f8 	.word	0x200452f8
 800a848:	20045300 	.word	0x20045300
		else if(joy_stick.getValue() == JOY_L){
 800a84c:	48b8      	ldr	r0, [pc, #736]	; (800ab30 <cppLoop+0x28c0>)
 800a84e:	f7f7 fc1d 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a852:	4603      	mov	r3, r0
 800a854:	2b01      	cmp	r3, #1
 800a856:	bf0c      	ite	eq
 800a858:	2301      	moveq	r3, #1
 800a85a:	2300      	movne	r3, #0
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d03c      	beq.n	800a8dc <cppLoop+0x266c>
			led.LR(-1, 1);
 800a862:	2201      	movs	r2, #1
 800a864:	f04f 31ff 	mov.w	r1, #4294967295
 800a868:	48b2      	ldr	r0, [pc, #712]	; (800ab34 <cppLoop+0x28c4>)
 800a86a:	f7f7 fd2f 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a86e:	2064      	movs	r0, #100	; 0x64
 800a870:	f000 fe62 	bl	800b538 <HAL_Delay>
			if(selector_acc == 0){
 800a874:	4bb0      	ldr	r3, [pc, #704]	; (800ab38 <cppLoop+0x28c8>)
 800a876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d113      	bne.n	800a8a6 <cppLoop+0x2636>
				adj_acc2 = adj_acc2 - 0.1;
 800a87e:	4baf      	ldr	r3, [pc, #700]	; (800ab3c <cppLoop+0x28cc>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4618      	mov	r0, r3
 800a884:	f7f5 fe78 	bl	8000578 <__aeabi_f2d>
 800a888:	a3a7      	add	r3, pc, #668	; (adr r3, 800ab28 <cppLoop+0x28b8>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f7f5 fd13 	bl	80002b8 <__aeabi_dsub>
 800a892:	4603      	mov	r3, r0
 800a894:	460c      	mov	r4, r1
 800a896:	4618      	mov	r0, r3
 800a898:	4621      	mov	r1, r4
 800a89a:	f7f6 f9bd 	bl	8000c18 <__aeabi_d2f>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	4ba6      	ldr	r3, [pc, #664]	; (800ab3c <cppLoop+0x28cc>)
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	e012      	b.n	800a8cc <cppLoop+0x265c>
				adj_dec2 = adj_dec2 - 0.1;
 800a8a6:	4ba6      	ldr	r3, [pc, #664]	; (800ab40 <cppLoop+0x28d0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7f5 fe64 	bl	8000578 <__aeabi_f2d>
 800a8b0:	a39d      	add	r3, pc, #628	; (adr r3, 800ab28 <cppLoop+0x28b8>)
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	f7f5 fcff 	bl	80002b8 <__aeabi_dsub>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	460c      	mov	r4, r1
 800a8be:	4618      	mov	r0, r3
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	f7f6 f9a9 	bl	8000c18 <__aeabi_d2f>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	4b9d      	ldr	r3, [pc, #628]	; (800ab40 <cppLoop+0x28d0>)
 800a8ca:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f04f 31ff 	mov.w	r1, #4294967295
 800a8d2:	4898      	ldr	r0, [pc, #608]	; (800ab34 <cppLoop+0x28c4>)
 800a8d4:	f7f7 fcfa 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a8d8:	f000 bcf4 	b.w	800b2c4 <cppLoop+0x3054>
		else if(joy_stick.getValue() == JOY_C){
 800a8dc:	4894      	ldr	r0, [pc, #592]	; (800ab30 <cppLoop+0x28c0>)
 800a8de:	f7f7 fbd5 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	bf0c      	ite	eq
 800a8e8:	2301      	moveq	r3, #1
 800a8ea:	2300      	movne	r3, #0
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 84e8 	beq.w	800b2c4 <cppLoop+0x3054>
			led.LR(-1, 1);
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f04f 31ff 	mov.w	r1, #4294967295
 800a8fa:	488e      	ldr	r0, [pc, #568]	; (800ab34 <cppLoop+0x28c4>)
 800a8fc:	f7f7 fce6 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a900:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a904:	f000 fe18 	bl	800b538 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 800a908:	2300      	movs	r3, #0
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	4b8b      	ldr	r3, [pc, #556]	; (800ab3c <cppLoop+0x28cc>)
 800a90e:	2201      	movs	r2, #1
 800a910:	498c      	ldr	r1, [pc, #560]	; (800ab44 <cppLoop+0x28d4>)
 800a912:	488d      	ldr	r0, [pc, #564]	; (800ab48 <cppLoop+0x28d8>)
 800a914:	f7f6 ffa2 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 800a918:	2300      	movs	r3, #0
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	4b88      	ldr	r3, [pc, #544]	; (800ab40 <cppLoop+0x28d0>)
 800a91e:	2201      	movs	r2, #1
 800a920:	498a      	ldr	r1, [pc, #552]	; (800ab4c <cppLoop+0x28dc>)
 800a922:	4889      	ldr	r0, [pc, #548]	; (800ab48 <cppLoop+0x28d8>)
 800a924:	f7f6 ff9a 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 800a928:	4b84      	ldr	r3, [pc, #528]	; (800ab3c <cppLoop+0x28cc>)
 800a92a:	edd3 7a00 	vldr	s15, [r3]
 800a92e:	4b84      	ldr	r3, [pc, #528]	; (800ab40 <cppLoop+0x28d0>)
 800a930:	ed93 7a00 	vldr	s14, [r3]
 800a934:	eef0 0a47 	vmov.f32	s1, s14
 800a938:	eeb0 0a67 	vmov.f32	s0, s15
 800a93c:	4884      	ldr	r0, [pc, #528]	; (800ab50 <cppLoop+0x28e0>)
 800a93e:	f7f9 fcd4 	bl	80042ea <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 800a942:	2200      	movs	r2, #0
 800a944:	f04f 31ff 	mov.w	r1, #4294967295
 800a948:	487a      	ldr	r0, [pc, #488]	; (800ab34 <cppLoop+0x28c4>)
 800a94a:	f7f7 fcbf 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a94e:	f000 bcb9 	b.w	800b2c4 <cppLoop+0x3054>


	case 9:
		led.fullColor('W');
 800a952:	2157      	movs	r1, #87	; 0x57
 800a954:	4877      	ldr	r0, [pc, #476]	; (800ab34 <cppLoop+0x28c4>)
 800a956:	f7f7 fbfd 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a95a:	f7f6 fba1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a95e:	2100      	movs	r1, #0
 800a960:	2000      	movs	r0, #0
 800a962:	f7f6 fbad 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC4:%3.1f", line_trace.getMaxAcc3());
 800a966:	487a      	ldr	r0, [pc, #488]	; (800ab50 <cppLoop+0x28e0>)
 800a968:	f7f9 fd55 	bl	8004416 <_ZN9LineTrace10getMaxAcc3Ev>
 800a96c:	ee10 3a10 	vmov	r3, s0
 800a970:	4618      	mov	r0, r3
 800a972:	f7f5 fe01 	bl	8000578 <__aeabi_f2d>
 800a976:	4603      	mov	r3, r0
 800a978:	460c      	mov	r4, r1
 800a97a:	461a      	mov	r2, r3
 800a97c:	4623      	mov	r3, r4
 800a97e:	4875      	ldr	r0, [pc, #468]	; (800ab54 <cppLoop+0x28e4>)
 800a980:	f7f6 fbc8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a984:	2101      	movs	r1, #1
 800a986:	2000      	movs	r0, #0
 800a988:	f7f6 fb9a 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC4:%3.1f", line_trace.getMaxDec3());
 800a98c:	4870      	ldr	r0, [pc, #448]	; (800ab50 <cppLoop+0x28e0>)
 800a98e:	f7f9 fd54 	bl	800443a <_ZN9LineTrace10getMaxDec3Ev>
 800a992:	ee10 3a10 	vmov	r3, s0
 800a996:	4618      	mov	r0, r3
 800a998:	f7f5 fdee 	bl	8000578 <__aeabi_f2d>
 800a99c:	4603      	mov	r3, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	4623      	mov	r3, r4
 800a9a4:	486c      	ldr	r0, [pc, #432]	; (800ab58 <cppLoop+0x28e8>)
 800a9a6:	f7f6 fbb5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a9aa:	4861      	ldr	r0, [pc, #388]	; (800ab30 <cppLoop+0x28c0>)
 800a9ac:	f7f7 fb6e 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	bf0c      	ite	eq
 800a9b6:	2301      	moveq	r3, #1
 800a9b8:	2300      	movne	r3, #0
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d022      	beq.n	800aa06 <cppLoop+0x2796>
			led.LR(-1, 1);
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f04f 31ff 	mov.w	r1, #4294967295
 800a9c6:	485b      	ldr	r0, [pc, #364]	; (800ab34 <cppLoop+0x28c4>)
 800a9c8:	f7f7 fc80 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a9cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a9d0:	f000 fdb2 	bl	800b538 <HAL_Delay>

			selector_acc++;
 800a9d4:	4b58      	ldr	r3, [pc, #352]	; (800ab38 <cppLoop+0x28c8>)
 800a9d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	3301      	adds	r3, #1
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	b21a      	sxth	r2, r3
 800a9e2:	4b55      	ldr	r3, [pc, #340]	; (800ab38 <cppLoop+0x28c8>)
 800a9e4:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a9e6:	4b54      	ldr	r3, [pc, #336]	; (800ab38 <cppLoop+0x28c8>)
 800a9e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	dd02      	ble.n	800a9f6 <cppLoop+0x2786>
 800a9f0:	4b51      	ldr	r3, [pc, #324]	; (800ab38 <cppLoop+0x28c8>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f04f 31ff 	mov.w	r1, #4294967295
 800a9fc:	484d      	ldr	r0, [pc, #308]	; (800ab34 <cppLoop+0x28c4>)
 800a9fe:	f7f7 fc65 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC3.TXT", 1, &adj_dec3, OVER_WRITE);
			line_trace.setMaxAccDec3(adj_acc3, adj_dec3);

			led.LR(-1, 0);
		}
		break;
 800aa02:	f000 bc61 	b.w	800b2c8 <cppLoop+0x3058>
		else if(joy_stick.getValue() == JOY_R){
 800aa06:	484a      	ldr	r0, [pc, #296]	; (800ab30 <cppLoop+0x28c0>)
 800aa08:	f7f7 fb40 	bl	800208c <_ZN8JoyStick8getValueEv>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b10      	cmp	r3, #16
 800aa10:	bf0c      	ite	eq
 800aa12:	2301      	moveq	r3, #1
 800aa14:	2300      	movne	r3, #0
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d03c      	beq.n	800aa96 <cppLoop+0x2826>
			led.LR(-1, 1);
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f04f 31ff 	mov.w	r1, #4294967295
 800aa22:	4844      	ldr	r0, [pc, #272]	; (800ab34 <cppLoop+0x28c4>)
 800aa24:	f7f7 fc52 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800aa28:	2064      	movs	r0, #100	; 0x64
 800aa2a:	f000 fd85 	bl	800b538 <HAL_Delay>
			if(selector_acc == 0){
 800aa2e:	4b42      	ldr	r3, [pc, #264]	; (800ab38 <cppLoop+0x28c8>)
 800aa30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d113      	bne.n	800aa60 <cppLoop+0x27f0>
				adj_acc3 = adj_acc3 + 0.1;
 800aa38:	4b48      	ldr	r3, [pc, #288]	; (800ab5c <cppLoop+0x28ec>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7f5 fd9b 	bl	8000578 <__aeabi_f2d>
 800aa42:	a339      	add	r3, pc, #228	; (adr r3, 800ab28 <cppLoop+0x28b8>)
 800aa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa48:	f7f5 fc38 	bl	80002bc <__adddf3>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	460c      	mov	r4, r1
 800aa50:	4618      	mov	r0, r3
 800aa52:	4621      	mov	r1, r4
 800aa54:	f7f6 f8e0 	bl	8000c18 <__aeabi_d2f>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	4b40      	ldr	r3, [pc, #256]	; (800ab5c <cppLoop+0x28ec>)
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	e012      	b.n	800aa86 <cppLoop+0x2816>
				adj_dec3 = adj_dec3 + 0.1;
 800aa60:	4b3f      	ldr	r3, [pc, #252]	; (800ab60 <cppLoop+0x28f0>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7f5 fd87 	bl	8000578 <__aeabi_f2d>
 800aa6a:	a32f      	add	r3, pc, #188	; (adr r3, 800ab28 <cppLoop+0x28b8>)
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f7f5 fc24 	bl	80002bc <__adddf3>
 800aa74:	4603      	mov	r3, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	4618      	mov	r0, r3
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	f7f6 f8cc 	bl	8000c18 <__aeabi_d2f>
 800aa80:	4602      	mov	r2, r0
 800aa82:	4b37      	ldr	r3, [pc, #220]	; (800ab60 <cppLoop+0x28f0>)
 800aa84:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800aa86:	2200      	movs	r2, #0
 800aa88:	f04f 31ff 	mov.w	r1, #4294967295
 800aa8c:	4829      	ldr	r0, [pc, #164]	; (800ab34 <cppLoop+0x28c4>)
 800aa8e:	f7f7 fc1d 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800aa92:	f000 bc19 	b.w	800b2c8 <cppLoop+0x3058>
		else if(joy_stick.getValue() == JOY_L){
 800aa96:	4826      	ldr	r0, [pc, #152]	; (800ab30 <cppLoop+0x28c0>)
 800aa98:	f7f7 faf8 	bl	800208c <_ZN8JoyStick8getValueEv>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	bf0c      	ite	eq
 800aaa2:	2301      	moveq	r3, #1
 800aaa4:	2300      	movne	r3, #0
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d05b      	beq.n	800ab64 <cppLoop+0x28f4>
			led.LR(-1, 1);
 800aaac:	2201      	movs	r2, #1
 800aaae:	f04f 31ff 	mov.w	r1, #4294967295
 800aab2:	4820      	ldr	r0, [pc, #128]	; (800ab34 <cppLoop+0x28c4>)
 800aab4:	f7f7 fc0a 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800aab8:	2064      	movs	r0, #100	; 0x64
 800aaba:	f000 fd3d 	bl	800b538 <HAL_Delay>
			if(selector_acc == 0){
 800aabe:	4b1e      	ldr	r3, [pc, #120]	; (800ab38 <cppLoop+0x28c8>)
 800aac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d113      	bne.n	800aaf0 <cppLoop+0x2880>
				adj_acc3 = adj_acc3 - 0.1;
 800aac8:	4b24      	ldr	r3, [pc, #144]	; (800ab5c <cppLoop+0x28ec>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4618      	mov	r0, r3
 800aace:	f7f5 fd53 	bl	8000578 <__aeabi_f2d>
 800aad2:	a315      	add	r3, pc, #84	; (adr r3, 800ab28 <cppLoop+0x28b8>)
 800aad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad8:	f7f5 fbee 	bl	80002b8 <__aeabi_dsub>
 800aadc:	4603      	mov	r3, r0
 800aade:	460c      	mov	r4, r1
 800aae0:	4618      	mov	r0, r3
 800aae2:	4621      	mov	r1, r4
 800aae4:	f7f6 f898 	bl	8000c18 <__aeabi_d2f>
 800aae8:	4602      	mov	r2, r0
 800aaea:	4b1c      	ldr	r3, [pc, #112]	; (800ab5c <cppLoop+0x28ec>)
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	e012      	b.n	800ab16 <cppLoop+0x28a6>
				adj_dec3 = adj_dec3 - 0.1;
 800aaf0:	4b1b      	ldr	r3, [pc, #108]	; (800ab60 <cppLoop+0x28f0>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7f5 fd3f 	bl	8000578 <__aeabi_f2d>
 800aafa:	a30b      	add	r3, pc, #44	; (adr r3, 800ab28 <cppLoop+0x28b8>)
 800aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab00:	f7f5 fbda 	bl	80002b8 <__aeabi_dsub>
 800ab04:	4603      	mov	r3, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	4618      	mov	r0, r3
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	f7f6 f884 	bl	8000c18 <__aeabi_d2f>
 800ab10:	4602      	mov	r2, r0
 800ab12:	4b13      	ldr	r3, [pc, #76]	; (800ab60 <cppLoop+0x28f0>)
 800ab14:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800ab16:	2200      	movs	r2, #0
 800ab18:	f04f 31ff 	mov.w	r1, #4294967295
 800ab1c:	4805      	ldr	r0, [pc, #20]	; (800ab34 <cppLoop+0x28c4>)
 800ab1e:	f7f7 fbd5 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800ab22:	e3d1      	b.n	800b2c8 <cppLoop+0x3058>
 800ab24:	f3af 8000 	nop.w
 800ab28:	9999999a 	.word	0x9999999a
 800ab2c:	3fb99999 	.word	0x3fb99999
 800ab30:	2000054c 	.word	0x2000054c
 800ab34:	20000558 	.word	0x20000558
 800ab38:	2004526c 	.word	0x2004526c
 800ab3c:	200452f8 	.word	0x200452f8
 800ab40:	20045300 	.word	0x20045300
 800ab44:	0801a798 	.word	0x0801a798
 800ab48:	0801a630 	.word	0x0801a630
 800ab4c:	0801a7a4 	.word	0x0801a7a4
 800ab50:	200209d4 	.word	0x200209d4
 800ab54:	0801a7b0 	.word	0x0801a7b0
 800ab58:	0801a7bc 	.word	0x0801a7bc
 800ab5c:	20045308 	.word	0x20045308
 800ab60:	20045310 	.word	0x20045310
		else if(joy_stick.getValue() == JOY_C){
 800ab64:	48b0      	ldr	r0, [pc, #704]	; (800ae28 <cppLoop+0x2bb8>)
 800ab66:	f7f7 fa91 	bl	800208c <_ZN8JoyStick8getValueEv>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	bf0c      	ite	eq
 800ab70:	2301      	moveq	r3, #1
 800ab72:	2300      	movne	r3, #0
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 83a6 	beq.w	800b2c8 <cppLoop+0x3058>
			led.LR(-1, 1);
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	f04f 31ff 	mov.w	r1, #4294967295
 800ab82:	48aa      	ldr	r0, [pc, #680]	; (800ae2c <cppLoop+0x2bbc>)
 800ab84:	f7f7 fba2 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800ab88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ab8c:	f000 fcd4 	bl	800b538 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC3.TXT", 1, &adj_acc3, OVER_WRITE);
 800ab90:	2300      	movs	r3, #0
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	4ba6      	ldr	r3, [pc, #664]	; (800ae30 <cppLoop+0x2bc0>)
 800ab96:	2201      	movs	r2, #1
 800ab98:	49a6      	ldr	r1, [pc, #664]	; (800ae34 <cppLoop+0x2bc4>)
 800ab9a:	48a7      	ldr	r0, [pc, #668]	; (800ae38 <cppLoop+0x2bc8>)
 800ab9c:	f7f6 fe5e 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC3.TXT", 1, &adj_dec3, OVER_WRITE);
 800aba0:	2300      	movs	r3, #0
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	4ba5      	ldr	r3, [pc, #660]	; (800ae3c <cppLoop+0x2bcc>)
 800aba6:	2201      	movs	r2, #1
 800aba8:	49a5      	ldr	r1, [pc, #660]	; (800ae40 <cppLoop+0x2bd0>)
 800abaa:	48a3      	ldr	r0, [pc, #652]	; (800ae38 <cppLoop+0x2bc8>)
 800abac:	f7f6 fe56 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec3(adj_acc3, adj_dec3);
 800abb0:	4b9f      	ldr	r3, [pc, #636]	; (800ae30 <cppLoop+0x2bc0>)
 800abb2:	edd3 7a00 	vldr	s15, [r3]
 800abb6:	4ba1      	ldr	r3, [pc, #644]	; (800ae3c <cppLoop+0x2bcc>)
 800abb8:	ed93 7a00 	vldr	s14, [r3]
 800abbc:	eef0 0a47 	vmov.f32	s1, s14
 800abc0:	eeb0 0a67 	vmov.f32	s0, s15
 800abc4:	489f      	ldr	r0, [pc, #636]	; (800ae44 <cppLoop+0x2bd4>)
 800abc6:	f7f9 fbaa 	bl	800431e <_ZN9LineTrace13setMaxAccDec3Eff>
			led.LR(-1, 0);
 800abca:	2200      	movs	r2, #0
 800abcc:	f04f 31ff 	mov.w	r1, #4294967295
 800abd0:	4896      	ldr	r0, [pc, #600]	; (800ae2c <cppLoop+0x2bbc>)
 800abd2:	f7f7 fb7b 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800abd6:	e377      	b.n	800b2c8 <cppLoop+0x3058>

	case 10:
		led.fullColor('W');
 800abd8:	2157      	movs	r1, #87	; 0x57
 800abda:	4894      	ldr	r0, [pc, #592]	; (800ae2c <cppLoop+0x2bbc>)
 800abdc:	f7f7 faba 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800abe0:	f7f6 fa5e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800abe4:	2100      	movs	r1, #0
 800abe6:	2000      	movs	r0, #0
 800abe8:	f7f6 fa6a 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC5:%3.1f", line_trace.getMaxAcc4());
 800abec:	4895      	ldr	r0, [pc, #596]	; (800ae44 <cppLoop+0x2bd4>)
 800abee:	f7f9 fc36 	bl	800445e <_ZN9LineTrace10getMaxAcc4Ev>
 800abf2:	ee10 3a10 	vmov	r3, s0
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7f5 fcbe 	bl	8000578 <__aeabi_f2d>
 800abfc:	4603      	mov	r3, r0
 800abfe:	460c      	mov	r4, r1
 800ac00:	461a      	mov	r2, r3
 800ac02:	4623      	mov	r3, r4
 800ac04:	4890      	ldr	r0, [pc, #576]	; (800ae48 <cppLoop+0x2bd8>)
 800ac06:	f7f6 fa85 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	f7f6 fa57 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC5:%3.1f", line_trace.getMaxDec4());
 800ac12:	488c      	ldr	r0, [pc, #560]	; (800ae44 <cppLoop+0x2bd4>)
 800ac14:	f7f9 fc35 	bl	8004482 <_ZN9LineTrace10getMaxDec4Ev>
 800ac18:	ee10 3a10 	vmov	r3, s0
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7f5 fcab 	bl	8000578 <__aeabi_f2d>
 800ac22:	4603      	mov	r3, r0
 800ac24:	460c      	mov	r4, r1
 800ac26:	461a      	mov	r2, r3
 800ac28:	4623      	mov	r3, r4
 800ac2a:	4888      	ldr	r0, [pc, #544]	; (800ae4c <cppLoop+0x2bdc>)
 800ac2c:	f7f6 fa72 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800ac30:	487d      	ldr	r0, [pc, #500]	; (800ae28 <cppLoop+0x2bb8>)
 800ac32:	f7f7 fa2b 	bl	800208c <_ZN8JoyStick8getValueEv>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	bf0c      	ite	eq
 800ac3c:	2301      	moveq	r3, #1
 800ac3e:	2300      	movne	r3, #0
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d021      	beq.n	800ac8a <cppLoop+0x2a1a>
			led.LR(-1, 1);
 800ac46:	2201      	movs	r2, #1
 800ac48:	f04f 31ff 	mov.w	r1, #4294967295
 800ac4c:	4877      	ldr	r0, [pc, #476]	; (800ae2c <cppLoop+0x2bbc>)
 800ac4e:	f7f7 fb3d 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800ac52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ac56:	f000 fc6f 	bl	800b538 <HAL_Delay>

			selector_acc++;
 800ac5a:	4b7d      	ldr	r3, [pc, #500]	; (800ae50 <cppLoop+0x2be0>)
 800ac5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	3301      	adds	r3, #1
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	b21a      	sxth	r2, r3
 800ac68:	4b79      	ldr	r3, [pc, #484]	; (800ae50 <cppLoop+0x2be0>)
 800ac6a:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800ac6c:	4b78      	ldr	r3, [pc, #480]	; (800ae50 <cppLoop+0x2be0>)
 800ac6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	dd02      	ble.n	800ac7c <cppLoop+0x2a0c>
 800ac76:	4b76      	ldr	r3, [pc, #472]	; (800ae50 <cppLoop+0x2be0>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f04f 31ff 	mov.w	r1, #4294967295
 800ac82:	486a      	ldr	r0, [pc, #424]	; (800ae2c <cppLoop+0x2bbc>)
 800ac84:	f7f7 fb22 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC4.TXT", 1, &adj_dec4, OVER_WRITE);
			line_trace.setMaxAccDec4(adj_acc4, adj_dec4);

			led.LR(-1, 0);
		}
		break;
 800ac88:	e320      	b.n	800b2cc <cppLoop+0x305c>
		else if(joy_stick.getValue() == JOY_R){
 800ac8a:	4867      	ldr	r0, [pc, #412]	; (800ae28 <cppLoop+0x2bb8>)
 800ac8c:	f7f7 f9fe 	bl	800208c <_ZN8JoyStick8getValueEv>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b10      	cmp	r3, #16
 800ac94:	bf0c      	ite	eq
 800ac96:	2301      	moveq	r3, #1
 800ac98:	2300      	movne	r3, #0
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d03b      	beq.n	800ad18 <cppLoop+0x2aa8>
			led.LR(-1, 1);
 800aca0:	2201      	movs	r2, #1
 800aca2:	f04f 31ff 	mov.w	r1, #4294967295
 800aca6:	4861      	ldr	r0, [pc, #388]	; (800ae2c <cppLoop+0x2bbc>)
 800aca8:	f7f7 fb10 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800acac:	2064      	movs	r0, #100	; 0x64
 800acae:	f000 fc43 	bl	800b538 <HAL_Delay>
			if(selector_acc == 0){
 800acb2:	4b67      	ldr	r3, [pc, #412]	; (800ae50 <cppLoop+0x2be0>)
 800acb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d113      	bne.n	800ace4 <cppLoop+0x2a74>
				adj_acc4 = adj_acc4 + 0.1;
 800acbc:	4b65      	ldr	r3, [pc, #404]	; (800ae54 <cppLoop+0x2be4>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7f5 fc59 	bl	8000578 <__aeabi_f2d>
 800acc6:	a356      	add	r3, pc, #344	; (adr r3, 800ae20 <cppLoop+0x2bb0>)
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	f7f5 faf6 	bl	80002bc <__adddf3>
 800acd0:	4603      	mov	r3, r0
 800acd2:	460c      	mov	r4, r1
 800acd4:	4618      	mov	r0, r3
 800acd6:	4621      	mov	r1, r4
 800acd8:	f7f5 ff9e 	bl	8000c18 <__aeabi_d2f>
 800acdc:	4602      	mov	r2, r0
 800acde:	4b5d      	ldr	r3, [pc, #372]	; (800ae54 <cppLoop+0x2be4>)
 800ace0:	601a      	str	r2, [r3, #0]
 800ace2:	e012      	b.n	800ad0a <cppLoop+0x2a9a>
				adj_dec4 = adj_dec4 + 0.1;
 800ace4:	4b5c      	ldr	r3, [pc, #368]	; (800ae58 <cppLoop+0x2be8>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7f5 fc45 	bl	8000578 <__aeabi_f2d>
 800acee:	a34c      	add	r3, pc, #304	; (adr r3, 800ae20 <cppLoop+0x2bb0>)
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f7f5 fae2 	bl	80002bc <__adddf3>
 800acf8:	4603      	mov	r3, r0
 800acfa:	460c      	mov	r4, r1
 800acfc:	4618      	mov	r0, r3
 800acfe:	4621      	mov	r1, r4
 800ad00:	f7f5 ff8a 	bl	8000c18 <__aeabi_d2f>
 800ad04:	4602      	mov	r2, r0
 800ad06:	4b54      	ldr	r3, [pc, #336]	; (800ae58 <cppLoop+0x2be8>)
 800ad08:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f04f 31ff 	mov.w	r1, #4294967295
 800ad10:	4846      	ldr	r0, [pc, #280]	; (800ae2c <cppLoop+0x2bbc>)
 800ad12:	f7f7 fadb 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800ad16:	e2d9      	b.n	800b2cc <cppLoop+0x305c>
		else if(joy_stick.getValue() == JOY_L){
 800ad18:	4843      	ldr	r0, [pc, #268]	; (800ae28 <cppLoop+0x2bb8>)
 800ad1a:	f7f7 f9b7 	bl	800208c <_ZN8JoyStick8getValueEv>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	bf0c      	ite	eq
 800ad24:	2301      	moveq	r3, #1
 800ad26:	2300      	movne	r3, #0
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d03b      	beq.n	800ada6 <cppLoop+0x2b36>
			led.LR(-1, 1);
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f04f 31ff 	mov.w	r1, #4294967295
 800ad34:	483d      	ldr	r0, [pc, #244]	; (800ae2c <cppLoop+0x2bbc>)
 800ad36:	f7f7 fac9 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800ad3a:	2064      	movs	r0, #100	; 0x64
 800ad3c:	f000 fbfc 	bl	800b538 <HAL_Delay>
			if(selector_acc == 0){
 800ad40:	4b43      	ldr	r3, [pc, #268]	; (800ae50 <cppLoop+0x2be0>)
 800ad42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d113      	bne.n	800ad72 <cppLoop+0x2b02>
				adj_acc4 = adj_acc4 - 0.1;
 800ad4a:	4b42      	ldr	r3, [pc, #264]	; (800ae54 <cppLoop+0x2be4>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7f5 fc12 	bl	8000578 <__aeabi_f2d>
 800ad54:	a332      	add	r3, pc, #200	; (adr r3, 800ae20 <cppLoop+0x2bb0>)
 800ad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5a:	f7f5 faad 	bl	80002b8 <__aeabi_dsub>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	460c      	mov	r4, r1
 800ad62:	4618      	mov	r0, r3
 800ad64:	4621      	mov	r1, r4
 800ad66:	f7f5 ff57 	bl	8000c18 <__aeabi_d2f>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	4b39      	ldr	r3, [pc, #228]	; (800ae54 <cppLoop+0x2be4>)
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	e012      	b.n	800ad98 <cppLoop+0x2b28>
				adj_dec4 = adj_dec4 - 0.1;
 800ad72:	4b39      	ldr	r3, [pc, #228]	; (800ae58 <cppLoop+0x2be8>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7f5 fbfe 	bl	8000578 <__aeabi_f2d>
 800ad7c:	a328      	add	r3, pc, #160	; (adr r3, 800ae20 <cppLoop+0x2bb0>)
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	f7f5 fa99 	bl	80002b8 <__aeabi_dsub>
 800ad86:	4603      	mov	r3, r0
 800ad88:	460c      	mov	r4, r1
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	f7f5 ff43 	bl	8000c18 <__aeabi_d2f>
 800ad92:	4602      	mov	r2, r0
 800ad94:	4b30      	ldr	r3, [pc, #192]	; (800ae58 <cppLoop+0x2be8>)
 800ad96:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f04f 31ff 	mov.w	r1, #4294967295
 800ad9e:	4823      	ldr	r0, [pc, #140]	; (800ae2c <cppLoop+0x2bbc>)
 800ada0:	f7f7 fa94 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800ada4:	e292      	b.n	800b2cc <cppLoop+0x305c>
		else if(joy_stick.getValue() == JOY_C){
 800ada6:	4820      	ldr	r0, [pc, #128]	; (800ae28 <cppLoop+0x2bb8>)
 800ada8:	f7f7 f970 	bl	800208c <_ZN8JoyStick8getValueEv>
 800adac:	4603      	mov	r3, r0
 800adae:	2b02      	cmp	r3, #2
 800adb0:	bf0c      	ite	eq
 800adb2:	2301      	moveq	r3, #1
 800adb4:	2300      	movne	r3, #0
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 8287 	beq.w	800b2cc <cppLoop+0x305c>
			led.LR(-1, 1);
 800adbe:	2201      	movs	r2, #1
 800adc0:	f04f 31ff 	mov.w	r1, #4294967295
 800adc4:	4819      	ldr	r0, [pc, #100]	; (800ae2c <cppLoop+0x2bbc>)
 800adc6:	f7f7 fa81 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800adca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800adce:	f000 fbb3 	bl	800b538 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC4.TXT", 1, &adj_acc4, OVER_WRITE);
 800add2:	2300      	movs	r3, #0
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	4b1f      	ldr	r3, [pc, #124]	; (800ae54 <cppLoop+0x2be4>)
 800add8:	2201      	movs	r2, #1
 800adda:	4920      	ldr	r1, [pc, #128]	; (800ae5c <cppLoop+0x2bec>)
 800addc:	4816      	ldr	r0, [pc, #88]	; (800ae38 <cppLoop+0x2bc8>)
 800adde:	f7f6 fd3d 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC4.TXT", 1, &adj_dec4, OVER_WRITE);
 800ade2:	2300      	movs	r3, #0
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	4b1c      	ldr	r3, [pc, #112]	; (800ae58 <cppLoop+0x2be8>)
 800ade8:	2201      	movs	r2, #1
 800adea:	491d      	ldr	r1, [pc, #116]	; (800ae60 <cppLoop+0x2bf0>)
 800adec:	4812      	ldr	r0, [pc, #72]	; (800ae38 <cppLoop+0x2bc8>)
 800adee:	f7f6 fd35 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec4(adj_acc4, adj_dec4);
 800adf2:	4b18      	ldr	r3, [pc, #96]	; (800ae54 <cppLoop+0x2be4>)
 800adf4:	edd3 7a00 	vldr	s15, [r3]
 800adf8:	4b17      	ldr	r3, [pc, #92]	; (800ae58 <cppLoop+0x2be8>)
 800adfa:	ed93 7a00 	vldr	s14, [r3]
 800adfe:	eef0 0a47 	vmov.f32	s1, s14
 800ae02:	eeb0 0a67 	vmov.f32	s0, s15
 800ae06:	480f      	ldr	r0, [pc, #60]	; (800ae44 <cppLoop+0x2bd4>)
 800ae08:	f7f9 faa3 	bl	8004352 <_ZN9LineTrace13setMaxAccDec4Eff>
			led.LR(-1, 0);
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f04f 31ff 	mov.w	r1, #4294967295
 800ae12:	4806      	ldr	r0, [pc, #24]	; (800ae2c <cppLoop+0x2bbc>)
 800ae14:	f7f7 fa5a 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800ae18:	e258      	b.n	800b2cc <cppLoop+0x305c>
 800ae1a:	bf00      	nop
 800ae1c:	f3af 8000 	nop.w
 800ae20:	9999999a 	.word	0x9999999a
 800ae24:	3fb99999 	.word	0x3fb99999
 800ae28:	2000054c 	.word	0x2000054c
 800ae2c:	20000558 	.word	0x20000558
 800ae30:	20045308 	.word	0x20045308
 800ae34:	0801a7c8 	.word	0x0801a7c8
 800ae38:	0801a630 	.word	0x0801a630
 800ae3c:	20045310 	.word	0x20045310
 800ae40:	0801a7d4 	.word	0x0801a7d4
 800ae44:	200209d4 	.word	0x200209d4
 800ae48:	0801a7e0 	.word	0x0801a7e0
 800ae4c:	0801a7ec 	.word	0x0801a7ec
 800ae50:	2004526c 	.word	0x2004526c
 800ae54:	20045318 	.word	0x20045318
 800ae58:	20045320 	.word	0x20045320
 800ae5c:	0801a7f8 	.word	0x0801a7f8
 800ae60:	0801a804 	.word	0x0801a804

	case 11:
		led.fullColor('~');
 800ae64:	217e      	movs	r1, #126	; 0x7e
 800ae66:	48be      	ldr	r0, [pc, #760]	; (800b160 <cppLoop+0x2ef0>)
 800ae68:	f7f7 f974 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800ae6c:	f7f6 f918 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800ae70:	2100      	movs	r1, #0
 800ae72:	2000      	movs	r0, #0
 800ae74:	f7f6 f924 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800ae78:	48ba      	ldr	r0, [pc, #744]	; (800b164 <cppLoop+0x2ef4>)
 800ae7a:	f7f6 f94b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800ae7e:	2101      	movs	r1, #1
 800ae80:	2000      	movs	r0, #0
 800ae82:	f7f6 f91d 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800ae86:	48b8      	ldr	r0, [pc, #736]	; (800b168 <cppLoop+0x2ef8>)
 800ae88:	f7f6 f944 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800ae8c:	48b7      	ldr	r0, [pc, #732]	; (800b16c <cppLoop+0x2efc>)
 800ae8e:	f7f7 f8fd 	bl	800208c <_ZN8JoyStick8getValueEv>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	bf0c      	ite	eq
 800ae98:	2301      	moveq	r3, #1
 800ae9a:	2300      	movne	r3, #0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 8216 	beq.w	800b2d0 <cppLoop+0x3060>
			HAL_Delay(500);
 800aea4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aea8:	f000 fb46 	bl	800b538 <HAL_Delay>
			led.LR(-1, 1);
 800aeac:	2201      	movs	r2, #1
 800aeae:	f04f 31ff 	mov.w	r1, #4294967295
 800aeb2:	48ab      	ldr	r0, [pc, #684]	; (800b160 <cppLoop+0x2ef0>)
 800aeb4:	f7f7 fa0a 	bl	80022cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800aeb8:	2102      	movs	r1, #2
 800aeba:	48ad      	ldr	r0, [pc, #692]	; (800b170 <cppLoop+0x2f00>)
 800aebc:	f7f9 fbba 	bl	8004634 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800aec0:	4bac      	ldr	r3, [pc, #688]	; (800b174 <cppLoop+0x2f04>)
 800aec2:	edd3 7a00 	vldr	s15, [r3]
 800aec6:	eeb0 0a67 	vmov.f32	s0, s15
 800aeca:	48a9      	ldr	r0, [pc, #676]	; (800b170 <cppLoop+0x2f00>)
 800aecc:	f7f9 f8d3 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800aed0:	4ba8      	ldr	r3, [pc, #672]	; (800b174 <cppLoop+0x2f04>)
 800aed2:	edd3 7a00 	vldr	s15, [r3]
 800aed6:	eeb0 0a67 	vmov.f32	s0, s15
 800aeda:	48a5      	ldr	r0, [pc, #660]	; (800b170 <cppLoop+0x2f00>)
 800aedc:	f7f9 f8db 	bl	8004096 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800aee0:	4ba4      	ldr	r3, [pc, #656]	; (800b174 <cppLoop+0x2f04>)
 800aee2:	edd3 7a00 	vldr	s15, [r3]
 800aee6:	eeb0 0a67 	vmov.f32	s0, s15
 800aeea:	48a1      	ldr	r0, [pc, #644]	; (800b170 <cppLoop+0x2f00>)
 800aeec:	f7f9 f8e3 	bl	80040b6 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800aef0:	489f      	ldr	r0, [pc, #636]	; (800b170 <cppLoop+0x2f00>)
 800aef2:	f7f9 ff07 	bl	8004d04 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800aef6:	2200      	movs	r2, #0
 800aef8:	f04f 31ff 	mov.w	r1, #4294967295
 800aefc:	4898      	ldr	r0, [pc, #608]	; (800b160 <cppLoop+0x2ef0>)
 800aefe:	f7f7 f9e5 	bl	80022cc <_ZN3LED2LREaa>
		}

		break;
 800af02:	e1e5      	b.n	800b2d0 <cppLoop+0x3060>

	case 12:
		led.fullColor('~');
 800af04:	217e      	movs	r1, #126	; 0x7e
 800af06:	4896      	ldr	r0, [pc, #600]	; (800b160 <cppLoop+0x2ef0>)
 800af08:	f7f7 f924 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800af0c:	f7f6 f8c8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800af10:	2100      	movs	r1, #0
 800af12:	2000      	movs	r0, #0
 800af14:	f7f6 f8d4 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800af18:	4897      	ldr	r0, [pc, #604]	; (800b178 <cppLoop+0x2f08>)
 800af1a:	f7f6 f8fb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800af1e:	2101      	movs	r1, #1
 800af20:	2000      	movs	r0, #0
 800af22:	f7f6 f8cd 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 800af26:	4895      	ldr	r0, [pc, #596]	; (800b17c <cppLoop+0x2f0c>)
 800af28:	f7f6 f8f4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800af2c:	488f      	ldr	r0, [pc, #572]	; (800b16c <cppLoop+0x2efc>)
 800af2e:	f7f7 f8ad 	bl	800208c <_ZN8JoyStick8getValueEv>
 800af32:	4603      	mov	r3, r0
 800af34:	2b02      	cmp	r3, #2
 800af36:	bf0c      	ite	eq
 800af38:	2301      	moveq	r3, #1
 800af3a:	2300      	movne	r3, #0
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f000 81c8 	beq.w	800b2d4 <cppLoop+0x3064>
			led.LR(-1, 1);
 800af44:	2201      	movs	r2, #1
 800af46:	f04f 31ff 	mov.w	r1, #4294967295
 800af4a:	4885      	ldr	r0, [pc, #532]	; (800b160 <cppLoop+0x2ef0>)
 800af4c:	f7f7 f9be 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 800af50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800af54:	f000 faf0 	bl	800b538 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800af58:	ed9f 0a89 	vldr	s0, [pc, #548]	; 800b180 <cppLoop+0x2f10>
 800af5c:	4884      	ldr	r0, [pc, #528]	; (800b170 <cppLoop+0x2f00>)
 800af5e:	f7f9 f87b 	bl	8004058 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800af62:	4883      	ldr	r0, [pc, #524]	; (800b170 <cppLoop+0x2f00>)
 800af64:	f7f9 fb78 	bl	8004658 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800af68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800af6c:	f000 fae4 	bl	800b538 <HAL_Delay>

			led.fullColor('R');
 800af70:	2152      	movs	r1, #82	; 0x52
 800af72:	487b      	ldr	r0, [pc, #492]	; (800b160 <cppLoop+0x2ef0>)
 800af74:	f7f7 f8ee 	bl	8002154 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800af78:	4882      	ldr	r0, [pc, #520]	; (800b184 <cppLoop+0x2f14>)
 800af7a:	f7f6 fb87 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 800af7e:	f242 7010 	movw	r0, #10000	; 0x2710
 800af82:	f000 fad9 	bl	800b538 <HAL_Delay>

			line_trace.stop();
 800af86:	487a      	ldr	r0, [pc, #488]	; (800b170 <cppLoop+0x2f00>)
 800af88:	f7f9 fd1e 	bl	80049c8 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800af8c:	497e      	ldr	r1, [pc, #504]	; (800b188 <cppLoop+0x2f18>)
 800af8e:	487f      	ldr	r0, [pc, #508]	; (800b18c <cppLoop+0x2f1c>)
 800af90:	f7f6 fbef 	bl	8001772 <user_fopen>
			float d = encoder.getDistance();
 800af94:	487b      	ldr	r0, [pc, #492]	; (800b184 <cppLoop+0x2f14>)
 800af96:	f7f6 fb3d 	bl	8001614 <_ZN7Encoder11getDistanceEv>
 800af9a:	eef0 7a40 	vmov.f32	s15, s0
 800af9e:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 800afa2:	1d3b      	adds	r3, r7, #4
 800afa4:	2201      	movs	r2, #1
 800afa6:	4619      	mov	r1, r3
 800afa8:	2001      	movs	r0, #1
 800afaa:	f7f6 fc05 	bl	80017b8 <sd_write_float>
			user_fclose();
 800afae:	f7f6 fbf3 	bl	8001798 <user_fclose>

			led.LR(-1, 0);
 800afb2:	2200      	movs	r2, #0
 800afb4:	f04f 31ff 	mov.w	r1, #4294967295
 800afb8:	4869      	ldr	r0, [pc, #420]	; (800b160 <cppLoop+0x2ef0>)
 800afba:	f7f7 f987 	bl	80022cc <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 800afbe:	e189      	b.n	800b2d4 <cppLoop+0x3064>

	case 13:
		led.fullColor('~');
 800afc0:	217e      	movs	r1, #126	; 0x7e
 800afc2:	4867      	ldr	r0, [pc, #412]	; (800b160 <cppLoop+0x2ef0>)
 800afc4:	f7f7 f8c6 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800afc8:	f7f6 f86a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800afcc:	2100      	movs	r1, #0
 800afce:	2000      	movs	r0, #0
 800afd0:	f7f6 f876 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800afd4:	486e      	ldr	r0, [pc, #440]	; (800b190 <cppLoop+0x2f20>)
 800afd6:	f7f6 f89d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800afda:	2101      	movs	r1, #1
 800afdc:	2000      	movs	r0, #0
 800afde:	f7f6 f86f 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800afe2:	486c      	ldr	r0, [pc, #432]	; (800b194 <cppLoop+0x2f24>)
 800afe4:	f7f6 f896 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800afe8:	4860      	ldr	r0, [pc, #384]	; (800b16c <cppLoop+0x2efc>)
 800afea:	f7f7 f84f 	bl	800208c <_ZN8JoyStick8getValueEv>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	bf0c      	ite	eq
 800aff4:	2301      	moveq	r3, #1
 800aff6:	2300      	movne	r3, #0
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	f000 816c 	beq.w	800b2d8 <cppLoop+0x3068>
			HAL_Delay(1500);
 800b000:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800b004:	f000 fa98 	bl	800b538 <HAL_Delay>
			led.LR(-1, 1);
 800b008:	2201      	movs	r2, #1
 800b00a:	f04f 31ff 	mov.w	r1, #4294967295
 800b00e:	4854      	ldr	r0, [pc, #336]	; (800b160 <cppLoop+0x2ef0>)
 800b010:	f7f7 f95c 	bl	80022cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 800b014:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b018:	f000 fa8e 	bl	800b538 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800b01c:	eddf 1a5e 	vldr	s3, [pc, #376]	; 800b198 <cppLoop+0x2f28>
 800b020:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 800b198 <cppLoop+0x2f28>
 800b024:	eddf 0a5c 	vldr	s1, [pc, #368]	; 800b198 <cppLoop+0x2f28>
 800b028:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800b198 <cppLoop+0x2f28>
 800b02c:	485b      	ldr	r0, [pc, #364]	; (800b19c <cppLoop+0x2f2c>)
 800b02e:	f7f6 f90f 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 800b032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b036:	f000 fa7f 	bl	800b538 <HAL_Delay>

			logger.start();
 800b03a:	4859      	ldr	r0, [pc, #356]	; (800b1a0 <cppLoop+0x2f30>)
 800b03c:	f7fa fa6d 	bl	800551a <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800b040:	4858      	ldr	r0, [pc, #352]	; (800b1a4 <cppLoop+0x2f34>)
 800b042:	f7fb fa4a 	bl	80064da <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 800b046:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800b180 <cppLoop+0x2f10>
 800b04a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b04e:	4855      	ldr	r0, [pc, #340]	; (800b1a4 <cppLoop+0x2f34>)
 800b050:	f7fb f9d6 	bl	8006400 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800b054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b058:	f000 fa6e 	bl	800b538 <HAL_Delay>

			logger.stop();
 800b05c:	4850      	ldr	r0, [pc, #320]	; (800b1a0 <cppLoop+0x2f30>)
 800b05e:	f7fa fa7b 	bl	8005558 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800b062:	4850      	ldr	r0, [pc, #320]	; (800b1a4 <cppLoop+0x2f34>)
 800b064:	f7fb fa4c 	bl	8006500 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 800b068:	484c      	ldr	r0, [pc, #304]	; (800b19c <cppLoop+0x2f2c>)
 800b06a:	f7f6 f98b 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800b06e:	4a4e      	ldr	r2, [pc, #312]	; (800b1a8 <cppLoop+0x2f38>)
 800b070:	494e      	ldr	r1, [pc, #312]	; (800b1ac <cppLoop+0x2f3c>)
 800b072:	484b      	ldr	r0, [pc, #300]	; (800b1a0 <cppLoop+0x2f30>)
 800b074:	f7fa f909 	bl	800528a <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800b078:	2200      	movs	r2, #0
 800b07a:	f04f 31ff 	mov.w	r1, #4294967295
 800b07e:	4838      	ldr	r0, [pc, #224]	; (800b160 <cppLoop+0x2ef0>)
 800b080:	f7f7 f924 	bl	80022cc <_ZN3LED2LREaa>
		}
		break;
 800b084:	e128      	b.n	800b2d8 <cppLoop+0x3068>

	case 14:

		led.fullColor('W');
 800b086:	2157      	movs	r1, #87	; 0x57
 800b088:	4835      	ldr	r0, [pc, #212]	; (800b160 <cppLoop+0x2ef0>)
 800b08a:	f7f7 f863 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800b08e:	f7f6 f807 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800b092:	2100      	movs	r1, #0
 800b094:	2000      	movs	r0, #0
 800b096:	f7f6 f813 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 800b09a:	4845      	ldr	r0, [pc, #276]	; (800b1b0 <cppLoop+0x2f40>)
 800b09c:	f7f6 f83a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	2000      	movs	r0, #0
 800b0a4:	f7f6 f80c 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800b0a8:	4b32      	ldr	r3, [pc, #200]	; (800b174 <cppLoop+0x2f04>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7f5 fa63 	bl	8000578 <__aeabi_f2d>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4623      	mov	r3, r4
 800b0ba:	483e      	ldr	r0, [pc, #248]	; (800b1b4 <cppLoop+0x2f44>)
 800b0bc:	f7f6 f82a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800b0c0:	482a      	ldr	r0, [pc, #168]	; (800b16c <cppLoop+0x2efc>)
 800b0c2:	f7f6 ffe3 	bl	800208c <_ZN8JoyStick8getValueEv>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	bf0c      	ite	eq
 800b0cc:	2301      	moveq	r3, #1
 800b0ce:	2300      	movne	r3, #0
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f000 8102 	beq.w	800b2dc <cppLoop+0x306c>
			HAL_Delay(500);
 800b0d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b0dc:	f000 fa2c 	bl	800b538 <HAL_Delay>

			led.LR(1, -1);
 800b0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	481e      	ldr	r0, [pc, #120]	; (800b160 <cppLoop+0x2ef0>)
 800b0e8:	f7f7 f8f0 	bl	80022cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800b0ec:	2102      	movs	r1, #2
 800b0ee:	4820      	ldr	r0, [pc, #128]	; (800b170 <cppLoop+0x2f00>)
 800b0f0:	f7f9 faa0 	bl	8004634 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800b0f4:	4b30      	ldr	r3, [pc, #192]	; (800b1b8 <cppLoop+0x2f48>)
 800b0f6:	edd3 7a00 	vldr	s15, [r3]
 800b0fa:	eeb0 0a67 	vmov.f32	s0, s15
 800b0fe:	481c      	ldr	r0, [pc, #112]	; (800b170 <cppLoop+0x2f00>)
 800b100:	f7f8 ffb9 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800b104:	4b1b      	ldr	r3, [pc, #108]	; (800b174 <cppLoop+0x2f04>)
 800b106:	edd3 7a00 	vldr	s15, [r3]
 800b10a:	eeb0 0a67 	vmov.f32	s0, s15
 800b10e:	4818      	ldr	r0, [pc, #96]	; (800b170 <cppLoop+0x2f00>)
 800b110:	f7f8 ffc1 	bl	8004096 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800b114:	4b17      	ldr	r3, [pc, #92]	; (800b174 <cppLoop+0x2f04>)
 800b116:	edd3 7a00 	vldr	s15, [r3]
 800b11a:	eeb0 0a67 	vmov.f32	s0, s15
 800b11e:	4814      	ldr	r0, [pc, #80]	; (800b170 <cppLoop+0x2f00>)
 800b120:	f7f8 ffc9 	bl	80040b6 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800b124:	4812      	ldr	r0, [pc, #72]	; (800b170 <cppLoop+0x2f00>)
 800b126:	f7f9 fded 	bl	8004d04 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 800b12a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b12e:	f000 fa03 	bl	800b538 <HAL_Delay>

			line_trace.running();
 800b132:	480f      	ldr	r0, [pc, #60]	; (800b170 <cppLoop+0x2f00>)
 800b134:	f7f9 face 	bl	80046d4 <_ZN9LineTrace7runningEv>
			logger.stop();
 800b138:	4819      	ldr	r0, [pc, #100]	; (800b1a0 <cppLoop+0x2f30>)
 800b13a:	f7fa fa0d 	bl	8005558 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800b13e:	4a1f      	ldr	r2, [pc, #124]	; (800b1bc <cppLoop+0x2f4c>)
 800b140:	491f      	ldr	r1, [pc, #124]	; (800b1c0 <cppLoop+0x2f50>)
 800b142:	4817      	ldr	r0, [pc, #92]	; (800b1a0 <cppLoop+0x2f30>)
 800b144:	f7fa f8a1 	bl	800528a <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800b148:	4a1e      	ldr	r2, [pc, #120]	; (800b1c4 <cppLoop+0x2f54>)
 800b14a:	491d      	ldr	r1, [pc, #116]	; (800b1c0 <cppLoop+0x2f50>)
 800b14c:	4814      	ldr	r0, [pc, #80]	; (800b1a0 <cppLoop+0x2f30>)
 800b14e:	f7fa f8b0 	bl	80052b2 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 800b152:	f04f 32ff 	mov.w	r2, #4294967295
 800b156:	2100      	movs	r1, #0
 800b158:	4801      	ldr	r0, [pc, #4]	; (800b160 <cppLoop+0x2ef0>)
 800b15a:	f7f7 f8b7 	bl	80022cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 800b15e:	e0bd      	b.n	800b2dc <cppLoop+0x306c>
 800b160:	20000558 	.word	0x20000558
 800b164:	0801a810 	.word	0x0801a810
 800b168:	0801a81c 	.word	0x0801a81c
 800b16c:	2000054c 	.word	0x2000054c
 800b170:	200209d4 	.word	0x200209d4
 800b174:	200452b8 	.word	0x200452b8
 800b178:	0801a828 	.word	0x0801a828
 800b17c:	0801a830 	.word	0x0801a830
 800b180:	00000000 	.word	0x00000000
 800b184:	20020928 	.word	0x20020928
 800b188:	0801a83c 	.word	0x0801a83c
 800b18c:	0801a844 	.word	0x0801a844
 800b190:	0801a850 	.word	0x0801a850
 800b194:	0801a854 	.word	0x0801a854
 800b198:	3ea3d70a 	.word	0x3ea3d70a
 800b19c:	200209d0 	.word	0x200209d0
 800b1a0:	2000057c 	.word	0x2000057c
 800b1a4:	20020950 	.word	0x20020950
 800b1a8:	0801a860 	.word	0x0801a860
 800b1ac:	0801a86c 	.word	0x0801a86c
 800b1b0:	0801a878 	.word	0x0801a878
 800b1b4:	0801a67c 	.word	0x0801a67c
 800b1b8:	200452c0 	.word	0x200452c0
 800b1bc:	0801a688 	.word	0x0801a688
 800b1c0:	0801a694 	.word	0x0801a694
 800b1c4:	0801a6a0 	.word	0x0801a6a0

	case 15:
		led.fullColor('W');
 800b1c8:	2157      	movs	r1, #87	; 0x57
 800b1ca:	4849      	ldr	r0, [pc, #292]	; (800b2f0 <cppLoop+0x3080>)
 800b1cc:	f7f6 ffc2 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800b1d0:	f7f5 ff66 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	f7f5 ff72 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800b1dc:	4845      	ldr	r0, [pc, #276]	; (800b2f4 <cppLoop+0x3084>)
 800b1de:	f7f5 ff99 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	f7f5 ff6b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800b1ea:	4b43      	ldr	r3, [pc, #268]	; (800b2f8 <cppLoop+0x3088>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7f5 f9c2 	bl	8000578 <__aeabi_f2d>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4623      	mov	r3, r4
 800b1fc:	483f      	ldr	r0, [pc, #252]	; (800b2fc <cppLoop+0x308c>)
 800b1fe:	f7f5 ff89 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800b202:	483f      	ldr	r0, [pc, #252]	; (800b300 <cppLoop+0x3090>)
 800b204:	f7f6 ff42 	bl	800208c <_ZN8JoyStick8getValueEv>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	bf0c      	ite	eq
 800b20e:	2301      	moveq	r3, #1
 800b210:	2300      	movne	r3, #0
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	d063      	beq.n	800b2e0 <cppLoop+0x3070>
			HAL_Delay(500);
 800b218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b21c:	f000 f98c 	bl	800b538 <HAL_Delay>

			led.LR(1, -1);
 800b220:	f04f 32ff 	mov.w	r2, #4294967295
 800b224:	2101      	movs	r1, #1
 800b226:	4832      	ldr	r0, [pc, #200]	; (800b2f0 <cppLoop+0x3080>)
 800b228:	f7f7 f850 	bl	80022cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800b22c:	2101      	movs	r1, #1
 800b22e:	4835      	ldr	r0, [pc, #212]	; (800b304 <cppLoop+0x3094>)
 800b230:	f7f9 fa00 	bl	8004634 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800b234:	4b34      	ldr	r3, [pc, #208]	; (800b308 <cppLoop+0x3098>)
 800b236:	edd3 7a00 	vldr	s15, [r3]
 800b23a:	eeb0 0a67 	vmov.f32	s0, s15
 800b23e:	4831      	ldr	r0, [pc, #196]	; (800b304 <cppLoop+0x3094>)
 800b240:	f7f8 ff19 	bl	8004076 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800b244:	4b2c      	ldr	r3, [pc, #176]	; (800b2f8 <cppLoop+0x3088>)
 800b246:	edd3 7a00 	vldr	s15, [r3]
 800b24a:	eeb0 0a67 	vmov.f32	s0, s15
 800b24e:	482d      	ldr	r0, [pc, #180]	; (800b304 <cppLoop+0x3094>)
 800b250:	f7f8 ff21 	bl	8004096 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800b254:	4b2c      	ldr	r3, [pc, #176]	; (800b308 <cppLoop+0x3098>)
 800b256:	edd3 7a00 	vldr	s15, [r3]
 800b25a:	eeb0 0a67 	vmov.f32	s0, s15
 800b25e:	4829      	ldr	r0, [pc, #164]	; (800b304 <cppLoop+0x3094>)
 800b260:	f7f8 ff29 	bl	80040b6 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800b264:	4827      	ldr	r0, [pc, #156]	; (800b304 <cppLoop+0x3094>)
 800b266:	f7f9 fd4d 	bl	8004d04 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 800b26a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b26e:	f000 f963 	bl	800b538 <HAL_Delay>

			line_trace.running();
 800b272:	4824      	ldr	r0, [pc, #144]	; (800b304 <cppLoop+0x3094>)
 800b274:	f7f9 fa2e 	bl	80046d4 <_ZN9LineTrace7runningEv>

			logger.stop();
 800b278:	4824      	ldr	r0, [pc, #144]	; (800b30c <cppLoop+0x309c>)
 800b27a:	f7fa f96d 	bl	8005558 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800b27e:	4a24      	ldr	r2, [pc, #144]	; (800b310 <cppLoop+0x30a0>)
 800b280:	4924      	ldr	r1, [pc, #144]	; (800b314 <cppLoop+0x30a4>)
 800b282:	4822      	ldr	r0, [pc, #136]	; (800b30c <cppLoop+0x309c>)
 800b284:	f7fa f801 	bl	800528a <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800b288:	4a23      	ldr	r2, [pc, #140]	; (800b318 <cppLoop+0x30a8>)
 800b28a:	4922      	ldr	r1, [pc, #136]	; (800b314 <cppLoop+0x30a4>)
 800b28c:	481f      	ldr	r0, [pc, #124]	; (800b30c <cppLoop+0x309c>)
 800b28e:	f7fa f810 	bl	80052b2 <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 800b292:	f04f 32ff 	mov.w	r2, #4294967295
 800b296:	2100      	movs	r1, #0
 800b298:	4815      	ldr	r0, [pc, #84]	; (800b2f0 <cppLoop+0x3080>)
 800b29a:	f7f7 f817 	bl	80022cc <_ZN3LED2LREaa>
		}

		break;
 800b29e:	e01f      	b.n	800b2e0 <cppLoop+0x3070>


	default:
		break;
 800b2a0:	bf00      	nop
 800b2a2:	e01e      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2a4:	bf00      	nop
 800b2a6:	e01c      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2a8:	bf00      	nop
 800b2aa:	e01a      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2ac:	bf00      	nop
 800b2ae:	e018      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2b0:	bf00      	nop
 800b2b2:	e016      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2b4:	bf00      	nop
 800b2b6:	e014      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2b8:	bf00      	nop
 800b2ba:	e012      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2bc:	bf00      	nop
 800b2be:	e010      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2c0:	bf00      	nop
 800b2c2:	e00e      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2c4:	bf00      	nop
 800b2c6:	e00c      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2c8:	bf00      	nop
 800b2ca:	e00a      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2cc:	bf00      	nop
 800b2ce:	e008      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2d0:	bf00      	nop
 800b2d2:	e006      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2d4:	bf00      	nop
 800b2d6:	e004      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2d8:	bf00      	nop
 800b2da:	e002      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2dc:	bf00      	nop
 800b2de:	e000      	b.n	800b2e2 <cppLoop+0x3072>
		break;
 800b2e0:	bf00      	nop

	}

	HAL_Delay(30);
 800b2e2:	201e      	movs	r0, #30
 800b2e4:	f000 f928 	bl	800b538 <HAL_Delay>

}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f0:	20000558 	.word	0x20000558
 800b2f4:	0801a884 	.word	0x0801a884
 800b2f8:	200452a8 	.word	0x200452a8
 800b2fc:	0801a67c 	.word	0x0801a67c
 800b300:	2000054c 	.word	0x2000054c
 800b304:	200209d4 	.word	0x200209d4
 800b308:	200452b0 	.word	0x200452b0
 800b30c:	2000057c 	.word	0x2000057c
 800b310:	0801a688 	.word	0x0801a688
 800b314:	0801a694 	.word	0x0801a694
 800b318:	0801a6a0 	.word	0x0801a6a0

0800b31c <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b088      	sub	sp, #32
 800b320:	af06      	add	r7, sp, #24
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d142      	bne.n	800b3b2 <_Z41__static_initialization_and_destruction_0ii+0x96>
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b332:	4293      	cmp	r3, r2
 800b334:	d13d      	bne.n	800b3b2 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 800b336:	4821      	ldr	r0, [pc, #132]	; (800b3bc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800b338:	f7f7 f800 	bl	800233c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800b33c:	4820      	ldr	r0, [pc, #128]	; (800b3c0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800b33e:	f7fa fc2f 	bl	8005ba0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800b342:	4820      	ldr	r0, [pc, #128]	; (800b3c4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800b344:	f7f6 fe96 	bl	8002074 <_ZN8JoyStickC1Ev>
Motor motor;
 800b348:	481f      	ldr	r0, [pc, #124]	; (800b3c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b34a:	f7fa f916 	bl	800557a <_ZN5MotorC1Ev>
IMU imu;
 800b34e:	481f      	ldr	r0, [pc, #124]	; (800b3cc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b350:	f7f6 fc9c 	bl	8001c8c <_ZN3IMUC1Ev>
Logger logger;
 800b354:	481e      	ldr	r0, [pc, #120]	; (800b3d0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b356:	f7f9 fe17 	bl	8004f88 <_ZN6LoggerC1Ev>
Encoder encoder;
 800b35a:	481e      	ldr	r0, [pc, #120]	; (800b3d4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b35c:	f7f6 f836 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 800b360:	4b1a      	ldr	r3, [pc, #104]	; (800b3cc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b362:	4a1c      	ldr	r2, [pc, #112]	; (800b3d4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b364:	4918      	ldr	r1, [pc, #96]	; (800b3c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b366:	481c      	ldr	r0, [pc, #112]	; (800b3d8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b368:	f7fa ff14 	bl	8006194 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800b36c:	4b1a      	ldr	r3, [pc, #104]	; (800b3d8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b36e:	4a17      	ldr	r2, [pc, #92]	; (800b3cc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b370:	4918      	ldr	r1, [pc, #96]	; (800b3d4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b372:	481a      	ldr	r0, [pc, #104]	; (800b3dc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b374:	f7fa f9e6 	bl	8005744 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 800b378:	4819      	ldr	r0, [pc, #100]	; (800b3e0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b37a:	f7f5 ff2b 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 800b37e:	4b18      	ldr	r3, [pc, #96]	; (800b3e0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b380:	9305      	str	r3, [sp, #20]
 800b382:	4b12      	ldr	r3, [pc, #72]	; (800b3cc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b384:	9304      	str	r3, [sp, #16]
 800b386:	4b12      	ldr	r3, [pc, #72]	; (800b3d0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b388:	9303      	str	r3, [sp, #12]
 800b38a:	4b14      	ldr	r3, [pc, #80]	; (800b3dc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b38c:	9302      	str	r3, [sp, #8]
 800b38e:	4b11      	ldr	r3, [pc, #68]	; (800b3d4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	4b10      	ldr	r3, [pc, #64]	; (800b3d8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b398:	4a08      	ldr	r2, [pc, #32]	; (800b3bc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800b39a:	490b      	ldr	r1, [pc, #44]	; (800b3c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b39c:	4811      	ldr	r0, [pc, #68]	; (800b3e4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800b39e:	f7f7 faab 	bl	80028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 800b3a2:	4a09      	ldr	r2, [pc, #36]	; (800b3c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b3a4:	490a      	ldr	r1, [pc, #40]	; (800b3d0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b3a6:	4810      	ldr	r0, [pc, #64]	; (800b3e8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800b3a8:	f7fa fd2c 	bl	8005e04 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800b3ac:	480f      	ldr	r0, [pc, #60]	; (800b3ec <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800b3ae:	f7fa fa87 	bl	80058c0 <_ZN13PathFollowingC1Ev>
}
 800b3b2:	bf00      	nop
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20000244 	.word	0x20000244
 800b3c0:	2000053c 	.word	0x2000053c
 800b3c4:	2000054c 	.word	0x2000054c
 800b3c8:	20000554 	.word	0x20000554
 800b3cc:	20000568 	.word	0x20000568
 800b3d0:	2000057c 	.word	0x2000057c
 800b3d4:	20020928 	.word	0x20020928
 800b3d8:	20020950 	.word	0x20020950
 800b3dc:	20020990 	.word	0x20020990
 800b3e0:	200209d0 	.word	0x200209d0
 800b3e4:	200209d4 	.word	0x200209d4
 800b3e8:	2002d934 	.word	0x2002d934
 800b3ec:	2002db40 	.word	0x2002db40

0800b3f0 <_GLOBAL__sub_I_line_sensor>:
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b3f8:	2001      	movs	r0, #1
 800b3fa:	f7ff ff8f 	bl	800b31c <_Z41__static_initialization_and_destruction_0ii>
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b400:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b438 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b404:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b406:	e003      	b.n	800b410 <LoopCopyDataInit>

0800b408 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b408:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b40a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b40c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b40e:	3104      	adds	r1, #4

0800b410 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b410:	480b      	ldr	r0, [pc, #44]	; (800b440 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b412:	4b0c      	ldr	r3, [pc, #48]	; (800b444 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b414:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b416:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b418:	d3f6      	bcc.n	800b408 <CopyDataInit>
  ldr  r2, =_sbss
 800b41a:	4a0b      	ldr	r2, [pc, #44]	; (800b448 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b41c:	e002      	b.n	800b424 <LoopFillZerobss>

0800b41e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b41e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b420:	f842 3b04 	str.w	r3, [r2], #4

0800b424 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b424:	4b09      	ldr	r3, [pc, #36]	; (800b44c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b426:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b428:	d3f9      	bcc.n	800b41e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b42a:	f7fc fdf5 	bl	8008018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b42e:	f00a fd95 	bl	8015f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b432:	f7fb f90d 	bl	8006650 <main>
  bx  lr    
 800b436:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b438:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800b43c:	0801aca0 	.word	0x0801aca0
  ldr  r0, =_sdata
 800b440:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b444:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800b448:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800b44c:	20049d08 	.word	0x20049d08

0800b450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b450:	e7fe      	b.n	800b450 <ADC_IRQHandler>
	...

0800b454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b458:	4b0e      	ldr	r3, [pc, #56]	; (800b494 <HAL_Init+0x40>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a0d      	ldr	r2, [pc, #52]	; (800b494 <HAL_Init+0x40>)
 800b45e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b464:	4b0b      	ldr	r3, [pc, #44]	; (800b494 <HAL_Init+0x40>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a0a      	ldr	r2, [pc, #40]	; (800b494 <HAL_Init+0x40>)
 800b46a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b46e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b470:	4b08      	ldr	r3, [pc, #32]	; (800b494 <HAL_Init+0x40>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a07      	ldr	r2, [pc, #28]	; (800b494 <HAL_Init+0x40>)
 800b476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b47a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b47c:	2003      	movs	r0, #3
 800b47e:	f000 fd51 	bl	800bf24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b482:	2000      	movs	r0, #0
 800b484:	f000 f808 	bl	800b498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b488:	f7fc f806 	bl	8007498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	40023c00 	.word	0x40023c00

0800b498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b4a0:	4b12      	ldr	r3, [pc, #72]	; (800b4ec <HAL_InitTick+0x54>)
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	4b12      	ldr	r3, [pc, #72]	; (800b4f0 <HAL_InitTick+0x58>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f000 fd69 	bl	800bf8e <HAL_SYSTICK_Config>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e00e      	b.n	800b4e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b0f      	cmp	r3, #15
 800b4ca:	d80a      	bhi.n	800b4e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	6879      	ldr	r1, [r7, #4]
 800b4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d4:	f000 fd31 	bl	800bf3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b4d8:	4a06      	ldr	r2, [pc, #24]	; (800b4f4 <HAL_InitTick+0x5c>)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e000      	b.n	800b4e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	20000000 	.word	0x20000000
 800b4f0:	20000008 	.word	0x20000008
 800b4f4:	20000004 	.word	0x20000004

0800b4f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b4fc:	4b06      	ldr	r3, [pc, #24]	; (800b518 <HAL_IncTick+0x20>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	461a      	mov	r2, r3
 800b502:	4b06      	ldr	r3, [pc, #24]	; (800b51c <HAL_IncTick+0x24>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4413      	add	r3, r2
 800b508:	4a04      	ldr	r2, [pc, #16]	; (800b51c <HAL_IncTick+0x24>)
 800b50a:	6013      	str	r3, [r2, #0]
}
 800b50c:	bf00      	nop
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	20000008 	.word	0x20000008
 800b51c:	20047c90 	.word	0x20047c90

0800b520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
  return uwTick;
 800b524:	4b03      	ldr	r3, [pc, #12]	; (800b534 <HAL_GetTick+0x14>)
 800b526:	681b      	ldr	r3, [r3, #0]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20047c90 	.word	0x20047c90

0800b538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b540:	f7ff ffee 	bl	800b520 <HAL_GetTick>
 800b544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b550:	d005      	beq.n	800b55e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b552:	4b09      	ldr	r3, [pc, #36]	; (800b578 <HAL_Delay+0x40>)
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	461a      	mov	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	4413      	add	r3, r2
 800b55c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b55e:	bf00      	nop
 800b560:	f7ff ffde 	bl	800b520 <HAL_GetTick>
 800b564:	4602      	mov	r2, r0
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d8f7      	bhi.n	800b560 <HAL_Delay+0x28>
  {
  }
}
 800b570:	bf00      	nop
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	20000008 	.word	0x20000008

0800b57c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	e033      	b.n	800b5fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b596:	2b00      	cmp	r3, #0
 800b598:	d109      	bne.n	800b5ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7fb ffa4 	bl	80074e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b2:	f003 0310 	and.w	r3, r3, #16
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d118      	bne.n	800b5ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b5c2:	f023 0302 	bic.w	r3, r3, #2
 800b5c6:	f043 0202 	orr.w	r2, r3, #2
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fa5a 	bl	800ba88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5de:	f023 0303 	bic.w	r3, r3, #3
 800b5e2:	f043 0201 	orr.w	r2, r3, #1
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	641a      	str	r2, [r3, #64]	; 0x40
 800b5ea:	e001      	b.n	800b5f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
	...

0800b604 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b610:	2300      	movs	r3, #0
 800b612:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d101      	bne.n	800b622 <HAL_ADC_Start_DMA+0x1e>
 800b61e:	2302      	movs	r3, #2
 800b620:	e0cc      	b.n	800b7bc <HAL_ADC_Start_DMA+0x1b8>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b01      	cmp	r3, #1
 800b636:	d018      	beq.n	800b66a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	689a      	ldr	r2, [r3, #8]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f042 0201 	orr.w	r2, r2, #1
 800b646:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b648:	4b5e      	ldr	r3, [pc, #376]	; (800b7c4 <HAL_ADC_Start_DMA+0x1c0>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a5e      	ldr	r2, [pc, #376]	; (800b7c8 <HAL_ADC_Start_DMA+0x1c4>)
 800b64e:	fba2 2303 	umull	r2, r3, r2, r3
 800b652:	0c9a      	lsrs	r2, r3, #18
 800b654:	4613      	mov	r3, r2
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	4413      	add	r3, r2
 800b65a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b65c:	e002      	b.n	800b664 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	3b01      	subs	r3, #1
 800b662:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1f9      	bne.n	800b65e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	f003 0301 	and.w	r3, r3, #1
 800b674:	2b01      	cmp	r3, #1
 800b676:	f040 80a0 	bne.w	800b7ba <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b682:	f023 0301 	bic.w	r3, r3, #1
 800b686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d007      	beq.n	800b6ac <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b6a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b8:	d106      	bne.n	800b6c8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6be:	f023 0206 	bic.w	r2, r3, #6
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	645a      	str	r2, [r3, #68]	; 0x44
 800b6c6:	e002      	b.n	800b6ce <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b6d6:	4b3d      	ldr	r3, [pc, #244]	; (800b7cc <HAL_ADC_Start_DMA+0x1c8>)
 800b6d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6de:	4a3c      	ldr	r2, [pc, #240]	; (800b7d0 <HAL_ADC_Start_DMA+0x1cc>)
 800b6e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e6:	4a3b      	ldr	r2, [pc, #236]	; (800b7d4 <HAL_ADC_Start_DMA+0x1d0>)
 800b6e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ee:	4a3a      	ldr	r2, [pc, #232]	; (800b7d8 <HAL_ADC_Start_DMA+0x1d4>)
 800b6f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b6fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685a      	ldr	r2, [r3, #4]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b70a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	689a      	ldr	r2, [r3, #8]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b71a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	334c      	adds	r3, #76	; 0x4c
 800b726:	4619      	mov	r1, r3
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f000 fcea 	bl	800c104 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	f003 031f 	and.w	r3, r3, #31
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d12a      	bne.n	800b792 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a26      	ldr	r2, [pc, #152]	; (800b7dc <HAL_ADC_Start_DMA+0x1d8>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d015      	beq.n	800b772 <HAL_ADC_Start_DMA+0x16e>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a25      	ldr	r2, [pc, #148]	; (800b7e0 <HAL_ADC_Start_DMA+0x1dc>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d105      	bne.n	800b75c <HAL_ADC_Start_DMA+0x158>
 800b750:	4b1e      	ldr	r3, [pc, #120]	; (800b7cc <HAL_ADC_Start_DMA+0x1c8>)
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	f003 031f 	and.w	r3, r3, #31
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00a      	beq.n	800b772 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a20      	ldr	r2, [pc, #128]	; (800b7e4 <HAL_ADC_Start_DMA+0x1e0>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d129      	bne.n	800b7ba <HAL_ADC_Start_DMA+0x1b6>
 800b766:	4b19      	ldr	r3, [pc, #100]	; (800b7cc <HAL_ADC_Start_DMA+0x1c8>)
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	f003 031f 	and.w	r3, r3, #31
 800b76e:	2b0f      	cmp	r3, #15
 800b770:	d823      	bhi.n	800b7ba <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d11c      	bne.n	800b7ba <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	689a      	ldr	r2, [r3, #8]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b78e:	609a      	str	r2, [r3, #8]
 800b790:	e013      	b.n	800b7ba <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a11      	ldr	r2, [pc, #68]	; (800b7dc <HAL_ADC_Start_DMA+0x1d8>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d10e      	bne.n	800b7ba <HAL_ADC_Start_DMA+0x1b6>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d107      	bne.n	800b7ba <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b7b8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	20000000 	.word	0x20000000
 800b7c8:	431bde83 	.word	0x431bde83
 800b7cc:	40012300 	.word	0x40012300
 800b7d0:	0800bc81 	.word	0x0800bc81
 800b7d4:	0800bd3b 	.word	0x0800bd3b
 800b7d8:	0800bd57 	.word	0x0800bd57
 800b7dc:	40012000 	.word	0x40012000
 800b7e0:	40012100 	.word	0x40012100
 800b7e4:	40012200 	.word	0x40012200

0800b7e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800b7f0:	bf00      	nop
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800b82e:	2300      	movs	r3, #0
 800b830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d101      	bne.n	800b840 <HAL_ADC_ConfigChannel+0x1c>
 800b83c:	2302      	movs	r3, #2
 800b83e:	e113      	b.n	800ba68 <HAL_ADC_ConfigChannel+0x244>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b09      	cmp	r3, #9
 800b84e:	d925      	bls.n	800b89c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68d9      	ldr	r1, [r3, #12]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	461a      	mov	r2, r3
 800b85e:	4613      	mov	r3, r2
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	4413      	add	r3, r2
 800b864:	3b1e      	subs	r3, #30
 800b866:	2207      	movs	r2, #7
 800b868:	fa02 f303 	lsl.w	r3, r2, r3
 800b86c:	43da      	mvns	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	400a      	ands	r2, r1
 800b874:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68d9      	ldr	r1, [r3, #12]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	689a      	ldr	r2, [r3, #8]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	b29b      	uxth	r3, r3
 800b886:	4618      	mov	r0, r3
 800b888:	4603      	mov	r3, r0
 800b88a:	005b      	lsls	r3, r3, #1
 800b88c:	4403      	add	r3, r0
 800b88e:	3b1e      	subs	r3, #30
 800b890:	409a      	lsls	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	430a      	orrs	r2, r1
 800b898:	60da      	str	r2, [r3, #12]
 800b89a:	e022      	b.n	800b8e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	6919      	ldr	r1, [r3, #16]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	005b      	lsls	r3, r3, #1
 800b8ae:	4413      	add	r3, r2
 800b8b0:	2207      	movs	r2, #7
 800b8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b6:	43da      	mvns	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	400a      	ands	r2, r1
 800b8be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	6919      	ldr	r1, [r3, #16]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	689a      	ldr	r2, [r3, #8]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	4403      	add	r3, r0
 800b8d8:	409a      	lsls	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	2b06      	cmp	r3, #6
 800b8e8:	d824      	bhi.n	800b934 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4413      	add	r3, r2
 800b8fa:	3b05      	subs	r3, #5
 800b8fc:	221f      	movs	r2, #31
 800b8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b902:	43da      	mvns	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	400a      	ands	r2, r1
 800b90a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	b29b      	uxth	r3, r3
 800b918:	4618      	mov	r0, r3
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	685a      	ldr	r2, [r3, #4]
 800b91e:	4613      	mov	r3, r2
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	4413      	add	r3, r2
 800b924:	3b05      	subs	r3, #5
 800b926:	fa00 f203 	lsl.w	r2, r0, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	430a      	orrs	r2, r1
 800b930:	635a      	str	r2, [r3, #52]	; 0x34
 800b932:	e04c      	b.n	800b9ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	2b0c      	cmp	r3, #12
 800b93a:	d824      	bhi.n	800b986 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	4613      	mov	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	3b23      	subs	r3, #35	; 0x23
 800b94e:	221f      	movs	r2, #31
 800b950:	fa02 f303 	lsl.w	r3, r2, r3
 800b954:	43da      	mvns	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	400a      	ands	r2, r1
 800b95c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	b29b      	uxth	r3, r3
 800b96a:	4618      	mov	r0, r3
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	4613      	mov	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4413      	add	r3, r2
 800b976:	3b23      	subs	r3, #35	; 0x23
 800b978:	fa00 f203 	lsl.w	r2, r0, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	631a      	str	r2, [r3, #48]	; 0x30
 800b984:	e023      	b.n	800b9ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	685a      	ldr	r2, [r3, #4]
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	3b41      	subs	r3, #65	; 0x41
 800b998:	221f      	movs	r2, #31
 800b99a:	fa02 f303 	lsl.w	r3, r2, r3
 800b99e:	43da      	mvns	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	400a      	ands	r2, r1
 800b9a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	3b41      	subs	r3, #65	; 0x41
 800b9c2:	fa00 f203 	lsl.w	r2, r0, r3
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b9ce:	4b29      	ldr	r3, [pc, #164]	; (800ba74 <HAL_ADC_ConfigChannel+0x250>)
 800b9d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a28      	ldr	r2, [pc, #160]	; (800ba78 <HAL_ADC_ConfigChannel+0x254>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d10f      	bne.n	800b9fc <HAL_ADC_ConfigChannel+0x1d8>
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b12      	cmp	r3, #18
 800b9e2:	d10b      	bne.n	800b9fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a1d      	ldr	r2, [pc, #116]	; (800ba78 <HAL_ADC_ConfigChannel+0x254>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d12b      	bne.n	800ba5e <HAL_ADC_ConfigChannel+0x23a>
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a1c      	ldr	r2, [pc, #112]	; (800ba7c <HAL_ADC_ConfigChannel+0x258>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d003      	beq.n	800ba18 <HAL_ADC_ConfigChannel+0x1f4>
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b11      	cmp	r3, #17
 800ba16:	d122      	bne.n	800ba5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a11      	ldr	r2, [pc, #68]	; (800ba7c <HAL_ADC_ConfigChannel+0x258>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d111      	bne.n	800ba5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ba3a:	4b11      	ldr	r3, [pc, #68]	; (800ba80 <HAL_ADC_ConfigChannel+0x25c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a11      	ldr	r2, [pc, #68]	; (800ba84 <HAL_ADC_ConfigChannel+0x260>)
 800ba40:	fba2 2303 	umull	r2, r3, r2, r3
 800ba44:	0c9a      	lsrs	r2, r3, #18
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ba50:	e002      	b.n	800ba58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	3b01      	subs	r3, #1
 800ba56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1f9      	bne.n	800ba52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3714      	adds	r7, #20
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	40012300 	.word	0x40012300
 800ba78:	40012000 	.word	0x40012000
 800ba7c:	10000012 	.word	0x10000012
 800ba80:	20000000 	.word	0x20000000
 800ba84:	431bde83 	.word	0x431bde83

0800ba88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ba90:	4b79      	ldr	r3, [pc, #484]	; (800bc78 <ADC_Init+0x1f0>)
 800ba92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	431a      	orrs	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800babc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6859      	ldr	r1, [r3, #4]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	021a      	lsls	r2, r3, #8
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	430a      	orrs	r2, r1
 800bad0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	685a      	ldr	r2, [r3, #4]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	6859      	ldr	r1, [r3, #4]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	689a      	ldr	r2, [r3, #8]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	430a      	orrs	r2, r1
 800baf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	689a      	ldr	r2, [r3, #8]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6899      	ldr	r1, [r3, #8]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	68da      	ldr	r2, [r3, #12]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	430a      	orrs	r2, r1
 800bb14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1a:	4a58      	ldr	r2, [pc, #352]	; (800bc7c <ADC_Init+0x1f4>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d022      	beq.n	800bb66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	689a      	ldr	r2, [r3, #8]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bb2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6899      	ldr	r1, [r3, #8]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	430a      	orrs	r2, r1
 800bb40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689a      	ldr	r2, [r3, #8]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bb50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	6899      	ldr	r1, [r3, #8]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	430a      	orrs	r2, r1
 800bb62:	609a      	str	r2, [r3, #8]
 800bb64:	e00f      	b.n	800bb86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689a      	ldr	r2, [r3, #8]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bb74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	689a      	ldr	r2, [r3, #8]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bb84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	689a      	ldr	r2, [r3, #8]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f022 0202 	bic.w	r2, r2, #2
 800bb94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	6899      	ldr	r1, [r3, #8]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	7e1b      	ldrb	r3, [r3, #24]
 800bba0:	005a      	lsls	r2, r3, #1
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d01b      	beq.n	800bbec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	685a      	ldr	r2, [r3, #4]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800bbd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6859      	ldr	r1, [r3, #4]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	035a      	lsls	r2, r3, #13
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	430a      	orrs	r2, r1
 800bbe8:	605a      	str	r2, [r3, #4]
 800bbea:	e007      	b.n	800bbfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800bc0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	69db      	ldr	r3, [r3, #28]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	051a      	lsls	r2, r3, #20
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	430a      	orrs	r2, r1
 800bc20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	689a      	ldr	r2, [r3, #8]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bc30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6899      	ldr	r1, [r3, #8]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc3e:	025a      	lsls	r2, r3, #9
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	430a      	orrs	r2, r1
 800bc46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	689a      	ldr	r2, [r3, #8]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	6899      	ldr	r1, [r3, #8]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	029a      	lsls	r2, r3, #10
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	430a      	orrs	r2, r1
 800bc6a:	609a      	str	r2, [r3, #8]
}
 800bc6c:	bf00      	nop
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	40012300 	.word	0x40012300
 800bc7c:	0f000001 	.word	0x0f000001

0800bc80 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc8c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc92:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d13c      	bne.n	800bd14 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d12b      	bne.n	800bd0c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d127      	bne.n	800bd0c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d006      	beq.n	800bcd8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d119      	bne.n	800bd0c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	685a      	ldr	r2, [r3, #4]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f022 0220 	bic.w	r2, r2, #32
 800bce6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d105      	bne.n	800bd0c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd04:	f043 0201 	orr.w	r2, r3, #1
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f7ff fd6b 	bl	800b7e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bd12:	e00e      	b.n	800bd32 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd18:	f003 0310 	and.w	r3, r3, #16
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d003      	beq.n	800bd28 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f7ff fd75 	bl	800b810 <HAL_ADC_ErrorCallback>
}
 800bd26:	e004      	b.n	800bd32 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	4798      	blx	r3
}
 800bd32:	bf00      	nop
 800bd34:	3710      	adds	r7, #16
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b084      	sub	sp, #16
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd46:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f7ff fd57 	bl	800b7fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bd4e:	bf00      	nop
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd62:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2240      	movs	r2, #64	; 0x40
 800bd68:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd6e:	f043 0204 	orr.w	r2, r3, #4
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff fd4a 	bl	800b810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bd7c:	bf00      	nop
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f003 0307 	and.w	r3, r3, #7
 800bd92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bd94:	4b0c      	ldr	r3, [pc, #48]	; (800bdc8 <__NVIC_SetPriorityGrouping+0x44>)
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bda0:	4013      	ands	r3, r2
 800bda2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bdac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bdb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bdb6:	4a04      	ldr	r2, [pc, #16]	; (800bdc8 <__NVIC_SetPriorityGrouping+0x44>)
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	60d3      	str	r3, [r2, #12]
}
 800bdbc:	bf00      	nop
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr
 800bdc8:	e000ed00 	.word	0xe000ed00

0800bdcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bdd0:	4b04      	ldr	r3, [pc, #16]	; (800bde4 <__NVIC_GetPriorityGrouping+0x18>)
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	0a1b      	lsrs	r3, r3, #8
 800bdd6:	f003 0307 	and.w	r3, r3, #7
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	e000ed00 	.word	0xe000ed00

0800bde8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	db0b      	blt.n	800be12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bdfa:	79fb      	ldrb	r3, [r7, #7]
 800bdfc:	f003 021f 	and.w	r2, r3, #31
 800be00:	4907      	ldr	r1, [pc, #28]	; (800be20 <__NVIC_EnableIRQ+0x38>)
 800be02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be06:	095b      	lsrs	r3, r3, #5
 800be08:	2001      	movs	r0, #1
 800be0a:	fa00 f202 	lsl.w	r2, r0, r2
 800be0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800be12:	bf00      	nop
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	e000e100 	.word	0xe000e100

0800be24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	4603      	mov	r3, r0
 800be2c:	6039      	str	r1, [r7, #0]
 800be2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be34:	2b00      	cmp	r3, #0
 800be36:	db0a      	blt.n	800be4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	490c      	ldr	r1, [pc, #48]	; (800be70 <__NVIC_SetPriority+0x4c>)
 800be3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be42:	0112      	lsls	r2, r2, #4
 800be44:	b2d2      	uxtb	r2, r2
 800be46:	440b      	add	r3, r1
 800be48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800be4c:	e00a      	b.n	800be64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	b2da      	uxtb	r2, r3
 800be52:	4908      	ldr	r1, [pc, #32]	; (800be74 <__NVIC_SetPriority+0x50>)
 800be54:	79fb      	ldrb	r3, [r7, #7]
 800be56:	f003 030f 	and.w	r3, r3, #15
 800be5a:	3b04      	subs	r3, #4
 800be5c:	0112      	lsls	r2, r2, #4
 800be5e:	b2d2      	uxtb	r2, r2
 800be60:	440b      	add	r3, r1
 800be62:	761a      	strb	r2, [r3, #24]
}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	e000e100 	.word	0xe000e100
 800be74:	e000ed00 	.word	0xe000ed00

0800be78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be78:	b480      	push	{r7}
 800be7a:	b089      	sub	sp, #36	; 0x24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f003 0307 	and.w	r3, r3, #7
 800be8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	f1c3 0307 	rsb	r3, r3, #7
 800be92:	2b04      	cmp	r3, #4
 800be94:	bf28      	it	cs
 800be96:	2304      	movcs	r3, #4
 800be98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	3304      	adds	r3, #4
 800be9e:	2b06      	cmp	r3, #6
 800bea0:	d902      	bls.n	800bea8 <NVIC_EncodePriority+0x30>
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	3b03      	subs	r3, #3
 800bea6:	e000      	b.n	800beaa <NVIC_EncodePriority+0x32>
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800beac:	f04f 32ff 	mov.w	r2, #4294967295
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	fa02 f303 	lsl.w	r3, r2, r3
 800beb6:	43da      	mvns	r2, r3
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	401a      	ands	r2, r3
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bec0:	f04f 31ff 	mov.w	r1, #4294967295
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	fa01 f303 	lsl.w	r3, r1, r3
 800beca:	43d9      	mvns	r1, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bed0:	4313      	orrs	r3, r2
         );
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3724      	adds	r7, #36	; 0x24
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
	...

0800bee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	3b01      	subs	r3, #1
 800beec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bef0:	d301      	bcc.n	800bef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bef2:	2301      	movs	r3, #1
 800bef4:	e00f      	b.n	800bf16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bef6:	4a0a      	ldr	r2, [pc, #40]	; (800bf20 <SysTick_Config+0x40>)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	3b01      	subs	r3, #1
 800befc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800befe:	210f      	movs	r1, #15
 800bf00:	f04f 30ff 	mov.w	r0, #4294967295
 800bf04:	f7ff ff8e 	bl	800be24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bf08:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <SysTick_Config+0x40>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bf0e:	4b04      	ldr	r3, [pc, #16]	; (800bf20 <SysTick_Config+0x40>)
 800bf10:	2207      	movs	r2, #7
 800bf12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	e000e010 	.word	0xe000e010

0800bf24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7ff ff29 	bl	800bd84 <__NVIC_SetPriorityGrouping>
}
 800bf32:	bf00      	nop
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b086      	sub	sp, #24
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	4603      	mov	r3, r0
 800bf42:	60b9      	str	r1, [r7, #8]
 800bf44:	607a      	str	r2, [r7, #4]
 800bf46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bf4c:	f7ff ff3e 	bl	800bdcc <__NVIC_GetPriorityGrouping>
 800bf50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	68b9      	ldr	r1, [r7, #8]
 800bf56:	6978      	ldr	r0, [r7, #20]
 800bf58:	f7ff ff8e 	bl	800be78 <NVIC_EncodePriority>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf62:	4611      	mov	r1, r2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7ff ff5d 	bl	800be24 <__NVIC_SetPriority>
}
 800bf6a:	bf00      	nop
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b082      	sub	sp, #8
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	4603      	mov	r3, r0
 800bf7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bf7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7ff ff31 	bl	800bde8 <__NVIC_EnableIRQ>
}
 800bf86:	bf00      	nop
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b082      	sub	sp, #8
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7ff ffa2 	bl	800bee0 <SysTick_Config>
 800bf9c:	4603      	mov	r3, r0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
	...

0800bfa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b086      	sub	sp, #24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bfb4:	f7ff fab4 	bl	800b520 <HAL_GetTick>
 800bfb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d101      	bne.n	800bfc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e099      	b.n	800c0f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2202      	movs	r2, #2
 800bfd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f022 0201 	bic.w	r2, r2, #1
 800bfe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bfe4:	e00f      	b.n	800c006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bfe6:	f7ff fa9b 	bl	800b520 <HAL_GetTick>
 800bfea:	4602      	mov	r2, r0
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	1ad3      	subs	r3, r2, r3
 800bff0:	2b05      	cmp	r3, #5
 800bff2:	d908      	bls.n	800c006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2220      	movs	r2, #32
 800bff8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2203      	movs	r2, #3
 800bffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c002:	2303      	movs	r3, #3
 800c004:	e078      	b.n	800c0f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1e8      	bne.n	800bfe6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c01c:	697a      	ldr	r2, [r7, #20]
 800c01e:	4b38      	ldr	r3, [pc, #224]	; (800c100 <HAL_DMA_Init+0x158>)
 800c020:	4013      	ands	r3, r2
 800c022:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685a      	ldr	r2, [r3, #4]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c03e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	699b      	ldr	r3, [r3, #24]
 800c044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c04a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a1b      	ldr	r3, [r3, #32]
 800c050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	4313      	orrs	r3, r2
 800c056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	d107      	bne.n	800c070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c068:	4313      	orrs	r3, r2
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	697a      	ldr	r2, [r7, #20]
 800c076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f023 0307 	bic.w	r3, r3, #7
 800c086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	697a      	ldr	r2, [r7, #20]
 800c08e:	4313      	orrs	r3, r2
 800c090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c096:	2b04      	cmp	r3, #4
 800c098:	d117      	bne.n	800c0ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09e:	697a      	ldr	r2, [r7, #20]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00e      	beq.n	800c0ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fa9d 	bl	800c5ec <DMA_CheckFifoParam>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d008      	beq.n	800c0ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2240      	movs	r2, #64	; 0x40
 800c0bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e016      	b.n	800c0f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fa54 	bl	800c580 <DMA_CalcBaseAndBitshift>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0e0:	223f      	movs	r2, #63	; 0x3f
 800c0e2:	409a      	lsls	r2, r3
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	f010803f 	.word	0xf010803f

0800c104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c11a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c122:	2b01      	cmp	r3, #1
 800c124:	d101      	bne.n	800c12a <HAL_DMA_Start_IT+0x26>
 800c126:	2302      	movs	r3, #2
 800c128:	e040      	b.n	800c1ac <HAL_DMA_Start_IT+0xa8>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2201      	movs	r2, #1
 800c12e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d12f      	bne.n	800c19e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2202      	movs	r2, #2
 800c142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f000 f9e6 	bl	800c524 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c15c:	223f      	movs	r2, #63	; 0x3f
 800c15e:	409a      	lsls	r2, r3
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f042 0216 	orr.w	r2, r2, #22
 800c172:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d007      	beq.n	800c18c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f042 0208 	orr.w	r2, r2, #8
 800c18a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f042 0201 	orr.w	r2, r2, #1
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	e005      	b.n	800c1aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c1a6:	2302      	movs	r3, #2
 800c1a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c1aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3718      	adds	r7, #24
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d004      	beq.n	800c1d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2280      	movs	r2, #128	; 0x80
 800c1cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e00c      	b.n	800c1ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2205      	movs	r2, #5
 800c1d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f022 0201 	bic.w	r2, r2, #1
 800c1e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b086      	sub	sp, #24
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c200:	2300      	movs	r3, #0
 800c202:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c204:	4b92      	ldr	r3, [pc, #584]	; (800c450 <HAL_DMA_IRQHandler+0x258>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a92      	ldr	r2, [pc, #584]	; (800c454 <HAL_DMA_IRQHandler+0x25c>)
 800c20a:	fba2 2303 	umull	r2, r3, r2, r3
 800c20e:	0a9b      	lsrs	r3, r3, #10
 800c210:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c216:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c222:	2208      	movs	r2, #8
 800c224:	409a      	lsls	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	4013      	ands	r3, r2
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d01a      	beq.n	800c264 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 0304 	and.w	r3, r3, #4
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d013      	beq.n	800c264 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f022 0204 	bic.w	r2, r2, #4
 800c24a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c250:	2208      	movs	r2, #8
 800c252:	409a      	lsls	r2, r3
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c25c:	f043 0201 	orr.w	r2, r3, #1
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c268:	2201      	movs	r2, #1
 800c26a:	409a      	lsls	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	4013      	ands	r3, r2
 800c270:	2b00      	cmp	r3, #0
 800c272:	d012      	beq.n	800c29a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	695b      	ldr	r3, [r3, #20]
 800c27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00b      	beq.n	800c29a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c286:	2201      	movs	r2, #1
 800c288:	409a      	lsls	r2, r3
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c292:	f043 0202 	orr.w	r2, r3, #2
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c29e:	2204      	movs	r2, #4
 800c2a0:	409a      	lsls	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d012      	beq.n	800c2d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 0302 	and.w	r3, r3, #2
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2bc:	2204      	movs	r2, #4
 800c2be:	409a      	lsls	r2, r3
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c8:	f043 0204 	orr.w	r2, r3, #4
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2d4:	2210      	movs	r2, #16
 800c2d6:	409a      	lsls	r2, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	4013      	ands	r3, r2
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d043      	beq.n	800c368 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f003 0308 	and.w	r3, r3, #8
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d03c      	beq.n	800c368 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2f2:	2210      	movs	r2, #16
 800c2f4:	409a      	lsls	r2, r3
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d018      	beq.n	800c33a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c312:	2b00      	cmp	r3, #0
 800c314:	d108      	bne.n	800c328 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d024      	beq.n	800c368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	4798      	blx	r3
 800c326:	e01f      	b.n	800c368 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d01b      	beq.n	800c368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	4798      	blx	r3
 800c338:	e016      	b.n	800c368 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c344:	2b00      	cmp	r3, #0
 800c346:	d107      	bne.n	800c358 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f022 0208 	bic.w	r2, r2, #8
 800c356:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d003      	beq.n	800c368 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c36c:	2220      	movs	r2, #32
 800c36e:	409a      	lsls	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	4013      	ands	r3, r2
 800c374:	2b00      	cmp	r3, #0
 800c376:	f000 808e 	beq.w	800c496 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 0310 	and.w	r3, r3, #16
 800c384:	2b00      	cmp	r3, #0
 800c386:	f000 8086 	beq.w	800c496 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c38e:	2220      	movs	r2, #32
 800c390:	409a      	lsls	r2, r3
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b05      	cmp	r3, #5
 800c3a0:	d136      	bne.n	800c410 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f022 0216 	bic.w	r2, r2, #22
 800c3b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	695a      	ldr	r2, [r3, #20]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c3c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d103      	bne.n	800c3d2 <HAL_DMA_IRQHandler+0x1da>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d007      	beq.n	800c3e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f022 0208 	bic.w	r2, r2, #8
 800c3e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3e6:	223f      	movs	r2, #63	; 0x3f
 800c3e8:	409a      	lsls	r2, r3
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c402:	2b00      	cmp	r3, #0
 800c404:	d07d      	beq.n	800c502 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	4798      	blx	r3
        }
        return;
 800c40e:	e078      	b.n	800c502 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d01c      	beq.n	800c458 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d108      	bne.n	800c43e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c430:	2b00      	cmp	r3, #0
 800c432:	d030      	beq.n	800c496 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	4798      	blx	r3
 800c43c:	e02b      	b.n	800c496 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c442:	2b00      	cmp	r3, #0
 800c444:	d027      	beq.n	800c496 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	4798      	blx	r3
 800c44e:	e022      	b.n	800c496 <HAL_DMA_IRQHandler+0x29e>
 800c450:	20000000 	.word	0x20000000
 800c454:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10f      	bne.n	800c486 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f022 0210 	bic.w	r2, r2, #16
 800c474:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2201      	movs	r2, #1
 800c482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d003      	beq.n	800c496 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d032      	beq.n	800c504 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4a2:	f003 0301 	and.w	r3, r3, #1
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d022      	beq.n	800c4f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2205      	movs	r2, #5
 800c4ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f022 0201 	bic.w	r2, r2, #1
 800c4c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	60bb      	str	r3, [r7, #8]
 800c4c8:	697a      	ldr	r2, [r7, #20]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d307      	bcc.n	800c4de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f003 0301 	and.w	r3, r3, #1
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1f2      	bne.n	800c4c2 <HAL_DMA_IRQHandler+0x2ca>
 800c4dc:	e000      	b.n	800c4e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c4de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d005      	beq.n	800c504 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	4798      	blx	r3
 800c500:	e000      	b.n	800c504 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c502:	bf00      	nop
    }
  }
}
 800c504:	3718      	adds	r7, #24
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop

0800c50c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800c518:	4618      	mov	r0, r3
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
 800c530:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c540:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	2b40      	cmp	r3, #64	; 0x40
 800c550:	d108      	bne.n	800c564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c562:	e007      	b.n	800c574 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	60da      	str	r2, [r3, #12]
}
 800c574:	bf00      	nop
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	3b10      	subs	r3, #16
 800c590:	4a14      	ldr	r2, [pc, #80]	; (800c5e4 <DMA_CalcBaseAndBitshift+0x64>)
 800c592:	fba2 2303 	umull	r2, r3, r2, r3
 800c596:	091b      	lsrs	r3, r3, #4
 800c598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c59a:	4a13      	ldr	r2, [pc, #76]	; (800c5e8 <DMA_CalcBaseAndBitshift+0x68>)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	4413      	add	r3, r2
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	d909      	bls.n	800c5c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c5b6:	f023 0303 	bic.w	r3, r3, #3
 800c5ba:	1d1a      	adds	r2, r3, #4
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	659a      	str	r2, [r3, #88]	; 0x58
 800c5c0:	e007      	b.n	800c5d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c5ca:	f023 0303 	bic.w	r3, r3, #3
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	aaaaaaab 	.word	0xaaaaaaab
 800c5e8:	0801a8c4 	.word	0x0801a8c4

0800c5ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	699b      	ldr	r3, [r3, #24]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d11f      	bne.n	800c646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	2b03      	cmp	r3, #3
 800c60a:	d855      	bhi.n	800c6b8 <DMA_CheckFifoParam+0xcc>
 800c60c:	a201      	add	r2, pc, #4	; (adr r2, 800c614 <DMA_CheckFifoParam+0x28>)
 800c60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c612:	bf00      	nop
 800c614:	0800c625 	.word	0x0800c625
 800c618:	0800c637 	.word	0x0800c637
 800c61c:	0800c625 	.word	0x0800c625
 800c620:	0800c6b9 	.word	0x0800c6b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d045      	beq.n	800c6bc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c630:	2301      	movs	r3, #1
 800c632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c634:	e042      	b.n	800c6bc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c63a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c63e:	d13f      	bne.n	800c6c0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c644:	e03c      	b.n	800c6c0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c64e:	d121      	bne.n	800c694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b03      	cmp	r3, #3
 800c654:	d836      	bhi.n	800c6c4 <DMA_CheckFifoParam+0xd8>
 800c656:	a201      	add	r2, pc, #4	; (adr r2, 800c65c <DMA_CheckFifoParam+0x70>)
 800c658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65c:	0800c66d 	.word	0x0800c66d
 800c660:	0800c673 	.word	0x0800c673
 800c664:	0800c66d 	.word	0x0800c66d
 800c668:	0800c685 	.word	0x0800c685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c66c:	2301      	movs	r3, #1
 800c66e:	73fb      	strb	r3, [r7, #15]
      break;
 800c670:	e02f      	b.n	800c6d2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d024      	beq.n	800c6c8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c682:	e021      	b.n	800c6c8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c688:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c68c:	d11e      	bne.n	800c6cc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c692:	e01b      	b.n	800c6cc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	2b02      	cmp	r3, #2
 800c698:	d902      	bls.n	800c6a0 <DMA_CheckFifoParam+0xb4>
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	d003      	beq.n	800c6a6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c69e:	e018      	b.n	800c6d2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c6a4:	e015      	b.n	800c6d2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00e      	beq.n	800c6d0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	73fb      	strb	r3, [r7, #15]
      break;
 800c6b6:	e00b      	b.n	800c6d0 <DMA_CheckFifoParam+0xe4>
      break;
 800c6b8:	bf00      	nop
 800c6ba:	e00a      	b.n	800c6d2 <DMA_CheckFifoParam+0xe6>
      break;
 800c6bc:	bf00      	nop
 800c6be:	e008      	b.n	800c6d2 <DMA_CheckFifoParam+0xe6>
      break;
 800c6c0:	bf00      	nop
 800c6c2:	e006      	b.n	800c6d2 <DMA_CheckFifoParam+0xe6>
      break;
 800c6c4:	bf00      	nop
 800c6c6:	e004      	b.n	800c6d2 <DMA_CheckFifoParam+0xe6>
      break;
 800c6c8:	bf00      	nop
 800c6ca:	e002      	b.n	800c6d2 <DMA_CheckFifoParam+0xe6>
      break;   
 800c6cc:	bf00      	nop
 800c6ce:	e000      	b.n	800c6d2 <DMA_CheckFifoParam+0xe6>
      break;
 800c6d0:	bf00      	nop
    }
  } 
  
  return status; 
 800c6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b089      	sub	sp, #36	; 0x24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	61fb      	str	r3, [r7, #28]
 800c6fa:	e177      	b.n	800c9ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	fa02 f303 	lsl.w	r3, r2, r3
 800c704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	697a      	ldr	r2, [r7, #20]
 800c70c:	4013      	ands	r3, r2
 800c70e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	429a      	cmp	r2, r3
 800c716:	f040 8166 	bne.w	800c9e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d00b      	beq.n	800c73a <HAL_GPIO_Init+0x5a>
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	2b02      	cmp	r3, #2
 800c728:	d007      	beq.n	800c73a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c72e:	2b11      	cmp	r3, #17
 800c730:	d003      	beq.n	800c73a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	2b12      	cmp	r3, #18
 800c738:	d130      	bne.n	800c79c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	2203      	movs	r2, #3
 800c746:	fa02 f303 	lsl.w	r3, r2, r3
 800c74a:	43db      	mvns	r3, r3
 800c74c:	69ba      	ldr	r2, [r7, #24]
 800c74e:	4013      	ands	r3, r2
 800c750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	68da      	ldr	r2, [r3, #12]
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	fa02 f303 	lsl.w	r3, r2, r3
 800c75e:	69ba      	ldr	r2, [r7, #24]
 800c760:	4313      	orrs	r3, r2
 800c762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	69ba      	ldr	r2, [r7, #24]
 800c768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c770:	2201      	movs	r2, #1
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	fa02 f303 	lsl.w	r3, r2, r3
 800c778:	43db      	mvns	r3, r3
 800c77a:	69ba      	ldr	r2, [r7, #24]
 800c77c:	4013      	ands	r3, r2
 800c77e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	091b      	lsrs	r3, r3, #4
 800c786:	f003 0201 	and.w	r2, r3, #1
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	fa02 f303 	lsl.w	r3, r2, r3
 800c790:	69ba      	ldr	r2, [r7, #24]
 800c792:	4313      	orrs	r3, r2
 800c794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	005b      	lsls	r3, r3, #1
 800c7a6:	2203      	movs	r2, #3
 800c7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ac:	43db      	mvns	r3, r3
 800c7ae:	69ba      	ldr	r2, [r7, #24]
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	689a      	ldr	r2, [r3, #8]
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	005b      	lsls	r3, r3, #1
 800c7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c0:	69ba      	ldr	r2, [r7, #24]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	69ba      	ldr	r2, [r7, #24]
 800c7ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d003      	beq.n	800c7dc <HAL_GPIO_Init+0xfc>
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	2b12      	cmp	r3, #18
 800c7da:	d123      	bne.n	800c824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	08da      	lsrs	r2, r3, #3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	3208      	adds	r2, #8
 800c7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	f003 0307 	and.w	r3, r3, #7
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	220f      	movs	r2, #15
 800c7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f8:	43db      	mvns	r3, r3
 800c7fa:	69ba      	ldr	r2, [r7, #24]
 800c7fc:	4013      	ands	r3, r2
 800c7fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	691a      	ldr	r2, [r3, #16]
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	f003 0307 	and.w	r3, r3, #7
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	fa02 f303 	lsl.w	r3, r2, r3
 800c810:	69ba      	ldr	r2, [r7, #24]
 800c812:	4313      	orrs	r3, r2
 800c814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	08da      	lsrs	r2, r3, #3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	3208      	adds	r2, #8
 800c81e:	69b9      	ldr	r1, [r7, #24]
 800c820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	2203      	movs	r2, #3
 800c830:	fa02 f303 	lsl.w	r3, r2, r3
 800c834:	43db      	mvns	r3, r3
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	4013      	ands	r3, r2
 800c83a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f003 0203 	and.w	r2, r3, #3
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	005b      	lsls	r3, r3, #1
 800c848:	fa02 f303 	lsl.w	r3, r2, r3
 800c84c:	69ba      	ldr	r2, [r7, #24]
 800c84e:	4313      	orrs	r3, r2
 800c850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	69ba      	ldr	r2, [r7, #24]
 800c856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c860:	2b00      	cmp	r3, #0
 800c862:	f000 80c0 	beq.w	800c9e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c866:	2300      	movs	r3, #0
 800c868:	60fb      	str	r3, [r7, #12]
 800c86a:	4b65      	ldr	r3, [pc, #404]	; (800ca00 <HAL_GPIO_Init+0x320>)
 800c86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c86e:	4a64      	ldr	r2, [pc, #400]	; (800ca00 <HAL_GPIO_Init+0x320>)
 800c870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c874:	6453      	str	r3, [r2, #68]	; 0x44
 800c876:	4b62      	ldr	r3, [pc, #392]	; (800ca00 <HAL_GPIO_Init+0x320>)
 800c878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c87a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c882:	4a60      	ldr	r2, [pc, #384]	; (800ca04 <HAL_GPIO_Init+0x324>)
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	089b      	lsrs	r3, r3, #2
 800c888:	3302      	adds	r3, #2
 800c88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c88e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	f003 0303 	and.w	r3, r3, #3
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	220f      	movs	r2, #15
 800c89a:	fa02 f303 	lsl.w	r3, r2, r3
 800c89e:	43db      	mvns	r3, r3
 800c8a0:	69ba      	ldr	r2, [r7, #24]
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4a57      	ldr	r2, [pc, #348]	; (800ca08 <HAL_GPIO_Init+0x328>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d037      	beq.n	800c91e <HAL_GPIO_Init+0x23e>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a56      	ldr	r2, [pc, #344]	; (800ca0c <HAL_GPIO_Init+0x32c>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d031      	beq.n	800c91a <HAL_GPIO_Init+0x23a>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4a55      	ldr	r2, [pc, #340]	; (800ca10 <HAL_GPIO_Init+0x330>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d02b      	beq.n	800c916 <HAL_GPIO_Init+0x236>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4a54      	ldr	r2, [pc, #336]	; (800ca14 <HAL_GPIO_Init+0x334>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d025      	beq.n	800c912 <HAL_GPIO_Init+0x232>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4a53      	ldr	r2, [pc, #332]	; (800ca18 <HAL_GPIO_Init+0x338>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d01f      	beq.n	800c90e <HAL_GPIO_Init+0x22e>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4a52      	ldr	r2, [pc, #328]	; (800ca1c <HAL_GPIO_Init+0x33c>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d019      	beq.n	800c90a <HAL_GPIO_Init+0x22a>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a51      	ldr	r2, [pc, #324]	; (800ca20 <HAL_GPIO_Init+0x340>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d013      	beq.n	800c906 <HAL_GPIO_Init+0x226>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a50      	ldr	r2, [pc, #320]	; (800ca24 <HAL_GPIO_Init+0x344>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d00d      	beq.n	800c902 <HAL_GPIO_Init+0x222>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a4f      	ldr	r2, [pc, #316]	; (800ca28 <HAL_GPIO_Init+0x348>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d007      	beq.n	800c8fe <HAL_GPIO_Init+0x21e>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a4e      	ldr	r2, [pc, #312]	; (800ca2c <HAL_GPIO_Init+0x34c>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d101      	bne.n	800c8fa <HAL_GPIO_Init+0x21a>
 800c8f6:	2309      	movs	r3, #9
 800c8f8:	e012      	b.n	800c920 <HAL_GPIO_Init+0x240>
 800c8fa:	230a      	movs	r3, #10
 800c8fc:	e010      	b.n	800c920 <HAL_GPIO_Init+0x240>
 800c8fe:	2308      	movs	r3, #8
 800c900:	e00e      	b.n	800c920 <HAL_GPIO_Init+0x240>
 800c902:	2307      	movs	r3, #7
 800c904:	e00c      	b.n	800c920 <HAL_GPIO_Init+0x240>
 800c906:	2306      	movs	r3, #6
 800c908:	e00a      	b.n	800c920 <HAL_GPIO_Init+0x240>
 800c90a:	2305      	movs	r3, #5
 800c90c:	e008      	b.n	800c920 <HAL_GPIO_Init+0x240>
 800c90e:	2304      	movs	r3, #4
 800c910:	e006      	b.n	800c920 <HAL_GPIO_Init+0x240>
 800c912:	2303      	movs	r3, #3
 800c914:	e004      	b.n	800c920 <HAL_GPIO_Init+0x240>
 800c916:	2302      	movs	r3, #2
 800c918:	e002      	b.n	800c920 <HAL_GPIO_Init+0x240>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e000      	b.n	800c920 <HAL_GPIO_Init+0x240>
 800c91e:	2300      	movs	r3, #0
 800c920:	69fa      	ldr	r2, [r7, #28]
 800c922:	f002 0203 	and.w	r2, r2, #3
 800c926:	0092      	lsls	r2, r2, #2
 800c928:	4093      	lsls	r3, r2
 800c92a:	69ba      	ldr	r2, [r7, #24]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c930:	4934      	ldr	r1, [pc, #208]	; (800ca04 <HAL_GPIO_Init+0x324>)
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	089b      	lsrs	r3, r3, #2
 800c936:	3302      	adds	r3, #2
 800c938:	69ba      	ldr	r2, [r7, #24]
 800c93a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c93e:	4b3c      	ldr	r3, [pc, #240]	; (800ca30 <HAL_GPIO_Init+0x350>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	43db      	mvns	r3, r3
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	4013      	ands	r3, r2
 800c94c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c956:	2b00      	cmp	r3, #0
 800c958:	d003      	beq.n	800c962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c95a:	69ba      	ldr	r2, [r7, #24]
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	4313      	orrs	r3, r2
 800c960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c962:	4a33      	ldr	r2, [pc, #204]	; (800ca30 <HAL_GPIO_Init+0x350>)
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c968:	4b31      	ldr	r3, [pc, #196]	; (800ca30 <HAL_GPIO_Init+0x350>)
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	43db      	mvns	r3, r3
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	4013      	ands	r3, r2
 800c976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c980:	2b00      	cmp	r3, #0
 800c982:	d003      	beq.n	800c98c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c984:	69ba      	ldr	r2, [r7, #24]
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	4313      	orrs	r3, r2
 800c98a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c98c:	4a28      	ldr	r2, [pc, #160]	; (800ca30 <HAL_GPIO_Init+0x350>)
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c992:	4b27      	ldr	r3, [pc, #156]	; (800ca30 <HAL_GPIO_Init+0x350>)
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	43db      	mvns	r3, r3
 800c99c:	69ba      	ldr	r2, [r7, #24]
 800c99e:	4013      	ands	r3, r2
 800c9a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d003      	beq.n	800c9b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c9ae:	69ba      	ldr	r2, [r7, #24]
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c9b6:	4a1e      	ldr	r2, [pc, #120]	; (800ca30 <HAL_GPIO_Init+0x350>)
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c9bc:	4b1c      	ldr	r3, [pc, #112]	; (800ca30 <HAL_GPIO_Init+0x350>)
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	43db      	mvns	r3, r3
 800c9c6:	69ba      	ldr	r2, [r7, #24]
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d003      	beq.n	800c9e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c9d8:	69ba      	ldr	r2, [r7, #24]
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c9e0:	4a13      	ldr	r2, [pc, #76]	; (800ca30 <HAL_GPIO_Init+0x350>)
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	61fb      	str	r3, [r7, #28]
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	2b0f      	cmp	r3, #15
 800c9f0:	f67f ae84 	bls.w	800c6fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c9f4:	bf00      	nop
 800c9f6:	3724      	adds	r7, #36	; 0x24
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	40023800 	.word	0x40023800
 800ca04:	40013800 	.word	0x40013800
 800ca08:	40020000 	.word	0x40020000
 800ca0c:	40020400 	.word	0x40020400
 800ca10:	40020800 	.word	0x40020800
 800ca14:	40020c00 	.word	0x40020c00
 800ca18:	40021000 	.word	0x40021000
 800ca1c:	40021400 	.word	0x40021400
 800ca20:	40021800 	.word	0x40021800
 800ca24:	40021c00 	.word	0x40021c00
 800ca28:	40022000 	.word	0x40022000
 800ca2c:	40022400 	.word	0x40022400
 800ca30:	40013c00 	.word	0x40013c00

0800ca34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	691a      	ldr	r2, [r3, #16]
 800ca44:	887b      	ldrh	r3, [r7, #2]
 800ca46:	4013      	ands	r3, r2
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	73fb      	strb	r3, [r7, #15]
 800ca50:	e001      	b.n	800ca56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ca52:	2300      	movs	r3, #0
 800ca54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ca56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3714      	adds	r7, #20
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	807b      	strh	r3, [r7, #2]
 800ca70:	4613      	mov	r3, r2
 800ca72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ca74:	787b      	ldrb	r3, [r7, #1]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ca7a:	887a      	ldrh	r2, [r7, #2]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ca80:	e003      	b.n	800ca8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ca82:	887b      	ldrh	r3, [r7, #2]
 800ca84:	041a      	lsls	r2, r3, #16
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	619a      	str	r2, [r3, #24]
}
 800ca8a:	bf00      	nop
 800ca8c:	370c      	adds	r7, #12
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
	...

0800ca98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800caa2:	4b08      	ldr	r3, [pc, #32]	; (800cac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800caa4:	695a      	ldr	r2, [r3, #20]
 800caa6:	88fb      	ldrh	r3, [r7, #6]
 800caa8:	4013      	ands	r3, r2
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d006      	beq.n	800cabc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800caae:	4a05      	ldr	r2, [pc, #20]	; (800cac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cab0:	88fb      	ldrh	r3, [r7, #6]
 800cab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cab4:	88fb      	ldrh	r3, [r7, #6]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f9 fd4d 	bl	8006556 <HAL_GPIO_EXTI_Callback>
  }
}
 800cabc:	bf00      	nop
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	40013c00 	.word	0x40013c00

0800cac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d101      	bne.n	800cada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	e11f      	b.n	800cd1a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d106      	bne.n	800caf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7fa fdac 	bl	800764c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2224      	movs	r2, #36	; 0x24
 800caf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f022 0201 	bic.w	r2, r2, #1
 800cb0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cb2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cb2c:	f001 f96e 	bl	800de0c <HAL_RCC_GetPCLK1Freq>
 800cb30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	4a7b      	ldr	r2, [pc, #492]	; (800cd24 <HAL_I2C_Init+0x25c>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d807      	bhi.n	800cb4c <HAL_I2C_Init+0x84>
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	4a7a      	ldr	r2, [pc, #488]	; (800cd28 <HAL_I2C_Init+0x260>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	bf94      	ite	ls
 800cb44:	2301      	movls	r3, #1
 800cb46:	2300      	movhi	r3, #0
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	e006      	b.n	800cb5a <HAL_I2C_Init+0x92>
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	4a77      	ldr	r2, [pc, #476]	; (800cd2c <HAL_I2C_Init+0x264>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	bf94      	ite	ls
 800cb54:	2301      	movls	r3, #1
 800cb56:	2300      	movhi	r3, #0
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e0db      	b.n	800cd1a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	4a72      	ldr	r2, [pc, #456]	; (800cd30 <HAL_I2C_Init+0x268>)
 800cb66:	fba2 2303 	umull	r2, r3, r2, r3
 800cb6a:	0c9b      	lsrs	r3, r3, #18
 800cb6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	430a      	orrs	r2, r1
 800cb80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	6a1b      	ldr	r3, [r3, #32]
 800cb88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	4a64      	ldr	r2, [pc, #400]	; (800cd24 <HAL_I2C_Init+0x25c>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d802      	bhi.n	800cb9c <HAL_I2C_Init+0xd4>
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	e009      	b.n	800cbb0 <HAL_I2C_Init+0xe8>
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cba2:	fb02 f303 	mul.w	r3, r2, r3
 800cba6:	4a63      	ldr	r2, [pc, #396]	; (800cd34 <HAL_I2C_Init+0x26c>)
 800cba8:	fba2 2303 	umull	r2, r3, r2, r3
 800cbac:	099b      	lsrs	r3, r3, #6
 800cbae:	3301      	adds	r3, #1
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	6812      	ldr	r2, [r2, #0]
 800cbb4:	430b      	orrs	r3, r1
 800cbb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	69db      	ldr	r3, [r3, #28]
 800cbbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800cbc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	4956      	ldr	r1, [pc, #344]	; (800cd24 <HAL_I2C_Init+0x25c>)
 800cbcc:	428b      	cmp	r3, r1
 800cbce:	d80d      	bhi.n	800cbec <HAL_I2C_Init+0x124>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	1e59      	subs	r1, r3, #1
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	fbb1 f3f3 	udiv	r3, r1, r3
 800cbde:	3301      	adds	r3, #1
 800cbe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbe4:	2b04      	cmp	r3, #4
 800cbe6:	bf38      	it	cc
 800cbe8:	2304      	movcc	r3, #4
 800cbea:	e04f      	b.n	800cc8c <HAL_I2C_Init+0x1c4>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d111      	bne.n	800cc18 <HAL_I2C_Init+0x150>
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	1e58      	subs	r0, r3, #1
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6859      	ldr	r1, [r3, #4]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	440b      	add	r3, r1
 800cc02:	fbb0 f3f3 	udiv	r3, r0, r3
 800cc06:	3301      	adds	r3, #1
 800cc08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bf0c      	ite	eq
 800cc10:	2301      	moveq	r3, #1
 800cc12:	2300      	movne	r3, #0
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	e012      	b.n	800cc3e <HAL_I2C_Init+0x176>
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	1e58      	subs	r0, r3, #1
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6859      	ldr	r1, [r3, #4]
 800cc20:	460b      	mov	r3, r1
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	440b      	add	r3, r1
 800cc26:	0099      	lsls	r1, r3, #2
 800cc28:	440b      	add	r3, r1
 800cc2a:	fbb0 f3f3 	udiv	r3, r0, r3
 800cc2e:	3301      	adds	r3, #1
 800cc30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	bf0c      	ite	eq
 800cc38:	2301      	moveq	r3, #1
 800cc3a:	2300      	movne	r3, #0
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <HAL_I2C_Init+0x17e>
 800cc42:	2301      	movs	r3, #1
 800cc44:	e022      	b.n	800cc8c <HAL_I2C_Init+0x1c4>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10e      	bne.n	800cc6c <HAL_I2C_Init+0x1a4>
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	1e58      	subs	r0, r3, #1
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6859      	ldr	r1, [r3, #4]
 800cc56:	460b      	mov	r3, r1
 800cc58:	005b      	lsls	r3, r3, #1
 800cc5a:	440b      	add	r3, r1
 800cc5c:	fbb0 f3f3 	udiv	r3, r0, r3
 800cc60:	3301      	adds	r3, #1
 800cc62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc6a:	e00f      	b.n	800cc8c <HAL_I2C_Init+0x1c4>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	1e58      	subs	r0, r3, #1
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6859      	ldr	r1, [r3, #4]
 800cc74:	460b      	mov	r3, r1
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	440b      	add	r3, r1
 800cc7a:	0099      	lsls	r1, r3, #2
 800cc7c:	440b      	add	r3, r1
 800cc7e:	fbb0 f3f3 	udiv	r3, r0, r3
 800cc82:	3301      	adds	r3, #1
 800cc84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	6809      	ldr	r1, [r1, #0]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	69da      	ldr	r2, [r3, #28]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6a1b      	ldr	r3, [r3, #32]
 800cca6:	431a      	orrs	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	430a      	orrs	r2, r1
 800ccae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ccba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	6911      	ldr	r1, [r2, #16]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	68d2      	ldr	r2, [r2, #12]
 800ccc6:	4311      	orrs	r1, r2
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	6812      	ldr	r2, [r2, #0]
 800cccc:	430b      	orrs	r3, r1
 800ccce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	695a      	ldr	r2, [r3, #20]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	699b      	ldr	r3, [r3, #24]
 800cce2:	431a      	orrs	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	430a      	orrs	r2, r1
 800ccea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f042 0201 	orr.w	r2, r2, #1
 800ccfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2220      	movs	r2, #32
 800cd06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	000186a0 	.word	0x000186a0
 800cd28:	001e847f 	.word	0x001e847f
 800cd2c:	003d08ff 	.word	0x003d08ff
 800cd30:	431bde83 	.word	0x431bde83
 800cd34:	10624dd3 	.word	0x10624dd3

0800cd38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b088      	sub	sp, #32
 800cd3c:	af02      	add	r7, sp, #8
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	607a      	str	r2, [r7, #4]
 800cd42:	461a      	mov	r2, r3
 800cd44:	460b      	mov	r3, r1
 800cd46:	817b      	strh	r3, [r7, #10]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cd4c:	f7fe fbe8 	bl	800b520 <HAL_GetTick>
 800cd50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	2b20      	cmp	r3, #32
 800cd5c:	f040 80e0 	bne.w	800cf20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	2319      	movs	r3, #25
 800cd66:	2201      	movs	r2, #1
 800cd68:	4970      	ldr	r1, [pc, #448]	; (800cf2c <HAL_I2C_Master_Transmit+0x1f4>)
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f000 fc58 	bl	800d620 <I2C_WaitOnFlagUntilTimeout>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800cd76:	2302      	movs	r3, #2
 800cd78:	e0d3      	b.n	800cf22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d101      	bne.n	800cd88 <HAL_I2C_Master_Transmit+0x50>
 800cd84:	2302      	movs	r3, #2
 800cd86:	e0cc      	b.n	800cf22 <HAL_I2C_Master_Transmit+0x1ea>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f003 0301 	and.w	r3, r3, #1
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d007      	beq.n	800cdae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f042 0201 	orr.w	r2, r2, #1
 800cdac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cdbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2221      	movs	r2, #33	; 0x21
 800cdc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2210      	movs	r2, #16
 800cdca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	893a      	ldrh	r2, [r7, #8]
 800cdde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	4a50      	ldr	r2, [pc, #320]	; (800cf30 <HAL_I2C_Master_Transmit+0x1f8>)
 800cdee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800cdf0:	8979      	ldrh	r1, [r7, #10]
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	6a3a      	ldr	r2, [r7, #32]
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f000 fac2 	bl	800d380 <I2C_MasterRequestWrite>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	e08d      	b.n	800cf22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce06:	2300      	movs	r3, #0
 800ce08:	613b      	str	r3, [r7, #16]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	695b      	ldr	r3, [r3, #20]
 800ce10:	613b      	str	r3, [r7, #16]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	699b      	ldr	r3, [r3, #24]
 800ce18:	613b      	str	r3, [r7, #16]
 800ce1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ce1c:	e066      	b.n	800ceec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	6a39      	ldr	r1, [r7, #32]
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f000 fcd2 	bl	800d7cc <I2C_WaitOnTXEFlagUntilTimeout>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00d      	beq.n	800ce4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce32:	2b04      	cmp	r3, #4
 800ce34:	d107      	bne.n	800ce46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e06b      	b.n	800cf22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	781a      	ldrb	r2, [r3, #0]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	3b01      	subs	r3, #1
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce72:	3b01      	subs	r3, #1
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	f003 0304 	and.w	r3, r3, #4
 800ce84:	2b04      	cmp	r3, #4
 800ce86:	d11b      	bne.n	800cec0 <HAL_I2C_Master_Transmit+0x188>
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d017      	beq.n	800cec0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce94:	781a      	ldrb	r2, [r3, #0]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea0:	1c5a      	adds	r2, r3, #1
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	3b01      	subs	r3, #1
 800ceae:	b29a      	uxth	r2, r3
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cec0:	697a      	ldr	r2, [r7, #20]
 800cec2:	6a39      	ldr	r1, [r7, #32]
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f000 fcc2 	bl	800d84e <I2C_WaitOnBTFFlagUntilTimeout>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00d      	beq.n	800ceec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced4:	2b04      	cmp	r3, #4
 800ced6:	d107      	bne.n	800cee8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cee6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	e01a      	b.n	800cf22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d194      	bne.n	800ce1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2220      	movs	r2, #32
 800cf08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	e000      	b.n	800cf22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800cf20:	2302      	movs	r3, #2
  }
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	00100002 	.word	0x00100002
 800cf30:	ffff0000 	.word	0xffff0000

0800cf34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b08c      	sub	sp, #48	; 0x30
 800cf38:	af02      	add	r7, sp, #8
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	607a      	str	r2, [r7, #4]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	460b      	mov	r3, r1
 800cf42:	817b      	strh	r3, [r7, #10]
 800cf44:	4613      	mov	r3, r2
 800cf46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cf48:	f7fe faea 	bl	800b520 <HAL_GetTick>
 800cf4c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	2b20      	cmp	r3, #32
 800cf58:	f040 820b 	bne.w	800d372 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	2319      	movs	r3, #25
 800cf62:	2201      	movs	r2, #1
 800cf64:	497c      	ldr	r1, [pc, #496]	; (800d158 <HAL_I2C_Master_Receive+0x224>)
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f000 fb5a 	bl	800d620 <I2C_WaitOnFlagUntilTimeout>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800cf72:	2302      	movs	r3, #2
 800cf74:	e1fe      	b.n	800d374 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d101      	bne.n	800cf84 <HAL_I2C_Master_Receive+0x50>
 800cf80:	2302      	movs	r3, #2
 800cf82:	e1f7      	b.n	800d374 <HAL_I2C_Master_Receive+0x440>
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2201      	movs	r2, #1
 800cf88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d007      	beq.n	800cfaa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f042 0201 	orr.w	r2, r2, #1
 800cfa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cfb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2222      	movs	r2, #34	; 0x22
 800cfbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2210      	movs	r2, #16
 800cfc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	893a      	ldrh	r2, [r7, #8]
 800cfda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	4a5c      	ldr	r2, [pc, #368]	; (800d15c <HAL_I2C_Master_Receive+0x228>)
 800cfea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800cfec:	8979      	ldrh	r1, [r7, #10]
 800cfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f000 fa46 	bl	800d484 <I2C_MasterRequestRead>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d001      	beq.n	800d002 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e1b8      	b.n	800d374 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d006:	2b00      	cmp	r3, #0
 800d008:	d113      	bne.n	800d032 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d00a:	2300      	movs	r3, #0
 800d00c:	623b      	str	r3, [r7, #32]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	695b      	ldr	r3, [r3, #20]
 800d014:	623b      	str	r3, [r7, #32]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	699b      	ldr	r3, [r3, #24]
 800d01c:	623b      	str	r3, [r7, #32]
 800d01e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	e18c      	b.n	800d34c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d036:	2b01      	cmp	r3, #1
 800d038:	d11b      	bne.n	800d072 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d04a:	2300      	movs	r3, #0
 800d04c:	61fb      	str	r3, [r7, #28]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	61fb      	str	r3, [r7, #28]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	699b      	ldr	r3, [r3, #24]
 800d05c:	61fb      	str	r3, [r7, #28]
 800d05e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d06e:	601a      	str	r2, [r3, #0]
 800d070:	e16c      	b.n	800d34c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d076:	2b02      	cmp	r3, #2
 800d078:	d11b      	bne.n	800d0b2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d088:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d09a:	2300      	movs	r3, #0
 800d09c:	61bb      	str	r3, [r7, #24]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	61bb      	str	r3, [r7, #24]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	699b      	ldr	r3, [r3, #24]
 800d0ac:	61bb      	str	r3, [r7, #24]
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	e14c      	b.n	800d34c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d0c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	617b      	str	r3, [r7, #20]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	695b      	ldr	r3, [r3, #20]
 800d0cc:	617b      	str	r3, [r7, #20]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	699b      	ldr	r3, [r3, #24]
 800d0d4:	617b      	str	r3, [r7, #20]
 800d0d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d0d8:	e138      	b.n	800d34c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0de:	2b03      	cmp	r3, #3
 800d0e0:	f200 80f1 	bhi.w	800d2c6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d123      	bne.n	800d134 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f000 fbed 	bl	800d8d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d001      	beq.n	800d100 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e139      	b.n	800d374 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	691a      	ldr	r2, [r3, #16]
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10a:	b2d2      	uxtb	r2, r2
 800d10c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d11c:	3b01      	subs	r3, #1
 800d11e:	b29a      	uxth	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d128:	b29b      	uxth	r3, r3
 800d12a:	3b01      	subs	r3, #1
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d132:	e10b      	b.n	800d34c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d14e      	bne.n	800d1da <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d142:	2200      	movs	r2, #0
 800d144:	4906      	ldr	r1, [pc, #24]	; (800d160 <HAL_I2C_Master_Receive+0x22c>)
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f000 fa6a 	bl	800d620 <I2C_WaitOnFlagUntilTimeout>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d008      	beq.n	800d164 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e10e      	b.n	800d374 <HAL_I2C_Master_Receive+0x440>
 800d156:	bf00      	nop
 800d158:	00100002 	.word	0x00100002
 800d15c:	ffff0000 	.word	0xffff0000
 800d160:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	691a      	ldr	r2, [r3, #16]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	b2d2      	uxtb	r2, r2
 800d180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	1c5a      	adds	r2, r3, #1
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d190:	3b01      	subs	r3, #1
 800d192:	b29a      	uxth	r2, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	691a      	ldr	r2, [r3, #16]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b0:	b2d2      	uxtb	r2, r2
 800d1b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b8:	1c5a      	adds	r2, r3, #1
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d1d8:	e0b8      	b.n	800d34c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	4966      	ldr	r1, [pc, #408]	; (800d37c <HAL_I2C_Master_Receive+0x448>)
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	f000 fa1b 	bl	800d620 <I2C_WaitOnFlagUntilTimeout>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d001      	beq.n	800d1f4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e0bf      	b.n	800d374 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	691a      	ldr	r2, [r3, #16]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20e:	b2d2      	uxtb	r2, r2
 800d210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d220:	3b01      	subs	r3, #1
 800d222:	b29a      	uxth	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	3b01      	subs	r3, #1
 800d230:	b29a      	uxth	r2, r3
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d238:	9300      	str	r3, [sp, #0]
 800d23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23c:	2200      	movs	r2, #0
 800d23e:	494f      	ldr	r1, [pc, #316]	; (800d37c <HAL_I2C_Master_Receive+0x448>)
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f000 f9ed 	bl	800d620 <I2C_WaitOnFlagUntilTimeout>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d001      	beq.n	800d250 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e091      	b.n	800d374 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d25e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	691a      	ldr	r2, [r3, #16]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d26a:	b2d2      	uxtb	r2, r2
 800d26c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d27c:	3b01      	subs	r3, #1
 800d27e:	b29a      	uxth	r2, r3
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d288:	b29b      	uxth	r3, r3
 800d28a:	3b01      	subs	r3, #1
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	691a      	ldr	r2, [r3, #16]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29c:	b2d2      	uxtb	r2, r2
 800d29e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d2c4:	e042      	b.n	800d34c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f000 fb00 	bl	800d8d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d001      	beq.n	800d2da <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e04c      	b.n	800d374 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	691a      	ldr	r2, [r3, #16]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e4:	b2d2      	uxtb	r2, r2
 800d2e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	1c5a      	adds	r2, r3, #1
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d302:	b29b      	uxth	r3, r3
 800d304:	3b01      	subs	r3, #1
 800d306:	b29a      	uxth	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	695b      	ldr	r3, [r3, #20]
 800d312:	f003 0304 	and.w	r3, r3, #4
 800d316:	2b04      	cmp	r3, #4
 800d318:	d118      	bne.n	800d34c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	691a      	ldr	r2, [r3, #16]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d324:	b2d2      	uxtb	r2, r2
 800d326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d32c:	1c5a      	adds	r2, r3, #1
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d336:	3b01      	subs	r3, #1
 800d338:	b29a      	uxth	r2, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d342:	b29b      	uxth	r3, r3
 800d344:	3b01      	subs	r3, #1
 800d346:	b29a      	uxth	r2, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d350:	2b00      	cmp	r3, #0
 800d352:	f47f aec2 	bne.w	800d0da <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2220      	movs	r2, #32
 800d35a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2200      	movs	r2, #0
 800d362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d36e:	2300      	movs	r3, #0
 800d370:	e000      	b.n	800d374 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d372:	2302      	movs	r3, #2
  }
}
 800d374:	4618      	mov	r0, r3
 800d376:	3728      	adds	r7, #40	; 0x28
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	00010004 	.word	0x00010004

0800d380 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b088      	sub	sp, #32
 800d384:	af02      	add	r7, sp, #8
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	607a      	str	r2, [r7, #4]
 800d38a:	603b      	str	r3, [r7, #0]
 800d38c:	460b      	mov	r3, r1
 800d38e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d394:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b08      	cmp	r3, #8
 800d39a:	d006      	beq.n	800d3aa <I2C_MasterRequestWrite+0x2a>
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d003      	beq.n	800d3aa <I2C_MasterRequestWrite+0x2a>
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d3a8:	d108      	bne.n	800d3bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3b8:	601a      	str	r2, [r3, #0]
 800d3ba:	e00b      	b.n	800d3d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3c0:	2b12      	cmp	r3, #18
 800d3c2:	d107      	bne.n	800d3d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f000 f91d 	bl	800d620 <I2C_WaitOnFlagUntilTimeout>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00d      	beq.n	800d408 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3fa:	d103      	bne.n	800d404 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d404:	2303      	movs	r3, #3
 800d406:	e035      	b.n	800d474 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	691b      	ldr	r3, [r3, #16]
 800d40c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d410:	d108      	bne.n	800d424 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d412:	897b      	ldrh	r3, [r7, #10]
 800d414:	b2db      	uxtb	r3, r3
 800d416:	461a      	mov	r2, r3
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d420:	611a      	str	r2, [r3, #16]
 800d422:	e01b      	b.n	800d45c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d424:	897b      	ldrh	r3, [r7, #10]
 800d426:	11db      	asrs	r3, r3, #7
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	f003 0306 	and.w	r3, r3, #6
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	f063 030f 	orn	r3, r3, #15
 800d434:	b2da      	uxtb	r2, r3
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	490e      	ldr	r1, [pc, #56]	; (800d47c <I2C_MasterRequestWrite+0xfc>)
 800d442:	68f8      	ldr	r0, [r7, #12]
 800d444:	f000 f943 	bl	800d6ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	e010      	b.n	800d474 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d452:	897b      	ldrh	r3, [r7, #10]
 800d454:	b2da      	uxtb	r2, r3
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	4907      	ldr	r1, [pc, #28]	; (800d480 <I2C_MasterRequestWrite+0x100>)
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f000 f933 	bl	800d6ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	e000      	b.n	800d474 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d472:	2300      	movs	r3, #0
}
 800d474:	4618      	mov	r0, r3
 800d476:	3718      	adds	r7, #24
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	00010008 	.word	0x00010008
 800d480:	00010002 	.word	0x00010002

0800d484 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b088      	sub	sp, #32
 800d488:	af02      	add	r7, sp, #8
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	607a      	str	r2, [r7, #4]
 800d48e:	603b      	str	r3, [r7, #0]
 800d490:	460b      	mov	r3, r1
 800d492:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d498:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d4a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2b08      	cmp	r3, #8
 800d4ae:	d006      	beq.n	800d4be <I2C_MasterRequestRead+0x3a>
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d003      	beq.n	800d4be <I2C_MasterRequestRead+0x3a>
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d4bc:	d108      	bne.n	800d4d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4cc:	601a      	str	r2, [r3, #0]
 800d4ce:	e00b      	b.n	800d4e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d4:	2b11      	cmp	r3, #17
 800d4d6:	d107      	bne.n	800d4e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	9300      	str	r3, [sp, #0]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f000 f893 	bl	800d620 <I2C_WaitOnFlagUntilTimeout>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00d      	beq.n	800d51c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d50a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d50e:	d103      	bne.n	800d518 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d516:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d518:	2303      	movs	r3, #3
 800d51a:	e079      	b.n	800d610 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	691b      	ldr	r3, [r3, #16]
 800d520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d524:	d108      	bne.n	800d538 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d526:	897b      	ldrh	r3, [r7, #10]
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	f043 0301 	orr.w	r3, r3, #1
 800d52e:	b2da      	uxtb	r2, r3
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	611a      	str	r2, [r3, #16]
 800d536:	e05f      	b.n	800d5f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d538:	897b      	ldrh	r3, [r7, #10]
 800d53a:	11db      	asrs	r3, r3, #7
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	f003 0306 	and.w	r3, r3, #6
 800d542:	b2db      	uxtb	r3, r3
 800d544:	f063 030f 	orn	r3, r3, #15
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	4930      	ldr	r1, [pc, #192]	; (800d618 <I2C_MasterRequestRead+0x194>)
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f000 f8b9 	bl	800d6ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	e054      	b.n	800d610 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d566:	897b      	ldrh	r3, [r7, #10]
 800d568:	b2da      	uxtb	r2, r3
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	4929      	ldr	r1, [pc, #164]	; (800d61c <I2C_MasterRequestRead+0x198>)
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f000 f8a9 	bl	800d6ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d582:	2301      	movs	r3, #1
 800d584:	e044      	b.n	800d610 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d586:	2300      	movs	r3, #0
 800d588:	613b      	str	r3, [r7, #16]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	613b      	str	r3, [r7, #16]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	613b      	str	r3, [r7, #16]
 800d59a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d5aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f000 f831 	bl	800d620 <I2C_WaitOnFlagUntilTimeout>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00d      	beq.n	800d5e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5d2:	d103      	bne.n	800d5dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d5dc:	2303      	movs	r3, #3
 800d5de:	e017      	b.n	800d610 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d5e0:	897b      	ldrh	r3, [r7, #10]
 800d5e2:	11db      	asrs	r3, r3, #7
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	f003 0306 	and.w	r3, r3, #6
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	f063 030e 	orn	r3, r3, #14
 800d5f0:	b2da      	uxtb	r2, r3
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	4907      	ldr	r1, [pc, #28]	; (800d61c <I2C_MasterRequestRead+0x198>)
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f000 f865 	bl	800d6ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d001      	beq.n	800d60e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e000      	b.n	800d610 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	3718      	adds	r7, #24
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	00010008 	.word	0x00010008
 800d61c:	00010002 	.word	0x00010002

0800d620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	603b      	str	r3, [r7, #0]
 800d62c:	4613      	mov	r3, r2
 800d62e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d630:	e025      	b.n	800d67e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d638:	d021      	beq.n	800d67e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d63a:	f7fd ff71 	bl	800b520 <HAL_GetTick>
 800d63e:	4602      	mov	r2, r0
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	683a      	ldr	r2, [r7, #0]
 800d646:	429a      	cmp	r2, r3
 800d648:	d302      	bcc.n	800d650 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d116      	bne.n	800d67e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2200      	movs	r2, #0
 800d654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2220      	movs	r2, #32
 800d65a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2200      	movs	r2, #0
 800d662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66a:	f043 0220 	orr.w	r2, r3, #32
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2200      	movs	r2, #0
 800d676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d67a:	2301      	movs	r3, #1
 800d67c:	e023      	b.n	800d6c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	0c1b      	lsrs	r3, r3, #16
 800d682:	b2db      	uxtb	r3, r3
 800d684:	2b01      	cmp	r3, #1
 800d686:	d10d      	bne.n	800d6a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	695b      	ldr	r3, [r3, #20]
 800d68e:	43da      	mvns	r2, r3
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	4013      	ands	r3, r2
 800d694:	b29b      	uxth	r3, r3
 800d696:	2b00      	cmp	r3, #0
 800d698:	bf0c      	ite	eq
 800d69a:	2301      	moveq	r3, #1
 800d69c:	2300      	movne	r3, #0
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	e00c      	b.n	800d6be <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	699b      	ldr	r3, [r3, #24]
 800d6aa:	43da      	mvns	r2, r3
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	4013      	ands	r3, r2
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	bf0c      	ite	eq
 800d6b6:	2301      	moveq	r3, #1
 800d6b8:	2300      	movne	r3, #0
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	461a      	mov	r2, r3
 800d6be:	79fb      	ldrb	r3, [r7, #7]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d0b6      	beq.n	800d632 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b084      	sub	sp, #16
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	607a      	str	r2, [r7, #4]
 800d6da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d6dc:	e051      	b.n	800d782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	695b      	ldr	r3, [r3, #20]
 800d6e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6ec:	d123      	bne.n	800d736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d706:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2200      	movs	r2, #0
 800d70c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2220      	movs	r2, #32
 800d712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d722:	f043 0204 	orr.w	r2, r3, #4
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e046      	b.n	800d7c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73c:	d021      	beq.n	800d782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d73e:	f7fd feef 	bl	800b520 <HAL_GetTick>
 800d742:	4602      	mov	r2, r0
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	1ad3      	subs	r3, r2, r3
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d302      	bcc.n	800d754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d116      	bne.n	800d782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2220      	movs	r2, #32
 800d75e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2200      	movs	r2, #0
 800d766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76e:	f043 0220 	orr.w	r2, r3, #32
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e020      	b.n	800d7c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	0c1b      	lsrs	r3, r3, #16
 800d786:	b2db      	uxtb	r3, r3
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d10c      	bne.n	800d7a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	695b      	ldr	r3, [r3, #20]
 800d792:	43da      	mvns	r2, r3
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	4013      	ands	r3, r2
 800d798:	b29b      	uxth	r3, r3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	bf14      	ite	ne
 800d79e:	2301      	movne	r3, #1
 800d7a0:	2300      	moveq	r3, #0
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	e00b      	b.n	800d7be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	699b      	ldr	r3, [r3, #24]
 800d7ac:	43da      	mvns	r2, r3
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	bf14      	ite	ne
 800d7b8:	2301      	movne	r3, #1
 800d7ba:	2300      	moveq	r3, #0
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d18d      	bne.n	800d6de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b084      	sub	sp, #16
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d7d8:	e02d      	b.n	800d836 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f000 f8ce 	bl	800d97c <I2C_IsAcknowledgeFailed>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d001      	beq.n	800d7ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e02d      	b.n	800d846 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7f0:	d021      	beq.n	800d836 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7f2:	f7fd fe95 	bl	800b520 <HAL_GetTick>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d302      	bcc.n	800d808 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d116      	bne.n	800d836 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2220      	movs	r2, #32
 800d812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d822:	f043 0220 	orr.w	r2, r3, #32
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2200      	movs	r2, #0
 800d82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d832:	2301      	movs	r3, #1
 800d834:	e007      	b.n	800d846 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	695b      	ldr	r3, [r3, #20]
 800d83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d840:	2b80      	cmp	r3, #128	; 0x80
 800d842:	d1ca      	bne.n	800d7da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b084      	sub	sp, #16
 800d852:	af00      	add	r7, sp, #0
 800d854:	60f8      	str	r0, [r7, #12]
 800d856:	60b9      	str	r1, [r7, #8]
 800d858:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d85a:	e02d      	b.n	800d8b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f000 f88d 	bl	800d97c <I2C_IsAcknowledgeFailed>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	e02d      	b.n	800d8c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d872:	d021      	beq.n	800d8b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d874:	f7fd fe54 	bl	800b520 <HAL_GetTick>
 800d878:	4602      	mov	r2, r0
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	68ba      	ldr	r2, [r7, #8]
 800d880:	429a      	cmp	r2, r3
 800d882:	d302      	bcc.n	800d88a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d116      	bne.n	800d8b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2200      	movs	r2, #0
 800d88e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2220      	movs	r2, #32
 800d894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a4:	f043 0220 	orr.w	r2, r3, #32
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e007      	b.n	800d8c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	695b      	ldr	r3, [r3, #20]
 800d8be:	f003 0304 	and.w	r3, r3, #4
 800d8c2:	2b04      	cmp	r3, #4
 800d8c4:	d1ca      	bne.n	800d85c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d8dc:	e042      	b.n	800d964 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	695b      	ldr	r3, [r3, #20]
 800d8e4:	f003 0310 	and.w	r3, r3, #16
 800d8e8:	2b10      	cmp	r3, #16
 800d8ea:	d119      	bne.n	800d920 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f06f 0210 	mvn.w	r2, #16
 800d8f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2220      	movs	r2, #32
 800d900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2200      	movs	r2, #0
 800d918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e029      	b.n	800d974 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d920:	f7fd fdfe 	bl	800b520 <HAL_GetTick>
 800d924:	4602      	mov	r2, r0
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d302      	bcc.n	800d936 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d116      	bne.n	800d964 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2220      	movs	r2, #32
 800d940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2200      	movs	r2, #0
 800d948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d950:	f043 0220 	orr.w	r2, r3, #32
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2200      	movs	r2, #0
 800d95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d960:	2301      	movs	r3, #1
 800d962:	e007      	b.n	800d974 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	695b      	ldr	r3, [r3, #20]
 800d96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d96e:	2b40      	cmp	r3, #64	; 0x40
 800d970:	d1b5      	bne.n	800d8de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3710      	adds	r7, #16
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	695b      	ldr	r3, [r3, #20]
 800d98a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d98e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d992:	d11b      	bne.n	800d9cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d99c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2220      	movs	r2, #32
 800d9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b8:	f043 0204 	orr.w	r2, r3, #4
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e000      	b.n	800d9ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr
	...

0800d9dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	603b      	str	r3, [r7, #0]
 800d9ea:	4b20      	ldr	r3, [pc, #128]	; (800da6c <HAL_PWREx_EnableOverDrive+0x90>)
 800d9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ee:	4a1f      	ldr	r2, [pc, #124]	; (800da6c <HAL_PWREx_EnableOverDrive+0x90>)
 800d9f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9f4:	6413      	str	r3, [r2, #64]	; 0x40
 800d9f6:	4b1d      	ldr	r3, [pc, #116]	; (800da6c <HAL_PWREx_EnableOverDrive+0x90>)
 800d9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800da02:	4b1b      	ldr	r3, [pc, #108]	; (800da70 <HAL_PWREx_EnableOverDrive+0x94>)
 800da04:	2201      	movs	r2, #1
 800da06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800da08:	f7fd fd8a 	bl	800b520 <HAL_GetTick>
 800da0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800da0e:	e009      	b.n	800da24 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800da10:	f7fd fd86 	bl	800b520 <HAL_GetTick>
 800da14:	4602      	mov	r2, r0
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da1e:	d901      	bls.n	800da24 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800da20:	2303      	movs	r3, #3
 800da22:	e01f      	b.n	800da64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800da24:	4b13      	ldr	r3, [pc, #76]	; (800da74 <HAL_PWREx_EnableOverDrive+0x98>)
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da30:	d1ee      	bne.n	800da10 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800da32:	4b11      	ldr	r3, [pc, #68]	; (800da78 <HAL_PWREx_EnableOverDrive+0x9c>)
 800da34:	2201      	movs	r2, #1
 800da36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800da38:	f7fd fd72 	bl	800b520 <HAL_GetTick>
 800da3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800da3e:	e009      	b.n	800da54 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800da40:	f7fd fd6e 	bl	800b520 <HAL_GetTick>
 800da44:	4602      	mov	r2, r0
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da4e:	d901      	bls.n	800da54 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800da50:	2303      	movs	r3, #3
 800da52:	e007      	b.n	800da64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800da54:	4b07      	ldr	r3, [pc, #28]	; (800da74 <HAL_PWREx_EnableOverDrive+0x98>)
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da60:	d1ee      	bne.n	800da40 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	40023800 	.word	0x40023800
 800da70:	420e0040 	.word	0x420e0040
 800da74:	40007000 	.word	0x40007000
 800da78:	420e0044 	.word	0x420e0044

0800da7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d101      	bne.n	800da90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e0cc      	b.n	800dc2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800da90:	4b68      	ldr	r3, [pc, #416]	; (800dc34 <HAL_RCC_ClockConfig+0x1b8>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f003 030f 	and.w	r3, r3, #15
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d90c      	bls.n	800dab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da9e:	4b65      	ldr	r3, [pc, #404]	; (800dc34 <HAL_RCC_ClockConfig+0x1b8>)
 800daa0:	683a      	ldr	r2, [r7, #0]
 800daa2:	b2d2      	uxtb	r2, r2
 800daa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800daa6:	4b63      	ldr	r3, [pc, #396]	; (800dc34 <HAL_RCC_ClockConfig+0x1b8>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f003 030f 	and.w	r3, r3, #15
 800daae:	683a      	ldr	r2, [r7, #0]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d001      	beq.n	800dab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dab4:	2301      	movs	r3, #1
 800dab6:	e0b8      	b.n	800dc2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d020      	beq.n	800db06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f003 0304 	and.w	r3, r3, #4
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d005      	beq.n	800dadc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dad0:	4b59      	ldr	r3, [pc, #356]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	4a58      	ldr	r2, [pc, #352]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800dad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f003 0308 	and.w	r3, r3, #8
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d005      	beq.n	800daf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dae8:	4b53      	ldr	r3, [pc, #332]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	4a52      	ldr	r2, [pc, #328]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800daee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800daf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800daf4:	4b50      	ldr	r3, [pc, #320]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	494d      	ldr	r1, [pc, #308]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800db02:	4313      	orrs	r3, r2
 800db04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f003 0301 	and.w	r3, r3, #1
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d044      	beq.n	800db9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	2b01      	cmp	r3, #1
 800db18:	d107      	bne.n	800db2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db1a:	4b47      	ldr	r3, [pc, #284]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db22:	2b00      	cmp	r3, #0
 800db24:	d119      	bne.n	800db5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	e07f      	b.n	800dc2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d003      	beq.n	800db3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800db36:	2b03      	cmp	r3, #3
 800db38:	d107      	bne.n	800db4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800db3a:	4b3f      	ldr	r3, [pc, #252]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db42:	2b00      	cmp	r3, #0
 800db44:	d109      	bne.n	800db5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	e06f      	b.n	800dc2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800db4a:	4b3b      	ldr	r3, [pc, #236]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f003 0302 	and.w	r3, r3, #2
 800db52:	2b00      	cmp	r3, #0
 800db54:	d101      	bne.n	800db5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800db56:	2301      	movs	r3, #1
 800db58:	e067      	b.n	800dc2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800db5a:	4b37      	ldr	r3, [pc, #220]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	f023 0203 	bic.w	r2, r3, #3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	4934      	ldr	r1, [pc, #208]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800db68:	4313      	orrs	r3, r2
 800db6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800db6c:	f7fd fcd8 	bl	800b520 <HAL_GetTick>
 800db70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db72:	e00a      	b.n	800db8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db74:	f7fd fcd4 	bl	800b520 <HAL_GetTick>
 800db78:	4602      	mov	r2, r0
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	1ad3      	subs	r3, r2, r3
 800db7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800db82:	4293      	cmp	r3, r2
 800db84:	d901      	bls.n	800db8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800db86:	2303      	movs	r3, #3
 800db88:	e04f      	b.n	800dc2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db8a:	4b2b      	ldr	r3, [pc, #172]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	f003 020c 	and.w	r2, r3, #12
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	429a      	cmp	r2, r3
 800db9a:	d1eb      	bne.n	800db74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800db9c:	4b25      	ldr	r3, [pc, #148]	; (800dc34 <HAL_RCC_ClockConfig+0x1b8>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f003 030f 	and.w	r3, r3, #15
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d20c      	bcs.n	800dbc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbaa:	4b22      	ldr	r3, [pc, #136]	; (800dc34 <HAL_RCC_ClockConfig+0x1b8>)
 800dbac:	683a      	ldr	r2, [r7, #0]
 800dbae:	b2d2      	uxtb	r2, r2
 800dbb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbb2:	4b20      	ldr	r3, [pc, #128]	; (800dc34 <HAL_RCC_ClockConfig+0x1b8>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f003 030f 	and.w	r3, r3, #15
 800dbba:	683a      	ldr	r2, [r7, #0]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d001      	beq.n	800dbc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e032      	b.n	800dc2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f003 0304 	and.w	r3, r3, #4
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d008      	beq.n	800dbe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dbd0:	4b19      	ldr	r3, [pc, #100]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	4916      	ldr	r1, [pc, #88]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f003 0308 	and.w	r3, r3, #8
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d009      	beq.n	800dc02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dbee:	4b12      	ldr	r3, [pc, #72]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	691b      	ldr	r3, [r3, #16]
 800dbfa:	00db      	lsls	r3, r3, #3
 800dbfc:	490e      	ldr	r1, [pc, #56]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dc02:	f000 f821 	bl	800dc48 <HAL_RCC_GetSysClockFreq>
 800dc06:	4601      	mov	r1, r0
 800dc08:	4b0b      	ldr	r3, [pc, #44]	; (800dc38 <HAL_RCC_ClockConfig+0x1bc>)
 800dc0a:	689b      	ldr	r3, [r3, #8]
 800dc0c:	091b      	lsrs	r3, r3, #4
 800dc0e:	f003 030f 	and.w	r3, r3, #15
 800dc12:	4a0a      	ldr	r2, [pc, #40]	; (800dc3c <HAL_RCC_ClockConfig+0x1c0>)
 800dc14:	5cd3      	ldrb	r3, [r2, r3]
 800dc16:	fa21 f303 	lsr.w	r3, r1, r3
 800dc1a:	4a09      	ldr	r2, [pc, #36]	; (800dc40 <HAL_RCC_ClockConfig+0x1c4>)
 800dc1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dc1e:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <HAL_RCC_ClockConfig+0x1c8>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fd fc38 	bl	800b498 <HAL_InitTick>

  return HAL_OK;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	40023c00 	.word	0x40023c00
 800dc38:	40023800 	.word	0x40023800
 800dc3c:	0801a8ac 	.word	0x0801a8ac
 800dc40:	20000000 	.word	0x20000000
 800dc44:	20000004 	.word	0x20000004

0800dc48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	607b      	str	r3, [r7, #4]
 800dc52:	2300      	movs	r3, #0
 800dc54:	60fb      	str	r3, [r7, #12]
 800dc56:	2300      	movs	r3, #0
 800dc58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dc5e:	4b63      	ldr	r3, [pc, #396]	; (800ddec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	f003 030c 	and.w	r3, r3, #12
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	d007      	beq.n	800dc7a <HAL_RCC_GetSysClockFreq+0x32>
 800dc6a:	2b08      	cmp	r3, #8
 800dc6c:	d008      	beq.n	800dc80 <HAL_RCC_GetSysClockFreq+0x38>
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f040 80b4 	bne.w	800dddc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dc74:	4b5e      	ldr	r3, [pc, #376]	; (800ddf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dc76:	60bb      	str	r3, [r7, #8]
       break;
 800dc78:	e0b3      	b.n	800dde2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dc7a:	4b5d      	ldr	r3, [pc, #372]	; (800ddf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dc7c:	60bb      	str	r3, [r7, #8]
      break;
 800dc7e:	e0b0      	b.n	800dde2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dc80:	4b5a      	ldr	r3, [pc, #360]	; (800ddec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dc8a:	4b58      	ldr	r3, [pc, #352]	; (800ddec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d04a      	beq.n	800dd2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dc96:	4b55      	ldr	r3, [pc, #340]	; (800ddec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	099b      	lsrs	r3, r3, #6
 800dc9c:	f04f 0400 	mov.w	r4, #0
 800dca0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dca4:	f04f 0200 	mov.w	r2, #0
 800dca8:	ea03 0501 	and.w	r5, r3, r1
 800dcac:	ea04 0602 	and.w	r6, r4, r2
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	4632      	mov	r2, r6
 800dcb4:	f04f 0300 	mov.w	r3, #0
 800dcb8:	f04f 0400 	mov.w	r4, #0
 800dcbc:	0154      	lsls	r4, r2, #5
 800dcbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dcc2:	014b      	lsls	r3, r1, #5
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4622      	mov	r2, r4
 800dcc8:	1b49      	subs	r1, r1, r5
 800dcca:	eb62 0206 	sbc.w	r2, r2, r6
 800dcce:	f04f 0300 	mov.w	r3, #0
 800dcd2:	f04f 0400 	mov.w	r4, #0
 800dcd6:	0194      	lsls	r4, r2, #6
 800dcd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dcdc:	018b      	lsls	r3, r1, #6
 800dcde:	1a5b      	subs	r3, r3, r1
 800dce0:	eb64 0402 	sbc.w	r4, r4, r2
 800dce4:	f04f 0100 	mov.w	r1, #0
 800dce8:	f04f 0200 	mov.w	r2, #0
 800dcec:	00e2      	lsls	r2, r4, #3
 800dcee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dcf2:	00d9      	lsls	r1, r3, #3
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	4614      	mov	r4, r2
 800dcf8:	195b      	adds	r3, r3, r5
 800dcfa:	eb44 0406 	adc.w	r4, r4, r6
 800dcfe:	f04f 0100 	mov.w	r1, #0
 800dd02:	f04f 0200 	mov.w	r2, #0
 800dd06:	02a2      	lsls	r2, r4, #10
 800dd08:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dd0c:	0299      	lsls	r1, r3, #10
 800dd0e:	460b      	mov	r3, r1
 800dd10:	4614      	mov	r4, r2
 800dd12:	4618      	mov	r0, r3
 800dd14:	4621      	mov	r1, r4
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f04f 0400 	mov.w	r4, #0
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	4623      	mov	r3, r4
 800dd20:	f7f2 ffca 	bl	8000cb8 <__aeabi_uldivmod>
 800dd24:	4603      	mov	r3, r0
 800dd26:	460c      	mov	r4, r1
 800dd28:	60fb      	str	r3, [r7, #12]
 800dd2a:	e049      	b.n	800ddc0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dd2c:	4b2f      	ldr	r3, [pc, #188]	; (800ddec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	099b      	lsrs	r3, r3, #6
 800dd32:	f04f 0400 	mov.w	r4, #0
 800dd36:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dd3a:	f04f 0200 	mov.w	r2, #0
 800dd3e:	ea03 0501 	and.w	r5, r3, r1
 800dd42:	ea04 0602 	and.w	r6, r4, r2
 800dd46:	4629      	mov	r1, r5
 800dd48:	4632      	mov	r2, r6
 800dd4a:	f04f 0300 	mov.w	r3, #0
 800dd4e:	f04f 0400 	mov.w	r4, #0
 800dd52:	0154      	lsls	r4, r2, #5
 800dd54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dd58:	014b      	lsls	r3, r1, #5
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	4622      	mov	r2, r4
 800dd5e:	1b49      	subs	r1, r1, r5
 800dd60:	eb62 0206 	sbc.w	r2, r2, r6
 800dd64:	f04f 0300 	mov.w	r3, #0
 800dd68:	f04f 0400 	mov.w	r4, #0
 800dd6c:	0194      	lsls	r4, r2, #6
 800dd6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dd72:	018b      	lsls	r3, r1, #6
 800dd74:	1a5b      	subs	r3, r3, r1
 800dd76:	eb64 0402 	sbc.w	r4, r4, r2
 800dd7a:	f04f 0100 	mov.w	r1, #0
 800dd7e:	f04f 0200 	mov.w	r2, #0
 800dd82:	00e2      	lsls	r2, r4, #3
 800dd84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dd88:	00d9      	lsls	r1, r3, #3
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	4614      	mov	r4, r2
 800dd8e:	195b      	adds	r3, r3, r5
 800dd90:	eb44 0406 	adc.w	r4, r4, r6
 800dd94:	f04f 0100 	mov.w	r1, #0
 800dd98:	f04f 0200 	mov.w	r2, #0
 800dd9c:	02a2      	lsls	r2, r4, #10
 800dd9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dda2:	0299      	lsls	r1, r3, #10
 800dda4:	460b      	mov	r3, r1
 800dda6:	4614      	mov	r4, r2
 800dda8:	4618      	mov	r0, r3
 800ddaa:	4621      	mov	r1, r4
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f04f 0400 	mov.w	r4, #0
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	4623      	mov	r3, r4
 800ddb6:	f7f2 ff7f 	bl	8000cb8 <__aeabi_uldivmod>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	460c      	mov	r4, r1
 800ddbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	0c1b      	lsrs	r3, r3, #16
 800ddc6:	f003 0303 	and.w	r3, r3, #3
 800ddca:	3301      	adds	r3, #1
 800ddcc:	005b      	lsls	r3, r3, #1
 800ddce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddd8:	60bb      	str	r3, [r7, #8]
      break;
 800ddda:	e002      	b.n	800dde2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dddc:	4b04      	ldr	r3, [pc, #16]	; (800ddf0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ddde:	60bb      	str	r3, [r7, #8]
      break;
 800dde0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dde2:	68bb      	ldr	r3, [r7, #8]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3714      	adds	r7, #20
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddec:	40023800 	.word	0x40023800
 800ddf0:	00f42400 	.word	0x00f42400

0800ddf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ddf8:	4b03      	ldr	r3, [pc, #12]	; (800de08 <HAL_RCC_GetHCLKFreq+0x14>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	20000000 	.word	0x20000000

0800de0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800de10:	f7ff fff0 	bl	800ddf4 <HAL_RCC_GetHCLKFreq>
 800de14:	4601      	mov	r1, r0
 800de16:	4b05      	ldr	r3, [pc, #20]	; (800de2c <HAL_RCC_GetPCLK1Freq+0x20>)
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	0a9b      	lsrs	r3, r3, #10
 800de1c:	f003 0307 	and.w	r3, r3, #7
 800de20:	4a03      	ldr	r2, [pc, #12]	; (800de30 <HAL_RCC_GetPCLK1Freq+0x24>)
 800de22:	5cd3      	ldrb	r3, [r2, r3]
 800de24:	fa21 f303 	lsr.w	r3, r1, r3
}
 800de28:	4618      	mov	r0, r3
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	40023800 	.word	0x40023800
 800de30:	0801a8bc 	.word	0x0801a8bc

0800de34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800de38:	f7ff ffdc 	bl	800ddf4 <HAL_RCC_GetHCLKFreq>
 800de3c:	4601      	mov	r1, r0
 800de3e:	4b05      	ldr	r3, [pc, #20]	; (800de54 <HAL_RCC_GetPCLK2Freq+0x20>)
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	0b5b      	lsrs	r3, r3, #13
 800de44:	f003 0307 	and.w	r3, r3, #7
 800de48:	4a03      	ldr	r2, [pc, #12]	; (800de58 <HAL_RCC_GetPCLK2Freq+0x24>)
 800de4a:	5cd3      	ldrb	r3, [r2, r3]
 800de4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800de50:	4618      	mov	r0, r3
 800de52:	bd80      	pop	{r7, pc}
 800de54:	40023800 	.word	0x40023800
 800de58:	0801a8bc 	.word	0x0801a8bc

0800de5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b088      	sub	sp, #32
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800de64:	2300      	movs	r3, #0
 800de66:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800de68:	2300      	movs	r3, #0
 800de6a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800de6c:	2300      	movs	r3, #0
 800de6e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800de70:	2300      	movs	r3, #0
 800de72:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800de74:	2300      	movs	r3, #0
 800de76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de80:	2b00      	cmp	r3, #0
 800de82:	d00a      	beq.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800de84:	4b66      	ldr	r3, [pc, #408]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de8a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de92:	4963      	ldr	r1, [pc, #396]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de94:	4313      	orrs	r3, r2
 800de96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00a      	beq.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800dea6:	4b5e      	ldr	r3, [pc, #376]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800dea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800deac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb4:	495a      	ldr	r1, [pc, #360]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800deb6:	4313      	orrs	r3, r2
 800deb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10b      	bne.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d105      	bne.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d075      	beq.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800dee0:	4b50      	ldr	r3, [pc, #320]	; (800e024 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800dee6:	f7fd fb1b 	bl	800b520 <HAL_GetTick>
 800deea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800deec:	e008      	b.n	800df00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800deee:	f7fd fb17 	bl	800b520 <HAL_GetTick>
 800def2:	4602      	mov	r2, r0
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	1ad3      	subs	r3, r2, r3
 800def8:	2b02      	cmp	r3, #2
 800defa:	d901      	bls.n	800df00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800defc:	2303      	movs	r3, #3
 800defe:	e1dc      	b.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800df00:	4b47      	ldr	r3, [pc, #284]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1f0      	bne.n	800deee <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	d009      	beq.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	019a      	lsls	r2, r3, #6
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	071b      	lsls	r3, r3, #28
 800df24:	493e      	ldr	r1, [pc, #248]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df26:	4313      	orrs	r3, r2
 800df28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f003 0302 	and.w	r3, r3, #2
 800df34:	2b00      	cmp	r3, #0
 800df36:	d01f      	beq.n	800df78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800df38:	4b39      	ldr	r3, [pc, #228]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df3e:	0f1b      	lsrs	r3, r3, #28
 800df40:	f003 0307 	and.w	r3, r3, #7
 800df44:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	019a      	lsls	r2, r3, #6
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	061b      	lsls	r3, r3, #24
 800df52:	431a      	orrs	r2, r3
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	071b      	lsls	r3, r3, #28
 800df58:	4931      	ldr	r1, [pc, #196]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df5a:	4313      	orrs	r3, r2
 800df5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800df60:	4b2f      	ldr	r3, [pc, #188]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df66:	f023 021f 	bic.w	r2, r3, #31
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a1b      	ldr	r3, [r3, #32]
 800df6e:	3b01      	subs	r3, #1
 800df70:	492b      	ldr	r1, [pc, #172]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df72:	4313      	orrs	r3, r2
 800df74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00d      	beq.n	800dfa0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	019a      	lsls	r2, r3, #6
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	061b      	lsls	r3, r3, #24
 800df90:	431a      	orrs	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	071b      	lsls	r3, r3, #28
 800df98:	4921      	ldr	r1, [pc, #132]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df9a:	4313      	orrs	r3, r2
 800df9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800dfa0:	4b20      	ldr	r3, [pc, #128]	; (800e024 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800dfa6:	f7fd fabb 	bl	800b520 <HAL_GetTick>
 800dfaa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dfac:	e008      	b.n	800dfc0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800dfae:	f7fd fab7 	bl	800b520 <HAL_GetTick>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	2b02      	cmp	r3, #2
 800dfba:	d901      	bls.n	800dfc0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dfbc:	2303      	movs	r3, #3
 800dfbe:	e17c      	b.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dfc0:	4b17      	ldr	r3, [pc, #92]	; (800e020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d0f0      	beq.n	800dfae <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f003 0304 	and.w	r3, r3, #4
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d112      	bne.n	800dffe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d10c      	bne.n	800dffe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f000 80ce 	beq.w	800e18e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800dff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dffa:	f040 80c8 	bne.w	800e18e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800dffe:	4b0a      	ldr	r3, [pc, #40]	; (800e028 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800e000:	2200      	movs	r2, #0
 800e002:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e004:	f7fd fa8c 	bl	800b520 <HAL_GetTick>
 800e008:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e00a:	e00f      	b.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e00c:	f7fd fa88 	bl	800b520 <HAL_GetTick>
 800e010:	4602      	mov	r2, r0
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	2b02      	cmp	r3, #2
 800e018:	d908      	bls.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e01a:	2303      	movs	r3, #3
 800e01c:	e14d      	b.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800e01e:	bf00      	nop
 800e020:	40023800 	.word	0x40023800
 800e024:	42470068 	.word	0x42470068
 800e028:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e02c:	4ba5      	ldr	r3, [pc, #660]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e038:	d0e8      	beq.n	800e00c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f003 0304 	and.w	r3, r3, #4
 800e042:	2b00      	cmp	r3, #0
 800e044:	d02e      	beq.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800e046:	4b9f      	ldr	r3, [pc, #636]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e04c:	0c1b      	lsrs	r3, r3, #16
 800e04e:	f003 0303 	and.w	r3, r3, #3
 800e052:	3301      	adds	r3, #1
 800e054:	005b      	lsls	r3, r3, #1
 800e056:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e058:	4b9a      	ldr	r3, [pc, #616]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e05e:	0f1b      	lsrs	r3, r3, #28
 800e060:	f003 0307 	and.w	r3, r3, #7
 800e064:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	691b      	ldr	r3, [r3, #16]
 800e06a:	019a      	lsls	r2, r3, #6
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	085b      	lsrs	r3, r3, #1
 800e070:	3b01      	subs	r3, #1
 800e072:	041b      	lsls	r3, r3, #16
 800e074:	431a      	orrs	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	699b      	ldr	r3, [r3, #24]
 800e07a:	061b      	lsls	r3, r3, #24
 800e07c:	431a      	orrs	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	071b      	lsls	r3, r3, #28
 800e082:	4990      	ldr	r1, [pc, #576]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e084:	4313      	orrs	r3, r2
 800e086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e08a:	4b8e      	ldr	r3, [pc, #568]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e090:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e098:	3b01      	subs	r3, #1
 800e09a:	021b      	lsls	r3, r3, #8
 800e09c:	4989      	ldr	r1, [pc, #548]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f003 0308 	and.w	r3, r3, #8
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d02c      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800e0b0:	4b84      	ldr	r3, [pc, #528]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0b6:	0c1b      	lsrs	r3, r3, #16
 800e0b8:	f003 0303 	and.w	r3, r3, #3
 800e0bc:	3301      	adds	r3, #1
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e0c2:	4b80      	ldr	r3, [pc, #512]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0c8:	0e1b      	lsrs	r3, r3, #24
 800e0ca:	f003 030f 	and.w	r3, r3, #15
 800e0ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	019a      	lsls	r2, r3, #6
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	085b      	lsrs	r3, r3, #1
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	041b      	lsls	r3, r3, #16
 800e0de:	431a      	orrs	r2, r3
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	061b      	lsls	r3, r3, #24
 800e0e4:	431a      	orrs	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	69db      	ldr	r3, [r3, #28]
 800e0ea:	071b      	lsls	r3, r3, #28
 800e0ec:	4975      	ldr	r1, [pc, #468]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e0f4:	4b73      	ldr	r3, [pc, #460]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e102:	4970      	ldr	r1, [pc, #448]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e104:	4313      	orrs	r3, r2
 800e106:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e112:	2b00      	cmp	r3, #0
 800e114:	d024      	beq.n	800e160 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800e11a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e11e:	d11f      	bne.n	800e160 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e120:	4b68      	ldr	r3, [pc, #416]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e126:	0e1b      	lsrs	r3, r3, #24
 800e128:	f003 030f 	and.w	r3, r3, #15
 800e12c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e12e:	4b65      	ldr	r3, [pc, #404]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e134:	0f1b      	lsrs	r3, r3, #28
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	691b      	ldr	r3, [r3, #16]
 800e140:	019a      	lsls	r2, r3, #6
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	695b      	ldr	r3, [r3, #20]
 800e146:	085b      	lsrs	r3, r3, #1
 800e148:	3b01      	subs	r3, #1
 800e14a:	041b      	lsls	r3, r3, #16
 800e14c:	431a      	orrs	r2, r3
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	061b      	lsls	r3, r3, #24
 800e152:	431a      	orrs	r2, r3
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	071b      	lsls	r3, r3, #28
 800e158:	495a      	ldr	r1, [pc, #360]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e15a:	4313      	orrs	r3, r2
 800e15c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e160:	4b59      	ldr	r3, [pc, #356]	; (800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800e162:	2201      	movs	r2, #1
 800e164:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e166:	f7fd f9db 	bl	800b520 <HAL_GetTick>
 800e16a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e16c:	e008      	b.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e16e:	f7fd f9d7 	bl	800b520 <HAL_GetTick>
 800e172:	4602      	mov	r2, r0
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	1ad3      	subs	r3, r2, r3
 800e178:	2b02      	cmp	r3, #2
 800e17a:	d901      	bls.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e17c:	2303      	movs	r3, #3
 800e17e:	e09c      	b.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e180:	4b50      	ldr	r3, [pc, #320]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e18c:	d1ef      	bne.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f003 0320 	and.w	r3, r3, #32
 800e196:	2b00      	cmp	r3, #0
 800e198:	f000 8083 	beq.w	800e2a2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e19c:	2300      	movs	r3, #0
 800e19e:	60bb      	str	r3, [r7, #8]
 800e1a0:	4b48      	ldr	r3, [pc, #288]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1a4:	4a47      	ldr	r2, [pc, #284]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e1a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1aa:	6413      	str	r3, [r2, #64]	; 0x40
 800e1ac:	4b45      	ldr	r3, [pc, #276]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1b4:	60bb      	str	r3, [r7, #8]
 800e1b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800e1b8:	4b44      	ldr	r3, [pc, #272]	; (800e2cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4a43      	ldr	r2, [pc, #268]	; (800e2cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e1be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e1c2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e1c4:	f7fd f9ac 	bl	800b520 <HAL_GetTick>
 800e1c8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e1ca:	e008      	b.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e1cc:	f7fd f9a8 	bl	800b520 <HAL_GetTick>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d901      	bls.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800e1da:	2303      	movs	r3, #3
 800e1dc:	e06d      	b.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e1de:	4b3b      	ldr	r3, [pc, #236]	; (800e2cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0f0      	beq.n	800e1cc <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e1ea:	4b36      	ldr	r3, [pc, #216]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1f2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e1f4:	69bb      	ldr	r3, [r7, #24]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d02f      	beq.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e202:	69ba      	ldr	r2, [r7, #24]
 800e204:	429a      	cmp	r2, r3
 800e206:	d028      	beq.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e208:	4b2e      	ldr	r3, [pc, #184]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e20c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e210:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e212:	4b2f      	ldr	r3, [pc, #188]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800e214:	2201      	movs	r2, #1
 800e216:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e218:	4b2d      	ldr	r3, [pc, #180]	; (800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800e21e:	4a29      	ldr	r2, [pc, #164]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e224:	4b27      	ldr	r3, [pc, #156]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e228:	f003 0301 	and.w	r3, r3, #1
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d114      	bne.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800e230:	f7fd f976 	bl	800b520 <HAL_GetTick>
 800e234:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e236:	e00a      	b.n	800e24e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e238:	f7fd f972 	bl	800b520 <HAL_GetTick>
 800e23c:	4602      	mov	r2, r0
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	f241 3288 	movw	r2, #5000	; 0x1388
 800e246:	4293      	cmp	r3, r2
 800e248:	d901      	bls.n	800e24e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800e24a:	2303      	movs	r3, #3
 800e24c:	e035      	b.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e24e:	4b1d      	ldr	r3, [pc, #116]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e252:	f003 0302 	and.w	r3, r3, #2
 800e256:	2b00      	cmp	r3, #0
 800e258:	d0ee      	beq.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e266:	d10d      	bne.n	800e284 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800e268:	4b16      	ldr	r3, [pc, #88]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e26a:	689b      	ldr	r3, [r3, #8]
 800e26c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e274:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e27c:	4911      	ldr	r1, [pc, #68]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e27e:	4313      	orrs	r3, r2
 800e280:	608b      	str	r3, [r1, #8]
 800e282:	e005      	b.n	800e290 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800e284:	4b0f      	ldr	r3, [pc, #60]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	4a0e      	ldr	r2, [pc, #56]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e28a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e28e:	6093      	str	r3, [r2, #8]
 800e290:	4b0c      	ldr	r3, [pc, #48]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e29c:	4909      	ldr	r1, [pc, #36]	; (800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f003 0310 	and.w	r3, r3, #16
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d004      	beq.n	800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e2b4:	4b07      	ldr	r3, [pc, #28]	; (800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800e2b6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800e2b8:	2300      	movs	r3, #0
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3720      	adds	r7, #32
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	40023800 	.word	0x40023800
 800e2c8:	42470070 	.word	0x42470070
 800e2cc:	40007000 	.word	0x40007000
 800e2d0:	42470e40 	.word	0x42470e40
 800e2d4:	424711e0 	.word	0x424711e0

0800e2d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b086      	sub	sp, #24
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f003 0301 	and.w	r3, r3, #1
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d075      	beq.n	800e3dc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e2f0:	4ba2      	ldr	r3, [pc, #648]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	f003 030c 	and.w	r3, r3, #12
 800e2f8:	2b04      	cmp	r3, #4
 800e2fa:	d00c      	beq.n	800e316 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e2fc:	4b9f      	ldr	r3, [pc, #636]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e304:	2b08      	cmp	r3, #8
 800e306:	d112      	bne.n	800e32e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e308:	4b9c      	ldr	r3, [pc, #624]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e314:	d10b      	bne.n	800e32e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e316:	4b99      	ldr	r3, [pc, #612]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d05b      	beq.n	800e3da <HAL_RCC_OscConfig+0x102>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d157      	bne.n	800e3da <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	e20b      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e336:	d106      	bne.n	800e346 <HAL_RCC_OscConfig+0x6e>
 800e338:	4b90      	ldr	r3, [pc, #576]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a8f      	ldr	r2, [pc, #572]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e33e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e342:	6013      	str	r3, [r2, #0]
 800e344:	e01d      	b.n	800e382 <HAL_RCC_OscConfig+0xaa>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e34e:	d10c      	bne.n	800e36a <HAL_RCC_OscConfig+0x92>
 800e350:	4b8a      	ldr	r3, [pc, #552]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a89      	ldr	r2, [pc, #548]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e35a:	6013      	str	r3, [r2, #0]
 800e35c:	4b87      	ldr	r3, [pc, #540]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a86      	ldr	r2, [pc, #536]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e366:	6013      	str	r3, [r2, #0]
 800e368:	e00b      	b.n	800e382 <HAL_RCC_OscConfig+0xaa>
 800e36a:	4b84      	ldr	r3, [pc, #528]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a83      	ldr	r2, [pc, #524]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e374:	6013      	str	r3, [r2, #0]
 800e376:	4b81      	ldr	r3, [pc, #516]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a80      	ldr	r2, [pc, #512]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e37c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e380:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d013      	beq.n	800e3b2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e38a:	f7fd f8c9 	bl	800b520 <HAL_GetTick>
 800e38e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e390:	e008      	b.n	800e3a4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e392:	f7fd f8c5 	bl	800b520 <HAL_GetTick>
 800e396:	4602      	mov	r2, r0
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	1ad3      	subs	r3, r2, r3
 800e39c:	2b64      	cmp	r3, #100	; 0x64
 800e39e:	d901      	bls.n	800e3a4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800e3a0:	2303      	movs	r3, #3
 800e3a2:	e1d0      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e3a4:	4b75      	ldr	r3, [pc, #468]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d0f0      	beq.n	800e392 <HAL_RCC_OscConfig+0xba>
 800e3b0:	e014      	b.n	800e3dc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3b2:	f7fd f8b5 	bl	800b520 <HAL_GetTick>
 800e3b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e3b8:	e008      	b.n	800e3cc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e3ba:	f7fd f8b1 	bl	800b520 <HAL_GetTick>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	2b64      	cmp	r3, #100	; 0x64
 800e3c6:	d901      	bls.n	800e3cc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	e1bc      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e3cc:	4b6b      	ldr	r3, [pc, #428]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1f0      	bne.n	800e3ba <HAL_RCC_OscConfig+0xe2>
 800e3d8:	e000      	b.n	800e3dc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e3da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f003 0302 	and.w	r3, r3, #2
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d063      	beq.n	800e4b0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e3e8:	4b64      	ldr	r3, [pc, #400]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e3ea:	689b      	ldr	r3, [r3, #8]
 800e3ec:	f003 030c 	and.w	r3, r3, #12
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00b      	beq.n	800e40c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e3f4:	4b61      	ldr	r3, [pc, #388]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e3fc:	2b08      	cmp	r3, #8
 800e3fe:	d11c      	bne.n	800e43a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e400:	4b5e      	ldr	r3, [pc, #376]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d116      	bne.n	800e43a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e40c:	4b5b      	ldr	r3, [pc, #364]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f003 0302 	and.w	r3, r3, #2
 800e414:	2b00      	cmp	r3, #0
 800e416:	d005      	beq.n	800e424 <HAL_RCC_OscConfig+0x14c>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d001      	beq.n	800e424 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800e420:	2301      	movs	r3, #1
 800e422:	e190      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e424:	4b55      	ldr	r3, [pc, #340]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	691b      	ldr	r3, [r3, #16]
 800e430:	00db      	lsls	r3, r3, #3
 800e432:	4952      	ldr	r1, [pc, #328]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e434:	4313      	orrs	r3, r2
 800e436:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e438:	e03a      	b.n	800e4b0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d020      	beq.n	800e484 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e442:	4b4f      	ldr	r3, [pc, #316]	; (800e580 <HAL_RCC_OscConfig+0x2a8>)
 800e444:	2201      	movs	r2, #1
 800e446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e448:	f7fd f86a 	bl	800b520 <HAL_GetTick>
 800e44c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e44e:	e008      	b.n	800e462 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e450:	f7fd f866 	bl	800b520 <HAL_GetTick>
 800e454:	4602      	mov	r2, r0
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	1ad3      	subs	r3, r2, r3
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d901      	bls.n	800e462 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800e45e:	2303      	movs	r3, #3
 800e460:	e171      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e462:	4b46      	ldr	r3, [pc, #280]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 0302 	and.w	r3, r3, #2
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0f0      	beq.n	800e450 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e46e:	4b43      	ldr	r3, [pc, #268]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	691b      	ldr	r3, [r3, #16]
 800e47a:	00db      	lsls	r3, r3, #3
 800e47c:	493f      	ldr	r1, [pc, #252]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e47e:	4313      	orrs	r3, r2
 800e480:	600b      	str	r3, [r1, #0]
 800e482:	e015      	b.n	800e4b0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e484:	4b3e      	ldr	r3, [pc, #248]	; (800e580 <HAL_RCC_OscConfig+0x2a8>)
 800e486:	2200      	movs	r2, #0
 800e488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e48a:	f7fd f849 	bl	800b520 <HAL_GetTick>
 800e48e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e490:	e008      	b.n	800e4a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e492:	f7fd f845 	bl	800b520 <HAL_GetTick>
 800e496:	4602      	mov	r2, r0
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	1ad3      	subs	r3, r2, r3
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	d901      	bls.n	800e4a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800e4a0:	2303      	movs	r3, #3
 800e4a2:	e150      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e4a4:	4b35      	ldr	r3, [pc, #212]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f003 0302 	and.w	r3, r3, #2
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d1f0      	bne.n	800e492 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f003 0308 	and.w	r3, r3, #8
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d030      	beq.n	800e51e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	695b      	ldr	r3, [r3, #20]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d016      	beq.n	800e4f2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e4c4:	4b2f      	ldr	r3, [pc, #188]	; (800e584 <HAL_RCC_OscConfig+0x2ac>)
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4ca:	f7fd f829 	bl	800b520 <HAL_GetTick>
 800e4ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e4d0:	e008      	b.n	800e4e4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e4d2:	f7fd f825 	bl	800b520 <HAL_GetTick>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	1ad3      	subs	r3, r2, r3
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	d901      	bls.n	800e4e4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800e4e0:	2303      	movs	r3, #3
 800e4e2:	e130      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e4e4:	4b25      	ldr	r3, [pc, #148]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e4e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4e8:	f003 0302 	and.w	r3, r3, #2
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d0f0      	beq.n	800e4d2 <HAL_RCC_OscConfig+0x1fa>
 800e4f0:	e015      	b.n	800e51e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e4f2:	4b24      	ldr	r3, [pc, #144]	; (800e584 <HAL_RCC_OscConfig+0x2ac>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4f8:	f7fd f812 	bl	800b520 <HAL_GetTick>
 800e4fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e4fe:	e008      	b.n	800e512 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e500:	f7fd f80e 	bl	800b520 <HAL_GetTick>
 800e504:	4602      	mov	r2, r0
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	d901      	bls.n	800e512 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800e50e:	2303      	movs	r3, #3
 800e510:	e119      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e512:	4b1a      	ldr	r3, [pc, #104]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e516:	f003 0302 	and.w	r3, r3, #2
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1f0      	bne.n	800e500 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f003 0304 	and.w	r3, r3, #4
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 809f 	beq.w	800e66a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e52c:	2300      	movs	r3, #0
 800e52e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e530:	4b12      	ldr	r3, [pc, #72]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d10f      	bne.n	800e55c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e53c:	2300      	movs	r3, #0
 800e53e:	60fb      	str	r3, [r7, #12]
 800e540:	4b0e      	ldr	r3, [pc, #56]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e544:	4a0d      	ldr	r2, [pc, #52]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e54a:	6413      	str	r3, [r2, #64]	; 0x40
 800e54c:	4b0b      	ldr	r3, [pc, #44]	; (800e57c <HAL_RCC_OscConfig+0x2a4>)
 800e54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800e558:	2301      	movs	r3, #1
 800e55a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e55c:	4b0a      	ldr	r3, [pc, #40]	; (800e588 <HAL_RCC_OscConfig+0x2b0>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e564:	2b00      	cmp	r3, #0
 800e566:	d120      	bne.n	800e5aa <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e568:	4b07      	ldr	r3, [pc, #28]	; (800e588 <HAL_RCC_OscConfig+0x2b0>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4a06      	ldr	r2, [pc, #24]	; (800e588 <HAL_RCC_OscConfig+0x2b0>)
 800e56e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e572:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e574:	f7fc ffd4 	bl	800b520 <HAL_GetTick>
 800e578:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e57a:	e010      	b.n	800e59e <HAL_RCC_OscConfig+0x2c6>
 800e57c:	40023800 	.word	0x40023800
 800e580:	42470000 	.word	0x42470000
 800e584:	42470e80 	.word	0x42470e80
 800e588:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e58c:	f7fc ffc8 	bl	800b520 <HAL_GetTick>
 800e590:	4602      	mov	r2, r0
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	1ad3      	subs	r3, r2, r3
 800e596:	2b02      	cmp	r3, #2
 800e598:	d901      	bls.n	800e59e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800e59a:	2303      	movs	r3, #3
 800e59c:	e0d3      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e59e:	4b6c      	ldr	r3, [pc, #432]	; (800e750 <HAL_RCC_OscConfig+0x478>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d0f0      	beq.n	800e58c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d106      	bne.n	800e5c0 <HAL_RCC_OscConfig+0x2e8>
 800e5b2:	4b68      	ldr	r3, [pc, #416]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5b6:	4a67      	ldr	r2, [pc, #412]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e5b8:	f043 0301 	orr.w	r3, r3, #1
 800e5bc:	6713      	str	r3, [r2, #112]	; 0x70
 800e5be:	e01c      	b.n	800e5fa <HAL_RCC_OscConfig+0x322>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	689b      	ldr	r3, [r3, #8]
 800e5c4:	2b05      	cmp	r3, #5
 800e5c6:	d10c      	bne.n	800e5e2 <HAL_RCC_OscConfig+0x30a>
 800e5c8:	4b62      	ldr	r3, [pc, #392]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5cc:	4a61      	ldr	r2, [pc, #388]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e5ce:	f043 0304 	orr.w	r3, r3, #4
 800e5d2:	6713      	str	r3, [r2, #112]	; 0x70
 800e5d4:	4b5f      	ldr	r3, [pc, #380]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e5d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5d8:	4a5e      	ldr	r2, [pc, #376]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e5da:	f043 0301 	orr.w	r3, r3, #1
 800e5de:	6713      	str	r3, [r2, #112]	; 0x70
 800e5e0:	e00b      	b.n	800e5fa <HAL_RCC_OscConfig+0x322>
 800e5e2:	4b5c      	ldr	r3, [pc, #368]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e6:	4a5b      	ldr	r2, [pc, #364]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e5e8:	f023 0301 	bic.w	r3, r3, #1
 800e5ec:	6713      	str	r3, [r2, #112]	; 0x70
 800e5ee:	4b59      	ldr	r3, [pc, #356]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5f2:	4a58      	ldr	r2, [pc, #352]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e5f4:	f023 0304 	bic.w	r3, r3, #4
 800e5f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	689b      	ldr	r3, [r3, #8]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d015      	beq.n	800e62e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e602:	f7fc ff8d 	bl	800b520 <HAL_GetTick>
 800e606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e608:	e00a      	b.n	800e620 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e60a:	f7fc ff89 	bl	800b520 <HAL_GetTick>
 800e60e:	4602      	mov	r2, r0
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	f241 3288 	movw	r2, #5000	; 0x1388
 800e618:	4293      	cmp	r3, r2
 800e61a:	d901      	bls.n	800e620 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800e61c:	2303      	movs	r3, #3
 800e61e:	e092      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e620:	4b4c      	ldr	r3, [pc, #304]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e624:	f003 0302 	and.w	r3, r3, #2
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d0ee      	beq.n	800e60a <HAL_RCC_OscConfig+0x332>
 800e62c:	e014      	b.n	800e658 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e62e:	f7fc ff77 	bl	800b520 <HAL_GetTick>
 800e632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e634:	e00a      	b.n	800e64c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e636:	f7fc ff73 	bl	800b520 <HAL_GetTick>
 800e63a:	4602      	mov	r2, r0
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	1ad3      	subs	r3, r2, r3
 800e640:	f241 3288 	movw	r2, #5000	; 0x1388
 800e644:	4293      	cmp	r3, r2
 800e646:	d901      	bls.n	800e64c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800e648:	2303      	movs	r3, #3
 800e64a:	e07c      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e64c:	4b41      	ldr	r3, [pc, #260]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e64e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e650:	f003 0302 	and.w	r3, r3, #2
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1ee      	bne.n	800e636 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e658:	7dfb      	ldrb	r3, [r7, #23]
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d105      	bne.n	800e66a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e65e:	4b3d      	ldr	r3, [pc, #244]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e662:	4a3c      	ldr	r2, [pc, #240]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e668:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	699b      	ldr	r3, [r3, #24]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d068      	beq.n	800e744 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e672:	4b38      	ldr	r3, [pc, #224]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	f003 030c 	and.w	r3, r3, #12
 800e67a:	2b08      	cmp	r3, #8
 800e67c:	d060      	beq.n	800e740 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	2b02      	cmp	r3, #2
 800e684:	d145      	bne.n	800e712 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e686:	4b34      	ldr	r3, [pc, #208]	; (800e758 <HAL_RCC_OscConfig+0x480>)
 800e688:	2200      	movs	r2, #0
 800e68a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e68c:	f7fc ff48 	bl	800b520 <HAL_GetTick>
 800e690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e692:	e008      	b.n	800e6a6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e694:	f7fc ff44 	bl	800b520 <HAL_GetTick>
 800e698:	4602      	mov	r2, r0
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	1ad3      	subs	r3, r2, r3
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	d901      	bls.n	800e6a6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	e04f      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e6a6:	4b2b      	ldr	r3, [pc, #172]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d1f0      	bne.n	800e694 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	69da      	ldr	r2, [r3, #28]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6a1b      	ldr	r3, [r3, #32]
 800e6ba:	431a      	orrs	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c0:	019b      	lsls	r3, r3, #6
 800e6c2:	431a      	orrs	r2, r3
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c8:	085b      	lsrs	r3, r3, #1
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	041b      	lsls	r3, r3, #16
 800e6ce:	431a      	orrs	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d4:	061b      	lsls	r3, r3, #24
 800e6d6:	431a      	orrs	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6dc:	071b      	lsls	r3, r3, #28
 800e6de:	491d      	ldr	r1, [pc, #116]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e6e4:	4b1c      	ldr	r3, [pc, #112]	; (800e758 <HAL_RCC_OscConfig+0x480>)
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6ea:	f7fc ff19 	bl	800b520 <HAL_GetTick>
 800e6ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e6f0:	e008      	b.n	800e704 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e6f2:	f7fc ff15 	bl	800b520 <HAL_GetTick>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	1ad3      	subs	r3, r2, r3
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	d901      	bls.n	800e704 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800e700:	2303      	movs	r3, #3
 800e702:	e020      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e704:	4b13      	ldr	r3, [pc, #76]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d0f0      	beq.n	800e6f2 <HAL_RCC_OscConfig+0x41a>
 800e710:	e018      	b.n	800e744 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e712:	4b11      	ldr	r3, [pc, #68]	; (800e758 <HAL_RCC_OscConfig+0x480>)
 800e714:	2200      	movs	r2, #0
 800e716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e718:	f7fc ff02 	bl	800b520 <HAL_GetTick>
 800e71c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e71e:	e008      	b.n	800e732 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e720:	f7fc fefe 	bl	800b520 <HAL_GetTick>
 800e724:	4602      	mov	r2, r0
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	1ad3      	subs	r3, r2, r3
 800e72a:	2b02      	cmp	r3, #2
 800e72c:	d901      	bls.n	800e732 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800e72e:	2303      	movs	r3, #3
 800e730:	e009      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e732:	4b08      	ldr	r3, [pc, #32]	; (800e754 <HAL_RCC_OscConfig+0x47c>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1f0      	bne.n	800e720 <HAL_RCC_OscConfig+0x448>
 800e73e:	e001      	b.n	800e744 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800e740:	2301      	movs	r3, #1
 800e742:	e000      	b.n	800e746 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800e744:	2300      	movs	r3, #0
}
 800e746:	4618      	mov	r0, r3
 800e748:	3718      	adds	r7, #24
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	40007000 	.word	0x40007000
 800e754:	40023800 	.word	0x40023800
 800e758:	42470060 	.word	0x42470060

0800e75c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d101      	bne.n	800e76e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	e022      	b.n	800e7b4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e774:	b2db      	uxtb	r3, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	d105      	bne.n	800e786 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2200      	movs	r2, #0
 800e77e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7f8 ffdf 	bl	8007744 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2203      	movs	r2, #3
 800e78a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 f814 	bl	800e7bc <HAL_SD_InitCard>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d001      	beq.n	800e79e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e79a:	2301      	movs	r3, #1
 800e79c:	e00a      	b.n	800e7b4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e7bc:	b5b0      	push	{r4, r5, r7, lr}
 800e7be:	b08e      	sub	sp, #56	; 0x38
 800e7c0:	af04      	add	r7, sp, #16
 800e7c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800e7d8:	2376      	movs	r3, #118	; 0x76
 800e7da:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681d      	ldr	r5, [r3, #0]
 800e7e0:	466c      	mov	r4, sp
 800e7e2:	f107 0314 	add.w	r3, r7, #20
 800e7e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e7ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e7ee:	f107 0308 	add.w	r3, r7, #8
 800e7f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	f003 fa87 	bl	8011d08 <SDIO_Init>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e804:	2b00      	cmp	r3, #0
 800e806:	d001      	beq.n	800e80c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800e808:	2301      	movs	r3, #1
 800e80a:	e031      	b.n	800e870 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800e80c:	4b1a      	ldr	r3, [pc, #104]	; (800e878 <HAL_SD_InitCard+0xbc>)
 800e80e:	2200      	movs	r2, #0
 800e810:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4618      	mov	r0, r3
 800e818:	f003 fabf 	bl	8011d9a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800e81c:	4b16      	ldr	r3, [pc, #88]	; (800e878 <HAL_SD_InitCard+0xbc>)
 800e81e:	2201      	movs	r2, #1
 800e820:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 ffc6 	bl	800f7b4 <SD_PowerON>
 800e828:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e82a:	6a3b      	ldr	r3, [r7, #32]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d00b      	beq.n	800e848 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e83c:	6a3b      	ldr	r3, [r7, #32]
 800e83e:	431a      	orrs	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e844:	2301      	movs	r3, #1
 800e846:	e013      	b.n	800e870 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 fee5 	bl	800f618 <SD_InitCard>
 800e84e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e850:	6a3b      	ldr	r3, [r7, #32]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d00b      	beq.n	800e86e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2201      	movs	r2, #1
 800e85a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e862:	6a3b      	ldr	r3, [r7, #32]
 800e864:	431a      	orrs	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e86a:	2301      	movs	r3, #1
 800e86c:	e000      	b.n	800e870 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800e86e:	2300      	movs	r3, #0
}
 800e870:	4618      	mov	r0, r3
 800e872:	3728      	adds	r7, #40	; 0x28
 800e874:	46bd      	mov	sp, r7
 800e876:	bdb0      	pop	{r4, r5, r7, pc}
 800e878:	422580a0 	.word	0x422580a0

0800e87c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08c      	sub	sp, #48	; 0x30
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d107      	bne.n	800e8a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e898:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e0c7      	b.n	800ea34 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	f040 80c0 	bne.w	800ea32 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e8b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	441a      	add	r2, r3
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d907      	bls.n	800e8d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	e0ae      	b.n	800ea34 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2203      	movs	r2, #3
 800e8da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e8f4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8fa:	4a50      	ldr	r2, [pc, #320]	; (800ea3c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e8fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e902:	4a4f      	ldr	r2, [pc, #316]	; (800ea40 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800e904:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e90a:	2200      	movs	r2, #0
 800e90c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	3380      	adds	r3, #128	; 0x80
 800e918:	4619      	mov	r1, r3
 800e91a:	68ba      	ldr	r2, [r7, #8]
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	025b      	lsls	r3, r3, #9
 800e920:	089b      	lsrs	r3, r3, #2
 800e922:	f7fd fbef 	bl	800c104 <HAL_DMA_Start_IT>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d017      	beq.n	800e95c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e93a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a40      	ldr	r2, [pc, #256]	; (800ea44 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e942:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e948:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2201      	movs	r2, #1
 800e954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e958:	2301      	movs	r3, #1
 800e95a:	e06b      	b.n	800ea34 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e95c:	4b3a      	ldr	r3, [pc, #232]	; (800ea48 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e95e:	2201      	movs	r2, #1
 800e960:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e966:	2b01      	cmp	r3, #1
 800e968:	d002      	beq.n	800e970 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800e96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96c:	025b      	lsls	r3, r3, #9
 800e96e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e978:	4618      	mov	r0, r3
 800e97a:	f003 faa1 	bl	8011ec0 <SDMMC_CmdBlockLength>
 800e97e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00f      	beq.n	800e9a6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a2e      	ldr	r2, [pc, #184]	; (800ea44 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e98c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e994:	431a      	orrs	r2, r3
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2201      	movs	r2, #1
 800e99e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e046      	b.n	800ea34 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	025b      	lsls	r3, r3, #9
 800e9b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e9b2:	2390      	movs	r3, #144	; 0x90
 800e9b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e9b6:	2302      	movs	r3, #2
 800e9b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e9be:	2301      	movs	r3, #1
 800e9c0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f107 0210 	add.w	r2, r7, #16
 800e9ca:	4611      	mov	r1, r2
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f003 fa4b 	bl	8011e68 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d90a      	bls.n	800e9ee <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2282      	movs	r2, #130	; 0x82
 800e9dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f003 faaf 	bl	8011f48 <SDMMC_CmdReadMultiBlock>
 800e9ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e9ec:	e009      	b.n	800ea02 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2281      	movs	r2, #129	; 0x81
 800e9f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f003 fa82 	bl	8011f04 <SDMMC_CmdReadSingleBlock>
 800ea00:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ea02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d012      	beq.n	800ea2e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a0d      	ldr	r2, [pc, #52]	; (800ea44 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ea0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea16:	431a      	orrs	r2, r3
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2200      	movs	r2, #0
 800ea28:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e002      	b.n	800ea34 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	e000      	b.n	800ea34 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ea32:	2302      	movs	r3, #2
  }
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3730      	adds	r7, #48	; 0x30
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	0800f427 	.word	0x0800f427
 800ea40:	0800f499 	.word	0x0800f499
 800ea44:	004005ff 	.word	0x004005ff
 800ea48:	4225858c 	.word	0x4225858c

0800ea4c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b08c      	sub	sp, #48	; 0x30
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	60b9      	str	r1, [r7, #8]
 800ea56:	607a      	str	r2, [r7, #4]
 800ea58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d107      	bne.n	800ea74 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ea70:	2301      	movs	r3, #1
 800ea72:	e0ca      	b.n	800ec0a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	f040 80c3 	bne.w	800ec08 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2200      	movs	r2, #0
 800ea86:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ea88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	441a      	add	r2, r3
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d907      	bls.n	800eaa6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e0b1      	b.n	800ec0a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2203      	movs	r2, #3
 800eaaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2200      	movs	r2, #0
 800eab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f042 021a 	orr.w	r2, r2, #26
 800eac4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaca:	4a52      	ldr	r2, [pc, #328]	; (800ec14 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800eacc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ead2:	4a51      	ldr	r2, [pc, #324]	; (800ec18 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800ead4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eada:	2200      	movs	r2, #0
 800eadc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d002      	beq.n	800eaec <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800eae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae8:	025b      	lsls	r3, r3, #9
 800eaea:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f003 f9e3 	bl	8011ec0 <SDMMC_CmdBlockLength>
 800eafa:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800eafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d00f      	beq.n	800eb22 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4a45      	ldr	r2, [pc, #276]	; (800ec1c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800eb08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb10:	431a      	orrs	r2, r3
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e073      	b.n	800ec0a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d90a      	bls.n	800eb3e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	22a0      	movs	r2, #160	; 0xa0
 800eb2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb34:	4618      	mov	r0, r3
 800eb36:	f003 fa4b 	bl	8011fd0 <SDMMC_CmdWriteMultiBlock>
 800eb3a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800eb3c:	e009      	b.n	800eb52 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2290      	movs	r2, #144	; 0x90
 800eb42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f003 fa1e 	bl	8011f8c <SDMMC_CmdWriteSingleBlock>
 800eb50:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d012      	beq.n	800eb7e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4a2f      	ldr	r2, [pc, #188]	; (800ec1c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800eb5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb66:	431a      	orrs	r2, r3
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2200      	movs	r2, #0
 800eb78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e045      	b.n	800ec0a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800eb7e:	4b28      	ldr	r3, [pc, #160]	; (800ec20 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800eb80:	2201      	movs	r2, #1
 800eb82:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800eb88:	68b9      	ldr	r1, [r7, #8]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	3380      	adds	r3, #128	; 0x80
 800eb90:	461a      	mov	r2, r3
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	025b      	lsls	r3, r3, #9
 800eb96:	089b      	lsrs	r3, r3, #2
 800eb98:	f7fd fab4 	bl	800c104 <HAL_DMA_Start_IT>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d01a      	beq.n	800ebd8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f022 021a 	bic.w	r2, r2, #26
 800ebb0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4a19      	ldr	r2, [pc, #100]	; (800ec1c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ebb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2201      	movs	r2, #1
 800ebca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	e018      	b.n	800ec0a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ebd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ebdc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	025b      	lsls	r3, r3, #9
 800ebe2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ebe4:	2390      	movs	r3, #144	; 0x90
 800ebe6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f107 0210 	add.w	r2, r7, #16
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f003 f932 	bl	8011e68 <SDIO_ConfigData>

      return HAL_OK;
 800ec04:	2300      	movs	r3, #0
 800ec06:	e000      	b.n	800ec0a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ec08:	2302      	movs	r3, #2
  }
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3730      	adds	r7, #48	; 0x30
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	0800f3fd 	.word	0x0800f3fd
 800ec18:	0800f499 	.word	0x0800f499
 800ec1c:	004005ff 	.word	0x004005ff
 800ec20:	4225858c 	.word	0x4225858c

0800ec24 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec30:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d008      	beq.n	800ec52 <HAL_SD_IRQHandler+0x2e>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f003 0308 	and.w	r3, r3, #8
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d003      	beq.n	800ec52 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f000 ffc8 	bl	800fbe0 <SD_Read_IT>
 800ec50:	e155      	b.n	800eefe <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f000 808f 	beq.w	800ed80 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec6a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	6812      	ldr	r2, [r2, #0]
 800ec76:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ec7a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ec7e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f022 0201 	bic.w	r2, r2, #1
 800ec8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f003 0308 	and.w	r3, r3, #8
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d039      	beq.n	800ed0e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f003 0302 	and.w	r3, r3, #2
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d104      	bne.n	800ecae <HAL_SD_IRQHandler+0x8a>
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f003 0320 	and.w	r3, r3, #32
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d011      	beq.n	800ecd2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f003 f9ae 	bl	8012014 <SDMMC_CmdStopTransfer>
 800ecb8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d008      	beq.n	800ecd2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	431a      	orrs	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 f91f 	bl	800ef10 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f240 523a 	movw	r2, #1338	; 0x53a
 800ecda:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2200      	movs	r2, #0
 800ece8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f003 0301 	and.w	r3, r3, #1
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d104      	bne.n	800ecfe <HAL_SD_IRQHandler+0xda>
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f003 0302 	and.w	r3, r3, #2
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d003      	beq.n	800ed06 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f003 fe04 	bl	801290c <HAL_SD_RxCpltCallback>
 800ed04:	e0fb      	b.n	800eefe <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f003 fdf6 	bl	80128f8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ed0c:	e0f7      	b.n	800eefe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f000 80f2 	beq.w	800eefe <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f003 0320 	and.w	r3, r3, #32
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d011      	beq.n	800ed48 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f003 f973 	bl	8012014 <SDMMC_CmdStopTransfer>
 800ed2e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d008      	beq.n	800ed48 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	431a      	orrs	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 f8e4 	bl	800ef10 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f003 0301 	and.w	r3, r3, #1
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	f040 80d5 	bne.w	800eefe <HAL_SD_IRQHandler+0x2da>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f003 0302 	and.w	r3, r3, #2
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f040 80cf 	bne.w	800eefe <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f022 0208 	bic.w	r2, r2, #8
 800ed6e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2201      	movs	r2, #1
 800ed74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f003 fdbd 	bl	80128f8 <HAL_SD_TxCpltCallback>
}
 800ed7e:	e0be      	b.n	800eefe <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d008      	beq.n	800eda0 <HAL_SD_IRQHandler+0x17c>
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f003 0308 	and.w	r3, r3, #8
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d003      	beq.n	800eda0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 ff72 	bl	800fc82 <SD_Write_IT>
 800ed9e:	e0ae      	b.n	800eefe <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eda6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f000 80a7 	beq.w	800eefe <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edb6:	f003 0302 	and.w	r3, r3, #2
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d005      	beq.n	800edca <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edc2:	f043 0202 	orr.w	r2, r3, #2
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd0:	f003 0308 	and.w	r3, r3, #8
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d005      	beq.n	800ede4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eddc:	f043 0208 	orr.w	r2, r3, #8
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edea:	f003 0320 	and.w	r3, r3, #32
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d005      	beq.n	800edfe <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf6:	f043 0220 	orr.w	r2, r3, #32
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee04:	f003 0310 	and.w	r3, r3, #16
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d005      	beq.n	800ee18 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee10:	f043 0210 	orr.w	r2, r3, #16
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ee20:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ee30:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f003 f8ec 	bl	8012014 <SDMMC_CmdStopTransfer>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee42:	431a      	orrs	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f003 0308 	and.w	r3, r3, #8
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00a      	beq.n	800ee68 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2201      	movs	r2, #1
 800ee56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 f855 	bl	800ef10 <HAL_SD_ErrorCallback>
}
 800ee66:	e04a      	b.n	800eefe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d045      	beq.n	800eefe <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f003 0310 	and.w	r3, r3, #16
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d104      	bne.n	800ee86 <HAL_SD_IRQHandler+0x262>
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f003 0320 	and.w	r3, r3, #32
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d011      	beq.n	800eeaa <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee8a:	4a1f      	ldr	r2, [pc, #124]	; (800ef08 <HAL_SD_IRQHandler+0x2e4>)
 800ee8c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fd f98e 	bl	800c1b4 <HAL_DMA_Abort_IT>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d02f      	beq.n	800eefe <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eea2:	4618      	mov	r0, r3
 800eea4:	f000 fb4a 	bl	800f53c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800eea8:	e029      	b.n	800eefe <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f003 0301 	and.w	r3, r3, #1
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d104      	bne.n	800eebe <HAL_SD_IRQHandler+0x29a>
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f003 0302 	and.w	r3, r3, #2
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d011      	beq.n	800eee2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eec2:	4a12      	ldr	r2, [pc, #72]	; (800ef0c <HAL_SD_IRQHandler+0x2e8>)
 800eec4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fd f972 	bl	800c1b4 <HAL_DMA_Abort_IT>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d013      	beq.n	800eefe <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeda:	4618      	mov	r0, r3
 800eedc:	f000 fb65 	bl	800f5aa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800eee0:	e00d      	b.n	800eefe <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f003 fcf4 	bl	80128e4 <HAL_SD_AbortCallback>
}
 800eefc:	e7ff      	b.n	800eefe <HAL_SD_IRQHandler+0x2da>
 800eefe:	bf00      	nop
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	0800f53d 	.word	0x0800f53d
 800ef0c:	0800f5ab 	.word	0x0800f5ab

0800ef10 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ef18:	bf00      	nop
 800ef1a:	370c      	adds	r7, #12
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef32:	0f9b      	lsrs	r3, r3, #30
 800ef34:	b2da      	uxtb	r2, r3
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef3e:	0e9b      	lsrs	r3, r3, #26
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	f003 030f 	and.w	r3, r3, #15
 800ef46:	b2da      	uxtb	r2, r3
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef50:	0e1b      	lsrs	r3, r3, #24
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	f003 0303 	and.w	r3, r3, #3
 800ef58:	b2da      	uxtb	r2, r3
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef62:	0c1b      	lsrs	r3, r3, #16
 800ef64:	b2da      	uxtb	r2, r3
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef6e:	0a1b      	lsrs	r3, r3, #8
 800ef70:	b2da      	uxtb	r2, r3
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef7a:	b2da      	uxtb	r2, r3
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef84:	0d1b      	lsrs	r3, r3, #20
 800ef86:	b29a      	uxth	r2, r3
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef90:	0c1b      	lsrs	r3, r3, #16
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	f003 030f 	and.w	r3, r3, #15
 800ef98:	b2da      	uxtb	r2, r3
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efa2:	0bdb      	lsrs	r3, r3, #15
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	f003 0301 	and.w	r3, r3, #1
 800efaa:	b2da      	uxtb	r2, r3
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efb4:	0b9b      	lsrs	r3, r3, #14
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	f003 0301 	and.w	r3, r3, #1
 800efbc:	b2da      	uxtb	r2, r3
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efc6:	0b5b      	lsrs	r3, r3, #13
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	f003 0301 	and.w	r3, r3, #1
 800efce:	b2da      	uxtb	r2, r3
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efd8:	0b1b      	lsrs	r3, r3, #12
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	f003 0301 	and.w	r3, r3, #1
 800efe0:	b2da      	uxtb	r2, r3
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2200      	movs	r2, #0
 800efea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d163      	bne.n	800f0bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eff8:	009a      	lsls	r2, r3, #2
 800effa:	f640 73fc 	movw	r3, #4092	; 0xffc
 800effe:	4013      	ands	r3, r2
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800f004:	0f92      	lsrs	r2, r2, #30
 800f006:	431a      	orrs	r2, r3
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f010:	0edb      	lsrs	r3, r3, #27
 800f012:	b2db      	uxtb	r3, r3
 800f014:	f003 0307 	and.w	r3, r3, #7
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f022:	0e1b      	lsrs	r3, r3, #24
 800f024:	b2db      	uxtb	r3, r3
 800f026:	f003 0307 	and.w	r3, r3, #7
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f034:	0d5b      	lsrs	r3, r3, #21
 800f036:	b2db      	uxtb	r3, r3
 800f038:	f003 0307 	and.w	r3, r3, #7
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f046:	0c9b      	lsrs	r3, r3, #18
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	f003 0307 	and.w	r3, r3, #7
 800f04e:	b2da      	uxtb	r2, r3
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f058:	0bdb      	lsrs	r3, r3, #15
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	f003 0307 	and.w	r3, r3, #7
 800f060:	b2da      	uxtb	r2, r3
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	691b      	ldr	r3, [r3, #16]
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	7e1b      	ldrb	r3, [r3, #24]
 800f074:	b2db      	uxtb	r3, r3
 800f076:	f003 0307 	and.w	r3, r3, #7
 800f07a:	3302      	adds	r3, #2
 800f07c:	2201      	movs	r2, #1
 800f07e:	fa02 f303 	lsl.w	r3, r2, r3
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f086:	fb02 f203 	mul.w	r2, r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	7a1b      	ldrb	r3, [r3, #8]
 800f092:	b2db      	uxtb	r3, r3
 800f094:	f003 030f 	and.w	r3, r3, #15
 800f098:	2201      	movs	r2, #1
 800f09a:	409a      	lsls	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800f0a8:	0a52      	lsrs	r2, r2, #9
 800f0aa:	fb02 f203 	mul.w	r2, r2, r3
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0b8:	661a      	str	r2, [r3, #96]	; 0x60
 800f0ba:	e031      	b.n	800f120 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d11d      	bne.n	800f100 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0c8:	041b      	lsls	r3, r3, #16
 800f0ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0d2:	0c1b      	lsrs	r3, r3, #16
 800f0d4:	431a      	orrs	r2, r3
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	691b      	ldr	r3, [r3, #16]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	029a      	lsls	r2, r3, #10
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	661a      	str	r2, [r3, #96]	; 0x60
 800f0fe:	e00f      	b.n	800f120 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a58      	ldr	r2, [pc, #352]	; (800f268 <HAL_SD_GetCardCSD+0x344>)
 800f106:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f10c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2201      	movs	r2, #1
 800f118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f11c:	2301      	movs	r3, #1
 800f11e:	e09d      	b.n	800f25c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f124:	0b9b      	lsrs	r3, r3, #14
 800f126:	b2db      	uxtb	r3, r3
 800f128:	f003 0301 	and.w	r3, r3, #1
 800f12c:	b2da      	uxtb	r2, r3
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f136:	09db      	lsrs	r3, r3, #7
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f13e:	b2da      	uxtb	r2, r3
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f148:	b2db      	uxtb	r3, r3
 800f14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f14e:	b2da      	uxtb	r2, r3
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f158:	0fdb      	lsrs	r3, r3, #31
 800f15a:	b2da      	uxtb	r2, r3
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f164:	0f5b      	lsrs	r3, r3, #29
 800f166:	b2db      	uxtb	r3, r3
 800f168:	f003 0303 	and.w	r3, r3, #3
 800f16c:	b2da      	uxtb	r2, r3
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f176:	0e9b      	lsrs	r3, r3, #26
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	f003 0307 	and.w	r3, r3, #7
 800f17e:	b2da      	uxtb	r2, r3
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f188:	0d9b      	lsrs	r3, r3, #22
 800f18a:	b2db      	uxtb	r3, r3
 800f18c:	f003 030f 	and.w	r3, r3, #15
 800f190:	b2da      	uxtb	r2, r3
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f19a:	0d5b      	lsrs	r3, r3, #21
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	f003 0301 	and.w	r3, r3, #1
 800f1a2:	b2da      	uxtb	r2, r3
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1b6:	0c1b      	lsrs	r3, r3, #16
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	f003 0301 	and.w	r3, r3, #1
 800f1be:	b2da      	uxtb	r2, r3
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1ca:	0bdb      	lsrs	r3, r3, #15
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	f003 0301 	and.w	r3, r3, #1
 800f1d2:	b2da      	uxtb	r2, r3
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1de:	0b9b      	lsrs	r3, r3, #14
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	f003 0301 	and.w	r3, r3, #1
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1f2:	0b5b      	lsrs	r3, r3, #13
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	f003 0301 	and.w	r3, r3, #1
 800f1fa:	b2da      	uxtb	r2, r3
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f206:	0b1b      	lsrs	r3, r3, #12
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	f003 0301 	and.w	r3, r3, #1
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f21a:	0a9b      	lsrs	r3, r3, #10
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	f003 0303 	and.w	r3, r3, #3
 800f222:	b2da      	uxtb	r2, r3
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f22e:	0a1b      	lsrs	r3, r3, #8
 800f230:	b2db      	uxtb	r3, r3
 800f232:	f003 0303 	and.w	r3, r3, #3
 800f236:	b2da      	uxtb	r2, r3
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f242:	085b      	lsrs	r3, r3, #1
 800f244:	b2db      	uxtb	r3, r3
 800f246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	2201      	movs	r2, #1
 800f256:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f25a:	2300      	movs	r3, #0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	370c      	adds	r7, #12
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr
 800f268:	004005ff 	.word	0x004005ff

0800f26c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f2b6:	2300      	movs	r3, #0
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f2c4:	b5b0      	push	{r4, r5, r7, lr}
 800f2c6:	b08e      	sub	sp, #56	; 0x38
 800f2c8:	af04      	add	r7, sp, #16
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2203      	movs	r2, #3
 800f2d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2da:	2b03      	cmp	r3, #3
 800f2dc:	d02e      	beq.n	800f33c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2e4:	d106      	bne.n	800f2f4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	639a      	str	r2, [r3, #56]	; 0x38
 800f2f2:	e029      	b.n	800f348 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2fa:	d10a      	bne.n	800f312 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 fb0f 	bl	800f920 <SD_WideBus_Enable>
 800f302:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30a:	431a      	orrs	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	639a      	str	r2, [r3, #56]	; 0x38
 800f310:	e01a      	b.n	800f348 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d10a      	bne.n	800f32e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 fb4c 	bl	800f9b6 <SD_WideBus_Disable>
 800f31e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f326:	431a      	orrs	r2, r3
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	639a      	str	r2, [r3, #56]	; 0x38
 800f32c:	e00c      	b.n	800f348 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f332:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	639a      	str	r2, [r3, #56]	; 0x38
 800f33a:	e005      	b.n	800f348 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f340:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d009      	beq.n	800f364 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a18      	ldr	r2, [pc, #96]	; (800f3b8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800f356:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2201      	movs	r2, #1
 800f35c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f360:	2301      	movs	r3, #1
 800f362:	e024      	b.n	800f3ae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	689b      	ldr	r3, [r3, #8]
 800f36e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	695b      	ldr	r3, [r3, #20]
 800f37e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	699b      	ldr	r3, [r3, #24]
 800f384:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681d      	ldr	r5, [r3, #0]
 800f38a:	466c      	mov	r4, sp
 800f38c:	f107 0318 	add.w	r3, r7, #24
 800f390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f398:	f107 030c 	add.w	r3, r7, #12
 800f39c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f39e:	4628      	mov	r0, r5
 800f3a0:	f002 fcb2 	bl	8011d08 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f3ac:	2300      	movs	r3, #0
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3728      	adds	r7, #40	; 0x28
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bdb0      	pop	{r4, r5, r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	004005ff 	.word	0x004005ff

0800f3bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b086      	sub	sp, #24
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f3c8:	f107 030c 	add.w	r3, r7, #12
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 fa7e 	bl	800f8d0 <SD_SendStatus>
 800f3d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d005      	beq.n	800f3e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	431a      	orrs	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	0a5b      	lsrs	r3, r3, #9
 800f3ec:	f003 030f 	and.w	r3, r3, #15
 800f3f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f3f2:	693b      	ldr	r3, [r7, #16]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3718      	adds	r7, #24
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b085      	sub	sp, #20
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f408:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f418:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f41a:	bf00      	nop
 800f41c:	3714      	adds	r7, #20
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr

0800f426 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b084      	sub	sp, #16
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f432:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f438:	2b82      	cmp	r3, #130	; 0x82
 800f43a:	d111      	bne.n	800f460 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	4618      	mov	r0, r3
 800f442:	f002 fde7 	bl	8012014 <SDMMC_CmdStopTransfer>
 800f446:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d008      	beq.n	800f460 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	431a      	orrs	r2, r3
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f7ff fd58 	bl	800ef10 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f022 0208 	bic.w	r2, r2, #8
 800f46e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f240 523a 	movw	r2, #1338	; 0x53a
 800f478:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2201      	movs	r2, #1
 800f47e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2200      	movs	r2, #0
 800f486:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f003 fa3f 	bl	801290c <HAL_SD_RxCpltCallback>
#endif
}
 800f48e:	bf00      	nop
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
	...

0800f498 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b086      	sub	sp, #24
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4a4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f7fd f830 	bl	800c50c <HAL_DMA_GetError>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	2b02      	cmp	r3, #2
 800f4b0:	d03e      	beq.n	800f530 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4b8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4c0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d002      	beq.n	800f4ce <SD_DMAError+0x36>
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	d12d      	bne.n	800f52a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4a19      	ldr	r2, [pc, #100]	; (800f538 <SD_DMAError+0xa0>)
 800f4d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800f4e4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800f4f2:	6978      	ldr	r0, [r7, #20]
 800f4f4:	f7ff ff62 	bl	800f3bc <HAL_SD_GetCardState>
 800f4f8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	2b06      	cmp	r3, #6
 800f4fe:	d002      	beq.n	800f506 <SD_DMAError+0x6e>
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	2b05      	cmp	r3, #5
 800f504:	d10a      	bne.n	800f51c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f002 fd82 	bl	8012014 <SDMMC_CmdStopTransfer>
 800f510:	4602      	mov	r2, r0
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f516:	431a      	orrs	r2, r3
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	2200      	movs	r2, #0
 800f528:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800f52a:	6978      	ldr	r0, [r7, #20]
 800f52c:	f7ff fcf0 	bl	800ef10 <HAL_SD_ErrorCallback>
#endif
  }
}
 800f530:	bf00      	nop
 800f532:	3718      	adds	r7, #24
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	004005ff 	.word	0x004005ff

0800f53c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f548:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f240 523a 	movw	r2, #1338	; 0x53a
 800f552:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	f7ff ff31 	bl	800f3bc <HAL_SD_GetCardState>
 800f55a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2201      	movs	r2, #1
 800f560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2200      	movs	r2, #0
 800f568:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	2b06      	cmp	r3, #6
 800f56e:	d002      	beq.n	800f576 <SD_DMATxAbort+0x3a>
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	2b05      	cmp	r3, #5
 800f574:	d10a      	bne.n	800f58c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f002 fd4a 	bl	8012014 <SDMMC_CmdStopTransfer>
 800f580:	4602      	mov	r2, r0
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f586:	431a      	orrs	r2, r3
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f590:	2b00      	cmp	r3, #0
 800f592:	d103      	bne.n	800f59c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	f003 f9a5 	bl	80128e4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f59a:	e002      	b.n	800f5a2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f7ff fcb7 	bl	800ef10 <HAL_SD_ErrorCallback>
}
 800f5a2:	bf00      	nop
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b084      	sub	sp, #16
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5b6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f240 523a 	movw	r2, #1338	; 0x53a
 800f5c0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f7ff fefa 	bl	800f3bc <HAL_SD_GetCardState>
 800f5c8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	2b06      	cmp	r3, #6
 800f5dc:	d002      	beq.n	800f5e4 <SD_DMARxAbort+0x3a>
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	2b05      	cmp	r3, #5
 800f5e2:	d10a      	bne.n	800f5fa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f002 fd13 	bl	8012014 <SDMMC_CmdStopTransfer>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5f4:	431a      	orrs	r2, r3
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d103      	bne.n	800f60a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f003 f96e 	bl	80128e4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f608:	e002      	b.n	800f610 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f7ff fc80 	bl	800ef10 <HAL_SD_ErrorCallback>
}
 800f610:	bf00      	nop
 800f612:	3710      	adds	r7, #16
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f618:	b5b0      	push	{r4, r5, r7, lr}
 800f61a:	b094      	sub	sp, #80	; 0x50
 800f61c:	af04      	add	r7, sp, #16
 800f61e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f620:	2301      	movs	r3, #1
 800f622:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4618      	mov	r0, r3
 800f62a:	f002 fbc5 	bl	8011db8 <SDIO_GetPowerState>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b00      	cmp	r3, #0
 800f632:	d102      	bne.n	800f63a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f634:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f638:	e0b7      	b.n	800f7aa <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f63e:	2b03      	cmp	r3, #3
 800f640:	d02f      	beq.n	800f6a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4618      	mov	r0, r3
 800f648:	f002 fdee 	bl	8012228 <SDMMC_CmdSendCID>
 800f64c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f650:	2b00      	cmp	r3, #0
 800f652:	d001      	beq.n	800f658 <SD_InitCard+0x40>
    {
      return errorstate;
 800f654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f656:	e0a8      	b.n	800f7aa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2100      	movs	r1, #0
 800f65e:	4618      	mov	r0, r3
 800f660:	f002 fbef 	bl	8011e42 <SDIO_GetResponse>
 800f664:	4602      	mov	r2, r0
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2104      	movs	r1, #4
 800f670:	4618      	mov	r0, r3
 800f672:	f002 fbe6 	bl	8011e42 <SDIO_GetResponse>
 800f676:	4602      	mov	r2, r0
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2108      	movs	r1, #8
 800f682:	4618      	mov	r0, r3
 800f684:	f002 fbdd 	bl	8011e42 <SDIO_GetResponse>
 800f688:	4602      	mov	r2, r0
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	210c      	movs	r1, #12
 800f694:	4618      	mov	r0, r3
 800f696:	f002 fbd4 	bl	8011e42 <SDIO_GetResponse>
 800f69a:	4602      	mov	r2, r0
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6a6:	2b03      	cmp	r3, #3
 800f6a8:	d00d      	beq.n	800f6c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f107 020e 	add.w	r2, r7, #14
 800f6b2:	4611      	mov	r1, r2
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f002 fdf4 	bl	80122a2 <SDMMC_CmdSetRelAdd>
 800f6ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <SD_InitCard+0xae>
    {
      return errorstate;
 800f6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6c4:	e071      	b.n	800f7aa <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6ca:	2b03      	cmp	r3, #3
 800f6cc:	d036      	beq.n	800f73c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f6ce:	89fb      	ldrh	r3, [r7, #14]
 800f6d0:	461a      	mov	r2, r3
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6de:	041b      	lsls	r3, r3, #16
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	f002 fdbe 	bl	8012264 <SDMMC_CmdSendCSD>
 800f6e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d001      	beq.n	800f6f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800f6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f2:	e05a      	b.n	800f7aa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f002 fba1 	bl	8011e42 <SDIO_GetResponse>
 800f700:	4602      	mov	r2, r0
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2104      	movs	r1, #4
 800f70c:	4618      	mov	r0, r3
 800f70e:	f002 fb98 	bl	8011e42 <SDIO_GetResponse>
 800f712:	4602      	mov	r2, r0
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2108      	movs	r1, #8
 800f71e:	4618      	mov	r0, r3
 800f720:	f002 fb8f 	bl	8011e42 <SDIO_GetResponse>
 800f724:	4602      	mov	r2, r0
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	210c      	movs	r1, #12
 800f730:	4618      	mov	r0, r3
 800f732:	f002 fb86 	bl	8011e42 <SDIO_GetResponse>
 800f736:	4602      	mov	r2, r0
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2104      	movs	r1, #4
 800f742:	4618      	mov	r0, r3
 800f744:	f002 fb7d 	bl	8011e42 <SDIO_GetResponse>
 800f748:	4603      	mov	r3, r0
 800f74a:	0d1a      	lsrs	r2, r3, #20
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f750:	f107 0310 	add.w	r3, r7, #16
 800f754:	4619      	mov	r1, r3
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f7ff fbe4 	bl	800ef24 <HAL_SD_GetCardCSD>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d002      	beq.n	800f768 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f762:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f766:	e020      	b.n	800f7aa <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6819      	ldr	r1, [r3, #0]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f770:	041b      	lsls	r3, r3, #16
 800f772:	f04f 0400 	mov.w	r4, #0
 800f776:	461a      	mov	r2, r3
 800f778:	4623      	mov	r3, r4
 800f77a:	4608      	mov	r0, r1
 800f77c:	f002 fc6c 	bl	8012058 <SDMMC_CmdSelDesel>
 800f780:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <SD_InitCard+0x174>
  {
    return errorstate;
 800f788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f78a:	e00e      	b.n	800f7aa <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681d      	ldr	r5, [r3, #0]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	466c      	mov	r4, sp
 800f794:	f103 0210 	add.w	r2, r3, #16
 800f798:	ca07      	ldmia	r2, {r0, r1, r2}
 800f79a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f79e:	3304      	adds	r3, #4
 800f7a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	f002 fab0 	bl	8011d08 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f7a8:	2300      	movs	r3, #0
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3740      	adds	r7, #64	; 0x40
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f7b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b086      	sub	sp, #24
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	617b      	str	r3, [r7, #20]
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f002 fc66 	bl	801209e <SDMMC_CmdGoIdleState>
 800f7d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <SD_PowerON+0x2a>
  {
    return errorstate;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	e072      	b.n	800f8c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f002 fc79 	bl	80120da <SDMMC_CmdOperCond>
 800f7e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d00d      	beq.n	800f80c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f002 fc4f 	bl	801209e <SDMMC_CmdGoIdleState>
 800f800:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d004      	beq.n	800f812 <SD_PowerON+0x5e>
    {
      return errorstate;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	e05b      	b.n	800f8c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2201      	movs	r2, #1
 800f810:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f816:	2b01      	cmp	r3, #1
 800f818:	d137      	bne.n	800f88a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2100      	movs	r1, #0
 800f820:	4618      	mov	r0, r3
 800f822:	f002 fc79 	bl	8012118 <SDMMC_CmdAppCommand>
 800f826:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d02d      	beq.n	800f88a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f82e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f832:	e047      	b.n	800f8c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2100      	movs	r1, #0
 800f83a:	4618      	mov	r0, r3
 800f83c:	f002 fc6c 	bl	8012118 <SDMMC_CmdAppCommand>
 800f840:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d001      	beq.n	800f84c <SD_PowerON+0x98>
    {
      return errorstate;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	e03b      	b.n	800f8c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	491e      	ldr	r1, [pc, #120]	; (800f8cc <SD_PowerON+0x118>)
 800f852:	4618      	mov	r0, r3
 800f854:	f002 fc82 	bl	801215c <SDMMC_CmdAppOperCommand>
 800f858:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d002      	beq.n	800f866 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f860:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f864:	e02e      	b.n	800f8c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	2100      	movs	r1, #0
 800f86c:	4618      	mov	r0, r3
 800f86e:	f002 fae8 	bl	8011e42 <SDIO_GetResponse>
 800f872:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	0fdb      	lsrs	r3, r3, #31
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d101      	bne.n	800f880 <SD_PowerON+0xcc>
 800f87c:	2301      	movs	r3, #1
 800f87e:	e000      	b.n	800f882 <SD_PowerON+0xce>
 800f880:	2300      	movs	r3, #0
 800f882:	613b      	str	r3, [r7, #16]

    count++;
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	3301      	adds	r3, #1
 800f888:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f890:	4293      	cmp	r3, r2
 800f892:	d802      	bhi.n	800f89a <SD_PowerON+0xe6>
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d0cc      	beq.n	800f834 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d902      	bls.n	800f8aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f8a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f8a8:	e00c      	b.n	800f8c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d003      	beq.n	800f8bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	645a      	str	r2, [r3, #68]	; 0x44
 800f8ba:	e002      	b.n	800f8c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3718      	adds	r7, #24
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	c1100000 	.word	0xc1100000

0800f8d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d102      	bne.n	800f8e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f8e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f8e4:	e018      	b.n	800f918 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8ee:	041b      	lsls	r3, r3, #16
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	4610      	mov	r0, r2
 800f8f4:	f002 fcf6 	bl	80122e4 <SDMMC_CmdSendStatus>
 800f8f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d001      	beq.n	800f904 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	e009      	b.n	800f918 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	2100      	movs	r1, #0
 800f90a:	4618      	mov	r0, r3
 800f90c:	f002 fa99 	bl	8011e42 <SDIO_GetResponse>
 800f910:	4602      	mov	r2, r0
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f916:	2300      	movs	r3, #0
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3710      	adds	r7, #16
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b086      	sub	sp, #24
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f928:	2300      	movs	r3, #0
 800f92a:	60fb      	str	r3, [r7, #12]
 800f92c:	2300      	movs	r3, #0
 800f92e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2100      	movs	r1, #0
 800f936:	4618      	mov	r0, r3
 800f938:	f002 fa83 	bl	8011e42 <SDIO_GetResponse>
 800f93c:	4603      	mov	r3, r0
 800f93e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f946:	d102      	bne.n	800f94e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f94c:	e02f      	b.n	800f9ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f94e:	f107 030c 	add.w	r3, r7, #12
 800f952:	4619      	mov	r1, r3
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 f879 	bl	800fa4c <SD_FindSCR>
 800f95a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d001      	beq.n	800f966 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	e023      	b.n	800f9ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d01c      	beq.n	800f9aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f978:	041b      	lsls	r3, r3, #16
 800f97a:	4619      	mov	r1, r3
 800f97c:	4610      	mov	r0, r2
 800f97e:	f002 fbcb 	bl	8012118 <SDMMC_CmdAppCommand>
 800f982:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d001      	beq.n	800f98e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	e00f      	b.n	800f9ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2102      	movs	r1, #2
 800f994:	4618      	mov	r0, r3
 800f996:	f002 fc04 	bl	80121a2 <SDMMC_CmdBusWidth>
 800f99a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d001      	beq.n	800f9a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	e003      	b.n	800f9ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	e001      	b.n	800f9ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f9aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3718      	adds	r7, #24
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b086      	sub	sp, #24
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f9be:	2300      	movs	r3, #0
 800f9c0:	60fb      	str	r3, [r7, #12]
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f002 fa38 	bl	8011e42 <SDIO_GetResponse>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f9dc:	d102      	bne.n	800f9e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f9de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9e2:	e02f      	b.n	800fa44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f9e4:	f107 030c 	add.w	r3, r7, #12
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 f82e 	bl	800fa4c <SD_FindSCR>
 800f9f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d001      	beq.n	800f9fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	e023      	b.n	800fa44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d01c      	beq.n	800fa40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa0e:	041b      	lsls	r3, r3, #16
 800fa10:	4619      	mov	r1, r3
 800fa12:	4610      	mov	r0, r2
 800fa14:	f002 fb80 	bl	8012118 <SDMMC_CmdAppCommand>
 800fa18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d001      	beq.n	800fa24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	e00f      	b.n	800fa44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2100      	movs	r1, #0
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f002 fbb9 	bl	80121a2 <SDMMC_CmdBusWidth>
 800fa30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d001      	beq.n	800fa3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	e003      	b.n	800fa44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	e001      	b.n	800fa44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fa40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3718      	adds	r7, #24
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800fa4c:	b590      	push	{r4, r7, lr}
 800fa4e:	b08f      	sub	sp, #60	; 0x3c
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fa56:	f7fb fd63 	bl	800b520 <HAL_GetTick>
 800fa5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800fa60:	2300      	movs	r3, #0
 800fa62:	60bb      	str	r3, [r7, #8]
 800fa64:	2300      	movs	r3, #0
 800fa66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2108      	movs	r1, #8
 800fa72:	4618      	mov	r0, r3
 800fa74:	f002 fa24 	bl	8011ec0 <SDMMC_CmdBlockLength>
 800fa78:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d001      	beq.n	800fa84 <SD_FindSCR+0x38>
  {
    return errorstate;
 800fa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa82:	e0a9      	b.n	800fbd8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa8c:	041b      	lsls	r3, r3, #16
 800fa8e:	4619      	mov	r1, r3
 800fa90:	4610      	mov	r0, r2
 800fa92:	f002 fb41 	bl	8012118 <SDMMC_CmdAppCommand>
 800fa96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d001      	beq.n	800faa2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800fa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa0:	e09a      	b.n	800fbd8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800faa2:	f04f 33ff 	mov.w	r3, #4294967295
 800faa6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800faa8:	2308      	movs	r3, #8
 800faaa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800faac:	2330      	movs	r3, #48	; 0x30
 800faae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800fab0:	2302      	movs	r3, #2
 800fab2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800fab4:	2300      	movs	r3, #0
 800fab6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800fab8:	2301      	movs	r3, #1
 800faba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f107 0210 	add.w	r2, r7, #16
 800fac4:	4611      	mov	r1, r2
 800fac6:	4618      	mov	r0, r3
 800fac8:	f002 f9ce 	bl	8011e68 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f002 fb88 	bl	80121e6 <SDMMC_CmdSendSCR>
 800fad6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d022      	beq.n	800fb24 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800fade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae0:	e07a      	b.n	800fbd8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800faec:	2b00      	cmp	r3, #0
 800faee:	d00e      	beq.n	800fb0e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6819      	ldr	r1, [r3, #0]
 800faf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	f107 0208 	add.w	r2, r7, #8
 800fafc:	18d4      	adds	r4, r2, r3
 800fafe:	4608      	mov	r0, r1
 800fb00:	f002 f92d 	bl	8011d5e <SDIO_ReadFIFO>
 800fb04:	4603      	mov	r3, r0
 800fb06:	6023      	str	r3, [r4, #0]
      index++;
 800fb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800fb0e:	f7fb fd07 	bl	800b520 <HAL_GetTick>
 800fb12:	4602      	mov	r2, r0
 800fb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb16:	1ad3      	subs	r3, r2, r3
 800fb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb1c:	d102      	bne.n	800fb24 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800fb1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fb22:	e059      	b.n	800fbd8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb2a:	f240 432a 	movw	r3, #1066	; 0x42a
 800fb2e:	4013      	ands	r3, r2
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d0d6      	beq.n	800fae2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb3a:	f003 0308 	and.w	r3, r3, #8
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d005      	beq.n	800fb4e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	2208      	movs	r2, #8
 800fb48:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fb4a:	2308      	movs	r3, #8
 800fb4c:	e044      	b.n	800fbd8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb54:	f003 0302 	and.w	r3, r3, #2
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d005      	beq.n	800fb68 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2202      	movs	r2, #2
 800fb62:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fb64:	2302      	movs	r3, #2
 800fb66:	e037      	b.n	800fbd8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb6e:	f003 0320 	and.w	r3, r3, #32
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d005      	beq.n	800fb82 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	2220      	movs	r2, #32
 800fb7c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800fb7e:	2320      	movs	r3, #32
 800fb80:	e02a      	b.n	800fbd8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f240 523a 	movw	r2, #1338	; 0x53a
 800fb8a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	061a      	lsls	r2, r3, #24
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	021b      	lsls	r3, r3, #8
 800fb94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fb98:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	0a1b      	lsrs	r3, r3, #8
 800fb9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fba2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	0e1b      	lsrs	r3, r3, #24
 800fba8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbac:	601a      	str	r2, [r3, #0]
    scr++;
 800fbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb0:	3304      	adds	r3, #4
 800fbb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	061a      	lsls	r2, r3, #24
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	021b      	lsls	r3, r3, #8
 800fbbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fbc0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	0a1b      	lsrs	r3, r3, #8
 800fbc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fbca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	0e1b      	lsrs	r3, r3, #24
 800fbd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800fbd6:	2300      	movs	r3, #0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	373c      	adds	r7, #60	; 0x3c
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd90      	pop	{r4, r7, pc}

0800fbe0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d03f      	beq.n	800fc7a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	617b      	str	r3, [r7, #20]
 800fbfe:	e033      	b.n	800fc68 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f002 f8aa 	bl	8011d5e <SDIO_ReadFIFO>
 800fc0a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	b2da      	uxtb	r2, r3
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	3301      	adds	r3, #1
 800fc18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	0a1b      	lsrs	r3, r3, #8
 800fc24:	b2da      	uxtb	r2, r3
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	3b01      	subs	r3, #1
 800fc34:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	0c1b      	lsrs	r3, r3, #16
 800fc3a:	b2da      	uxtb	r2, r3
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	3301      	adds	r3, #1
 800fc44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	3b01      	subs	r3, #1
 800fc4a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	0e1b      	lsrs	r3, r3, #24
 800fc50:	b2da      	uxtb	r2, r3
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	3301      	adds	r3, #1
 800fc66:	617b      	str	r3, [r7, #20]
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	2b07      	cmp	r3, #7
 800fc6c:	d9c8      	bls.n	800fc00 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	68fa      	ldr	r2, [r7, #12]
 800fc72:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	693a      	ldr	r2, [r7, #16]
 800fc78:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800fc7a:	bf00      	nop
 800fc7c:	3718      	adds	r7, #24
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b086      	sub	sp, #24
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6a1b      	ldr	r3, [r3, #32]
 800fc8e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc94:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d043      	beq.n	800fd24 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	617b      	str	r3, [r7, #20]
 800fca0:	e037      	b.n	800fd12 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	021a      	lsls	r2, r3, #8
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	3b01      	subs	r3, #1
 800fcca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	041a      	lsls	r2, r3, #16
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	4313      	orrs	r3, r2
 800fcd6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	3b01      	subs	r3, #1
 800fce2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	061a      	lsls	r2, r3, #24
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	4313      	orrs	r3, r2
 800fcee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	3b01      	subs	r3, #1
 800fcfa:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f107 0208 	add.w	r2, r7, #8
 800fd04:	4611      	mov	r1, r2
 800fd06:	4618      	mov	r0, r3
 800fd08:	f002 f836 	bl	8011d78 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	617b      	str	r3, [r7, #20]
 800fd12:	697b      	ldr	r3, [r7, #20]
 800fd14:	2b07      	cmp	r3, #7
 800fd16:	d9c4      	bls.n	800fca2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	68fa      	ldr	r2, [r7, #12]
 800fd1c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	693a      	ldr	r2, [r7, #16]
 800fd22:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800fd24:	bf00      	nop
 800fd26:	3718      	adds	r7, #24
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d101      	bne.n	800fd3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e056      	b.n	800fdec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2200      	movs	r2, #0
 800fd42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d106      	bne.n	800fd5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2200      	movs	r2, #0
 800fd54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f7f7 fde5 	bl	8007928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2202      	movs	r2, #2
 800fd62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fd74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	685a      	ldr	r2, [r3, #4]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	431a      	orrs	r2, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	431a      	orrs	r2, r3
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	691b      	ldr	r3, [r3, #16]
 800fd8a:	431a      	orrs	r2, r3
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	695b      	ldr	r3, [r3, #20]
 800fd90:	431a      	orrs	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	699b      	ldr	r3, [r3, #24]
 800fd96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fd9a:	431a      	orrs	r2, r3
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	69db      	ldr	r3, [r3, #28]
 800fda0:	431a      	orrs	r2, r3
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6a1b      	ldr	r3, [r3, #32]
 800fda6:	ea42 0103 	orr.w	r1, r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	430a      	orrs	r2, r1
 800fdb4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	699b      	ldr	r3, [r3, #24]
 800fdba:	0c1b      	lsrs	r3, r3, #16
 800fdbc:	f003 0104 	and.w	r1, r3, #4
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	430a      	orrs	r2, r1
 800fdca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	69da      	ldr	r2, [r3, #28]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fdda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2200      	movs	r2, #0
 800fde0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2201      	movs	r2, #1
 800fde6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b088      	sub	sp, #32
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60f8      	str	r0, [r7, #12]
 800fdfc:	60b9      	str	r1, [r7, #8]
 800fdfe:	603b      	str	r3, [r7, #0]
 800fe00:	4613      	mov	r3, r2
 800fe02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fe04:	2300      	movs	r3, #0
 800fe06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d101      	bne.n	800fe16 <HAL_SPI_Transmit+0x22>
 800fe12:	2302      	movs	r3, #2
 800fe14:	e11e      	b.n	8010054 <HAL_SPI_Transmit+0x260>
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fe1e:	f7fb fb7f 	bl	800b520 <HAL_GetTick>
 800fe22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800fe24:	88fb      	ldrh	r3, [r7, #6]
 800fe26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d002      	beq.n	800fe3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800fe34:	2302      	movs	r3, #2
 800fe36:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fe38:	e103      	b.n	8010042 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d002      	beq.n	800fe46 <HAL_SPI_Transmit+0x52>
 800fe40:	88fb      	ldrh	r3, [r7, #6]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d102      	bne.n	800fe4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800fe46:	2301      	movs	r3, #1
 800fe48:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fe4a:	e0fa      	b.n	8010042 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2203      	movs	r2, #3
 800fe50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	68ba      	ldr	r2, [r7, #8]
 800fe5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	88fa      	ldrh	r2, [r7, #6]
 800fe64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	88fa      	ldrh	r2, [r7, #6]
 800fe6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2200      	movs	r2, #0
 800fe76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2200      	movs	r2, #0
 800fe82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2200      	movs	r2, #0
 800fe88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	689b      	ldr	r3, [r3, #8]
 800fe8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe92:	d107      	bne.n	800fea4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fea2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feae:	2b40      	cmp	r3, #64	; 0x40
 800feb0:	d007      	beq.n	800fec2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fec0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800feca:	d14b      	bne.n	800ff64 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d002      	beq.n	800feda <HAL_SPI_Transmit+0xe6>
 800fed4:	8afb      	ldrh	r3, [r7, #22]
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d13e      	bne.n	800ff58 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fede:	881a      	ldrh	r2, [r3, #0]
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feea:	1c9a      	adds	r2, r3, #2
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	3b01      	subs	r3, #1
 800fef8:	b29a      	uxth	r2, r3
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800fefe:	e02b      	b.n	800ff58 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	f003 0302 	and.w	r3, r3, #2
 800ff0a:	2b02      	cmp	r3, #2
 800ff0c:	d112      	bne.n	800ff34 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff12:	881a      	ldrh	r2, [r3, #0]
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff1e:	1c9a      	adds	r2, r3, #2
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	3b01      	subs	r3, #1
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	86da      	strh	r2, [r3, #54]	; 0x36
 800ff32:	e011      	b.n	800ff58 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff34:	f7fb faf4 	bl	800b520 <HAL_GetTick>
 800ff38:	4602      	mov	r2, r0
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	683a      	ldr	r2, [r7, #0]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d803      	bhi.n	800ff4c <HAL_SPI_Transmit+0x158>
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff4a:	d102      	bne.n	800ff52 <HAL_SPI_Transmit+0x15e>
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d102      	bne.n	800ff58 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ff52:	2303      	movs	r3, #3
 800ff54:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ff56:	e074      	b.n	8010042 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d1ce      	bne.n	800ff00 <HAL_SPI_Transmit+0x10c>
 800ff62:	e04c      	b.n	800fffe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d002      	beq.n	800ff72 <HAL_SPI_Transmit+0x17e>
 800ff6c:	8afb      	ldrh	r3, [r7, #22]
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d140      	bne.n	800fff4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	330c      	adds	r3, #12
 800ff7c:	7812      	ldrb	r2, [r2, #0]
 800ff7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff84:	1c5a      	adds	r2, r3, #1
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	3b01      	subs	r3, #1
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ff98:	e02c      	b.n	800fff4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	689b      	ldr	r3, [r3, #8]
 800ffa0:	f003 0302 	and.w	r3, r3, #2
 800ffa4:	2b02      	cmp	r3, #2
 800ffa6:	d113      	bne.n	800ffd0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	330c      	adds	r3, #12
 800ffb2:	7812      	ldrb	r2, [r2, #0]
 800ffb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffba:	1c5a      	adds	r2, r3, #1
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	3b01      	subs	r3, #1
 800ffc8:	b29a      	uxth	r2, r3
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	86da      	strh	r2, [r3, #54]	; 0x36
 800ffce:	e011      	b.n	800fff4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ffd0:	f7fb faa6 	bl	800b520 <HAL_GetTick>
 800ffd4:	4602      	mov	r2, r0
 800ffd6:	69bb      	ldr	r3, [r7, #24]
 800ffd8:	1ad3      	subs	r3, r2, r3
 800ffda:	683a      	ldr	r2, [r7, #0]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d803      	bhi.n	800ffe8 <HAL_SPI_Transmit+0x1f4>
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffe6:	d102      	bne.n	800ffee <HAL_SPI_Transmit+0x1fa>
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d102      	bne.n	800fff4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800ffee:	2303      	movs	r3, #3
 800fff0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800fff2:	e026      	b.n	8010042 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d1cd      	bne.n	800ff9a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fffe:	69ba      	ldr	r2, [r7, #24]
 8010000:	6839      	ldr	r1, [r7, #0]
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f000 fba4 	bl	8010750 <SPI_EndRxTxTransaction>
 8010008:	4603      	mov	r3, r0
 801000a:	2b00      	cmp	r3, #0
 801000c:	d002      	beq.n	8010014 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2220      	movs	r2, #32
 8010012:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	689b      	ldr	r3, [r3, #8]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d10a      	bne.n	8010032 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801001c:	2300      	movs	r3, #0
 801001e:	613b      	str	r3, [r7, #16]
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	68db      	ldr	r3, [r3, #12]
 8010026:	613b      	str	r3, [r7, #16]
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	613b      	str	r3, [r7, #16]
 8010030:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010036:	2b00      	cmp	r3, #0
 8010038:	d002      	beq.n	8010040 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 801003a:	2301      	movs	r3, #1
 801003c:	77fb      	strb	r3, [r7, #31]
 801003e:	e000      	b.n	8010042 <HAL_SPI_Transmit+0x24e>
  }

error:
 8010040:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2201      	movs	r2, #1
 8010046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2200      	movs	r2, #0
 801004e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010052:	7ffb      	ldrb	r3, [r7, #31]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3720      	adds	r7, #32
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b088      	sub	sp, #32
 8010060:	af02      	add	r7, sp, #8
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	603b      	str	r3, [r7, #0]
 8010068:	4613      	mov	r3, r2
 801006a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801006c:	2300      	movs	r3, #0
 801006e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010078:	d112      	bne.n	80100a0 <HAL_SPI_Receive+0x44>
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	689b      	ldr	r3, [r3, #8]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d10e      	bne.n	80100a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2204      	movs	r2, #4
 8010086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801008a:	88fa      	ldrh	r2, [r7, #6]
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	9300      	str	r3, [sp, #0]
 8010090:	4613      	mov	r3, r2
 8010092:	68ba      	ldr	r2, [r7, #8]
 8010094:	68b9      	ldr	r1, [r7, #8]
 8010096:	68f8      	ldr	r0, [r7, #12]
 8010098:	f000 f8e9 	bl	801026e <HAL_SPI_TransmitReceive>
 801009c:	4603      	mov	r3, r0
 801009e:	e0e2      	b.n	8010266 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	d101      	bne.n	80100ae <HAL_SPI_Receive+0x52>
 80100aa:	2302      	movs	r3, #2
 80100ac:	e0db      	b.n	8010266 <HAL_SPI_Receive+0x20a>
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2201      	movs	r2, #1
 80100b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80100b6:	f7fb fa33 	bl	800b520 <HAL_GetTick>
 80100ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d002      	beq.n	80100ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80100c8:	2302      	movs	r3, #2
 80100ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80100cc:	e0c2      	b.n	8010254 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <HAL_SPI_Receive+0x7e>
 80100d4:	88fb      	ldrh	r3, [r7, #6]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d102      	bne.n	80100e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80100da:	2301      	movs	r3, #1
 80100dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80100de:	e0b9      	b.n	8010254 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2204      	movs	r2, #4
 80100e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2200      	movs	r2, #0
 80100ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	68ba      	ldr	r2, [r7, #8]
 80100f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	88fa      	ldrh	r2, [r7, #6]
 80100f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	88fa      	ldrh	r2, [r7, #6]
 80100fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2200      	movs	r2, #0
 8010104:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2200      	movs	r2, #0
 801010a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	2200      	movs	r2, #0
 8010110:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2200      	movs	r2, #0
 8010116:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2200      	movs	r2, #0
 801011c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	689b      	ldr	r3, [r3, #8]
 8010122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010126:	d107      	bne.n	8010138 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010136:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010142:	2b40      	cmp	r3, #64	; 0x40
 8010144:	d007      	beq.n	8010156 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010154:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d162      	bne.n	8010224 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801015e:	e02e      	b.n	80101be <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	689b      	ldr	r3, [r3, #8]
 8010166:	f003 0301 	and.w	r3, r3, #1
 801016a:	2b01      	cmp	r3, #1
 801016c:	d115      	bne.n	801019a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f103 020c 	add.w	r2, r3, #12
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801017a:	7812      	ldrb	r2, [r2, #0]
 801017c:	b2d2      	uxtb	r2, r2
 801017e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010184:	1c5a      	adds	r2, r3, #1
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801018e:	b29b      	uxth	r3, r3
 8010190:	3b01      	subs	r3, #1
 8010192:	b29a      	uxth	r2, r3
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010198:	e011      	b.n	80101be <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801019a:	f7fb f9c1 	bl	800b520 <HAL_GetTick>
 801019e:	4602      	mov	r2, r0
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	1ad3      	subs	r3, r2, r3
 80101a4:	683a      	ldr	r2, [r7, #0]
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d803      	bhi.n	80101b2 <HAL_SPI_Receive+0x156>
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b0:	d102      	bne.n	80101b8 <HAL_SPI_Receive+0x15c>
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d102      	bne.n	80101be <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80101b8:	2303      	movs	r3, #3
 80101ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80101bc:	e04a      	b.n	8010254 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d1cb      	bne.n	8010160 <HAL_SPI_Receive+0x104>
 80101c8:	e031      	b.n	801022e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	f003 0301 	and.w	r3, r3, #1
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d113      	bne.n	8010200 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	68da      	ldr	r2, [r3, #12]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101e2:	b292      	uxth	r2, r2
 80101e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101ea:	1c9a      	adds	r2, r3, #2
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80101f4:	b29b      	uxth	r3, r3
 80101f6:	3b01      	subs	r3, #1
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80101fe:	e011      	b.n	8010224 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010200:	f7fb f98e 	bl	800b520 <HAL_GetTick>
 8010204:	4602      	mov	r2, r0
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	1ad3      	subs	r3, r2, r3
 801020a:	683a      	ldr	r2, [r7, #0]
 801020c:	429a      	cmp	r2, r3
 801020e:	d803      	bhi.n	8010218 <HAL_SPI_Receive+0x1bc>
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010216:	d102      	bne.n	801021e <HAL_SPI_Receive+0x1c2>
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d102      	bne.n	8010224 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 801021e:	2303      	movs	r3, #3
 8010220:	75fb      	strb	r3, [r7, #23]
          goto error;
 8010222:	e017      	b.n	8010254 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010228:	b29b      	uxth	r3, r3
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1cd      	bne.n	80101ca <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801022e:	693a      	ldr	r2, [r7, #16]
 8010230:	6839      	ldr	r1, [r7, #0]
 8010232:	68f8      	ldr	r0, [r7, #12]
 8010234:	f000 fa27 	bl	8010686 <SPI_EndRxTransaction>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	d002      	beq.n	8010244 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2220      	movs	r2, #32
 8010242:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010248:	2b00      	cmp	r3, #0
 801024a:	d002      	beq.n	8010252 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 801024c:	2301      	movs	r3, #1
 801024e:	75fb      	strb	r3, [r7, #23]
 8010250:	e000      	b.n	8010254 <HAL_SPI_Receive+0x1f8>
  }

error :
 8010252:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2201      	movs	r2, #1
 8010258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	2200      	movs	r2, #0
 8010260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010264:	7dfb      	ldrb	r3, [r7, #23]
}
 8010266:	4618      	mov	r0, r3
 8010268:	3718      	adds	r7, #24
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801026e:	b580      	push	{r7, lr}
 8010270:	b08c      	sub	sp, #48	; 0x30
 8010272:	af00      	add	r7, sp, #0
 8010274:	60f8      	str	r0, [r7, #12]
 8010276:	60b9      	str	r1, [r7, #8]
 8010278:	607a      	str	r2, [r7, #4]
 801027a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801027c:	2301      	movs	r3, #1
 801027e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010280:	2300      	movs	r3, #0
 8010282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801028c:	2b01      	cmp	r3, #1
 801028e:	d101      	bne.n	8010294 <HAL_SPI_TransmitReceive+0x26>
 8010290:	2302      	movs	r3, #2
 8010292:	e18a      	b.n	80105aa <HAL_SPI_TransmitReceive+0x33c>
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2201      	movs	r2, #1
 8010298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801029c:	f7fb f940 	bl	800b520 <HAL_GetTick>
 80102a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80102a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80102b2:	887b      	ldrh	r3, [r7, #2]
 80102b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80102b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d00f      	beq.n	80102de <HAL_SPI_TransmitReceive+0x70>
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80102c4:	d107      	bne.n	80102d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d103      	bne.n	80102d6 <HAL_SPI_TransmitReceive+0x68>
 80102ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80102d2:	2b04      	cmp	r3, #4
 80102d4:	d003      	beq.n	80102de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80102d6:	2302      	movs	r3, #2
 80102d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80102dc:	e15b      	b.n	8010596 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d005      	beq.n	80102f0 <HAL_SPI_TransmitReceive+0x82>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d002      	beq.n	80102f0 <HAL_SPI_TransmitReceive+0x82>
 80102ea:	887b      	ldrh	r3, [r7, #2]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d103      	bne.n	80102f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80102f0:	2301      	movs	r3, #1
 80102f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80102f6:	e14e      	b.n	8010596 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	2b04      	cmp	r3, #4
 8010302:	d003      	beq.n	801030c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2205      	movs	r2, #5
 8010308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2200      	movs	r2, #0
 8010310:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	887a      	ldrh	r2, [r7, #2]
 801031c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	887a      	ldrh	r2, [r7, #2]
 8010322:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	68ba      	ldr	r2, [r7, #8]
 8010328:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	887a      	ldrh	r2, [r7, #2]
 801032e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	887a      	ldrh	r2, [r7, #2]
 8010334:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2200      	movs	r2, #0
 801033a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2200      	movs	r2, #0
 8010340:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801034c:	2b40      	cmp	r3, #64	; 0x40
 801034e:	d007      	beq.n	8010360 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801035e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010368:	d178      	bne.n	801045c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d002      	beq.n	8010378 <HAL_SPI_TransmitReceive+0x10a>
 8010372:	8b7b      	ldrh	r3, [r7, #26]
 8010374:	2b01      	cmp	r3, #1
 8010376:	d166      	bne.n	8010446 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801037c:	881a      	ldrh	r2, [r3, #0]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010388:	1c9a      	adds	r2, r3, #2
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010392:	b29b      	uxth	r3, r3
 8010394:	3b01      	subs	r3, #1
 8010396:	b29a      	uxth	r2, r3
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801039c:	e053      	b.n	8010446 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	f003 0302 	and.w	r3, r3, #2
 80103a8:	2b02      	cmp	r3, #2
 80103aa:	d11b      	bne.n	80103e4 <HAL_SPI_TransmitReceive+0x176>
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d016      	beq.n	80103e4 <HAL_SPI_TransmitReceive+0x176>
 80103b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	d113      	bne.n	80103e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103c0:	881a      	ldrh	r2, [r3, #0]
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103cc:	1c9a      	adds	r2, r3, #2
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	3b01      	subs	r3, #1
 80103da:	b29a      	uxth	r2, r3
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80103e0:	2300      	movs	r3, #0
 80103e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	689b      	ldr	r3, [r3, #8]
 80103ea:	f003 0301 	and.w	r3, r3, #1
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d119      	bne.n	8010426 <HAL_SPI_TransmitReceive+0x1b8>
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d014      	beq.n	8010426 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	68da      	ldr	r2, [r3, #12]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010406:	b292      	uxth	r2, r2
 8010408:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801040e:	1c9a      	adds	r2, r3, #2
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010418:	b29b      	uxth	r3, r3
 801041a:	3b01      	subs	r3, #1
 801041c:	b29a      	uxth	r2, r3
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010422:	2301      	movs	r3, #1
 8010424:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010426:	f7fb f87b 	bl	800b520 <HAL_GetTick>
 801042a:	4602      	mov	r2, r0
 801042c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042e:	1ad3      	subs	r3, r2, r3
 8010430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010432:	429a      	cmp	r2, r3
 8010434:	d807      	bhi.n	8010446 <HAL_SPI_TransmitReceive+0x1d8>
 8010436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801043c:	d003      	beq.n	8010446 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801043e:	2303      	movs	r3, #3
 8010440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010444:	e0a7      	b.n	8010596 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801044a:	b29b      	uxth	r3, r3
 801044c:	2b00      	cmp	r3, #0
 801044e:	d1a6      	bne.n	801039e <HAL_SPI_TransmitReceive+0x130>
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010454:	b29b      	uxth	r3, r3
 8010456:	2b00      	cmp	r3, #0
 8010458:	d1a1      	bne.n	801039e <HAL_SPI_TransmitReceive+0x130>
 801045a:	e07c      	b.n	8010556 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d002      	beq.n	801046a <HAL_SPI_TransmitReceive+0x1fc>
 8010464:	8b7b      	ldrh	r3, [r7, #26]
 8010466:	2b01      	cmp	r3, #1
 8010468:	d16b      	bne.n	8010542 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	330c      	adds	r3, #12
 8010474:	7812      	ldrb	r2, [r2, #0]
 8010476:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801047c:	1c5a      	adds	r2, r3, #1
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010486:	b29b      	uxth	r3, r3
 8010488:	3b01      	subs	r3, #1
 801048a:	b29a      	uxth	r2, r3
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010490:	e057      	b.n	8010542 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	689b      	ldr	r3, [r3, #8]
 8010498:	f003 0302 	and.w	r3, r3, #2
 801049c:	2b02      	cmp	r3, #2
 801049e:	d11c      	bne.n	80104da <HAL_SPI_TransmitReceive+0x26c>
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d017      	beq.n	80104da <HAL_SPI_TransmitReceive+0x26c>
 80104aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	d114      	bne.n	80104da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	330c      	adds	r3, #12
 80104ba:	7812      	ldrb	r2, [r2, #0]
 80104bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104c2:	1c5a      	adds	r2, r3, #1
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80104cc:	b29b      	uxth	r3, r3
 80104ce:	3b01      	subs	r3, #1
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80104d6:	2300      	movs	r3, #0
 80104d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	689b      	ldr	r3, [r3, #8]
 80104e0:	f003 0301 	and.w	r3, r3, #1
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	d119      	bne.n	801051c <HAL_SPI_TransmitReceive+0x2ae>
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d014      	beq.n	801051c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	68da      	ldr	r2, [r3, #12]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104fc:	b2d2      	uxtb	r2, r2
 80104fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010504:	1c5a      	adds	r2, r3, #1
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801050e:	b29b      	uxth	r3, r3
 8010510:	3b01      	subs	r3, #1
 8010512:	b29a      	uxth	r2, r3
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010518:	2301      	movs	r3, #1
 801051a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801051c:	f7fb f800 	bl	800b520 <HAL_GetTick>
 8010520:	4602      	mov	r2, r0
 8010522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010524:	1ad3      	subs	r3, r2, r3
 8010526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010528:	429a      	cmp	r2, r3
 801052a:	d803      	bhi.n	8010534 <HAL_SPI_TransmitReceive+0x2c6>
 801052c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010532:	d102      	bne.n	801053a <HAL_SPI_TransmitReceive+0x2cc>
 8010534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010536:	2b00      	cmp	r3, #0
 8010538:	d103      	bne.n	8010542 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801053a:	2303      	movs	r3, #3
 801053c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010540:	e029      	b.n	8010596 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010546:	b29b      	uxth	r3, r3
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1a2      	bne.n	8010492 <HAL_SPI_TransmitReceive+0x224>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010550:	b29b      	uxth	r3, r3
 8010552:	2b00      	cmp	r3, #0
 8010554:	d19d      	bne.n	8010492 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010558:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	f000 f8f8 	bl	8010750 <SPI_EndRxTxTransaction>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	d006      	beq.n	8010574 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2220      	movs	r2, #32
 8010570:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010572:	e010      	b.n	8010596 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10b      	bne.n	8010594 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801057c:	2300      	movs	r3, #0
 801057e:	617b      	str	r3, [r7, #20]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	68db      	ldr	r3, [r3, #12]
 8010586:	617b      	str	r3, [r7, #20]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	689b      	ldr	r3, [r3, #8]
 801058e:	617b      	str	r3, [r7, #20]
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	e000      	b.n	8010596 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010594:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2201      	movs	r2, #1
 801059a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2200      	movs	r2, #0
 80105a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80105a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3730      	adds	r7, #48	; 0x30
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}

080105b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80105b2:	b580      	push	{r7, lr}
 80105b4:	b084      	sub	sp, #16
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	60f8      	str	r0, [r7, #12]
 80105ba:	60b9      	str	r1, [r7, #8]
 80105bc:	603b      	str	r3, [r7, #0]
 80105be:	4613      	mov	r3, r2
 80105c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80105c2:	e04c      	b.n	801065e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ca:	d048      	beq.n	801065e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80105cc:	f7fa ffa8 	bl	800b520 <HAL_GetTick>
 80105d0:	4602      	mov	r2, r0
 80105d2:	69bb      	ldr	r3, [r7, #24]
 80105d4:	1ad3      	subs	r3, r2, r3
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	429a      	cmp	r2, r3
 80105da:	d902      	bls.n	80105e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d13d      	bne.n	801065e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	685a      	ldr	r2, [r3, #4]
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80105f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80105fa:	d111      	bne.n	8010620 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010604:	d004      	beq.n	8010610 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	689b      	ldr	r3, [r3, #8]
 801060a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801060e:	d107      	bne.n	8010620 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801061e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010628:	d10f      	bne.n	801064a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010638:	601a      	str	r2, [r3, #0]
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	681a      	ldr	r2, [r3, #0]
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2201      	movs	r2, #1
 801064e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2200      	movs	r2, #0
 8010656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801065a:	2303      	movs	r3, #3
 801065c:	e00f      	b.n	801067e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	689a      	ldr	r2, [r3, #8]
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	4013      	ands	r3, r2
 8010668:	68ba      	ldr	r2, [r7, #8]
 801066a:	429a      	cmp	r2, r3
 801066c:	bf0c      	ite	eq
 801066e:	2301      	moveq	r3, #1
 8010670:	2300      	movne	r3, #0
 8010672:	b2db      	uxtb	r3, r3
 8010674:	461a      	mov	r2, r3
 8010676:	79fb      	ldrb	r3, [r7, #7]
 8010678:	429a      	cmp	r2, r3
 801067a:	d1a3      	bne.n	80105c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801067c:	2300      	movs	r3, #0
}
 801067e:	4618      	mov	r0, r3
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b086      	sub	sp, #24
 801068a:	af02      	add	r7, sp, #8
 801068c:	60f8      	str	r0, [r7, #12]
 801068e:	60b9      	str	r1, [r7, #8]
 8010690:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801069a:	d111      	bne.n	80106c0 <SPI_EndRxTransaction+0x3a>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	689b      	ldr	r3, [r3, #8]
 80106a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106a4:	d004      	beq.n	80106b0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	689b      	ldr	r3, [r3, #8]
 80106aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106ae:	d107      	bne.n	80106c0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	681a      	ldr	r2, [r3, #0]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80106be:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80106c8:	d12a      	bne.n	8010720 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	689b      	ldr	r3, [r3, #8]
 80106ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80106d2:	d012      	beq.n	80106fa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	9300      	str	r3, [sp, #0]
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	2200      	movs	r2, #0
 80106dc:	2180      	movs	r1, #128	; 0x80
 80106de:	68f8      	ldr	r0, [r7, #12]
 80106e0:	f7ff ff67 	bl	80105b2 <SPI_WaitFlagStateUntilTimeout>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d02d      	beq.n	8010746 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106ee:	f043 0220 	orr.w	r2, r3, #32
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80106f6:	2303      	movs	r3, #3
 80106f8:	e026      	b.n	8010748 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2200      	movs	r2, #0
 8010702:	2101      	movs	r1, #1
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f7ff ff54 	bl	80105b2 <SPI_WaitFlagStateUntilTimeout>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d01a      	beq.n	8010746 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010714:	f043 0220 	orr.w	r2, r3, #32
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801071c:	2303      	movs	r3, #3
 801071e:	e013      	b.n	8010748 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	9300      	str	r3, [sp, #0]
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	2200      	movs	r2, #0
 8010728:	2101      	movs	r1, #1
 801072a:	68f8      	ldr	r0, [r7, #12]
 801072c:	f7ff ff41 	bl	80105b2 <SPI_WaitFlagStateUntilTimeout>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d007      	beq.n	8010746 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801073a:	f043 0220 	orr.w	r2, r3, #32
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010742:	2303      	movs	r3, #3
 8010744:	e000      	b.n	8010748 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010746:	2300      	movs	r3, #0
}
 8010748:	4618      	mov	r0, r3
 801074a:	3710      	adds	r7, #16
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b088      	sub	sp, #32
 8010754:	af02      	add	r7, sp, #8
 8010756:	60f8      	str	r0, [r7, #12]
 8010758:	60b9      	str	r1, [r7, #8]
 801075a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801075c:	4b1b      	ldr	r3, [pc, #108]	; (80107cc <SPI_EndRxTxTransaction+0x7c>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4a1b      	ldr	r2, [pc, #108]	; (80107d0 <SPI_EndRxTxTransaction+0x80>)
 8010762:	fba2 2303 	umull	r2, r3, r2, r3
 8010766:	0d5b      	lsrs	r3, r3, #21
 8010768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801076c:	fb02 f303 	mul.w	r3, r2, r3
 8010770:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801077a:	d112      	bne.n	80107a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	9300      	str	r3, [sp, #0]
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	2200      	movs	r2, #0
 8010784:	2180      	movs	r1, #128	; 0x80
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f7ff ff13 	bl	80105b2 <SPI_WaitFlagStateUntilTimeout>
 801078c:	4603      	mov	r3, r0
 801078e:	2b00      	cmp	r3, #0
 8010790:	d016      	beq.n	80107c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010796:	f043 0220 	orr.w	r2, r3, #32
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801079e:	2303      	movs	r3, #3
 80107a0:	e00f      	b.n	80107c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00a      	beq.n	80107be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	3b01      	subs	r3, #1
 80107ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	689b      	ldr	r3, [r3, #8]
 80107b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107b8:	2b80      	cmp	r3, #128	; 0x80
 80107ba:	d0f2      	beq.n	80107a2 <SPI_EndRxTxTransaction+0x52>
 80107bc:	e000      	b.n	80107c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80107be:	bf00      	nop
  }

  return HAL_OK;
 80107c0:	2300      	movs	r3, #0
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3718      	adds	r7, #24
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	20000000 	.word	0x20000000
 80107d0:	165e9f81 	.word	0x165e9f81

080107d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d101      	bne.n	80107e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
 80107e4:	e01d      	b.n	8010822 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d106      	bne.n	8010800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f7f7 f950 	bl	8007aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2202      	movs	r2, #2
 8010804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	3304      	adds	r3, #4
 8010810:	4619      	mov	r1, r3
 8010812:	4610      	mov	r0, r2
 8010814:	f000 fb56 	bl	8010ec4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2201      	movs	r2, #1
 801081c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010820:	2300      	movs	r3, #0
}
 8010822:	4618      	mov	r0, r3
 8010824:	3708      	adds	r7, #8
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}

0801082a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801082a:	b480      	push	{r7}
 801082c:	b085      	sub	sp, #20
 801082e:	af00      	add	r7, sp, #0
 8010830:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	68da      	ldr	r2, [r3, #12]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f042 0201 	orr.w	r2, r2, #1
 8010840:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	f003 0307 	and.w	r3, r3, #7
 801084c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2b06      	cmp	r3, #6
 8010852:	d007      	beq.n	8010864 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	f042 0201 	orr.w	r2, r2, #1
 8010862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010864:	2300      	movs	r3, #0
}
 8010866:	4618      	mov	r0, r3
 8010868:	3714      	adds	r7, #20
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr

08010872 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b082      	sub	sp, #8
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d101      	bne.n	8010884 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010880:	2301      	movs	r3, #1
 8010882:	e01d      	b.n	80108c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801088a:	b2db      	uxtb	r3, r3
 801088c:	2b00      	cmp	r3, #0
 801088e:	d106      	bne.n	801089e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2200      	movs	r2, #0
 8010894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7f7 f88d 	bl	80079b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2202      	movs	r2, #2
 80108a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	3304      	adds	r3, #4
 80108ae:	4619      	mov	r1, r3
 80108b0:	4610      	mov	r0, r2
 80108b2:	f000 fb07 	bl	8010ec4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2201      	movs	r2, #1
 80108ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80108be:	2300      	movs	r3, #0
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b084      	sub	sp, #16
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	2201      	movs	r2, #1
 80108d8:	6839      	ldr	r1, [r7, #0]
 80108da:	4618      	mov	r0, r3
 80108dc:	f000 fd42 	bl	8011364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	4a15      	ldr	r2, [pc, #84]	; (801093c <HAL_TIM_PWM_Start+0x74>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d004      	beq.n	80108f4 <HAL_TIM_PWM_Start+0x2c>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a14      	ldr	r2, [pc, #80]	; (8010940 <HAL_TIM_PWM_Start+0x78>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d101      	bne.n	80108f8 <HAL_TIM_PWM_Start+0x30>
 80108f4:	2301      	movs	r3, #1
 80108f6:	e000      	b.n	80108fa <HAL_TIM_PWM_Start+0x32>
 80108f8:	2300      	movs	r3, #0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d007      	beq.n	801090e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801090c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	689b      	ldr	r3, [r3, #8]
 8010914:	f003 0307 	and.w	r3, r3, #7
 8010918:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2b06      	cmp	r3, #6
 801091e:	d007      	beq.n	8010930 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f042 0201 	orr.w	r2, r2, #1
 801092e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010930:	2300      	movs	r3, #0
}
 8010932:	4618      	mov	r0, r3
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	40010000 	.word	0x40010000
 8010940:	40010400 	.word	0x40010400

08010944 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b086      	sub	sp, #24
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d101      	bne.n	8010958 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010954:	2301      	movs	r3, #1
 8010956:	e083      	b.n	8010a60 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801095e:	b2db      	uxtb	r3, r3
 8010960:	2b00      	cmp	r3, #0
 8010962:	d106      	bne.n	8010972 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2200      	movs	r2, #0
 8010968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f7f7 f927 	bl	8007bc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2202      	movs	r2, #2
 8010976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	689b      	ldr	r3, [r3, #8]
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	6812      	ldr	r2, [r2, #0]
 8010984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010988:	f023 0307 	bic.w	r3, r3, #7
 801098c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681a      	ldr	r2, [r3, #0]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	3304      	adds	r3, #4
 8010996:	4619      	mov	r1, r3
 8010998:	4610      	mov	r0, r2
 801099a:	f000 fa93 	bl	8010ec4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	689b      	ldr	r3, [r3, #8]
 80109a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	699b      	ldr	r3, [r3, #24]
 80109ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	6a1b      	ldr	r3, [r3, #32]
 80109b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	697a      	ldr	r2, [r7, #20]
 80109bc:	4313      	orrs	r3, r2
 80109be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109c6:	f023 0303 	bic.w	r3, r3, #3
 80109ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	689a      	ldr	r2, [r3, #8]
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	699b      	ldr	r3, [r3, #24]
 80109d4:	021b      	lsls	r3, r3, #8
 80109d6:	4313      	orrs	r3, r2
 80109d8:	693a      	ldr	r2, [r7, #16]
 80109da:	4313      	orrs	r3, r2
 80109dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80109de:	693b      	ldr	r3, [r7, #16]
 80109e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80109e4:	f023 030c 	bic.w	r3, r3, #12
 80109e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80109f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80109f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	68da      	ldr	r2, [r3, #12]
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	69db      	ldr	r3, [r3, #28]
 80109fe:	021b      	lsls	r3, r3, #8
 8010a00:	4313      	orrs	r3, r2
 8010a02:	693a      	ldr	r2, [r7, #16]
 8010a04:	4313      	orrs	r3, r2
 8010a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	691b      	ldr	r3, [r3, #16]
 8010a0c:	011a      	lsls	r2, r3, #4
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	6a1b      	ldr	r3, [r3, #32]
 8010a12:	031b      	lsls	r3, r3, #12
 8010a14:	4313      	orrs	r3, r2
 8010a16:	693a      	ldr	r2, [r7, #16]
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8010a22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010a2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	685a      	ldr	r2, [r3, #4]
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	695b      	ldr	r3, [r3, #20]
 8010a34:	011b      	lsls	r3, r3, #4
 8010a36:	4313      	orrs	r3, r2
 8010a38:	68fa      	ldr	r2, [r7, #12]
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	697a      	ldr	r2, [r7, #20]
 8010a44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	693a      	ldr	r2, [r7, #16]
 8010a4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2201      	movs	r2, #1
 8010a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010a5e:	2300      	movs	r3, #0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3718      	adds	r7, #24
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b082      	sub	sp, #8
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d002      	beq.n	8010a7e <HAL_TIM_Encoder_Start+0x16>
 8010a78:	2b04      	cmp	r3, #4
 8010a7a:	d008      	beq.n	8010a8e <HAL_TIM_Encoder_Start+0x26>
 8010a7c:	e00f      	b.n	8010a9e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2201      	movs	r2, #1
 8010a84:	2100      	movs	r1, #0
 8010a86:	4618      	mov	r0, r3
 8010a88:	f000 fc6c 	bl	8011364 <TIM_CCxChannelCmd>
      break;
 8010a8c:	e016      	b.n	8010abc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	2201      	movs	r2, #1
 8010a94:	2104      	movs	r1, #4
 8010a96:	4618      	mov	r0, r3
 8010a98:	f000 fc64 	bl	8011364 <TIM_CCxChannelCmd>
      break;
 8010a9c:	e00e      	b.n	8010abc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	2100      	movs	r1, #0
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f000 fc5c 	bl	8011364 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	2104      	movs	r1, #4
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f000 fc55 	bl	8011364 <TIM_CCxChannelCmd>
      break;
 8010aba:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f042 0201 	orr.w	r2, r2, #1
 8010aca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b082      	sub	sp, #8
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	691b      	ldr	r3, [r3, #16]
 8010ae4:	f003 0302 	and.w	r3, r3, #2
 8010ae8:	2b02      	cmp	r3, #2
 8010aea:	d122      	bne.n	8010b32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	68db      	ldr	r3, [r3, #12]
 8010af2:	f003 0302 	and.w	r3, r3, #2
 8010af6:	2b02      	cmp	r3, #2
 8010af8:	d11b      	bne.n	8010b32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f06f 0202 	mvn.w	r2, #2
 8010b02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2201      	movs	r2, #1
 8010b08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	699b      	ldr	r3, [r3, #24]
 8010b10:	f003 0303 	and.w	r3, r3, #3
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d003      	beq.n	8010b20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f000 f9b5 	bl	8010e88 <HAL_TIM_IC_CaptureCallback>
 8010b1e:	e005      	b.n	8010b2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f000 f9a7 	bl	8010e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f000 f9b8 	bl	8010e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	691b      	ldr	r3, [r3, #16]
 8010b38:	f003 0304 	and.w	r3, r3, #4
 8010b3c:	2b04      	cmp	r3, #4
 8010b3e:	d122      	bne.n	8010b86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	68db      	ldr	r3, [r3, #12]
 8010b46:	f003 0304 	and.w	r3, r3, #4
 8010b4a:	2b04      	cmp	r3, #4
 8010b4c:	d11b      	bne.n	8010b86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f06f 0204 	mvn.w	r2, #4
 8010b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2202      	movs	r2, #2
 8010b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	699b      	ldr	r3, [r3, #24]
 8010b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d003      	beq.n	8010b74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f000 f98b 	bl	8010e88 <HAL_TIM_IC_CaptureCallback>
 8010b72:	e005      	b.n	8010b80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f000 f97d 	bl	8010e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f000 f98e 	bl	8010e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	691b      	ldr	r3, [r3, #16]
 8010b8c:	f003 0308 	and.w	r3, r3, #8
 8010b90:	2b08      	cmp	r3, #8
 8010b92:	d122      	bne.n	8010bda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	f003 0308 	and.w	r3, r3, #8
 8010b9e:	2b08      	cmp	r3, #8
 8010ba0:	d11b      	bne.n	8010bda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f06f 0208 	mvn.w	r2, #8
 8010baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2204      	movs	r2, #4
 8010bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	69db      	ldr	r3, [r3, #28]
 8010bb8:	f003 0303 	and.w	r3, r3, #3
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d003      	beq.n	8010bc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 f961 	bl	8010e88 <HAL_TIM_IC_CaptureCallback>
 8010bc6:	e005      	b.n	8010bd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 f953 	bl	8010e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 f964 	bl	8010e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	f003 0310 	and.w	r3, r3, #16
 8010be4:	2b10      	cmp	r3, #16
 8010be6:	d122      	bne.n	8010c2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	f003 0310 	and.w	r3, r3, #16
 8010bf2:	2b10      	cmp	r3, #16
 8010bf4:	d11b      	bne.n	8010c2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f06f 0210 	mvn.w	r2, #16
 8010bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2208      	movs	r2, #8
 8010c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	69db      	ldr	r3, [r3, #28]
 8010c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d003      	beq.n	8010c1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f000 f937 	bl	8010e88 <HAL_TIM_IC_CaptureCallback>
 8010c1a:	e005      	b.n	8010c28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f000 f929 	bl	8010e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 f93a 	bl	8010e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	691b      	ldr	r3, [r3, #16]
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d10e      	bne.n	8010c5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	68db      	ldr	r3, [r3, #12]
 8010c42:	f003 0301 	and.w	r3, r3, #1
 8010c46:	2b01      	cmp	r3, #1
 8010c48:	d107      	bne.n	8010c5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f06f 0201 	mvn.w	r2, #1
 8010c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7f5 fc8b 	bl	8006570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	691b      	ldr	r3, [r3, #16]
 8010c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c64:	2b80      	cmp	r3, #128	; 0x80
 8010c66:	d10e      	bne.n	8010c86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	68db      	ldr	r3, [r3, #12]
 8010c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c72:	2b80      	cmp	r3, #128	; 0x80
 8010c74:	d107      	bne.n	8010c86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 fc6d 	bl	8011560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	691b      	ldr	r3, [r3, #16]
 8010c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c90:	2b40      	cmp	r3, #64	; 0x40
 8010c92:	d10e      	bne.n	8010cb2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	68db      	ldr	r3, [r3, #12]
 8010c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c9e:	2b40      	cmp	r3, #64	; 0x40
 8010ca0:	d107      	bne.n	8010cb2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f000 f8ff 	bl	8010eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	691b      	ldr	r3, [r3, #16]
 8010cb8:	f003 0320 	and.w	r3, r3, #32
 8010cbc:	2b20      	cmp	r3, #32
 8010cbe:	d10e      	bne.n	8010cde <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	68db      	ldr	r3, [r3, #12]
 8010cc6:	f003 0320 	and.w	r3, r3, #32
 8010cca:	2b20      	cmp	r3, #32
 8010ccc:	d107      	bne.n	8010cde <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f06f 0220 	mvn.w	r2, #32
 8010cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f000 fc37 	bl	801154c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010cde:	bf00      	nop
 8010ce0:	3708      	adds	r7, #8
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
	...

08010ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	60f8      	str	r0, [r7, #12]
 8010cf0:	60b9      	str	r1, [r7, #8]
 8010cf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d101      	bne.n	8010d02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010cfe:	2302      	movs	r3, #2
 8010d00:	e0b4      	b.n	8010e6c <HAL_TIM_PWM_ConfigChannel+0x184>
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2201      	movs	r2, #1
 8010d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	2202      	movs	r2, #2
 8010d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2b0c      	cmp	r3, #12
 8010d16:	f200 809f 	bhi.w	8010e58 <HAL_TIM_PWM_ConfigChannel+0x170>
 8010d1a:	a201      	add	r2, pc, #4	; (adr r2, 8010d20 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8010d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d20:	08010d55 	.word	0x08010d55
 8010d24:	08010e59 	.word	0x08010e59
 8010d28:	08010e59 	.word	0x08010e59
 8010d2c:	08010e59 	.word	0x08010e59
 8010d30:	08010d95 	.word	0x08010d95
 8010d34:	08010e59 	.word	0x08010e59
 8010d38:	08010e59 	.word	0x08010e59
 8010d3c:	08010e59 	.word	0x08010e59
 8010d40:	08010dd7 	.word	0x08010dd7
 8010d44:	08010e59 	.word	0x08010e59
 8010d48:	08010e59 	.word	0x08010e59
 8010d4c:	08010e59 	.word	0x08010e59
 8010d50:	08010e17 	.word	0x08010e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	68b9      	ldr	r1, [r7, #8]
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f000 f952 	bl	8011004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	699a      	ldr	r2, [r3, #24]
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f042 0208 	orr.w	r2, r2, #8
 8010d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	699a      	ldr	r2, [r3, #24]
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	f022 0204 	bic.w	r2, r2, #4
 8010d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	6999      	ldr	r1, [r3, #24]
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	691a      	ldr	r2, [r3, #16]
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	430a      	orrs	r2, r1
 8010d90:	619a      	str	r2, [r3, #24]
      break;
 8010d92:	e062      	b.n	8010e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	68b9      	ldr	r1, [r7, #8]
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f000 f9a2 	bl	80110e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	699a      	ldr	r2, [r3, #24]
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	699a      	ldr	r2, [r3, #24]
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	6999      	ldr	r1, [r3, #24]
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	691b      	ldr	r3, [r3, #16]
 8010dca:	021a      	lsls	r2, r3, #8
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	430a      	orrs	r2, r1
 8010dd2:	619a      	str	r2, [r3, #24]
      break;
 8010dd4:	e041      	b.n	8010e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	68b9      	ldr	r1, [r7, #8]
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f000 f9f7 	bl	80111d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	69da      	ldr	r2, [r3, #28]
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f042 0208 	orr.w	r2, r2, #8
 8010df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	69da      	ldr	r2, [r3, #28]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f022 0204 	bic.w	r2, r2, #4
 8010e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	69d9      	ldr	r1, [r3, #28]
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	691a      	ldr	r2, [r3, #16]
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	430a      	orrs	r2, r1
 8010e12:	61da      	str	r2, [r3, #28]
      break;
 8010e14:	e021      	b.n	8010e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	68b9      	ldr	r1, [r7, #8]
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f000 fa4b 	bl	80112b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	69da      	ldr	r2, [r3, #28]
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	69da      	ldr	r2, [r3, #28]
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	69d9      	ldr	r1, [r3, #28]
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	691b      	ldr	r3, [r3, #16]
 8010e4c:	021a      	lsls	r2, r3, #8
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	430a      	orrs	r2, r1
 8010e54:	61da      	str	r2, [r3, #28]
      break;
 8010e56:	e000      	b.n	8010e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8010e58:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	2200      	movs	r2, #0
 8010e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010e6a:	2300      	movs	r3, #0
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3710      	adds	r7, #16
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b083      	sub	sp, #12
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010e7c:	bf00      	nop
 8010e7e:	370c      	adds	r7, #12
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr

08010e88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b083      	sub	sp, #12
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010e90:	bf00      	nop
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010ea4:	bf00      	nop
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr

08010eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b083      	sub	sp, #12
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010eb8:	bf00      	nop
 8010eba:	370c      	adds	r7, #12
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr

08010ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	b085      	sub	sp, #20
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	4a40      	ldr	r2, [pc, #256]	; (8010fd8 <TIM_Base_SetConfig+0x114>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d013      	beq.n	8010f04 <TIM_Base_SetConfig+0x40>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ee2:	d00f      	beq.n	8010f04 <TIM_Base_SetConfig+0x40>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4a3d      	ldr	r2, [pc, #244]	; (8010fdc <TIM_Base_SetConfig+0x118>)
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	d00b      	beq.n	8010f04 <TIM_Base_SetConfig+0x40>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4a3c      	ldr	r2, [pc, #240]	; (8010fe0 <TIM_Base_SetConfig+0x11c>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d007      	beq.n	8010f04 <TIM_Base_SetConfig+0x40>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	4a3b      	ldr	r2, [pc, #236]	; (8010fe4 <TIM_Base_SetConfig+0x120>)
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d003      	beq.n	8010f04 <TIM_Base_SetConfig+0x40>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	4a3a      	ldr	r2, [pc, #232]	; (8010fe8 <TIM_Base_SetConfig+0x124>)
 8010f00:	4293      	cmp	r3, r2
 8010f02:	d108      	bne.n	8010f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	685b      	ldr	r3, [r3, #4]
 8010f10:	68fa      	ldr	r2, [r7, #12]
 8010f12:	4313      	orrs	r3, r2
 8010f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4a2f      	ldr	r2, [pc, #188]	; (8010fd8 <TIM_Base_SetConfig+0x114>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d02b      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f24:	d027      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4a2c      	ldr	r2, [pc, #176]	; (8010fdc <TIM_Base_SetConfig+0x118>)
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	d023      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	4a2b      	ldr	r2, [pc, #172]	; (8010fe0 <TIM_Base_SetConfig+0x11c>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d01f      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	4a2a      	ldr	r2, [pc, #168]	; (8010fe4 <TIM_Base_SetConfig+0x120>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d01b      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	4a29      	ldr	r2, [pc, #164]	; (8010fe8 <TIM_Base_SetConfig+0x124>)
 8010f42:	4293      	cmp	r3, r2
 8010f44:	d017      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	4a28      	ldr	r2, [pc, #160]	; (8010fec <TIM_Base_SetConfig+0x128>)
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d013      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	4a27      	ldr	r2, [pc, #156]	; (8010ff0 <TIM_Base_SetConfig+0x12c>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d00f      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	4a26      	ldr	r2, [pc, #152]	; (8010ff4 <TIM_Base_SetConfig+0x130>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d00b      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	4a25      	ldr	r2, [pc, #148]	; (8010ff8 <TIM_Base_SetConfig+0x134>)
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d007      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4a24      	ldr	r2, [pc, #144]	; (8010ffc <TIM_Base_SetConfig+0x138>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d003      	beq.n	8010f76 <TIM_Base_SetConfig+0xb2>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	4a23      	ldr	r2, [pc, #140]	; (8011000 <TIM_Base_SetConfig+0x13c>)
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d108      	bne.n	8010f88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	4313      	orrs	r3, r2
 8010f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	695b      	ldr	r3, [r3, #20]
 8010f92:	4313      	orrs	r3, r2
 8010f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	68fa      	ldr	r2, [r7, #12]
 8010f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	689a      	ldr	r2, [r3, #8]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	681a      	ldr	r2, [r3, #0]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	4a0a      	ldr	r2, [pc, #40]	; (8010fd8 <TIM_Base_SetConfig+0x114>)
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	d003      	beq.n	8010fbc <TIM_Base_SetConfig+0xf8>
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	4a0c      	ldr	r2, [pc, #48]	; (8010fe8 <TIM_Base_SetConfig+0x124>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d103      	bne.n	8010fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	691a      	ldr	r2, [r3, #16]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	615a      	str	r2, [r3, #20]
}
 8010fca:	bf00      	nop
 8010fcc:	3714      	adds	r7, #20
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	40010000 	.word	0x40010000
 8010fdc:	40000400 	.word	0x40000400
 8010fe0:	40000800 	.word	0x40000800
 8010fe4:	40000c00 	.word	0x40000c00
 8010fe8:	40010400 	.word	0x40010400
 8010fec:	40014000 	.word	0x40014000
 8010ff0:	40014400 	.word	0x40014400
 8010ff4:	40014800 	.word	0x40014800
 8010ff8:	40001800 	.word	0x40001800
 8010ffc:	40001c00 	.word	0x40001c00
 8011000:	40002000 	.word	0x40002000

08011004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011004:	b480      	push	{r7}
 8011006:	b087      	sub	sp, #28
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	6a1b      	ldr	r3, [r3, #32]
 8011012:	f023 0201 	bic.w	r2, r3, #1
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6a1b      	ldr	r3, [r3, #32]
 801101e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	699b      	ldr	r3, [r3, #24]
 801102a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	f023 0303 	bic.w	r3, r3, #3
 801103a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	68fa      	ldr	r2, [r7, #12]
 8011042:	4313      	orrs	r3, r2
 8011044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	f023 0302 	bic.w	r3, r3, #2
 801104c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	689b      	ldr	r3, [r3, #8]
 8011052:	697a      	ldr	r2, [r7, #20]
 8011054:	4313      	orrs	r3, r2
 8011056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4a20      	ldr	r2, [pc, #128]	; (80110dc <TIM_OC1_SetConfig+0xd8>)
 801105c:	4293      	cmp	r3, r2
 801105e:	d003      	beq.n	8011068 <TIM_OC1_SetConfig+0x64>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	4a1f      	ldr	r2, [pc, #124]	; (80110e0 <TIM_OC1_SetConfig+0xdc>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d10c      	bne.n	8011082 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	f023 0308 	bic.w	r3, r3, #8
 801106e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	697a      	ldr	r2, [r7, #20]
 8011076:	4313      	orrs	r3, r2
 8011078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	f023 0304 	bic.w	r3, r3, #4
 8011080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4a15      	ldr	r2, [pc, #84]	; (80110dc <TIM_OC1_SetConfig+0xd8>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d003      	beq.n	8011092 <TIM_OC1_SetConfig+0x8e>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4a14      	ldr	r2, [pc, #80]	; (80110e0 <TIM_OC1_SetConfig+0xdc>)
 801108e:	4293      	cmp	r3, r2
 8011090:	d111      	bne.n	80110b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80110a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	695b      	ldr	r3, [r3, #20]
 80110a6:	693a      	ldr	r2, [r7, #16]
 80110a8:	4313      	orrs	r3, r2
 80110aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	699b      	ldr	r3, [r3, #24]
 80110b0:	693a      	ldr	r2, [r7, #16]
 80110b2:	4313      	orrs	r3, r2
 80110b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	68fa      	ldr	r2, [r7, #12]
 80110c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	685a      	ldr	r2, [r3, #4]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	697a      	ldr	r2, [r7, #20]
 80110ce:	621a      	str	r2, [r3, #32]
}
 80110d0:	bf00      	nop
 80110d2:	371c      	adds	r7, #28
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr
 80110dc:	40010000 	.word	0x40010000
 80110e0:	40010400 	.word	0x40010400

080110e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b087      	sub	sp, #28
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6a1b      	ldr	r3, [r3, #32]
 80110f2:	f023 0210 	bic.w	r2, r3, #16
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6a1b      	ldr	r3, [r3, #32]
 80110fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	699b      	ldr	r3, [r3, #24]
 801110a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801111a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	021b      	lsls	r3, r3, #8
 8011122:	68fa      	ldr	r2, [r7, #12]
 8011124:	4313      	orrs	r3, r2
 8011126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	f023 0320 	bic.w	r3, r3, #32
 801112e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	689b      	ldr	r3, [r3, #8]
 8011134:	011b      	lsls	r3, r3, #4
 8011136:	697a      	ldr	r2, [r7, #20]
 8011138:	4313      	orrs	r3, r2
 801113a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	4a22      	ldr	r2, [pc, #136]	; (80111c8 <TIM_OC2_SetConfig+0xe4>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d003      	beq.n	801114c <TIM_OC2_SetConfig+0x68>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4a21      	ldr	r2, [pc, #132]	; (80111cc <TIM_OC2_SetConfig+0xe8>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d10d      	bne.n	8011168 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	68db      	ldr	r3, [r3, #12]
 8011158:	011b      	lsls	r3, r3, #4
 801115a:	697a      	ldr	r2, [r7, #20]
 801115c:	4313      	orrs	r3, r2
 801115e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	4a17      	ldr	r2, [pc, #92]	; (80111c8 <TIM_OC2_SetConfig+0xe4>)
 801116c:	4293      	cmp	r3, r2
 801116e:	d003      	beq.n	8011178 <TIM_OC2_SetConfig+0x94>
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	4a16      	ldr	r2, [pc, #88]	; (80111cc <TIM_OC2_SetConfig+0xe8>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d113      	bne.n	80111a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801117e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	695b      	ldr	r3, [r3, #20]
 801118c:	009b      	lsls	r3, r3, #2
 801118e:	693a      	ldr	r2, [r7, #16]
 8011190:	4313      	orrs	r3, r2
 8011192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	699b      	ldr	r3, [r3, #24]
 8011198:	009b      	lsls	r3, r3, #2
 801119a:	693a      	ldr	r2, [r7, #16]
 801119c:	4313      	orrs	r3, r2
 801119e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	693a      	ldr	r2, [r7, #16]
 80111a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	68fa      	ldr	r2, [r7, #12]
 80111aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	685a      	ldr	r2, [r3, #4]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	697a      	ldr	r2, [r7, #20]
 80111b8:	621a      	str	r2, [r3, #32]
}
 80111ba:	bf00      	nop
 80111bc:	371c      	adds	r7, #28
 80111be:	46bd      	mov	sp, r7
 80111c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c4:	4770      	bx	lr
 80111c6:	bf00      	nop
 80111c8:	40010000 	.word	0x40010000
 80111cc:	40010400 	.word	0x40010400

080111d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80111d0:	b480      	push	{r7}
 80111d2:	b087      	sub	sp, #28
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6a1b      	ldr	r3, [r3, #32]
 80111de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6a1b      	ldr	r3, [r3, #32]
 80111ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	69db      	ldr	r3, [r3, #28]
 80111f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f023 0303 	bic.w	r3, r3, #3
 8011206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	4313      	orrs	r3, r2
 8011210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	689b      	ldr	r3, [r3, #8]
 801121e:	021b      	lsls	r3, r3, #8
 8011220:	697a      	ldr	r2, [r7, #20]
 8011222:	4313      	orrs	r3, r2
 8011224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	4a21      	ldr	r2, [pc, #132]	; (80112b0 <TIM_OC3_SetConfig+0xe0>)
 801122a:	4293      	cmp	r3, r2
 801122c:	d003      	beq.n	8011236 <TIM_OC3_SetConfig+0x66>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4a20      	ldr	r2, [pc, #128]	; (80112b4 <TIM_OC3_SetConfig+0xe4>)
 8011232:	4293      	cmp	r3, r2
 8011234:	d10d      	bne.n	8011252 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801123c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	021b      	lsls	r3, r3, #8
 8011244:	697a      	ldr	r2, [r7, #20]
 8011246:	4313      	orrs	r3, r2
 8011248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4a16      	ldr	r2, [pc, #88]	; (80112b0 <TIM_OC3_SetConfig+0xe0>)
 8011256:	4293      	cmp	r3, r2
 8011258:	d003      	beq.n	8011262 <TIM_OC3_SetConfig+0x92>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4a15      	ldr	r2, [pc, #84]	; (80112b4 <TIM_OC3_SetConfig+0xe4>)
 801125e:	4293      	cmp	r3, r2
 8011260:	d113      	bne.n	801128a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	695b      	ldr	r3, [r3, #20]
 8011276:	011b      	lsls	r3, r3, #4
 8011278:	693a      	ldr	r2, [r7, #16]
 801127a:	4313      	orrs	r3, r2
 801127c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	699b      	ldr	r3, [r3, #24]
 8011282:	011b      	lsls	r3, r3, #4
 8011284:	693a      	ldr	r2, [r7, #16]
 8011286:	4313      	orrs	r3, r2
 8011288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	693a      	ldr	r2, [r7, #16]
 801128e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	68fa      	ldr	r2, [r7, #12]
 8011294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	685a      	ldr	r2, [r3, #4]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	697a      	ldr	r2, [r7, #20]
 80112a2:	621a      	str	r2, [r3, #32]
}
 80112a4:	bf00      	nop
 80112a6:	371c      	adds	r7, #28
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr
 80112b0:	40010000 	.word	0x40010000
 80112b4:	40010400 	.word	0x40010400

080112b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b087      	sub	sp, #28
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6a1b      	ldr	r3, [r3, #32]
 80112c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6a1b      	ldr	r3, [r3, #32]
 80112d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	685b      	ldr	r3, [r3, #4]
 80112d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	69db      	ldr	r3, [r3, #28]
 80112de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80112ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	021b      	lsls	r3, r3, #8
 80112f6:	68fa      	ldr	r2, [r7, #12]
 80112f8:	4313      	orrs	r3, r2
 80112fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	689b      	ldr	r3, [r3, #8]
 8011308:	031b      	lsls	r3, r3, #12
 801130a:	693a      	ldr	r2, [r7, #16]
 801130c:	4313      	orrs	r3, r2
 801130e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	4a12      	ldr	r2, [pc, #72]	; (801135c <TIM_OC4_SetConfig+0xa4>)
 8011314:	4293      	cmp	r3, r2
 8011316:	d003      	beq.n	8011320 <TIM_OC4_SetConfig+0x68>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	4a11      	ldr	r2, [pc, #68]	; (8011360 <TIM_OC4_SetConfig+0xa8>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d109      	bne.n	8011334 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	695b      	ldr	r3, [r3, #20]
 801132c:	019b      	lsls	r3, r3, #6
 801132e:	697a      	ldr	r2, [r7, #20]
 8011330:	4313      	orrs	r3, r2
 8011332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	68fa      	ldr	r2, [r7, #12]
 801133e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	685a      	ldr	r2, [r3, #4]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	693a      	ldr	r2, [r7, #16]
 801134c:	621a      	str	r2, [r3, #32]
}
 801134e:	bf00      	nop
 8011350:	371c      	adds	r7, #28
 8011352:	46bd      	mov	sp, r7
 8011354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	40010000 	.word	0x40010000
 8011360:	40010400 	.word	0x40010400

08011364 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011364:	b480      	push	{r7}
 8011366:	b087      	sub	sp, #28
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	f003 031f 	and.w	r3, r3, #31
 8011376:	2201      	movs	r2, #1
 8011378:	fa02 f303 	lsl.w	r3, r2, r3
 801137c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6a1a      	ldr	r2, [r3, #32]
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	43db      	mvns	r3, r3
 8011386:	401a      	ands	r2, r3
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	6a1a      	ldr	r2, [r3, #32]
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	f003 031f 	and.w	r3, r3, #31
 8011396:	6879      	ldr	r1, [r7, #4]
 8011398:	fa01 f303 	lsl.w	r3, r1, r3
 801139c:	431a      	orrs	r2, r3
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	621a      	str	r2, [r3, #32]
}
 80113a2:	bf00      	nop
 80113a4:	371c      	adds	r7, #28
 80113a6:	46bd      	mov	sp, r7
 80113a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ac:	4770      	bx	lr
	...

080113b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b085      	sub	sp, #20
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d101      	bne.n	80113c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80113c4:	2302      	movs	r3, #2
 80113c6:	e05a      	b.n	801147e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2201      	movs	r2, #1
 80113cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2202      	movs	r2, #2
 80113d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	689b      	ldr	r3, [r3, #8]
 80113e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	68fa      	ldr	r2, [r7, #12]
 80113f6:	4313      	orrs	r3, r2
 80113f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	68fa      	ldr	r2, [r7, #12]
 8011400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a21      	ldr	r2, [pc, #132]	; (801148c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d022      	beq.n	8011452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011414:	d01d      	beq.n	8011452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	4a1d      	ldr	r2, [pc, #116]	; (8011490 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d018      	beq.n	8011452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	4a1b      	ldr	r2, [pc, #108]	; (8011494 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d013      	beq.n	8011452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	4a1a      	ldr	r2, [pc, #104]	; (8011498 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d00e      	beq.n	8011452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a18      	ldr	r2, [pc, #96]	; (801149c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d009      	beq.n	8011452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	4a17      	ldr	r2, [pc, #92]	; (80114a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d004      	beq.n	8011452 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4a15      	ldr	r2, [pc, #84]	; (80114a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d10c      	bne.n	801146c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	68ba      	ldr	r2, [r7, #8]
 8011460:	4313      	orrs	r3, r2
 8011462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	68ba      	ldr	r2, [r7, #8]
 801146a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2201      	movs	r2, #1
 8011470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801147c:	2300      	movs	r3, #0
}
 801147e:	4618      	mov	r0, r3
 8011480:	3714      	adds	r7, #20
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr
 801148a:	bf00      	nop
 801148c:	40010000 	.word	0x40010000
 8011490:	40000400 	.word	0x40000400
 8011494:	40000800 	.word	0x40000800
 8011498:	40000c00 	.word	0x40000c00
 801149c:	40010400 	.word	0x40010400
 80114a0:	40014000 	.word	0x40014000
 80114a4:	40001800 	.word	0x40001800

080114a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80114a8:	b480      	push	{r7}
 80114aa:	b085      	sub	sp, #20
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80114b2:	2300      	movs	r3, #0
 80114b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d101      	bne.n	80114c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80114c0:	2302      	movs	r3, #2
 80114c2:	e03d      	b.n	8011540 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2201      	movs	r2, #1
 80114c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	68db      	ldr	r3, [r3, #12]
 80114d6:	4313      	orrs	r3, r2
 80114d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	689b      	ldr	r3, [r3, #8]
 80114e4:	4313      	orrs	r3, r2
 80114e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	4313      	orrs	r3, r2
 80114f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4313      	orrs	r3, r2
 8011502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	691b      	ldr	r3, [r3, #16]
 801150e:	4313      	orrs	r3, r2
 8011510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	695b      	ldr	r3, [r3, #20]
 801151c:	4313      	orrs	r3, r2
 801151e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	69db      	ldr	r3, [r3, #28]
 801152a:	4313      	orrs	r3, r2
 801152c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	68fa      	ldr	r2, [r7, #12]
 8011534:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2200      	movs	r2, #0
 801153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801153e:	2300      	movs	r3, #0
}
 8011540:	4618      	mov	r0, r3
 8011542:	3714      	adds	r7, #20
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr

0801154c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011554:	bf00      	nop
 8011556:	370c      	adds	r7, #12
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr

08011560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011560:	b480      	push	{r7}
 8011562:	b083      	sub	sp, #12
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011568:	bf00      	nop
 801156a:	370c      	adds	r7, #12
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d101      	bne.n	8011586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011582:	2301      	movs	r3, #1
 8011584:	e03f      	b.n	8011606 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801158c:	b2db      	uxtb	r3, r3
 801158e:	2b00      	cmp	r3, #0
 8011590:	d106      	bne.n	80115a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2200      	movs	r2, #0
 8011596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7f6 fc3a 	bl	8007e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2224      	movs	r2, #36	; 0x24
 80115a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	68da      	ldr	r2, [r3, #12]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80115b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f000 f829 	bl	8011610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	691a      	ldr	r2, [r3, #16]
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80115cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	695a      	ldr	r2, [r3, #20]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80115dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	68da      	ldr	r2, [r3, #12]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80115ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2200      	movs	r2, #0
 80115f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2220      	movs	r2, #32
 80115f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2220      	movs	r2, #32
 8011600:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	3708      	adds	r7, #8
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
	...

08011610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011614:	b085      	sub	sp, #20
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	691b      	ldr	r3, [r3, #16]
 8011620:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	68da      	ldr	r2, [r3, #12]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	430a      	orrs	r2, r1
 801162e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	689a      	ldr	r2, [r3, #8]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	691b      	ldr	r3, [r3, #16]
 8011638:	431a      	orrs	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	695b      	ldr	r3, [r3, #20]
 801163e:	431a      	orrs	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	69db      	ldr	r3, [r3, #28]
 8011644:	4313      	orrs	r3, r2
 8011646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8011652:	f023 030c 	bic.w	r3, r3, #12
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	6812      	ldr	r2, [r2, #0]
 801165a:	68f9      	ldr	r1, [r7, #12]
 801165c:	430b      	orrs	r3, r1
 801165e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	695b      	ldr	r3, [r3, #20]
 8011666:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	699a      	ldr	r2, [r3, #24]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	430a      	orrs	r2, r1
 8011674:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	69db      	ldr	r3, [r3, #28]
 801167a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801167e:	f040 818b 	bne.w	8011998 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4ac1      	ldr	r2, [pc, #772]	; (801198c <UART_SetConfig+0x37c>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d005      	beq.n	8011698 <UART_SetConfig+0x88>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4abf      	ldr	r2, [pc, #764]	; (8011990 <UART_SetConfig+0x380>)
 8011692:	4293      	cmp	r3, r2
 8011694:	f040 80bd 	bne.w	8011812 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011698:	f7fc fbcc 	bl	800de34 <HAL_RCC_GetPCLK2Freq>
 801169c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	461d      	mov	r5, r3
 80116a2:	f04f 0600 	mov.w	r6, #0
 80116a6:	46a8      	mov	r8, r5
 80116a8:	46b1      	mov	r9, r6
 80116aa:	eb18 0308 	adds.w	r3, r8, r8
 80116ae:	eb49 0409 	adc.w	r4, r9, r9
 80116b2:	4698      	mov	r8, r3
 80116b4:	46a1      	mov	r9, r4
 80116b6:	eb18 0805 	adds.w	r8, r8, r5
 80116ba:	eb49 0906 	adc.w	r9, r9, r6
 80116be:	f04f 0100 	mov.w	r1, #0
 80116c2:	f04f 0200 	mov.w	r2, #0
 80116c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80116ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80116ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80116d2:	4688      	mov	r8, r1
 80116d4:	4691      	mov	r9, r2
 80116d6:	eb18 0005 	adds.w	r0, r8, r5
 80116da:	eb49 0106 	adc.w	r1, r9, r6
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	461d      	mov	r5, r3
 80116e4:	f04f 0600 	mov.w	r6, #0
 80116e8:	196b      	adds	r3, r5, r5
 80116ea:	eb46 0406 	adc.w	r4, r6, r6
 80116ee:	461a      	mov	r2, r3
 80116f0:	4623      	mov	r3, r4
 80116f2:	f7ef fae1 	bl	8000cb8 <__aeabi_uldivmod>
 80116f6:	4603      	mov	r3, r0
 80116f8:	460c      	mov	r4, r1
 80116fa:	461a      	mov	r2, r3
 80116fc:	4ba5      	ldr	r3, [pc, #660]	; (8011994 <UART_SetConfig+0x384>)
 80116fe:	fba3 2302 	umull	r2, r3, r3, r2
 8011702:	095b      	lsrs	r3, r3, #5
 8011704:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	461d      	mov	r5, r3
 801170c:	f04f 0600 	mov.w	r6, #0
 8011710:	46a9      	mov	r9, r5
 8011712:	46b2      	mov	sl, r6
 8011714:	eb19 0309 	adds.w	r3, r9, r9
 8011718:	eb4a 040a 	adc.w	r4, sl, sl
 801171c:	4699      	mov	r9, r3
 801171e:	46a2      	mov	sl, r4
 8011720:	eb19 0905 	adds.w	r9, r9, r5
 8011724:	eb4a 0a06 	adc.w	sl, sl, r6
 8011728:	f04f 0100 	mov.w	r1, #0
 801172c:	f04f 0200 	mov.w	r2, #0
 8011730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011734:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011738:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801173c:	4689      	mov	r9, r1
 801173e:	4692      	mov	sl, r2
 8011740:	eb19 0005 	adds.w	r0, r9, r5
 8011744:	eb4a 0106 	adc.w	r1, sl, r6
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	461d      	mov	r5, r3
 801174e:	f04f 0600 	mov.w	r6, #0
 8011752:	196b      	adds	r3, r5, r5
 8011754:	eb46 0406 	adc.w	r4, r6, r6
 8011758:	461a      	mov	r2, r3
 801175a:	4623      	mov	r3, r4
 801175c:	f7ef faac 	bl	8000cb8 <__aeabi_uldivmod>
 8011760:	4603      	mov	r3, r0
 8011762:	460c      	mov	r4, r1
 8011764:	461a      	mov	r2, r3
 8011766:	4b8b      	ldr	r3, [pc, #556]	; (8011994 <UART_SetConfig+0x384>)
 8011768:	fba3 1302 	umull	r1, r3, r3, r2
 801176c:	095b      	lsrs	r3, r3, #5
 801176e:	2164      	movs	r1, #100	; 0x64
 8011770:	fb01 f303 	mul.w	r3, r1, r3
 8011774:	1ad3      	subs	r3, r2, r3
 8011776:	00db      	lsls	r3, r3, #3
 8011778:	3332      	adds	r3, #50	; 0x32
 801177a:	4a86      	ldr	r2, [pc, #536]	; (8011994 <UART_SetConfig+0x384>)
 801177c:	fba2 2303 	umull	r2, r3, r2, r3
 8011780:	095b      	lsrs	r3, r3, #5
 8011782:	005b      	lsls	r3, r3, #1
 8011784:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011788:	4498      	add	r8, r3
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	461d      	mov	r5, r3
 801178e:	f04f 0600 	mov.w	r6, #0
 8011792:	46a9      	mov	r9, r5
 8011794:	46b2      	mov	sl, r6
 8011796:	eb19 0309 	adds.w	r3, r9, r9
 801179a:	eb4a 040a 	adc.w	r4, sl, sl
 801179e:	4699      	mov	r9, r3
 80117a0:	46a2      	mov	sl, r4
 80117a2:	eb19 0905 	adds.w	r9, r9, r5
 80117a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80117aa:	f04f 0100 	mov.w	r1, #0
 80117ae:	f04f 0200 	mov.w	r2, #0
 80117b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80117b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80117ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80117be:	4689      	mov	r9, r1
 80117c0:	4692      	mov	sl, r2
 80117c2:	eb19 0005 	adds.w	r0, r9, r5
 80117c6:	eb4a 0106 	adc.w	r1, sl, r6
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	461d      	mov	r5, r3
 80117d0:	f04f 0600 	mov.w	r6, #0
 80117d4:	196b      	adds	r3, r5, r5
 80117d6:	eb46 0406 	adc.w	r4, r6, r6
 80117da:	461a      	mov	r2, r3
 80117dc:	4623      	mov	r3, r4
 80117de:	f7ef fa6b 	bl	8000cb8 <__aeabi_uldivmod>
 80117e2:	4603      	mov	r3, r0
 80117e4:	460c      	mov	r4, r1
 80117e6:	461a      	mov	r2, r3
 80117e8:	4b6a      	ldr	r3, [pc, #424]	; (8011994 <UART_SetConfig+0x384>)
 80117ea:	fba3 1302 	umull	r1, r3, r3, r2
 80117ee:	095b      	lsrs	r3, r3, #5
 80117f0:	2164      	movs	r1, #100	; 0x64
 80117f2:	fb01 f303 	mul.w	r3, r1, r3
 80117f6:	1ad3      	subs	r3, r2, r3
 80117f8:	00db      	lsls	r3, r3, #3
 80117fa:	3332      	adds	r3, #50	; 0x32
 80117fc:	4a65      	ldr	r2, [pc, #404]	; (8011994 <UART_SetConfig+0x384>)
 80117fe:	fba2 2303 	umull	r2, r3, r2, r3
 8011802:	095b      	lsrs	r3, r3, #5
 8011804:	f003 0207 	and.w	r2, r3, #7
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	4442      	add	r2, r8
 801180e:	609a      	str	r2, [r3, #8]
 8011810:	e26f      	b.n	8011cf2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011812:	f7fc fafb 	bl	800de0c <HAL_RCC_GetPCLK1Freq>
 8011816:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	461d      	mov	r5, r3
 801181c:	f04f 0600 	mov.w	r6, #0
 8011820:	46a8      	mov	r8, r5
 8011822:	46b1      	mov	r9, r6
 8011824:	eb18 0308 	adds.w	r3, r8, r8
 8011828:	eb49 0409 	adc.w	r4, r9, r9
 801182c:	4698      	mov	r8, r3
 801182e:	46a1      	mov	r9, r4
 8011830:	eb18 0805 	adds.w	r8, r8, r5
 8011834:	eb49 0906 	adc.w	r9, r9, r6
 8011838:	f04f 0100 	mov.w	r1, #0
 801183c:	f04f 0200 	mov.w	r2, #0
 8011840:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011844:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011848:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801184c:	4688      	mov	r8, r1
 801184e:	4691      	mov	r9, r2
 8011850:	eb18 0005 	adds.w	r0, r8, r5
 8011854:	eb49 0106 	adc.w	r1, r9, r6
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	461d      	mov	r5, r3
 801185e:	f04f 0600 	mov.w	r6, #0
 8011862:	196b      	adds	r3, r5, r5
 8011864:	eb46 0406 	adc.w	r4, r6, r6
 8011868:	461a      	mov	r2, r3
 801186a:	4623      	mov	r3, r4
 801186c:	f7ef fa24 	bl	8000cb8 <__aeabi_uldivmod>
 8011870:	4603      	mov	r3, r0
 8011872:	460c      	mov	r4, r1
 8011874:	461a      	mov	r2, r3
 8011876:	4b47      	ldr	r3, [pc, #284]	; (8011994 <UART_SetConfig+0x384>)
 8011878:	fba3 2302 	umull	r2, r3, r3, r2
 801187c:	095b      	lsrs	r3, r3, #5
 801187e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	461d      	mov	r5, r3
 8011886:	f04f 0600 	mov.w	r6, #0
 801188a:	46a9      	mov	r9, r5
 801188c:	46b2      	mov	sl, r6
 801188e:	eb19 0309 	adds.w	r3, r9, r9
 8011892:	eb4a 040a 	adc.w	r4, sl, sl
 8011896:	4699      	mov	r9, r3
 8011898:	46a2      	mov	sl, r4
 801189a:	eb19 0905 	adds.w	r9, r9, r5
 801189e:	eb4a 0a06 	adc.w	sl, sl, r6
 80118a2:	f04f 0100 	mov.w	r1, #0
 80118a6:	f04f 0200 	mov.w	r2, #0
 80118aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80118ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80118b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80118b6:	4689      	mov	r9, r1
 80118b8:	4692      	mov	sl, r2
 80118ba:	eb19 0005 	adds.w	r0, r9, r5
 80118be:	eb4a 0106 	adc.w	r1, sl, r6
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	461d      	mov	r5, r3
 80118c8:	f04f 0600 	mov.w	r6, #0
 80118cc:	196b      	adds	r3, r5, r5
 80118ce:	eb46 0406 	adc.w	r4, r6, r6
 80118d2:	461a      	mov	r2, r3
 80118d4:	4623      	mov	r3, r4
 80118d6:	f7ef f9ef 	bl	8000cb8 <__aeabi_uldivmod>
 80118da:	4603      	mov	r3, r0
 80118dc:	460c      	mov	r4, r1
 80118de:	461a      	mov	r2, r3
 80118e0:	4b2c      	ldr	r3, [pc, #176]	; (8011994 <UART_SetConfig+0x384>)
 80118e2:	fba3 1302 	umull	r1, r3, r3, r2
 80118e6:	095b      	lsrs	r3, r3, #5
 80118e8:	2164      	movs	r1, #100	; 0x64
 80118ea:	fb01 f303 	mul.w	r3, r1, r3
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	00db      	lsls	r3, r3, #3
 80118f2:	3332      	adds	r3, #50	; 0x32
 80118f4:	4a27      	ldr	r2, [pc, #156]	; (8011994 <UART_SetConfig+0x384>)
 80118f6:	fba2 2303 	umull	r2, r3, r2, r3
 80118fa:	095b      	lsrs	r3, r3, #5
 80118fc:	005b      	lsls	r3, r3, #1
 80118fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011902:	4498      	add	r8, r3
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	461d      	mov	r5, r3
 8011908:	f04f 0600 	mov.w	r6, #0
 801190c:	46a9      	mov	r9, r5
 801190e:	46b2      	mov	sl, r6
 8011910:	eb19 0309 	adds.w	r3, r9, r9
 8011914:	eb4a 040a 	adc.w	r4, sl, sl
 8011918:	4699      	mov	r9, r3
 801191a:	46a2      	mov	sl, r4
 801191c:	eb19 0905 	adds.w	r9, r9, r5
 8011920:	eb4a 0a06 	adc.w	sl, sl, r6
 8011924:	f04f 0100 	mov.w	r1, #0
 8011928:	f04f 0200 	mov.w	r2, #0
 801192c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011930:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011934:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011938:	4689      	mov	r9, r1
 801193a:	4692      	mov	sl, r2
 801193c:	eb19 0005 	adds.w	r0, r9, r5
 8011940:	eb4a 0106 	adc.w	r1, sl, r6
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	685b      	ldr	r3, [r3, #4]
 8011948:	461d      	mov	r5, r3
 801194a:	f04f 0600 	mov.w	r6, #0
 801194e:	196b      	adds	r3, r5, r5
 8011950:	eb46 0406 	adc.w	r4, r6, r6
 8011954:	461a      	mov	r2, r3
 8011956:	4623      	mov	r3, r4
 8011958:	f7ef f9ae 	bl	8000cb8 <__aeabi_uldivmod>
 801195c:	4603      	mov	r3, r0
 801195e:	460c      	mov	r4, r1
 8011960:	461a      	mov	r2, r3
 8011962:	4b0c      	ldr	r3, [pc, #48]	; (8011994 <UART_SetConfig+0x384>)
 8011964:	fba3 1302 	umull	r1, r3, r3, r2
 8011968:	095b      	lsrs	r3, r3, #5
 801196a:	2164      	movs	r1, #100	; 0x64
 801196c:	fb01 f303 	mul.w	r3, r1, r3
 8011970:	1ad3      	subs	r3, r2, r3
 8011972:	00db      	lsls	r3, r3, #3
 8011974:	3332      	adds	r3, #50	; 0x32
 8011976:	4a07      	ldr	r2, [pc, #28]	; (8011994 <UART_SetConfig+0x384>)
 8011978:	fba2 2303 	umull	r2, r3, r2, r3
 801197c:	095b      	lsrs	r3, r3, #5
 801197e:	f003 0207 	and.w	r2, r3, #7
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4442      	add	r2, r8
 8011988:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801198a:	e1b2      	b.n	8011cf2 <UART_SetConfig+0x6e2>
 801198c:	40011000 	.word	0x40011000
 8011990:	40011400 	.word	0x40011400
 8011994:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	4ad7      	ldr	r2, [pc, #860]	; (8011cfc <UART_SetConfig+0x6ec>)
 801199e:	4293      	cmp	r3, r2
 80119a0:	d005      	beq.n	80119ae <UART_SetConfig+0x39e>
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	4ad6      	ldr	r2, [pc, #856]	; (8011d00 <UART_SetConfig+0x6f0>)
 80119a8:	4293      	cmp	r3, r2
 80119aa:	f040 80d1 	bne.w	8011b50 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80119ae:	f7fc fa41 	bl	800de34 <HAL_RCC_GetPCLK2Freq>
 80119b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	469a      	mov	sl, r3
 80119b8:	f04f 0b00 	mov.w	fp, #0
 80119bc:	46d0      	mov	r8, sl
 80119be:	46d9      	mov	r9, fp
 80119c0:	eb18 0308 	adds.w	r3, r8, r8
 80119c4:	eb49 0409 	adc.w	r4, r9, r9
 80119c8:	4698      	mov	r8, r3
 80119ca:	46a1      	mov	r9, r4
 80119cc:	eb18 080a 	adds.w	r8, r8, sl
 80119d0:	eb49 090b 	adc.w	r9, r9, fp
 80119d4:	f04f 0100 	mov.w	r1, #0
 80119d8:	f04f 0200 	mov.w	r2, #0
 80119dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80119e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80119e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80119e8:	4688      	mov	r8, r1
 80119ea:	4691      	mov	r9, r2
 80119ec:	eb1a 0508 	adds.w	r5, sl, r8
 80119f0:	eb4b 0609 	adc.w	r6, fp, r9
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	4619      	mov	r1, r3
 80119fa:	f04f 0200 	mov.w	r2, #0
 80119fe:	f04f 0300 	mov.w	r3, #0
 8011a02:	f04f 0400 	mov.w	r4, #0
 8011a06:	0094      	lsls	r4, r2, #2
 8011a08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011a0c:	008b      	lsls	r3, r1, #2
 8011a0e:	461a      	mov	r2, r3
 8011a10:	4623      	mov	r3, r4
 8011a12:	4628      	mov	r0, r5
 8011a14:	4631      	mov	r1, r6
 8011a16:	f7ef f94f 	bl	8000cb8 <__aeabi_uldivmod>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	460c      	mov	r4, r1
 8011a1e:	461a      	mov	r2, r3
 8011a20:	4bb8      	ldr	r3, [pc, #736]	; (8011d04 <UART_SetConfig+0x6f4>)
 8011a22:	fba3 2302 	umull	r2, r3, r3, r2
 8011a26:	095b      	lsrs	r3, r3, #5
 8011a28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	469b      	mov	fp, r3
 8011a30:	f04f 0c00 	mov.w	ip, #0
 8011a34:	46d9      	mov	r9, fp
 8011a36:	46e2      	mov	sl, ip
 8011a38:	eb19 0309 	adds.w	r3, r9, r9
 8011a3c:	eb4a 040a 	adc.w	r4, sl, sl
 8011a40:	4699      	mov	r9, r3
 8011a42:	46a2      	mov	sl, r4
 8011a44:	eb19 090b 	adds.w	r9, r9, fp
 8011a48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011a4c:	f04f 0100 	mov.w	r1, #0
 8011a50:	f04f 0200 	mov.w	r2, #0
 8011a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011a58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011a5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011a60:	4689      	mov	r9, r1
 8011a62:	4692      	mov	sl, r2
 8011a64:	eb1b 0509 	adds.w	r5, fp, r9
 8011a68:	eb4c 060a 	adc.w	r6, ip, sl
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	4619      	mov	r1, r3
 8011a72:	f04f 0200 	mov.w	r2, #0
 8011a76:	f04f 0300 	mov.w	r3, #0
 8011a7a:	f04f 0400 	mov.w	r4, #0
 8011a7e:	0094      	lsls	r4, r2, #2
 8011a80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011a84:	008b      	lsls	r3, r1, #2
 8011a86:	461a      	mov	r2, r3
 8011a88:	4623      	mov	r3, r4
 8011a8a:	4628      	mov	r0, r5
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	f7ef f913 	bl	8000cb8 <__aeabi_uldivmod>
 8011a92:	4603      	mov	r3, r0
 8011a94:	460c      	mov	r4, r1
 8011a96:	461a      	mov	r2, r3
 8011a98:	4b9a      	ldr	r3, [pc, #616]	; (8011d04 <UART_SetConfig+0x6f4>)
 8011a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8011a9e:	095b      	lsrs	r3, r3, #5
 8011aa0:	2164      	movs	r1, #100	; 0x64
 8011aa2:	fb01 f303 	mul.w	r3, r1, r3
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	011b      	lsls	r3, r3, #4
 8011aaa:	3332      	adds	r3, #50	; 0x32
 8011aac:	4a95      	ldr	r2, [pc, #596]	; (8011d04 <UART_SetConfig+0x6f4>)
 8011aae:	fba2 2303 	umull	r2, r3, r2, r3
 8011ab2:	095b      	lsrs	r3, r3, #5
 8011ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ab8:	4498      	add	r8, r3
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	469b      	mov	fp, r3
 8011abe:	f04f 0c00 	mov.w	ip, #0
 8011ac2:	46d9      	mov	r9, fp
 8011ac4:	46e2      	mov	sl, ip
 8011ac6:	eb19 0309 	adds.w	r3, r9, r9
 8011aca:	eb4a 040a 	adc.w	r4, sl, sl
 8011ace:	4699      	mov	r9, r3
 8011ad0:	46a2      	mov	sl, r4
 8011ad2:	eb19 090b 	adds.w	r9, r9, fp
 8011ad6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011ada:	f04f 0100 	mov.w	r1, #0
 8011ade:	f04f 0200 	mov.w	r2, #0
 8011ae2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011ae6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011aea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011aee:	4689      	mov	r9, r1
 8011af0:	4692      	mov	sl, r2
 8011af2:	eb1b 0509 	adds.w	r5, fp, r9
 8011af6:	eb4c 060a 	adc.w	r6, ip, sl
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	4619      	mov	r1, r3
 8011b00:	f04f 0200 	mov.w	r2, #0
 8011b04:	f04f 0300 	mov.w	r3, #0
 8011b08:	f04f 0400 	mov.w	r4, #0
 8011b0c:	0094      	lsls	r4, r2, #2
 8011b0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011b12:	008b      	lsls	r3, r1, #2
 8011b14:	461a      	mov	r2, r3
 8011b16:	4623      	mov	r3, r4
 8011b18:	4628      	mov	r0, r5
 8011b1a:	4631      	mov	r1, r6
 8011b1c:	f7ef f8cc 	bl	8000cb8 <__aeabi_uldivmod>
 8011b20:	4603      	mov	r3, r0
 8011b22:	460c      	mov	r4, r1
 8011b24:	461a      	mov	r2, r3
 8011b26:	4b77      	ldr	r3, [pc, #476]	; (8011d04 <UART_SetConfig+0x6f4>)
 8011b28:	fba3 1302 	umull	r1, r3, r3, r2
 8011b2c:	095b      	lsrs	r3, r3, #5
 8011b2e:	2164      	movs	r1, #100	; 0x64
 8011b30:	fb01 f303 	mul.w	r3, r1, r3
 8011b34:	1ad3      	subs	r3, r2, r3
 8011b36:	011b      	lsls	r3, r3, #4
 8011b38:	3332      	adds	r3, #50	; 0x32
 8011b3a:	4a72      	ldr	r2, [pc, #456]	; (8011d04 <UART_SetConfig+0x6f4>)
 8011b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8011b40:	095b      	lsrs	r3, r3, #5
 8011b42:	f003 020f 	and.w	r2, r3, #15
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4442      	add	r2, r8
 8011b4c:	609a      	str	r2, [r3, #8]
 8011b4e:	e0d0      	b.n	8011cf2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011b50:	f7fc f95c 	bl	800de0c <HAL_RCC_GetPCLK1Freq>
 8011b54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	469a      	mov	sl, r3
 8011b5a:	f04f 0b00 	mov.w	fp, #0
 8011b5e:	46d0      	mov	r8, sl
 8011b60:	46d9      	mov	r9, fp
 8011b62:	eb18 0308 	adds.w	r3, r8, r8
 8011b66:	eb49 0409 	adc.w	r4, r9, r9
 8011b6a:	4698      	mov	r8, r3
 8011b6c:	46a1      	mov	r9, r4
 8011b6e:	eb18 080a 	adds.w	r8, r8, sl
 8011b72:	eb49 090b 	adc.w	r9, r9, fp
 8011b76:	f04f 0100 	mov.w	r1, #0
 8011b7a:	f04f 0200 	mov.w	r2, #0
 8011b7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011b82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011b86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011b8a:	4688      	mov	r8, r1
 8011b8c:	4691      	mov	r9, r2
 8011b8e:	eb1a 0508 	adds.w	r5, sl, r8
 8011b92:	eb4b 0609 	adc.w	r6, fp, r9
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	f04f 0200 	mov.w	r2, #0
 8011ba0:	f04f 0300 	mov.w	r3, #0
 8011ba4:	f04f 0400 	mov.w	r4, #0
 8011ba8:	0094      	lsls	r4, r2, #2
 8011baa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011bae:	008b      	lsls	r3, r1, #2
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	4623      	mov	r3, r4
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	4631      	mov	r1, r6
 8011bb8:	f7ef f87e 	bl	8000cb8 <__aeabi_uldivmod>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	460c      	mov	r4, r1
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	4b50      	ldr	r3, [pc, #320]	; (8011d04 <UART_SetConfig+0x6f4>)
 8011bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8011bc8:	095b      	lsrs	r3, r3, #5
 8011bca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	469b      	mov	fp, r3
 8011bd2:	f04f 0c00 	mov.w	ip, #0
 8011bd6:	46d9      	mov	r9, fp
 8011bd8:	46e2      	mov	sl, ip
 8011bda:	eb19 0309 	adds.w	r3, r9, r9
 8011bde:	eb4a 040a 	adc.w	r4, sl, sl
 8011be2:	4699      	mov	r9, r3
 8011be4:	46a2      	mov	sl, r4
 8011be6:	eb19 090b 	adds.w	r9, r9, fp
 8011bea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011bee:	f04f 0100 	mov.w	r1, #0
 8011bf2:	f04f 0200 	mov.w	r2, #0
 8011bf6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011bfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011bfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011c02:	4689      	mov	r9, r1
 8011c04:	4692      	mov	sl, r2
 8011c06:	eb1b 0509 	adds.w	r5, fp, r9
 8011c0a:	eb4c 060a 	adc.w	r6, ip, sl
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	4619      	mov	r1, r3
 8011c14:	f04f 0200 	mov.w	r2, #0
 8011c18:	f04f 0300 	mov.w	r3, #0
 8011c1c:	f04f 0400 	mov.w	r4, #0
 8011c20:	0094      	lsls	r4, r2, #2
 8011c22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011c26:	008b      	lsls	r3, r1, #2
 8011c28:	461a      	mov	r2, r3
 8011c2a:	4623      	mov	r3, r4
 8011c2c:	4628      	mov	r0, r5
 8011c2e:	4631      	mov	r1, r6
 8011c30:	f7ef f842 	bl	8000cb8 <__aeabi_uldivmod>
 8011c34:	4603      	mov	r3, r0
 8011c36:	460c      	mov	r4, r1
 8011c38:	461a      	mov	r2, r3
 8011c3a:	4b32      	ldr	r3, [pc, #200]	; (8011d04 <UART_SetConfig+0x6f4>)
 8011c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8011c40:	095b      	lsrs	r3, r3, #5
 8011c42:	2164      	movs	r1, #100	; 0x64
 8011c44:	fb01 f303 	mul.w	r3, r1, r3
 8011c48:	1ad3      	subs	r3, r2, r3
 8011c4a:	011b      	lsls	r3, r3, #4
 8011c4c:	3332      	adds	r3, #50	; 0x32
 8011c4e:	4a2d      	ldr	r2, [pc, #180]	; (8011d04 <UART_SetConfig+0x6f4>)
 8011c50:	fba2 2303 	umull	r2, r3, r2, r3
 8011c54:	095b      	lsrs	r3, r3, #5
 8011c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c5a:	4498      	add	r8, r3
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	469b      	mov	fp, r3
 8011c60:	f04f 0c00 	mov.w	ip, #0
 8011c64:	46d9      	mov	r9, fp
 8011c66:	46e2      	mov	sl, ip
 8011c68:	eb19 0309 	adds.w	r3, r9, r9
 8011c6c:	eb4a 040a 	adc.w	r4, sl, sl
 8011c70:	4699      	mov	r9, r3
 8011c72:	46a2      	mov	sl, r4
 8011c74:	eb19 090b 	adds.w	r9, r9, fp
 8011c78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011c7c:	f04f 0100 	mov.w	r1, #0
 8011c80:	f04f 0200 	mov.w	r2, #0
 8011c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011c88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011c8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011c90:	4689      	mov	r9, r1
 8011c92:	4692      	mov	sl, r2
 8011c94:	eb1b 0509 	adds.w	r5, fp, r9
 8011c98:	eb4c 060a 	adc.w	r6, ip, sl
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	f04f 0200 	mov.w	r2, #0
 8011ca6:	f04f 0300 	mov.w	r3, #0
 8011caa:	f04f 0400 	mov.w	r4, #0
 8011cae:	0094      	lsls	r4, r2, #2
 8011cb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011cb4:	008b      	lsls	r3, r1, #2
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	4623      	mov	r3, r4
 8011cba:	4628      	mov	r0, r5
 8011cbc:	4631      	mov	r1, r6
 8011cbe:	f7ee fffb 	bl	8000cb8 <__aeabi_uldivmod>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	460c      	mov	r4, r1
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	4b0e      	ldr	r3, [pc, #56]	; (8011d04 <UART_SetConfig+0x6f4>)
 8011cca:	fba3 1302 	umull	r1, r3, r3, r2
 8011cce:	095b      	lsrs	r3, r3, #5
 8011cd0:	2164      	movs	r1, #100	; 0x64
 8011cd2:	fb01 f303 	mul.w	r3, r1, r3
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	011b      	lsls	r3, r3, #4
 8011cda:	3332      	adds	r3, #50	; 0x32
 8011cdc:	4a09      	ldr	r2, [pc, #36]	; (8011d04 <UART_SetConfig+0x6f4>)
 8011cde:	fba2 2303 	umull	r2, r3, r2, r3
 8011ce2:	095b      	lsrs	r3, r3, #5
 8011ce4:	f003 020f 	and.w	r2, r3, #15
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4442      	add	r2, r8
 8011cee:	609a      	str	r2, [r3, #8]
}
 8011cf0:	e7ff      	b.n	8011cf2 <UART_SetConfig+0x6e2>
 8011cf2:	bf00      	nop
 8011cf4:	3714      	adds	r7, #20
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cfc:	40011000 	.word	0x40011000
 8011d00:	40011400 	.word	0x40011400
 8011d04:	51eb851f 	.word	0x51eb851f

08011d08 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011d08:	b084      	sub	sp, #16
 8011d0a:	b480      	push	{r7}
 8011d0c:	b085      	sub	sp, #20
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
 8011d12:	f107 001c 	add.w	r0, r7, #28
 8011d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011d1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011d20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011d22:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011d26:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011d2a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8011d2e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011d32:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011d34:	68fa      	ldr	r2, [r7, #12]
 8011d36:	4313      	orrs	r3, r2
 8011d38:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011d42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011d46:	68fa      	ldr	r2, [r7, #12]
 8011d48:	431a      	orrs	r2, r3
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011d4e:	2300      	movs	r3, #0
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3714      	adds	r7, #20
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	b004      	add	sp, #16
 8011d5c:	4770      	bx	lr

08011d5e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8011d5e:	b480      	push	{r7}
 8011d60:	b083      	sub	sp, #12
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	370c      	adds	r7, #12
 8011d70:	46bd      	mov	sp, r7
 8011d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d76:	4770      	bx	lr

08011d78 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8011d78:	b480      	push	{r7}
 8011d7a:	b083      	sub	sp, #12
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	370c      	adds	r7, #12
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr

08011d9a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8011d9a:	b580      	push	{r7, lr}
 8011d9c:	b082      	sub	sp, #8
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2203      	movs	r2, #3
 8011da6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8011da8:	2002      	movs	r0, #2
 8011daa:	f7f9 fbc5 	bl	800b538 <HAL_Delay>
  
  return HAL_OK;
 8011dae:	2300      	movs	r3, #0
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8011db8:	b480      	push	{r7}
 8011dba:	b083      	sub	sp, #12
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	f003 0303 	and.w	r3, r3, #3
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	370c      	adds	r7, #12
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd2:	4770      	bx	lr

08011dd4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b085      	sub	sp, #20
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011dde:	2300      	movs	r3, #0
 8011de0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011df2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011df8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011dfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	4313      	orrs	r3, r2
 8011e04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	68db      	ldr	r3, [r3, #12]
 8011e0a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011e0e:	f023 030f 	bic.w	r3, r3, #15
 8011e12:	68fa      	ldr	r2, [r7, #12]
 8011e14:	431a      	orrs	r2, r3
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011e1a:	2300      	movs	r3, #0
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3714      	adds	r7, #20
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr

08011e28 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	691b      	ldr	r3, [r3, #16]
 8011e34:	b2db      	uxtb	r3, r3
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	370c      	adds	r7, #12
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e40:	4770      	bx	lr

08011e42 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8011e42:	b480      	push	{r7}
 8011e44:	b085      	sub	sp, #20
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	6078      	str	r0, [r7, #4]
 8011e4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	3314      	adds	r3, #20
 8011e50:	461a      	mov	r2, r3
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	4413      	add	r3, r2
 8011e56:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	681b      	ldr	r3, [r3, #0]
}  
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3714      	adds	r7, #20
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr

08011e68 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b085      	sub	sp, #20
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011e72:	2300      	movs	r3, #0
 8011e74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	685a      	ldr	r2, [r3, #4]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011e8e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011e94:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011e9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	4313      	orrs	r3, r2
 8011ea0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ea6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	431a      	orrs	r2, r3
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011eb2:	2300      	movs	r3, #0

}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3714      	adds	r7, #20
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr

08011ec0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b088      	sub	sp, #32
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011ece:	2310      	movs	r3, #16
 8011ed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011ed2:	2340      	movs	r3, #64	; 0x40
 8011ed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ede:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ee0:	f107 0308 	add.w	r3, r7, #8
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f7ff ff74 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8011eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ef0:	2110      	movs	r1, #16
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f000 fa40 	bl	8012378 <SDMMC_GetCmdResp1>
 8011ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011efa:	69fb      	ldr	r3, [r7, #28]
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3720      	adds	r7, #32
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b088      	sub	sp, #32
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011f12:	2311      	movs	r3, #17
 8011f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f16:	2340      	movs	r3, #64	; 0x40
 8011f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f24:	f107 0308 	add.w	r3, r7, #8
 8011f28:	4619      	mov	r1, r3
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7ff ff52 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f34:	2111      	movs	r1, #17
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f000 fa1e 	bl	8012378 <SDMMC_GetCmdResp1>
 8011f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f3e:	69fb      	ldr	r3, [r7, #28]
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3720      	adds	r7, #32
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b088      	sub	sp, #32
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011f56:	2312      	movs	r3, #18
 8011f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f5a:	2340      	movs	r3, #64	; 0x40
 8011f5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f68:	f107 0308 	add.w	r3, r7, #8
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f7ff ff30 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f78:	2112      	movs	r1, #18
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	f000 f9fc 	bl	8012378 <SDMMC_GetCmdResp1>
 8011f80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f82:	69fb      	ldr	r3, [r7, #28]
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3720      	adds	r7, #32
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}

08011f8c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b088      	sub	sp, #32
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011f9a:	2318      	movs	r3, #24
 8011f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f9e:	2340      	movs	r3, #64	; 0x40
 8011fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011faa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011fac:	f107 0308 	add.w	r3, r7, #8
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f7ff ff0e 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fbc:	2118      	movs	r1, #24
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f000 f9da 	bl	8012378 <SDMMC_GetCmdResp1>
 8011fc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fc6:	69fb      	ldr	r3, [r7, #28]
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	3720      	adds	r7, #32
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b088      	sub	sp, #32
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011fde:	2319      	movs	r3, #25
 8011fe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011fe2:	2340      	movs	r3, #64	; 0x40
 8011fe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ff0:	f107 0308 	add.w	r3, r7, #8
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f7ff feec 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012000:	2119      	movs	r1, #25
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 f9b8 	bl	8012378 <SDMMC_GetCmdResp1>
 8012008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801200a:	69fb      	ldr	r3, [r7, #28]
}
 801200c:	4618      	mov	r0, r3
 801200e:	3720      	adds	r7, #32
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b088      	sub	sp, #32
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801201c:	2300      	movs	r3, #0
 801201e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012020:	230c      	movs	r3, #12
 8012022:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012024:	2340      	movs	r3, #64	; 0x40
 8012026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012028:	2300      	movs	r3, #0
 801202a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801202c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012030:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012032:	f107 0308 	add.w	r3, r7, #8
 8012036:	4619      	mov	r1, r3
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f7ff fecb 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801203e:	4a05      	ldr	r2, [pc, #20]	; (8012054 <SDMMC_CmdStopTransfer+0x40>)
 8012040:	210c      	movs	r1, #12
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f000 f998 	bl	8012378 <SDMMC_GetCmdResp1>
 8012048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801204a:	69fb      	ldr	r3, [r7, #28]
}
 801204c:	4618      	mov	r0, r3
 801204e:	3720      	adds	r7, #32
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	05f5e100 	.word	0x05f5e100

08012058 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b08a      	sub	sp, #40	; 0x28
 801205c:	af00      	add	r7, sp, #0
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012068:	2307      	movs	r3, #7
 801206a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801206c:	2340      	movs	r3, #64	; 0x40
 801206e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012070:	2300      	movs	r3, #0
 8012072:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012078:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801207a:	f107 0310 	add.w	r3, r7, #16
 801207e:	4619      	mov	r1, r3
 8012080:	68f8      	ldr	r0, [r7, #12]
 8012082:	f7ff fea7 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8012086:	f241 3288 	movw	r2, #5000	; 0x1388
 801208a:	2107      	movs	r1, #7
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f000 f973 	bl	8012378 <SDMMC_GetCmdResp1>
 8012092:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012096:	4618      	mov	r0, r3
 8012098:	3728      	adds	r7, #40	; 0x28
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}

0801209e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801209e:	b580      	push	{r7, lr}
 80120a0:	b088      	sub	sp, #32
 80120a2:	af00      	add	r7, sp, #0
 80120a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80120a6:	2300      	movs	r3, #0
 80120a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80120aa:	2300      	movs	r3, #0
 80120ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80120ae:	2300      	movs	r3, #0
 80120b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80120b2:	2300      	movs	r3, #0
 80120b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80120b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80120bc:	f107 0308 	add.w	r3, r7, #8
 80120c0:	4619      	mov	r1, r3
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f7ff fe86 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 f92d 	bl	8012328 <SDMMC_GetCmdError>
 80120ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120d0:	69fb      	ldr	r3, [r7, #28]
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3720      	adds	r7, #32
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80120da:	b580      	push	{r7, lr}
 80120dc:	b088      	sub	sp, #32
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80120e2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80120e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80120e8:	2308      	movs	r3, #8
 80120ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80120ec:	2340      	movs	r3, #64	; 0x40
 80120ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80120f0:	2300      	movs	r3, #0
 80120f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80120f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80120fa:	f107 0308 	add.w	r3, r7, #8
 80120fe:	4619      	mov	r1, r3
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7ff fe67 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f000 fb16 	bl	8012738 <SDMMC_GetCmdResp7>
 801210c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801210e:	69fb      	ldr	r3, [r7, #28]
}
 8012110:	4618      	mov	r0, r3
 8012112:	3720      	adds	r7, #32
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b088      	sub	sp, #32
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012126:	2337      	movs	r3, #55	; 0x37
 8012128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801212a:	2340      	movs	r3, #64	; 0x40
 801212c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801212e:	2300      	movs	r3, #0
 8012130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012138:	f107 0308 	add.w	r3, r7, #8
 801213c:	4619      	mov	r1, r3
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7ff fe48 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8012144:	f241 3288 	movw	r2, #5000	; 0x1388
 8012148:	2137      	movs	r1, #55	; 0x37
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 f914 	bl	8012378 <SDMMC_GetCmdResp1>
 8012150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012152:	69fb      	ldr	r3, [r7, #28]
}
 8012154:	4618      	mov	r0, r3
 8012156:	3720      	adds	r7, #32
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b088      	sub	sp, #32
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801216c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012172:	2329      	movs	r3, #41	; 0x29
 8012174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012176:	2340      	movs	r3, #64	; 0x40
 8012178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801217a:	2300      	movs	r3, #0
 801217c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801217e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012182:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012184:	f107 0308 	add.w	r3, r7, #8
 8012188:	4619      	mov	r1, r3
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f7ff fe22 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f000 fa23 	bl	80125dc <SDMMC_GetCmdResp3>
 8012196:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012198:	69fb      	ldr	r3, [r7, #28]
}
 801219a:	4618      	mov	r0, r3
 801219c:	3720      	adds	r7, #32
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}

080121a2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80121a2:	b580      	push	{r7, lr}
 80121a4:	b088      	sub	sp, #32
 80121a6:	af00      	add	r7, sp, #0
 80121a8:	6078      	str	r0, [r7, #4]
 80121aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80121b0:	2306      	movs	r3, #6
 80121b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80121b4:	2340      	movs	r3, #64	; 0x40
 80121b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80121b8:	2300      	movs	r3, #0
 80121ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80121bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80121c2:	f107 0308 	add.w	r3, r7, #8
 80121c6:	4619      	mov	r1, r3
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f7ff fe03 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80121ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80121d2:	2106      	movs	r1, #6
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f000 f8cf 	bl	8012378 <SDMMC_GetCmdResp1>
 80121da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121dc:	69fb      	ldr	r3, [r7, #28]
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3720      	adds	r7, #32
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80121e6:	b580      	push	{r7, lr}
 80121e8:	b088      	sub	sp, #32
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80121ee:	2300      	movs	r3, #0
 80121f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80121f2:	2333      	movs	r3, #51	; 0x33
 80121f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80121f6:	2340      	movs	r3, #64	; 0x40
 80121f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80121fa:	2300      	movs	r3, #0
 80121fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80121fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012202:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012204:	f107 0308 	add.w	r3, r7, #8
 8012208:	4619      	mov	r1, r3
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f7ff fde2 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8012210:	f241 3288 	movw	r2, #5000	; 0x1388
 8012214:	2133      	movs	r1, #51	; 0x33
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f000 f8ae 	bl	8012378 <SDMMC_GetCmdResp1>
 801221c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801221e:	69fb      	ldr	r3, [r7, #28]
}
 8012220:	4618      	mov	r0, r3
 8012222:	3720      	adds	r7, #32
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b088      	sub	sp, #32
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012230:	2300      	movs	r3, #0
 8012232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012234:	2302      	movs	r3, #2
 8012236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8012238:	23c0      	movs	r3, #192	; 0xc0
 801223a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801223c:	2300      	movs	r3, #0
 801223e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012246:	f107 0308 	add.w	r3, r7, #8
 801224a:	4619      	mov	r1, r3
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7ff fdc1 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f000 f97c 	bl	8012550 <SDMMC_GetCmdResp2>
 8012258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801225a:	69fb      	ldr	r3, [r7, #28]
}
 801225c:	4618      	mov	r0, r3
 801225e:	3720      	adds	r7, #32
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b088      	sub	sp, #32
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012272:	2309      	movs	r3, #9
 8012274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8012276:	23c0      	movs	r3, #192	; 0xc0
 8012278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801227a:	2300      	movs	r3, #0
 801227c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801227e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012282:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012284:	f107 0308 	add.w	r3, r7, #8
 8012288:	4619      	mov	r1, r3
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f7ff fda2 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f000 f95d 	bl	8012550 <SDMMC_GetCmdResp2>
 8012296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012298:	69fb      	ldr	r3, [r7, #28]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3720      	adds	r7, #32
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80122a2:	b580      	push	{r7, lr}
 80122a4:	b088      	sub	sp, #32
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
 80122aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80122ac:	2300      	movs	r3, #0
 80122ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80122b0:	2303      	movs	r3, #3
 80122b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80122b4:	2340      	movs	r3, #64	; 0x40
 80122b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80122b8:	2300      	movs	r3, #0
 80122ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80122bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80122c2:	f107 0308 	add.w	r3, r7, #8
 80122c6:	4619      	mov	r1, r3
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f7ff fd83 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80122ce:	683a      	ldr	r2, [r7, #0]
 80122d0:	2103      	movs	r1, #3
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f000 f9bc 	bl	8012650 <SDMMC_GetCmdResp6>
 80122d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122da:	69fb      	ldr	r3, [r7, #28]
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3720      	adds	r7, #32
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b088      	sub	sp, #32
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80122f2:	230d      	movs	r3, #13
 80122f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80122f6:	2340      	movs	r3, #64	; 0x40
 80122f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80122fa:	2300      	movs	r3, #0
 80122fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80122fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012304:	f107 0308 	add.w	r3, r7, #8
 8012308:	4619      	mov	r1, r3
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f7ff fd62 	bl	8011dd4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8012310:	f241 3288 	movw	r2, #5000	; 0x1388
 8012314:	210d      	movs	r1, #13
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 f82e 	bl	8012378 <SDMMC_GetCmdResp1>
 801231c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801231e:	69fb      	ldr	r3, [r7, #28]
}
 8012320:	4618      	mov	r0, r3
 8012322:	3720      	adds	r7, #32
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}

08012328 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8012328:	b490      	push	{r4, r7}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012330:	4b0f      	ldr	r3, [pc, #60]	; (8012370 <SDMMC_GetCmdError+0x48>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	4a0f      	ldr	r2, [pc, #60]	; (8012374 <SDMMC_GetCmdError+0x4c>)
 8012336:	fba2 2303 	umull	r2, r3, r2, r3
 801233a:	0a5b      	lsrs	r3, r3, #9
 801233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012340:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012344:	4623      	mov	r3, r4
 8012346:	1e5c      	subs	r4, r3, #1
 8012348:	2b00      	cmp	r3, #0
 801234a:	d102      	bne.n	8012352 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801234c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012350:	e009      	b.n	8012366 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801235a:	2b00      	cmp	r3, #0
 801235c:	d0f2      	beq.n	8012344 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	22c5      	movs	r2, #197	; 0xc5
 8012362:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012364:	2300      	movs	r3, #0
}
 8012366:	4618      	mov	r0, r3
 8012368:	3708      	adds	r7, #8
 801236a:	46bd      	mov	sp, r7
 801236c:	bc90      	pop	{r4, r7}
 801236e:	4770      	bx	lr
 8012370:	20000000 	.word	0x20000000
 8012374:	10624dd3 	.word	0x10624dd3

08012378 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012378:	b590      	push	{r4, r7, lr}
 801237a:	b087      	sub	sp, #28
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	460b      	mov	r3, r1
 8012382:	607a      	str	r2, [r7, #4]
 8012384:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012386:	4b6f      	ldr	r3, [pc, #444]	; (8012544 <SDMMC_GetCmdResp1+0x1cc>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4a6f      	ldr	r2, [pc, #444]	; (8012548 <SDMMC_GetCmdResp1+0x1d0>)
 801238c:	fba2 2303 	umull	r2, r3, r2, r3
 8012390:	0a5b      	lsrs	r3, r3, #9
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012398:	4623      	mov	r3, r4
 801239a:	1e5c      	subs	r4, r3, #1
 801239c:	2b00      	cmp	r3, #0
 801239e:	d102      	bne.n	80123a6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80123a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80123a4:	e0c9      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123aa:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d0f0      	beq.n	8012398 <SDMMC_GetCmdResp1+0x20>
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d1eb      	bne.n	8012398 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123c4:	f003 0304 	and.w	r3, r3, #4
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d004      	beq.n	80123d6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2204      	movs	r2, #4
 80123d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80123d2:	2304      	movs	r3, #4
 80123d4:	e0b1      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123da:	f003 0301 	and.w	r3, r3, #1
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d004      	beq.n	80123ec <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	2201      	movs	r2, #1
 80123e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80123e8:	2301      	movs	r3, #1
 80123ea:	e0a6      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	22c5      	movs	r2, #197	; 0xc5
 80123f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80123f2:	68f8      	ldr	r0, [r7, #12]
 80123f4:	f7ff fd18 	bl	8011e28 <SDIO_GetCommandResponse>
 80123f8:	4603      	mov	r3, r0
 80123fa:	461a      	mov	r2, r3
 80123fc:	7afb      	ldrb	r3, [r7, #11]
 80123fe:	4293      	cmp	r3, r2
 8012400:	d001      	beq.n	8012406 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012402:	2301      	movs	r3, #1
 8012404:	e099      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8012406:	2100      	movs	r1, #0
 8012408:	68f8      	ldr	r0, [r7, #12]
 801240a:	f7ff fd1a 	bl	8011e42 <SDIO_GetResponse>
 801240e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012410:	693a      	ldr	r2, [r7, #16]
 8012412:	4b4e      	ldr	r3, [pc, #312]	; (801254c <SDMMC_GetCmdResp1+0x1d4>)
 8012414:	4013      	ands	r3, r2
 8012416:	2b00      	cmp	r3, #0
 8012418:	d101      	bne.n	801241e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801241a:	2300      	movs	r3, #0
 801241c:	e08d      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	2b00      	cmp	r3, #0
 8012422:	da02      	bge.n	801242a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012428:	e087      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012430:	2b00      	cmp	r3, #0
 8012432:	d001      	beq.n	8012438 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012434:	2340      	movs	r3, #64	; 0x40
 8012436:	e080      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801243e:	2b00      	cmp	r3, #0
 8012440:	d001      	beq.n	8012446 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012442:	2380      	movs	r3, #128	; 0x80
 8012444:	e079      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801244c:	2b00      	cmp	r3, #0
 801244e:	d002      	beq.n	8012456 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012454:	e071      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801245c:	2b00      	cmp	r3, #0
 801245e:	d002      	beq.n	8012466 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012464:	e069      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801246c:	2b00      	cmp	r3, #0
 801246e:	d002      	beq.n	8012476 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012474:	e061      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801247c:	2b00      	cmp	r3, #0
 801247e:	d002      	beq.n	8012486 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012484:	e059      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801248c:	2b00      	cmp	r3, #0
 801248e:	d002      	beq.n	8012496 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012494:	e051      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801249c:	2b00      	cmp	r3, #0
 801249e:	d002      	beq.n	80124a6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80124a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80124a4:	e049      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d002      	beq.n	80124b6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80124b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80124b4:	e041      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d002      	beq.n	80124c6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80124c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124c4:	e039      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d002      	beq.n	80124d6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80124d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80124d4:	e031      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80124d6:	693b      	ldr	r3, [r7, #16]
 80124d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d002      	beq.n	80124e6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80124e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80124e4:	e029      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d002      	beq.n	80124f6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80124f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80124f4:	e021      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d002      	beq.n	8012506 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012500:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012504:	e019      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801250c:	2b00      	cmp	r3, #0
 801250e:	d002      	beq.n	8012516 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012514:	e011      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801251c:	2b00      	cmp	r3, #0
 801251e:	d002      	beq.n	8012526 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012520:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012524:	e009      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	f003 0308 	and.w	r3, r3, #8
 801252c:	2b00      	cmp	r3, #0
 801252e:	d002      	beq.n	8012536 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012530:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012534:	e001      	b.n	801253a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801253a:	4618      	mov	r0, r3
 801253c:	371c      	adds	r7, #28
 801253e:	46bd      	mov	sp, r7
 8012540:	bd90      	pop	{r4, r7, pc}
 8012542:	bf00      	nop
 8012544:	20000000 	.word	0x20000000
 8012548:	10624dd3 	.word	0x10624dd3
 801254c:	fdffe008 	.word	0xfdffe008

08012550 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8012550:	b490      	push	{r4, r7}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012558:	4b1e      	ldr	r3, [pc, #120]	; (80125d4 <SDMMC_GetCmdResp2+0x84>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	4a1e      	ldr	r2, [pc, #120]	; (80125d8 <SDMMC_GetCmdResp2+0x88>)
 801255e:	fba2 2303 	umull	r2, r3, r2, r3
 8012562:	0a5b      	lsrs	r3, r3, #9
 8012564:	f241 3288 	movw	r2, #5000	; 0x1388
 8012568:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801256c:	4623      	mov	r3, r4
 801256e:	1e5c      	subs	r4, r3, #1
 8012570:	2b00      	cmp	r3, #0
 8012572:	d102      	bne.n	801257a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012578:	e026      	b.n	80125c8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801257e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012586:	2b00      	cmp	r3, #0
 8012588:	d0f0      	beq.n	801256c <SDMMC_GetCmdResp2+0x1c>
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012590:	2b00      	cmp	r3, #0
 8012592:	d1eb      	bne.n	801256c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012598:	f003 0304 	and.w	r3, r3, #4
 801259c:	2b00      	cmp	r3, #0
 801259e:	d004      	beq.n	80125aa <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	2204      	movs	r2, #4
 80125a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125a6:	2304      	movs	r3, #4
 80125a8:	e00e      	b.n	80125c8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125ae:	f003 0301 	and.w	r3, r3, #1
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d004      	beq.n	80125c0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2201      	movs	r2, #1
 80125ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125bc:	2301      	movs	r3, #1
 80125be:	e003      	b.n	80125c8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	22c5      	movs	r2, #197	; 0xc5
 80125c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80125c6:	2300      	movs	r3, #0
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3710      	adds	r7, #16
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bc90      	pop	{r4, r7}
 80125d0:	4770      	bx	lr
 80125d2:	bf00      	nop
 80125d4:	20000000 	.word	0x20000000
 80125d8:	10624dd3 	.word	0x10624dd3

080125dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80125dc:	b490      	push	{r4, r7}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80125e4:	4b18      	ldr	r3, [pc, #96]	; (8012648 <SDMMC_GetCmdResp3+0x6c>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	4a18      	ldr	r2, [pc, #96]	; (801264c <SDMMC_GetCmdResp3+0x70>)
 80125ea:	fba2 2303 	umull	r2, r3, r2, r3
 80125ee:	0a5b      	lsrs	r3, r3, #9
 80125f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80125f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80125f8:	4623      	mov	r3, r4
 80125fa:	1e5c      	subs	r4, r3, #1
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d102      	bne.n	8012606 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012604:	e01b      	b.n	801263e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801260a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012612:	2b00      	cmp	r3, #0
 8012614:	d0f0      	beq.n	80125f8 <SDMMC_GetCmdResp3+0x1c>
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801261c:	2b00      	cmp	r3, #0
 801261e:	d1eb      	bne.n	80125f8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012624:	f003 0304 	and.w	r3, r3, #4
 8012628:	2b00      	cmp	r3, #0
 801262a:	d004      	beq.n	8012636 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2204      	movs	r2, #4
 8012630:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012632:	2304      	movs	r3, #4
 8012634:	e003      	b.n	801263e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	22c5      	movs	r2, #197	; 0xc5
 801263a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801263c:	2300      	movs	r3, #0
}
 801263e:	4618      	mov	r0, r3
 8012640:	3710      	adds	r7, #16
 8012642:	46bd      	mov	sp, r7
 8012644:	bc90      	pop	{r4, r7}
 8012646:	4770      	bx	lr
 8012648:	20000000 	.word	0x20000000
 801264c:	10624dd3 	.word	0x10624dd3

08012650 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012650:	b590      	push	{r4, r7, lr}
 8012652:	b087      	sub	sp, #28
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	460b      	mov	r3, r1
 801265a:	607a      	str	r2, [r7, #4]
 801265c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801265e:	4b34      	ldr	r3, [pc, #208]	; (8012730 <SDMMC_GetCmdResp6+0xe0>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	4a34      	ldr	r2, [pc, #208]	; (8012734 <SDMMC_GetCmdResp6+0xe4>)
 8012664:	fba2 2303 	umull	r2, r3, r2, r3
 8012668:	0a5b      	lsrs	r3, r3, #9
 801266a:	f241 3288 	movw	r2, #5000	; 0x1388
 801266e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012672:	4623      	mov	r3, r4
 8012674:	1e5c      	subs	r4, r3, #1
 8012676:	2b00      	cmp	r3, #0
 8012678:	d102      	bne.n	8012680 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801267a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801267e:	e052      	b.n	8012726 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012684:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801268c:	2b00      	cmp	r3, #0
 801268e:	d0f0      	beq.n	8012672 <SDMMC_GetCmdResp6+0x22>
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012696:	2b00      	cmp	r3, #0
 8012698:	d1eb      	bne.n	8012672 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801269e:	f003 0304 	and.w	r3, r3, #4
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d004      	beq.n	80126b0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	2204      	movs	r2, #4
 80126aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80126ac:	2304      	movs	r3, #4
 80126ae:	e03a      	b.n	8012726 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126b4:	f003 0301 	and.w	r3, r3, #1
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d004      	beq.n	80126c6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2201      	movs	r2, #1
 80126c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80126c2:	2301      	movs	r3, #1
 80126c4:	e02f      	b.n	8012726 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80126c6:	68f8      	ldr	r0, [r7, #12]
 80126c8:	f7ff fbae 	bl	8011e28 <SDIO_GetCommandResponse>
 80126cc:	4603      	mov	r3, r0
 80126ce:	461a      	mov	r2, r3
 80126d0:	7afb      	ldrb	r3, [r7, #11]
 80126d2:	4293      	cmp	r3, r2
 80126d4:	d001      	beq.n	80126da <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80126d6:	2301      	movs	r3, #1
 80126d8:	e025      	b.n	8012726 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	22c5      	movs	r2, #197	; 0xc5
 80126de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80126e0:	2100      	movs	r1, #0
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	f7ff fbad 	bl	8011e42 <SDIO_GetResponse>
 80126e8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d106      	bne.n	8012702 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	0c1b      	lsrs	r3, r3, #16
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80126fe:	2300      	movs	r3, #0
 8012700:	e011      	b.n	8012726 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012708:	2b00      	cmp	r3, #0
 801270a:	d002      	beq.n	8012712 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801270c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012710:	e009      	b.n	8012726 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012718:	2b00      	cmp	r3, #0
 801271a:	d002      	beq.n	8012722 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801271c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012720:	e001      	b.n	8012726 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012726:	4618      	mov	r0, r3
 8012728:	371c      	adds	r7, #28
 801272a:	46bd      	mov	sp, r7
 801272c:	bd90      	pop	{r4, r7, pc}
 801272e:	bf00      	nop
 8012730:	20000000 	.word	0x20000000
 8012734:	10624dd3 	.word	0x10624dd3

08012738 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8012738:	b490      	push	{r4, r7}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012740:	4b21      	ldr	r3, [pc, #132]	; (80127c8 <SDMMC_GetCmdResp7+0x90>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a21      	ldr	r2, [pc, #132]	; (80127cc <SDMMC_GetCmdResp7+0x94>)
 8012746:	fba2 2303 	umull	r2, r3, r2, r3
 801274a:	0a5b      	lsrs	r3, r3, #9
 801274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012750:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012754:	4623      	mov	r3, r4
 8012756:	1e5c      	subs	r4, r3, #1
 8012758:	2b00      	cmp	r3, #0
 801275a:	d102      	bne.n	8012762 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801275c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012760:	e02c      	b.n	80127bc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012766:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801276e:	2b00      	cmp	r3, #0
 8012770:	d0f0      	beq.n	8012754 <SDMMC_GetCmdResp7+0x1c>
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012778:	2b00      	cmp	r3, #0
 801277a:	d1eb      	bne.n	8012754 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012780:	f003 0304 	and.w	r3, r3, #4
 8012784:	2b00      	cmp	r3, #0
 8012786:	d004      	beq.n	8012792 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2204      	movs	r2, #4
 801278c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801278e:	2304      	movs	r3, #4
 8012790:	e014      	b.n	80127bc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012796:	f003 0301 	and.w	r3, r3, #1
 801279a:	2b00      	cmp	r3, #0
 801279c:	d004      	beq.n	80127a8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2201      	movs	r2, #1
 80127a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80127a4:	2301      	movs	r3, #1
 80127a6:	e009      	b.n	80127bc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2240      	movs	r2, #64	; 0x40
 80127b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80127ba:	2300      	movs	r3, #0
  
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3710      	adds	r7, #16
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bc90      	pop	{r4, r7}
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	20000000 	.word	0x20000000
 80127cc:	10624dd3 	.word	0x10624dd3

080127d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80127d4:	4904      	ldr	r1, [pc, #16]	; (80127e8 <MX_FATFS_Init+0x18>)
 80127d6:	4805      	ldr	r0, [pc, #20]	; (80127ec <MX_FATFS_Init+0x1c>)
 80127d8:	f003 fb9c 	bl	8015f14 <FATFS_LinkDriver>
 80127dc:	4603      	mov	r3, r0
 80127de:	461a      	mov	r2, r3
 80127e0:	4b03      	ldr	r3, [pc, #12]	; (80127f0 <MX_FATFS_Init+0x20>)
 80127e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80127e4:	bf00      	nop
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	20047c98 	.word	0x20047c98
 80127ec:	0801a8cc 	.word	0x0801a8cc
 80127f0:	20047c94 	.word	0x20047c94

080127f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80127fa:	2300      	movs	r3, #0
 80127fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80127fe:	f000 f896 	bl	801292e <BSP_SD_IsDetected>
 8012802:	4603      	mov	r3, r0
 8012804:	2b01      	cmp	r3, #1
 8012806:	d001      	beq.n	801280c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8012808:	2301      	movs	r3, #1
 801280a:	e012      	b.n	8012832 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801280c:	480b      	ldr	r0, [pc, #44]	; (801283c <BSP_SD_Init+0x48>)
 801280e:	f7fb ffa5 	bl	800e75c <HAL_SD_Init>
 8012812:	4603      	mov	r3, r0
 8012814:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012816:	79fb      	ldrb	r3, [r7, #7]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d109      	bne.n	8012830 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801281c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012820:	4806      	ldr	r0, [pc, #24]	; (801283c <BSP_SD_Init+0x48>)
 8012822:	f7fc fd4f 	bl	800f2c4 <HAL_SD_ConfigWideBusOperation>
 8012826:	4603      	mov	r3, r0
 8012828:	2b00      	cmp	r3, #0
 801282a:	d001      	beq.n	8012830 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801282c:	2301      	movs	r3, #1
 801282e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012830:	79fb      	ldrb	r3, [r7, #7]
}
 8012832:	4618      	mov	r0, r3
 8012834:	3708      	adds	r7, #8
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	bf00      	nop
 801283c:	20047a90 	.word	0x20047a90

08012840 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b086      	sub	sp, #24
 8012844:	af00      	add	r7, sp, #0
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801284c:	2300      	movs	r3, #0
 801284e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	68ba      	ldr	r2, [r7, #8]
 8012854:	68f9      	ldr	r1, [r7, #12]
 8012856:	4806      	ldr	r0, [pc, #24]	; (8012870 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012858:	f7fc f810 	bl	800e87c <HAL_SD_ReadBlocks_DMA>
 801285c:	4603      	mov	r3, r0
 801285e:	2b00      	cmp	r3, #0
 8012860:	d001      	beq.n	8012866 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012862:	2301      	movs	r3, #1
 8012864:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012866:	7dfb      	ldrb	r3, [r7, #23]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3718      	adds	r7, #24
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}
 8012870:	20047a90 	.word	0x20047a90

08012874 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b086      	sub	sp, #24
 8012878:	af00      	add	r7, sp, #0
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	60b9      	str	r1, [r7, #8]
 801287e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012880:	2300      	movs	r3, #0
 8012882:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	68ba      	ldr	r2, [r7, #8]
 8012888:	68f9      	ldr	r1, [r7, #12]
 801288a:	4806      	ldr	r0, [pc, #24]	; (80128a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801288c:	f7fc f8de 	bl	800ea4c <HAL_SD_WriteBlocks_DMA>
 8012890:	4603      	mov	r3, r0
 8012892:	2b00      	cmp	r3, #0
 8012894:	d001      	beq.n	801289a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012896:	2301      	movs	r3, #1
 8012898:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801289a:	7dfb      	ldrb	r3, [r7, #23]
}
 801289c:	4618      	mov	r0, r3
 801289e:	3718      	adds	r7, #24
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	20047a90 	.word	0x20047a90

080128a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80128ac:	4805      	ldr	r0, [pc, #20]	; (80128c4 <BSP_SD_GetCardState+0x1c>)
 80128ae:	f7fc fd85 	bl	800f3bc <HAL_SD_GetCardState>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b04      	cmp	r3, #4
 80128b6:	bf14      	ite	ne
 80128b8:	2301      	movne	r3, #1
 80128ba:	2300      	moveq	r3, #0
 80128bc:	b2db      	uxtb	r3, r3
}
 80128be:	4618      	mov	r0, r3
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop
 80128c4:	20047a90 	.word	0x20047a90

080128c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80128d0:	6879      	ldr	r1, [r7, #4]
 80128d2:	4803      	ldr	r0, [pc, #12]	; (80128e0 <BSP_SD_GetCardInfo+0x18>)
 80128d4:	f7fc fcca 	bl	800f26c <HAL_SD_GetCardInfo>
}
 80128d8:	bf00      	nop
 80128da:	3708      	adds	r7, #8
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	20047a90 	.word	0x20047a90

080128e4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80128ec:	f000 f818 	bl	8012920 <BSP_SD_AbortCallback>
}
 80128f0:	bf00      	nop
 80128f2:	3708      	adds	r7, #8
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012900:	f000 f9a8 	bl	8012c54 <BSP_SD_WriteCpltCallback>
}
 8012904:	bf00      	nop
 8012906:	3708      	adds	r7, #8
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012914:	f000 f9aa 	bl	8012c6c <BSP_SD_ReadCpltCallback>
}
 8012918:	bf00      	nop
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012920:	b480      	push	{r7}
 8012922:	af00      	add	r7, sp, #0

}
 8012924:	bf00      	nop
 8012926:	46bd      	mov	sp, r7
 8012928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292c:	4770      	bx	lr

0801292e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801292e:	b580      	push	{r7, lr}
 8012930:	b082      	sub	sp, #8
 8012932:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012934:	2301      	movs	r3, #1
 8012936:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012938:	f000 f80c 	bl	8012954 <BSP_PlatformIsDetected>
 801293c:	4603      	mov	r3, r0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d101      	bne.n	8012946 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012942:	2300      	movs	r3, #0
 8012944:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012946:	79fb      	ldrb	r3, [r7, #7]
 8012948:	b2db      	uxtb	r3, r3
}
 801294a:	4618      	mov	r0, r3
 801294c:	3708      	adds	r7, #8
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
	...

08012954 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801295a:	2301      	movs	r3, #1
 801295c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801295e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012962:	4806      	ldr	r0, [pc, #24]	; (801297c <BSP_PlatformIsDetected+0x28>)
 8012964:	f7fa f866 	bl	800ca34 <HAL_GPIO_ReadPin>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d001      	beq.n	8012972 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801296e:	2300      	movs	r3, #0
 8012970:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012972:	79fb      	ldrb	r3, [r7, #7]
}
 8012974:	4618      	mov	r0, r3
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	40020000 	.word	0x40020000

08012980 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012988:	f7f8 fdca 	bl	800b520 <HAL_GetTick>
 801298c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801298e:	e006      	b.n	801299e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012990:	f7ff ff8a 	bl	80128a8 <BSP_SD_GetCardState>
 8012994:	4603      	mov	r3, r0
 8012996:	2b00      	cmp	r3, #0
 8012998:	d101      	bne.n	801299e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801299a:	2300      	movs	r3, #0
 801299c:	e009      	b.n	80129b2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801299e:	f7f8 fdbf 	bl	800b520 <HAL_GetTick>
 80129a2:	4602      	mov	r2, r0
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	1ad3      	subs	r3, r2, r3
 80129a8:	687a      	ldr	r2, [r7, #4]
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d8f0      	bhi.n	8012990 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80129ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3710      	adds	r7, #16
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
	...

080129bc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	4603      	mov	r3, r0
 80129c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80129c6:	4b0b      	ldr	r3, [pc, #44]	; (80129f4 <SD_CheckStatus+0x38>)
 80129c8:	2201      	movs	r2, #1
 80129ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80129cc:	f7ff ff6c 	bl	80128a8 <BSP_SD_GetCardState>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d107      	bne.n	80129e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80129d6:	4b07      	ldr	r3, [pc, #28]	; (80129f4 <SD_CheckStatus+0x38>)
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	f023 0301 	bic.w	r3, r3, #1
 80129e0:	b2da      	uxtb	r2, r3
 80129e2:	4b04      	ldr	r3, [pc, #16]	; (80129f4 <SD_CheckStatus+0x38>)
 80129e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80129e6:	4b03      	ldr	r3, [pc, #12]	; (80129f4 <SD_CheckStatus+0x38>)
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	b2db      	uxtb	r3, r3
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	20000009 	.word	0x20000009

080129f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	4603      	mov	r3, r0
 8012a00:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012a02:	f7ff fef7 	bl	80127f4 <BSP_SD_Init>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d107      	bne.n	8012a1c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012a0c:	79fb      	ldrb	r3, [r7, #7]
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7ff ffd4 	bl	80129bc <SD_CheckStatus>
 8012a14:	4603      	mov	r3, r0
 8012a16:	461a      	mov	r2, r3
 8012a18:	4b04      	ldr	r3, [pc, #16]	; (8012a2c <SD_initialize+0x34>)
 8012a1a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012a1c:	4b03      	ldr	r3, [pc, #12]	; (8012a2c <SD_initialize+0x34>)
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	b2db      	uxtb	r3, r3
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3708      	adds	r7, #8
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	20000009 	.word	0x20000009

08012a30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b082      	sub	sp, #8
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	4603      	mov	r3, r0
 8012a38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012a3a:	79fb      	ldrb	r3, [r7, #7]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7ff ffbd 	bl	80129bc <SD_CheckStatus>
 8012a42:	4603      	mov	r3, r0
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3708      	adds	r7, #8
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b086      	sub	sp, #24
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60b9      	str	r1, [r7, #8]
 8012a54:	607a      	str	r2, [r7, #4]
 8012a56:	603b      	str	r3, [r7, #0]
 8012a58:	4603      	mov	r3, r0
 8012a5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012a60:	f247 5030 	movw	r0, #30000	; 0x7530
 8012a64:	f7ff ff8c 	bl	8012980 <SD_CheckStatusWithTimeout>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	da01      	bge.n	8012a72 <SD_read+0x26>
  {
    return res;
 8012a6e:	7dfb      	ldrb	r3, [r7, #23]
 8012a70:	e03b      	b.n	8012aea <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8012a72:	683a      	ldr	r2, [r7, #0]
 8012a74:	6879      	ldr	r1, [r7, #4]
 8012a76:	68b8      	ldr	r0, [r7, #8]
 8012a78:	f7ff fee2 	bl	8012840 <BSP_SD_ReadBlocks_DMA>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d132      	bne.n	8012ae8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8012a82:	4b1c      	ldr	r3, [pc, #112]	; (8012af4 <SD_read+0xa8>)
 8012a84:	2200      	movs	r2, #0
 8012a86:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012a88:	f7f8 fd4a 	bl	800b520 <HAL_GetTick>
 8012a8c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012a8e:	bf00      	nop
 8012a90:	4b18      	ldr	r3, [pc, #96]	; (8012af4 <SD_read+0xa8>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d108      	bne.n	8012aaa <SD_read+0x5e>
 8012a98:	f7f8 fd42 	bl	800b520 <HAL_GetTick>
 8012a9c:	4602      	mov	r2, r0
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	1ad3      	subs	r3, r2, r3
 8012aa2:	f247 522f 	movw	r2, #29999	; 0x752f
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	d9f2      	bls.n	8012a90 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8012aaa:	4b12      	ldr	r3, [pc, #72]	; (8012af4 <SD_read+0xa8>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d102      	bne.n	8012ab8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	75fb      	strb	r3, [r7, #23]
 8012ab6:	e017      	b.n	8012ae8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012ab8:	4b0e      	ldr	r3, [pc, #56]	; (8012af4 <SD_read+0xa8>)
 8012aba:	2200      	movs	r2, #0
 8012abc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012abe:	f7f8 fd2f 	bl	800b520 <HAL_GetTick>
 8012ac2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012ac4:	e007      	b.n	8012ad6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012ac6:	f7ff feef 	bl	80128a8 <BSP_SD_GetCardState>
 8012aca:	4603      	mov	r3, r0
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d102      	bne.n	8012ad6 <SD_read+0x8a>
          {
            res = RES_OK;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012ad4:	e008      	b.n	8012ae8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012ad6:	f7f8 fd23 	bl	800b520 <HAL_GetTick>
 8012ada:	4602      	mov	r2, r0
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	1ad3      	subs	r3, r2, r3
 8012ae0:	f247 522f 	movw	r2, #29999	; 0x752f
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	d9ee      	bls.n	8012ac6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	3718      	adds	r7, #24
 8012aee:	46bd      	mov	sp, r7
 8012af0:	bd80      	pop	{r7, pc}
 8012af2:	bf00      	nop
 8012af4:	2004532c 	.word	0x2004532c

08012af8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b086      	sub	sp, #24
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	60b9      	str	r1, [r7, #8]
 8012b00:	607a      	str	r2, [r7, #4]
 8012b02:	603b      	str	r3, [r7, #0]
 8012b04:	4603      	mov	r3, r0
 8012b06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012b08:	2301      	movs	r3, #1
 8012b0a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012b0c:	4b24      	ldr	r3, [pc, #144]	; (8012ba0 <SD_write+0xa8>)
 8012b0e:	2200      	movs	r2, #0
 8012b10:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012b12:	f247 5030 	movw	r0, #30000	; 0x7530
 8012b16:	f7ff ff33 	bl	8012980 <SD_CheckStatusWithTimeout>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	da01      	bge.n	8012b24 <SD_write+0x2c>
  {
    return res;
 8012b20:	7dfb      	ldrb	r3, [r7, #23]
 8012b22:	e038      	b.n	8012b96 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012b24:	683a      	ldr	r2, [r7, #0]
 8012b26:	6879      	ldr	r1, [r7, #4]
 8012b28:	68b8      	ldr	r0, [r7, #8]
 8012b2a:	f7ff fea3 	bl	8012874 <BSP_SD_WriteBlocks_DMA>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d12f      	bne.n	8012b94 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012b34:	f7f8 fcf4 	bl	800b520 <HAL_GetTick>
 8012b38:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012b3a:	bf00      	nop
 8012b3c:	4b18      	ldr	r3, [pc, #96]	; (8012ba0 <SD_write+0xa8>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d108      	bne.n	8012b56 <SD_write+0x5e>
 8012b44:	f7f8 fcec 	bl	800b520 <HAL_GetTick>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	1ad3      	subs	r3, r2, r3
 8012b4e:	f247 522f 	movw	r2, #29999	; 0x752f
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d9f2      	bls.n	8012b3c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8012b56:	4b12      	ldr	r3, [pc, #72]	; (8012ba0 <SD_write+0xa8>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d102      	bne.n	8012b64 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	75fb      	strb	r3, [r7, #23]
 8012b62:	e017      	b.n	8012b94 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012b64:	4b0e      	ldr	r3, [pc, #56]	; (8012ba0 <SD_write+0xa8>)
 8012b66:	2200      	movs	r2, #0
 8012b68:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012b6a:	f7f8 fcd9 	bl	800b520 <HAL_GetTick>
 8012b6e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012b70:	e007      	b.n	8012b82 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012b72:	f7ff fe99 	bl	80128a8 <BSP_SD_GetCardState>
 8012b76:	4603      	mov	r3, r0
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d102      	bne.n	8012b82 <SD_write+0x8a>
          {
            res = RES_OK;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	75fb      	strb	r3, [r7, #23]
            break;
 8012b80:	e008      	b.n	8012b94 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012b82:	f7f8 fccd 	bl	800b520 <HAL_GetTick>
 8012b86:	4602      	mov	r2, r0
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	1ad3      	subs	r3, r2, r3
 8012b8c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012b90:	4293      	cmp	r3, r2
 8012b92:	d9ee      	bls.n	8012b72 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3718      	adds	r7, #24
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	20045328 	.word	0x20045328

08012ba4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b08c      	sub	sp, #48	; 0x30
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	4603      	mov	r3, r0
 8012bac:	603a      	str	r2, [r7, #0]
 8012bae:	71fb      	strb	r3, [r7, #7]
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012bba:	4b25      	ldr	r3, [pc, #148]	; (8012c50 <SD_ioctl+0xac>)
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	b2db      	uxtb	r3, r3
 8012bc0:	f003 0301 	and.w	r3, r3, #1
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d001      	beq.n	8012bcc <SD_ioctl+0x28>
 8012bc8:	2303      	movs	r3, #3
 8012bca:	e03c      	b.n	8012c46 <SD_ioctl+0xa2>

  switch (cmd)
 8012bcc:	79bb      	ldrb	r3, [r7, #6]
 8012bce:	2b03      	cmp	r3, #3
 8012bd0:	d834      	bhi.n	8012c3c <SD_ioctl+0x98>
 8012bd2:	a201      	add	r2, pc, #4	; (adr r2, 8012bd8 <SD_ioctl+0x34>)
 8012bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bd8:	08012be9 	.word	0x08012be9
 8012bdc:	08012bf1 	.word	0x08012bf1
 8012be0:	08012c09 	.word	0x08012c09
 8012be4:	08012c23 	.word	0x08012c23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012be8:	2300      	movs	r3, #0
 8012bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012bee:	e028      	b.n	8012c42 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012bf0:	f107 030c 	add.w	r3, r7, #12
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7ff fe67 	bl	80128c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012c00:	2300      	movs	r3, #0
 8012c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c06:	e01c      	b.n	8012c42 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012c08:	f107 030c 	add.w	r3, r7, #12
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7ff fe5b 	bl	80128c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c20:	e00f      	b.n	8012c42 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012c22:	f107 030c 	add.w	r3, r7, #12
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7ff fe4e 	bl	80128c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c2e:	0a5a      	lsrs	r2, r3, #9
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012c34:	2300      	movs	r3, #0
 8012c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012c3a:	e002      	b.n	8012c42 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012c3c:	2304      	movs	r3, #4
 8012c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	3730      	adds	r7, #48	; 0x30
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}
 8012c4e:	bf00      	nop
 8012c50:	20000009 	.word	0x20000009

08012c54 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012c54:	b480      	push	{r7}
 8012c56:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012c58:	4b03      	ldr	r3, [pc, #12]	; (8012c68 <BSP_SD_WriteCpltCallback+0x14>)
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	601a      	str	r2, [r3, #0]
}
 8012c5e:	bf00      	nop
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr
 8012c68:	20045328 	.word	0x20045328

08012c6c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012c70:	4b03      	ldr	r3, [pc, #12]	; (8012c80 <BSP_SD_ReadCpltCallback+0x14>)
 8012c72:	2201      	movs	r2, #1
 8012c74:	601a      	str	r2, [r3, #0]
}
 8012c76:	bf00      	nop
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr
 8012c80:	2004532c 	.word	0x2004532c

08012c84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012c8e:	79fb      	ldrb	r3, [r7, #7]
 8012c90:	4a08      	ldr	r2, [pc, #32]	; (8012cb4 <disk_status+0x30>)
 8012c92:	009b      	lsls	r3, r3, #2
 8012c94:	4413      	add	r3, r2
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	79fa      	ldrb	r2, [r7, #7]
 8012c9c:	4905      	ldr	r1, [pc, #20]	; (8012cb4 <disk_status+0x30>)
 8012c9e:	440a      	add	r2, r1
 8012ca0:	7a12      	ldrb	r2, [r2, #8]
 8012ca2:	4610      	mov	r0, r2
 8012ca4:	4798      	blx	r3
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3710      	adds	r7, #16
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	20045358 	.word	0x20045358

08012cb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b084      	sub	sp, #16
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012cc6:	79fb      	ldrb	r3, [r7, #7]
 8012cc8:	4a0d      	ldr	r2, [pc, #52]	; (8012d00 <disk_initialize+0x48>)
 8012cca:	5cd3      	ldrb	r3, [r2, r3]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d111      	bne.n	8012cf4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012cd0:	79fb      	ldrb	r3, [r7, #7]
 8012cd2:	4a0b      	ldr	r2, [pc, #44]	; (8012d00 <disk_initialize+0x48>)
 8012cd4:	2101      	movs	r1, #1
 8012cd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012cd8:	79fb      	ldrb	r3, [r7, #7]
 8012cda:	4a09      	ldr	r2, [pc, #36]	; (8012d00 <disk_initialize+0x48>)
 8012cdc:	009b      	lsls	r3, r3, #2
 8012cde:	4413      	add	r3, r2
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	79fa      	ldrb	r2, [r7, #7]
 8012ce6:	4906      	ldr	r1, [pc, #24]	; (8012d00 <disk_initialize+0x48>)
 8012ce8:	440a      	add	r2, r1
 8012cea:	7a12      	ldrb	r2, [r2, #8]
 8012cec:	4610      	mov	r0, r2
 8012cee:	4798      	blx	r3
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	20045358 	.word	0x20045358

08012d04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012d04:	b590      	push	{r4, r7, lr}
 8012d06:	b087      	sub	sp, #28
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	60b9      	str	r1, [r7, #8]
 8012d0c:	607a      	str	r2, [r7, #4]
 8012d0e:	603b      	str	r3, [r7, #0]
 8012d10:	4603      	mov	r3, r0
 8012d12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012d14:	7bfb      	ldrb	r3, [r7, #15]
 8012d16:	4a0a      	ldr	r2, [pc, #40]	; (8012d40 <disk_read+0x3c>)
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	4413      	add	r3, r2
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	689c      	ldr	r4, [r3, #8]
 8012d20:	7bfb      	ldrb	r3, [r7, #15]
 8012d22:	4a07      	ldr	r2, [pc, #28]	; (8012d40 <disk_read+0x3c>)
 8012d24:	4413      	add	r3, r2
 8012d26:	7a18      	ldrb	r0, [r3, #8]
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	687a      	ldr	r2, [r7, #4]
 8012d2c:	68b9      	ldr	r1, [r7, #8]
 8012d2e:	47a0      	blx	r4
 8012d30:	4603      	mov	r3, r0
 8012d32:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	371c      	adds	r7, #28
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd90      	pop	{r4, r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	20045358 	.word	0x20045358

08012d44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012d44:	b590      	push	{r4, r7, lr}
 8012d46:	b087      	sub	sp, #28
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	60b9      	str	r1, [r7, #8]
 8012d4c:	607a      	str	r2, [r7, #4]
 8012d4e:	603b      	str	r3, [r7, #0]
 8012d50:	4603      	mov	r3, r0
 8012d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012d54:	7bfb      	ldrb	r3, [r7, #15]
 8012d56:	4a0a      	ldr	r2, [pc, #40]	; (8012d80 <disk_write+0x3c>)
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	4413      	add	r3, r2
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	68dc      	ldr	r4, [r3, #12]
 8012d60:	7bfb      	ldrb	r3, [r7, #15]
 8012d62:	4a07      	ldr	r2, [pc, #28]	; (8012d80 <disk_write+0x3c>)
 8012d64:	4413      	add	r3, r2
 8012d66:	7a18      	ldrb	r0, [r3, #8]
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	687a      	ldr	r2, [r7, #4]
 8012d6c:	68b9      	ldr	r1, [r7, #8]
 8012d6e:	47a0      	blx	r4
 8012d70:	4603      	mov	r3, r0
 8012d72:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	371c      	adds	r7, #28
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd90      	pop	{r4, r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	20045358 	.word	0x20045358

08012d84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b084      	sub	sp, #16
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	603a      	str	r2, [r7, #0]
 8012d8e:	71fb      	strb	r3, [r7, #7]
 8012d90:	460b      	mov	r3, r1
 8012d92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012d94:	79fb      	ldrb	r3, [r7, #7]
 8012d96:	4a09      	ldr	r2, [pc, #36]	; (8012dbc <disk_ioctl+0x38>)
 8012d98:	009b      	lsls	r3, r3, #2
 8012d9a:	4413      	add	r3, r2
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	691b      	ldr	r3, [r3, #16]
 8012da0:	79fa      	ldrb	r2, [r7, #7]
 8012da2:	4906      	ldr	r1, [pc, #24]	; (8012dbc <disk_ioctl+0x38>)
 8012da4:	440a      	add	r2, r1
 8012da6:	7a10      	ldrb	r0, [r2, #8]
 8012da8:	79b9      	ldrb	r1, [r7, #6]
 8012daa:	683a      	ldr	r2, [r7, #0]
 8012dac:	4798      	blx	r3
 8012dae:	4603      	mov	r3, r0
 8012db0:	73fb      	strb	r3, [r7, #15]
  return res;
 8012db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3710      	adds	r7, #16
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	20045358 	.word	0x20045358

08012dc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b085      	sub	sp, #20
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	3301      	adds	r3, #1
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012dd0:	89fb      	ldrh	r3, [r7, #14]
 8012dd2:	021b      	lsls	r3, r3, #8
 8012dd4:	b21a      	sxth	r2, r3
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	b21b      	sxth	r3, r3
 8012ddc:	4313      	orrs	r3, r2
 8012dde:	b21b      	sxth	r3, r3
 8012de0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012de2:	89fb      	ldrh	r3, [r7, #14]
}
 8012de4:	4618      	mov	r0, r3
 8012de6:	3714      	adds	r7, #20
 8012de8:	46bd      	mov	sp, r7
 8012dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dee:	4770      	bx	lr

08012df0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012df0:	b480      	push	{r7}
 8012df2:	b085      	sub	sp, #20
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	3303      	adds	r3, #3
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	021b      	lsls	r3, r3, #8
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	3202      	adds	r2, #2
 8012e08:	7812      	ldrb	r2, [r2, #0]
 8012e0a:	4313      	orrs	r3, r2
 8012e0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	021b      	lsls	r3, r3, #8
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	3201      	adds	r2, #1
 8012e16:	7812      	ldrb	r2, [r2, #0]
 8012e18:	4313      	orrs	r3, r2
 8012e1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	021b      	lsls	r3, r3, #8
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	7812      	ldrb	r2, [r2, #0]
 8012e24:	4313      	orrs	r3, r2
 8012e26:	60fb      	str	r3, [r7, #12]
	return rv;
 8012e28:	68fb      	ldr	r3, [r7, #12]
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3714      	adds	r7, #20
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e34:	4770      	bx	lr

08012e36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012e36:	b480      	push	{r7}
 8012e38:	b083      	sub	sp, #12
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
 8012e3e:	460b      	mov	r3, r1
 8012e40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	1c5a      	adds	r2, r3, #1
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	887a      	ldrh	r2, [r7, #2]
 8012e4a:	b2d2      	uxtb	r2, r2
 8012e4c:	701a      	strb	r2, [r3, #0]
 8012e4e:	887b      	ldrh	r3, [r7, #2]
 8012e50:	0a1b      	lsrs	r3, r3, #8
 8012e52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	1c5a      	adds	r2, r3, #1
 8012e58:	607a      	str	r2, [r7, #4]
 8012e5a:	887a      	ldrh	r2, [r7, #2]
 8012e5c:	b2d2      	uxtb	r2, r2
 8012e5e:	701a      	strb	r2, [r3, #0]
}
 8012e60:	bf00      	nop
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	1c5a      	adds	r2, r3, #1
 8012e7a:	607a      	str	r2, [r7, #4]
 8012e7c:	683a      	ldr	r2, [r7, #0]
 8012e7e:	b2d2      	uxtb	r2, r2
 8012e80:	701a      	strb	r2, [r3, #0]
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	0a1b      	lsrs	r3, r3, #8
 8012e86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	1c5a      	adds	r2, r3, #1
 8012e8c:	607a      	str	r2, [r7, #4]
 8012e8e:	683a      	ldr	r2, [r7, #0]
 8012e90:	b2d2      	uxtb	r2, r2
 8012e92:	701a      	strb	r2, [r3, #0]
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	0a1b      	lsrs	r3, r3, #8
 8012e98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	1c5a      	adds	r2, r3, #1
 8012e9e:	607a      	str	r2, [r7, #4]
 8012ea0:	683a      	ldr	r2, [r7, #0]
 8012ea2:	b2d2      	uxtb	r2, r2
 8012ea4:	701a      	strb	r2, [r3, #0]
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	0a1b      	lsrs	r3, r3, #8
 8012eaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	1c5a      	adds	r2, r3, #1
 8012eb0:	607a      	str	r2, [r7, #4]
 8012eb2:	683a      	ldr	r2, [r7, #0]
 8012eb4:	b2d2      	uxtb	r2, r2
 8012eb6:	701a      	strb	r2, [r3, #0]
}
 8012eb8:	bf00      	nop
 8012eba:	370c      	adds	r7, #12
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr

08012ec4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012ec4:	b480      	push	{r7}
 8012ec6:	b087      	sub	sp, #28
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	60f8      	str	r0, [r7, #12]
 8012ecc:	60b9      	str	r1, [r7, #8]
 8012ece:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d00d      	beq.n	8012efa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012ede:	693a      	ldr	r2, [r7, #16]
 8012ee0:	1c53      	adds	r3, r2, #1
 8012ee2:	613b      	str	r3, [r7, #16]
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	1c59      	adds	r1, r3, #1
 8012ee8:	6179      	str	r1, [r7, #20]
 8012eea:	7812      	ldrb	r2, [r2, #0]
 8012eec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	3b01      	subs	r3, #1
 8012ef2:	607b      	str	r3, [r7, #4]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d1f1      	bne.n	8012ede <mem_cpy+0x1a>
	}
}
 8012efa:	bf00      	nop
 8012efc:	371c      	adds	r7, #28
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr

08012f06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012f06:	b480      	push	{r7}
 8012f08:	b087      	sub	sp, #28
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	60f8      	str	r0, [r7, #12]
 8012f0e:	60b9      	str	r1, [r7, #8]
 8012f10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	1c5a      	adds	r2, r3, #1
 8012f1a:	617a      	str	r2, [r7, #20]
 8012f1c:	68ba      	ldr	r2, [r7, #8]
 8012f1e:	b2d2      	uxtb	r2, r2
 8012f20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	3b01      	subs	r3, #1
 8012f26:	607b      	str	r3, [r7, #4]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d1f3      	bne.n	8012f16 <mem_set+0x10>
}
 8012f2e:	bf00      	nop
 8012f30:	371c      	adds	r7, #28
 8012f32:	46bd      	mov	sp, r7
 8012f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f38:	4770      	bx	lr

08012f3a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012f3a:	b480      	push	{r7}
 8012f3c:	b089      	sub	sp, #36	; 0x24
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	60f8      	str	r0, [r7, #12]
 8012f42:	60b9      	str	r1, [r7, #8]
 8012f44:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	61fb      	str	r3, [r7, #28]
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	1c5a      	adds	r2, r3, #1
 8012f56:	61fa      	str	r2, [r7, #28]
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	69bb      	ldr	r3, [r7, #24]
 8012f5e:	1c5a      	adds	r2, r3, #1
 8012f60:	61ba      	str	r2, [r7, #24]
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	1acb      	subs	r3, r1, r3
 8012f66:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	3b01      	subs	r3, #1
 8012f6c:	607b      	str	r3, [r7, #4]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d002      	beq.n	8012f7a <mem_cmp+0x40>
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d0eb      	beq.n	8012f52 <mem_cmp+0x18>

	return r;
 8012f7a:	697b      	ldr	r3, [r7, #20]
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3724      	adds	r7, #36	; 0x24
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr

08012f88 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012f88:	b480      	push	{r7}
 8012f8a:	b083      	sub	sp, #12
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012f92:	e002      	b.n	8012f9a <chk_chr+0x12>
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	3301      	adds	r3, #1
 8012f98:	607b      	str	r3, [r7, #4]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d005      	beq.n	8012fae <chk_chr+0x26>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	4293      	cmp	r3, r2
 8012fac:	d1f2      	bne.n	8012f94 <chk_chr+0xc>
	return *str;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	370c      	adds	r7, #12
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
	...

08012fc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012fc0:	b480      	push	{r7}
 8012fc2:	b085      	sub	sp, #20
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012fca:	2300      	movs	r3, #0
 8012fcc:	60bb      	str	r3, [r7, #8]
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	60fb      	str	r3, [r7, #12]
 8012fd2:	e029      	b.n	8013028 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012fd4:	4a27      	ldr	r2, [pc, #156]	; (8013074 <chk_lock+0xb4>)
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	011b      	lsls	r3, r3, #4
 8012fda:	4413      	add	r3, r2
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d01d      	beq.n	801301e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012fe2:	4a24      	ldr	r2, [pc, #144]	; (8013074 <chk_lock+0xb4>)
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	011b      	lsls	r3, r3, #4
 8012fe8:	4413      	add	r3, r2
 8012fea:	681a      	ldr	r2, [r3, #0]
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d116      	bne.n	8013022 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012ff4:	4a1f      	ldr	r2, [pc, #124]	; (8013074 <chk_lock+0xb4>)
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	011b      	lsls	r3, r3, #4
 8012ffa:	4413      	add	r3, r2
 8012ffc:	3304      	adds	r3, #4
 8012ffe:	681a      	ldr	r2, [r3, #0]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013004:	429a      	cmp	r2, r3
 8013006:	d10c      	bne.n	8013022 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013008:	4a1a      	ldr	r2, [pc, #104]	; (8013074 <chk_lock+0xb4>)
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	011b      	lsls	r3, r3, #4
 801300e:	4413      	add	r3, r2
 8013010:	3308      	adds	r3, #8
 8013012:	681a      	ldr	r2, [r3, #0]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013018:	429a      	cmp	r2, r3
 801301a:	d102      	bne.n	8013022 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801301c:	e007      	b.n	801302e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801301e:	2301      	movs	r3, #1
 8013020:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	3301      	adds	r3, #1
 8013026:	60fb      	str	r3, [r7, #12]
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	2b01      	cmp	r3, #1
 801302c:	d9d2      	bls.n	8012fd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	2b02      	cmp	r3, #2
 8013032:	d109      	bne.n	8013048 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d102      	bne.n	8013040 <chk_lock+0x80>
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	2b02      	cmp	r3, #2
 801303e:	d101      	bne.n	8013044 <chk_lock+0x84>
 8013040:	2300      	movs	r3, #0
 8013042:	e010      	b.n	8013066 <chk_lock+0xa6>
 8013044:	2312      	movs	r3, #18
 8013046:	e00e      	b.n	8013066 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d108      	bne.n	8013060 <chk_lock+0xa0>
 801304e:	4a09      	ldr	r2, [pc, #36]	; (8013074 <chk_lock+0xb4>)
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	011b      	lsls	r3, r3, #4
 8013054:	4413      	add	r3, r2
 8013056:	330c      	adds	r3, #12
 8013058:	881b      	ldrh	r3, [r3, #0]
 801305a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801305e:	d101      	bne.n	8013064 <chk_lock+0xa4>
 8013060:	2310      	movs	r3, #16
 8013062:	e000      	b.n	8013066 <chk_lock+0xa6>
 8013064:	2300      	movs	r3, #0
}
 8013066:	4618      	mov	r0, r3
 8013068:	3714      	adds	r7, #20
 801306a:	46bd      	mov	sp, r7
 801306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013070:	4770      	bx	lr
 8013072:	bf00      	nop
 8013074:	20045338 	.word	0x20045338

08013078 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013078:	b480      	push	{r7}
 801307a:	b083      	sub	sp, #12
 801307c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801307e:	2300      	movs	r3, #0
 8013080:	607b      	str	r3, [r7, #4]
 8013082:	e002      	b.n	801308a <enq_lock+0x12>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	3301      	adds	r3, #1
 8013088:	607b      	str	r3, [r7, #4]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	2b01      	cmp	r3, #1
 801308e:	d806      	bhi.n	801309e <enq_lock+0x26>
 8013090:	4a09      	ldr	r2, [pc, #36]	; (80130b8 <enq_lock+0x40>)
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	011b      	lsls	r3, r3, #4
 8013096:	4413      	add	r3, r2
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d1f2      	bne.n	8013084 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	2b02      	cmp	r3, #2
 80130a2:	bf14      	ite	ne
 80130a4:	2301      	movne	r3, #1
 80130a6:	2300      	moveq	r3, #0
 80130a8:	b2db      	uxtb	r3, r3
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	370c      	adds	r7, #12
 80130ae:	46bd      	mov	sp, r7
 80130b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b4:	4770      	bx	lr
 80130b6:	bf00      	nop
 80130b8:	20045338 	.word	0x20045338

080130bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80130bc:	b480      	push	{r7}
 80130be:	b085      	sub	sp, #20
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
 80130c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80130c6:	2300      	movs	r3, #0
 80130c8:	60fb      	str	r3, [r7, #12]
 80130ca:	e01f      	b.n	801310c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80130cc:	4a41      	ldr	r2, [pc, #260]	; (80131d4 <inc_lock+0x118>)
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	011b      	lsls	r3, r3, #4
 80130d2:	4413      	add	r3, r2
 80130d4:	681a      	ldr	r2, [r3, #0]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d113      	bne.n	8013106 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80130de:	4a3d      	ldr	r2, [pc, #244]	; (80131d4 <inc_lock+0x118>)
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	011b      	lsls	r3, r3, #4
 80130e4:	4413      	add	r3, r2
 80130e6:	3304      	adds	r3, #4
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d109      	bne.n	8013106 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80130f2:	4a38      	ldr	r2, [pc, #224]	; (80131d4 <inc_lock+0x118>)
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	011b      	lsls	r3, r3, #4
 80130f8:	4413      	add	r3, r2
 80130fa:	3308      	adds	r3, #8
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013102:	429a      	cmp	r2, r3
 8013104:	d006      	beq.n	8013114 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	3301      	adds	r3, #1
 801310a:	60fb      	str	r3, [r7, #12]
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	2b01      	cmp	r3, #1
 8013110:	d9dc      	bls.n	80130cc <inc_lock+0x10>
 8013112:	e000      	b.n	8013116 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013114:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2b02      	cmp	r3, #2
 801311a:	d132      	bne.n	8013182 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801311c:	2300      	movs	r3, #0
 801311e:	60fb      	str	r3, [r7, #12]
 8013120:	e002      	b.n	8013128 <inc_lock+0x6c>
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	3301      	adds	r3, #1
 8013126:	60fb      	str	r3, [r7, #12]
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	2b01      	cmp	r3, #1
 801312c:	d806      	bhi.n	801313c <inc_lock+0x80>
 801312e:	4a29      	ldr	r2, [pc, #164]	; (80131d4 <inc_lock+0x118>)
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	011b      	lsls	r3, r3, #4
 8013134:	4413      	add	r3, r2
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d1f2      	bne.n	8013122 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	2b02      	cmp	r3, #2
 8013140:	d101      	bne.n	8013146 <inc_lock+0x8a>
 8013142:	2300      	movs	r3, #0
 8013144:	e040      	b.n	80131c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	4922      	ldr	r1, [pc, #136]	; (80131d4 <inc_lock+0x118>)
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	011b      	lsls	r3, r3, #4
 8013150:	440b      	add	r3, r1
 8013152:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	689a      	ldr	r2, [r3, #8]
 8013158:	491e      	ldr	r1, [pc, #120]	; (80131d4 <inc_lock+0x118>)
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	011b      	lsls	r3, r3, #4
 801315e:	440b      	add	r3, r1
 8013160:	3304      	adds	r3, #4
 8013162:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	695a      	ldr	r2, [r3, #20]
 8013168:	491a      	ldr	r1, [pc, #104]	; (80131d4 <inc_lock+0x118>)
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	011b      	lsls	r3, r3, #4
 801316e:	440b      	add	r3, r1
 8013170:	3308      	adds	r3, #8
 8013172:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013174:	4a17      	ldr	r2, [pc, #92]	; (80131d4 <inc_lock+0x118>)
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	011b      	lsls	r3, r3, #4
 801317a:	4413      	add	r3, r2
 801317c:	330c      	adds	r3, #12
 801317e:	2200      	movs	r2, #0
 8013180:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d009      	beq.n	801319c <inc_lock+0xe0>
 8013188:	4a12      	ldr	r2, [pc, #72]	; (80131d4 <inc_lock+0x118>)
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	011b      	lsls	r3, r3, #4
 801318e:	4413      	add	r3, r2
 8013190:	330c      	adds	r3, #12
 8013192:	881b      	ldrh	r3, [r3, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d001      	beq.n	801319c <inc_lock+0xe0>
 8013198:	2300      	movs	r3, #0
 801319a:	e015      	b.n	80131c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d108      	bne.n	80131b4 <inc_lock+0xf8>
 80131a2:	4a0c      	ldr	r2, [pc, #48]	; (80131d4 <inc_lock+0x118>)
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	011b      	lsls	r3, r3, #4
 80131a8:	4413      	add	r3, r2
 80131aa:	330c      	adds	r3, #12
 80131ac:	881b      	ldrh	r3, [r3, #0]
 80131ae:	3301      	adds	r3, #1
 80131b0:	b29a      	uxth	r2, r3
 80131b2:	e001      	b.n	80131b8 <inc_lock+0xfc>
 80131b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80131b8:	4906      	ldr	r1, [pc, #24]	; (80131d4 <inc_lock+0x118>)
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	011b      	lsls	r3, r3, #4
 80131be:	440b      	add	r3, r1
 80131c0:	330c      	adds	r3, #12
 80131c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	3301      	adds	r3, #1
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3714      	adds	r7, #20
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr
 80131d4:	20045338 	.word	0x20045338

080131d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80131d8:	b480      	push	{r7}
 80131da:	b085      	sub	sp, #20
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	3b01      	subs	r3, #1
 80131e4:	607b      	str	r3, [r7, #4]
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2b01      	cmp	r3, #1
 80131ea:	d825      	bhi.n	8013238 <dec_lock+0x60>
		n = Files[i].ctr;
 80131ec:	4a17      	ldr	r2, [pc, #92]	; (801324c <dec_lock+0x74>)
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	011b      	lsls	r3, r3, #4
 80131f2:	4413      	add	r3, r2
 80131f4:	330c      	adds	r3, #12
 80131f6:	881b      	ldrh	r3, [r3, #0]
 80131f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80131fa:	89fb      	ldrh	r3, [r7, #14]
 80131fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013200:	d101      	bne.n	8013206 <dec_lock+0x2e>
 8013202:	2300      	movs	r3, #0
 8013204:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013206:	89fb      	ldrh	r3, [r7, #14]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d002      	beq.n	8013212 <dec_lock+0x3a>
 801320c:	89fb      	ldrh	r3, [r7, #14]
 801320e:	3b01      	subs	r3, #1
 8013210:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013212:	4a0e      	ldr	r2, [pc, #56]	; (801324c <dec_lock+0x74>)
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	011b      	lsls	r3, r3, #4
 8013218:	4413      	add	r3, r2
 801321a:	330c      	adds	r3, #12
 801321c:	89fa      	ldrh	r2, [r7, #14]
 801321e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013220:	89fb      	ldrh	r3, [r7, #14]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d105      	bne.n	8013232 <dec_lock+0x5a>
 8013226:	4a09      	ldr	r2, [pc, #36]	; (801324c <dec_lock+0x74>)
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	011b      	lsls	r3, r3, #4
 801322c:	4413      	add	r3, r2
 801322e:	2200      	movs	r2, #0
 8013230:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013232:	2300      	movs	r3, #0
 8013234:	737b      	strb	r3, [r7, #13]
 8013236:	e001      	b.n	801323c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013238:	2302      	movs	r3, #2
 801323a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801323c:	7b7b      	ldrb	r3, [r7, #13]
}
 801323e:	4618      	mov	r0, r3
 8013240:	3714      	adds	r7, #20
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr
 801324a:	bf00      	nop
 801324c:	20045338 	.word	0x20045338

08013250 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013250:	b480      	push	{r7}
 8013252:	b085      	sub	sp, #20
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013258:	2300      	movs	r3, #0
 801325a:	60fb      	str	r3, [r7, #12]
 801325c:	e010      	b.n	8013280 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801325e:	4a0d      	ldr	r2, [pc, #52]	; (8013294 <clear_lock+0x44>)
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	011b      	lsls	r3, r3, #4
 8013264:	4413      	add	r3, r2
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	429a      	cmp	r2, r3
 801326c:	d105      	bne.n	801327a <clear_lock+0x2a>
 801326e:	4a09      	ldr	r2, [pc, #36]	; (8013294 <clear_lock+0x44>)
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	011b      	lsls	r3, r3, #4
 8013274:	4413      	add	r3, r2
 8013276:	2200      	movs	r2, #0
 8013278:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	3301      	adds	r3, #1
 801327e:	60fb      	str	r3, [r7, #12]
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	2b01      	cmp	r3, #1
 8013284:	d9eb      	bls.n	801325e <clear_lock+0xe>
	}
}
 8013286:	bf00      	nop
 8013288:	3714      	adds	r7, #20
 801328a:	46bd      	mov	sp, r7
 801328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013290:	4770      	bx	lr
 8013292:	bf00      	nop
 8013294:	20045338 	.word	0x20045338

08013298 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b086      	sub	sp, #24
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80132a0:	2300      	movs	r3, #0
 80132a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	78db      	ldrb	r3, [r3, #3]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d034      	beq.n	8013316 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	7858      	ldrb	r0, [r3, #1]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80132bc:	2301      	movs	r3, #1
 80132be:	697a      	ldr	r2, [r7, #20]
 80132c0:	f7ff fd40 	bl	8012d44 <disk_write>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d002      	beq.n	80132d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80132ca:	2301      	movs	r3, #1
 80132cc:	73fb      	strb	r3, [r7, #15]
 80132ce:	e022      	b.n	8013316 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2200      	movs	r2, #0
 80132d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132da:	697a      	ldr	r2, [r7, #20]
 80132dc:	1ad2      	subs	r2, r2, r3
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	6a1b      	ldr	r3, [r3, #32]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d217      	bcs.n	8013316 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	789b      	ldrb	r3, [r3, #2]
 80132ea:	613b      	str	r3, [r7, #16]
 80132ec:	e010      	b.n	8013310 <sync_window+0x78>
					wsect += fs->fsize;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6a1b      	ldr	r3, [r3, #32]
 80132f2:	697a      	ldr	r2, [r7, #20]
 80132f4:	4413      	add	r3, r2
 80132f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	7858      	ldrb	r0, [r3, #1]
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013302:	2301      	movs	r3, #1
 8013304:	697a      	ldr	r2, [r7, #20]
 8013306:	f7ff fd1d 	bl	8012d44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	3b01      	subs	r3, #1
 801330e:	613b      	str	r3, [r7, #16]
 8013310:	693b      	ldr	r3, [r7, #16]
 8013312:	2b01      	cmp	r3, #1
 8013314:	d8eb      	bhi.n	80132ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013316:	7bfb      	ldrb	r3, [r7, #15]
}
 8013318:	4618      	mov	r0, r3
 801331a:	3718      	adds	r7, #24
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b084      	sub	sp, #16
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801332a:	2300      	movs	r3, #0
 801332c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013332:	683a      	ldr	r2, [r7, #0]
 8013334:	429a      	cmp	r2, r3
 8013336:	d01b      	beq.n	8013370 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f7ff ffad 	bl	8013298 <sync_window>
 801333e:	4603      	mov	r3, r0
 8013340:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013342:	7bfb      	ldrb	r3, [r7, #15]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d113      	bne.n	8013370 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	7858      	ldrb	r0, [r3, #1]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013352:	2301      	movs	r3, #1
 8013354:	683a      	ldr	r2, [r7, #0]
 8013356:	f7ff fcd5 	bl	8012d04 <disk_read>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d004      	beq.n	801336a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013360:	f04f 33ff 	mov.w	r3, #4294967295
 8013364:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013366:	2301      	movs	r3, #1
 8013368:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	683a      	ldr	r2, [r7, #0]
 801336e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8013370:	7bfb      	ldrb	r3, [r7, #15]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
	...

0801337c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7ff ff87 	bl	8013298 <sync_window>
 801338a:	4603      	mov	r3, r0
 801338c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801338e:	7bfb      	ldrb	r3, [r7, #15]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d159      	bne.n	8013448 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	781b      	ldrb	r3, [r3, #0]
 8013398:	2b03      	cmp	r3, #3
 801339a:	d149      	bne.n	8013430 <sync_fs+0xb4>
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	791b      	ldrb	r3, [r3, #4]
 80133a0:	2b01      	cmp	r3, #1
 80133a2:	d145      	bne.n	8013430 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	899b      	ldrh	r3, [r3, #12]
 80133ae:	461a      	mov	r2, r3
 80133b0:	2100      	movs	r1, #0
 80133b2:	f7ff fda8 	bl	8012f06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	3338      	adds	r3, #56	; 0x38
 80133ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80133be:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7ff fd37 	bl	8012e36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	3338      	adds	r3, #56	; 0x38
 80133cc:	4921      	ldr	r1, [pc, #132]	; (8013454 <sync_fs+0xd8>)
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7ff fd4c 	bl	8012e6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	3338      	adds	r3, #56	; 0x38
 80133d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80133dc:	491e      	ldr	r1, [pc, #120]	; (8013458 <sync_fs+0xdc>)
 80133de:	4618      	mov	r0, r3
 80133e0:	f7ff fd44 	bl	8012e6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	3338      	adds	r3, #56	; 0x38
 80133e8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	695b      	ldr	r3, [r3, #20]
 80133f0:	4619      	mov	r1, r3
 80133f2:	4610      	mov	r0, r2
 80133f4:	f7ff fd3a 	bl	8012e6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	3338      	adds	r3, #56	; 0x38
 80133fc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	691b      	ldr	r3, [r3, #16]
 8013404:	4619      	mov	r1, r3
 8013406:	4610      	mov	r0, r2
 8013408:	f7ff fd30 	bl	8012e6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013410:	1c5a      	adds	r2, r3, #1
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	7858      	ldrb	r0, [r3, #1]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013424:	2301      	movs	r3, #1
 8013426:	f7ff fc8d 	bl	8012d44 <disk_write>
			fs->fsi_flag = 0;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	2200      	movs	r2, #0
 801342e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	785b      	ldrb	r3, [r3, #1]
 8013434:	2200      	movs	r2, #0
 8013436:	2100      	movs	r1, #0
 8013438:	4618      	mov	r0, r3
 801343a:	f7ff fca3 	bl	8012d84 <disk_ioctl>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d001      	beq.n	8013448 <sync_fs+0xcc>
 8013444:	2301      	movs	r3, #1
 8013446:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013448:	7bfb      	ldrb	r3, [r7, #15]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	41615252 	.word	0x41615252
 8013458:	61417272 	.word	0x61417272

0801345c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801345c:	b480      	push	{r7}
 801345e:	b083      	sub	sp, #12
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	3b02      	subs	r3, #2
 801346a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	69db      	ldr	r3, [r3, #28]
 8013470:	3b02      	subs	r3, #2
 8013472:	683a      	ldr	r2, [r7, #0]
 8013474:	429a      	cmp	r2, r3
 8013476:	d301      	bcc.n	801347c <clust2sect+0x20>
 8013478:	2300      	movs	r3, #0
 801347a:	e008      	b.n	801348e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	895b      	ldrh	r3, [r3, #10]
 8013480:	461a      	mov	r2, r3
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	fb03 f202 	mul.w	r2, r3, r2
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801348c:	4413      	add	r3, r2
}
 801348e:	4618      	mov	r0, r3
 8013490:	370c      	adds	r7, #12
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr

0801349a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801349a:	b580      	push	{r7, lr}
 801349c:	b086      	sub	sp, #24
 801349e:	af00      	add	r7, sp, #0
 80134a0:	6078      	str	r0, [r7, #4]
 80134a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	2b01      	cmp	r3, #1
 80134ae:	d904      	bls.n	80134ba <get_fat+0x20>
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	69db      	ldr	r3, [r3, #28]
 80134b4:	683a      	ldr	r2, [r7, #0]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d302      	bcc.n	80134c0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80134ba:	2301      	movs	r3, #1
 80134bc:	617b      	str	r3, [r7, #20]
 80134be:	e0b7      	b.n	8013630 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80134c0:	f04f 33ff 	mov.w	r3, #4294967295
 80134c4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	781b      	ldrb	r3, [r3, #0]
 80134ca:	2b02      	cmp	r3, #2
 80134cc:	d05a      	beq.n	8013584 <get_fat+0xea>
 80134ce:	2b03      	cmp	r3, #3
 80134d0:	d07d      	beq.n	80135ce <get_fat+0x134>
 80134d2:	2b01      	cmp	r3, #1
 80134d4:	f040 80a2 	bne.w	801361c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	60fb      	str	r3, [r7, #12]
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	085b      	lsrs	r3, r3, #1
 80134e0:	68fa      	ldr	r2, [r7, #12]
 80134e2:	4413      	add	r3, r2
 80134e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	899b      	ldrh	r3, [r3, #12]
 80134ee:	4619      	mov	r1, r3
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80134f6:	4413      	add	r3, r2
 80134f8:	4619      	mov	r1, r3
 80134fa:	6938      	ldr	r0, [r7, #16]
 80134fc:	f7ff ff10 	bl	8013320 <move_window>
 8013500:	4603      	mov	r3, r0
 8013502:	2b00      	cmp	r3, #0
 8013504:	f040 808d 	bne.w	8013622 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	1c5a      	adds	r2, r3, #1
 801350c:	60fa      	str	r2, [r7, #12]
 801350e:	693a      	ldr	r2, [r7, #16]
 8013510:	8992      	ldrh	r2, [r2, #12]
 8013512:	fbb3 f1f2 	udiv	r1, r3, r2
 8013516:	fb02 f201 	mul.w	r2, r2, r1
 801351a:	1a9b      	subs	r3, r3, r2
 801351c:	693a      	ldr	r2, [r7, #16]
 801351e:	4413      	add	r3, r2
 8013520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013524:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	899b      	ldrh	r3, [r3, #12]
 801352e:	4619      	mov	r1, r3
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	fbb3 f3f1 	udiv	r3, r3, r1
 8013536:	4413      	add	r3, r2
 8013538:	4619      	mov	r1, r3
 801353a:	6938      	ldr	r0, [r7, #16]
 801353c:	f7ff fef0 	bl	8013320 <move_window>
 8013540:	4603      	mov	r3, r0
 8013542:	2b00      	cmp	r3, #0
 8013544:	d16f      	bne.n	8013626 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	899b      	ldrh	r3, [r3, #12]
 801354a:	461a      	mov	r2, r3
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013552:	fb02 f201 	mul.w	r2, r2, r1
 8013556:	1a9b      	subs	r3, r3, r2
 8013558:	693a      	ldr	r2, [r7, #16]
 801355a:	4413      	add	r3, r2
 801355c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013560:	021b      	lsls	r3, r3, #8
 8013562:	461a      	mov	r2, r3
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	4313      	orrs	r3, r2
 8013568:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	f003 0301 	and.w	r3, r3, #1
 8013570:	2b00      	cmp	r3, #0
 8013572:	d002      	beq.n	801357a <get_fat+0xe0>
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	091b      	lsrs	r3, r3, #4
 8013578:	e002      	b.n	8013580 <get_fat+0xe6>
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013580:	617b      	str	r3, [r7, #20]
			break;
 8013582:	e055      	b.n	8013630 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	899b      	ldrh	r3, [r3, #12]
 801358c:	085b      	lsrs	r3, r3, #1
 801358e:	b29b      	uxth	r3, r3
 8013590:	4619      	mov	r1, r3
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	fbb3 f3f1 	udiv	r3, r3, r1
 8013598:	4413      	add	r3, r2
 801359a:	4619      	mov	r1, r3
 801359c:	6938      	ldr	r0, [r7, #16]
 801359e:	f7ff febf 	bl	8013320 <move_window>
 80135a2:	4603      	mov	r3, r0
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d140      	bne.n	801362a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	005b      	lsls	r3, r3, #1
 80135b2:	693a      	ldr	r2, [r7, #16]
 80135b4:	8992      	ldrh	r2, [r2, #12]
 80135b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80135ba:	fb02 f200 	mul.w	r2, r2, r0
 80135be:	1a9b      	subs	r3, r3, r2
 80135c0:	440b      	add	r3, r1
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7ff fbfc 	bl	8012dc0 <ld_word>
 80135c8:	4603      	mov	r3, r0
 80135ca:	617b      	str	r3, [r7, #20]
			break;
 80135cc:	e030      	b.n	8013630 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	899b      	ldrh	r3, [r3, #12]
 80135d6:	089b      	lsrs	r3, r3, #2
 80135d8:	b29b      	uxth	r3, r3
 80135da:	4619      	mov	r1, r3
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	fbb3 f3f1 	udiv	r3, r3, r1
 80135e2:	4413      	add	r3, r2
 80135e4:	4619      	mov	r1, r3
 80135e6:	6938      	ldr	r0, [r7, #16]
 80135e8:	f7ff fe9a 	bl	8013320 <move_window>
 80135ec:	4603      	mov	r3, r0
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d11d      	bne.n	801362e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	009b      	lsls	r3, r3, #2
 80135fc:	693a      	ldr	r2, [r7, #16]
 80135fe:	8992      	ldrh	r2, [r2, #12]
 8013600:	fbb3 f0f2 	udiv	r0, r3, r2
 8013604:	fb02 f200 	mul.w	r2, r2, r0
 8013608:	1a9b      	subs	r3, r3, r2
 801360a:	440b      	add	r3, r1
 801360c:	4618      	mov	r0, r3
 801360e:	f7ff fbef 	bl	8012df0 <ld_dword>
 8013612:	4603      	mov	r3, r0
 8013614:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013618:	617b      	str	r3, [r7, #20]
			break;
 801361a:	e009      	b.n	8013630 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801361c:	2301      	movs	r3, #1
 801361e:	617b      	str	r3, [r7, #20]
 8013620:	e006      	b.n	8013630 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013622:	bf00      	nop
 8013624:	e004      	b.n	8013630 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013626:	bf00      	nop
 8013628:	e002      	b.n	8013630 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801362a:	bf00      	nop
 801362c:	e000      	b.n	8013630 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801362e:	bf00      	nop
		}
	}

	return val;
 8013630:	697b      	ldr	r3, [r7, #20]
}
 8013632:	4618      	mov	r0, r3
 8013634:	3718      	adds	r7, #24
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}

0801363a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801363a:	b590      	push	{r4, r7, lr}
 801363c:	b089      	sub	sp, #36	; 0x24
 801363e:	af00      	add	r7, sp, #0
 8013640:	60f8      	str	r0, [r7, #12]
 8013642:	60b9      	str	r1, [r7, #8]
 8013644:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013646:	2302      	movs	r3, #2
 8013648:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	2b01      	cmp	r3, #1
 801364e:	f240 8106 	bls.w	801385e <put_fat+0x224>
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	69db      	ldr	r3, [r3, #28]
 8013656:	68ba      	ldr	r2, [r7, #8]
 8013658:	429a      	cmp	r2, r3
 801365a:	f080 8100 	bcs.w	801385e <put_fat+0x224>
		switch (fs->fs_type) {
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	2b02      	cmp	r3, #2
 8013664:	f000 8088 	beq.w	8013778 <put_fat+0x13e>
 8013668:	2b03      	cmp	r3, #3
 801366a:	f000 80b0 	beq.w	80137ce <put_fat+0x194>
 801366e:	2b01      	cmp	r3, #1
 8013670:	f040 80f5 	bne.w	801385e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	61bb      	str	r3, [r7, #24]
 8013678:	69bb      	ldr	r3, [r7, #24]
 801367a:	085b      	lsrs	r3, r3, #1
 801367c:	69ba      	ldr	r2, [r7, #24]
 801367e:	4413      	add	r3, r2
 8013680:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	899b      	ldrh	r3, [r3, #12]
 801368a:	4619      	mov	r1, r3
 801368c:	69bb      	ldr	r3, [r7, #24]
 801368e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013692:	4413      	add	r3, r2
 8013694:	4619      	mov	r1, r3
 8013696:	68f8      	ldr	r0, [r7, #12]
 8013698:	f7ff fe42 	bl	8013320 <move_window>
 801369c:	4603      	mov	r3, r0
 801369e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80136a0:	7ffb      	ldrb	r3, [r7, #31]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	f040 80d4 	bne.w	8013850 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80136ae:	69bb      	ldr	r3, [r7, #24]
 80136b0:	1c5a      	adds	r2, r3, #1
 80136b2:	61ba      	str	r2, [r7, #24]
 80136b4:	68fa      	ldr	r2, [r7, #12]
 80136b6:	8992      	ldrh	r2, [r2, #12]
 80136b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80136bc:	fb02 f200 	mul.w	r2, r2, r0
 80136c0:	1a9b      	subs	r3, r3, r2
 80136c2:	440b      	add	r3, r1
 80136c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	f003 0301 	and.w	r3, r3, #1
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d00d      	beq.n	80136ec <put_fat+0xb2>
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	781b      	ldrb	r3, [r3, #0]
 80136d4:	b25b      	sxtb	r3, r3
 80136d6:	f003 030f 	and.w	r3, r3, #15
 80136da:	b25a      	sxtb	r2, r3
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	b2db      	uxtb	r3, r3
 80136e0:	011b      	lsls	r3, r3, #4
 80136e2:	b25b      	sxtb	r3, r3
 80136e4:	4313      	orrs	r3, r2
 80136e6:	b25b      	sxtb	r3, r3
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	e001      	b.n	80136f0 <put_fat+0xb6>
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	b2db      	uxtb	r3, r3
 80136f0:	697a      	ldr	r2, [r7, #20]
 80136f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	2201      	movs	r2, #1
 80136f8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	899b      	ldrh	r3, [r3, #12]
 8013702:	4619      	mov	r1, r3
 8013704:	69bb      	ldr	r3, [r7, #24]
 8013706:	fbb3 f3f1 	udiv	r3, r3, r1
 801370a:	4413      	add	r3, r2
 801370c:	4619      	mov	r1, r3
 801370e:	68f8      	ldr	r0, [r7, #12]
 8013710:	f7ff fe06 	bl	8013320 <move_window>
 8013714:	4603      	mov	r3, r0
 8013716:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013718:	7ffb      	ldrb	r3, [r7, #31]
 801371a:	2b00      	cmp	r3, #0
 801371c:	f040 809a 	bne.w	8013854 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	899b      	ldrh	r3, [r3, #12]
 801372a:	461a      	mov	r2, r3
 801372c:	69bb      	ldr	r3, [r7, #24]
 801372e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013732:	fb02 f200 	mul.w	r2, r2, r0
 8013736:	1a9b      	subs	r3, r3, r2
 8013738:	440b      	add	r3, r1
 801373a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	f003 0301 	and.w	r3, r3, #1
 8013742:	2b00      	cmp	r3, #0
 8013744:	d003      	beq.n	801374e <put_fat+0x114>
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	091b      	lsrs	r3, r3, #4
 801374a:	b2db      	uxtb	r3, r3
 801374c:	e00e      	b.n	801376c <put_fat+0x132>
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	b25b      	sxtb	r3, r3
 8013754:	f023 030f 	bic.w	r3, r3, #15
 8013758:	b25a      	sxtb	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	0a1b      	lsrs	r3, r3, #8
 801375e:	b25b      	sxtb	r3, r3
 8013760:	f003 030f 	and.w	r3, r3, #15
 8013764:	b25b      	sxtb	r3, r3
 8013766:	4313      	orrs	r3, r2
 8013768:	b25b      	sxtb	r3, r3
 801376a:	b2db      	uxtb	r3, r3
 801376c:	697a      	ldr	r2, [r7, #20]
 801376e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2201      	movs	r2, #1
 8013774:	70da      	strb	r2, [r3, #3]
			break;
 8013776:	e072      	b.n	801385e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	899b      	ldrh	r3, [r3, #12]
 8013780:	085b      	lsrs	r3, r3, #1
 8013782:	b29b      	uxth	r3, r3
 8013784:	4619      	mov	r1, r3
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	fbb3 f3f1 	udiv	r3, r3, r1
 801378c:	4413      	add	r3, r2
 801378e:	4619      	mov	r1, r3
 8013790:	68f8      	ldr	r0, [r7, #12]
 8013792:	f7ff fdc5 	bl	8013320 <move_window>
 8013796:	4603      	mov	r3, r0
 8013798:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801379a:	7ffb      	ldrb	r3, [r7, #31]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d15b      	bne.n	8013858 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	005b      	lsls	r3, r3, #1
 80137aa:	68fa      	ldr	r2, [r7, #12]
 80137ac:	8992      	ldrh	r2, [r2, #12]
 80137ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80137b2:	fb02 f200 	mul.w	r2, r2, r0
 80137b6:	1a9b      	subs	r3, r3, r2
 80137b8:	440b      	add	r3, r1
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	b292      	uxth	r2, r2
 80137be:	4611      	mov	r1, r2
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7ff fb38 	bl	8012e36 <st_word>
			fs->wflag = 1;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	2201      	movs	r2, #1
 80137ca:	70da      	strb	r2, [r3, #3]
			break;
 80137cc:	e047      	b.n	801385e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	899b      	ldrh	r3, [r3, #12]
 80137d6:	089b      	lsrs	r3, r3, #2
 80137d8:	b29b      	uxth	r3, r3
 80137da:	4619      	mov	r1, r3
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	fbb3 f3f1 	udiv	r3, r3, r1
 80137e2:	4413      	add	r3, r2
 80137e4:	4619      	mov	r1, r3
 80137e6:	68f8      	ldr	r0, [r7, #12]
 80137e8:	f7ff fd9a 	bl	8013320 <move_window>
 80137ec:	4603      	mov	r3, r0
 80137ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80137f0:	7ffb      	ldrb	r3, [r7, #31]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d132      	bne.n	801385c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	009b      	lsls	r3, r3, #2
 8013806:	68fa      	ldr	r2, [r7, #12]
 8013808:	8992      	ldrh	r2, [r2, #12]
 801380a:	fbb3 f0f2 	udiv	r0, r3, r2
 801380e:	fb02 f200 	mul.w	r2, r2, r0
 8013812:	1a9b      	subs	r3, r3, r2
 8013814:	440b      	add	r3, r1
 8013816:	4618      	mov	r0, r3
 8013818:	f7ff faea 	bl	8012df0 <ld_dword>
 801381c:	4603      	mov	r3, r0
 801381e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013822:	4323      	orrs	r3, r4
 8013824:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	68fa      	ldr	r2, [r7, #12]
 8013832:	8992      	ldrh	r2, [r2, #12]
 8013834:	fbb3 f0f2 	udiv	r0, r3, r2
 8013838:	fb02 f200 	mul.w	r2, r2, r0
 801383c:	1a9b      	subs	r3, r3, r2
 801383e:	440b      	add	r3, r1
 8013840:	6879      	ldr	r1, [r7, #4]
 8013842:	4618      	mov	r0, r3
 8013844:	f7ff fb12 	bl	8012e6c <st_dword>
			fs->wflag = 1;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	2201      	movs	r2, #1
 801384c:	70da      	strb	r2, [r3, #3]
			break;
 801384e:	e006      	b.n	801385e <put_fat+0x224>
			if (res != FR_OK) break;
 8013850:	bf00      	nop
 8013852:	e004      	b.n	801385e <put_fat+0x224>
			if (res != FR_OK) break;
 8013854:	bf00      	nop
 8013856:	e002      	b.n	801385e <put_fat+0x224>
			if (res != FR_OK) break;
 8013858:	bf00      	nop
 801385a:	e000      	b.n	801385e <put_fat+0x224>
			if (res != FR_OK) break;
 801385c:	bf00      	nop
		}
	}
	return res;
 801385e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013860:	4618      	mov	r0, r3
 8013862:	3724      	adds	r7, #36	; 0x24
 8013864:	46bd      	mov	sp, r7
 8013866:	bd90      	pop	{r4, r7, pc}

08013868 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b088      	sub	sp, #32
 801386c:	af00      	add	r7, sp, #0
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013874:	2300      	movs	r3, #0
 8013876:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801387e:	68bb      	ldr	r3, [r7, #8]
 8013880:	2b01      	cmp	r3, #1
 8013882:	d904      	bls.n	801388e <remove_chain+0x26>
 8013884:	69bb      	ldr	r3, [r7, #24]
 8013886:	69db      	ldr	r3, [r3, #28]
 8013888:	68ba      	ldr	r2, [r7, #8]
 801388a:	429a      	cmp	r2, r3
 801388c:	d301      	bcc.n	8013892 <remove_chain+0x2a>
 801388e:	2302      	movs	r3, #2
 8013890:	e04b      	b.n	801392a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d00c      	beq.n	80138b2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013898:	f04f 32ff 	mov.w	r2, #4294967295
 801389c:	6879      	ldr	r1, [r7, #4]
 801389e:	69b8      	ldr	r0, [r7, #24]
 80138a0:	f7ff fecb 	bl	801363a <put_fat>
 80138a4:	4603      	mov	r3, r0
 80138a6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80138a8:	7ffb      	ldrb	r3, [r7, #31]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d001      	beq.n	80138b2 <remove_chain+0x4a>
 80138ae:	7ffb      	ldrb	r3, [r7, #31]
 80138b0:	e03b      	b.n	801392a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80138b2:	68b9      	ldr	r1, [r7, #8]
 80138b4:	68f8      	ldr	r0, [r7, #12]
 80138b6:	f7ff fdf0 	bl	801349a <get_fat>
 80138ba:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d031      	beq.n	8013926 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d101      	bne.n	80138cc <remove_chain+0x64>
 80138c8:	2302      	movs	r3, #2
 80138ca:	e02e      	b.n	801392a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80138cc:	697b      	ldr	r3, [r7, #20]
 80138ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138d2:	d101      	bne.n	80138d8 <remove_chain+0x70>
 80138d4:	2301      	movs	r3, #1
 80138d6:	e028      	b.n	801392a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80138d8:	2200      	movs	r2, #0
 80138da:	68b9      	ldr	r1, [r7, #8]
 80138dc:	69b8      	ldr	r0, [r7, #24]
 80138de:	f7ff feac 	bl	801363a <put_fat>
 80138e2:	4603      	mov	r3, r0
 80138e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80138e6:	7ffb      	ldrb	r3, [r7, #31]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d001      	beq.n	80138f0 <remove_chain+0x88>
 80138ec:	7ffb      	ldrb	r3, [r7, #31]
 80138ee:	e01c      	b.n	801392a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80138f0:	69bb      	ldr	r3, [r7, #24]
 80138f2:	695a      	ldr	r2, [r3, #20]
 80138f4:	69bb      	ldr	r3, [r7, #24]
 80138f6:	69db      	ldr	r3, [r3, #28]
 80138f8:	3b02      	subs	r3, #2
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d20b      	bcs.n	8013916 <remove_chain+0xae>
			fs->free_clst++;
 80138fe:	69bb      	ldr	r3, [r7, #24]
 8013900:	695b      	ldr	r3, [r3, #20]
 8013902:	1c5a      	adds	r2, r3, #1
 8013904:	69bb      	ldr	r3, [r7, #24]
 8013906:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	791b      	ldrb	r3, [r3, #4]
 801390c:	f043 0301 	orr.w	r3, r3, #1
 8013910:	b2da      	uxtb	r2, r3
 8013912:	69bb      	ldr	r3, [r7, #24]
 8013914:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801391a:	69bb      	ldr	r3, [r7, #24]
 801391c:	69db      	ldr	r3, [r3, #28]
 801391e:	68ba      	ldr	r2, [r7, #8]
 8013920:	429a      	cmp	r2, r3
 8013922:	d3c6      	bcc.n	80138b2 <remove_chain+0x4a>
 8013924:	e000      	b.n	8013928 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013926:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013928:	2300      	movs	r3, #0
}
 801392a:	4618      	mov	r0, r3
 801392c:	3720      	adds	r7, #32
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}

08013932 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013932:	b580      	push	{r7, lr}
 8013934:	b088      	sub	sp, #32
 8013936:	af00      	add	r7, sp, #0
 8013938:	6078      	str	r0, [r7, #4]
 801393a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d10d      	bne.n	8013964 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	691b      	ldr	r3, [r3, #16]
 801394c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801394e:	69bb      	ldr	r3, [r7, #24]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d004      	beq.n	801395e <create_chain+0x2c>
 8013954:	693b      	ldr	r3, [r7, #16]
 8013956:	69db      	ldr	r3, [r3, #28]
 8013958:	69ba      	ldr	r2, [r7, #24]
 801395a:	429a      	cmp	r2, r3
 801395c:	d31b      	bcc.n	8013996 <create_chain+0x64>
 801395e:	2301      	movs	r3, #1
 8013960:	61bb      	str	r3, [r7, #24]
 8013962:	e018      	b.n	8013996 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013964:	6839      	ldr	r1, [r7, #0]
 8013966:	6878      	ldr	r0, [r7, #4]
 8013968:	f7ff fd97 	bl	801349a <get_fat>
 801396c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	2b01      	cmp	r3, #1
 8013972:	d801      	bhi.n	8013978 <create_chain+0x46>
 8013974:	2301      	movs	r3, #1
 8013976:	e070      	b.n	8013a5a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801397e:	d101      	bne.n	8013984 <create_chain+0x52>
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	e06a      	b.n	8013a5a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	69db      	ldr	r3, [r3, #28]
 8013988:	68fa      	ldr	r2, [r7, #12]
 801398a:	429a      	cmp	r2, r3
 801398c:	d201      	bcs.n	8013992 <create_chain+0x60>
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	e063      	b.n	8013a5a <create_chain+0x128>
		scl = clst;
 8013992:	683b      	ldr	r3, [r7, #0]
 8013994:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013996:	69bb      	ldr	r3, [r7, #24]
 8013998:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	3301      	adds	r3, #1
 801399e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80139a0:	693b      	ldr	r3, [r7, #16]
 80139a2:	69db      	ldr	r3, [r3, #28]
 80139a4:	69fa      	ldr	r2, [r7, #28]
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d307      	bcc.n	80139ba <create_chain+0x88>
				ncl = 2;
 80139aa:	2302      	movs	r3, #2
 80139ac:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80139ae:	69fa      	ldr	r2, [r7, #28]
 80139b0:	69bb      	ldr	r3, [r7, #24]
 80139b2:	429a      	cmp	r2, r3
 80139b4:	d901      	bls.n	80139ba <create_chain+0x88>
 80139b6:	2300      	movs	r3, #0
 80139b8:	e04f      	b.n	8013a5a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80139ba:	69f9      	ldr	r1, [r7, #28]
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f7ff fd6c 	bl	801349a <get_fat>
 80139c2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d00e      	beq.n	80139e8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	2b01      	cmp	r3, #1
 80139ce:	d003      	beq.n	80139d8 <create_chain+0xa6>
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139d6:	d101      	bne.n	80139dc <create_chain+0xaa>
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	e03e      	b.n	8013a5a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80139dc:	69fa      	ldr	r2, [r7, #28]
 80139de:	69bb      	ldr	r3, [r7, #24]
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d1da      	bne.n	801399a <create_chain+0x68>
 80139e4:	2300      	movs	r3, #0
 80139e6:	e038      	b.n	8013a5a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80139e8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80139ea:	f04f 32ff 	mov.w	r2, #4294967295
 80139ee:	69f9      	ldr	r1, [r7, #28]
 80139f0:	6938      	ldr	r0, [r7, #16]
 80139f2:	f7ff fe22 	bl	801363a <put_fat>
 80139f6:	4603      	mov	r3, r0
 80139f8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80139fa:	7dfb      	ldrb	r3, [r7, #23]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d109      	bne.n	8013a14 <create_chain+0xe2>
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d006      	beq.n	8013a14 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013a06:	69fa      	ldr	r2, [r7, #28]
 8013a08:	6839      	ldr	r1, [r7, #0]
 8013a0a:	6938      	ldr	r0, [r7, #16]
 8013a0c:	f7ff fe15 	bl	801363a <put_fat>
 8013a10:	4603      	mov	r3, r0
 8013a12:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013a14:	7dfb      	ldrb	r3, [r7, #23]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d116      	bne.n	8013a48 <create_chain+0x116>
		fs->last_clst = ncl;
 8013a1a:	693b      	ldr	r3, [r7, #16]
 8013a1c:	69fa      	ldr	r2, [r7, #28]
 8013a1e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013a20:	693b      	ldr	r3, [r7, #16]
 8013a22:	695a      	ldr	r2, [r3, #20]
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	69db      	ldr	r3, [r3, #28]
 8013a28:	3b02      	subs	r3, #2
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d804      	bhi.n	8013a38 <create_chain+0x106>
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	695b      	ldr	r3, [r3, #20]
 8013a32:	1e5a      	subs	r2, r3, #1
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	791b      	ldrb	r3, [r3, #4]
 8013a3c:	f043 0301 	orr.w	r3, r3, #1
 8013a40:	b2da      	uxtb	r2, r3
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	711a      	strb	r2, [r3, #4]
 8013a46:	e007      	b.n	8013a58 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013a48:	7dfb      	ldrb	r3, [r7, #23]
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d102      	bne.n	8013a54 <create_chain+0x122>
 8013a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8013a52:	e000      	b.n	8013a56 <create_chain+0x124>
 8013a54:	2301      	movs	r3, #1
 8013a56:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013a58:	69fb      	ldr	r3, [r7, #28]
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3720      	adds	r7, #32
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}

08013a62 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013a62:	b480      	push	{r7}
 8013a64:	b087      	sub	sp, #28
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	6078      	str	r0, [r7, #4]
 8013a6a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a76:	3304      	adds	r3, #4
 8013a78:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	899b      	ldrh	r3, [r3, #12]
 8013a7e:	461a      	mov	r2, r3
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a86:	68fa      	ldr	r2, [r7, #12]
 8013a88:	8952      	ldrh	r2, [r2, #10]
 8013a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a8e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	1d1a      	adds	r2, r3, #4
 8013a94:	613a      	str	r2, [r7, #16]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d101      	bne.n	8013aa4 <clmt_clust+0x42>
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	e010      	b.n	8013ac6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8013aa4:	697a      	ldr	r2, [r7, #20]
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d307      	bcc.n	8013abc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8013aac:	697a      	ldr	r2, [r7, #20]
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	1ad3      	subs	r3, r2, r3
 8013ab2:	617b      	str	r3, [r7, #20]
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	3304      	adds	r3, #4
 8013ab8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013aba:	e7e9      	b.n	8013a90 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8013abc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	4413      	add	r3, r2
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	371c      	adds	r7, #28
 8013aca:	46bd      	mov	sp, r7
 8013acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad0:	4770      	bx	lr

08013ad2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b086      	sub	sp, #24
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
 8013ada:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013ae8:	d204      	bcs.n	8013af4 <dir_sdi+0x22>
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	f003 031f 	and.w	r3, r3, #31
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d001      	beq.n	8013af8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013af4:	2302      	movs	r3, #2
 8013af6:	e071      	b.n	8013bdc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	683a      	ldr	r2, [r7, #0]
 8013afc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	689b      	ldr	r3, [r3, #8]
 8013b02:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d106      	bne.n	8013b18 <dir_sdi+0x46>
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	781b      	ldrb	r3, [r3, #0]
 8013b0e:	2b02      	cmp	r3, #2
 8013b10:	d902      	bls.n	8013b18 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b16:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d10c      	bne.n	8013b38 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	095b      	lsrs	r3, r3, #5
 8013b22:	693a      	ldr	r2, [r7, #16]
 8013b24:	8912      	ldrh	r2, [r2, #8]
 8013b26:	4293      	cmp	r3, r2
 8013b28:	d301      	bcc.n	8013b2e <dir_sdi+0x5c>
 8013b2a:	2302      	movs	r3, #2
 8013b2c:	e056      	b.n	8013bdc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8013b2e:	693b      	ldr	r3, [r7, #16]
 8013b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	61da      	str	r2, [r3, #28]
 8013b36:	e02d      	b.n	8013b94 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	895b      	ldrh	r3, [r3, #10]
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	899b      	ldrh	r3, [r3, #12]
 8013b42:	fb03 f302 	mul.w	r3, r3, r2
 8013b46:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013b48:	e019      	b.n	8013b7e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	6979      	ldr	r1, [r7, #20]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7ff fca3 	bl	801349a <get_fat>
 8013b54:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b5c:	d101      	bne.n	8013b62 <dir_sdi+0x90>
 8013b5e:	2301      	movs	r3, #1
 8013b60:	e03c      	b.n	8013bdc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	2b01      	cmp	r3, #1
 8013b66:	d904      	bls.n	8013b72 <dir_sdi+0xa0>
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	69db      	ldr	r3, [r3, #28]
 8013b6c:	697a      	ldr	r2, [r7, #20]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d301      	bcc.n	8013b76 <dir_sdi+0xa4>
 8013b72:	2302      	movs	r3, #2
 8013b74:	e032      	b.n	8013bdc <dir_sdi+0x10a>
			ofs -= csz;
 8013b76:	683a      	ldr	r2, [r7, #0]
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013b7e:	683a      	ldr	r2, [r7, #0]
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	429a      	cmp	r2, r3
 8013b84:	d2e1      	bcs.n	8013b4a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8013b86:	6979      	ldr	r1, [r7, #20]
 8013b88:	6938      	ldr	r0, [r7, #16]
 8013b8a:	f7ff fc67 	bl	801345c <clust2sect>
 8013b8e:	4602      	mov	r2, r0
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	697a      	ldr	r2, [r7, #20]
 8013b98:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	69db      	ldr	r3, [r3, #28]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d101      	bne.n	8013ba6 <dir_sdi+0xd4>
 8013ba2:	2302      	movs	r3, #2
 8013ba4:	e01a      	b.n	8013bdc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	69da      	ldr	r2, [r3, #28]
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	899b      	ldrh	r3, [r3, #12]
 8013bae:	4619      	mov	r1, r3
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8013bb6:	441a      	add	r2, r3
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	899b      	ldrh	r3, [r3, #12]
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	fbb3 f0f2 	udiv	r0, r3, r2
 8013bce:	fb02 f200 	mul.w	r2, r2, r0
 8013bd2:	1a9b      	subs	r3, r3, r2
 8013bd4:	18ca      	adds	r2, r1, r3
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013bda:	2300      	movs	r3, #0
}
 8013bdc:	4618      	mov	r0, r3
 8013bde:	3718      	adds	r7, #24
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b086      	sub	sp, #24
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	695b      	ldr	r3, [r3, #20]
 8013bf8:	3320      	adds	r3, #32
 8013bfa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	69db      	ldr	r3, [r3, #28]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d003      	beq.n	8013c0c <dir_next+0x28>
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013c0a:	d301      	bcc.n	8013c10 <dir_next+0x2c>
 8013c0c:	2304      	movs	r3, #4
 8013c0e:	e0bb      	b.n	8013d88 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	899b      	ldrh	r3, [r3, #12]
 8013c14:	461a      	mov	r2, r3
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c1c:	fb02 f201 	mul.w	r2, r2, r1
 8013c20:	1a9b      	subs	r3, r3, r2
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	f040 809d 	bne.w	8013d62 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	69db      	ldr	r3, [r3, #28]
 8013c2c:	1c5a      	adds	r2, r3, #1
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	699b      	ldr	r3, [r3, #24]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d10b      	bne.n	8013c52 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	095b      	lsrs	r3, r3, #5
 8013c3e:	68fa      	ldr	r2, [r7, #12]
 8013c40:	8912      	ldrh	r2, [r2, #8]
 8013c42:	4293      	cmp	r3, r2
 8013c44:	f0c0 808d 	bcc.w	8013d62 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	61da      	str	r2, [r3, #28]
 8013c4e:	2304      	movs	r3, #4
 8013c50:	e09a      	b.n	8013d88 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	899b      	ldrh	r3, [r3, #12]
 8013c56:	461a      	mov	r2, r3
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c5e:	68fa      	ldr	r2, [r7, #12]
 8013c60:	8952      	ldrh	r2, [r2, #10]
 8013c62:	3a01      	subs	r2, #1
 8013c64:	4013      	ands	r3, r2
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d17b      	bne.n	8013d62 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013c6a:	687a      	ldr	r2, [r7, #4]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	699b      	ldr	r3, [r3, #24]
 8013c70:	4619      	mov	r1, r3
 8013c72:	4610      	mov	r0, r2
 8013c74:	f7ff fc11 	bl	801349a <get_fat>
 8013c78:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013c7a:	697b      	ldr	r3, [r7, #20]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d801      	bhi.n	8013c84 <dir_next+0xa0>
 8013c80:	2302      	movs	r3, #2
 8013c82:	e081      	b.n	8013d88 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c8a:	d101      	bne.n	8013c90 <dir_next+0xac>
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	e07b      	b.n	8013d88 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	69db      	ldr	r3, [r3, #28]
 8013c94:	697a      	ldr	r2, [r7, #20]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d359      	bcc.n	8013d4e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d104      	bne.n	8013caa <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	61da      	str	r2, [r3, #28]
 8013ca6:	2304      	movs	r3, #4
 8013ca8:	e06e      	b.n	8013d88 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013caa:	687a      	ldr	r2, [r7, #4]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	699b      	ldr	r3, [r3, #24]
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	4610      	mov	r0, r2
 8013cb4:	f7ff fe3d 	bl	8013932 <create_chain>
 8013cb8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d101      	bne.n	8013cc4 <dir_next+0xe0>
 8013cc0:	2307      	movs	r3, #7
 8013cc2:	e061      	b.n	8013d88 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	2b01      	cmp	r3, #1
 8013cc8:	d101      	bne.n	8013cce <dir_next+0xea>
 8013cca:	2302      	movs	r3, #2
 8013ccc:	e05c      	b.n	8013d88 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cd4:	d101      	bne.n	8013cda <dir_next+0xf6>
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	e056      	b.n	8013d88 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013cda:	68f8      	ldr	r0, [r7, #12]
 8013cdc:	f7ff fadc 	bl	8013298 <sync_window>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d001      	beq.n	8013cea <dir_next+0x106>
 8013ce6:	2301      	movs	r3, #1
 8013ce8:	e04e      	b.n	8013d88 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	899b      	ldrh	r3, [r3, #12]
 8013cf4:	461a      	mov	r2, r3
 8013cf6:	2100      	movs	r1, #0
 8013cf8:	f7ff f905 	bl	8012f06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	613b      	str	r3, [r7, #16]
 8013d00:	6979      	ldr	r1, [r7, #20]
 8013d02:	68f8      	ldr	r0, [r7, #12]
 8013d04:	f7ff fbaa 	bl	801345c <clust2sect>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8013d0e:	e012      	b.n	8013d36 <dir_next+0x152>
						fs->wflag = 1;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	2201      	movs	r2, #1
 8013d14:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	f7ff fabe 	bl	8013298 <sync_window>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d001      	beq.n	8013d26 <dir_next+0x142>
 8013d22:	2301      	movs	r3, #1
 8013d24:	e030      	b.n	8013d88 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	3301      	adds	r3, #1
 8013d2a:	613b      	str	r3, [r7, #16]
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d30:	1c5a      	adds	r2, r3, #1
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	635a      	str	r2, [r3, #52]	; 0x34
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	895b      	ldrh	r3, [r3, #10]
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	4293      	cmp	r3, r2
 8013d40:	d3e6      	bcc.n	8013d10 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	1ad2      	subs	r2, r2, r3
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	697a      	ldr	r2, [r7, #20]
 8013d52:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013d54:	6979      	ldr	r1, [r7, #20]
 8013d56:	68f8      	ldr	r0, [r7, #12]
 8013d58:	f7ff fb80 	bl	801345c <clust2sect>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	68ba      	ldr	r2, [r7, #8]
 8013d66:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	899b      	ldrh	r3, [r3, #12]
 8013d72:	461a      	mov	r2, r3
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d7a:	fb02 f200 	mul.w	r2, r2, r0
 8013d7e:	1a9b      	subs	r3, r3, r2
 8013d80:	18ca      	adds	r2, r1, r3
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013d86:	2300      	movs	r3, #0
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3718      	adds	r7, #24
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}

08013d90 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b086      	sub	sp, #24
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013da0:	2100      	movs	r1, #0
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f7ff fe95 	bl	8013ad2 <dir_sdi>
 8013da8:	4603      	mov	r3, r0
 8013daa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013dac:	7dfb      	ldrb	r3, [r7, #23]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d12b      	bne.n	8013e0a <dir_alloc+0x7a>
		n = 0;
 8013db2:	2300      	movs	r3, #0
 8013db4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	69db      	ldr	r3, [r3, #28]
 8013dba:	4619      	mov	r1, r3
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	f7ff faaf 	bl	8013320 <move_window>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013dc6:	7dfb      	ldrb	r3, [r7, #23]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d11d      	bne.n	8013e08 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6a1b      	ldr	r3, [r3, #32]
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	2be5      	cmp	r3, #229	; 0xe5
 8013dd4:	d004      	beq.n	8013de0 <dir_alloc+0x50>
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	6a1b      	ldr	r3, [r3, #32]
 8013dda:	781b      	ldrb	r3, [r3, #0]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d107      	bne.n	8013df0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	3301      	adds	r3, #1
 8013de4:	613b      	str	r3, [r7, #16]
 8013de6:	693a      	ldr	r2, [r7, #16]
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d102      	bne.n	8013df4 <dir_alloc+0x64>
 8013dee:	e00c      	b.n	8013e0a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013df0:	2300      	movs	r3, #0
 8013df2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013df4:	2101      	movs	r1, #1
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f7ff fef4 	bl	8013be4 <dir_next>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013e00:	7dfb      	ldrb	r3, [r7, #23]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d0d7      	beq.n	8013db6 <dir_alloc+0x26>
 8013e06:	e000      	b.n	8013e0a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013e08:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013e0a:	7dfb      	ldrb	r3, [r7, #23]
 8013e0c:	2b04      	cmp	r3, #4
 8013e0e:	d101      	bne.n	8013e14 <dir_alloc+0x84>
 8013e10:	2307      	movs	r3, #7
 8013e12:	75fb      	strb	r3, [r7, #23]
	return res;
 8013e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3718      	adds	r7, #24
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}

08013e1e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013e1e:	b580      	push	{r7, lr}
 8013e20:	b084      	sub	sp, #16
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	6078      	str	r0, [r7, #4]
 8013e26:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	331a      	adds	r3, #26
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7fe ffc7 	bl	8012dc0 <ld_word>
 8013e32:	4603      	mov	r3, r0
 8013e34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	2b03      	cmp	r3, #3
 8013e3c:	d109      	bne.n	8013e52 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	3314      	adds	r3, #20
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fe ffbc 	bl	8012dc0 <ld_word>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	041b      	lsls	r3, r3, #16
 8013e4c:	68fa      	ldr	r2, [r7, #12]
 8013e4e:	4313      	orrs	r3, r2
 8013e50:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013e52:	68fb      	ldr	r3, [r7, #12]
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3710      	adds	r7, #16
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b084      	sub	sp, #16
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	331a      	adds	r3, #26
 8013e6c:	687a      	ldr	r2, [r7, #4]
 8013e6e:	b292      	uxth	r2, r2
 8013e70:	4611      	mov	r1, r2
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7fe ffdf 	bl	8012e36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	781b      	ldrb	r3, [r3, #0]
 8013e7c:	2b03      	cmp	r3, #3
 8013e7e:	d109      	bne.n	8013e94 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	f103 0214 	add.w	r2, r3, #20
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	0c1b      	lsrs	r3, r3, #16
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	4610      	mov	r0, r2
 8013e90:	f7fe ffd1 	bl	8012e36 <st_word>
	}
}
 8013e94:	bf00      	nop
 8013e96:	3710      	adds	r7, #16
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}

08013e9c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b086      	sub	sp, #24
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013ea6:	2304      	movs	r3, #4
 8013ea8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8013eb0:	e03c      	b.n	8013f2c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	69db      	ldr	r3, [r3, #28]
 8013eb6:	4619      	mov	r1, r3
 8013eb8:	6938      	ldr	r0, [r7, #16]
 8013eba:	f7ff fa31 	bl	8013320 <move_window>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013ec2:	7dfb      	ldrb	r3, [r7, #23]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d136      	bne.n	8013f36 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6a1b      	ldr	r3, [r3, #32]
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013ed0:	7bfb      	ldrb	r3, [r7, #15]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d102      	bne.n	8013edc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013ed6:	2304      	movs	r3, #4
 8013ed8:	75fb      	strb	r3, [r7, #23]
 8013eda:	e031      	b.n	8013f40 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6a1b      	ldr	r3, [r3, #32]
 8013ee0:	330b      	adds	r3, #11
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ee8:	73bb      	strb	r3, [r7, #14]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	7bba      	ldrb	r2, [r7, #14]
 8013eee:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8013ef0:	7bfb      	ldrb	r3, [r7, #15]
 8013ef2:	2be5      	cmp	r3, #229	; 0xe5
 8013ef4:	d011      	beq.n	8013f1a <dir_read+0x7e>
 8013ef6:	7bfb      	ldrb	r3, [r7, #15]
 8013ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8013efa:	d00e      	beq.n	8013f1a <dir_read+0x7e>
 8013efc:	7bbb      	ldrb	r3, [r7, #14]
 8013efe:	2b0f      	cmp	r3, #15
 8013f00:	d00b      	beq.n	8013f1a <dir_read+0x7e>
 8013f02:	7bbb      	ldrb	r3, [r7, #14]
 8013f04:	f023 0320 	bic.w	r3, r3, #32
 8013f08:	2b08      	cmp	r3, #8
 8013f0a:	bf0c      	ite	eq
 8013f0c:	2301      	moveq	r3, #1
 8013f0e:	2300      	movne	r3, #0
 8013f10:	b2db      	uxtb	r3, r3
 8013f12:	461a      	mov	r2, r3
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	4293      	cmp	r3, r2
 8013f18:	d00f      	beq.n	8013f3a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013f1a:	2100      	movs	r1, #0
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f7ff fe61 	bl	8013be4 <dir_next>
 8013f22:	4603      	mov	r3, r0
 8013f24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013f26:	7dfb      	ldrb	r3, [r7, #23]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d108      	bne.n	8013f3e <dir_read+0xa2>
	while (dp->sect) {
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	69db      	ldr	r3, [r3, #28]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d1be      	bne.n	8013eb2 <dir_read+0x16>
 8013f34:	e004      	b.n	8013f40 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013f36:	bf00      	nop
 8013f38:	e002      	b.n	8013f40 <dir_read+0xa4>
				break;
 8013f3a:	bf00      	nop
 8013f3c:	e000      	b.n	8013f40 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013f3e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013f40:	7dfb      	ldrb	r3, [r7, #23]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d002      	beq.n	8013f4c <dir_read+0xb0>
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2200      	movs	r2, #0
 8013f4a:	61da      	str	r2, [r3, #28]
	return res;
 8013f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f4e:	4618      	mov	r0, r3
 8013f50:	3718      	adds	r7, #24
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd80      	pop	{r7, pc}

08013f56 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013f56:	b580      	push	{r7, lr}
 8013f58:	b086      	sub	sp, #24
 8013f5a:	af00      	add	r7, sp, #0
 8013f5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013f64:	2100      	movs	r1, #0
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f7ff fdb3 	bl	8013ad2 <dir_sdi>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013f70:	7dfb      	ldrb	r3, [r7, #23]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d001      	beq.n	8013f7a <dir_find+0x24>
 8013f76:	7dfb      	ldrb	r3, [r7, #23]
 8013f78:	e03e      	b.n	8013ff8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	69db      	ldr	r3, [r3, #28]
 8013f7e:	4619      	mov	r1, r3
 8013f80:	6938      	ldr	r0, [r7, #16]
 8013f82:	f7ff f9cd 	bl	8013320 <move_window>
 8013f86:	4603      	mov	r3, r0
 8013f88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013f8a:	7dfb      	ldrb	r3, [r7, #23]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d12f      	bne.n	8013ff0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6a1b      	ldr	r3, [r3, #32]
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013f98:	7bfb      	ldrb	r3, [r7, #15]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d102      	bne.n	8013fa4 <dir_find+0x4e>
 8013f9e:	2304      	movs	r3, #4
 8013fa0:	75fb      	strb	r3, [r7, #23]
 8013fa2:	e028      	b.n	8013ff6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6a1b      	ldr	r3, [r3, #32]
 8013fa8:	330b      	adds	r3, #11
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013fb0:	b2da      	uxtb	r2, r3
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6a1b      	ldr	r3, [r3, #32]
 8013fba:	330b      	adds	r3, #11
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	f003 0308 	and.w	r3, r3, #8
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d10a      	bne.n	8013fdc <dir_find+0x86>
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	6a18      	ldr	r0, [r3, #32]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	3324      	adds	r3, #36	; 0x24
 8013fce:	220b      	movs	r2, #11
 8013fd0:	4619      	mov	r1, r3
 8013fd2:	f7fe ffb2 	bl	8012f3a <mem_cmp>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d00b      	beq.n	8013ff4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013fdc:	2100      	movs	r1, #0
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f7ff fe00 	bl	8013be4 <dir_next>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013fe8:	7dfb      	ldrb	r3, [r7, #23]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d0c5      	beq.n	8013f7a <dir_find+0x24>
 8013fee:	e002      	b.n	8013ff6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013ff0:	bf00      	nop
 8013ff2:	e000      	b.n	8013ff6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013ff4:	bf00      	nop

	return res;
 8013ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3718      	adds	r7, #24
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}

08014000 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801400e:	2101      	movs	r1, #1
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f7ff febd 	bl	8013d90 <dir_alloc>
 8014016:	4603      	mov	r3, r0
 8014018:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801401a:	7bfb      	ldrb	r3, [r7, #15]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d11c      	bne.n	801405a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	69db      	ldr	r3, [r3, #28]
 8014024:	4619      	mov	r1, r3
 8014026:	68b8      	ldr	r0, [r7, #8]
 8014028:	f7ff f97a 	bl	8013320 <move_window>
 801402c:	4603      	mov	r3, r0
 801402e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014030:	7bfb      	ldrb	r3, [r7, #15]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d111      	bne.n	801405a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	6a1b      	ldr	r3, [r3, #32]
 801403a:	2220      	movs	r2, #32
 801403c:	2100      	movs	r1, #0
 801403e:	4618      	mov	r0, r3
 8014040:	f7fe ff61 	bl	8012f06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6a18      	ldr	r0, [r3, #32]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	3324      	adds	r3, #36	; 0x24
 801404c:	220b      	movs	r2, #11
 801404e:	4619      	mov	r1, r3
 8014050:	f7fe ff38 	bl	8012ec4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	2201      	movs	r2, #1
 8014058:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801405a:	7bfb      	ldrb	r3, [r7, #15]
}
 801405c:	4618      	mov	r0, r3
 801405e:	3710      	adds	r7, #16
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}

08014064 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b084      	sub	sp, #16
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	69db      	ldr	r3, [r3, #28]
 8014076:	4619      	mov	r1, r3
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	f7ff f951 	bl	8013320 <move_window>
 801407e:	4603      	mov	r3, r0
 8014080:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8014082:	7afb      	ldrb	r3, [r7, #11]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d106      	bne.n	8014096 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6a1b      	ldr	r3, [r3, #32]
 801408c:	22e5      	movs	r2, #229	; 0xe5
 801408e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2201      	movs	r2, #1
 8014094:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8014096:	7afb      	ldrb	r3, [r7, #11]
}
 8014098:	4618      	mov	r0, r3
 801409a:	3710      	adds	r7, #16
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}

080140a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b088      	sub	sp, #32
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	60fb      	str	r3, [r7, #12]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	3324      	adds	r3, #36	; 0x24
 80140b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80140b6:	220b      	movs	r2, #11
 80140b8:	2120      	movs	r1, #32
 80140ba:	68b8      	ldr	r0, [r7, #8]
 80140bc:	f7fe ff23 	bl	8012f06 <mem_set>
	si = i = 0; ni = 8;
 80140c0:	2300      	movs	r3, #0
 80140c2:	613b      	str	r3, [r7, #16]
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	617b      	str	r3, [r7, #20]
 80140c8:	2308      	movs	r3, #8
 80140ca:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80140cc:	68fa      	ldr	r2, [r7, #12]
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	4413      	add	r3, r2
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	2b2e      	cmp	r3, #46	; 0x2e
 80140d6:	d12f      	bne.n	8014138 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	1c5a      	adds	r2, r3, #1
 80140dc:	617a      	str	r2, [r7, #20]
 80140de:	68fa      	ldr	r2, [r7, #12]
 80140e0:	4413      	add	r3, r2
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80140e6:	7ffb      	ldrb	r3, [r7, #31]
 80140e8:	2b2e      	cmp	r3, #46	; 0x2e
 80140ea:	d10a      	bne.n	8014102 <create_name+0x62>
 80140ec:	697b      	ldr	r3, [r7, #20]
 80140ee:	2b02      	cmp	r3, #2
 80140f0:	d807      	bhi.n	8014102 <create_name+0x62>
			sfn[i++] = c;
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	1c5a      	adds	r2, r3, #1
 80140f6:	613a      	str	r2, [r7, #16]
 80140f8:	68ba      	ldr	r2, [r7, #8]
 80140fa:	4413      	add	r3, r2
 80140fc:	7ffa      	ldrb	r2, [r7, #31]
 80140fe:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8014100:	e7ea      	b.n	80140d8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8014102:	7ffb      	ldrb	r3, [r7, #31]
 8014104:	2b2f      	cmp	r3, #47	; 0x2f
 8014106:	d007      	beq.n	8014118 <create_name+0x78>
 8014108:	7ffb      	ldrb	r3, [r7, #31]
 801410a:	2b5c      	cmp	r3, #92	; 0x5c
 801410c:	d004      	beq.n	8014118 <create_name+0x78>
 801410e:	7ffb      	ldrb	r3, [r7, #31]
 8014110:	2b20      	cmp	r3, #32
 8014112:	d901      	bls.n	8014118 <create_name+0x78>
 8014114:	2306      	movs	r3, #6
 8014116:	e084      	b.n	8014222 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8014118:	68fa      	ldr	r2, [r7, #12]
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	441a      	add	r2, r3
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8014122:	7ffb      	ldrb	r3, [r7, #31]
 8014124:	2b20      	cmp	r3, #32
 8014126:	d801      	bhi.n	801412c <create_name+0x8c>
 8014128:	2224      	movs	r2, #36	; 0x24
 801412a:	e000      	b.n	801412e <create_name+0x8e>
 801412c:	2220      	movs	r2, #32
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	330b      	adds	r3, #11
 8014132:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8014134:	2300      	movs	r3, #0
 8014136:	e074      	b.n	8014222 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	1c5a      	adds	r2, r3, #1
 801413c:	617a      	str	r2, [r7, #20]
 801413e:	68fa      	ldr	r2, [r7, #12]
 8014140:	4413      	add	r3, r2
 8014142:	781b      	ldrb	r3, [r3, #0]
 8014144:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014146:	7ffb      	ldrb	r3, [r7, #31]
 8014148:	2b20      	cmp	r3, #32
 801414a:	d94e      	bls.n	80141ea <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801414c:	7ffb      	ldrb	r3, [r7, #31]
 801414e:	2b2f      	cmp	r3, #47	; 0x2f
 8014150:	d006      	beq.n	8014160 <create_name+0xc0>
 8014152:	7ffb      	ldrb	r3, [r7, #31]
 8014154:	2b5c      	cmp	r3, #92	; 0x5c
 8014156:	d110      	bne.n	801417a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014158:	e002      	b.n	8014160 <create_name+0xc0>
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	3301      	adds	r3, #1
 801415e:	617b      	str	r3, [r7, #20]
 8014160:	68fa      	ldr	r2, [r7, #12]
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	4413      	add	r3, r2
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	2b2f      	cmp	r3, #47	; 0x2f
 801416a:	d0f6      	beq.n	801415a <create_name+0xba>
 801416c:	68fa      	ldr	r2, [r7, #12]
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	4413      	add	r3, r2
 8014172:	781b      	ldrb	r3, [r3, #0]
 8014174:	2b5c      	cmp	r3, #92	; 0x5c
 8014176:	d0f0      	beq.n	801415a <create_name+0xba>
			break;
 8014178:	e038      	b.n	80141ec <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801417a:	7ffb      	ldrb	r3, [r7, #31]
 801417c:	2b2e      	cmp	r3, #46	; 0x2e
 801417e:	d003      	beq.n	8014188 <create_name+0xe8>
 8014180:	693a      	ldr	r2, [r7, #16]
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	429a      	cmp	r2, r3
 8014186:	d30c      	bcc.n	80141a2 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014188:	69bb      	ldr	r3, [r7, #24]
 801418a:	2b0b      	cmp	r3, #11
 801418c:	d002      	beq.n	8014194 <create_name+0xf4>
 801418e:	7ffb      	ldrb	r3, [r7, #31]
 8014190:	2b2e      	cmp	r3, #46	; 0x2e
 8014192:	d001      	beq.n	8014198 <create_name+0xf8>
 8014194:	2306      	movs	r3, #6
 8014196:	e044      	b.n	8014222 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8014198:	2308      	movs	r3, #8
 801419a:	613b      	str	r3, [r7, #16]
 801419c:	230b      	movs	r3, #11
 801419e:	61bb      	str	r3, [r7, #24]
			continue;
 80141a0:	e022      	b.n	80141e8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80141a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	da04      	bge.n	80141b4 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80141aa:	7ffb      	ldrb	r3, [r7, #31]
 80141ac:	3b80      	subs	r3, #128	; 0x80
 80141ae:	4a1f      	ldr	r2, [pc, #124]	; (801422c <create_name+0x18c>)
 80141b0:	5cd3      	ldrb	r3, [r2, r3]
 80141b2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80141b4:	7ffb      	ldrb	r3, [r7, #31]
 80141b6:	4619      	mov	r1, r3
 80141b8:	481d      	ldr	r0, [pc, #116]	; (8014230 <create_name+0x190>)
 80141ba:	f7fe fee5 	bl	8012f88 <chk_chr>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d001      	beq.n	80141c8 <create_name+0x128>
 80141c4:	2306      	movs	r3, #6
 80141c6:	e02c      	b.n	8014222 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80141c8:	7ffb      	ldrb	r3, [r7, #31]
 80141ca:	2b60      	cmp	r3, #96	; 0x60
 80141cc:	d905      	bls.n	80141da <create_name+0x13a>
 80141ce:	7ffb      	ldrb	r3, [r7, #31]
 80141d0:	2b7a      	cmp	r3, #122	; 0x7a
 80141d2:	d802      	bhi.n	80141da <create_name+0x13a>
 80141d4:	7ffb      	ldrb	r3, [r7, #31]
 80141d6:	3b20      	subs	r3, #32
 80141d8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	1c5a      	adds	r2, r3, #1
 80141de:	613a      	str	r2, [r7, #16]
 80141e0:	68ba      	ldr	r2, [r7, #8]
 80141e2:	4413      	add	r3, r2
 80141e4:	7ffa      	ldrb	r2, [r7, #31]
 80141e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80141e8:	e7a6      	b.n	8014138 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80141ea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80141ec:	68fa      	ldr	r2, [r7, #12]
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	441a      	add	r2, r3
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d101      	bne.n	8014200 <create_name+0x160>
 80141fc:	2306      	movs	r3, #6
 80141fe:	e010      	b.n	8014222 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	781b      	ldrb	r3, [r3, #0]
 8014204:	2be5      	cmp	r3, #229	; 0xe5
 8014206:	d102      	bne.n	801420e <create_name+0x16e>
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	2205      	movs	r2, #5
 801420c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801420e:	7ffb      	ldrb	r3, [r7, #31]
 8014210:	2b20      	cmp	r3, #32
 8014212:	d801      	bhi.n	8014218 <create_name+0x178>
 8014214:	2204      	movs	r2, #4
 8014216:	e000      	b.n	801421a <create_name+0x17a>
 8014218:	2200      	movs	r2, #0
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	330b      	adds	r3, #11
 801421e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8014220:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8014222:	4618      	mov	r0, r3
 8014224:	3720      	adds	r7, #32
 8014226:	46bd      	mov	sp, r7
 8014228:	bd80      	pop	{r7, pc}
 801422a:	bf00      	nop
 801422c:	0801a8e0 	.word	0x0801a8e0
 8014230:	0801a890 	.word	0x0801a890

08014234 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b086      	sub	sp, #24
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
 801423c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	781b      	ldrb	r3, [r3, #0]
 801424c:	2b2f      	cmp	r3, #47	; 0x2f
 801424e:	d00b      	beq.n	8014268 <follow_path+0x34>
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	2b5c      	cmp	r3, #92	; 0x5c
 8014256:	d007      	beq.n	8014268 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	699a      	ldr	r2, [r3, #24]
 801425c:	693b      	ldr	r3, [r7, #16]
 801425e:	609a      	str	r2, [r3, #8]
 8014260:	e00d      	b.n	801427e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	3301      	adds	r3, #1
 8014266:	603b      	str	r3, [r7, #0]
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	2b2f      	cmp	r3, #47	; 0x2f
 801426e:	d0f8      	beq.n	8014262 <follow_path+0x2e>
 8014270:	683b      	ldr	r3, [r7, #0]
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	2b5c      	cmp	r3, #92	; 0x5c
 8014276:	d0f4      	beq.n	8014262 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	2200      	movs	r2, #0
 801427c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	781b      	ldrb	r3, [r3, #0]
 8014282:	2b1f      	cmp	r3, #31
 8014284:	d80a      	bhi.n	801429c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	2280      	movs	r2, #128	; 0x80
 801428a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801428e:	2100      	movs	r1, #0
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f7ff fc1e 	bl	8013ad2 <dir_sdi>
 8014296:	4603      	mov	r3, r0
 8014298:	75fb      	strb	r3, [r7, #23]
 801429a:	e05b      	b.n	8014354 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801429c:	463b      	mov	r3, r7
 801429e:	4619      	mov	r1, r3
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f7ff fefd 	bl	80140a0 <create_name>
 80142a6:	4603      	mov	r3, r0
 80142a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80142aa:	7dfb      	ldrb	r3, [r7, #23]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d14c      	bne.n	801434a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f7ff fe50 	bl	8013f56 <dir_find>
 80142b6:	4603      	mov	r3, r0
 80142b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80142c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80142c2:	7dfb      	ldrb	r3, [r7, #23]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d01b      	beq.n	8014300 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80142c8:	7dfb      	ldrb	r3, [r7, #23]
 80142ca:	2b04      	cmp	r3, #4
 80142cc:	d13f      	bne.n	801434e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80142ce:	7afb      	ldrb	r3, [r7, #11]
 80142d0:	f003 0320 	and.w	r3, r3, #32
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d00b      	beq.n	80142f0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80142d8:	7afb      	ldrb	r3, [r7, #11]
 80142da:	f003 0304 	and.w	r3, r3, #4
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d031      	beq.n	8014346 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2280      	movs	r2, #128	; 0x80
 80142e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80142ea:	2300      	movs	r3, #0
 80142ec:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80142ee:	e02e      	b.n	801434e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80142f0:	7afb      	ldrb	r3, [r7, #11]
 80142f2:	f003 0304 	and.w	r3, r3, #4
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d129      	bne.n	801434e <follow_path+0x11a>
 80142fa:	2305      	movs	r3, #5
 80142fc:	75fb      	strb	r3, [r7, #23]
				break;
 80142fe:	e026      	b.n	801434e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014300:	7afb      	ldrb	r3, [r7, #11]
 8014302:	f003 0304 	and.w	r3, r3, #4
 8014306:	2b00      	cmp	r3, #0
 8014308:	d123      	bne.n	8014352 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	799b      	ldrb	r3, [r3, #6]
 801430e:	f003 0310 	and.w	r3, r3, #16
 8014312:	2b00      	cmp	r3, #0
 8014314:	d102      	bne.n	801431c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8014316:	2305      	movs	r3, #5
 8014318:	75fb      	strb	r3, [r7, #23]
 801431a:	e01b      	b.n	8014354 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	695b      	ldr	r3, [r3, #20]
 8014326:	68fa      	ldr	r2, [r7, #12]
 8014328:	8992      	ldrh	r2, [r2, #12]
 801432a:	fbb3 f0f2 	udiv	r0, r3, r2
 801432e:	fb02 f200 	mul.w	r2, r2, r0
 8014332:	1a9b      	subs	r3, r3, r2
 8014334:	440b      	add	r3, r1
 8014336:	4619      	mov	r1, r3
 8014338:	68f8      	ldr	r0, [r7, #12]
 801433a:	f7ff fd70 	bl	8013e1e <ld_clust>
 801433e:	4602      	mov	r2, r0
 8014340:	693b      	ldr	r3, [r7, #16]
 8014342:	609a      	str	r2, [r3, #8]
 8014344:	e7aa      	b.n	801429c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8014346:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014348:	e7a8      	b.n	801429c <follow_path+0x68>
			if (res != FR_OK) break;
 801434a:	bf00      	nop
 801434c:	e002      	b.n	8014354 <follow_path+0x120>
				break;
 801434e:	bf00      	nop
 8014350:	e000      	b.n	8014354 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014352:	bf00      	nop
			}
		}
	}

	return res;
 8014354:	7dfb      	ldrb	r3, [r7, #23]
}
 8014356:	4618      	mov	r0, r3
 8014358:	3718      	adds	r7, #24
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}

0801435e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801435e:	b480      	push	{r7}
 8014360:	b087      	sub	sp, #28
 8014362:	af00      	add	r7, sp, #0
 8014364:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014366:	f04f 33ff 	mov.w	r3, #4294967295
 801436a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d031      	beq.n	80143d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	617b      	str	r3, [r7, #20]
 801437a:	e002      	b.n	8014382 <get_ldnumber+0x24>
 801437c:	697b      	ldr	r3, [r7, #20]
 801437e:	3301      	adds	r3, #1
 8014380:	617b      	str	r3, [r7, #20]
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	2b20      	cmp	r3, #32
 8014388:	d903      	bls.n	8014392 <get_ldnumber+0x34>
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	781b      	ldrb	r3, [r3, #0]
 801438e:	2b3a      	cmp	r3, #58	; 0x3a
 8014390:	d1f4      	bne.n	801437c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	2b3a      	cmp	r3, #58	; 0x3a
 8014398:	d11c      	bne.n	80143d4 <get_ldnumber+0x76>
			tp = *path;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	1c5a      	adds	r2, r3, #1
 80143a4:	60fa      	str	r2, [r7, #12]
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	3b30      	subs	r3, #48	; 0x30
 80143aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	2b09      	cmp	r3, #9
 80143b0:	d80e      	bhi.n	80143d0 <get_ldnumber+0x72>
 80143b2:	68fa      	ldr	r2, [r7, #12]
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d10a      	bne.n	80143d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d107      	bne.n	80143d0 <get_ldnumber+0x72>
					vol = (int)i;
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80143c4:	697b      	ldr	r3, [r7, #20]
 80143c6:	3301      	adds	r3, #1
 80143c8:	617b      	str	r3, [r7, #20]
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	697a      	ldr	r2, [r7, #20]
 80143ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	e002      	b.n	80143da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80143d4:	2300      	movs	r3, #0
 80143d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80143d8:	693b      	ldr	r3, [r7, #16]
}
 80143da:	4618      	mov	r0, r3
 80143dc:	371c      	adds	r7, #28
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr
	...

080143e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b082      	sub	sp, #8
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2200      	movs	r2, #0
 80143f6:	70da      	strb	r2, [r3, #3]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f04f 32ff 	mov.w	r2, #4294967295
 80143fe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014400:	6839      	ldr	r1, [r7, #0]
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f7fe ff8c 	bl	8013320 <move_window>
 8014408:	4603      	mov	r3, r0
 801440a:	2b00      	cmp	r3, #0
 801440c:	d001      	beq.n	8014412 <check_fs+0x2a>
 801440e:	2304      	movs	r3, #4
 8014410:	e038      	b.n	8014484 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	3338      	adds	r3, #56	; 0x38
 8014416:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801441a:	4618      	mov	r0, r3
 801441c:	f7fe fcd0 	bl	8012dc0 <ld_word>
 8014420:	4603      	mov	r3, r0
 8014422:	461a      	mov	r2, r3
 8014424:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014428:	429a      	cmp	r2, r3
 801442a:	d001      	beq.n	8014430 <check_fs+0x48>
 801442c:	2303      	movs	r3, #3
 801442e:	e029      	b.n	8014484 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014436:	2be9      	cmp	r3, #233	; 0xe9
 8014438:	d009      	beq.n	801444e <check_fs+0x66>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014440:	2beb      	cmp	r3, #235	; 0xeb
 8014442:	d11e      	bne.n	8014482 <check_fs+0x9a>
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801444a:	2b90      	cmp	r3, #144	; 0x90
 801444c:	d119      	bne.n	8014482 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	3338      	adds	r3, #56	; 0x38
 8014452:	3336      	adds	r3, #54	; 0x36
 8014454:	4618      	mov	r0, r3
 8014456:	f7fe fccb 	bl	8012df0 <ld_dword>
 801445a:	4603      	mov	r3, r0
 801445c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014460:	4a0a      	ldr	r2, [pc, #40]	; (801448c <check_fs+0xa4>)
 8014462:	4293      	cmp	r3, r2
 8014464:	d101      	bne.n	801446a <check_fs+0x82>
 8014466:	2300      	movs	r3, #0
 8014468:	e00c      	b.n	8014484 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	3338      	adds	r3, #56	; 0x38
 801446e:	3352      	adds	r3, #82	; 0x52
 8014470:	4618      	mov	r0, r3
 8014472:	f7fe fcbd 	bl	8012df0 <ld_dword>
 8014476:	4602      	mov	r2, r0
 8014478:	4b05      	ldr	r3, [pc, #20]	; (8014490 <check_fs+0xa8>)
 801447a:	429a      	cmp	r2, r3
 801447c:	d101      	bne.n	8014482 <check_fs+0x9a>
 801447e:	2300      	movs	r3, #0
 8014480:	e000      	b.n	8014484 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014482:	2302      	movs	r3, #2
}
 8014484:	4618      	mov	r0, r3
 8014486:	3708      	adds	r7, #8
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}
 801448c:	00544146 	.word	0x00544146
 8014490:	33544146 	.word	0x33544146

08014494 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b096      	sub	sp, #88	; 0x58
 8014498:	af00      	add	r7, sp, #0
 801449a:	60f8      	str	r0, [r7, #12]
 801449c:	60b9      	str	r1, [r7, #8]
 801449e:	4613      	mov	r3, r2
 80144a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	2200      	movs	r2, #0
 80144a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80144a8:	68f8      	ldr	r0, [r7, #12]
 80144aa:	f7ff ff58 	bl	801435e <get_ldnumber>
 80144ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80144b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	da01      	bge.n	80144ba <find_volume+0x26>
 80144b6:	230b      	movs	r3, #11
 80144b8:	e268      	b.n	801498c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80144ba:	4ab0      	ldr	r2, [pc, #704]	; (801477c <find_volume+0x2e8>)
 80144bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80144c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d101      	bne.n	80144ce <find_volume+0x3a>
 80144ca:	230c      	movs	r3, #12
 80144cc:	e25e      	b.n	801498c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80144d4:	79fb      	ldrb	r3, [r7, #7]
 80144d6:	f023 0301 	bic.w	r3, r3, #1
 80144da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80144dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d01a      	beq.n	801451a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80144e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e6:	785b      	ldrb	r3, [r3, #1]
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fe fbcb 	bl	8012c84 <disk_status>
 80144ee:	4603      	mov	r3, r0
 80144f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80144f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144f8:	f003 0301 	and.w	r3, r3, #1
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d10c      	bne.n	801451a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014500:	79fb      	ldrb	r3, [r7, #7]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d007      	beq.n	8014516 <find_volume+0x82>
 8014506:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801450a:	f003 0304 	and.w	r3, r3, #4
 801450e:	2b00      	cmp	r3, #0
 8014510:	d001      	beq.n	8014516 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014512:	230a      	movs	r3, #10
 8014514:	e23a      	b.n	801498c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8014516:	2300      	movs	r3, #0
 8014518:	e238      	b.n	801498c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451c:	2200      	movs	r2, #0
 801451e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014522:	b2da      	uxtb	r2, r3
 8014524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014526:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801452a:	785b      	ldrb	r3, [r3, #1]
 801452c:	4618      	mov	r0, r3
 801452e:	f7fe fbc3 	bl	8012cb8 <disk_initialize>
 8014532:	4603      	mov	r3, r0
 8014534:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801453c:	f003 0301 	and.w	r3, r3, #1
 8014540:	2b00      	cmp	r3, #0
 8014542:	d001      	beq.n	8014548 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014544:	2303      	movs	r3, #3
 8014546:	e221      	b.n	801498c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014548:	79fb      	ldrb	r3, [r7, #7]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d007      	beq.n	801455e <find_volume+0xca>
 801454e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014552:	f003 0304 	and.w	r3, r3, #4
 8014556:	2b00      	cmp	r3, #0
 8014558:	d001      	beq.n	801455e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801455a:	230a      	movs	r3, #10
 801455c:	e216      	b.n	801498c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014560:	7858      	ldrb	r0, [r3, #1]
 8014562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014564:	330c      	adds	r3, #12
 8014566:	461a      	mov	r2, r3
 8014568:	2102      	movs	r1, #2
 801456a:	f7fe fc0b 	bl	8012d84 <disk_ioctl>
 801456e:	4603      	mov	r3, r0
 8014570:	2b00      	cmp	r3, #0
 8014572:	d001      	beq.n	8014578 <find_volume+0xe4>
 8014574:	2301      	movs	r3, #1
 8014576:	e209      	b.n	801498c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8014578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801457a:	899b      	ldrh	r3, [r3, #12]
 801457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014580:	d80d      	bhi.n	801459e <find_volume+0x10a>
 8014582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014584:	899b      	ldrh	r3, [r3, #12]
 8014586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801458a:	d308      	bcc.n	801459e <find_volume+0x10a>
 801458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801458e:	899b      	ldrh	r3, [r3, #12]
 8014590:	461a      	mov	r2, r3
 8014592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014594:	899b      	ldrh	r3, [r3, #12]
 8014596:	3b01      	subs	r3, #1
 8014598:	4013      	ands	r3, r2
 801459a:	2b00      	cmp	r3, #0
 801459c:	d001      	beq.n	80145a2 <find_volume+0x10e>
 801459e:	2301      	movs	r3, #1
 80145a0:	e1f4      	b.n	801498c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80145a2:	2300      	movs	r3, #0
 80145a4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80145a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80145a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145aa:	f7ff ff1d 	bl	80143e8 <check_fs>
 80145ae:	4603      	mov	r3, r0
 80145b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80145b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145b8:	2b02      	cmp	r3, #2
 80145ba:	d14b      	bne.n	8014654 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80145bc:	2300      	movs	r3, #0
 80145be:	643b      	str	r3, [r7, #64]	; 0x40
 80145c0:	e01f      	b.n	8014602 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80145c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80145c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145ca:	011b      	lsls	r3, r3, #4
 80145cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80145d0:	4413      	add	r3, r2
 80145d2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80145d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d6:	3304      	adds	r3, #4
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d006      	beq.n	80145ec <find_volume+0x158>
 80145de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e0:	3308      	adds	r3, #8
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fe fc04 	bl	8012df0 <ld_dword>
 80145e8:	4602      	mov	r2, r0
 80145ea:	e000      	b.n	80145ee <find_volume+0x15a>
 80145ec:	2200      	movs	r2, #0
 80145ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145f0:	009b      	lsls	r3, r3, #2
 80145f2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80145f6:	440b      	add	r3, r1
 80145f8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80145fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145fe:	3301      	adds	r3, #1
 8014600:	643b      	str	r3, [r7, #64]	; 0x40
 8014602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014604:	2b03      	cmp	r3, #3
 8014606:	d9dc      	bls.n	80145c2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014608:	2300      	movs	r3, #0
 801460a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801460c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801460e:	2b00      	cmp	r3, #0
 8014610:	d002      	beq.n	8014618 <find_volume+0x184>
 8014612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014614:	3b01      	subs	r3, #1
 8014616:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014620:	4413      	add	r3, r2
 8014622:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014626:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801462a:	2b00      	cmp	r3, #0
 801462c:	d005      	beq.n	801463a <find_volume+0x1a6>
 801462e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014630:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014632:	f7ff fed9 	bl	80143e8 <check_fs>
 8014636:	4603      	mov	r3, r0
 8014638:	e000      	b.n	801463c <find_volume+0x1a8>
 801463a:	2303      	movs	r3, #3
 801463c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014644:	2b01      	cmp	r3, #1
 8014646:	d905      	bls.n	8014654 <find_volume+0x1c0>
 8014648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801464a:	3301      	adds	r3, #1
 801464c:	643b      	str	r3, [r7, #64]	; 0x40
 801464e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014650:	2b03      	cmp	r3, #3
 8014652:	d9e1      	bls.n	8014618 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014658:	2b04      	cmp	r3, #4
 801465a:	d101      	bne.n	8014660 <find_volume+0x1cc>
 801465c:	2301      	movs	r3, #1
 801465e:	e195      	b.n	801498c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014660:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014664:	2b01      	cmp	r3, #1
 8014666:	d901      	bls.n	801466c <find_volume+0x1d8>
 8014668:	230d      	movs	r3, #13
 801466a:	e18f      	b.n	801498c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801466e:	3338      	adds	r3, #56	; 0x38
 8014670:	330b      	adds	r3, #11
 8014672:	4618      	mov	r0, r3
 8014674:	f7fe fba4 	bl	8012dc0 <ld_word>
 8014678:	4603      	mov	r3, r0
 801467a:	461a      	mov	r2, r3
 801467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801467e:	899b      	ldrh	r3, [r3, #12]
 8014680:	429a      	cmp	r2, r3
 8014682:	d001      	beq.n	8014688 <find_volume+0x1f4>
 8014684:	230d      	movs	r3, #13
 8014686:	e181      	b.n	801498c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801468a:	3338      	adds	r3, #56	; 0x38
 801468c:	3316      	adds	r3, #22
 801468e:	4618      	mov	r0, r3
 8014690:	f7fe fb96 	bl	8012dc0 <ld_word>
 8014694:	4603      	mov	r3, r0
 8014696:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801469a:	2b00      	cmp	r3, #0
 801469c:	d106      	bne.n	80146ac <find_volume+0x218>
 801469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146a0:	3338      	adds	r3, #56	; 0x38
 80146a2:	3324      	adds	r3, #36	; 0x24
 80146a4:	4618      	mov	r0, r3
 80146a6:	f7fe fba3 	bl	8012df0 <ld_dword>
 80146aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80146ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80146b0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80146b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80146b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80146bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146be:	789b      	ldrb	r3, [r3, #2]
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	d005      	beq.n	80146d0 <find_volume+0x23c>
 80146c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c6:	789b      	ldrb	r3, [r3, #2]
 80146c8:	2b02      	cmp	r3, #2
 80146ca:	d001      	beq.n	80146d0 <find_volume+0x23c>
 80146cc:	230d      	movs	r3, #13
 80146ce:	e15d      	b.n	801498c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80146d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146d2:	789b      	ldrb	r3, [r3, #2]
 80146d4:	461a      	mov	r2, r3
 80146d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146d8:	fb02 f303 	mul.w	r3, r2, r3
 80146dc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80146de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80146e4:	b29a      	uxth	r2, r3
 80146e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80146ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ec:	895b      	ldrh	r3, [r3, #10]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d008      	beq.n	8014704 <find_volume+0x270>
 80146f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f4:	895b      	ldrh	r3, [r3, #10]
 80146f6:	461a      	mov	r2, r3
 80146f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fa:	895b      	ldrh	r3, [r3, #10]
 80146fc:	3b01      	subs	r3, #1
 80146fe:	4013      	ands	r3, r2
 8014700:	2b00      	cmp	r3, #0
 8014702:	d001      	beq.n	8014708 <find_volume+0x274>
 8014704:	230d      	movs	r3, #13
 8014706:	e141      	b.n	801498c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801470a:	3338      	adds	r3, #56	; 0x38
 801470c:	3311      	adds	r3, #17
 801470e:	4618      	mov	r0, r3
 8014710:	f7fe fb56 	bl	8012dc0 <ld_word>
 8014714:	4603      	mov	r3, r0
 8014716:	461a      	mov	r2, r3
 8014718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471e:	891b      	ldrh	r3, [r3, #8]
 8014720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014722:	8992      	ldrh	r2, [r2, #12]
 8014724:	0952      	lsrs	r2, r2, #5
 8014726:	b292      	uxth	r2, r2
 8014728:	fbb3 f1f2 	udiv	r1, r3, r2
 801472c:	fb02 f201 	mul.w	r2, r2, r1
 8014730:	1a9b      	subs	r3, r3, r2
 8014732:	b29b      	uxth	r3, r3
 8014734:	2b00      	cmp	r3, #0
 8014736:	d001      	beq.n	801473c <find_volume+0x2a8>
 8014738:	230d      	movs	r3, #13
 801473a:	e127      	b.n	801498c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473e:	3338      	adds	r3, #56	; 0x38
 8014740:	3313      	adds	r3, #19
 8014742:	4618      	mov	r0, r3
 8014744:	f7fe fb3c 	bl	8012dc0 <ld_word>
 8014748:	4603      	mov	r3, r0
 801474a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801474c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801474e:	2b00      	cmp	r3, #0
 8014750:	d106      	bne.n	8014760 <find_volume+0x2cc>
 8014752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014754:	3338      	adds	r3, #56	; 0x38
 8014756:	3320      	adds	r3, #32
 8014758:	4618      	mov	r0, r3
 801475a:	f7fe fb49 	bl	8012df0 <ld_dword>
 801475e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014762:	3338      	adds	r3, #56	; 0x38
 8014764:	330e      	adds	r3, #14
 8014766:	4618      	mov	r0, r3
 8014768:	f7fe fb2a 	bl	8012dc0 <ld_word>
 801476c:	4603      	mov	r3, r0
 801476e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014770:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014772:	2b00      	cmp	r3, #0
 8014774:	d104      	bne.n	8014780 <find_volume+0x2ec>
 8014776:	230d      	movs	r3, #13
 8014778:	e108      	b.n	801498c <find_volume+0x4f8>
 801477a:	bf00      	nop
 801477c:	20045330 	.word	0x20045330

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014780:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014784:	4413      	add	r3, r2
 8014786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014788:	8911      	ldrh	r1, [r2, #8]
 801478a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801478c:	8992      	ldrh	r2, [r2, #12]
 801478e:	0952      	lsrs	r2, r2, #5
 8014790:	b292      	uxth	r2, r2
 8014792:	fbb1 f2f2 	udiv	r2, r1, r2
 8014796:	b292      	uxth	r2, r2
 8014798:	4413      	add	r3, r2
 801479a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801479c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d201      	bcs.n	80147a8 <find_volume+0x314>
 80147a4:	230d      	movs	r3, #13
 80147a6:	e0f1      	b.n	801498c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80147a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80147aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ac:	1ad3      	subs	r3, r2, r3
 80147ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147b0:	8952      	ldrh	r2, [r2, #10]
 80147b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80147b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80147b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d101      	bne.n	80147c2 <find_volume+0x32e>
 80147be:	230d      	movs	r3, #13
 80147c0:	e0e4      	b.n	801498c <find_volume+0x4f8>
		fmt = FS_FAT32;
 80147c2:	2303      	movs	r3, #3
 80147c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80147c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80147ce:	4293      	cmp	r3, r2
 80147d0:	d802      	bhi.n	80147d8 <find_volume+0x344>
 80147d2:	2302      	movs	r3, #2
 80147d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80147d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147da:	f640 72f5 	movw	r2, #4085	; 0xff5
 80147de:	4293      	cmp	r3, r2
 80147e0:	d802      	bhi.n	80147e8 <find_volume+0x354>
 80147e2:	2301      	movs	r3, #1
 80147e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80147e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ea:	1c9a      	adds	r2, r3, #2
 80147ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ee:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80147f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80147f4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80147f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80147f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147fa:	441a      	add	r2, r3
 80147fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147fe:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8014800:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014804:	441a      	add	r2, r3
 8014806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014808:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801480a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801480e:	2b03      	cmp	r3, #3
 8014810:	d11e      	bne.n	8014850 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014814:	3338      	adds	r3, #56	; 0x38
 8014816:	332a      	adds	r3, #42	; 0x2a
 8014818:	4618      	mov	r0, r3
 801481a:	f7fe fad1 	bl	8012dc0 <ld_word>
 801481e:	4603      	mov	r3, r0
 8014820:	2b00      	cmp	r3, #0
 8014822:	d001      	beq.n	8014828 <find_volume+0x394>
 8014824:	230d      	movs	r3, #13
 8014826:	e0b1      	b.n	801498c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801482a:	891b      	ldrh	r3, [r3, #8]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d001      	beq.n	8014834 <find_volume+0x3a0>
 8014830:	230d      	movs	r3, #13
 8014832:	e0ab      	b.n	801498c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014836:	3338      	adds	r3, #56	; 0x38
 8014838:	332c      	adds	r3, #44	; 0x2c
 801483a:	4618      	mov	r0, r3
 801483c:	f7fe fad8 	bl	8012df0 <ld_dword>
 8014840:	4602      	mov	r2, r0
 8014842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014844:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014848:	69db      	ldr	r3, [r3, #28]
 801484a:	009b      	lsls	r3, r3, #2
 801484c:	647b      	str	r3, [r7, #68]	; 0x44
 801484e:	e01f      	b.n	8014890 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014852:	891b      	ldrh	r3, [r3, #8]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d101      	bne.n	801485c <find_volume+0x3c8>
 8014858:	230d      	movs	r3, #13
 801485a:	e097      	b.n	801498c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801485e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014862:	441a      	add	r2, r3
 8014864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014866:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014868:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801486c:	2b02      	cmp	r3, #2
 801486e:	d103      	bne.n	8014878 <find_volume+0x3e4>
 8014870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014872:	69db      	ldr	r3, [r3, #28]
 8014874:	005b      	lsls	r3, r3, #1
 8014876:	e00a      	b.n	801488e <find_volume+0x3fa>
 8014878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801487a:	69da      	ldr	r2, [r3, #28]
 801487c:	4613      	mov	r3, r2
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	4413      	add	r3, r2
 8014882:	085a      	lsrs	r2, r3, #1
 8014884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014886:	69db      	ldr	r3, [r3, #28]
 8014888:	f003 0301 	and.w	r3, r3, #1
 801488c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801488e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014892:	6a1a      	ldr	r2, [r3, #32]
 8014894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014896:	899b      	ldrh	r3, [r3, #12]
 8014898:	4619      	mov	r1, r3
 801489a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801489c:	440b      	add	r3, r1
 801489e:	3b01      	subs	r3, #1
 80148a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80148a2:	8989      	ldrh	r1, [r1, #12]
 80148a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d201      	bcs.n	80148b0 <find_volume+0x41c>
 80148ac:	230d      	movs	r3, #13
 80148ae:	e06d      	b.n	801498c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80148b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b2:	f04f 32ff 	mov.w	r2, #4294967295
 80148b6:	615a      	str	r2, [r3, #20]
 80148b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ba:	695a      	ldr	r2, [r3, #20]
 80148bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148be:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80148c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c2:	2280      	movs	r2, #128	; 0x80
 80148c4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80148c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148ca:	2b03      	cmp	r3, #3
 80148cc:	d149      	bne.n	8014962 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80148ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d0:	3338      	adds	r3, #56	; 0x38
 80148d2:	3330      	adds	r3, #48	; 0x30
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7fe fa73 	bl	8012dc0 <ld_word>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b01      	cmp	r3, #1
 80148de:	d140      	bne.n	8014962 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80148e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148e2:	3301      	adds	r3, #1
 80148e4:	4619      	mov	r1, r3
 80148e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80148e8:	f7fe fd1a 	bl	8013320 <move_window>
 80148ec:	4603      	mov	r3, r0
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d137      	bne.n	8014962 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80148f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f4:	2200      	movs	r2, #0
 80148f6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80148f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fa:	3338      	adds	r3, #56	; 0x38
 80148fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014900:	4618      	mov	r0, r3
 8014902:	f7fe fa5d 	bl	8012dc0 <ld_word>
 8014906:	4603      	mov	r3, r0
 8014908:	461a      	mov	r2, r3
 801490a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801490e:	429a      	cmp	r2, r3
 8014910:	d127      	bne.n	8014962 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014914:	3338      	adds	r3, #56	; 0x38
 8014916:	4618      	mov	r0, r3
 8014918:	f7fe fa6a 	bl	8012df0 <ld_dword>
 801491c:	4602      	mov	r2, r0
 801491e:	4b1d      	ldr	r3, [pc, #116]	; (8014994 <find_volume+0x500>)
 8014920:	429a      	cmp	r2, r3
 8014922:	d11e      	bne.n	8014962 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014926:	3338      	adds	r3, #56	; 0x38
 8014928:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801492c:	4618      	mov	r0, r3
 801492e:	f7fe fa5f 	bl	8012df0 <ld_dword>
 8014932:	4602      	mov	r2, r0
 8014934:	4b18      	ldr	r3, [pc, #96]	; (8014998 <find_volume+0x504>)
 8014936:	429a      	cmp	r2, r3
 8014938:	d113      	bne.n	8014962 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493c:	3338      	adds	r3, #56	; 0x38
 801493e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014942:	4618      	mov	r0, r3
 8014944:	f7fe fa54 	bl	8012df0 <ld_dword>
 8014948:	4602      	mov	r2, r0
 801494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014950:	3338      	adds	r3, #56	; 0x38
 8014952:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014956:	4618      	mov	r0, r3
 8014958:	f7fe fa4a 	bl	8012df0 <ld_dword>
 801495c:	4602      	mov	r2, r0
 801495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014960:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014964:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014968:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801496a:	4b0c      	ldr	r3, [pc, #48]	; (801499c <find_volume+0x508>)
 801496c:	881b      	ldrh	r3, [r3, #0]
 801496e:	3301      	adds	r3, #1
 8014970:	b29a      	uxth	r2, r3
 8014972:	4b0a      	ldr	r3, [pc, #40]	; (801499c <find_volume+0x508>)
 8014974:	801a      	strh	r2, [r3, #0]
 8014976:	4b09      	ldr	r3, [pc, #36]	; (801499c <find_volume+0x508>)
 8014978:	881a      	ldrh	r2, [r3, #0]
 801497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014980:	2200      	movs	r2, #0
 8014982:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014984:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014986:	f7fe fc63 	bl	8013250 <clear_lock>
#endif
	return FR_OK;
 801498a:	2300      	movs	r3, #0
}
 801498c:	4618      	mov	r0, r3
 801498e:	3758      	adds	r7, #88	; 0x58
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	41615252 	.word	0x41615252
 8014998:	61417272 	.word	0x61417272
 801499c:	20045334 	.word	0x20045334

080149a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80149aa:	2309      	movs	r3, #9
 80149ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d01c      	beq.n	80149ee <validate+0x4e>
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d018      	beq.n	80149ee <validate+0x4e>
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	781b      	ldrb	r3, [r3, #0]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d013      	beq.n	80149ee <validate+0x4e>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	889a      	ldrh	r2, [r3, #4]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	88db      	ldrh	r3, [r3, #6]
 80149d0:	429a      	cmp	r2, r3
 80149d2:	d10c      	bne.n	80149ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	785b      	ldrb	r3, [r3, #1]
 80149da:	4618      	mov	r0, r3
 80149dc:	f7fe f952 	bl	8012c84 <disk_status>
 80149e0:	4603      	mov	r3, r0
 80149e2:	f003 0301 	and.w	r3, r3, #1
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d101      	bne.n	80149ee <validate+0x4e>
			res = FR_OK;
 80149ea:	2300      	movs	r3, #0
 80149ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80149ee:	7bfb      	ldrb	r3, [r7, #15]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d102      	bne.n	80149fa <validate+0x5a>
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	e000      	b.n	80149fc <validate+0x5c>
 80149fa:	2300      	movs	r3, #0
 80149fc:	683a      	ldr	r2, [r7, #0]
 80149fe:	6013      	str	r3, [r2, #0]
	return res;
 8014a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3710      	adds	r7, #16
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
	...

08014a0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b088      	sub	sp, #32
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	60f8      	str	r0, [r7, #12]
 8014a14:	60b9      	str	r1, [r7, #8]
 8014a16:	4613      	mov	r3, r2
 8014a18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014a1e:	f107 0310 	add.w	r3, r7, #16
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7ff fc9b 	bl	801435e <get_ldnumber>
 8014a28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014a2a:	69fb      	ldr	r3, [r7, #28]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	da01      	bge.n	8014a34 <f_mount+0x28>
 8014a30:	230b      	movs	r3, #11
 8014a32:	e02b      	b.n	8014a8c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014a34:	4a17      	ldr	r2, [pc, #92]	; (8014a94 <f_mount+0x88>)
 8014a36:	69fb      	ldr	r3, [r7, #28]
 8014a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014a3e:	69bb      	ldr	r3, [r7, #24]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d005      	beq.n	8014a50 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014a44:	69b8      	ldr	r0, [r7, #24]
 8014a46:	f7fe fc03 	bl	8013250 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014a4a:	69bb      	ldr	r3, [r7, #24]
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d002      	beq.n	8014a5c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014a5c:	68fa      	ldr	r2, [r7, #12]
 8014a5e:	490d      	ldr	r1, [pc, #52]	; (8014a94 <f_mount+0x88>)
 8014a60:	69fb      	ldr	r3, [r7, #28]
 8014a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d002      	beq.n	8014a72 <f_mount+0x66>
 8014a6c:	79fb      	ldrb	r3, [r7, #7]
 8014a6e:	2b01      	cmp	r3, #1
 8014a70:	d001      	beq.n	8014a76 <f_mount+0x6a>
 8014a72:	2300      	movs	r3, #0
 8014a74:	e00a      	b.n	8014a8c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014a76:	f107 010c 	add.w	r1, r7, #12
 8014a7a:	f107 0308 	add.w	r3, r7, #8
 8014a7e:	2200      	movs	r2, #0
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7ff fd07 	bl	8014494 <find_volume>
 8014a86:	4603      	mov	r3, r0
 8014a88:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3720      	adds	r7, #32
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	20045330 	.word	0x20045330

08014a98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b098      	sub	sp, #96	; 0x60
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	60f8      	str	r0, [r7, #12]
 8014aa0:	60b9      	str	r1, [r7, #8]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d101      	bne.n	8014ab0 <f_open+0x18>
 8014aac:	2309      	movs	r3, #9
 8014aae:	e1ba      	b.n	8014e26 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014ab0:	79fb      	ldrb	r3, [r7, #7]
 8014ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014ab6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014ab8:	79fa      	ldrb	r2, [r7, #7]
 8014aba:	f107 0110 	add.w	r1, r7, #16
 8014abe:	f107 0308 	add.w	r3, r7, #8
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7ff fce6 	bl	8014494 <find_volume>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	f040 819e 	bne.w	8014e14 <f_open+0x37c>
		dj.obj.fs = fs;
 8014ad8:	693b      	ldr	r3, [r7, #16]
 8014ada:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014adc:	68ba      	ldr	r2, [r7, #8]
 8014ade:	f107 0314 	add.w	r3, r7, #20
 8014ae2:	4611      	mov	r1, r2
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7ff fba5 	bl	8014234 <follow_path>
 8014aea:	4603      	mov	r3, r0
 8014aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014af0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d11a      	bne.n	8014b2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014af8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014afc:	b25b      	sxtb	r3, r3
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	da03      	bge.n	8014b0a <f_open+0x72>
				res = FR_INVALID_NAME;
 8014b02:	2306      	movs	r3, #6
 8014b04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014b08:	e011      	b.n	8014b2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014b0a:	79fb      	ldrb	r3, [r7, #7]
 8014b0c:	f023 0301 	bic.w	r3, r3, #1
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	bf14      	ite	ne
 8014b14:	2301      	movne	r3, #1
 8014b16:	2300      	moveq	r3, #0
 8014b18:	b2db      	uxtb	r3, r3
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	f107 0314 	add.w	r3, r7, #20
 8014b20:	4611      	mov	r1, r2
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7fe fa4c 	bl	8012fc0 <chk_lock>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014b2e:	79fb      	ldrb	r3, [r7, #7]
 8014b30:	f003 031c 	and.w	r3, r3, #28
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d07e      	beq.n	8014c36 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8014b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d017      	beq.n	8014b70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014b40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b44:	2b04      	cmp	r3, #4
 8014b46:	d10e      	bne.n	8014b66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014b48:	f7fe fa96 	bl	8013078 <enq_lock>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d006      	beq.n	8014b60 <f_open+0xc8>
 8014b52:	f107 0314 	add.w	r3, r7, #20
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7ff fa52 	bl	8014000 <dir_register>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	e000      	b.n	8014b62 <f_open+0xca>
 8014b60:	2312      	movs	r3, #18
 8014b62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014b66:	79fb      	ldrb	r3, [r7, #7]
 8014b68:	f043 0308 	orr.w	r3, r3, #8
 8014b6c:	71fb      	strb	r3, [r7, #7]
 8014b6e:	e010      	b.n	8014b92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014b70:	7ebb      	ldrb	r3, [r7, #26]
 8014b72:	f003 0311 	and.w	r3, r3, #17
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d003      	beq.n	8014b82 <f_open+0xea>
					res = FR_DENIED;
 8014b7a:	2307      	movs	r3, #7
 8014b7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014b80:	e007      	b.n	8014b92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014b82:	79fb      	ldrb	r3, [r7, #7]
 8014b84:	f003 0304 	and.w	r3, r3, #4
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d002      	beq.n	8014b92 <f_open+0xfa>
 8014b8c:	2308      	movs	r3, #8
 8014b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d167      	bne.n	8014c6a <f_open+0x1d2>
 8014b9a:	79fb      	ldrb	r3, [r7, #7]
 8014b9c:	f003 0308 	and.w	r3, r3, #8
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d062      	beq.n	8014c6a <f_open+0x1d2>
				dw = GET_FATTIME();
 8014ba4:	4ba2      	ldr	r3, [pc, #648]	; (8014e30 <f_open+0x398>)
 8014ba6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014baa:	330e      	adds	r3, #14
 8014bac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7fe f95c 	bl	8012e6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bb6:	3316      	adds	r3, #22
 8014bb8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7fe f956 	bl	8012e6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bc2:	330b      	adds	r3, #11
 8014bc4:	2220      	movs	r2, #32
 8014bc6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014bcc:	4611      	mov	r1, r2
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7ff f925 	bl	8013e1e <ld_clust>
 8014bd4:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014bda:	2200      	movs	r2, #0
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7ff f93d 	bl	8013e5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014be4:	331c      	adds	r3, #28
 8014be6:	2100      	movs	r1, #0
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7fe f93f 	bl	8012e6c <st_dword>
					fs->wflag = 1;
 8014bee:	693b      	ldr	r3, [r7, #16]
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d037      	beq.n	8014c6a <f_open+0x1d2>
						dw = fs->winsect;
 8014bfa:	693b      	ldr	r3, [r7, #16]
 8014bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bfe:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014c00:	f107 0314 	add.w	r3, r7, #20
 8014c04:	2200      	movs	r2, #0
 8014c06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7fe fe2d 	bl	8013868 <remove_chain>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014c14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d126      	bne.n	8014c6a <f_open+0x1d2>
							res = move_window(fs, dw);
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7fe fb7d 	bl	8013320 <move_window>
 8014c26:	4603      	mov	r3, r0
 8014c28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014c2c:	693b      	ldr	r3, [r7, #16]
 8014c2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014c30:	3a01      	subs	r2, #1
 8014c32:	611a      	str	r2, [r3, #16]
 8014c34:	e019      	b.n	8014c6a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014c36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d115      	bne.n	8014c6a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014c3e:	7ebb      	ldrb	r3, [r7, #26]
 8014c40:	f003 0310 	and.w	r3, r3, #16
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d003      	beq.n	8014c50 <f_open+0x1b8>
					res = FR_NO_FILE;
 8014c48:	2304      	movs	r3, #4
 8014c4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014c4e:	e00c      	b.n	8014c6a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014c50:	79fb      	ldrb	r3, [r7, #7]
 8014c52:	f003 0302 	and.w	r3, r3, #2
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d007      	beq.n	8014c6a <f_open+0x1d2>
 8014c5a:	7ebb      	ldrb	r3, [r7, #26]
 8014c5c:	f003 0301 	and.w	r3, r3, #1
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d002      	beq.n	8014c6a <f_open+0x1d2>
						res = FR_DENIED;
 8014c64:	2307      	movs	r3, #7
 8014c66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014c6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d128      	bne.n	8014cc4 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014c72:	79fb      	ldrb	r3, [r7, #7]
 8014c74:	f003 0308 	and.w	r3, r3, #8
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d003      	beq.n	8014c84 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8014c7c:	79fb      	ldrb	r3, [r7, #7]
 8014c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c82:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014c92:	79fb      	ldrb	r3, [r7, #7]
 8014c94:	f023 0301 	bic.w	r3, r3, #1
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	bf14      	ite	ne
 8014c9c:	2301      	movne	r3, #1
 8014c9e:	2300      	moveq	r3, #0
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	f107 0314 	add.w	r3, r7, #20
 8014ca8:	4611      	mov	r1, r2
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7fe fa06 	bl	80130bc <inc_lock>
 8014cb0:	4602      	mov	r2, r0
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	691b      	ldr	r3, [r3, #16]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d102      	bne.n	8014cc4 <f_open+0x22c>
 8014cbe:	2302      	movs	r3, #2
 8014cc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014cc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	f040 80a3 	bne.w	8014e14 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cd2:	4611      	mov	r1, r2
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7ff f8a2 	bl	8013e1e <ld_clust>
 8014cda:	4602      	mov	r2, r0
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ce2:	331c      	adds	r3, #28
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f7fe f883 	bl	8012df0 <ld_dword>
 8014cea:	4602      	mov	r2, r0
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014cf6:	693a      	ldr	r2, [r7, #16]
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	88da      	ldrh	r2, [r3, #6]
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	79fa      	ldrb	r2, [r7, #7]
 8014d08:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	2200      	movs	r2, #0
 8014d14:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	3330      	adds	r3, #48	; 0x30
 8014d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014d24:	2100      	movs	r1, #0
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7fe f8ed 	bl	8012f06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014d2c:	79fb      	ldrb	r3, [r7, #7]
 8014d2e:	f003 0320 	and.w	r3, r3, #32
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d06e      	beq.n	8014e14 <f_open+0x37c>
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	68db      	ldr	r3, [r3, #12]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d06a      	beq.n	8014e14 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	68da      	ldr	r2, [r3, #12]
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	895b      	ldrh	r3, [r3, #10]
 8014d4a:	461a      	mov	r2, r3
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	899b      	ldrh	r3, [r3, #12]
 8014d50:	fb03 f302 	mul.w	r3, r3, r2
 8014d54:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	689b      	ldr	r3, [r3, #8]
 8014d5a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	68db      	ldr	r3, [r3, #12]
 8014d60:	657b      	str	r3, [r7, #84]	; 0x54
 8014d62:	e016      	b.n	8014d92 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7fe fb96 	bl	801349a <get_fat>
 8014d6e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d72:	2b01      	cmp	r3, #1
 8014d74:	d802      	bhi.n	8014d7c <f_open+0x2e4>
 8014d76:	2302      	movs	r3, #2
 8014d78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d82:	d102      	bne.n	8014d8a <f_open+0x2f2>
 8014d84:	2301      	movs	r3, #1
 8014d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014d8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d8e:	1ad3      	subs	r3, r2, r3
 8014d90:	657b      	str	r3, [r7, #84]	; 0x54
 8014d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d103      	bne.n	8014da2 <f_open+0x30a>
 8014d9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d8e0      	bhi.n	8014d64 <f_open+0x2cc>
				}
				fp->clust = clst;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014da6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d131      	bne.n	8014e14 <f_open+0x37c>
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	899b      	ldrh	r3, [r3, #12]
 8014db4:	461a      	mov	r2, r3
 8014db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8014dbc:	fb02 f201 	mul.w	r2, r2, r1
 8014dc0:	1a9b      	subs	r3, r3, r2
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d026      	beq.n	8014e14 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7fe fb46 	bl	801345c <clust2sect>
 8014dd0:	6478      	str	r0, [r7, #68]	; 0x44
 8014dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d103      	bne.n	8014de0 <f_open+0x348>
						res = FR_INT_ERR;
 8014dd8:	2302      	movs	r3, #2
 8014dda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014dde:	e019      	b.n	8014e14 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	899b      	ldrh	r3, [r3, #12]
 8014de4:	461a      	mov	r2, r3
 8014de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014de8:	fbb3 f2f2 	udiv	r2, r3, r2
 8014dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014dee:	441a      	add	r2, r3
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014df4:	693b      	ldr	r3, [r7, #16]
 8014df6:	7858      	ldrb	r0, [r3, #1]
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	6a1a      	ldr	r2, [r3, #32]
 8014e02:	2301      	movs	r3, #1
 8014e04:	f7fd ff7e 	bl	8012d04 <disk_read>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d002      	beq.n	8014e14 <f_open+0x37c>
 8014e0e:	2301      	movs	r3, #1
 8014e10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014e14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d002      	beq.n	8014e22 <f_open+0x38a>
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3760      	adds	r7, #96	; 0x60
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	274a0000 	.word	0x274a0000

08014e34 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b08e      	sub	sp, #56	; 0x38
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	60f8      	str	r0, [r7, #12]
 8014e3c:	60b9      	str	r1, [r7, #8]
 8014e3e:	607a      	str	r2, [r7, #4]
 8014e40:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	f107 0214 	add.w	r2, r7, #20
 8014e52:	4611      	mov	r1, r2
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7ff fda3 	bl	80149a0 <validate>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014e60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d107      	bne.n	8014e78 <f_read+0x44>
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	7d5b      	ldrb	r3, [r3, #21]
 8014e6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d002      	beq.n	8014e7e <f_read+0x4a>
 8014e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e7c:	e135      	b.n	80150ea <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	7d1b      	ldrb	r3, [r3, #20]
 8014e82:	f003 0301 	and.w	r3, r3, #1
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d101      	bne.n	8014e8e <f_read+0x5a>
 8014e8a:	2307      	movs	r3, #7
 8014e8c:	e12d      	b.n	80150ea <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	68da      	ldr	r2, [r3, #12]
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	699b      	ldr	r3, [r3, #24]
 8014e96:	1ad3      	subs	r3, r2, r3
 8014e98:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014e9a:	687a      	ldr	r2, [r7, #4]
 8014e9c:	6a3b      	ldr	r3, [r7, #32]
 8014e9e:	429a      	cmp	r2, r3
 8014ea0:	f240 811e 	bls.w	80150e0 <f_read+0x2ac>
 8014ea4:	6a3b      	ldr	r3, [r7, #32]
 8014ea6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014ea8:	e11a      	b.n	80150e0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	699b      	ldr	r3, [r3, #24]
 8014eae:	697a      	ldr	r2, [r7, #20]
 8014eb0:	8992      	ldrh	r2, [r2, #12]
 8014eb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8014eb6:	fb02 f201 	mul.w	r2, r2, r1
 8014eba:	1a9b      	subs	r3, r3, r2
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	f040 80d5 	bne.w	801506c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	699b      	ldr	r3, [r3, #24]
 8014ec6:	697a      	ldr	r2, [r7, #20]
 8014ec8:	8992      	ldrh	r2, [r2, #12]
 8014eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ece:	697a      	ldr	r2, [r7, #20]
 8014ed0:	8952      	ldrh	r2, [r2, #10]
 8014ed2:	3a01      	subs	r2, #1
 8014ed4:	4013      	ands	r3, r2
 8014ed6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014ed8:	69fb      	ldr	r3, [r7, #28]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d12f      	bne.n	8014f3e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	699b      	ldr	r3, [r3, #24]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d103      	bne.n	8014eee <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	689b      	ldr	r3, [r3, #8]
 8014eea:	633b      	str	r3, [r7, #48]	; 0x30
 8014eec:	e013      	b.n	8014f16 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d007      	beq.n	8014f06 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	699b      	ldr	r3, [r3, #24]
 8014efa:	4619      	mov	r1, r3
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f7fe fdb0 	bl	8013a62 <clmt_clust>
 8014f02:	6338      	str	r0, [r7, #48]	; 0x30
 8014f04:	e007      	b.n	8014f16 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014f06:	68fa      	ldr	r2, [r7, #12]
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	69db      	ldr	r3, [r3, #28]
 8014f0c:	4619      	mov	r1, r3
 8014f0e:	4610      	mov	r0, r2
 8014f10:	f7fe fac3 	bl	801349a <get_fat>
 8014f14:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d804      	bhi.n	8014f26 <f_read+0xf2>
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2202      	movs	r2, #2
 8014f20:	755a      	strb	r2, [r3, #21]
 8014f22:	2302      	movs	r3, #2
 8014f24:	e0e1      	b.n	80150ea <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f2c:	d104      	bne.n	8014f38 <f_read+0x104>
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	2201      	movs	r2, #1
 8014f32:	755a      	strb	r2, [r3, #21]
 8014f34:	2301      	movs	r3, #1
 8014f36:	e0d8      	b.n	80150ea <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f3c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014f3e:	697a      	ldr	r2, [r7, #20]
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	69db      	ldr	r3, [r3, #28]
 8014f44:	4619      	mov	r1, r3
 8014f46:	4610      	mov	r0, r2
 8014f48:	f7fe fa88 	bl	801345c <clust2sect>
 8014f4c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014f4e:	69bb      	ldr	r3, [r7, #24]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d104      	bne.n	8014f5e <f_read+0x12a>
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	2202      	movs	r2, #2
 8014f58:	755a      	strb	r2, [r3, #21]
 8014f5a:	2302      	movs	r3, #2
 8014f5c:	e0c5      	b.n	80150ea <f_read+0x2b6>
			sect += csect;
 8014f5e:	69ba      	ldr	r2, [r7, #24]
 8014f60:	69fb      	ldr	r3, [r7, #28]
 8014f62:	4413      	add	r3, r2
 8014f64:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014f66:	697b      	ldr	r3, [r7, #20]
 8014f68:	899b      	ldrh	r3, [r3, #12]
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f72:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d041      	beq.n	8014ffe <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014f7a:	69fa      	ldr	r2, [r7, #28]
 8014f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f7e:	4413      	add	r3, r2
 8014f80:	697a      	ldr	r2, [r7, #20]
 8014f82:	8952      	ldrh	r2, [r2, #10]
 8014f84:	4293      	cmp	r3, r2
 8014f86:	d905      	bls.n	8014f94 <f_read+0x160>
					cc = fs->csize - csect;
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	895b      	ldrh	r3, [r3, #10]
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	1ad3      	subs	r3, r2, r3
 8014f92:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	7858      	ldrb	r0, [r3, #1]
 8014f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f9a:	69ba      	ldr	r2, [r7, #24]
 8014f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f9e:	f7fd feb1 	bl	8012d04 <disk_read>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d004      	beq.n	8014fb2 <f_read+0x17e>
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	2201      	movs	r2, #1
 8014fac:	755a      	strb	r2, [r3, #21]
 8014fae:	2301      	movs	r3, #1
 8014fb0:	e09b      	b.n	80150ea <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	7d1b      	ldrb	r3, [r3, #20]
 8014fb6:	b25b      	sxtb	r3, r3
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	da18      	bge.n	8014fee <f_read+0x1ba>
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	6a1a      	ldr	r2, [r3, #32]
 8014fc0:	69bb      	ldr	r3, [r7, #24]
 8014fc2:	1ad3      	subs	r3, r2, r3
 8014fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fc6:	429a      	cmp	r2, r3
 8014fc8:	d911      	bls.n	8014fee <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	6a1a      	ldr	r2, [r3, #32]
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	1ad3      	subs	r3, r2, r3
 8014fd2:	697a      	ldr	r2, [r7, #20]
 8014fd4:	8992      	ldrh	r2, [r2, #12]
 8014fd6:	fb02 f303 	mul.w	r3, r2, r3
 8014fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fdc:	18d0      	adds	r0, r2, r3
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	899b      	ldrh	r3, [r3, #12]
 8014fe8:	461a      	mov	r2, r3
 8014fea:	f7fd ff6b 	bl	8012ec4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	899b      	ldrh	r3, [r3, #12]
 8014ff2:	461a      	mov	r2, r3
 8014ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ff6:	fb02 f303 	mul.w	r3, r2, r3
 8014ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014ffc:	e05c      	b.n	80150b8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	6a1b      	ldr	r3, [r3, #32]
 8015002:	69ba      	ldr	r2, [r7, #24]
 8015004:	429a      	cmp	r2, r3
 8015006:	d02e      	beq.n	8015066 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	7d1b      	ldrb	r3, [r3, #20]
 801500c:	b25b      	sxtb	r3, r3
 801500e:	2b00      	cmp	r3, #0
 8015010:	da18      	bge.n	8015044 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	7858      	ldrb	r0, [r3, #1]
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	6a1a      	ldr	r2, [r3, #32]
 8015020:	2301      	movs	r3, #1
 8015022:	f7fd fe8f 	bl	8012d44 <disk_write>
 8015026:	4603      	mov	r3, r0
 8015028:	2b00      	cmp	r3, #0
 801502a:	d004      	beq.n	8015036 <f_read+0x202>
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2201      	movs	r2, #1
 8015030:	755a      	strb	r2, [r3, #21]
 8015032:	2301      	movs	r3, #1
 8015034:	e059      	b.n	80150ea <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	7d1b      	ldrb	r3, [r3, #20]
 801503a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801503e:	b2da      	uxtb	r2, r3
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	7858      	ldrb	r0, [r3, #1]
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801504e:	2301      	movs	r3, #1
 8015050:	69ba      	ldr	r2, [r7, #24]
 8015052:	f7fd fe57 	bl	8012d04 <disk_read>
 8015056:	4603      	mov	r3, r0
 8015058:	2b00      	cmp	r3, #0
 801505a:	d004      	beq.n	8015066 <f_read+0x232>
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	2201      	movs	r2, #1
 8015060:	755a      	strb	r2, [r3, #21]
 8015062:	2301      	movs	r3, #1
 8015064:	e041      	b.n	80150ea <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	69ba      	ldr	r2, [r7, #24]
 801506a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	899b      	ldrh	r3, [r3, #12]
 8015070:	4618      	mov	r0, r3
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	699b      	ldr	r3, [r3, #24]
 8015076:	697a      	ldr	r2, [r7, #20]
 8015078:	8992      	ldrh	r2, [r2, #12]
 801507a:	fbb3 f1f2 	udiv	r1, r3, r2
 801507e:	fb02 f201 	mul.w	r2, r2, r1
 8015082:	1a9b      	subs	r3, r3, r2
 8015084:	1ac3      	subs	r3, r0, r3
 8015086:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8015088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	429a      	cmp	r2, r3
 801508e:	d901      	bls.n	8015094 <f_read+0x260>
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	699b      	ldr	r3, [r3, #24]
 801509e:	697a      	ldr	r2, [r7, #20]
 80150a0:	8992      	ldrh	r2, [r2, #12]
 80150a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80150a6:	fb02 f200 	mul.w	r2, r2, r0
 80150aa:	1a9b      	subs	r3, r3, r2
 80150ac:	440b      	add	r3, r1
 80150ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150b0:	4619      	mov	r1, r3
 80150b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150b4:	f7fd ff06 	bl	8012ec4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80150b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150bc:	4413      	add	r3, r2
 80150be:	627b      	str	r3, [r7, #36]	; 0x24
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	699a      	ldr	r2, [r3, #24]
 80150c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150c6:	441a      	add	r2, r3
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	619a      	str	r2, [r3, #24]
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	681a      	ldr	r2, [r3, #0]
 80150d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d2:	441a      	add	r2, r3
 80150d4:	683b      	ldr	r3, [r7, #0]
 80150d6:	601a      	str	r2, [r3, #0]
 80150d8:	687a      	ldr	r2, [r7, #4]
 80150da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150dc:	1ad3      	subs	r3, r2, r3
 80150de:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	f47f aee1 	bne.w	8014eaa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80150e8:	2300      	movs	r3, #0
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3738      	adds	r7, #56	; 0x38
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}

080150f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80150f2:	b580      	push	{r7, lr}
 80150f4:	b08c      	sub	sp, #48	; 0x30
 80150f6:	af00      	add	r7, sp, #0
 80150f8:	60f8      	str	r0, [r7, #12]
 80150fa:	60b9      	str	r1, [r7, #8]
 80150fc:	607a      	str	r2, [r7, #4]
 80150fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	2200      	movs	r2, #0
 8015108:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	f107 0210 	add.w	r2, r7, #16
 8015110:	4611      	mov	r1, r2
 8015112:	4618      	mov	r0, r3
 8015114:	f7ff fc44 	bl	80149a0 <validate>
 8015118:	4603      	mov	r3, r0
 801511a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801511e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015122:	2b00      	cmp	r3, #0
 8015124:	d107      	bne.n	8015136 <f_write+0x44>
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	7d5b      	ldrb	r3, [r3, #21]
 801512a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801512e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015132:	2b00      	cmp	r3, #0
 8015134:	d002      	beq.n	801513c <f_write+0x4a>
 8015136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801513a:	e16a      	b.n	8015412 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	7d1b      	ldrb	r3, [r3, #20]
 8015140:	f003 0302 	and.w	r3, r3, #2
 8015144:	2b00      	cmp	r3, #0
 8015146:	d101      	bne.n	801514c <f_write+0x5a>
 8015148:	2307      	movs	r3, #7
 801514a:	e162      	b.n	8015412 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	699a      	ldr	r2, [r3, #24]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	441a      	add	r2, r3
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	699b      	ldr	r3, [r3, #24]
 8015158:	429a      	cmp	r2, r3
 801515a:	f080 814c 	bcs.w	80153f6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	699b      	ldr	r3, [r3, #24]
 8015162:	43db      	mvns	r3, r3
 8015164:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015166:	e146      	b.n	80153f6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	699b      	ldr	r3, [r3, #24]
 801516c:	693a      	ldr	r2, [r7, #16]
 801516e:	8992      	ldrh	r2, [r2, #12]
 8015170:	fbb3 f1f2 	udiv	r1, r3, r2
 8015174:	fb02 f201 	mul.w	r2, r2, r1
 8015178:	1a9b      	subs	r3, r3, r2
 801517a:	2b00      	cmp	r3, #0
 801517c:	f040 80f1 	bne.w	8015362 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	699b      	ldr	r3, [r3, #24]
 8015184:	693a      	ldr	r2, [r7, #16]
 8015186:	8992      	ldrh	r2, [r2, #12]
 8015188:	fbb3 f3f2 	udiv	r3, r3, r2
 801518c:	693a      	ldr	r2, [r7, #16]
 801518e:	8952      	ldrh	r2, [r2, #10]
 8015190:	3a01      	subs	r2, #1
 8015192:	4013      	ands	r3, r2
 8015194:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015196:	69bb      	ldr	r3, [r7, #24]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d143      	bne.n	8015224 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	699b      	ldr	r3, [r3, #24]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d10c      	bne.n	80151be <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	689b      	ldr	r3, [r3, #8]
 80151a8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80151aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d11a      	bne.n	80151e6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2100      	movs	r1, #0
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7fe fbbc 	bl	8013932 <create_chain>
 80151ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80151bc:	e013      	b.n	80151e6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d007      	beq.n	80151d6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	699b      	ldr	r3, [r3, #24]
 80151ca:	4619      	mov	r1, r3
 80151cc:	68f8      	ldr	r0, [r7, #12]
 80151ce:	f7fe fc48 	bl	8013a62 <clmt_clust>
 80151d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80151d4:	e007      	b.n	80151e6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80151d6:	68fa      	ldr	r2, [r7, #12]
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	69db      	ldr	r3, [r3, #28]
 80151dc:	4619      	mov	r1, r3
 80151de:	4610      	mov	r0, r2
 80151e0:	f7fe fba7 	bl	8013932 <create_chain>
 80151e4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80151e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	f000 8109 	beq.w	8015400 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80151ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f0:	2b01      	cmp	r3, #1
 80151f2:	d104      	bne.n	80151fe <f_write+0x10c>
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	2202      	movs	r2, #2
 80151f8:	755a      	strb	r2, [r3, #21]
 80151fa:	2302      	movs	r3, #2
 80151fc:	e109      	b.n	8015412 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80151fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015204:	d104      	bne.n	8015210 <f_write+0x11e>
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	2201      	movs	r2, #1
 801520a:	755a      	strb	r2, [r3, #21]
 801520c:	2301      	movs	r3, #1
 801520e:	e100      	b.n	8015412 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015214:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	689b      	ldr	r3, [r3, #8]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d102      	bne.n	8015224 <f_write+0x132>
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015222:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	7d1b      	ldrb	r3, [r3, #20]
 8015228:	b25b      	sxtb	r3, r3
 801522a:	2b00      	cmp	r3, #0
 801522c:	da18      	bge.n	8015260 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801522e:	693b      	ldr	r3, [r7, #16]
 8015230:	7858      	ldrb	r0, [r3, #1]
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	6a1a      	ldr	r2, [r3, #32]
 801523c:	2301      	movs	r3, #1
 801523e:	f7fd fd81 	bl	8012d44 <disk_write>
 8015242:	4603      	mov	r3, r0
 8015244:	2b00      	cmp	r3, #0
 8015246:	d004      	beq.n	8015252 <f_write+0x160>
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	2201      	movs	r2, #1
 801524c:	755a      	strb	r2, [r3, #21]
 801524e:	2301      	movs	r3, #1
 8015250:	e0df      	b.n	8015412 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	7d1b      	ldrb	r3, [r3, #20]
 8015256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801525a:	b2da      	uxtb	r2, r3
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015260:	693a      	ldr	r2, [r7, #16]
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	69db      	ldr	r3, [r3, #28]
 8015266:	4619      	mov	r1, r3
 8015268:	4610      	mov	r0, r2
 801526a:	f7fe f8f7 	bl	801345c <clust2sect>
 801526e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d104      	bne.n	8015280 <f_write+0x18e>
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2202      	movs	r2, #2
 801527a:	755a      	strb	r2, [r3, #21]
 801527c:	2302      	movs	r3, #2
 801527e:	e0c8      	b.n	8015412 <f_write+0x320>
			sect += csect;
 8015280:	697a      	ldr	r2, [r7, #20]
 8015282:	69bb      	ldr	r3, [r7, #24]
 8015284:	4413      	add	r3, r2
 8015286:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015288:	693b      	ldr	r3, [r7, #16]
 801528a:	899b      	ldrh	r3, [r3, #12]
 801528c:	461a      	mov	r2, r3
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	fbb3 f3f2 	udiv	r3, r3, r2
 8015294:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015296:	6a3b      	ldr	r3, [r7, #32]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d043      	beq.n	8015324 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801529c:	69ba      	ldr	r2, [r7, #24]
 801529e:	6a3b      	ldr	r3, [r7, #32]
 80152a0:	4413      	add	r3, r2
 80152a2:	693a      	ldr	r2, [r7, #16]
 80152a4:	8952      	ldrh	r2, [r2, #10]
 80152a6:	4293      	cmp	r3, r2
 80152a8:	d905      	bls.n	80152b6 <f_write+0x1c4>
					cc = fs->csize - csect;
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	895b      	ldrh	r3, [r3, #10]
 80152ae:	461a      	mov	r2, r3
 80152b0:	69bb      	ldr	r3, [r7, #24]
 80152b2:	1ad3      	subs	r3, r2, r3
 80152b4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	7858      	ldrb	r0, [r3, #1]
 80152ba:	6a3b      	ldr	r3, [r7, #32]
 80152bc:	697a      	ldr	r2, [r7, #20]
 80152be:	69f9      	ldr	r1, [r7, #28]
 80152c0:	f7fd fd40 	bl	8012d44 <disk_write>
 80152c4:	4603      	mov	r3, r0
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d004      	beq.n	80152d4 <f_write+0x1e2>
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	2201      	movs	r2, #1
 80152ce:	755a      	strb	r2, [r3, #21]
 80152d0:	2301      	movs	r3, #1
 80152d2:	e09e      	b.n	8015412 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	6a1a      	ldr	r2, [r3, #32]
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	1ad3      	subs	r3, r2, r3
 80152dc:	6a3a      	ldr	r2, [r7, #32]
 80152de:	429a      	cmp	r2, r3
 80152e0:	d918      	bls.n	8015314 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	6a1a      	ldr	r2, [r3, #32]
 80152ec:	697b      	ldr	r3, [r7, #20]
 80152ee:	1ad3      	subs	r3, r2, r3
 80152f0:	693a      	ldr	r2, [r7, #16]
 80152f2:	8992      	ldrh	r2, [r2, #12]
 80152f4:	fb02 f303 	mul.w	r3, r2, r3
 80152f8:	69fa      	ldr	r2, [r7, #28]
 80152fa:	18d1      	adds	r1, r2, r3
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	899b      	ldrh	r3, [r3, #12]
 8015300:	461a      	mov	r2, r3
 8015302:	f7fd fddf 	bl	8012ec4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	7d1b      	ldrb	r3, [r3, #20]
 801530a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801530e:	b2da      	uxtb	r2, r3
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	899b      	ldrh	r3, [r3, #12]
 8015318:	461a      	mov	r2, r3
 801531a:	6a3b      	ldr	r3, [r7, #32]
 801531c:	fb02 f303 	mul.w	r3, r2, r3
 8015320:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015322:	e04b      	b.n	80153bc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	6a1b      	ldr	r3, [r3, #32]
 8015328:	697a      	ldr	r2, [r7, #20]
 801532a:	429a      	cmp	r2, r3
 801532c:	d016      	beq.n	801535c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	699a      	ldr	r2, [r3, #24]
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015336:	429a      	cmp	r2, r3
 8015338:	d210      	bcs.n	801535c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801533a:	693b      	ldr	r3, [r7, #16]
 801533c:	7858      	ldrb	r0, [r3, #1]
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015344:	2301      	movs	r3, #1
 8015346:	697a      	ldr	r2, [r7, #20]
 8015348:	f7fd fcdc 	bl	8012d04 <disk_read>
 801534c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801534e:	2b00      	cmp	r3, #0
 8015350:	d004      	beq.n	801535c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2201      	movs	r2, #1
 8015356:	755a      	strb	r2, [r3, #21]
 8015358:	2301      	movs	r3, #1
 801535a:	e05a      	b.n	8015412 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	697a      	ldr	r2, [r7, #20]
 8015360:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015362:	693b      	ldr	r3, [r7, #16]
 8015364:	899b      	ldrh	r3, [r3, #12]
 8015366:	4618      	mov	r0, r3
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	699b      	ldr	r3, [r3, #24]
 801536c:	693a      	ldr	r2, [r7, #16]
 801536e:	8992      	ldrh	r2, [r2, #12]
 8015370:	fbb3 f1f2 	udiv	r1, r3, r2
 8015374:	fb02 f201 	mul.w	r2, r2, r1
 8015378:	1a9b      	subs	r3, r3, r2
 801537a:	1ac3      	subs	r3, r0, r3
 801537c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801537e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	429a      	cmp	r2, r3
 8015384:	d901      	bls.n	801538a <f_write+0x298>
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	699b      	ldr	r3, [r3, #24]
 8015394:	693a      	ldr	r2, [r7, #16]
 8015396:	8992      	ldrh	r2, [r2, #12]
 8015398:	fbb3 f0f2 	udiv	r0, r3, r2
 801539c:	fb02 f200 	mul.w	r2, r2, r0
 80153a0:	1a9b      	subs	r3, r3, r2
 80153a2:	440b      	add	r3, r1
 80153a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153a6:	69f9      	ldr	r1, [r7, #28]
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7fd fd8b 	bl	8012ec4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	7d1b      	ldrb	r3, [r3, #20]
 80153b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80153b6:	b2da      	uxtb	r2, r3
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80153bc:	69fa      	ldr	r2, [r7, #28]
 80153be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c0:	4413      	add	r3, r2
 80153c2:	61fb      	str	r3, [r7, #28]
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	699a      	ldr	r2, [r3, #24]
 80153c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ca:	441a      	add	r2, r3
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	619a      	str	r2, [r3, #24]
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	68da      	ldr	r2, [r3, #12]
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	699b      	ldr	r3, [r3, #24]
 80153d8:	429a      	cmp	r2, r3
 80153da:	bf38      	it	cc
 80153dc:	461a      	movcc	r2, r3
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	60da      	str	r2, [r3, #12]
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	681a      	ldr	r2, [r3, #0]
 80153e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e8:	441a      	add	r2, r3
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	601a      	str	r2, [r3, #0]
 80153ee:	687a      	ldr	r2, [r7, #4]
 80153f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f2:	1ad3      	subs	r3, r2, r3
 80153f4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	f47f aeb5 	bne.w	8015168 <f_write+0x76>
 80153fe:	e000      	b.n	8015402 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015400:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	7d1b      	ldrb	r3, [r3, #20]
 8015406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801540a:	b2da      	uxtb	r2, r3
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015410:	2300      	movs	r3, #0
}
 8015412:	4618      	mov	r0, r3
 8015414:	3730      	adds	r7, #48	; 0x30
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
	...

0801541c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b086      	sub	sp, #24
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	f107 0208 	add.w	r2, r7, #8
 801542a:	4611      	mov	r1, r2
 801542c:	4618      	mov	r0, r3
 801542e:	f7ff fab7 	bl	80149a0 <validate>
 8015432:	4603      	mov	r3, r0
 8015434:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015436:	7dfb      	ldrb	r3, [r7, #23]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d167      	bne.n	801550c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	7d1b      	ldrb	r3, [r3, #20]
 8015440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015444:	2b00      	cmp	r3, #0
 8015446:	d061      	beq.n	801550c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	7d1b      	ldrb	r3, [r3, #20]
 801544c:	b25b      	sxtb	r3, r3
 801544e:	2b00      	cmp	r3, #0
 8015450:	da15      	bge.n	801547e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	7858      	ldrb	r0, [r3, #1]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6a1a      	ldr	r2, [r3, #32]
 8015460:	2301      	movs	r3, #1
 8015462:	f7fd fc6f 	bl	8012d44 <disk_write>
 8015466:	4603      	mov	r3, r0
 8015468:	2b00      	cmp	r3, #0
 801546a:	d001      	beq.n	8015470 <f_sync+0x54>
 801546c:	2301      	movs	r3, #1
 801546e:	e04e      	b.n	801550e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	7d1b      	ldrb	r3, [r3, #20]
 8015474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015478:	b2da      	uxtb	r2, r3
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801547e:	4b26      	ldr	r3, [pc, #152]	; (8015518 <f_sync+0xfc>)
 8015480:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015482:	68ba      	ldr	r2, [r7, #8]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015488:	4619      	mov	r1, r3
 801548a:	4610      	mov	r0, r2
 801548c:	f7fd ff48 	bl	8013320 <move_window>
 8015490:	4603      	mov	r3, r0
 8015492:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015494:	7dfb      	ldrb	r3, [r7, #23]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d138      	bne.n	801550c <f_sync+0xf0>
					dir = fp->dir_ptr;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801549e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	330b      	adds	r3, #11
 80154a4:	781a      	ldrb	r2, [r3, #0]
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	330b      	adds	r3, #11
 80154aa:	f042 0220 	orr.w	r2, r2, #32
 80154ae:	b2d2      	uxtb	r2, r2
 80154b0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	6818      	ldr	r0, [r3, #0]
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	689b      	ldr	r3, [r3, #8]
 80154ba:	461a      	mov	r2, r3
 80154bc:	68f9      	ldr	r1, [r7, #12]
 80154be:	f7fe fccd 	bl	8013e5c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	f103 021c 	add.w	r2, r3, #28
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	68db      	ldr	r3, [r3, #12]
 80154cc:	4619      	mov	r1, r3
 80154ce:	4610      	mov	r0, r2
 80154d0:	f7fd fccc 	bl	8012e6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	3316      	adds	r3, #22
 80154d8:	6939      	ldr	r1, [r7, #16]
 80154da:	4618      	mov	r0, r3
 80154dc:	f7fd fcc6 	bl	8012e6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	3312      	adds	r3, #18
 80154e4:	2100      	movs	r1, #0
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7fd fca5 	bl	8012e36 <st_word>
					fs->wflag = 1;
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	2201      	movs	r2, #1
 80154f0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7fd ff41 	bl	801337c <sync_fs>
 80154fa:	4603      	mov	r3, r0
 80154fc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	7d1b      	ldrb	r3, [r3, #20]
 8015502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015506:	b2da      	uxtb	r2, r3
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801550c:	7dfb      	ldrb	r3, [r7, #23]
}
 801550e:	4618      	mov	r0, r3
 8015510:	3718      	adds	r7, #24
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}
 8015516:	bf00      	nop
 8015518:	274a0000 	.word	0x274a0000

0801551c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b084      	sub	sp, #16
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f7ff ff79 	bl	801541c <f_sync>
 801552a:	4603      	mov	r3, r0
 801552c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801552e:	7bfb      	ldrb	r3, [r7, #15]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d118      	bne.n	8015566 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f107 0208 	add.w	r2, r7, #8
 801553a:	4611      	mov	r1, r2
 801553c:	4618      	mov	r0, r3
 801553e:	f7ff fa2f 	bl	80149a0 <validate>
 8015542:	4603      	mov	r3, r0
 8015544:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015546:	7bfb      	ldrb	r3, [r7, #15]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d10c      	bne.n	8015566 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	691b      	ldr	r3, [r3, #16]
 8015550:	4618      	mov	r0, r3
 8015552:	f7fd fe41 	bl	80131d8 <dec_lock>
 8015556:	4603      	mov	r3, r0
 8015558:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801555a:	7bfb      	ldrb	r3, [r7, #15]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d102      	bne.n	8015566 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2200      	movs	r2, #0
 8015564:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015566:	7bfb      	ldrb	r3, [r7, #15]
}
 8015568:	4618      	mov	r0, r3
 801556a:	3710      	adds	r7, #16
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}

08015570 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015570:	b590      	push	{r4, r7, lr}
 8015572:	b091      	sub	sp, #68	; 0x44
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8015578:	f107 0108 	add.w	r1, r7, #8
 801557c:	1d3b      	adds	r3, r7, #4
 801557e:	2200      	movs	r2, #0
 8015580:	4618      	mov	r0, r3
 8015582:	f7fe ff87 	bl	8014494 <find_volume>
 8015586:	4603      	mov	r3, r0
 8015588:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801558c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015590:	2b00      	cmp	r3, #0
 8015592:	d131      	bne.n	80155f8 <f_chdir+0x88>
		dj.obj.fs = fs;
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8015598:	687a      	ldr	r2, [r7, #4]
 801559a:	f107 030c 	add.w	r3, r7, #12
 801559e:	4611      	mov	r1, r2
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7fe fe47 	bl	8014234 <follow_path>
 80155a6:	4603      	mov	r3, r0
 80155a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80155ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d11a      	bne.n	80155ea <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80155b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80155b8:	b25b      	sxtb	r3, r3
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	da03      	bge.n	80155c6 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	697a      	ldr	r2, [r7, #20]
 80155c2:	619a      	str	r2, [r3, #24]
 80155c4:	e011      	b.n	80155ea <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80155c6:	7cbb      	ldrb	r3, [r7, #18]
 80155c8:	f003 0310 	and.w	r3, r3, #16
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d009      	beq.n	80155e4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155d4:	68bc      	ldr	r4, [r7, #8]
 80155d6:	4611      	mov	r1, r2
 80155d8:	4618      	mov	r0, r3
 80155da:	f7fe fc20 	bl	8013e1e <ld_clust>
 80155de:	4603      	mov	r3, r0
 80155e0:	61a3      	str	r3, [r4, #24]
 80155e2:	e002      	b.n	80155ea <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80155e4:	2305      	movs	r3, #5
 80155e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80155ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155ee:	2b04      	cmp	r3, #4
 80155f0:	d102      	bne.n	80155f8 <f_chdir+0x88>
 80155f2:	2305      	movs	r3, #5
 80155f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80155f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80155fc:	4618      	mov	r0, r3
 80155fe:	3744      	adds	r7, #68	; 0x44
 8015600:	46bd      	mov	sp, r7
 8015602:	bd90      	pop	{r4, r7, pc}

08015604 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b090      	sub	sp, #64	; 0x40
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
 801560c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	f107 0208 	add.w	r2, r7, #8
 8015614:	4611      	mov	r1, r2
 8015616:	4618      	mov	r0, r3
 8015618:	f7ff f9c2 	bl	80149a0 <validate>
 801561c:	4603      	mov	r3, r0
 801561e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8015622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015626:	2b00      	cmp	r3, #0
 8015628:	d103      	bne.n	8015632 <f_lseek+0x2e>
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	7d5b      	ldrb	r3, [r3, #21]
 801562e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8015632:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015636:	2b00      	cmp	r3, #0
 8015638:	d002      	beq.n	8015640 <f_lseek+0x3c>
 801563a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801563e:	e201      	b.n	8015a44 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015644:	2b00      	cmp	r3, #0
 8015646:	f000 80d9 	beq.w	80157fc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015650:	d15a      	bne.n	8015708 <f_lseek+0x104>
			tbl = fp->cltbl;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015656:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801565a:	1d1a      	adds	r2, r3, #4
 801565c:	627a      	str	r2, [r7, #36]	; 0x24
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	617b      	str	r3, [r7, #20]
 8015662:	2302      	movs	r3, #2
 8015664:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	689b      	ldr	r3, [r3, #8]
 801566a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801566e:	2b00      	cmp	r3, #0
 8015670:	d03a      	beq.n	80156e8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015674:	613b      	str	r3, [r7, #16]
 8015676:	2300      	movs	r3, #0
 8015678:	62fb      	str	r3, [r7, #44]	; 0x2c
 801567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801567c:	3302      	adds	r3, #2
 801567e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8015680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015682:	60fb      	str	r3, [r7, #12]
 8015684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015686:	3301      	adds	r3, #1
 8015688:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801568e:	4618      	mov	r0, r3
 8015690:	f7fd ff03 	bl	801349a <get_fat>
 8015694:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015698:	2b01      	cmp	r3, #1
 801569a:	d804      	bhi.n	80156a6 <f_lseek+0xa2>
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2202      	movs	r2, #2
 80156a0:	755a      	strb	r2, [r3, #21]
 80156a2:	2302      	movs	r3, #2
 80156a4:	e1ce      	b.n	8015a44 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80156a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156ac:	d104      	bne.n	80156b8 <f_lseek+0xb4>
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2201      	movs	r2, #1
 80156b2:	755a      	strb	r2, [r3, #21]
 80156b4:	2301      	movs	r3, #1
 80156b6:	e1c5      	b.n	8015a44 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	3301      	adds	r3, #1
 80156bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156be:	429a      	cmp	r2, r3
 80156c0:	d0de      	beq.n	8015680 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80156c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156c4:	697b      	ldr	r3, [r7, #20]
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d809      	bhi.n	80156de <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80156ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156cc:	1d1a      	adds	r2, r3, #4
 80156ce:	627a      	str	r2, [r7, #36]	; 0x24
 80156d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156d2:	601a      	str	r2, [r3, #0]
 80156d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d6:	1d1a      	adds	r2, r3, #4
 80156d8:	627a      	str	r2, [r7, #36]	; 0x24
 80156da:	693a      	ldr	r2, [r7, #16]
 80156dc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80156de:	68bb      	ldr	r3, [r7, #8]
 80156e0:	69db      	ldr	r3, [r3, #28]
 80156e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d3c4      	bcc.n	8015672 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156ee:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80156f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	429a      	cmp	r2, r3
 80156f6:	d803      	bhi.n	8015700 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80156f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156fa:	2200      	movs	r2, #0
 80156fc:	601a      	str	r2, [r3, #0]
 80156fe:	e19f      	b.n	8015a40 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8015700:	2311      	movs	r3, #17
 8015702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8015706:	e19b      	b.n	8015a40 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	683a      	ldr	r2, [r7, #0]
 801570e:	429a      	cmp	r2, r3
 8015710:	d902      	bls.n	8015718 <f_lseek+0x114>
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	68db      	ldr	r3, [r3, #12]
 8015716:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	683a      	ldr	r2, [r7, #0]
 801571c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	2b00      	cmp	r3, #0
 8015722:	f000 818d 	beq.w	8015a40 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	3b01      	subs	r3, #1
 801572a:	4619      	mov	r1, r3
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f7fe f998 	bl	8013a62 <clmt_clust>
 8015732:	4602      	mov	r2, r0
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015738:	68ba      	ldr	r2, [r7, #8]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	69db      	ldr	r3, [r3, #28]
 801573e:	4619      	mov	r1, r3
 8015740:	4610      	mov	r0, r2
 8015742:	f7fd fe8b 	bl	801345c <clust2sect>
 8015746:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015748:	69bb      	ldr	r3, [r7, #24]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d104      	bne.n	8015758 <f_lseek+0x154>
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2202      	movs	r2, #2
 8015752:	755a      	strb	r2, [r3, #21]
 8015754:	2302      	movs	r3, #2
 8015756:	e175      	b.n	8015a44 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	3b01      	subs	r3, #1
 801575c:	68ba      	ldr	r2, [r7, #8]
 801575e:	8992      	ldrh	r2, [r2, #12]
 8015760:	fbb3 f3f2 	udiv	r3, r3, r2
 8015764:	68ba      	ldr	r2, [r7, #8]
 8015766:	8952      	ldrh	r2, [r2, #10]
 8015768:	3a01      	subs	r2, #1
 801576a:	4013      	ands	r3, r2
 801576c:	69ba      	ldr	r2, [r7, #24]
 801576e:	4413      	add	r3, r2
 8015770:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	699b      	ldr	r3, [r3, #24]
 8015776:	68ba      	ldr	r2, [r7, #8]
 8015778:	8992      	ldrh	r2, [r2, #12]
 801577a:	fbb3 f1f2 	udiv	r1, r3, r2
 801577e:	fb02 f201 	mul.w	r2, r2, r1
 8015782:	1a9b      	subs	r3, r3, r2
 8015784:	2b00      	cmp	r3, #0
 8015786:	f000 815b 	beq.w	8015a40 <f_lseek+0x43c>
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	6a1b      	ldr	r3, [r3, #32]
 801578e:	69ba      	ldr	r2, [r7, #24]
 8015790:	429a      	cmp	r2, r3
 8015792:	f000 8155 	beq.w	8015a40 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	7d1b      	ldrb	r3, [r3, #20]
 801579a:	b25b      	sxtb	r3, r3
 801579c:	2b00      	cmp	r3, #0
 801579e:	da18      	bge.n	80157d2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	7858      	ldrb	r0, [r3, #1]
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6a1a      	ldr	r2, [r3, #32]
 80157ae:	2301      	movs	r3, #1
 80157b0:	f7fd fac8 	bl	8012d44 <disk_write>
 80157b4:	4603      	mov	r3, r0
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d004      	beq.n	80157c4 <f_lseek+0x1c0>
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	2201      	movs	r2, #1
 80157be:	755a      	strb	r2, [r3, #21]
 80157c0:	2301      	movs	r3, #1
 80157c2:	e13f      	b.n	8015a44 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	7d1b      	ldrb	r3, [r3, #20]
 80157c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157cc:	b2da      	uxtb	r2, r3
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	7858      	ldrb	r0, [r3, #1]
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80157dc:	2301      	movs	r3, #1
 80157de:	69ba      	ldr	r2, [r7, #24]
 80157e0:	f7fd fa90 	bl	8012d04 <disk_read>
 80157e4:	4603      	mov	r3, r0
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d004      	beq.n	80157f4 <f_lseek+0x1f0>
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	2201      	movs	r2, #1
 80157ee:	755a      	strb	r2, [r3, #21]
 80157f0:	2301      	movs	r3, #1
 80157f2:	e127      	b.n	8015a44 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	69ba      	ldr	r2, [r7, #24]
 80157f8:	621a      	str	r2, [r3, #32]
 80157fa:	e121      	b.n	8015a40 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	68db      	ldr	r3, [r3, #12]
 8015800:	683a      	ldr	r2, [r7, #0]
 8015802:	429a      	cmp	r2, r3
 8015804:	d908      	bls.n	8015818 <f_lseek+0x214>
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	7d1b      	ldrb	r3, [r3, #20]
 801580a:	f003 0302 	and.w	r3, r3, #2
 801580e:	2b00      	cmp	r3, #0
 8015810:	d102      	bne.n	8015818 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	68db      	ldr	r3, [r3, #12]
 8015816:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	699b      	ldr	r3, [r3, #24]
 801581c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801581e:	2300      	movs	r3, #0
 8015820:	637b      	str	r3, [r7, #52]	; 0x34
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015826:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	2b00      	cmp	r3, #0
 801582c:	f000 80b5 	beq.w	801599a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015830:	68bb      	ldr	r3, [r7, #8]
 8015832:	895b      	ldrh	r3, [r3, #10]
 8015834:	461a      	mov	r2, r3
 8015836:	68bb      	ldr	r3, [r7, #8]
 8015838:	899b      	ldrh	r3, [r3, #12]
 801583a:	fb03 f302 	mul.w	r3, r3, r2
 801583e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015840:	6a3b      	ldr	r3, [r7, #32]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d01b      	beq.n	801587e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	1e5a      	subs	r2, r3, #1
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	fbb2 f2f3 	udiv	r2, r2, r3
 8015850:	6a3b      	ldr	r3, [r7, #32]
 8015852:	1e59      	subs	r1, r3, #1
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801585a:	429a      	cmp	r2, r3
 801585c:	d30f      	bcc.n	801587e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801585e:	6a3b      	ldr	r3, [r7, #32]
 8015860:	1e5a      	subs	r2, r3, #1
 8015862:	69fb      	ldr	r3, [r7, #28]
 8015864:	425b      	negs	r3, r3
 8015866:	401a      	ands	r2, r3
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	699b      	ldr	r3, [r3, #24]
 8015870:	683a      	ldr	r2, [r7, #0]
 8015872:	1ad3      	subs	r3, r2, r3
 8015874:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	69db      	ldr	r3, [r3, #28]
 801587a:	63bb      	str	r3, [r7, #56]	; 0x38
 801587c:	e022      	b.n	80158c4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	689b      	ldr	r3, [r3, #8]
 8015882:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015886:	2b00      	cmp	r3, #0
 8015888:	d119      	bne.n	80158be <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	2100      	movs	r1, #0
 801588e:	4618      	mov	r0, r3
 8015890:	f7fe f84f 	bl	8013932 <create_chain>
 8015894:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015898:	2b01      	cmp	r3, #1
 801589a:	d104      	bne.n	80158a6 <f_lseek+0x2a2>
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2202      	movs	r2, #2
 80158a0:	755a      	strb	r2, [r3, #21]
 80158a2:	2302      	movs	r3, #2
 80158a4:	e0ce      	b.n	8015a44 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ac:	d104      	bne.n	80158b8 <f_lseek+0x2b4>
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2201      	movs	r2, #1
 80158b2:	755a      	strb	r2, [r3, #21]
 80158b4:	2301      	movs	r3, #1
 80158b6:	e0c5      	b.n	8015a44 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80158bc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80158c2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80158c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d067      	beq.n	801599a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80158ca:	e03a      	b.n	8015942 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80158cc:	683a      	ldr	r2, [r7, #0]
 80158ce:	69fb      	ldr	r3, [r7, #28]
 80158d0:	1ad3      	subs	r3, r2, r3
 80158d2:	603b      	str	r3, [r7, #0]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	699a      	ldr	r2, [r3, #24]
 80158d8:	69fb      	ldr	r3, [r7, #28]
 80158da:	441a      	add	r2, r3
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	7d1b      	ldrb	r3, [r3, #20]
 80158e4:	f003 0302 	and.w	r3, r3, #2
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d00b      	beq.n	8015904 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7fe f81e 	bl	8013932 <create_chain>
 80158f6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80158f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d108      	bne.n	8015910 <f_lseek+0x30c>
							ofs = 0; break;
 80158fe:	2300      	movs	r3, #0
 8015900:	603b      	str	r3, [r7, #0]
 8015902:	e022      	b.n	801594a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015908:	4618      	mov	r0, r3
 801590a:	f7fd fdc6 	bl	801349a <get_fat>
 801590e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015916:	d104      	bne.n	8015922 <f_lseek+0x31e>
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	2201      	movs	r2, #1
 801591c:	755a      	strb	r2, [r3, #21]
 801591e:	2301      	movs	r3, #1
 8015920:	e090      	b.n	8015a44 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015924:	2b01      	cmp	r3, #1
 8015926:	d904      	bls.n	8015932 <f_lseek+0x32e>
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	69db      	ldr	r3, [r3, #28]
 801592c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801592e:	429a      	cmp	r2, r3
 8015930:	d304      	bcc.n	801593c <f_lseek+0x338>
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2202      	movs	r2, #2
 8015936:	755a      	strb	r2, [r3, #21]
 8015938:	2302      	movs	r3, #2
 801593a:	e083      	b.n	8015a44 <f_lseek+0x440>
					fp->clust = clst;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015940:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015942:	683a      	ldr	r2, [r7, #0]
 8015944:	69fb      	ldr	r3, [r7, #28]
 8015946:	429a      	cmp	r2, r3
 8015948:	d8c0      	bhi.n	80158cc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	699a      	ldr	r2, [r3, #24]
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	441a      	add	r2, r3
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	899b      	ldrh	r3, [r3, #12]
 801595a:	461a      	mov	r2, r3
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	fbb3 f1f2 	udiv	r1, r3, r2
 8015962:	fb02 f201 	mul.w	r2, r2, r1
 8015966:	1a9b      	subs	r3, r3, r2
 8015968:	2b00      	cmp	r3, #0
 801596a:	d016      	beq.n	801599a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015970:	4618      	mov	r0, r3
 8015972:	f7fd fd73 	bl	801345c <clust2sect>
 8015976:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801597a:	2b00      	cmp	r3, #0
 801597c:	d104      	bne.n	8015988 <f_lseek+0x384>
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	2202      	movs	r2, #2
 8015982:	755a      	strb	r2, [r3, #21]
 8015984:	2302      	movs	r3, #2
 8015986:	e05d      	b.n	8015a44 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	899b      	ldrh	r3, [r3, #12]
 801598c:	461a      	mov	r2, r3
 801598e:	683b      	ldr	r3, [r7, #0]
 8015990:	fbb3 f3f2 	udiv	r3, r3, r2
 8015994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015996:	4413      	add	r3, r2
 8015998:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	699a      	ldr	r2, [r3, #24]
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	68db      	ldr	r3, [r3, #12]
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d90a      	bls.n	80159bc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	699a      	ldr	r2, [r3, #24]
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	7d1b      	ldrb	r3, [r3, #20]
 80159b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159b6:	b2da      	uxtb	r2, r3
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	699b      	ldr	r3, [r3, #24]
 80159c0:	68ba      	ldr	r2, [r7, #8]
 80159c2:	8992      	ldrh	r2, [r2, #12]
 80159c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80159c8:	fb02 f201 	mul.w	r2, r2, r1
 80159cc:	1a9b      	subs	r3, r3, r2
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d036      	beq.n	8015a40 <f_lseek+0x43c>
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	6a1b      	ldr	r3, [r3, #32]
 80159d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80159d8:	429a      	cmp	r2, r3
 80159da:	d031      	beq.n	8015a40 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	7d1b      	ldrb	r3, [r3, #20]
 80159e0:	b25b      	sxtb	r3, r3
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	da18      	bge.n	8015a18 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80159e6:	68bb      	ldr	r3, [r7, #8]
 80159e8:	7858      	ldrb	r0, [r3, #1]
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	6a1a      	ldr	r2, [r3, #32]
 80159f4:	2301      	movs	r3, #1
 80159f6:	f7fd f9a5 	bl	8012d44 <disk_write>
 80159fa:	4603      	mov	r3, r0
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d004      	beq.n	8015a0a <f_lseek+0x406>
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	2201      	movs	r2, #1
 8015a04:	755a      	strb	r2, [r3, #21]
 8015a06:	2301      	movs	r3, #1
 8015a08:	e01c      	b.n	8015a44 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	7d1b      	ldrb	r3, [r3, #20]
 8015a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a12:	b2da      	uxtb	r2, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	7858      	ldrb	r0, [r3, #1]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a22:	2301      	movs	r3, #1
 8015a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a26:	f7fd f96d 	bl	8012d04 <disk_read>
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d004      	beq.n	8015a3a <f_lseek+0x436>
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2201      	movs	r2, #1
 8015a34:	755a      	strb	r2, [r3, #21]
 8015a36:	2301      	movs	r3, #1
 8015a38:	e004      	b.n	8015a44 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a3e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015a40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	3740      	adds	r7, #64	; 0x40
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bd80      	pop	{r7, pc}

08015a4c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b09e      	sub	sp, #120	; 0x78
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8015a54:	2300      	movs	r3, #0
 8015a56:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015a58:	f107 010c 	add.w	r1, r7, #12
 8015a5c:	1d3b      	adds	r3, r7, #4
 8015a5e:	2202      	movs	r2, #2
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7fe fd17 	bl	8014494 <find_volume>
 8015a66:	4603      	mov	r3, r0
 8015a68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8015a70:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	f040 80a4 	bne.w	8015bc2 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8015a7a:	687a      	ldr	r2, [r7, #4]
 8015a7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015a80:	4611      	mov	r1, r2
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7fe fbd6 	bl	8014234 <follow_path>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8015a8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d108      	bne.n	8015aa8 <f_unlink+0x5c>
 8015a96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015a9a:	f003 0320 	and.w	r3, r3, #32
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d002      	beq.n	8015aa8 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8015aa2:	2306      	movs	r3, #6
 8015aa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8015aa8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d108      	bne.n	8015ac2 <f_unlink+0x76>
 8015ab0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015ab4:	2102      	movs	r1, #2
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f7fd fa82 	bl	8012fc0 <chk_lock>
 8015abc:	4603      	mov	r3, r0
 8015abe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8015ac2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d17b      	bne.n	8015bc2 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015aca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015ace:	b25b      	sxtb	r3, r3
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	da03      	bge.n	8015adc <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8015ad4:	2306      	movs	r3, #6
 8015ad6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8015ada:	e008      	b.n	8015aee <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8015adc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015ae0:	f003 0301 	and.w	r3, r3, #1
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d002      	beq.n	8015aee <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8015ae8:	2307      	movs	r3, #7
 8015aea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8015aee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d13d      	bne.n	8015b72 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015afa:	4611      	mov	r1, r2
 8015afc:	4618      	mov	r0, r3
 8015afe:	f7fe f98e 	bl	8013e1e <ld_clust>
 8015b02:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8015b04:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015b08:	f003 0310 	and.w	r3, r3, #16
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d030      	beq.n	8015b72 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	699b      	ldr	r3, [r3, #24]
 8015b14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d103      	bne.n	8015b22 <f_unlink+0xd6>
						res = FR_DENIED;
 8015b1a:	2307      	movs	r3, #7
 8015b1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8015b20:	e027      	b.n	8015b72 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8015b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015b28:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8015b2a:	f107 0310 	add.w	r3, r7, #16
 8015b2e:	2100      	movs	r1, #0
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7fd ffce 	bl	8013ad2 <dir_sdi>
 8015b36:	4603      	mov	r3, r0
 8015b38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8015b3c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d116      	bne.n	8015b72 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8015b44:	f107 0310 	add.w	r3, r7, #16
 8015b48:	2100      	movs	r1, #0
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f7fe f9a6 	bl	8013e9c <dir_read>
 8015b50:	4603      	mov	r3, r0
 8015b52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8015b56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d102      	bne.n	8015b64 <f_unlink+0x118>
 8015b5e:	2307      	movs	r3, #7
 8015b60:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8015b64:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b68:	2b04      	cmp	r3, #4
 8015b6a:	d102      	bne.n	8015b72 <f_unlink+0x126>
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8015b72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d123      	bne.n	8015bc2 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8015b7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7fe fa70 	bl	8014064 <dir_remove>
 8015b84:	4603      	mov	r3, r0
 8015b86:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8015b8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d10c      	bne.n	8015bac <f_unlink+0x160>
 8015b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d009      	beq.n	8015bac <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8015b98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7fd fe61 	bl	8013868 <remove_chain>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8015bac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d106      	bne.n	8015bc2 <f_unlink+0x176>
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f7fd fbe0 	bl	801337c <sync_fs>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015bc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	3778      	adds	r7, #120	; 0x78
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd80      	pop	{r7, pc}
	...

08015bd0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b096      	sub	sp, #88	; 0x58
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015bd8:	f107 0108 	add.w	r1, r7, #8
 8015bdc:	1d3b      	adds	r3, r7, #4
 8015bde:	2202      	movs	r2, #2
 8015be0:	4618      	mov	r0, r3
 8015be2:	f7fe fc57 	bl	8014494 <find_volume>
 8015be6:	4603      	mov	r3, r0
 8015be8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8015bf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	f040 80fe 	bne.w	8015df6 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015bfa:	687a      	ldr	r2, [r7, #4]
 8015bfc:	f107 030c 	add.w	r3, r7, #12
 8015c00:	4611      	mov	r1, r2
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7fe fb16 	bl	8014234 <follow_path>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015c0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d102      	bne.n	8015c1c <f_mkdir+0x4c>
 8015c16:	2308      	movs	r3, #8
 8015c18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8015c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c20:	2b04      	cmp	r3, #4
 8015c22:	d108      	bne.n	8015c36 <f_mkdir+0x66>
 8015c24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015c28:	f003 0320 	and.w	r3, r3, #32
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d002      	beq.n	8015c36 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8015c30:	2306      	movs	r3, #6
 8015c32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8015c36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c3a:	2b04      	cmp	r3, #4
 8015c3c:	f040 80db 	bne.w	8015df6 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015c40:	f107 030c 	add.w	r3, r7, #12
 8015c44:	2100      	movs	r1, #0
 8015c46:	4618      	mov	r0, r3
 8015c48:	f7fd fe73 	bl	8013932 <create_chain>
 8015c4c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015c4e:	68bb      	ldr	r3, [r7, #8]
 8015c50:	895b      	ldrh	r3, [r3, #10]
 8015c52:	461a      	mov	r2, r3
 8015c54:	68bb      	ldr	r3, [r7, #8]
 8015c56:	899b      	ldrh	r3, [r3, #12]
 8015c58:	fb03 f302 	mul.w	r3, r3, r2
 8015c5c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8015c5e:	2300      	movs	r3, #0
 8015c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d102      	bne.n	8015c70 <f_mkdir+0xa0>
 8015c6a:	2307      	movs	r3, #7
 8015c6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8015c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	d102      	bne.n	8015c7c <f_mkdir+0xac>
 8015c76:	2302      	movs	r3, #2
 8015c78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c82:	d102      	bne.n	8015c8a <f_mkdir+0xba>
 8015c84:	2301      	movs	r3, #1
 8015c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015c8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d106      	bne.n	8015ca0 <f_mkdir+0xd0>
 8015c92:	68bb      	ldr	r3, [r7, #8]
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7fd faff 	bl	8013298 <sync_window>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8015ca0:	4b58      	ldr	r3, [pc, #352]	; (8015e04 <f_mkdir+0x234>)
 8015ca2:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015ca4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d16c      	bne.n	8015d86 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8015cac:	68bb      	ldr	r3, [r7, #8]
 8015cae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7fd fbd3 	bl	801345c <clust2sect>
 8015cb6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8015cb8:	68bb      	ldr	r3, [r7, #8]
 8015cba:	3338      	adds	r3, #56	; 0x38
 8015cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8015cbe:	68bb      	ldr	r3, [r7, #8]
 8015cc0:	899b      	ldrh	r3, [r3, #12]
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015cc8:	f7fd f91d 	bl	8012f06 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015ccc:	220b      	movs	r2, #11
 8015cce:	2120      	movs	r1, #32
 8015cd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015cd2:	f7fd f918 	bl	8012f06 <mem_set>
					dir[DIR_Name] = '.';
 8015cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cd8:	222e      	movs	r2, #46	; 0x2e
 8015cda:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cde:	330b      	adds	r3, #11
 8015ce0:	2210      	movs	r2, #16
 8015ce2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ce6:	3316      	adds	r3, #22
 8015ce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015cea:	4618      	mov	r0, r3
 8015cec:	f7fd f8be 	bl	8012e6c <st_dword>
					st_clust(fs, dir, dcl);
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015cf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f7fe f8b0 	bl	8013e5c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cfe:	3320      	adds	r3, #32
 8015d00:	2220      	movs	r2, #32
 8015d02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7fd f8dd 	bl	8012ec4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d0c:	3321      	adds	r3, #33	; 0x21
 8015d0e:	222e      	movs	r2, #46	; 0x2e
 8015d10:	701a      	strb	r2, [r3, #0]
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	781b      	ldrb	r3, [r3, #0]
 8015d1a:	2b03      	cmp	r3, #3
 8015d1c:	d106      	bne.n	8015d2c <f_mkdir+0x15c>
 8015d1e:	68bb      	ldr	r3, [r7, #8]
 8015d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d101      	bne.n	8015d2c <f_mkdir+0x15c>
 8015d28:	2300      	movs	r3, #0
 8015d2a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8015d2c:	68b8      	ldr	r0, [r7, #8]
 8015d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d30:	3320      	adds	r3, #32
 8015d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d34:	4619      	mov	r1, r3
 8015d36:	f7fe f891 	bl	8013e5c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	895b      	ldrh	r3, [r3, #10]
 8015d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8015d40:	e01c      	b.n	8015d7c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8015d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d44:	1c5a      	adds	r2, r3, #1
 8015d46:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015d48:	68ba      	ldr	r2, [r7, #8]
 8015d4a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8015d4c:	68bb      	ldr	r3, [r7, #8]
 8015d4e:	2201      	movs	r2, #1
 8015d50:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7fd fa9f 	bl	8013298 <sync_window>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8015d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d10d      	bne.n	8015d84 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	899b      	ldrh	r3, [r3, #12]
 8015d6c:	461a      	mov	r2, r3
 8015d6e:	2100      	movs	r1, #0
 8015d70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015d72:	f7fd f8c8 	bl	8012f06 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d78:	3b01      	subs	r3, #1
 8015d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8015d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d1df      	bne.n	8015d42 <f_mkdir+0x172>
 8015d82:	e000      	b.n	8015d86 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8015d84:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d107      	bne.n	8015d9e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015d8e:	f107 030c 	add.w	r3, r7, #12
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7fe f934 	bl	8014000 <dir_register>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8015d9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d120      	bne.n	8015de8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015da8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dac:	3316      	adds	r3, #22
 8015dae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7fd f85b 	bl	8012e6c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	f7fe f84d 	bl	8013e5c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dc4:	330b      	adds	r3, #11
 8015dc6:	2210      	movs	r2, #16
 8015dc8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015dca:	68bb      	ldr	r3, [r7, #8]
 8015dcc:	2201      	movs	r2, #1
 8015dce:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d10e      	bne.n	8015df6 <f_mkdir+0x226>
					res = sync_fs(fs);
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7fd face 	bl	801337c <sync_fs>
 8015de0:	4603      	mov	r3, r0
 8015de2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8015de6:	e006      	b.n	8015df6 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015de8:	f107 030c 	add.w	r3, r7, #12
 8015dec:	2200      	movs	r2, #0
 8015dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7fd fd39 	bl	8013868 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015df6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3758      	adds	r7, #88	; 0x58
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}
 8015e02:	bf00      	nop
 8015e04:	274a0000 	.word	0x274a0000

08015e08 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b088      	sub	sp, #32
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	60f8      	str	r0, [r7, #12]
 8015e10:	60b9      	str	r1, [r7, #8]
 8015e12:	607a      	str	r2, [r7, #4]
	int n = 0;
 8015e14:	2300      	movs	r3, #0
 8015e16:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8015e1c:	e017      	b.n	8015e4e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8015e1e:	f107 0310 	add.w	r3, r7, #16
 8015e22:	f107 0114 	add.w	r1, r7, #20
 8015e26:	2201      	movs	r2, #1
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f7ff f803 	bl	8014e34 <f_read>
		if (rc != 1) break;
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	2b01      	cmp	r3, #1
 8015e32:	d112      	bne.n	8015e5a <f_gets+0x52>
		c = s[0];
 8015e34:	7d3b      	ldrb	r3, [r7, #20]
 8015e36:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8015e38:	69bb      	ldr	r3, [r7, #24]
 8015e3a:	1c5a      	adds	r2, r3, #1
 8015e3c:	61ba      	str	r2, [r7, #24]
 8015e3e:	7dfa      	ldrb	r2, [r7, #23]
 8015e40:	701a      	strb	r2, [r3, #0]
		n++;
 8015e42:	69fb      	ldr	r3, [r7, #28]
 8015e44:	3301      	adds	r3, #1
 8015e46:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8015e48:	7dfb      	ldrb	r3, [r7, #23]
 8015e4a:	2b0a      	cmp	r3, #10
 8015e4c:	d007      	beq.n	8015e5e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8015e4e:	68bb      	ldr	r3, [r7, #8]
 8015e50:	3b01      	subs	r3, #1
 8015e52:	69fa      	ldr	r2, [r7, #28]
 8015e54:	429a      	cmp	r2, r3
 8015e56:	dbe2      	blt.n	8015e1e <f_gets+0x16>
 8015e58:	e002      	b.n	8015e60 <f_gets+0x58>
		if (rc != 1) break;
 8015e5a:	bf00      	nop
 8015e5c:	e000      	b.n	8015e60 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8015e5e:	bf00      	nop
	}
	*p = 0;
 8015e60:	69bb      	ldr	r3, [r7, #24]
 8015e62:	2200      	movs	r2, #0
 8015e64:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8015e66:	69fb      	ldr	r3, [r7, #28]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d001      	beq.n	8015e70 <f_gets+0x68>
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	e000      	b.n	8015e72 <f_gets+0x6a>
 8015e70:	2300      	movs	r3, #0
}
 8015e72:	4618      	mov	r0, r3
 8015e74:	3720      	adds	r7, #32
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
	...

08015e7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015e7c:	b480      	push	{r7}
 8015e7e:	b087      	sub	sp, #28
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	60f8      	str	r0, [r7, #12]
 8015e84:	60b9      	str	r1, [r7, #8]
 8015e86:	4613      	mov	r3, r2
 8015e88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015e8a:	2301      	movs	r3, #1
 8015e8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015e92:	4b1f      	ldr	r3, [pc, #124]	; (8015f10 <FATFS_LinkDriverEx+0x94>)
 8015e94:	7a5b      	ldrb	r3, [r3, #9]
 8015e96:	b2db      	uxtb	r3, r3
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d131      	bne.n	8015f00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015e9c:	4b1c      	ldr	r3, [pc, #112]	; (8015f10 <FATFS_LinkDriverEx+0x94>)
 8015e9e:	7a5b      	ldrb	r3, [r3, #9]
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	461a      	mov	r2, r3
 8015ea4:	4b1a      	ldr	r3, [pc, #104]	; (8015f10 <FATFS_LinkDriverEx+0x94>)
 8015ea6:	2100      	movs	r1, #0
 8015ea8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015eaa:	4b19      	ldr	r3, [pc, #100]	; (8015f10 <FATFS_LinkDriverEx+0x94>)
 8015eac:	7a5b      	ldrb	r3, [r3, #9]
 8015eae:	b2db      	uxtb	r3, r3
 8015eb0:	4a17      	ldr	r2, [pc, #92]	; (8015f10 <FATFS_LinkDriverEx+0x94>)
 8015eb2:	009b      	lsls	r3, r3, #2
 8015eb4:	4413      	add	r3, r2
 8015eb6:	68fa      	ldr	r2, [r7, #12]
 8015eb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015eba:	4b15      	ldr	r3, [pc, #84]	; (8015f10 <FATFS_LinkDriverEx+0x94>)
 8015ebc:	7a5b      	ldrb	r3, [r3, #9]
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	461a      	mov	r2, r3
 8015ec2:	4b13      	ldr	r3, [pc, #76]	; (8015f10 <FATFS_LinkDriverEx+0x94>)
 8015ec4:	4413      	add	r3, r2
 8015ec6:	79fa      	ldrb	r2, [r7, #7]
 8015ec8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015eca:	4b11      	ldr	r3, [pc, #68]	; (8015f10 <FATFS_LinkDriverEx+0x94>)
 8015ecc:	7a5b      	ldrb	r3, [r3, #9]
 8015ece:	b2db      	uxtb	r3, r3
 8015ed0:	1c5a      	adds	r2, r3, #1
 8015ed2:	b2d1      	uxtb	r1, r2
 8015ed4:	4a0e      	ldr	r2, [pc, #56]	; (8015f10 <FATFS_LinkDriverEx+0x94>)
 8015ed6:	7251      	strb	r1, [r2, #9]
 8015ed8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015eda:	7dbb      	ldrb	r3, [r7, #22]
 8015edc:	3330      	adds	r3, #48	; 0x30
 8015ede:	b2da      	uxtb	r2, r3
 8015ee0:	68bb      	ldr	r3, [r7, #8]
 8015ee2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	3301      	adds	r3, #1
 8015ee8:	223a      	movs	r2, #58	; 0x3a
 8015eea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015eec:	68bb      	ldr	r3, [r7, #8]
 8015eee:	3302      	adds	r3, #2
 8015ef0:	222f      	movs	r2, #47	; 0x2f
 8015ef2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015ef4:	68bb      	ldr	r3, [r7, #8]
 8015ef6:	3303      	adds	r3, #3
 8015ef8:	2200      	movs	r2, #0
 8015efa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015efc:	2300      	movs	r3, #0
 8015efe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	371c      	adds	r7, #28
 8015f06:	46bd      	mov	sp, r7
 8015f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0c:	4770      	bx	lr
 8015f0e:	bf00      	nop
 8015f10:	20045358 	.word	0x20045358

08015f14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b082      	sub	sp, #8
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
 8015f1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015f1e:	2200      	movs	r2, #0
 8015f20:	6839      	ldr	r1, [r7, #0]
 8015f22:	6878      	ldr	r0, [r7, #4]
 8015f24:	f7ff ffaa 	bl	8015e7c <FATFS_LinkDriverEx>
 8015f28:	4603      	mov	r3, r0
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	3708      	adds	r7, #8
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}

08015f32 <__cxa_guard_acquire>:
 8015f32:	6803      	ldr	r3, [r0, #0]
 8015f34:	07db      	lsls	r3, r3, #31
 8015f36:	d406      	bmi.n	8015f46 <__cxa_guard_acquire+0x14>
 8015f38:	7843      	ldrb	r3, [r0, #1]
 8015f3a:	b103      	cbz	r3, 8015f3e <__cxa_guard_acquire+0xc>
 8015f3c:	deff      	udf	#255	; 0xff
 8015f3e:	2301      	movs	r3, #1
 8015f40:	7043      	strb	r3, [r0, #1]
 8015f42:	4618      	mov	r0, r3
 8015f44:	4770      	bx	lr
 8015f46:	2000      	movs	r0, #0
 8015f48:	4770      	bx	lr

08015f4a <__cxa_guard_release>:
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	6003      	str	r3, [r0, #0]
 8015f4e:	4770      	bx	lr

08015f50 <__errno>:
 8015f50:	4b01      	ldr	r3, [pc, #4]	; (8015f58 <__errno+0x8>)
 8015f52:	6818      	ldr	r0, [r3, #0]
 8015f54:	4770      	bx	lr
 8015f56:	bf00      	nop
 8015f58:	2000000c 	.word	0x2000000c

08015f5c <__libc_init_array>:
 8015f5c:	b570      	push	{r4, r5, r6, lr}
 8015f5e:	4e0d      	ldr	r6, [pc, #52]	; (8015f94 <__libc_init_array+0x38>)
 8015f60:	4c0d      	ldr	r4, [pc, #52]	; (8015f98 <__libc_init_array+0x3c>)
 8015f62:	1ba4      	subs	r4, r4, r6
 8015f64:	10a4      	asrs	r4, r4, #2
 8015f66:	2500      	movs	r5, #0
 8015f68:	42a5      	cmp	r5, r4
 8015f6a:	d109      	bne.n	8015f80 <__libc_init_array+0x24>
 8015f6c:	4e0b      	ldr	r6, [pc, #44]	; (8015f9c <__libc_init_array+0x40>)
 8015f6e:	4c0c      	ldr	r4, [pc, #48]	; (8015fa0 <__libc_init_array+0x44>)
 8015f70:	f004 f9e8 	bl	801a344 <_init>
 8015f74:	1ba4      	subs	r4, r4, r6
 8015f76:	10a4      	asrs	r4, r4, #2
 8015f78:	2500      	movs	r5, #0
 8015f7a:	42a5      	cmp	r5, r4
 8015f7c:	d105      	bne.n	8015f8a <__libc_init_array+0x2e>
 8015f7e:	bd70      	pop	{r4, r5, r6, pc}
 8015f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f84:	4798      	blx	r3
 8015f86:	3501      	adds	r5, #1
 8015f88:	e7ee      	b.n	8015f68 <__libc_init_array+0xc>
 8015f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f8e:	4798      	blx	r3
 8015f90:	3501      	adds	r5, #1
 8015f92:	e7f2      	b.n	8015f7a <__libc_init_array+0x1e>
 8015f94:	0801ac94 	.word	0x0801ac94
 8015f98:	0801ac94 	.word	0x0801ac94
 8015f9c:	0801ac94 	.word	0x0801ac94
 8015fa0:	0801ac9c 	.word	0x0801ac9c

08015fa4 <memset>:
 8015fa4:	4402      	add	r2, r0
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	4293      	cmp	r3, r2
 8015faa:	d100      	bne.n	8015fae <memset+0xa>
 8015fac:	4770      	bx	lr
 8015fae:	f803 1b01 	strb.w	r1, [r3], #1
 8015fb2:	e7f9      	b.n	8015fa8 <memset+0x4>

08015fb4 <__cvt>:
 8015fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015fb8:	ec55 4b10 	vmov	r4, r5, d0
 8015fbc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015fbe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015fc2:	2d00      	cmp	r5, #0
 8015fc4:	460e      	mov	r6, r1
 8015fc6:	4691      	mov	r9, r2
 8015fc8:	4619      	mov	r1, r3
 8015fca:	bfb8      	it	lt
 8015fcc:	4622      	movlt	r2, r4
 8015fce:	462b      	mov	r3, r5
 8015fd0:	f027 0720 	bic.w	r7, r7, #32
 8015fd4:	bfbb      	ittet	lt
 8015fd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015fda:	461d      	movlt	r5, r3
 8015fdc:	2300      	movge	r3, #0
 8015fde:	232d      	movlt	r3, #45	; 0x2d
 8015fe0:	bfb8      	it	lt
 8015fe2:	4614      	movlt	r4, r2
 8015fe4:	2f46      	cmp	r7, #70	; 0x46
 8015fe6:	700b      	strb	r3, [r1, #0]
 8015fe8:	d004      	beq.n	8015ff4 <__cvt+0x40>
 8015fea:	2f45      	cmp	r7, #69	; 0x45
 8015fec:	d100      	bne.n	8015ff0 <__cvt+0x3c>
 8015fee:	3601      	adds	r6, #1
 8015ff0:	2102      	movs	r1, #2
 8015ff2:	e000      	b.n	8015ff6 <__cvt+0x42>
 8015ff4:	2103      	movs	r1, #3
 8015ff6:	ab03      	add	r3, sp, #12
 8015ff8:	9301      	str	r3, [sp, #4]
 8015ffa:	ab02      	add	r3, sp, #8
 8015ffc:	9300      	str	r3, [sp, #0]
 8015ffe:	4632      	mov	r2, r6
 8016000:	4653      	mov	r3, sl
 8016002:	ec45 4b10 	vmov	d0, r4, r5
 8016006:	f001 fdff 	bl	8017c08 <_dtoa_r>
 801600a:	2f47      	cmp	r7, #71	; 0x47
 801600c:	4680      	mov	r8, r0
 801600e:	d102      	bne.n	8016016 <__cvt+0x62>
 8016010:	f019 0f01 	tst.w	r9, #1
 8016014:	d026      	beq.n	8016064 <__cvt+0xb0>
 8016016:	2f46      	cmp	r7, #70	; 0x46
 8016018:	eb08 0906 	add.w	r9, r8, r6
 801601c:	d111      	bne.n	8016042 <__cvt+0x8e>
 801601e:	f898 3000 	ldrb.w	r3, [r8]
 8016022:	2b30      	cmp	r3, #48	; 0x30
 8016024:	d10a      	bne.n	801603c <__cvt+0x88>
 8016026:	2200      	movs	r2, #0
 8016028:	2300      	movs	r3, #0
 801602a:	4620      	mov	r0, r4
 801602c:	4629      	mov	r1, r5
 801602e:	f7ea fd63 	bl	8000af8 <__aeabi_dcmpeq>
 8016032:	b918      	cbnz	r0, 801603c <__cvt+0x88>
 8016034:	f1c6 0601 	rsb	r6, r6, #1
 8016038:	f8ca 6000 	str.w	r6, [sl]
 801603c:	f8da 3000 	ldr.w	r3, [sl]
 8016040:	4499      	add	r9, r3
 8016042:	2200      	movs	r2, #0
 8016044:	2300      	movs	r3, #0
 8016046:	4620      	mov	r0, r4
 8016048:	4629      	mov	r1, r5
 801604a:	f7ea fd55 	bl	8000af8 <__aeabi_dcmpeq>
 801604e:	b938      	cbnz	r0, 8016060 <__cvt+0xac>
 8016050:	2230      	movs	r2, #48	; 0x30
 8016052:	9b03      	ldr	r3, [sp, #12]
 8016054:	454b      	cmp	r3, r9
 8016056:	d205      	bcs.n	8016064 <__cvt+0xb0>
 8016058:	1c59      	adds	r1, r3, #1
 801605a:	9103      	str	r1, [sp, #12]
 801605c:	701a      	strb	r2, [r3, #0]
 801605e:	e7f8      	b.n	8016052 <__cvt+0x9e>
 8016060:	f8cd 900c 	str.w	r9, [sp, #12]
 8016064:	9b03      	ldr	r3, [sp, #12]
 8016066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016068:	eba3 0308 	sub.w	r3, r3, r8
 801606c:	4640      	mov	r0, r8
 801606e:	6013      	str	r3, [r2, #0]
 8016070:	b004      	add	sp, #16
 8016072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016076 <__exponent>:
 8016076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016078:	2900      	cmp	r1, #0
 801607a:	4604      	mov	r4, r0
 801607c:	bfba      	itte	lt
 801607e:	4249      	neglt	r1, r1
 8016080:	232d      	movlt	r3, #45	; 0x2d
 8016082:	232b      	movge	r3, #43	; 0x2b
 8016084:	2909      	cmp	r1, #9
 8016086:	f804 2b02 	strb.w	r2, [r4], #2
 801608a:	7043      	strb	r3, [r0, #1]
 801608c:	dd20      	ble.n	80160d0 <__exponent+0x5a>
 801608e:	f10d 0307 	add.w	r3, sp, #7
 8016092:	461f      	mov	r7, r3
 8016094:	260a      	movs	r6, #10
 8016096:	fb91 f5f6 	sdiv	r5, r1, r6
 801609a:	fb06 1115 	mls	r1, r6, r5, r1
 801609e:	3130      	adds	r1, #48	; 0x30
 80160a0:	2d09      	cmp	r5, #9
 80160a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80160a6:	f103 32ff 	add.w	r2, r3, #4294967295
 80160aa:	4629      	mov	r1, r5
 80160ac:	dc09      	bgt.n	80160c2 <__exponent+0x4c>
 80160ae:	3130      	adds	r1, #48	; 0x30
 80160b0:	3b02      	subs	r3, #2
 80160b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80160b6:	42bb      	cmp	r3, r7
 80160b8:	4622      	mov	r2, r4
 80160ba:	d304      	bcc.n	80160c6 <__exponent+0x50>
 80160bc:	1a10      	subs	r0, r2, r0
 80160be:	b003      	add	sp, #12
 80160c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160c2:	4613      	mov	r3, r2
 80160c4:	e7e7      	b.n	8016096 <__exponent+0x20>
 80160c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160ca:	f804 2b01 	strb.w	r2, [r4], #1
 80160ce:	e7f2      	b.n	80160b6 <__exponent+0x40>
 80160d0:	2330      	movs	r3, #48	; 0x30
 80160d2:	4419      	add	r1, r3
 80160d4:	7083      	strb	r3, [r0, #2]
 80160d6:	1d02      	adds	r2, r0, #4
 80160d8:	70c1      	strb	r1, [r0, #3]
 80160da:	e7ef      	b.n	80160bc <__exponent+0x46>

080160dc <_printf_float>:
 80160dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e0:	b08d      	sub	sp, #52	; 0x34
 80160e2:	460c      	mov	r4, r1
 80160e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80160e8:	4616      	mov	r6, r2
 80160ea:	461f      	mov	r7, r3
 80160ec:	4605      	mov	r5, r0
 80160ee:	f002 fe7d 	bl	8018dec <_localeconv_r>
 80160f2:	6803      	ldr	r3, [r0, #0]
 80160f4:	9304      	str	r3, [sp, #16]
 80160f6:	4618      	mov	r0, r3
 80160f8:	f7ea f882 	bl	8000200 <strlen>
 80160fc:	2300      	movs	r3, #0
 80160fe:	930a      	str	r3, [sp, #40]	; 0x28
 8016100:	f8d8 3000 	ldr.w	r3, [r8]
 8016104:	9005      	str	r0, [sp, #20]
 8016106:	3307      	adds	r3, #7
 8016108:	f023 0307 	bic.w	r3, r3, #7
 801610c:	f103 0208 	add.w	r2, r3, #8
 8016110:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016114:	f8d4 b000 	ldr.w	fp, [r4]
 8016118:	f8c8 2000 	str.w	r2, [r8]
 801611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016120:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016124:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016128:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801612c:	9307      	str	r3, [sp, #28]
 801612e:	f8cd 8018 	str.w	r8, [sp, #24]
 8016132:	f04f 32ff 	mov.w	r2, #4294967295
 8016136:	4ba7      	ldr	r3, [pc, #668]	; (80163d4 <_printf_float+0x2f8>)
 8016138:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801613c:	f7ea fd0e 	bl	8000b5c <__aeabi_dcmpun>
 8016140:	bb70      	cbnz	r0, 80161a0 <_printf_float+0xc4>
 8016142:	f04f 32ff 	mov.w	r2, #4294967295
 8016146:	4ba3      	ldr	r3, [pc, #652]	; (80163d4 <_printf_float+0x2f8>)
 8016148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801614c:	f7ea fce8 	bl	8000b20 <__aeabi_dcmple>
 8016150:	bb30      	cbnz	r0, 80161a0 <_printf_float+0xc4>
 8016152:	2200      	movs	r2, #0
 8016154:	2300      	movs	r3, #0
 8016156:	4640      	mov	r0, r8
 8016158:	4649      	mov	r1, r9
 801615a:	f7ea fcd7 	bl	8000b0c <__aeabi_dcmplt>
 801615e:	b110      	cbz	r0, 8016166 <_printf_float+0x8a>
 8016160:	232d      	movs	r3, #45	; 0x2d
 8016162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016166:	4a9c      	ldr	r2, [pc, #624]	; (80163d8 <_printf_float+0x2fc>)
 8016168:	4b9c      	ldr	r3, [pc, #624]	; (80163dc <_printf_float+0x300>)
 801616a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801616e:	bf8c      	ite	hi
 8016170:	4690      	movhi	r8, r2
 8016172:	4698      	movls	r8, r3
 8016174:	2303      	movs	r3, #3
 8016176:	f02b 0204 	bic.w	r2, fp, #4
 801617a:	6123      	str	r3, [r4, #16]
 801617c:	6022      	str	r2, [r4, #0]
 801617e:	f04f 0900 	mov.w	r9, #0
 8016182:	9700      	str	r7, [sp, #0]
 8016184:	4633      	mov	r3, r6
 8016186:	aa0b      	add	r2, sp, #44	; 0x2c
 8016188:	4621      	mov	r1, r4
 801618a:	4628      	mov	r0, r5
 801618c:	f000 f9e6 	bl	801655c <_printf_common>
 8016190:	3001      	adds	r0, #1
 8016192:	f040 808d 	bne.w	80162b0 <_printf_float+0x1d4>
 8016196:	f04f 30ff 	mov.w	r0, #4294967295
 801619a:	b00d      	add	sp, #52	; 0x34
 801619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a0:	4642      	mov	r2, r8
 80161a2:	464b      	mov	r3, r9
 80161a4:	4640      	mov	r0, r8
 80161a6:	4649      	mov	r1, r9
 80161a8:	f7ea fcd8 	bl	8000b5c <__aeabi_dcmpun>
 80161ac:	b110      	cbz	r0, 80161b4 <_printf_float+0xd8>
 80161ae:	4a8c      	ldr	r2, [pc, #560]	; (80163e0 <_printf_float+0x304>)
 80161b0:	4b8c      	ldr	r3, [pc, #560]	; (80163e4 <_printf_float+0x308>)
 80161b2:	e7da      	b.n	801616a <_printf_float+0x8e>
 80161b4:	6861      	ldr	r1, [r4, #4]
 80161b6:	1c4b      	adds	r3, r1, #1
 80161b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80161bc:	a80a      	add	r0, sp, #40	; 0x28
 80161be:	d13e      	bne.n	801623e <_printf_float+0x162>
 80161c0:	2306      	movs	r3, #6
 80161c2:	6063      	str	r3, [r4, #4]
 80161c4:	2300      	movs	r3, #0
 80161c6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80161ca:	ab09      	add	r3, sp, #36	; 0x24
 80161cc:	9300      	str	r3, [sp, #0]
 80161ce:	ec49 8b10 	vmov	d0, r8, r9
 80161d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80161d6:	6022      	str	r2, [r4, #0]
 80161d8:	f8cd a004 	str.w	sl, [sp, #4]
 80161dc:	6861      	ldr	r1, [r4, #4]
 80161de:	4628      	mov	r0, r5
 80161e0:	f7ff fee8 	bl	8015fb4 <__cvt>
 80161e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80161e8:	2b47      	cmp	r3, #71	; 0x47
 80161ea:	4680      	mov	r8, r0
 80161ec:	d109      	bne.n	8016202 <_printf_float+0x126>
 80161ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161f0:	1cd8      	adds	r0, r3, #3
 80161f2:	db02      	blt.n	80161fa <_printf_float+0x11e>
 80161f4:	6862      	ldr	r2, [r4, #4]
 80161f6:	4293      	cmp	r3, r2
 80161f8:	dd47      	ble.n	801628a <_printf_float+0x1ae>
 80161fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80161fe:	fa5f fa8a 	uxtb.w	sl, sl
 8016202:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8016206:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016208:	d824      	bhi.n	8016254 <_printf_float+0x178>
 801620a:	3901      	subs	r1, #1
 801620c:	4652      	mov	r2, sl
 801620e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016212:	9109      	str	r1, [sp, #36]	; 0x24
 8016214:	f7ff ff2f 	bl	8016076 <__exponent>
 8016218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801621a:	1813      	adds	r3, r2, r0
 801621c:	2a01      	cmp	r2, #1
 801621e:	4681      	mov	r9, r0
 8016220:	6123      	str	r3, [r4, #16]
 8016222:	dc02      	bgt.n	801622a <_printf_float+0x14e>
 8016224:	6822      	ldr	r2, [r4, #0]
 8016226:	07d1      	lsls	r1, r2, #31
 8016228:	d501      	bpl.n	801622e <_printf_float+0x152>
 801622a:	3301      	adds	r3, #1
 801622c:	6123      	str	r3, [r4, #16]
 801622e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016232:	2b00      	cmp	r3, #0
 8016234:	d0a5      	beq.n	8016182 <_printf_float+0xa6>
 8016236:	232d      	movs	r3, #45	; 0x2d
 8016238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801623c:	e7a1      	b.n	8016182 <_printf_float+0xa6>
 801623e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8016242:	f000 8177 	beq.w	8016534 <_printf_float+0x458>
 8016246:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801624a:	d1bb      	bne.n	80161c4 <_printf_float+0xe8>
 801624c:	2900      	cmp	r1, #0
 801624e:	d1b9      	bne.n	80161c4 <_printf_float+0xe8>
 8016250:	2301      	movs	r3, #1
 8016252:	e7b6      	b.n	80161c2 <_printf_float+0xe6>
 8016254:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016258:	d119      	bne.n	801628e <_printf_float+0x1b2>
 801625a:	2900      	cmp	r1, #0
 801625c:	6863      	ldr	r3, [r4, #4]
 801625e:	dd0c      	ble.n	801627a <_printf_float+0x19e>
 8016260:	6121      	str	r1, [r4, #16]
 8016262:	b913      	cbnz	r3, 801626a <_printf_float+0x18e>
 8016264:	6822      	ldr	r2, [r4, #0]
 8016266:	07d2      	lsls	r2, r2, #31
 8016268:	d502      	bpl.n	8016270 <_printf_float+0x194>
 801626a:	3301      	adds	r3, #1
 801626c:	440b      	add	r3, r1
 801626e:	6123      	str	r3, [r4, #16]
 8016270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016272:	65a3      	str	r3, [r4, #88]	; 0x58
 8016274:	f04f 0900 	mov.w	r9, #0
 8016278:	e7d9      	b.n	801622e <_printf_float+0x152>
 801627a:	b913      	cbnz	r3, 8016282 <_printf_float+0x1a6>
 801627c:	6822      	ldr	r2, [r4, #0]
 801627e:	07d0      	lsls	r0, r2, #31
 8016280:	d501      	bpl.n	8016286 <_printf_float+0x1aa>
 8016282:	3302      	adds	r3, #2
 8016284:	e7f3      	b.n	801626e <_printf_float+0x192>
 8016286:	2301      	movs	r3, #1
 8016288:	e7f1      	b.n	801626e <_printf_float+0x192>
 801628a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801628e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016292:	4293      	cmp	r3, r2
 8016294:	db05      	blt.n	80162a2 <_printf_float+0x1c6>
 8016296:	6822      	ldr	r2, [r4, #0]
 8016298:	6123      	str	r3, [r4, #16]
 801629a:	07d1      	lsls	r1, r2, #31
 801629c:	d5e8      	bpl.n	8016270 <_printf_float+0x194>
 801629e:	3301      	adds	r3, #1
 80162a0:	e7e5      	b.n	801626e <_printf_float+0x192>
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	bfd4      	ite	le
 80162a6:	f1c3 0302 	rsble	r3, r3, #2
 80162aa:	2301      	movgt	r3, #1
 80162ac:	4413      	add	r3, r2
 80162ae:	e7de      	b.n	801626e <_printf_float+0x192>
 80162b0:	6823      	ldr	r3, [r4, #0]
 80162b2:	055a      	lsls	r2, r3, #21
 80162b4:	d407      	bmi.n	80162c6 <_printf_float+0x1ea>
 80162b6:	6923      	ldr	r3, [r4, #16]
 80162b8:	4642      	mov	r2, r8
 80162ba:	4631      	mov	r1, r6
 80162bc:	4628      	mov	r0, r5
 80162be:	47b8      	blx	r7
 80162c0:	3001      	adds	r0, #1
 80162c2:	d12b      	bne.n	801631c <_printf_float+0x240>
 80162c4:	e767      	b.n	8016196 <_printf_float+0xba>
 80162c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80162ca:	f240 80dc 	bls.w	8016486 <_printf_float+0x3aa>
 80162ce:	2200      	movs	r2, #0
 80162d0:	2300      	movs	r3, #0
 80162d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80162d6:	f7ea fc0f 	bl	8000af8 <__aeabi_dcmpeq>
 80162da:	2800      	cmp	r0, #0
 80162dc:	d033      	beq.n	8016346 <_printf_float+0x26a>
 80162de:	2301      	movs	r3, #1
 80162e0:	4a41      	ldr	r2, [pc, #260]	; (80163e8 <_printf_float+0x30c>)
 80162e2:	4631      	mov	r1, r6
 80162e4:	4628      	mov	r0, r5
 80162e6:	47b8      	blx	r7
 80162e8:	3001      	adds	r0, #1
 80162ea:	f43f af54 	beq.w	8016196 <_printf_float+0xba>
 80162ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162f2:	429a      	cmp	r2, r3
 80162f4:	db02      	blt.n	80162fc <_printf_float+0x220>
 80162f6:	6823      	ldr	r3, [r4, #0]
 80162f8:	07d8      	lsls	r0, r3, #31
 80162fa:	d50f      	bpl.n	801631c <_printf_float+0x240>
 80162fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016300:	4631      	mov	r1, r6
 8016302:	4628      	mov	r0, r5
 8016304:	47b8      	blx	r7
 8016306:	3001      	adds	r0, #1
 8016308:	f43f af45 	beq.w	8016196 <_printf_float+0xba>
 801630c:	f04f 0800 	mov.w	r8, #0
 8016310:	f104 091a 	add.w	r9, r4, #26
 8016314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016316:	3b01      	subs	r3, #1
 8016318:	4543      	cmp	r3, r8
 801631a:	dc09      	bgt.n	8016330 <_printf_float+0x254>
 801631c:	6823      	ldr	r3, [r4, #0]
 801631e:	079b      	lsls	r3, r3, #30
 8016320:	f100 8103 	bmi.w	801652a <_printf_float+0x44e>
 8016324:	68e0      	ldr	r0, [r4, #12]
 8016326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016328:	4298      	cmp	r0, r3
 801632a:	bfb8      	it	lt
 801632c:	4618      	movlt	r0, r3
 801632e:	e734      	b.n	801619a <_printf_float+0xbe>
 8016330:	2301      	movs	r3, #1
 8016332:	464a      	mov	r2, r9
 8016334:	4631      	mov	r1, r6
 8016336:	4628      	mov	r0, r5
 8016338:	47b8      	blx	r7
 801633a:	3001      	adds	r0, #1
 801633c:	f43f af2b 	beq.w	8016196 <_printf_float+0xba>
 8016340:	f108 0801 	add.w	r8, r8, #1
 8016344:	e7e6      	b.n	8016314 <_printf_float+0x238>
 8016346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016348:	2b00      	cmp	r3, #0
 801634a:	dc2b      	bgt.n	80163a4 <_printf_float+0x2c8>
 801634c:	2301      	movs	r3, #1
 801634e:	4a26      	ldr	r2, [pc, #152]	; (80163e8 <_printf_float+0x30c>)
 8016350:	4631      	mov	r1, r6
 8016352:	4628      	mov	r0, r5
 8016354:	47b8      	blx	r7
 8016356:	3001      	adds	r0, #1
 8016358:	f43f af1d 	beq.w	8016196 <_printf_float+0xba>
 801635c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801635e:	b923      	cbnz	r3, 801636a <_printf_float+0x28e>
 8016360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016362:	b913      	cbnz	r3, 801636a <_printf_float+0x28e>
 8016364:	6823      	ldr	r3, [r4, #0]
 8016366:	07d9      	lsls	r1, r3, #31
 8016368:	d5d8      	bpl.n	801631c <_printf_float+0x240>
 801636a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801636e:	4631      	mov	r1, r6
 8016370:	4628      	mov	r0, r5
 8016372:	47b8      	blx	r7
 8016374:	3001      	adds	r0, #1
 8016376:	f43f af0e 	beq.w	8016196 <_printf_float+0xba>
 801637a:	f04f 0900 	mov.w	r9, #0
 801637e:	f104 0a1a 	add.w	sl, r4, #26
 8016382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016384:	425b      	negs	r3, r3
 8016386:	454b      	cmp	r3, r9
 8016388:	dc01      	bgt.n	801638e <_printf_float+0x2b2>
 801638a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801638c:	e794      	b.n	80162b8 <_printf_float+0x1dc>
 801638e:	2301      	movs	r3, #1
 8016390:	4652      	mov	r2, sl
 8016392:	4631      	mov	r1, r6
 8016394:	4628      	mov	r0, r5
 8016396:	47b8      	blx	r7
 8016398:	3001      	adds	r0, #1
 801639a:	f43f aefc 	beq.w	8016196 <_printf_float+0xba>
 801639e:	f109 0901 	add.w	r9, r9, #1
 80163a2:	e7ee      	b.n	8016382 <_printf_float+0x2a6>
 80163a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80163a8:	429a      	cmp	r2, r3
 80163aa:	bfa8      	it	ge
 80163ac:	461a      	movge	r2, r3
 80163ae:	2a00      	cmp	r2, #0
 80163b0:	4691      	mov	r9, r2
 80163b2:	dd07      	ble.n	80163c4 <_printf_float+0x2e8>
 80163b4:	4613      	mov	r3, r2
 80163b6:	4631      	mov	r1, r6
 80163b8:	4642      	mov	r2, r8
 80163ba:	4628      	mov	r0, r5
 80163bc:	47b8      	blx	r7
 80163be:	3001      	adds	r0, #1
 80163c0:	f43f aee9 	beq.w	8016196 <_printf_float+0xba>
 80163c4:	f104 031a 	add.w	r3, r4, #26
 80163c8:	f04f 0b00 	mov.w	fp, #0
 80163cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80163d0:	9306      	str	r3, [sp, #24]
 80163d2:	e015      	b.n	8016400 <_printf_float+0x324>
 80163d4:	7fefffff 	.word	0x7fefffff
 80163d8:	0801a964 	.word	0x0801a964
 80163dc:	0801a960 	.word	0x0801a960
 80163e0:	0801a96c 	.word	0x0801a96c
 80163e4:	0801a968 	.word	0x0801a968
 80163e8:	0801ab23 	.word	0x0801ab23
 80163ec:	2301      	movs	r3, #1
 80163ee:	9a06      	ldr	r2, [sp, #24]
 80163f0:	4631      	mov	r1, r6
 80163f2:	4628      	mov	r0, r5
 80163f4:	47b8      	blx	r7
 80163f6:	3001      	adds	r0, #1
 80163f8:	f43f aecd 	beq.w	8016196 <_printf_float+0xba>
 80163fc:	f10b 0b01 	add.w	fp, fp, #1
 8016400:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016404:	ebaa 0309 	sub.w	r3, sl, r9
 8016408:	455b      	cmp	r3, fp
 801640a:	dcef      	bgt.n	80163ec <_printf_float+0x310>
 801640c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016410:	429a      	cmp	r2, r3
 8016412:	44d0      	add	r8, sl
 8016414:	db15      	blt.n	8016442 <_printf_float+0x366>
 8016416:	6823      	ldr	r3, [r4, #0]
 8016418:	07da      	lsls	r2, r3, #31
 801641a:	d412      	bmi.n	8016442 <_printf_float+0x366>
 801641c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801641e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016420:	eba3 020a 	sub.w	r2, r3, sl
 8016424:	eba3 0a01 	sub.w	sl, r3, r1
 8016428:	4592      	cmp	sl, r2
 801642a:	bfa8      	it	ge
 801642c:	4692      	movge	sl, r2
 801642e:	f1ba 0f00 	cmp.w	sl, #0
 8016432:	dc0e      	bgt.n	8016452 <_printf_float+0x376>
 8016434:	f04f 0800 	mov.w	r8, #0
 8016438:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801643c:	f104 091a 	add.w	r9, r4, #26
 8016440:	e019      	b.n	8016476 <_printf_float+0x39a>
 8016442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016446:	4631      	mov	r1, r6
 8016448:	4628      	mov	r0, r5
 801644a:	47b8      	blx	r7
 801644c:	3001      	adds	r0, #1
 801644e:	d1e5      	bne.n	801641c <_printf_float+0x340>
 8016450:	e6a1      	b.n	8016196 <_printf_float+0xba>
 8016452:	4653      	mov	r3, sl
 8016454:	4642      	mov	r2, r8
 8016456:	4631      	mov	r1, r6
 8016458:	4628      	mov	r0, r5
 801645a:	47b8      	blx	r7
 801645c:	3001      	adds	r0, #1
 801645e:	d1e9      	bne.n	8016434 <_printf_float+0x358>
 8016460:	e699      	b.n	8016196 <_printf_float+0xba>
 8016462:	2301      	movs	r3, #1
 8016464:	464a      	mov	r2, r9
 8016466:	4631      	mov	r1, r6
 8016468:	4628      	mov	r0, r5
 801646a:	47b8      	blx	r7
 801646c:	3001      	adds	r0, #1
 801646e:	f43f ae92 	beq.w	8016196 <_printf_float+0xba>
 8016472:	f108 0801 	add.w	r8, r8, #1
 8016476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801647a:	1a9b      	subs	r3, r3, r2
 801647c:	eba3 030a 	sub.w	r3, r3, sl
 8016480:	4543      	cmp	r3, r8
 8016482:	dcee      	bgt.n	8016462 <_printf_float+0x386>
 8016484:	e74a      	b.n	801631c <_printf_float+0x240>
 8016486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016488:	2a01      	cmp	r2, #1
 801648a:	dc01      	bgt.n	8016490 <_printf_float+0x3b4>
 801648c:	07db      	lsls	r3, r3, #31
 801648e:	d53a      	bpl.n	8016506 <_printf_float+0x42a>
 8016490:	2301      	movs	r3, #1
 8016492:	4642      	mov	r2, r8
 8016494:	4631      	mov	r1, r6
 8016496:	4628      	mov	r0, r5
 8016498:	47b8      	blx	r7
 801649a:	3001      	adds	r0, #1
 801649c:	f43f ae7b 	beq.w	8016196 <_printf_float+0xba>
 80164a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164a4:	4631      	mov	r1, r6
 80164a6:	4628      	mov	r0, r5
 80164a8:	47b8      	blx	r7
 80164aa:	3001      	adds	r0, #1
 80164ac:	f108 0801 	add.w	r8, r8, #1
 80164b0:	f43f ae71 	beq.w	8016196 <_printf_float+0xba>
 80164b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164b6:	2200      	movs	r2, #0
 80164b8:	f103 3aff 	add.w	sl, r3, #4294967295
 80164bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80164c0:	2300      	movs	r3, #0
 80164c2:	f7ea fb19 	bl	8000af8 <__aeabi_dcmpeq>
 80164c6:	b9c8      	cbnz	r0, 80164fc <_printf_float+0x420>
 80164c8:	4653      	mov	r3, sl
 80164ca:	4642      	mov	r2, r8
 80164cc:	4631      	mov	r1, r6
 80164ce:	4628      	mov	r0, r5
 80164d0:	47b8      	blx	r7
 80164d2:	3001      	adds	r0, #1
 80164d4:	d10e      	bne.n	80164f4 <_printf_float+0x418>
 80164d6:	e65e      	b.n	8016196 <_printf_float+0xba>
 80164d8:	2301      	movs	r3, #1
 80164da:	4652      	mov	r2, sl
 80164dc:	4631      	mov	r1, r6
 80164de:	4628      	mov	r0, r5
 80164e0:	47b8      	blx	r7
 80164e2:	3001      	adds	r0, #1
 80164e4:	f43f ae57 	beq.w	8016196 <_printf_float+0xba>
 80164e8:	f108 0801 	add.w	r8, r8, #1
 80164ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164ee:	3b01      	subs	r3, #1
 80164f0:	4543      	cmp	r3, r8
 80164f2:	dcf1      	bgt.n	80164d8 <_printf_float+0x3fc>
 80164f4:	464b      	mov	r3, r9
 80164f6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80164fa:	e6de      	b.n	80162ba <_printf_float+0x1de>
 80164fc:	f04f 0800 	mov.w	r8, #0
 8016500:	f104 0a1a 	add.w	sl, r4, #26
 8016504:	e7f2      	b.n	80164ec <_printf_float+0x410>
 8016506:	2301      	movs	r3, #1
 8016508:	e7df      	b.n	80164ca <_printf_float+0x3ee>
 801650a:	2301      	movs	r3, #1
 801650c:	464a      	mov	r2, r9
 801650e:	4631      	mov	r1, r6
 8016510:	4628      	mov	r0, r5
 8016512:	47b8      	blx	r7
 8016514:	3001      	adds	r0, #1
 8016516:	f43f ae3e 	beq.w	8016196 <_printf_float+0xba>
 801651a:	f108 0801 	add.w	r8, r8, #1
 801651e:	68e3      	ldr	r3, [r4, #12]
 8016520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016522:	1a9b      	subs	r3, r3, r2
 8016524:	4543      	cmp	r3, r8
 8016526:	dcf0      	bgt.n	801650a <_printf_float+0x42e>
 8016528:	e6fc      	b.n	8016324 <_printf_float+0x248>
 801652a:	f04f 0800 	mov.w	r8, #0
 801652e:	f104 0919 	add.w	r9, r4, #25
 8016532:	e7f4      	b.n	801651e <_printf_float+0x442>
 8016534:	2900      	cmp	r1, #0
 8016536:	f43f ae8b 	beq.w	8016250 <_printf_float+0x174>
 801653a:	2300      	movs	r3, #0
 801653c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016540:	ab09      	add	r3, sp, #36	; 0x24
 8016542:	9300      	str	r3, [sp, #0]
 8016544:	ec49 8b10 	vmov	d0, r8, r9
 8016548:	6022      	str	r2, [r4, #0]
 801654a:	f8cd a004 	str.w	sl, [sp, #4]
 801654e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016552:	4628      	mov	r0, r5
 8016554:	f7ff fd2e 	bl	8015fb4 <__cvt>
 8016558:	4680      	mov	r8, r0
 801655a:	e648      	b.n	80161ee <_printf_float+0x112>

0801655c <_printf_common>:
 801655c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016560:	4691      	mov	r9, r2
 8016562:	461f      	mov	r7, r3
 8016564:	688a      	ldr	r2, [r1, #8]
 8016566:	690b      	ldr	r3, [r1, #16]
 8016568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801656c:	4293      	cmp	r3, r2
 801656e:	bfb8      	it	lt
 8016570:	4613      	movlt	r3, r2
 8016572:	f8c9 3000 	str.w	r3, [r9]
 8016576:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801657a:	4606      	mov	r6, r0
 801657c:	460c      	mov	r4, r1
 801657e:	b112      	cbz	r2, 8016586 <_printf_common+0x2a>
 8016580:	3301      	adds	r3, #1
 8016582:	f8c9 3000 	str.w	r3, [r9]
 8016586:	6823      	ldr	r3, [r4, #0]
 8016588:	0699      	lsls	r1, r3, #26
 801658a:	bf42      	ittt	mi
 801658c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016590:	3302      	addmi	r3, #2
 8016592:	f8c9 3000 	strmi.w	r3, [r9]
 8016596:	6825      	ldr	r5, [r4, #0]
 8016598:	f015 0506 	ands.w	r5, r5, #6
 801659c:	d107      	bne.n	80165ae <_printf_common+0x52>
 801659e:	f104 0a19 	add.w	sl, r4, #25
 80165a2:	68e3      	ldr	r3, [r4, #12]
 80165a4:	f8d9 2000 	ldr.w	r2, [r9]
 80165a8:	1a9b      	subs	r3, r3, r2
 80165aa:	42ab      	cmp	r3, r5
 80165ac:	dc28      	bgt.n	8016600 <_printf_common+0xa4>
 80165ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80165b2:	6822      	ldr	r2, [r4, #0]
 80165b4:	3300      	adds	r3, #0
 80165b6:	bf18      	it	ne
 80165b8:	2301      	movne	r3, #1
 80165ba:	0692      	lsls	r2, r2, #26
 80165bc:	d42d      	bmi.n	801661a <_printf_common+0xbe>
 80165be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80165c2:	4639      	mov	r1, r7
 80165c4:	4630      	mov	r0, r6
 80165c6:	47c0      	blx	r8
 80165c8:	3001      	adds	r0, #1
 80165ca:	d020      	beq.n	801660e <_printf_common+0xb2>
 80165cc:	6823      	ldr	r3, [r4, #0]
 80165ce:	68e5      	ldr	r5, [r4, #12]
 80165d0:	f8d9 2000 	ldr.w	r2, [r9]
 80165d4:	f003 0306 	and.w	r3, r3, #6
 80165d8:	2b04      	cmp	r3, #4
 80165da:	bf08      	it	eq
 80165dc:	1aad      	subeq	r5, r5, r2
 80165de:	68a3      	ldr	r3, [r4, #8]
 80165e0:	6922      	ldr	r2, [r4, #16]
 80165e2:	bf0c      	ite	eq
 80165e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80165e8:	2500      	movne	r5, #0
 80165ea:	4293      	cmp	r3, r2
 80165ec:	bfc4      	itt	gt
 80165ee:	1a9b      	subgt	r3, r3, r2
 80165f0:	18ed      	addgt	r5, r5, r3
 80165f2:	f04f 0900 	mov.w	r9, #0
 80165f6:	341a      	adds	r4, #26
 80165f8:	454d      	cmp	r5, r9
 80165fa:	d11a      	bne.n	8016632 <_printf_common+0xd6>
 80165fc:	2000      	movs	r0, #0
 80165fe:	e008      	b.n	8016612 <_printf_common+0xb6>
 8016600:	2301      	movs	r3, #1
 8016602:	4652      	mov	r2, sl
 8016604:	4639      	mov	r1, r7
 8016606:	4630      	mov	r0, r6
 8016608:	47c0      	blx	r8
 801660a:	3001      	adds	r0, #1
 801660c:	d103      	bne.n	8016616 <_printf_common+0xba>
 801660e:	f04f 30ff 	mov.w	r0, #4294967295
 8016612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016616:	3501      	adds	r5, #1
 8016618:	e7c3      	b.n	80165a2 <_printf_common+0x46>
 801661a:	18e1      	adds	r1, r4, r3
 801661c:	1c5a      	adds	r2, r3, #1
 801661e:	2030      	movs	r0, #48	; 0x30
 8016620:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016624:	4422      	add	r2, r4
 8016626:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801662a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801662e:	3302      	adds	r3, #2
 8016630:	e7c5      	b.n	80165be <_printf_common+0x62>
 8016632:	2301      	movs	r3, #1
 8016634:	4622      	mov	r2, r4
 8016636:	4639      	mov	r1, r7
 8016638:	4630      	mov	r0, r6
 801663a:	47c0      	blx	r8
 801663c:	3001      	adds	r0, #1
 801663e:	d0e6      	beq.n	801660e <_printf_common+0xb2>
 8016640:	f109 0901 	add.w	r9, r9, #1
 8016644:	e7d8      	b.n	80165f8 <_printf_common+0x9c>
	...

08016648 <_printf_i>:
 8016648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801664c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016650:	460c      	mov	r4, r1
 8016652:	7e09      	ldrb	r1, [r1, #24]
 8016654:	b085      	sub	sp, #20
 8016656:	296e      	cmp	r1, #110	; 0x6e
 8016658:	4617      	mov	r7, r2
 801665a:	4606      	mov	r6, r0
 801665c:	4698      	mov	r8, r3
 801665e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016660:	f000 80b3 	beq.w	80167ca <_printf_i+0x182>
 8016664:	d822      	bhi.n	80166ac <_printf_i+0x64>
 8016666:	2963      	cmp	r1, #99	; 0x63
 8016668:	d036      	beq.n	80166d8 <_printf_i+0x90>
 801666a:	d80a      	bhi.n	8016682 <_printf_i+0x3a>
 801666c:	2900      	cmp	r1, #0
 801666e:	f000 80b9 	beq.w	80167e4 <_printf_i+0x19c>
 8016672:	2958      	cmp	r1, #88	; 0x58
 8016674:	f000 8083 	beq.w	801677e <_printf_i+0x136>
 8016678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801667c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016680:	e032      	b.n	80166e8 <_printf_i+0xa0>
 8016682:	2964      	cmp	r1, #100	; 0x64
 8016684:	d001      	beq.n	801668a <_printf_i+0x42>
 8016686:	2969      	cmp	r1, #105	; 0x69
 8016688:	d1f6      	bne.n	8016678 <_printf_i+0x30>
 801668a:	6820      	ldr	r0, [r4, #0]
 801668c:	6813      	ldr	r3, [r2, #0]
 801668e:	0605      	lsls	r5, r0, #24
 8016690:	f103 0104 	add.w	r1, r3, #4
 8016694:	d52a      	bpl.n	80166ec <_printf_i+0xa4>
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	6011      	str	r1, [r2, #0]
 801669a:	2b00      	cmp	r3, #0
 801669c:	da03      	bge.n	80166a6 <_printf_i+0x5e>
 801669e:	222d      	movs	r2, #45	; 0x2d
 80166a0:	425b      	negs	r3, r3
 80166a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80166a6:	486f      	ldr	r0, [pc, #444]	; (8016864 <_printf_i+0x21c>)
 80166a8:	220a      	movs	r2, #10
 80166aa:	e039      	b.n	8016720 <_printf_i+0xd8>
 80166ac:	2973      	cmp	r1, #115	; 0x73
 80166ae:	f000 809d 	beq.w	80167ec <_printf_i+0x1a4>
 80166b2:	d808      	bhi.n	80166c6 <_printf_i+0x7e>
 80166b4:	296f      	cmp	r1, #111	; 0x6f
 80166b6:	d020      	beq.n	80166fa <_printf_i+0xb2>
 80166b8:	2970      	cmp	r1, #112	; 0x70
 80166ba:	d1dd      	bne.n	8016678 <_printf_i+0x30>
 80166bc:	6823      	ldr	r3, [r4, #0]
 80166be:	f043 0320 	orr.w	r3, r3, #32
 80166c2:	6023      	str	r3, [r4, #0]
 80166c4:	e003      	b.n	80166ce <_printf_i+0x86>
 80166c6:	2975      	cmp	r1, #117	; 0x75
 80166c8:	d017      	beq.n	80166fa <_printf_i+0xb2>
 80166ca:	2978      	cmp	r1, #120	; 0x78
 80166cc:	d1d4      	bne.n	8016678 <_printf_i+0x30>
 80166ce:	2378      	movs	r3, #120	; 0x78
 80166d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80166d4:	4864      	ldr	r0, [pc, #400]	; (8016868 <_printf_i+0x220>)
 80166d6:	e055      	b.n	8016784 <_printf_i+0x13c>
 80166d8:	6813      	ldr	r3, [r2, #0]
 80166da:	1d19      	adds	r1, r3, #4
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	6011      	str	r1, [r2, #0]
 80166e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80166e8:	2301      	movs	r3, #1
 80166ea:	e08c      	b.n	8016806 <_printf_i+0x1be>
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	6011      	str	r1, [r2, #0]
 80166f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80166f4:	bf18      	it	ne
 80166f6:	b21b      	sxthne	r3, r3
 80166f8:	e7cf      	b.n	801669a <_printf_i+0x52>
 80166fa:	6813      	ldr	r3, [r2, #0]
 80166fc:	6825      	ldr	r5, [r4, #0]
 80166fe:	1d18      	adds	r0, r3, #4
 8016700:	6010      	str	r0, [r2, #0]
 8016702:	0628      	lsls	r0, r5, #24
 8016704:	d501      	bpl.n	801670a <_printf_i+0xc2>
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	e002      	b.n	8016710 <_printf_i+0xc8>
 801670a:	0668      	lsls	r0, r5, #25
 801670c:	d5fb      	bpl.n	8016706 <_printf_i+0xbe>
 801670e:	881b      	ldrh	r3, [r3, #0]
 8016710:	4854      	ldr	r0, [pc, #336]	; (8016864 <_printf_i+0x21c>)
 8016712:	296f      	cmp	r1, #111	; 0x6f
 8016714:	bf14      	ite	ne
 8016716:	220a      	movne	r2, #10
 8016718:	2208      	moveq	r2, #8
 801671a:	2100      	movs	r1, #0
 801671c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016720:	6865      	ldr	r5, [r4, #4]
 8016722:	60a5      	str	r5, [r4, #8]
 8016724:	2d00      	cmp	r5, #0
 8016726:	f2c0 8095 	blt.w	8016854 <_printf_i+0x20c>
 801672a:	6821      	ldr	r1, [r4, #0]
 801672c:	f021 0104 	bic.w	r1, r1, #4
 8016730:	6021      	str	r1, [r4, #0]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d13d      	bne.n	80167b2 <_printf_i+0x16a>
 8016736:	2d00      	cmp	r5, #0
 8016738:	f040 808e 	bne.w	8016858 <_printf_i+0x210>
 801673c:	4665      	mov	r5, ip
 801673e:	2a08      	cmp	r2, #8
 8016740:	d10b      	bne.n	801675a <_printf_i+0x112>
 8016742:	6823      	ldr	r3, [r4, #0]
 8016744:	07db      	lsls	r3, r3, #31
 8016746:	d508      	bpl.n	801675a <_printf_i+0x112>
 8016748:	6923      	ldr	r3, [r4, #16]
 801674a:	6862      	ldr	r2, [r4, #4]
 801674c:	429a      	cmp	r2, r3
 801674e:	bfde      	ittt	le
 8016750:	2330      	movle	r3, #48	; 0x30
 8016752:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016756:	f105 35ff 	addle.w	r5, r5, #4294967295
 801675a:	ebac 0305 	sub.w	r3, ip, r5
 801675e:	6123      	str	r3, [r4, #16]
 8016760:	f8cd 8000 	str.w	r8, [sp]
 8016764:	463b      	mov	r3, r7
 8016766:	aa03      	add	r2, sp, #12
 8016768:	4621      	mov	r1, r4
 801676a:	4630      	mov	r0, r6
 801676c:	f7ff fef6 	bl	801655c <_printf_common>
 8016770:	3001      	adds	r0, #1
 8016772:	d14d      	bne.n	8016810 <_printf_i+0x1c8>
 8016774:	f04f 30ff 	mov.w	r0, #4294967295
 8016778:	b005      	add	sp, #20
 801677a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801677e:	4839      	ldr	r0, [pc, #228]	; (8016864 <_printf_i+0x21c>)
 8016780:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016784:	6813      	ldr	r3, [r2, #0]
 8016786:	6821      	ldr	r1, [r4, #0]
 8016788:	1d1d      	adds	r5, r3, #4
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	6015      	str	r5, [r2, #0]
 801678e:	060a      	lsls	r2, r1, #24
 8016790:	d50b      	bpl.n	80167aa <_printf_i+0x162>
 8016792:	07ca      	lsls	r2, r1, #31
 8016794:	bf44      	itt	mi
 8016796:	f041 0120 	orrmi.w	r1, r1, #32
 801679a:	6021      	strmi	r1, [r4, #0]
 801679c:	b91b      	cbnz	r3, 80167a6 <_printf_i+0x15e>
 801679e:	6822      	ldr	r2, [r4, #0]
 80167a0:	f022 0220 	bic.w	r2, r2, #32
 80167a4:	6022      	str	r2, [r4, #0]
 80167a6:	2210      	movs	r2, #16
 80167a8:	e7b7      	b.n	801671a <_printf_i+0xd2>
 80167aa:	064d      	lsls	r5, r1, #25
 80167ac:	bf48      	it	mi
 80167ae:	b29b      	uxthmi	r3, r3
 80167b0:	e7ef      	b.n	8016792 <_printf_i+0x14a>
 80167b2:	4665      	mov	r5, ip
 80167b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80167b8:	fb02 3311 	mls	r3, r2, r1, r3
 80167bc:	5cc3      	ldrb	r3, [r0, r3]
 80167be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80167c2:	460b      	mov	r3, r1
 80167c4:	2900      	cmp	r1, #0
 80167c6:	d1f5      	bne.n	80167b4 <_printf_i+0x16c>
 80167c8:	e7b9      	b.n	801673e <_printf_i+0xf6>
 80167ca:	6813      	ldr	r3, [r2, #0]
 80167cc:	6825      	ldr	r5, [r4, #0]
 80167ce:	6961      	ldr	r1, [r4, #20]
 80167d0:	1d18      	adds	r0, r3, #4
 80167d2:	6010      	str	r0, [r2, #0]
 80167d4:	0628      	lsls	r0, r5, #24
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	d501      	bpl.n	80167de <_printf_i+0x196>
 80167da:	6019      	str	r1, [r3, #0]
 80167dc:	e002      	b.n	80167e4 <_printf_i+0x19c>
 80167de:	066a      	lsls	r2, r5, #25
 80167e0:	d5fb      	bpl.n	80167da <_printf_i+0x192>
 80167e2:	8019      	strh	r1, [r3, #0]
 80167e4:	2300      	movs	r3, #0
 80167e6:	6123      	str	r3, [r4, #16]
 80167e8:	4665      	mov	r5, ip
 80167ea:	e7b9      	b.n	8016760 <_printf_i+0x118>
 80167ec:	6813      	ldr	r3, [r2, #0]
 80167ee:	1d19      	adds	r1, r3, #4
 80167f0:	6011      	str	r1, [r2, #0]
 80167f2:	681d      	ldr	r5, [r3, #0]
 80167f4:	6862      	ldr	r2, [r4, #4]
 80167f6:	2100      	movs	r1, #0
 80167f8:	4628      	mov	r0, r5
 80167fa:	f7e9 fd09 	bl	8000210 <memchr>
 80167fe:	b108      	cbz	r0, 8016804 <_printf_i+0x1bc>
 8016800:	1b40      	subs	r0, r0, r5
 8016802:	6060      	str	r0, [r4, #4]
 8016804:	6863      	ldr	r3, [r4, #4]
 8016806:	6123      	str	r3, [r4, #16]
 8016808:	2300      	movs	r3, #0
 801680a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801680e:	e7a7      	b.n	8016760 <_printf_i+0x118>
 8016810:	6923      	ldr	r3, [r4, #16]
 8016812:	462a      	mov	r2, r5
 8016814:	4639      	mov	r1, r7
 8016816:	4630      	mov	r0, r6
 8016818:	47c0      	blx	r8
 801681a:	3001      	adds	r0, #1
 801681c:	d0aa      	beq.n	8016774 <_printf_i+0x12c>
 801681e:	6823      	ldr	r3, [r4, #0]
 8016820:	079b      	lsls	r3, r3, #30
 8016822:	d413      	bmi.n	801684c <_printf_i+0x204>
 8016824:	68e0      	ldr	r0, [r4, #12]
 8016826:	9b03      	ldr	r3, [sp, #12]
 8016828:	4298      	cmp	r0, r3
 801682a:	bfb8      	it	lt
 801682c:	4618      	movlt	r0, r3
 801682e:	e7a3      	b.n	8016778 <_printf_i+0x130>
 8016830:	2301      	movs	r3, #1
 8016832:	464a      	mov	r2, r9
 8016834:	4639      	mov	r1, r7
 8016836:	4630      	mov	r0, r6
 8016838:	47c0      	blx	r8
 801683a:	3001      	adds	r0, #1
 801683c:	d09a      	beq.n	8016774 <_printf_i+0x12c>
 801683e:	3501      	adds	r5, #1
 8016840:	68e3      	ldr	r3, [r4, #12]
 8016842:	9a03      	ldr	r2, [sp, #12]
 8016844:	1a9b      	subs	r3, r3, r2
 8016846:	42ab      	cmp	r3, r5
 8016848:	dcf2      	bgt.n	8016830 <_printf_i+0x1e8>
 801684a:	e7eb      	b.n	8016824 <_printf_i+0x1dc>
 801684c:	2500      	movs	r5, #0
 801684e:	f104 0919 	add.w	r9, r4, #25
 8016852:	e7f5      	b.n	8016840 <_printf_i+0x1f8>
 8016854:	2b00      	cmp	r3, #0
 8016856:	d1ac      	bne.n	80167b2 <_printf_i+0x16a>
 8016858:	7803      	ldrb	r3, [r0, #0]
 801685a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801685e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016862:	e76c      	b.n	801673e <_printf_i+0xf6>
 8016864:	0801a970 	.word	0x0801a970
 8016868:	0801a981 	.word	0x0801a981

0801686c <_scanf_float>:
 801686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016870:	469a      	mov	sl, r3
 8016872:	688b      	ldr	r3, [r1, #8]
 8016874:	4616      	mov	r6, r2
 8016876:	1e5a      	subs	r2, r3, #1
 8016878:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801687c:	b087      	sub	sp, #28
 801687e:	bf83      	ittte	hi
 8016880:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016884:	189b      	addhi	r3, r3, r2
 8016886:	9301      	strhi	r3, [sp, #4]
 8016888:	2300      	movls	r3, #0
 801688a:	bf86      	itte	hi
 801688c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016890:	608b      	strhi	r3, [r1, #8]
 8016892:	9301      	strls	r3, [sp, #4]
 8016894:	680b      	ldr	r3, [r1, #0]
 8016896:	4688      	mov	r8, r1
 8016898:	f04f 0b00 	mov.w	fp, #0
 801689c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80168a0:	f848 3b1c 	str.w	r3, [r8], #28
 80168a4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80168a8:	4607      	mov	r7, r0
 80168aa:	460c      	mov	r4, r1
 80168ac:	4645      	mov	r5, r8
 80168ae:	465a      	mov	r2, fp
 80168b0:	46d9      	mov	r9, fp
 80168b2:	f8cd b008 	str.w	fp, [sp, #8]
 80168b6:	68a1      	ldr	r1, [r4, #8]
 80168b8:	b181      	cbz	r1, 80168dc <_scanf_float+0x70>
 80168ba:	6833      	ldr	r3, [r6, #0]
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	2b49      	cmp	r3, #73	; 0x49
 80168c0:	d071      	beq.n	80169a6 <_scanf_float+0x13a>
 80168c2:	d84d      	bhi.n	8016960 <_scanf_float+0xf4>
 80168c4:	2b39      	cmp	r3, #57	; 0x39
 80168c6:	d840      	bhi.n	801694a <_scanf_float+0xde>
 80168c8:	2b31      	cmp	r3, #49	; 0x31
 80168ca:	f080 8088 	bcs.w	80169de <_scanf_float+0x172>
 80168ce:	2b2d      	cmp	r3, #45	; 0x2d
 80168d0:	f000 8090 	beq.w	80169f4 <_scanf_float+0x188>
 80168d4:	d815      	bhi.n	8016902 <_scanf_float+0x96>
 80168d6:	2b2b      	cmp	r3, #43	; 0x2b
 80168d8:	f000 808c 	beq.w	80169f4 <_scanf_float+0x188>
 80168dc:	f1b9 0f00 	cmp.w	r9, #0
 80168e0:	d003      	beq.n	80168ea <_scanf_float+0x7e>
 80168e2:	6823      	ldr	r3, [r4, #0]
 80168e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80168e8:	6023      	str	r3, [r4, #0]
 80168ea:	3a01      	subs	r2, #1
 80168ec:	2a01      	cmp	r2, #1
 80168ee:	f200 80ea 	bhi.w	8016ac6 <_scanf_float+0x25a>
 80168f2:	4545      	cmp	r5, r8
 80168f4:	f200 80dc 	bhi.w	8016ab0 <_scanf_float+0x244>
 80168f8:	2601      	movs	r6, #1
 80168fa:	4630      	mov	r0, r6
 80168fc:	b007      	add	sp, #28
 80168fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016902:	2b2e      	cmp	r3, #46	; 0x2e
 8016904:	f000 809f 	beq.w	8016a46 <_scanf_float+0x1da>
 8016908:	2b30      	cmp	r3, #48	; 0x30
 801690a:	d1e7      	bne.n	80168dc <_scanf_float+0x70>
 801690c:	6820      	ldr	r0, [r4, #0]
 801690e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016912:	d064      	beq.n	80169de <_scanf_float+0x172>
 8016914:	9b01      	ldr	r3, [sp, #4]
 8016916:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801691a:	6020      	str	r0, [r4, #0]
 801691c:	f109 0901 	add.w	r9, r9, #1
 8016920:	b11b      	cbz	r3, 801692a <_scanf_float+0xbe>
 8016922:	3b01      	subs	r3, #1
 8016924:	3101      	adds	r1, #1
 8016926:	9301      	str	r3, [sp, #4]
 8016928:	60a1      	str	r1, [r4, #8]
 801692a:	68a3      	ldr	r3, [r4, #8]
 801692c:	3b01      	subs	r3, #1
 801692e:	60a3      	str	r3, [r4, #8]
 8016930:	6923      	ldr	r3, [r4, #16]
 8016932:	3301      	adds	r3, #1
 8016934:	6123      	str	r3, [r4, #16]
 8016936:	6873      	ldr	r3, [r6, #4]
 8016938:	3b01      	subs	r3, #1
 801693a:	2b00      	cmp	r3, #0
 801693c:	6073      	str	r3, [r6, #4]
 801693e:	f340 80ac 	ble.w	8016a9a <_scanf_float+0x22e>
 8016942:	6833      	ldr	r3, [r6, #0]
 8016944:	3301      	adds	r3, #1
 8016946:	6033      	str	r3, [r6, #0]
 8016948:	e7b5      	b.n	80168b6 <_scanf_float+0x4a>
 801694a:	2b45      	cmp	r3, #69	; 0x45
 801694c:	f000 8085 	beq.w	8016a5a <_scanf_float+0x1ee>
 8016950:	2b46      	cmp	r3, #70	; 0x46
 8016952:	d06a      	beq.n	8016a2a <_scanf_float+0x1be>
 8016954:	2b41      	cmp	r3, #65	; 0x41
 8016956:	d1c1      	bne.n	80168dc <_scanf_float+0x70>
 8016958:	2a01      	cmp	r2, #1
 801695a:	d1bf      	bne.n	80168dc <_scanf_float+0x70>
 801695c:	2202      	movs	r2, #2
 801695e:	e046      	b.n	80169ee <_scanf_float+0x182>
 8016960:	2b65      	cmp	r3, #101	; 0x65
 8016962:	d07a      	beq.n	8016a5a <_scanf_float+0x1ee>
 8016964:	d818      	bhi.n	8016998 <_scanf_float+0x12c>
 8016966:	2b54      	cmp	r3, #84	; 0x54
 8016968:	d066      	beq.n	8016a38 <_scanf_float+0x1cc>
 801696a:	d811      	bhi.n	8016990 <_scanf_float+0x124>
 801696c:	2b4e      	cmp	r3, #78	; 0x4e
 801696e:	d1b5      	bne.n	80168dc <_scanf_float+0x70>
 8016970:	2a00      	cmp	r2, #0
 8016972:	d146      	bne.n	8016a02 <_scanf_float+0x196>
 8016974:	f1b9 0f00 	cmp.w	r9, #0
 8016978:	d145      	bne.n	8016a06 <_scanf_float+0x19a>
 801697a:	6821      	ldr	r1, [r4, #0]
 801697c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016980:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016984:	d13f      	bne.n	8016a06 <_scanf_float+0x19a>
 8016986:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801698a:	6021      	str	r1, [r4, #0]
 801698c:	2201      	movs	r2, #1
 801698e:	e02e      	b.n	80169ee <_scanf_float+0x182>
 8016990:	2b59      	cmp	r3, #89	; 0x59
 8016992:	d01e      	beq.n	80169d2 <_scanf_float+0x166>
 8016994:	2b61      	cmp	r3, #97	; 0x61
 8016996:	e7de      	b.n	8016956 <_scanf_float+0xea>
 8016998:	2b6e      	cmp	r3, #110	; 0x6e
 801699a:	d0e9      	beq.n	8016970 <_scanf_float+0x104>
 801699c:	d815      	bhi.n	80169ca <_scanf_float+0x15e>
 801699e:	2b66      	cmp	r3, #102	; 0x66
 80169a0:	d043      	beq.n	8016a2a <_scanf_float+0x1be>
 80169a2:	2b69      	cmp	r3, #105	; 0x69
 80169a4:	d19a      	bne.n	80168dc <_scanf_float+0x70>
 80169a6:	f1bb 0f00 	cmp.w	fp, #0
 80169aa:	d138      	bne.n	8016a1e <_scanf_float+0x1b2>
 80169ac:	f1b9 0f00 	cmp.w	r9, #0
 80169b0:	d197      	bne.n	80168e2 <_scanf_float+0x76>
 80169b2:	6821      	ldr	r1, [r4, #0]
 80169b4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80169b8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80169bc:	d195      	bne.n	80168ea <_scanf_float+0x7e>
 80169be:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80169c2:	6021      	str	r1, [r4, #0]
 80169c4:	f04f 0b01 	mov.w	fp, #1
 80169c8:	e011      	b.n	80169ee <_scanf_float+0x182>
 80169ca:	2b74      	cmp	r3, #116	; 0x74
 80169cc:	d034      	beq.n	8016a38 <_scanf_float+0x1cc>
 80169ce:	2b79      	cmp	r3, #121	; 0x79
 80169d0:	d184      	bne.n	80168dc <_scanf_float+0x70>
 80169d2:	f1bb 0f07 	cmp.w	fp, #7
 80169d6:	d181      	bne.n	80168dc <_scanf_float+0x70>
 80169d8:	f04f 0b08 	mov.w	fp, #8
 80169dc:	e007      	b.n	80169ee <_scanf_float+0x182>
 80169de:	eb12 0f0b 	cmn.w	r2, fp
 80169e2:	f47f af7b 	bne.w	80168dc <_scanf_float+0x70>
 80169e6:	6821      	ldr	r1, [r4, #0]
 80169e8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80169ec:	6021      	str	r1, [r4, #0]
 80169ee:	702b      	strb	r3, [r5, #0]
 80169f0:	3501      	adds	r5, #1
 80169f2:	e79a      	b.n	801692a <_scanf_float+0xbe>
 80169f4:	6821      	ldr	r1, [r4, #0]
 80169f6:	0608      	lsls	r0, r1, #24
 80169f8:	f57f af70 	bpl.w	80168dc <_scanf_float+0x70>
 80169fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016a00:	e7f4      	b.n	80169ec <_scanf_float+0x180>
 8016a02:	2a02      	cmp	r2, #2
 8016a04:	d047      	beq.n	8016a96 <_scanf_float+0x22a>
 8016a06:	f1bb 0f01 	cmp.w	fp, #1
 8016a0a:	d003      	beq.n	8016a14 <_scanf_float+0x1a8>
 8016a0c:	f1bb 0f04 	cmp.w	fp, #4
 8016a10:	f47f af64 	bne.w	80168dc <_scanf_float+0x70>
 8016a14:	f10b 0b01 	add.w	fp, fp, #1
 8016a18:	fa5f fb8b 	uxtb.w	fp, fp
 8016a1c:	e7e7      	b.n	80169ee <_scanf_float+0x182>
 8016a1e:	f1bb 0f03 	cmp.w	fp, #3
 8016a22:	d0f7      	beq.n	8016a14 <_scanf_float+0x1a8>
 8016a24:	f1bb 0f05 	cmp.w	fp, #5
 8016a28:	e7f2      	b.n	8016a10 <_scanf_float+0x1a4>
 8016a2a:	f1bb 0f02 	cmp.w	fp, #2
 8016a2e:	f47f af55 	bne.w	80168dc <_scanf_float+0x70>
 8016a32:	f04f 0b03 	mov.w	fp, #3
 8016a36:	e7da      	b.n	80169ee <_scanf_float+0x182>
 8016a38:	f1bb 0f06 	cmp.w	fp, #6
 8016a3c:	f47f af4e 	bne.w	80168dc <_scanf_float+0x70>
 8016a40:	f04f 0b07 	mov.w	fp, #7
 8016a44:	e7d3      	b.n	80169ee <_scanf_float+0x182>
 8016a46:	6821      	ldr	r1, [r4, #0]
 8016a48:	0588      	lsls	r0, r1, #22
 8016a4a:	f57f af47 	bpl.w	80168dc <_scanf_float+0x70>
 8016a4e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016a52:	6021      	str	r1, [r4, #0]
 8016a54:	f8cd 9008 	str.w	r9, [sp, #8]
 8016a58:	e7c9      	b.n	80169ee <_scanf_float+0x182>
 8016a5a:	6821      	ldr	r1, [r4, #0]
 8016a5c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016a60:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016a64:	d006      	beq.n	8016a74 <_scanf_float+0x208>
 8016a66:	0548      	lsls	r0, r1, #21
 8016a68:	f57f af38 	bpl.w	80168dc <_scanf_float+0x70>
 8016a6c:	f1b9 0f00 	cmp.w	r9, #0
 8016a70:	f43f af3b 	beq.w	80168ea <_scanf_float+0x7e>
 8016a74:	0588      	lsls	r0, r1, #22
 8016a76:	bf58      	it	pl
 8016a78:	9802      	ldrpl	r0, [sp, #8]
 8016a7a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016a7e:	bf58      	it	pl
 8016a80:	eba9 0000 	subpl.w	r0, r9, r0
 8016a84:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016a88:	bf58      	it	pl
 8016a8a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016a8e:	6021      	str	r1, [r4, #0]
 8016a90:	f04f 0900 	mov.w	r9, #0
 8016a94:	e7ab      	b.n	80169ee <_scanf_float+0x182>
 8016a96:	2203      	movs	r2, #3
 8016a98:	e7a9      	b.n	80169ee <_scanf_float+0x182>
 8016a9a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016a9e:	9205      	str	r2, [sp, #20]
 8016aa0:	4631      	mov	r1, r6
 8016aa2:	4638      	mov	r0, r7
 8016aa4:	4798      	blx	r3
 8016aa6:	9a05      	ldr	r2, [sp, #20]
 8016aa8:	2800      	cmp	r0, #0
 8016aaa:	f43f af04 	beq.w	80168b6 <_scanf_float+0x4a>
 8016aae:	e715      	b.n	80168dc <_scanf_float+0x70>
 8016ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ab4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016ab8:	4632      	mov	r2, r6
 8016aba:	4638      	mov	r0, r7
 8016abc:	4798      	blx	r3
 8016abe:	6923      	ldr	r3, [r4, #16]
 8016ac0:	3b01      	subs	r3, #1
 8016ac2:	6123      	str	r3, [r4, #16]
 8016ac4:	e715      	b.n	80168f2 <_scanf_float+0x86>
 8016ac6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016aca:	2b06      	cmp	r3, #6
 8016acc:	d80a      	bhi.n	8016ae4 <_scanf_float+0x278>
 8016ace:	f1bb 0f02 	cmp.w	fp, #2
 8016ad2:	d968      	bls.n	8016ba6 <_scanf_float+0x33a>
 8016ad4:	f1ab 0b03 	sub.w	fp, fp, #3
 8016ad8:	fa5f fb8b 	uxtb.w	fp, fp
 8016adc:	eba5 0b0b 	sub.w	fp, r5, fp
 8016ae0:	455d      	cmp	r5, fp
 8016ae2:	d14b      	bne.n	8016b7c <_scanf_float+0x310>
 8016ae4:	6823      	ldr	r3, [r4, #0]
 8016ae6:	05da      	lsls	r2, r3, #23
 8016ae8:	d51f      	bpl.n	8016b2a <_scanf_float+0x2be>
 8016aea:	055b      	lsls	r3, r3, #21
 8016aec:	d468      	bmi.n	8016bc0 <_scanf_float+0x354>
 8016aee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016af2:	6923      	ldr	r3, [r4, #16]
 8016af4:	2965      	cmp	r1, #101	; 0x65
 8016af6:	f103 33ff 	add.w	r3, r3, #4294967295
 8016afa:	f105 3bff 	add.w	fp, r5, #4294967295
 8016afe:	6123      	str	r3, [r4, #16]
 8016b00:	d00d      	beq.n	8016b1e <_scanf_float+0x2b2>
 8016b02:	2945      	cmp	r1, #69	; 0x45
 8016b04:	d00b      	beq.n	8016b1e <_scanf_float+0x2b2>
 8016b06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b0a:	4632      	mov	r2, r6
 8016b0c:	4638      	mov	r0, r7
 8016b0e:	4798      	blx	r3
 8016b10:	6923      	ldr	r3, [r4, #16]
 8016b12:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016b16:	3b01      	subs	r3, #1
 8016b18:	f1a5 0b02 	sub.w	fp, r5, #2
 8016b1c:	6123      	str	r3, [r4, #16]
 8016b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b22:	4632      	mov	r2, r6
 8016b24:	4638      	mov	r0, r7
 8016b26:	4798      	blx	r3
 8016b28:	465d      	mov	r5, fp
 8016b2a:	6826      	ldr	r6, [r4, #0]
 8016b2c:	f016 0610 	ands.w	r6, r6, #16
 8016b30:	d17a      	bne.n	8016c28 <_scanf_float+0x3bc>
 8016b32:	702e      	strb	r6, [r5, #0]
 8016b34:	6823      	ldr	r3, [r4, #0]
 8016b36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016b3e:	d142      	bne.n	8016bc6 <_scanf_float+0x35a>
 8016b40:	9b02      	ldr	r3, [sp, #8]
 8016b42:	eba9 0303 	sub.w	r3, r9, r3
 8016b46:	425a      	negs	r2, r3
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d149      	bne.n	8016be0 <_scanf_float+0x374>
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	4641      	mov	r1, r8
 8016b50:	4638      	mov	r0, r7
 8016b52:	f000 ff0d 	bl	8017970 <_strtod_r>
 8016b56:	6825      	ldr	r5, [r4, #0]
 8016b58:	f8da 3000 	ldr.w	r3, [sl]
 8016b5c:	f015 0f02 	tst.w	r5, #2
 8016b60:	f103 0204 	add.w	r2, r3, #4
 8016b64:	ec59 8b10 	vmov	r8, r9, d0
 8016b68:	f8ca 2000 	str.w	r2, [sl]
 8016b6c:	d043      	beq.n	8016bf6 <_scanf_float+0x38a>
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	e9c3 8900 	strd	r8, r9, [r3]
 8016b74:	68e3      	ldr	r3, [r4, #12]
 8016b76:	3301      	adds	r3, #1
 8016b78:	60e3      	str	r3, [r4, #12]
 8016b7a:	e6be      	b.n	80168fa <_scanf_float+0x8e>
 8016b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b84:	4632      	mov	r2, r6
 8016b86:	4638      	mov	r0, r7
 8016b88:	4798      	blx	r3
 8016b8a:	6923      	ldr	r3, [r4, #16]
 8016b8c:	3b01      	subs	r3, #1
 8016b8e:	6123      	str	r3, [r4, #16]
 8016b90:	e7a6      	b.n	8016ae0 <_scanf_float+0x274>
 8016b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b96:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b9a:	4632      	mov	r2, r6
 8016b9c:	4638      	mov	r0, r7
 8016b9e:	4798      	blx	r3
 8016ba0:	6923      	ldr	r3, [r4, #16]
 8016ba2:	3b01      	subs	r3, #1
 8016ba4:	6123      	str	r3, [r4, #16]
 8016ba6:	4545      	cmp	r5, r8
 8016ba8:	d8f3      	bhi.n	8016b92 <_scanf_float+0x326>
 8016baa:	e6a5      	b.n	80168f8 <_scanf_float+0x8c>
 8016bac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016bb0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016bb4:	4632      	mov	r2, r6
 8016bb6:	4638      	mov	r0, r7
 8016bb8:	4798      	blx	r3
 8016bba:	6923      	ldr	r3, [r4, #16]
 8016bbc:	3b01      	subs	r3, #1
 8016bbe:	6123      	str	r3, [r4, #16]
 8016bc0:	4545      	cmp	r5, r8
 8016bc2:	d8f3      	bhi.n	8016bac <_scanf_float+0x340>
 8016bc4:	e698      	b.n	80168f8 <_scanf_float+0x8c>
 8016bc6:	9b03      	ldr	r3, [sp, #12]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d0bf      	beq.n	8016b4c <_scanf_float+0x2e0>
 8016bcc:	9904      	ldr	r1, [sp, #16]
 8016bce:	230a      	movs	r3, #10
 8016bd0:	4632      	mov	r2, r6
 8016bd2:	3101      	adds	r1, #1
 8016bd4:	4638      	mov	r0, r7
 8016bd6:	f000 ff57 	bl	8017a88 <_strtol_r>
 8016bda:	9b03      	ldr	r3, [sp, #12]
 8016bdc:	9d04      	ldr	r5, [sp, #16]
 8016bde:	1ac2      	subs	r2, r0, r3
 8016be0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016be4:	429d      	cmp	r5, r3
 8016be6:	bf28      	it	cs
 8016be8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016bec:	490f      	ldr	r1, [pc, #60]	; (8016c2c <_scanf_float+0x3c0>)
 8016bee:	4628      	mov	r0, r5
 8016bf0:	f000 f858 	bl	8016ca4 <siprintf>
 8016bf4:	e7aa      	b.n	8016b4c <_scanf_float+0x2e0>
 8016bf6:	f015 0504 	ands.w	r5, r5, #4
 8016bfa:	d1b8      	bne.n	8016b6e <_scanf_float+0x302>
 8016bfc:	681f      	ldr	r7, [r3, #0]
 8016bfe:	ee10 2a10 	vmov	r2, s0
 8016c02:	464b      	mov	r3, r9
 8016c04:	ee10 0a10 	vmov	r0, s0
 8016c08:	4649      	mov	r1, r9
 8016c0a:	f7e9 ffa7 	bl	8000b5c <__aeabi_dcmpun>
 8016c0e:	b128      	cbz	r0, 8016c1c <_scanf_float+0x3b0>
 8016c10:	4628      	mov	r0, r5
 8016c12:	f000 f80d 	bl	8016c30 <nanf>
 8016c16:	ed87 0a00 	vstr	s0, [r7]
 8016c1a:	e7ab      	b.n	8016b74 <_scanf_float+0x308>
 8016c1c:	4640      	mov	r0, r8
 8016c1e:	4649      	mov	r1, r9
 8016c20:	f7e9 fffa 	bl	8000c18 <__aeabi_d2f>
 8016c24:	6038      	str	r0, [r7, #0]
 8016c26:	e7a5      	b.n	8016b74 <_scanf_float+0x308>
 8016c28:	2600      	movs	r6, #0
 8016c2a:	e666      	b.n	80168fa <_scanf_float+0x8e>
 8016c2c:	0801a992 	.word	0x0801a992

08016c30 <nanf>:
 8016c30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016c38 <nanf+0x8>
 8016c34:	4770      	bx	lr
 8016c36:	bf00      	nop
 8016c38:	7fc00000 	.word	0x7fc00000

08016c3c <sniprintf>:
 8016c3c:	b40c      	push	{r2, r3}
 8016c3e:	b530      	push	{r4, r5, lr}
 8016c40:	4b17      	ldr	r3, [pc, #92]	; (8016ca0 <sniprintf+0x64>)
 8016c42:	1e0c      	subs	r4, r1, #0
 8016c44:	b09d      	sub	sp, #116	; 0x74
 8016c46:	681d      	ldr	r5, [r3, #0]
 8016c48:	da08      	bge.n	8016c5c <sniprintf+0x20>
 8016c4a:	238b      	movs	r3, #139	; 0x8b
 8016c4c:	602b      	str	r3, [r5, #0]
 8016c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8016c52:	b01d      	add	sp, #116	; 0x74
 8016c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c58:	b002      	add	sp, #8
 8016c5a:	4770      	bx	lr
 8016c5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016c60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016c64:	bf14      	ite	ne
 8016c66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016c6a:	4623      	moveq	r3, r4
 8016c6c:	9304      	str	r3, [sp, #16]
 8016c6e:	9307      	str	r3, [sp, #28]
 8016c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c74:	9002      	str	r0, [sp, #8]
 8016c76:	9006      	str	r0, [sp, #24]
 8016c78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016c7e:	ab21      	add	r3, sp, #132	; 0x84
 8016c80:	a902      	add	r1, sp, #8
 8016c82:	4628      	mov	r0, r5
 8016c84:	9301      	str	r3, [sp, #4]
 8016c86:	f002 fdf3 	bl	8019870 <_svfiprintf_r>
 8016c8a:	1c43      	adds	r3, r0, #1
 8016c8c:	bfbc      	itt	lt
 8016c8e:	238b      	movlt	r3, #139	; 0x8b
 8016c90:	602b      	strlt	r3, [r5, #0]
 8016c92:	2c00      	cmp	r4, #0
 8016c94:	d0dd      	beq.n	8016c52 <sniprintf+0x16>
 8016c96:	9b02      	ldr	r3, [sp, #8]
 8016c98:	2200      	movs	r2, #0
 8016c9a:	701a      	strb	r2, [r3, #0]
 8016c9c:	e7d9      	b.n	8016c52 <sniprintf+0x16>
 8016c9e:	bf00      	nop
 8016ca0:	2000000c 	.word	0x2000000c

08016ca4 <siprintf>:
 8016ca4:	b40e      	push	{r1, r2, r3}
 8016ca6:	b500      	push	{lr}
 8016ca8:	b09c      	sub	sp, #112	; 0x70
 8016caa:	ab1d      	add	r3, sp, #116	; 0x74
 8016cac:	9002      	str	r0, [sp, #8]
 8016cae:	9006      	str	r0, [sp, #24]
 8016cb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016cb4:	4809      	ldr	r0, [pc, #36]	; (8016cdc <siprintf+0x38>)
 8016cb6:	9107      	str	r1, [sp, #28]
 8016cb8:	9104      	str	r1, [sp, #16]
 8016cba:	4909      	ldr	r1, [pc, #36]	; (8016ce0 <siprintf+0x3c>)
 8016cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cc0:	9105      	str	r1, [sp, #20]
 8016cc2:	6800      	ldr	r0, [r0, #0]
 8016cc4:	9301      	str	r3, [sp, #4]
 8016cc6:	a902      	add	r1, sp, #8
 8016cc8:	f002 fdd2 	bl	8019870 <_svfiprintf_r>
 8016ccc:	9b02      	ldr	r3, [sp, #8]
 8016cce:	2200      	movs	r2, #0
 8016cd0:	701a      	strb	r2, [r3, #0]
 8016cd2:	b01c      	add	sp, #112	; 0x70
 8016cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016cd8:	b003      	add	sp, #12
 8016cda:	4770      	bx	lr
 8016cdc:	2000000c 	.word	0x2000000c
 8016ce0:	ffff0208 	.word	0xffff0208

08016ce4 <siscanf>:
 8016ce4:	b40e      	push	{r1, r2, r3}
 8016ce6:	b530      	push	{r4, r5, lr}
 8016ce8:	b09c      	sub	sp, #112	; 0x70
 8016cea:	ac1f      	add	r4, sp, #124	; 0x7c
 8016cec:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016cf0:	f854 5b04 	ldr.w	r5, [r4], #4
 8016cf4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016cf8:	9002      	str	r0, [sp, #8]
 8016cfa:	9006      	str	r0, [sp, #24]
 8016cfc:	f7e9 fa80 	bl	8000200 <strlen>
 8016d00:	4b0b      	ldr	r3, [pc, #44]	; (8016d30 <siscanf+0x4c>)
 8016d02:	9003      	str	r0, [sp, #12]
 8016d04:	9007      	str	r0, [sp, #28]
 8016d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d08:	480a      	ldr	r0, [pc, #40]	; (8016d34 <siscanf+0x50>)
 8016d0a:	9401      	str	r4, [sp, #4]
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d10:	9314      	str	r3, [sp, #80]	; 0x50
 8016d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d16:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016d1a:	462a      	mov	r2, r5
 8016d1c:	4623      	mov	r3, r4
 8016d1e:	a902      	add	r1, sp, #8
 8016d20:	6800      	ldr	r0, [r0, #0]
 8016d22:	f002 fef7 	bl	8019b14 <__ssvfiscanf_r>
 8016d26:	b01c      	add	sp, #112	; 0x70
 8016d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d2c:	b003      	add	sp, #12
 8016d2e:	4770      	bx	lr
 8016d30:	08016d39 	.word	0x08016d39
 8016d34:	2000000c 	.word	0x2000000c

08016d38 <__seofread>:
 8016d38:	2000      	movs	r0, #0
 8016d3a:	4770      	bx	lr

08016d3c <strcpy>:
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d42:	f803 2b01 	strb.w	r2, [r3], #1
 8016d46:	2a00      	cmp	r2, #0
 8016d48:	d1f9      	bne.n	8016d3e <strcpy+0x2>
 8016d4a:	4770      	bx	lr

08016d4c <sulp>:
 8016d4c:	b570      	push	{r4, r5, r6, lr}
 8016d4e:	4604      	mov	r4, r0
 8016d50:	460d      	mov	r5, r1
 8016d52:	ec45 4b10 	vmov	d0, r4, r5
 8016d56:	4616      	mov	r6, r2
 8016d58:	f002 fb46 	bl	80193e8 <__ulp>
 8016d5c:	ec51 0b10 	vmov	r0, r1, d0
 8016d60:	b17e      	cbz	r6, 8016d82 <sulp+0x36>
 8016d62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016d66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	dd09      	ble.n	8016d82 <sulp+0x36>
 8016d6e:	051b      	lsls	r3, r3, #20
 8016d70:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016d74:	2400      	movs	r4, #0
 8016d76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016d7a:	4622      	mov	r2, r4
 8016d7c:	462b      	mov	r3, r5
 8016d7e:	f7e9 fc53 	bl	8000628 <__aeabi_dmul>
 8016d82:	bd70      	pop	{r4, r5, r6, pc}
 8016d84:	0000      	movs	r0, r0
	...

08016d88 <_strtod_l>:
 8016d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d8c:	461f      	mov	r7, r3
 8016d8e:	b0a1      	sub	sp, #132	; 0x84
 8016d90:	2300      	movs	r3, #0
 8016d92:	4681      	mov	r9, r0
 8016d94:	4638      	mov	r0, r7
 8016d96:	460e      	mov	r6, r1
 8016d98:	9217      	str	r2, [sp, #92]	; 0x5c
 8016d9a:	931c      	str	r3, [sp, #112]	; 0x70
 8016d9c:	f002 f824 	bl	8018de8 <__localeconv_l>
 8016da0:	4680      	mov	r8, r0
 8016da2:	6800      	ldr	r0, [r0, #0]
 8016da4:	f7e9 fa2c 	bl	8000200 <strlen>
 8016da8:	f04f 0a00 	mov.w	sl, #0
 8016dac:	4604      	mov	r4, r0
 8016dae:	f04f 0b00 	mov.w	fp, #0
 8016db2:	961b      	str	r6, [sp, #108]	; 0x6c
 8016db4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016db6:	781a      	ldrb	r2, [r3, #0]
 8016db8:	2a0d      	cmp	r2, #13
 8016dba:	d832      	bhi.n	8016e22 <_strtod_l+0x9a>
 8016dbc:	2a09      	cmp	r2, #9
 8016dbe:	d236      	bcs.n	8016e2e <_strtod_l+0xa6>
 8016dc0:	2a00      	cmp	r2, #0
 8016dc2:	d03e      	beq.n	8016e42 <_strtod_l+0xba>
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	930d      	str	r3, [sp, #52]	; 0x34
 8016dc8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016dca:	782b      	ldrb	r3, [r5, #0]
 8016dcc:	2b30      	cmp	r3, #48	; 0x30
 8016dce:	f040 80ac 	bne.w	8016f2a <_strtod_l+0x1a2>
 8016dd2:	786b      	ldrb	r3, [r5, #1]
 8016dd4:	2b58      	cmp	r3, #88	; 0x58
 8016dd6:	d001      	beq.n	8016ddc <_strtod_l+0x54>
 8016dd8:	2b78      	cmp	r3, #120	; 0x78
 8016dda:	d167      	bne.n	8016eac <_strtod_l+0x124>
 8016ddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016dde:	9301      	str	r3, [sp, #4]
 8016de0:	ab1c      	add	r3, sp, #112	; 0x70
 8016de2:	9300      	str	r3, [sp, #0]
 8016de4:	9702      	str	r7, [sp, #8]
 8016de6:	ab1d      	add	r3, sp, #116	; 0x74
 8016de8:	4a88      	ldr	r2, [pc, #544]	; (801700c <_strtod_l+0x284>)
 8016dea:	a91b      	add	r1, sp, #108	; 0x6c
 8016dec:	4648      	mov	r0, r9
 8016dee:	f001 fd12 	bl	8018816 <__gethex>
 8016df2:	f010 0407 	ands.w	r4, r0, #7
 8016df6:	4606      	mov	r6, r0
 8016df8:	d005      	beq.n	8016e06 <_strtod_l+0x7e>
 8016dfa:	2c06      	cmp	r4, #6
 8016dfc:	d12b      	bne.n	8016e56 <_strtod_l+0xce>
 8016dfe:	3501      	adds	r5, #1
 8016e00:	2300      	movs	r3, #0
 8016e02:	951b      	str	r5, [sp, #108]	; 0x6c
 8016e04:	930d      	str	r3, [sp, #52]	; 0x34
 8016e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	f040 859a 	bne.w	8017942 <_strtod_l+0xbba>
 8016e0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e10:	b1e3      	cbz	r3, 8016e4c <_strtod_l+0xc4>
 8016e12:	4652      	mov	r2, sl
 8016e14:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016e18:	ec43 2b10 	vmov	d0, r2, r3
 8016e1c:	b021      	add	sp, #132	; 0x84
 8016e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e22:	2a2b      	cmp	r2, #43	; 0x2b
 8016e24:	d015      	beq.n	8016e52 <_strtod_l+0xca>
 8016e26:	2a2d      	cmp	r2, #45	; 0x2d
 8016e28:	d004      	beq.n	8016e34 <_strtod_l+0xac>
 8016e2a:	2a20      	cmp	r2, #32
 8016e2c:	d1ca      	bne.n	8016dc4 <_strtod_l+0x3c>
 8016e2e:	3301      	adds	r3, #1
 8016e30:	931b      	str	r3, [sp, #108]	; 0x6c
 8016e32:	e7bf      	b.n	8016db4 <_strtod_l+0x2c>
 8016e34:	2201      	movs	r2, #1
 8016e36:	920d      	str	r2, [sp, #52]	; 0x34
 8016e38:	1c5a      	adds	r2, r3, #1
 8016e3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e3c:	785b      	ldrb	r3, [r3, #1]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d1c2      	bne.n	8016dc8 <_strtod_l+0x40>
 8016e42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e44:	961b      	str	r6, [sp, #108]	; 0x6c
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	f040 8579 	bne.w	801793e <_strtod_l+0xbb6>
 8016e4c:	4652      	mov	r2, sl
 8016e4e:	465b      	mov	r3, fp
 8016e50:	e7e2      	b.n	8016e18 <_strtod_l+0x90>
 8016e52:	2200      	movs	r2, #0
 8016e54:	e7ef      	b.n	8016e36 <_strtod_l+0xae>
 8016e56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016e58:	b13a      	cbz	r2, 8016e6a <_strtod_l+0xe2>
 8016e5a:	2135      	movs	r1, #53	; 0x35
 8016e5c:	a81e      	add	r0, sp, #120	; 0x78
 8016e5e:	f002 fbbb 	bl	80195d8 <__copybits>
 8016e62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e64:	4648      	mov	r0, r9
 8016e66:	f002 f828 	bl	8018eba <_Bfree>
 8016e6a:	3c01      	subs	r4, #1
 8016e6c:	2c04      	cmp	r4, #4
 8016e6e:	d806      	bhi.n	8016e7e <_strtod_l+0xf6>
 8016e70:	e8df f004 	tbb	[pc, r4]
 8016e74:	1714030a 	.word	0x1714030a
 8016e78:	0a          	.byte	0x0a
 8016e79:	00          	.byte	0x00
 8016e7a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016e7e:	0730      	lsls	r0, r6, #28
 8016e80:	d5c1      	bpl.n	8016e06 <_strtod_l+0x7e>
 8016e82:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016e86:	e7be      	b.n	8016e06 <_strtod_l+0x7e>
 8016e88:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016e8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016e8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016e92:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016e96:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016e9a:	e7f0      	b.n	8016e7e <_strtod_l+0xf6>
 8016e9c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8017010 <_strtod_l+0x288>
 8016ea0:	e7ed      	b.n	8016e7e <_strtod_l+0xf6>
 8016ea2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016ea6:	f04f 3aff 	mov.w	sl, #4294967295
 8016eaa:	e7e8      	b.n	8016e7e <_strtod_l+0xf6>
 8016eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016eae:	1c5a      	adds	r2, r3, #1
 8016eb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8016eb2:	785b      	ldrb	r3, [r3, #1]
 8016eb4:	2b30      	cmp	r3, #48	; 0x30
 8016eb6:	d0f9      	beq.n	8016eac <_strtod_l+0x124>
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d0a4      	beq.n	8016e06 <_strtod_l+0x7e>
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	2500      	movs	r5, #0
 8016ec0:	9306      	str	r3, [sp, #24]
 8016ec2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ec4:	9308      	str	r3, [sp, #32]
 8016ec6:	9507      	str	r5, [sp, #28]
 8016ec8:	9505      	str	r5, [sp, #20]
 8016eca:	220a      	movs	r2, #10
 8016ecc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016ece:	7807      	ldrb	r7, [r0, #0]
 8016ed0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016ed4:	b2d9      	uxtb	r1, r3
 8016ed6:	2909      	cmp	r1, #9
 8016ed8:	d929      	bls.n	8016f2e <_strtod_l+0x1a6>
 8016eda:	4622      	mov	r2, r4
 8016edc:	f8d8 1000 	ldr.w	r1, [r8]
 8016ee0:	f003 f902 	bl	801a0e8 <strncmp>
 8016ee4:	2800      	cmp	r0, #0
 8016ee6:	d031      	beq.n	8016f4c <_strtod_l+0x1c4>
 8016ee8:	2000      	movs	r0, #0
 8016eea:	9c05      	ldr	r4, [sp, #20]
 8016eec:	9004      	str	r0, [sp, #16]
 8016eee:	463b      	mov	r3, r7
 8016ef0:	4602      	mov	r2, r0
 8016ef2:	2b65      	cmp	r3, #101	; 0x65
 8016ef4:	d001      	beq.n	8016efa <_strtod_l+0x172>
 8016ef6:	2b45      	cmp	r3, #69	; 0x45
 8016ef8:	d114      	bne.n	8016f24 <_strtod_l+0x19c>
 8016efa:	b924      	cbnz	r4, 8016f06 <_strtod_l+0x17e>
 8016efc:	b910      	cbnz	r0, 8016f04 <_strtod_l+0x17c>
 8016efe:	9b06      	ldr	r3, [sp, #24]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d09e      	beq.n	8016e42 <_strtod_l+0xba>
 8016f04:	2400      	movs	r4, #0
 8016f06:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016f08:	1c73      	adds	r3, r6, #1
 8016f0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8016f0c:	7873      	ldrb	r3, [r6, #1]
 8016f0e:	2b2b      	cmp	r3, #43	; 0x2b
 8016f10:	d078      	beq.n	8017004 <_strtod_l+0x27c>
 8016f12:	2b2d      	cmp	r3, #45	; 0x2d
 8016f14:	d070      	beq.n	8016ff8 <_strtod_l+0x270>
 8016f16:	f04f 0c00 	mov.w	ip, #0
 8016f1a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016f1e:	2f09      	cmp	r7, #9
 8016f20:	d97c      	bls.n	801701c <_strtod_l+0x294>
 8016f22:	961b      	str	r6, [sp, #108]	; 0x6c
 8016f24:	f04f 0e00 	mov.w	lr, #0
 8016f28:	e09a      	b.n	8017060 <_strtod_l+0x2d8>
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	e7c7      	b.n	8016ebe <_strtod_l+0x136>
 8016f2e:	9905      	ldr	r1, [sp, #20]
 8016f30:	2908      	cmp	r1, #8
 8016f32:	bfdd      	ittte	le
 8016f34:	9907      	ldrle	r1, [sp, #28]
 8016f36:	fb02 3301 	mlale	r3, r2, r1, r3
 8016f3a:	9307      	strle	r3, [sp, #28]
 8016f3c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016f40:	9b05      	ldr	r3, [sp, #20]
 8016f42:	3001      	adds	r0, #1
 8016f44:	3301      	adds	r3, #1
 8016f46:	9305      	str	r3, [sp, #20]
 8016f48:	901b      	str	r0, [sp, #108]	; 0x6c
 8016f4a:	e7bf      	b.n	8016ecc <_strtod_l+0x144>
 8016f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f4e:	191a      	adds	r2, r3, r4
 8016f50:	921b      	str	r2, [sp, #108]	; 0x6c
 8016f52:	9a05      	ldr	r2, [sp, #20]
 8016f54:	5d1b      	ldrb	r3, [r3, r4]
 8016f56:	2a00      	cmp	r2, #0
 8016f58:	d037      	beq.n	8016fca <_strtod_l+0x242>
 8016f5a:	9c05      	ldr	r4, [sp, #20]
 8016f5c:	4602      	mov	r2, r0
 8016f5e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016f62:	2909      	cmp	r1, #9
 8016f64:	d913      	bls.n	8016f8e <_strtod_l+0x206>
 8016f66:	2101      	movs	r1, #1
 8016f68:	9104      	str	r1, [sp, #16]
 8016f6a:	e7c2      	b.n	8016ef2 <_strtod_l+0x16a>
 8016f6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f6e:	1c5a      	adds	r2, r3, #1
 8016f70:	921b      	str	r2, [sp, #108]	; 0x6c
 8016f72:	785b      	ldrb	r3, [r3, #1]
 8016f74:	3001      	adds	r0, #1
 8016f76:	2b30      	cmp	r3, #48	; 0x30
 8016f78:	d0f8      	beq.n	8016f6c <_strtod_l+0x1e4>
 8016f7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016f7e:	2a08      	cmp	r2, #8
 8016f80:	f200 84e4 	bhi.w	801794c <_strtod_l+0xbc4>
 8016f84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016f86:	9208      	str	r2, [sp, #32]
 8016f88:	4602      	mov	r2, r0
 8016f8a:	2000      	movs	r0, #0
 8016f8c:	4604      	mov	r4, r0
 8016f8e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016f92:	f100 0101 	add.w	r1, r0, #1
 8016f96:	d012      	beq.n	8016fbe <_strtod_l+0x236>
 8016f98:	440a      	add	r2, r1
 8016f9a:	eb00 0c04 	add.w	ip, r0, r4
 8016f9e:	4621      	mov	r1, r4
 8016fa0:	270a      	movs	r7, #10
 8016fa2:	458c      	cmp	ip, r1
 8016fa4:	d113      	bne.n	8016fce <_strtod_l+0x246>
 8016fa6:	1821      	adds	r1, r4, r0
 8016fa8:	2908      	cmp	r1, #8
 8016faa:	f104 0401 	add.w	r4, r4, #1
 8016fae:	4404      	add	r4, r0
 8016fb0:	dc19      	bgt.n	8016fe6 <_strtod_l+0x25e>
 8016fb2:	9b07      	ldr	r3, [sp, #28]
 8016fb4:	210a      	movs	r1, #10
 8016fb6:	fb01 e303 	mla	r3, r1, r3, lr
 8016fba:	9307      	str	r3, [sp, #28]
 8016fbc:	2100      	movs	r1, #0
 8016fbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fc0:	1c58      	adds	r0, r3, #1
 8016fc2:	901b      	str	r0, [sp, #108]	; 0x6c
 8016fc4:	785b      	ldrb	r3, [r3, #1]
 8016fc6:	4608      	mov	r0, r1
 8016fc8:	e7c9      	b.n	8016f5e <_strtod_l+0x1d6>
 8016fca:	9805      	ldr	r0, [sp, #20]
 8016fcc:	e7d3      	b.n	8016f76 <_strtod_l+0x1ee>
 8016fce:	2908      	cmp	r1, #8
 8016fd0:	f101 0101 	add.w	r1, r1, #1
 8016fd4:	dc03      	bgt.n	8016fde <_strtod_l+0x256>
 8016fd6:	9b07      	ldr	r3, [sp, #28]
 8016fd8:	437b      	muls	r3, r7
 8016fda:	9307      	str	r3, [sp, #28]
 8016fdc:	e7e1      	b.n	8016fa2 <_strtod_l+0x21a>
 8016fde:	2910      	cmp	r1, #16
 8016fe0:	bfd8      	it	le
 8016fe2:	437d      	mulle	r5, r7
 8016fe4:	e7dd      	b.n	8016fa2 <_strtod_l+0x21a>
 8016fe6:	2c10      	cmp	r4, #16
 8016fe8:	bfdc      	itt	le
 8016fea:	210a      	movle	r1, #10
 8016fec:	fb01 e505 	mlale	r5, r1, r5, lr
 8016ff0:	e7e4      	b.n	8016fbc <_strtod_l+0x234>
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	9304      	str	r3, [sp, #16]
 8016ff6:	e781      	b.n	8016efc <_strtod_l+0x174>
 8016ff8:	f04f 0c01 	mov.w	ip, #1
 8016ffc:	1cb3      	adds	r3, r6, #2
 8016ffe:	931b      	str	r3, [sp, #108]	; 0x6c
 8017000:	78b3      	ldrb	r3, [r6, #2]
 8017002:	e78a      	b.n	8016f1a <_strtod_l+0x192>
 8017004:	f04f 0c00 	mov.w	ip, #0
 8017008:	e7f8      	b.n	8016ffc <_strtod_l+0x274>
 801700a:	bf00      	nop
 801700c:	0801a998 	.word	0x0801a998
 8017010:	7ff00000 	.word	0x7ff00000
 8017014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017016:	1c5f      	adds	r7, r3, #1
 8017018:	971b      	str	r7, [sp, #108]	; 0x6c
 801701a:	785b      	ldrb	r3, [r3, #1]
 801701c:	2b30      	cmp	r3, #48	; 0x30
 801701e:	d0f9      	beq.n	8017014 <_strtod_l+0x28c>
 8017020:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8017024:	2f08      	cmp	r7, #8
 8017026:	f63f af7d 	bhi.w	8016f24 <_strtod_l+0x19c>
 801702a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801702e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017030:	930a      	str	r3, [sp, #40]	; 0x28
 8017032:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017034:	1c5f      	adds	r7, r3, #1
 8017036:	971b      	str	r7, [sp, #108]	; 0x6c
 8017038:	785b      	ldrb	r3, [r3, #1]
 801703a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801703e:	f1b8 0f09 	cmp.w	r8, #9
 8017042:	d937      	bls.n	80170b4 <_strtod_l+0x32c>
 8017044:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017046:	1a7f      	subs	r7, r7, r1
 8017048:	2f08      	cmp	r7, #8
 801704a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801704e:	dc37      	bgt.n	80170c0 <_strtod_l+0x338>
 8017050:	45be      	cmp	lr, r7
 8017052:	bfa8      	it	ge
 8017054:	46be      	movge	lr, r7
 8017056:	f1bc 0f00 	cmp.w	ip, #0
 801705a:	d001      	beq.n	8017060 <_strtod_l+0x2d8>
 801705c:	f1ce 0e00 	rsb	lr, lr, #0
 8017060:	2c00      	cmp	r4, #0
 8017062:	d151      	bne.n	8017108 <_strtod_l+0x380>
 8017064:	2800      	cmp	r0, #0
 8017066:	f47f aece 	bne.w	8016e06 <_strtod_l+0x7e>
 801706a:	9a06      	ldr	r2, [sp, #24]
 801706c:	2a00      	cmp	r2, #0
 801706e:	f47f aeca 	bne.w	8016e06 <_strtod_l+0x7e>
 8017072:	9a04      	ldr	r2, [sp, #16]
 8017074:	2a00      	cmp	r2, #0
 8017076:	f47f aee4 	bne.w	8016e42 <_strtod_l+0xba>
 801707a:	2b4e      	cmp	r3, #78	; 0x4e
 801707c:	d027      	beq.n	80170ce <_strtod_l+0x346>
 801707e:	dc21      	bgt.n	80170c4 <_strtod_l+0x33c>
 8017080:	2b49      	cmp	r3, #73	; 0x49
 8017082:	f47f aede 	bne.w	8016e42 <_strtod_l+0xba>
 8017086:	49a0      	ldr	r1, [pc, #640]	; (8017308 <_strtod_l+0x580>)
 8017088:	a81b      	add	r0, sp, #108	; 0x6c
 801708a:	f001 fdf7 	bl	8018c7c <__match>
 801708e:	2800      	cmp	r0, #0
 8017090:	f43f aed7 	beq.w	8016e42 <_strtod_l+0xba>
 8017094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017096:	499d      	ldr	r1, [pc, #628]	; (801730c <_strtod_l+0x584>)
 8017098:	3b01      	subs	r3, #1
 801709a:	a81b      	add	r0, sp, #108	; 0x6c
 801709c:	931b      	str	r3, [sp, #108]	; 0x6c
 801709e:	f001 fded 	bl	8018c7c <__match>
 80170a2:	b910      	cbnz	r0, 80170aa <_strtod_l+0x322>
 80170a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170a6:	3301      	adds	r3, #1
 80170a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80170aa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8017320 <_strtod_l+0x598>
 80170ae:	f04f 0a00 	mov.w	sl, #0
 80170b2:	e6a8      	b.n	8016e06 <_strtod_l+0x7e>
 80170b4:	210a      	movs	r1, #10
 80170b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80170ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80170be:	e7b8      	b.n	8017032 <_strtod_l+0x2aa>
 80170c0:	46be      	mov	lr, r7
 80170c2:	e7c8      	b.n	8017056 <_strtod_l+0x2ce>
 80170c4:	2b69      	cmp	r3, #105	; 0x69
 80170c6:	d0de      	beq.n	8017086 <_strtod_l+0x2fe>
 80170c8:	2b6e      	cmp	r3, #110	; 0x6e
 80170ca:	f47f aeba 	bne.w	8016e42 <_strtod_l+0xba>
 80170ce:	4990      	ldr	r1, [pc, #576]	; (8017310 <_strtod_l+0x588>)
 80170d0:	a81b      	add	r0, sp, #108	; 0x6c
 80170d2:	f001 fdd3 	bl	8018c7c <__match>
 80170d6:	2800      	cmp	r0, #0
 80170d8:	f43f aeb3 	beq.w	8016e42 <_strtod_l+0xba>
 80170dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80170de:	781b      	ldrb	r3, [r3, #0]
 80170e0:	2b28      	cmp	r3, #40	; 0x28
 80170e2:	d10e      	bne.n	8017102 <_strtod_l+0x37a>
 80170e4:	aa1e      	add	r2, sp, #120	; 0x78
 80170e6:	498b      	ldr	r1, [pc, #556]	; (8017314 <_strtod_l+0x58c>)
 80170e8:	a81b      	add	r0, sp, #108	; 0x6c
 80170ea:	f001 fddb 	bl	8018ca4 <__hexnan>
 80170ee:	2805      	cmp	r0, #5
 80170f0:	d107      	bne.n	8017102 <_strtod_l+0x37a>
 80170f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80170f4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80170f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80170fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017100:	e681      	b.n	8016e06 <_strtod_l+0x7e>
 8017102:	f8df b224 	ldr.w	fp, [pc, #548]	; 8017328 <_strtod_l+0x5a0>
 8017106:	e7d2      	b.n	80170ae <_strtod_l+0x326>
 8017108:	ebae 0302 	sub.w	r3, lr, r2
 801710c:	9306      	str	r3, [sp, #24]
 801710e:	9b05      	ldr	r3, [sp, #20]
 8017110:	9807      	ldr	r0, [sp, #28]
 8017112:	2b00      	cmp	r3, #0
 8017114:	bf08      	it	eq
 8017116:	4623      	moveq	r3, r4
 8017118:	2c10      	cmp	r4, #16
 801711a:	9305      	str	r3, [sp, #20]
 801711c:	46a0      	mov	r8, r4
 801711e:	bfa8      	it	ge
 8017120:	f04f 0810 	movge.w	r8, #16
 8017124:	f7e9 fa06 	bl	8000534 <__aeabi_ui2d>
 8017128:	2c09      	cmp	r4, #9
 801712a:	4682      	mov	sl, r0
 801712c:	468b      	mov	fp, r1
 801712e:	dc13      	bgt.n	8017158 <_strtod_l+0x3d0>
 8017130:	9b06      	ldr	r3, [sp, #24]
 8017132:	2b00      	cmp	r3, #0
 8017134:	f43f ae67 	beq.w	8016e06 <_strtod_l+0x7e>
 8017138:	9b06      	ldr	r3, [sp, #24]
 801713a:	dd7a      	ble.n	8017232 <_strtod_l+0x4aa>
 801713c:	2b16      	cmp	r3, #22
 801713e:	dc61      	bgt.n	8017204 <_strtod_l+0x47c>
 8017140:	4a75      	ldr	r2, [pc, #468]	; (8017318 <_strtod_l+0x590>)
 8017142:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8017146:	e9de 0100 	ldrd	r0, r1, [lr]
 801714a:	4652      	mov	r2, sl
 801714c:	465b      	mov	r3, fp
 801714e:	f7e9 fa6b 	bl	8000628 <__aeabi_dmul>
 8017152:	4682      	mov	sl, r0
 8017154:	468b      	mov	fp, r1
 8017156:	e656      	b.n	8016e06 <_strtod_l+0x7e>
 8017158:	4b6f      	ldr	r3, [pc, #444]	; (8017318 <_strtod_l+0x590>)
 801715a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801715e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017162:	f7e9 fa61 	bl	8000628 <__aeabi_dmul>
 8017166:	4606      	mov	r6, r0
 8017168:	4628      	mov	r0, r5
 801716a:	460f      	mov	r7, r1
 801716c:	f7e9 f9e2 	bl	8000534 <__aeabi_ui2d>
 8017170:	4602      	mov	r2, r0
 8017172:	460b      	mov	r3, r1
 8017174:	4630      	mov	r0, r6
 8017176:	4639      	mov	r1, r7
 8017178:	f7e9 f8a0 	bl	80002bc <__adddf3>
 801717c:	2c0f      	cmp	r4, #15
 801717e:	4682      	mov	sl, r0
 8017180:	468b      	mov	fp, r1
 8017182:	ddd5      	ble.n	8017130 <_strtod_l+0x3a8>
 8017184:	9b06      	ldr	r3, [sp, #24]
 8017186:	eba4 0808 	sub.w	r8, r4, r8
 801718a:	4498      	add	r8, r3
 801718c:	f1b8 0f00 	cmp.w	r8, #0
 8017190:	f340 8096 	ble.w	80172c0 <_strtod_l+0x538>
 8017194:	f018 030f 	ands.w	r3, r8, #15
 8017198:	d00a      	beq.n	80171b0 <_strtod_l+0x428>
 801719a:	495f      	ldr	r1, [pc, #380]	; (8017318 <_strtod_l+0x590>)
 801719c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80171a0:	4652      	mov	r2, sl
 80171a2:	465b      	mov	r3, fp
 80171a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80171a8:	f7e9 fa3e 	bl	8000628 <__aeabi_dmul>
 80171ac:	4682      	mov	sl, r0
 80171ae:	468b      	mov	fp, r1
 80171b0:	f038 080f 	bics.w	r8, r8, #15
 80171b4:	d073      	beq.n	801729e <_strtod_l+0x516>
 80171b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80171ba:	dd47      	ble.n	801724c <_strtod_l+0x4c4>
 80171bc:	2400      	movs	r4, #0
 80171be:	46a0      	mov	r8, r4
 80171c0:	9407      	str	r4, [sp, #28]
 80171c2:	9405      	str	r4, [sp, #20]
 80171c4:	2322      	movs	r3, #34	; 0x22
 80171c6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8017320 <_strtod_l+0x598>
 80171ca:	f8c9 3000 	str.w	r3, [r9]
 80171ce:	f04f 0a00 	mov.w	sl, #0
 80171d2:	9b07      	ldr	r3, [sp, #28]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	f43f ae16 	beq.w	8016e06 <_strtod_l+0x7e>
 80171da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171dc:	4648      	mov	r0, r9
 80171de:	f001 fe6c 	bl	8018eba <_Bfree>
 80171e2:	9905      	ldr	r1, [sp, #20]
 80171e4:	4648      	mov	r0, r9
 80171e6:	f001 fe68 	bl	8018eba <_Bfree>
 80171ea:	4641      	mov	r1, r8
 80171ec:	4648      	mov	r0, r9
 80171ee:	f001 fe64 	bl	8018eba <_Bfree>
 80171f2:	9907      	ldr	r1, [sp, #28]
 80171f4:	4648      	mov	r0, r9
 80171f6:	f001 fe60 	bl	8018eba <_Bfree>
 80171fa:	4621      	mov	r1, r4
 80171fc:	4648      	mov	r0, r9
 80171fe:	f001 fe5c 	bl	8018eba <_Bfree>
 8017202:	e600      	b.n	8016e06 <_strtod_l+0x7e>
 8017204:	9a06      	ldr	r2, [sp, #24]
 8017206:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801720a:	4293      	cmp	r3, r2
 801720c:	dbba      	blt.n	8017184 <_strtod_l+0x3fc>
 801720e:	4d42      	ldr	r5, [pc, #264]	; (8017318 <_strtod_l+0x590>)
 8017210:	f1c4 040f 	rsb	r4, r4, #15
 8017214:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8017218:	4652      	mov	r2, sl
 801721a:	465b      	mov	r3, fp
 801721c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017220:	f7e9 fa02 	bl	8000628 <__aeabi_dmul>
 8017224:	9b06      	ldr	r3, [sp, #24]
 8017226:	1b1c      	subs	r4, r3, r4
 8017228:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801722c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017230:	e78d      	b.n	801714e <_strtod_l+0x3c6>
 8017232:	f113 0f16 	cmn.w	r3, #22
 8017236:	dba5      	blt.n	8017184 <_strtod_l+0x3fc>
 8017238:	4a37      	ldr	r2, [pc, #220]	; (8017318 <_strtod_l+0x590>)
 801723a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801723e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8017242:	4650      	mov	r0, sl
 8017244:	4659      	mov	r1, fp
 8017246:	f7e9 fb19 	bl	800087c <__aeabi_ddiv>
 801724a:	e782      	b.n	8017152 <_strtod_l+0x3ca>
 801724c:	2300      	movs	r3, #0
 801724e:	4e33      	ldr	r6, [pc, #204]	; (801731c <_strtod_l+0x594>)
 8017250:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017254:	4650      	mov	r0, sl
 8017256:	4659      	mov	r1, fp
 8017258:	461d      	mov	r5, r3
 801725a:	f1b8 0f01 	cmp.w	r8, #1
 801725e:	dc21      	bgt.n	80172a4 <_strtod_l+0x51c>
 8017260:	b10b      	cbz	r3, 8017266 <_strtod_l+0x4de>
 8017262:	4682      	mov	sl, r0
 8017264:	468b      	mov	fp, r1
 8017266:	4b2d      	ldr	r3, [pc, #180]	; (801731c <_strtod_l+0x594>)
 8017268:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801726c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017270:	4652      	mov	r2, sl
 8017272:	465b      	mov	r3, fp
 8017274:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017278:	f7e9 f9d6 	bl	8000628 <__aeabi_dmul>
 801727c:	4b28      	ldr	r3, [pc, #160]	; (8017320 <_strtod_l+0x598>)
 801727e:	460a      	mov	r2, r1
 8017280:	400b      	ands	r3, r1
 8017282:	4928      	ldr	r1, [pc, #160]	; (8017324 <_strtod_l+0x59c>)
 8017284:	428b      	cmp	r3, r1
 8017286:	4682      	mov	sl, r0
 8017288:	d898      	bhi.n	80171bc <_strtod_l+0x434>
 801728a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801728e:	428b      	cmp	r3, r1
 8017290:	bf86      	itte	hi
 8017292:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801732c <_strtod_l+0x5a4>
 8017296:	f04f 3aff 	movhi.w	sl, #4294967295
 801729a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801729e:	2300      	movs	r3, #0
 80172a0:	9304      	str	r3, [sp, #16]
 80172a2:	e077      	b.n	8017394 <_strtod_l+0x60c>
 80172a4:	f018 0f01 	tst.w	r8, #1
 80172a8:	d006      	beq.n	80172b8 <_strtod_l+0x530>
 80172aa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80172ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b2:	f7e9 f9b9 	bl	8000628 <__aeabi_dmul>
 80172b6:	2301      	movs	r3, #1
 80172b8:	3501      	adds	r5, #1
 80172ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80172be:	e7cc      	b.n	801725a <_strtod_l+0x4d2>
 80172c0:	d0ed      	beq.n	801729e <_strtod_l+0x516>
 80172c2:	f1c8 0800 	rsb	r8, r8, #0
 80172c6:	f018 020f 	ands.w	r2, r8, #15
 80172ca:	d00a      	beq.n	80172e2 <_strtod_l+0x55a>
 80172cc:	4b12      	ldr	r3, [pc, #72]	; (8017318 <_strtod_l+0x590>)
 80172ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80172d2:	4650      	mov	r0, sl
 80172d4:	4659      	mov	r1, fp
 80172d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172da:	f7e9 facf 	bl	800087c <__aeabi_ddiv>
 80172de:	4682      	mov	sl, r0
 80172e0:	468b      	mov	fp, r1
 80172e2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80172e6:	d0da      	beq.n	801729e <_strtod_l+0x516>
 80172e8:	f1b8 0f1f 	cmp.w	r8, #31
 80172ec:	dd20      	ble.n	8017330 <_strtod_l+0x5a8>
 80172ee:	2400      	movs	r4, #0
 80172f0:	46a0      	mov	r8, r4
 80172f2:	9407      	str	r4, [sp, #28]
 80172f4:	9405      	str	r4, [sp, #20]
 80172f6:	2322      	movs	r3, #34	; 0x22
 80172f8:	f04f 0a00 	mov.w	sl, #0
 80172fc:	f04f 0b00 	mov.w	fp, #0
 8017300:	f8c9 3000 	str.w	r3, [r9]
 8017304:	e765      	b.n	80171d2 <_strtod_l+0x44a>
 8017306:	bf00      	nop
 8017308:	0801a965 	.word	0x0801a965
 801730c:	0801a9eb 	.word	0x0801a9eb
 8017310:	0801a96d 	.word	0x0801a96d
 8017314:	0801a9ac 	.word	0x0801a9ac
 8017318:	0801aa28 	.word	0x0801aa28
 801731c:	0801aa00 	.word	0x0801aa00
 8017320:	7ff00000 	.word	0x7ff00000
 8017324:	7ca00000 	.word	0x7ca00000
 8017328:	fff80000 	.word	0xfff80000
 801732c:	7fefffff 	.word	0x7fefffff
 8017330:	f018 0310 	ands.w	r3, r8, #16
 8017334:	bf18      	it	ne
 8017336:	236a      	movne	r3, #106	; 0x6a
 8017338:	4da0      	ldr	r5, [pc, #640]	; (80175bc <_strtod_l+0x834>)
 801733a:	9304      	str	r3, [sp, #16]
 801733c:	4650      	mov	r0, sl
 801733e:	4659      	mov	r1, fp
 8017340:	2300      	movs	r3, #0
 8017342:	f1b8 0f00 	cmp.w	r8, #0
 8017346:	f300 810a 	bgt.w	801755e <_strtod_l+0x7d6>
 801734a:	b10b      	cbz	r3, 8017350 <_strtod_l+0x5c8>
 801734c:	4682      	mov	sl, r0
 801734e:	468b      	mov	fp, r1
 8017350:	9b04      	ldr	r3, [sp, #16]
 8017352:	b1bb      	cbz	r3, 8017384 <_strtod_l+0x5fc>
 8017354:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017358:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801735c:	2b00      	cmp	r3, #0
 801735e:	4659      	mov	r1, fp
 8017360:	dd10      	ble.n	8017384 <_strtod_l+0x5fc>
 8017362:	2b1f      	cmp	r3, #31
 8017364:	f340 8107 	ble.w	8017576 <_strtod_l+0x7ee>
 8017368:	2b34      	cmp	r3, #52	; 0x34
 801736a:	bfde      	ittt	le
 801736c:	3b20      	suble	r3, #32
 801736e:	f04f 32ff 	movle.w	r2, #4294967295
 8017372:	fa02 f303 	lslle.w	r3, r2, r3
 8017376:	f04f 0a00 	mov.w	sl, #0
 801737a:	bfcc      	ite	gt
 801737c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017380:	ea03 0b01 	andle.w	fp, r3, r1
 8017384:	2200      	movs	r2, #0
 8017386:	2300      	movs	r3, #0
 8017388:	4650      	mov	r0, sl
 801738a:	4659      	mov	r1, fp
 801738c:	f7e9 fbb4 	bl	8000af8 <__aeabi_dcmpeq>
 8017390:	2800      	cmp	r0, #0
 8017392:	d1ac      	bne.n	80172ee <_strtod_l+0x566>
 8017394:	9b07      	ldr	r3, [sp, #28]
 8017396:	9300      	str	r3, [sp, #0]
 8017398:	9a05      	ldr	r2, [sp, #20]
 801739a:	9908      	ldr	r1, [sp, #32]
 801739c:	4623      	mov	r3, r4
 801739e:	4648      	mov	r0, r9
 80173a0:	f001 fddd 	bl	8018f5e <__s2b>
 80173a4:	9007      	str	r0, [sp, #28]
 80173a6:	2800      	cmp	r0, #0
 80173a8:	f43f af08 	beq.w	80171bc <_strtod_l+0x434>
 80173ac:	9a06      	ldr	r2, [sp, #24]
 80173ae:	9b06      	ldr	r3, [sp, #24]
 80173b0:	2a00      	cmp	r2, #0
 80173b2:	f1c3 0300 	rsb	r3, r3, #0
 80173b6:	bfa8      	it	ge
 80173b8:	2300      	movge	r3, #0
 80173ba:	930e      	str	r3, [sp, #56]	; 0x38
 80173bc:	2400      	movs	r4, #0
 80173be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80173c2:	9316      	str	r3, [sp, #88]	; 0x58
 80173c4:	46a0      	mov	r8, r4
 80173c6:	9b07      	ldr	r3, [sp, #28]
 80173c8:	4648      	mov	r0, r9
 80173ca:	6859      	ldr	r1, [r3, #4]
 80173cc:	f001 fd41 	bl	8018e52 <_Balloc>
 80173d0:	9005      	str	r0, [sp, #20]
 80173d2:	2800      	cmp	r0, #0
 80173d4:	f43f aef6 	beq.w	80171c4 <_strtod_l+0x43c>
 80173d8:	9b07      	ldr	r3, [sp, #28]
 80173da:	691a      	ldr	r2, [r3, #16]
 80173dc:	3202      	adds	r2, #2
 80173de:	f103 010c 	add.w	r1, r3, #12
 80173e2:	0092      	lsls	r2, r2, #2
 80173e4:	300c      	adds	r0, #12
 80173e6:	f001 fd29 	bl	8018e3c <memcpy>
 80173ea:	aa1e      	add	r2, sp, #120	; 0x78
 80173ec:	a91d      	add	r1, sp, #116	; 0x74
 80173ee:	ec4b ab10 	vmov	d0, sl, fp
 80173f2:	4648      	mov	r0, r9
 80173f4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80173f8:	f002 f86c 	bl	80194d4 <__d2b>
 80173fc:	901c      	str	r0, [sp, #112]	; 0x70
 80173fe:	2800      	cmp	r0, #0
 8017400:	f43f aee0 	beq.w	80171c4 <_strtod_l+0x43c>
 8017404:	2101      	movs	r1, #1
 8017406:	4648      	mov	r0, r9
 8017408:	f001 fe35 	bl	8019076 <__i2b>
 801740c:	4680      	mov	r8, r0
 801740e:	2800      	cmp	r0, #0
 8017410:	f43f aed8 	beq.w	80171c4 <_strtod_l+0x43c>
 8017414:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017416:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017418:	2e00      	cmp	r6, #0
 801741a:	bfab      	itete	ge
 801741c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801741e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017420:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8017422:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8017424:	bfac      	ite	ge
 8017426:	18f7      	addge	r7, r6, r3
 8017428:	1b9d      	sublt	r5, r3, r6
 801742a:	9b04      	ldr	r3, [sp, #16]
 801742c:	1af6      	subs	r6, r6, r3
 801742e:	4416      	add	r6, r2
 8017430:	4b63      	ldr	r3, [pc, #396]	; (80175c0 <_strtod_l+0x838>)
 8017432:	3e01      	subs	r6, #1
 8017434:	429e      	cmp	r6, r3
 8017436:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801743a:	f280 80af 	bge.w	801759c <_strtod_l+0x814>
 801743e:	1b9b      	subs	r3, r3, r6
 8017440:	2b1f      	cmp	r3, #31
 8017442:	eba2 0203 	sub.w	r2, r2, r3
 8017446:	f04f 0101 	mov.w	r1, #1
 801744a:	f300 809b 	bgt.w	8017584 <_strtod_l+0x7fc>
 801744e:	fa01 f303 	lsl.w	r3, r1, r3
 8017452:	930f      	str	r3, [sp, #60]	; 0x3c
 8017454:	2300      	movs	r3, #0
 8017456:	930a      	str	r3, [sp, #40]	; 0x28
 8017458:	18be      	adds	r6, r7, r2
 801745a:	9b04      	ldr	r3, [sp, #16]
 801745c:	42b7      	cmp	r7, r6
 801745e:	4415      	add	r5, r2
 8017460:	441d      	add	r5, r3
 8017462:	463b      	mov	r3, r7
 8017464:	bfa8      	it	ge
 8017466:	4633      	movge	r3, r6
 8017468:	42ab      	cmp	r3, r5
 801746a:	bfa8      	it	ge
 801746c:	462b      	movge	r3, r5
 801746e:	2b00      	cmp	r3, #0
 8017470:	bfc2      	ittt	gt
 8017472:	1af6      	subgt	r6, r6, r3
 8017474:	1aed      	subgt	r5, r5, r3
 8017476:	1aff      	subgt	r7, r7, r3
 8017478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801747a:	b1bb      	cbz	r3, 80174ac <_strtod_l+0x724>
 801747c:	4641      	mov	r1, r8
 801747e:	461a      	mov	r2, r3
 8017480:	4648      	mov	r0, r9
 8017482:	f001 fe97 	bl	80191b4 <__pow5mult>
 8017486:	4680      	mov	r8, r0
 8017488:	2800      	cmp	r0, #0
 801748a:	f43f ae9b 	beq.w	80171c4 <_strtod_l+0x43c>
 801748e:	4601      	mov	r1, r0
 8017490:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017492:	4648      	mov	r0, r9
 8017494:	f001 fdf8 	bl	8019088 <__multiply>
 8017498:	900c      	str	r0, [sp, #48]	; 0x30
 801749a:	2800      	cmp	r0, #0
 801749c:	f43f ae92 	beq.w	80171c4 <_strtod_l+0x43c>
 80174a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80174a2:	4648      	mov	r0, r9
 80174a4:	f001 fd09 	bl	8018eba <_Bfree>
 80174a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174aa:	931c      	str	r3, [sp, #112]	; 0x70
 80174ac:	2e00      	cmp	r6, #0
 80174ae:	dc7a      	bgt.n	80175a6 <_strtod_l+0x81e>
 80174b0:	9b06      	ldr	r3, [sp, #24]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	dd08      	ble.n	80174c8 <_strtod_l+0x740>
 80174b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80174b8:	9905      	ldr	r1, [sp, #20]
 80174ba:	4648      	mov	r0, r9
 80174bc:	f001 fe7a 	bl	80191b4 <__pow5mult>
 80174c0:	9005      	str	r0, [sp, #20]
 80174c2:	2800      	cmp	r0, #0
 80174c4:	f43f ae7e 	beq.w	80171c4 <_strtod_l+0x43c>
 80174c8:	2d00      	cmp	r5, #0
 80174ca:	dd08      	ble.n	80174de <_strtod_l+0x756>
 80174cc:	462a      	mov	r2, r5
 80174ce:	9905      	ldr	r1, [sp, #20]
 80174d0:	4648      	mov	r0, r9
 80174d2:	f001 febd 	bl	8019250 <__lshift>
 80174d6:	9005      	str	r0, [sp, #20]
 80174d8:	2800      	cmp	r0, #0
 80174da:	f43f ae73 	beq.w	80171c4 <_strtod_l+0x43c>
 80174de:	2f00      	cmp	r7, #0
 80174e0:	dd08      	ble.n	80174f4 <_strtod_l+0x76c>
 80174e2:	4641      	mov	r1, r8
 80174e4:	463a      	mov	r2, r7
 80174e6:	4648      	mov	r0, r9
 80174e8:	f001 feb2 	bl	8019250 <__lshift>
 80174ec:	4680      	mov	r8, r0
 80174ee:	2800      	cmp	r0, #0
 80174f0:	f43f ae68 	beq.w	80171c4 <_strtod_l+0x43c>
 80174f4:	9a05      	ldr	r2, [sp, #20]
 80174f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80174f8:	4648      	mov	r0, r9
 80174fa:	f001 ff17 	bl	801932c <__mdiff>
 80174fe:	4604      	mov	r4, r0
 8017500:	2800      	cmp	r0, #0
 8017502:	f43f ae5f 	beq.w	80171c4 <_strtod_l+0x43c>
 8017506:	68c3      	ldr	r3, [r0, #12]
 8017508:	930c      	str	r3, [sp, #48]	; 0x30
 801750a:	2300      	movs	r3, #0
 801750c:	60c3      	str	r3, [r0, #12]
 801750e:	4641      	mov	r1, r8
 8017510:	f001 fef2 	bl	80192f8 <__mcmp>
 8017514:	2800      	cmp	r0, #0
 8017516:	da55      	bge.n	80175c4 <_strtod_l+0x83c>
 8017518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801751a:	b9e3      	cbnz	r3, 8017556 <_strtod_l+0x7ce>
 801751c:	f1ba 0f00 	cmp.w	sl, #0
 8017520:	d119      	bne.n	8017556 <_strtod_l+0x7ce>
 8017522:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017526:	b9b3      	cbnz	r3, 8017556 <_strtod_l+0x7ce>
 8017528:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801752c:	0d1b      	lsrs	r3, r3, #20
 801752e:	051b      	lsls	r3, r3, #20
 8017530:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017534:	d90f      	bls.n	8017556 <_strtod_l+0x7ce>
 8017536:	6963      	ldr	r3, [r4, #20]
 8017538:	b913      	cbnz	r3, 8017540 <_strtod_l+0x7b8>
 801753a:	6923      	ldr	r3, [r4, #16]
 801753c:	2b01      	cmp	r3, #1
 801753e:	dd0a      	ble.n	8017556 <_strtod_l+0x7ce>
 8017540:	4621      	mov	r1, r4
 8017542:	2201      	movs	r2, #1
 8017544:	4648      	mov	r0, r9
 8017546:	f001 fe83 	bl	8019250 <__lshift>
 801754a:	4641      	mov	r1, r8
 801754c:	4604      	mov	r4, r0
 801754e:	f001 fed3 	bl	80192f8 <__mcmp>
 8017552:	2800      	cmp	r0, #0
 8017554:	dc67      	bgt.n	8017626 <_strtod_l+0x89e>
 8017556:	9b04      	ldr	r3, [sp, #16]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d171      	bne.n	8017640 <_strtod_l+0x8b8>
 801755c:	e63d      	b.n	80171da <_strtod_l+0x452>
 801755e:	f018 0f01 	tst.w	r8, #1
 8017562:	d004      	beq.n	801756e <_strtod_l+0x7e6>
 8017564:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017568:	f7e9 f85e 	bl	8000628 <__aeabi_dmul>
 801756c:	2301      	movs	r3, #1
 801756e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017572:	3508      	adds	r5, #8
 8017574:	e6e5      	b.n	8017342 <_strtod_l+0x5ba>
 8017576:	f04f 32ff 	mov.w	r2, #4294967295
 801757a:	fa02 f303 	lsl.w	r3, r2, r3
 801757e:	ea03 0a0a 	and.w	sl, r3, sl
 8017582:	e6ff      	b.n	8017384 <_strtod_l+0x5fc>
 8017584:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017588:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801758c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017590:	36e2      	adds	r6, #226	; 0xe2
 8017592:	fa01 f306 	lsl.w	r3, r1, r6
 8017596:	930a      	str	r3, [sp, #40]	; 0x28
 8017598:	910f      	str	r1, [sp, #60]	; 0x3c
 801759a:	e75d      	b.n	8017458 <_strtod_l+0x6d0>
 801759c:	2300      	movs	r3, #0
 801759e:	930a      	str	r3, [sp, #40]	; 0x28
 80175a0:	2301      	movs	r3, #1
 80175a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80175a4:	e758      	b.n	8017458 <_strtod_l+0x6d0>
 80175a6:	4632      	mov	r2, r6
 80175a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80175aa:	4648      	mov	r0, r9
 80175ac:	f001 fe50 	bl	8019250 <__lshift>
 80175b0:	901c      	str	r0, [sp, #112]	; 0x70
 80175b2:	2800      	cmp	r0, #0
 80175b4:	f47f af7c 	bne.w	80174b0 <_strtod_l+0x728>
 80175b8:	e604      	b.n	80171c4 <_strtod_l+0x43c>
 80175ba:	bf00      	nop
 80175bc:	0801a9c0 	.word	0x0801a9c0
 80175c0:	fffffc02 	.word	0xfffffc02
 80175c4:	465d      	mov	r5, fp
 80175c6:	f040 8086 	bne.w	80176d6 <_strtod_l+0x94e>
 80175ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80175cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80175d0:	b32a      	cbz	r2, 801761e <_strtod_l+0x896>
 80175d2:	4aaf      	ldr	r2, [pc, #700]	; (8017890 <_strtod_l+0xb08>)
 80175d4:	4293      	cmp	r3, r2
 80175d6:	d153      	bne.n	8017680 <_strtod_l+0x8f8>
 80175d8:	9b04      	ldr	r3, [sp, #16]
 80175da:	4650      	mov	r0, sl
 80175dc:	b1d3      	cbz	r3, 8017614 <_strtod_l+0x88c>
 80175de:	4aad      	ldr	r2, [pc, #692]	; (8017894 <_strtod_l+0xb0c>)
 80175e0:	402a      	ands	r2, r5
 80175e2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80175e6:	f04f 31ff 	mov.w	r1, #4294967295
 80175ea:	d816      	bhi.n	801761a <_strtod_l+0x892>
 80175ec:	0d12      	lsrs	r2, r2, #20
 80175ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80175f2:	fa01 f303 	lsl.w	r3, r1, r3
 80175f6:	4298      	cmp	r0, r3
 80175f8:	d142      	bne.n	8017680 <_strtod_l+0x8f8>
 80175fa:	4ba7      	ldr	r3, [pc, #668]	; (8017898 <_strtod_l+0xb10>)
 80175fc:	429d      	cmp	r5, r3
 80175fe:	d102      	bne.n	8017606 <_strtod_l+0x87e>
 8017600:	3001      	adds	r0, #1
 8017602:	f43f addf 	beq.w	80171c4 <_strtod_l+0x43c>
 8017606:	4ba3      	ldr	r3, [pc, #652]	; (8017894 <_strtod_l+0xb0c>)
 8017608:	402b      	ands	r3, r5
 801760a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801760e:	f04f 0a00 	mov.w	sl, #0
 8017612:	e7a0      	b.n	8017556 <_strtod_l+0x7ce>
 8017614:	f04f 33ff 	mov.w	r3, #4294967295
 8017618:	e7ed      	b.n	80175f6 <_strtod_l+0x86e>
 801761a:	460b      	mov	r3, r1
 801761c:	e7eb      	b.n	80175f6 <_strtod_l+0x86e>
 801761e:	bb7b      	cbnz	r3, 8017680 <_strtod_l+0x8f8>
 8017620:	f1ba 0f00 	cmp.w	sl, #0
 8017624:	d12c      	bne.n	8017680 <_strtod_l+0x8f8>
 8017626:	9904      	ldr	r1, [sp, #16]
 8017628:	4a9a      	ldr	r2, [pc, #616]	; (8017894 <_strtod_l+0xb0c>)
 801762a:	465b      	mov	r3, fp
 801762c:	b1f1      	cbz	r1, 801766c <_strtod_l+0x8e4>
 801762e:	ea02 010b 	and.w	r1, r2, fp
 8017632:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017636:	dc19      	bgt.n	801766c <_strtod_l+0x8e4>
 8017638:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801763c:	f77f ae5b 	ble.w	80172f6 <_strtod_l+0x56e>
 8017640:	4a96      	ldr	r2, [pc, #600]	; (801789c <_strtod_l+0xb14>)
 8017642:	2300      	movs	r3, #0
 8017644:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017648:	4650      	mov	r0, sl
 801764a:	4659      	mov	r1, fp
 801764c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017650:	f7e8 ffea 	bl	8000628 <__aeabi_dmul>
 8017654:	4682      	mov	sl, r0
 8017656:	468b      	mov	fp, r1
 8017658:	2900      	cmp	r1, #0
 801765a:	f47f adbe 	bne.w	80171da <_strtod_l+0x452>
 801765e:	2800      	cmp	r0, #0
 8017660:	f47f adbb 	bne.w	80171da <_strtod_l+0x452>
 8017664:	2322      	movs	r3, #34	; 0x22
 8017666:	f8c9 3000 	str.w	r3, [r9]
 801766a:	e5b6      	b.n	80171da <_strtod_l+0x452>
 801766c:	4013      	ands	r3, r2
 801766e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017672:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017676:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801767a:	f04f 3aff 	mov.w	sl, #4294967295
 801767e:	e76a      	b.n	8017556 <_strtod_l+0x7ce>
 8017680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017682:	b193      	cbz	r3, 80176aa <_strtod_l+0x922>
 8017684:	422b      	tst	r3, r5
 8017686:	f43f af66 	beq.w	8017556 <_strtod_l+0x7ce>
 801768a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801768c:	9a04      	ldr	r2, [sp, #16]
 801768e:	4650      	mov	r0, sl
 8017690:	4659      	mov	r1, fp
 8017692:	b173      	cbz	r3, 80176b2 <_strtod_l+0x92a>
 8017694:	f7ff fb5a 	bl	8016d4c <sulp>
 8017698:	4602      	mov	r2, r0
 801769a:	460b      	mov	r3, r1
 801769c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80176a0:	f7e8 fe0c 	bl	80002bc <__adddf3>
 80176a4:	4682      	mov	sl, r0
 80176a6:	468b      	mov	fp, r1
 80176a8:	e755      	b.n	8017556 <_strtod_l+0x7ce>
 80176aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176ac:	ea13 0f0a 	tst.w	r3, sl
 80176b0:	e7e9      	b.n	8017686 <_strtod_l+0x8fe>
 80176b2:	f7ff fb4b 	bl	8016d4c <sulp>
 80176b6:	4602      	mov	r2, r0
 80176b8:	460b      	mov	r3, r1
 80176ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80176be:	f7e8 fdfb 	bl	80002b8 <__aeabi_dsub>
 80176c2:	2200      	movs	r2, #0
 80176c4:	2300      	movs	r3, #0
 80176c6:	4682      	mov	sl, r0
 80176c8:	468b      	mov	fp, r1
 80176ca:	f7e9 fa15 	bl	8000af8 <__aeabi_dcmpeq>
 80176ce:	2800      	cmp	r0, #0
 80176d0:	f47f ae11 	bne.w	80172f6 <_strtod_l+0x56e>
 80176d4:	e73f      	b.n	8017556 <_strtod_l+0x7ce>
 80176d6:	4641      	mov	r1, r8
 80176d8:	4620      	mov	r0, r4
 80176da:	f001 ff4a 	bl	8019572 <__ratio>
 80176de:	ec57 6b10 	vmov	r6, r7, d0
 80176e2:	2200      	movs	r2, #0
 80176e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80176e8:	ee10 0a10 	vmov	r0, s0
 80176ec:	4639      	mov	r1, r7
 80176ee:	f7e9 fa17 	bl	8000b20 <__aeabi_dcmple>
 80176f2:	2800      	cmp	r0, #0
 80176f4:	d077      	beq.n	80177e6 <_strtod_l+0xa5e>
 80176f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d04a      	beq.n	8017792 <_strtod_l+0xa0a>
 80176fc:	4b68      	ldr	r3, [pc, #416]	; (80178a0 <_strtod_l+0xb18>)
 80176fe:	2200      	movs	r2, #0
 8017700:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017704:	4f66      	ldr	r7, [pc, #408]	; (80178a0 <_strtod_l+0xb18>)
 8017706:	2600      	movs	r6, #0
 8017708:	4b62      	ldr	r3, [pc, #392]	; (8017894 <_strtod_l+0xb0c>)
 801770a:	402b      	ands	r3, r5
 801770c:	930f      	str	r3, [sp, #60]	; 0x3c
 801770e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017710:	4b64      	ldr	r3, [pc, #400]	; (80178a4 <_strtod_l+0xb1c>)
 8017712:	429a      	cmp	r2, r3
 8017714:	f040 80ce 	bne.w	80178b4 <_strtod_l+0xb2c>
 8017718:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801771c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017720:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017724:	ec4b ab10 	vmov	d0, sl, fp
 8017728:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801772c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017730:	f001 fe5a 	bl	80193e8 <__ulp>
 8017734:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017738:	ec53 2b10 	vmov	r2, r3, d0
 801773c:	f7e8 ff74 	bl	8000628 <__aeabi_dmul>
 8017740:	4652      	mov	r2, sl
 8017742:	465b      	mov	r3, fp
 8017744:	f7e8 fdba 	bl	80002bc <__adddf3>
 8017748:	460b      	mov	r3, r1
 801774a:	4952      	ldr	r1, [pc, #328]	; (8017894 <_strtod_l+0xb0c>)
 801774c:	4a56      	ldr	r2, [pc, #344]	; (80178a8 <_strtod_l+0xb20>)
 801774e:	4019      	ands	r1, r3
 8017750:	4291      	cmp	r1, r2
 8017752:	4682      	mov	sl, r0
 8017754:	d95b      	bls.n	801780e <_strtod_l+0xa86>
 8017756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017758:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801775c:	4293      	cmp	r3, r2
 801775e:	d103      	bne.n	8017768 <_strtod_l+0x9e0>
 8017760:	9b08      	ldr	r3, [sp, #32]
 8017762:	3301      	adds	r3, #1
 8017764:	f43f ad2e 	beq.w	80171c4 <_strtod_l+0x43c>
 8017768:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017898 <_strtod_l+0xb10>
 801776c:	f04f 3aff 	mov.w	sl, #4294967295
 8017770:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017772:	4648      	mov	r0, r9
 8017774:	f001 fba1 	bl	8018eba <_Bfree>
 8017778:	9905      	ldr	r1, [sp, #20]
 801777a:	4648      	mov	r0, r9
 801777c:	f001 fb9d 	bl	8018eba <_Bfree>
 8017780:	4641      	mov	r1, r8
 8017782:	4648      	mov	r0, r9
 8017784:	f001 fb99 	bl	8018eba <_Bfree>
 8017788:	4621      	mov	r1, r4
 801778a:	4648      	mov	r0, r9
 801778c:	f001 fb95 	bl	8018eba <_Bfree>
 8017790:	e619      	b.n	80173c6 <_strtod_l+0x63e>
 8017792:	f1ba 0f00 	cmp.w	sl, #0
 8017796:	d11a      	bne.n	80177ce <_strtod_l+0xa46>
 8017798:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801779c:	b9eb      	cbnz	r3, 80177da <_strtod_l+0xa52>
 801779e:	2200      	movs	r2, #0
 80177a0:	4b3f      	ldr	r3, [pc, #252]	; (80178a0 <_strtod_l+0xb18>)
 80177a2:	4630      	mov	r0, r6
 80177a4:	4639      	mov	r1, r7
 80177a6:	f7e9 f9b1 	bl	8000b0c <__aeabi_dcmplt>
 80177aa:	b9c8      	cbnz	r0, 80177e0 <_strtod_l+0xa58>
 80177ac:	4630      	mov	r0, r6
 80177ae:	4639      	mov	r1, r7
 80177b0:	2200      	movs	r2, #0
 80177b2:	4b3e      	ldr	r3, [pc, #248]	; (80178ac <_strtod_l+0xb24>)
 80177b4:	f7e8 ff38 	bl	8000628 <__aeabi_dmul>
 80177b8:	4606      	mov	r6, r0
 80177ba:	460f      	mov	r7, r1
 80177bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80177c0:	9618      	str	r6, [sp, #96]	; 0x60
 80177c2:	9319      	str	r3, [sp, #100]	; 0x64
 80177c4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80177c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80177cc:	e79c      	b.n	8017708 <_strtod_l+0x980>
 80177ce:	f1ba 0f01 	cmp.w	sl, #1
 80177d2:	d102      	bne.n	80177da <_strtod_l+0xa52>
 80177d4:	2d00      	cmp	r5, #0
 80177d6:	f43f ad8e 	beq.w	80172f6 <_strtod_l+0x56e>
 80177da:	2200      	movs	r2, #0
 80177dc:	4b34      	ldr	r3, [pc, #208]	; (80178b0 <_strtod_l+0xb28>)
 80177de:	e78f      	b.n	8017700 <_strtod_l+0x978>
 80177e0:	2600      	movs	r6, #0
 80177e2:	4f32      	ldr	r7, [pc, #200]	; (80178ac <_strtod_l+0xb24>)
 80177e4:	e7ea      	b.n	80177bc <_strtod_l+0xa34>
 80177e6:	4b31      	ldr	r3, [pc, #196]	; (80178ac <_strtod_l+0xb24>)
 80177e8:	4630      	mov	r0, r6
 80177ea:	4639      	mov	r1, r7
 80177ec:	2200      	movs	r2, #0
 80177ee:	f7e8 ff1b 	bl	8000628 <__aeabi_dmul>
 80177f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177f4:	4606      	mov	r6, r0
 80177f6:	460f      	mov	r7, r1
 80177f8:	b933      	cbnz	r3, 8017808 <_strtod_l+0xa80>
 80177fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80177fe:	9010      	str	r0, [sp, #64]	; 0x40
 8017800:	9311      	str	r3, [sp, #68]	; 0x44
 8017802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017806:	e7df      	b.n	80177c8 <_strtod_l+0xa40>
 8017808:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801780c:	e7f9      	b.n	8017802 <_strtod_l+0xa7a>
 801780e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017812:	9b04      	ldr	r3, [sp, #16]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d1ab      	bne.n	8017770 <_strtod_l+0x9e8>
 8017818:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801781c:	0d1b      	lsrs	r3, r3, #20
 801781e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017820:	051b      	lsls	r3, r3, #20
 8017822:	429a      	cmp	r2, r3
 8017824:	465d      	mov	r5, fp
 8017826:	d1a3      	bne.n	8017770 <_strtod_l+0x9e8>
 8017828:	4639      	mov	r1, r7
 801782a:	4630      	mov	r0, r6
 801782c:	f7e9 f9ac 	bl	8000b88 <__aeabi_d2iz>
 8017830:	f7e8 fe90 	bl	8000554 <__aeabi_i2d>
 8017834:	460b      	mov	r3, r1
 8017836:	4602      	mov	r2, r0
 8017838:	4639      	mov	r1, r7
 801783a:	4630      	mov	r0, r6
 801783c:	f7e8 fd3c 	bl	80002b8 <__aeabi_dsub>
 8017840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017842:	4606      	mov	r6, r0
 8017844:	460f      	mov	r7, r1
 8017846:	b933      	cbnz	r3, 8017856 <_strtod_l+0xace>
 8017848:	f1ba 0f00 	cmp.w	sl, #0
 801784c:	d103      	bne.n	8017856 <_strtod_l+0xace>
 801784e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017852:	2d00      	cmp	r5, #0
 8017854:	d06d      	beq.n	8017932 <_strtod_l+0xbaa>
 8017856:	a30a      	add	r3, pc, #40	; (adr r3, 8017880 <_strtod_l+0xaf8>)
 8017858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801785c:	4630      	mov	r0, r6
 801785e:	4639      	mov	r1, r7
 8017860:	f7e9 f954 	bl	8000b0c <__aeabi_dcmplt>
 8017864:	2800      	cmp	r0, #0
 8017866:	f47f acb8 	bne.w	80171da <_strtod_l+0x452>
 801786a:	a307      	add	r3, pc, #28	; (adr r3, 8017888 <_strtod_l+0xb00>)
 801786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017870:	4630      	mov	r0, r6
 8017872:	4639      	mov	r1, r7
 8017874:	f7e9 f968 	bl	8000b48 <__aeabi_dcmpgt>
 8017878:	2800      	cmp	r0, #0
 801787a:	f43f af79 	beq.w	8017770 <_strtod_l+0x9e8>
 801787e:	e4ac      	b.n	80171da <_strtod_l+0x452>
 8017880:	94a03595 	.word	0x94a03595
 8017884:	3fdfffff 	.word	0x3fdfffff
 8017888:	35afe535 	.word	0x35afe535
 801788c:	3fe00000 	.word	0x3fe00000
 8017890:	000fffff 	.word	0x000fffff
 8017894:	7ff00000 	.word	0x7ff00000
 8017898:	7fefffff 	.word	0x7fefffff
 801789c:	39500000 	.word	0x39500000
 80178a0:	3ff00000 	.word	0x3ff00000
 80178a4:	7fe00000 	.word	0x7fe00000
 80178a8:	7c9fffff 	.word	0x7c9fffff
 80178ac:	3fe00000 	.word	0x3fe00000
 80178b0:	bff00000 	.word	0xbff00000
 80178b4:	9b04      	ldr	r3, [sp, #16]
 80178b6:	b333      	cbz	r3, 8017906 <_strtod_l+0xb7e>
 80178b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80178be:	d822      	bhi.n	8017906 <_strtod_l+0xb7e>
 80178c0:	a327      	add	r3, pc, #156	; (adr r3, 8017960 <_strtod_l+0xbd8>)
 80178c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c6:	4630      	mov	r0, r6
 80178c8:	4639      	mov	r1, r7
 80178ca:	f7e9 f929 	bl	8000b20 <__aeabi_dcmple>
 80178ce:	b1a0      	cbz	r0, 80178fa <_strtod_l+0xb72>
 80178d0:	4639      	mov	r1, r7
 80178d2:	4630      	mov	r0, r6
 80178d4:	f7e9 f980 	bl	8000bd8 <__aeabi_d2uiz>
 80178d8:	2800      	cmp	r0, #0
 80178da:	bf08      	it	eq
 80178dc:	2001      	moveq	r0, #1
 80178de:	f7e8 fe29 	bl	8000534 <__aeabi_ui2d>
 80178e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178e4:	4606      	mov	r6, r0
 80178e6:	460f      	mov	r7, r1
 80178e8:	bb03      	cbnz	r3, 801792c <_strtod_l+0xba4>
 80178ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80178ee:	9012      	str	r0, [sp, #72]	; 0x48
 80178f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80178f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80178f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80178fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80178fe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017902:	1a9b      	subs	r3, r3, r2
 8017904:	930b      	str	r3, [sp, #44]	; 0x2c
 8017906:	ed9d 0b08 	vldr	d0, [sp, #32]
 801790a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801790e:	f001 fd6b 	bl	80193e8 <__ulp>
 8017912:	4650      	mov	r0, sl
 8017914:	ec53 2b10 	vmov	r2, r3, d0
 8017918:	4659      	mov	r1, fp
 801791a:	f7e8 fe85 	bl	8000628 <__aeabi_dmul>
 801791e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017922:	f7e8 fccb 	bl	80002bc <__adddf3>
 8017926:	4682      	mov	sl, r0
 8017928:	468b      	mov	fp, r1
 801792a:	e772      	b.n	8017812 <_strtod_l+0xa8a>
 801792c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017930:	e7df      	b.n	80178f2 <_strtod_l+0xb6a>
 8017932:	a30d      	add	r3, pc, #52	; (adr r3, 8017968 <_strtod_l+0xbe0>)
 8017934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017938:	f7e9 f8e8 	bl	8000b0c <__aeabi_dcmplt>
 801793c:	e79c      	b.n	8017878 <_strtod_l+0xaf0>
 801793e:	2300      	movs	r3, #0
 8017940:	930d      	str	r3, [sp, #52]	; 0x34
 8017942:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017946:	6013      	str	r3, [r2, #0]
 8017948:	f7ff ba61 	b.w	8016e0e <_strtod_l+0x86>
 801794c:	2b65      	cmp	r3, #101	; 0x65
 801794e:	f04f 0200 	mov.w	r2, #0
 8017952:	f43f ab4e 	beq.w	8016ff2 <_strtod_l+0x26a>
 8017956:	2101      	movs	r1, #1
 8017958:	4614      	mov	r4, r2
 801795a:	9104      	str	r1, [sp, #16]
 801795c:	f7ff bacb 	b.w	8016ef6 <_strtod_l+0x16e>
 8017960:	ffc00000 	.word	0xffc00000
 8017964:	41dfffff 	.word	0x41dfffff
 8017968:	94a03595 	.word	0x94a03595
 801796c:	3fcfffff 	.word	0x3fcfffff

08017970 <_strtod_r>:
 8017970:	4b05      	ldr	r3, [pc, #20]	; (8017988 <_strtod_r+0x18>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	b410      	push	{r4}
 8017976:	6a1b      	ldr	r3, [r3, #32]
 8017978:	4c04      	ldr	r4, [pc, #16]	; (801798c <_strtod_r+0x1c>)
 801797a:	2b00      	cmp	r3, #0
 801797c:	bf08      	it	eq
 801797e:	4623      	moveq	r3, r4
 8017980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017984:	f7ff ba00 	b.w	8016d88 <_strtod_l>
 8017988:	2000000c 	.word	0x2000000c
 801798c:	20000070 	.word	0x20000070

08017990 <_strtol_l.isra.0>:
 8017990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017994:	4680      	mov	r8, r0
 8017996:	4689      	mov	r9, r1
 8017998:	4692      	mov	sl, r2
 801799a:	461e      	mov	r6, r3
 801799c:	460f      	mov	r7, r1
 801799e:	463d      	mov	r5, r7
 80179a0:	9808      	ldr	r0, [sp, #32]
 80179a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80179a6:	f001 fa0d 	bl	8018dc4 <__locale_ctype_ptr_l>
 80179aa:	4420      	add	r0, r4
 80179ac:	7843      	ldrb	r3, [r0, #1]
 80179ae:	f013 0308 	ands.w	r3, r3, #8
 80179b2:	d132      	bne.n	8017a1a <_strtol_l.isra.0+0x8a>
 80179b4:	2c2d      	cmp	r4, #45	; 0x2d
 80179b6:	d132      	bne.n	8017a1e <_strtol_l.isra.0+0x8e>
 80179b8:	787c      	ldrb	r4, [r7, #1]
 80179ba:	1cbd      	adds	r5, r7, #2
 80179bc:	2201      	movs	r2, #1
 80179be:	2e00      	cmp	r6, #0
 80179c0:	d05d      	beq.n	8017a7e <_strtol_l.isra.0+0xee>
 80179c2:	2e10      	cmp	r6, #16
 80179c4:	d109      	bne.n	80179da <_strtol_l.isra.0+0x4a>
 80179c6:	2c30      	cmp	r4, #48	; 0x30
 80179c8:	d107      	bne.n	80179da <_strtol_l.isra.0+0x4a>
 80179ca:	782b      	ldrb	r3, [r5, #0]
 80179cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80179d0:	2b58      	cmp	r3, #88	; 0x58
 80179d2:	d14f      	bne.n	8017a74 <_strtol_l.isra.0+0xe4>
 80179d4:	786c      	ldrb	r4, [r5, #1]
 80179d6:	2610      	movs	r6, #16
 80179d8:	3502      	adds	r5, #2
 80179da:	2a00      	cmp	r2, #0
 80179dc:	bf14      	ite	ne
 80179de:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80179e2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80179e6:	2700      	movs	r7, #0
 80179e8:	fbb1 fcf6 	udiv	ip, r1, r6
 80179ec:	4638      	mov	r0, r7
 80179ee:	fb06 1e1c 	mls	lr, r6, ip, r1
 80179f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80179f6:	2b09      	cmp	r3, #9
 80179f8:	d817      	bhi.n	8017a2a <_strtol_l.isra.0+0x9a>
 80179fa:	461c      	mov	r4, r3
 80179fc:	42a6      	cmp	r6, r4
 80179fe:	dd23      	ble.n	8017a48 <_strtol_l.isra.0+0xb8>
 8017a00:	1c7b      	adds	r3, r7, #1
 8017a02:	d007      	beq.n	8017a14 <_strtol_l.isra.0+0x84>
 8017a04:	4584      	cmp	ip, r0
 8017a06:	d31c      	bcc.n	8017a42 <_strtol_l.isra.0+0xb2>
 8017a08:	d101      	bne.n	8017a0e <_strtol_l.isra.0+0x7e>
 8017a0a:	45a6      	cmp	lr, r4
 8017a0c:	db19      	blt.n	8017a42 <_strtol_l.isra.0+0xb2>
 8017a0e:	fb00 4006 	mla	r0, r0, r6, r4
 8017a12:	2701      	movs	r7, #1
 8017a14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017a18:	e7eb      	b.n	80179f2 <_strtol_l.isra.0+0x62>
 8017a1a:	462f      	mov	r7, r5
 8017a1c:	e7bf      	b.n	801799e <_strtol_l.isra.0+0xe>
 8017a1e:	2c2b      	cmp	r4, #43	; 0x2b
 8017a20:	bf04      	itt	eq
 8017a22:	1cbd      	addeq	r5, r7, #2
 8017a24:	787c      	ldrbeq	r4, [r7, #1]
 8017a26:	461a      	mov	r2, r3
 8017a28:	e7c9      	b.n	80179be <_strtol_l.isra.0+0x2e>
 8017a2a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017a2e:	2b19      	cmp	r3, #25
 8017a30:	d801      	bhi.n	8017a36 <_strtol_l.isra.0+0xa6>
 8017a32:	3c37      	subs	r4, #55	; 0x37
 8017a34:	e7e2      	b.n	80179fc <_strtol_l.isra.0+0x6c>
 8017a36:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017a3a:	2b19      	cmp	r3, #25
 8017a3c:	d804      	bhi.n	8017a48 <_strtol_l.isra.0+0xb8>
 8017a3e:	3c57      	subs	r4, #87	; 0x57
 8017a40:	e7dc      	b.n	80179fc <_strtol_l.isra.0+0x6c>
 8017a42:	f04f 37ff 	mov.w	r7, #4294967295
 8017a46:	e7e5      	b.n	8017a14 <_strtol_l.isra.0+0x84>
 8017a48:	1c7b      	adds	r3, r7, #1
 8017a4a:	d108      	bne.n	8017a5e <_strtol_l.isra.0+0xce>
 8017a4c:	2322      	movs	r3, #34	; 0x22
 8017a4e:	f8c8 3000 	str.w	r3, [r8]
 8017a52:	4608      	mov	r0, r1
 8017a54:	f1ba 0f00 	cmp.w	sl, #0
 8017a58:	d107      	bne.n	8017a6a <_strtol_l.isra.0+0xda>
 8017a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a5e:	b102      	cbz	r2, 8017a62 <_strtol_l.isra.0+0xd2>
 8017a60:	4240      	negs	r0, r0
 8017a62:	f1ba 0f00 	cmp.w	sl, #0
 8017a66:	d0f8      	beq.n	8017a5a <_strtol_l.isra.0+0xca>
 8017a68:	b10f      	cbz	r7, 8017a6e <_strtol_l.isra.0+0xde>
 8017a6a:	f105 39ff 	add.w	r9, r5, #4294967295
 8017a6e:	f8ca 9000 	str.w	r9, [sl]
 8017a72:	e7f2      	b.n	8017a5a <_strtol_l.isra.0+0xca>
 8017a74:	2430      	movs	r4, #48	; 0x30
 8017a76:	2e00      	cmp	r6, #0
 8017a78:	d1af      	bne.n	80179da <_strtol_l.isra.0+0x4a>
 8017a7a:	2608      	movs	r6, #8
 8017a7c:	e7ad      	b.n	80179da <_strtol_l.isra.0+0x4a>
 8017a7e:	2c30      	cmp	r4, #48	; 0x30
 8017a80:	d0a3      	beq.n	80179ca <_strtol_l.isra.0+0x3a>
 8017a82:	260a      	movs	r6, #10
 8017a84:	e7a9      	b.n	80179da <_strtol_l.isra.0+0x4a>
	...

08017a88 <_strtol_r>:
 8017a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a8a:	4c06      	ldr	r4, [pc, #24]	; (8017aa4 <_strtol_r+0x1c>)
 8017a8c:	4d06      	ldr	r5, [pc, #24]	; (8017aa8 <_strtol_r+0x20>)
 8017a8e:	6824      	ldr	r4, [r4, #0]
 8017a90:	6a24      	ldr	r4, [r4, #32]
 8017a92:	2c00      	cmp	r4, #0
 8017a94:	bf08      	it	eq
 8017a96:	462c      	moveq	r4, r5
 8017a98:	9400      	str	r4, [sp, #0]
 8017a9a:	f7ff ff79 	bl	8017990 <_strtol_l.isra.0>
 8017a9e:	b003      	add	sp, #12
 8017aa0:	bd30      	pop	{r4, r5, pc}
 8017aa2:	bf00      	nop
 8017aa4:	2000000c 	.word	0x2000000c
 8017aa8:	20000070 	.word	0x20000070

08017aac <_vsiprintf_r>:
 8017aac:	b500      	push	{lr}
 8017aae:	b09b      	sub	sp, #108	; 0x6c
 8017ab0:	9100      	str	r1, [sp, #0]
 8017ab2:	9104      	str	r1, [sp, #16]
 8017ab4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ab8:	9105      	str	r1, [sp, #20]
 8017aba:	9102      	str	r1, [sp, #8]
 8017abc:	4905      	ldr	r1, [pc, #20]	; (8017ad4 <_vsiprintf_r+0x28>)
 8017abe:	9103      	str	r1, [sp, #12]
 8017ac0:	4669      	mov	r1, sp
 8017ac2:	f001 fed5 	bl	8019870 <_svfiprintf_r>
 8017ac6:	9b00      	ldr	r3, [sp, #0]
 8017ac8:	2200      	movs	r2, #0
 8017aca:	701a      	strb	r2, [r3, #0]
 8017acc:	b01b      	add	sp, #108	; 0x6c
 8017ace:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ad2:	bf00      	nop
 8017ad4:	ffff0208 	.word	0xffff0208

08017ad8 <vsiprintf>:
 8017ad8:	4613      	mov	r3, r2
 8017ada:	460a      	mov	r2, r1
 8017adc:	4601      	mov	r1, r0
 8017ade:	4802      	ldr	r0, [pc, #8]	; (8017ae8 <vsiprintf+0x10>)
 8017ae0:	6800      	ldr	r0, [r0, #0]
 8017ae2:	f7ff bfe3 	b.w	8017aac <_vsiprintf_r>
 8017ae6:	bf00      	nop
 8017ae8:	2000000c 	.word	0x2000000c

08017aec <quorem>:
 8017aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017af0:	6903      	ldr	r3, [r0, #16]
 8017af2:	690c      	ldr	r4, [r1, #16]
 8017af4:	42a3      	cmp	r3, r4
 8017af6:	4680      	mov	r8, r0
 8017af8:	f2c0 8082 	blt.w	8017c00 <quorem+0x114>
 8017afc:	3c01      	subs	r4, #1
 8017afe:	f101 0714 	add.w	r7, r1, #20
 8017b02:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017b06:	f100 0614 	add.w	r6, r0, #20
 8017b0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017b0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017b12:	eb06 030c 	add.w	r3, r6, ip
 8017b16:	3501      	adds	r5, #1
 8017b18:	eb07 090c 	add.w	r9, r7, ip
 8017b1c:	9301      	str	r3, [sp, #4]
 8017b1e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017b22:	b395      	cbz	r5, 8017b8a <quorem+0x9e>
 8017b24:	f04f 0a00 	mov.w	sl, #0
 8017b28:	4638      	mov	r0, r7
 8017b2a:	46b6      	mov	lr, r6
 8017b2c:	46d3      	mov	fp, sl
 8017b2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017b32:	b293      	uxth	r3, r2
 8017b34:	fb05 a303 	mla	r3, r5, r3, sl
 8017b38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	ebab 0303 	sub.w	r3, fp, r3
 8017b42:	0c12      	lsrs	r2, r2, #16
 8017b44:	f8de b000 	ldr.w	fp, [lr]
 8017b48:	fb05 a202 	mla	r2, r5, r2, sl
 8017b4c:	fa13 f38b 	uxtah	r3, r3, fp
 8017b50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017b54:	fa1f fb82 	uxth.w	fp, r2
 8017b58:	f8de 2000 	ldr.w	r2, [lr]
 8017b5c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017b60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b6a:	4581      	cmp	r9, r0
 8017b6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017b70:	f84e 3b04 	str.w	r3, [lr], #4
 8017b74:	d2db      	bcs.n	8017b2e <quorem+0x42>
 8017b76:	f856 300c 	ldr.w	r3, [r6, ip]
 8017b7a:	b933      	cbnz	r3, 8017b8a <quorem+0x9e>
 8017b7c:	9b01      	ldr	r3, [sp, #4]
 8017b7e:	3b04      	subs	r3, #4
 8017b80:	429e      	cmp	r6, r3
 8017b82:	461a      	mov	r2, r3
 8017b84:	d330      	bcc.n	8017be8 <quorem+0xfc>
 8017b86:	f8c8 4010 	str.w	r4, [r8, #16]
 8017b8a:	4640      	mov	r0, r8
 8017b8c:	f001 fbb4 	bl	80192f8 <__mcmp>
 8017b90:	2800      	cmp	r0, #0
 8017b92:	db25      	blt.n	8017be0 <quorem+0xf4>
 8017b94:	3501      	adds	r5, #1
 8017b96:	4630      	mov	r0, r6
 8017b98:	f04f 0c00 	mov.w	ip, #0
 8017b9c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017ba0:	f8d0 e000 	ldr.w	lr, [r0]
 8017ba4:	b293      	uxth	r3, r2
 8017ba6:	ebac 0303 	sub.w	r3, ip, r3
 8017baa:	0c12      	lsrs	r2, r2, #16
 8017bac:	fa13 f38e 	uxtah	r3, r3, lr
 8017bb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017bb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017bb8:	b29b      	uxth	r3, r3
 8017bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017bbe:	45b9      	cmp	r9, r7
 8017bc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017bc4:	f840 3b04 	str.w	r3, [r0], #4
 8017bc8:	d2e8      	bcs.n	8017b9c <quorem+0xb0>
 8017bca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017bce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017bd2:	b92a      	cbnz	r2, 8017be0 <quorem+0xf4>
 8017bd4:	3b04      	subs	r3, #4
 8017bd6:	429e      	cmp	r6, r3
 8017bd8:	461a      	mov	r2, r3
 8017bda:	d30b      	bcc.n	8017bf4 <quorem+0x108>
 8017bdc:	f8c8 4010 	str.w	r4, [r8, #16]
 8017be0:	4628      	mov	r0, r5
 8017be2:	b003      	add	sp, #12
 8017be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017be8:	6812      	ldr	r2, [r2, #0]
 8017bea:	3b04      	subs	r3, #4
 8017bec:	2a00      	cmp	r2, #0
 8017bee:	d1ca      	bne.n	8017b86 <quorem+0x9a>
 8017bf0:	3c01      	subs	r4, #1
 8017bf2:	e7c5      	b.n	8017b80 <quorem+0x94>
 8017bf4:	6812      	ldr	r2, [r2, #0]
 8017bf6:	3b04      	subs	r3, #4
 8017bf8:	2a00      	cmp	r2, #0
 8017bfa:	d1ef      	bne.n	8017bdc <quorem+0xf0>
 8017bfc:	3c01      	subs	r4, #1
 8017bfe:	e7ea      	b.n	8017bd6 <quorem+0xea>
 8017c00:	2000      	movs	r0, #0
 8017c02:	e7ee      	b.n	8017be2 <quorem+0xf6>
 8017c04:	0000      	movs	r0, r0
	...

08017c08 <_dtoa_r>:
 8017c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c0c:	ec57 6b10 	vmov	r6, r7, d0
 8017c10:	b097      	sub	sp, #92	; 0x5c
 8017c12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017c14:	9106      	str	r1, [sp, #24]
 8017c16:	4604      	mov	r4, r0
 8017c18:	920b      	str	r2, [sp, #44]	; 0x2c
 8017c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8017c1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017c20:	e9cd 6700 	strd	r6, r7, [sp]
 8017c24:	b93d      	cbnz	r5, 8017c36 <_dtoa_r+0x2e>
 8017c26:	2010      	movs	r0, #16
 8017c28:	f001 f8ee 	bl	8018e08 <malloc>
 8017c2c:	6260      	str	r0, [r4, #36]	; 0x24
 8017c2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017c32:	6005      	str	r5, [r0, #0]
 8017c34:	60c5      	str	r5, [r0, #12]
 8017c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017c38:	6819      	ldr	r1, [r3, #0]
 8017c3a:	b151      	cbz	r1, 8017c52 <_dtoa_r+0x4a>
 8017c3c:	685a      	ldr	r2, [r3, #4]
 8017c3e:	604a      	str	r2, [r1, #4]
 8017c40:	2301      	movs	r3, #1
 8017c42:	4093      	lsls	r3, r2
 8017c44:	608b      	str	r3, [r1, #8]
 8017c46:	4620      	mov	r0, r4
 8017c48:	f001 f937 	bl	8018eba <_Bfree>
 8017c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017c4e:	2200      	movs	r2, #0
 8017c50:	601a      	str	r2, [r3, #0]
 8017c52:	1e3b      	subs	r3, r7, #0
 8017c54:	bfbb      	ittet	lt
 8017c56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017c5a:	9301      	strlt	r3, [sp, #4]
 8017c5c:	2300      	movge	r3, #0
 8017c5e:	2201      	movlt	r2, #1
 8017c60:	bfac      	ite	ge
 8017c62:	f8c8 3000 	strge.w	r3, [r8]
 8017c66:	f8c8 2000 	strlt.w	r2, [r8]
 8017c6a:	4baf      	ldr	r3, [pc, #700]	; (8017f28 <_dtoa_r+0x320>)
 8017c6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017c70:	ea33 0308 	bics.w	r3, r3, r8
 8017c74:	d114      	bne.n	8017ca0 <_dtoa_r+0x98>
 8017c76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c78:	f242 730f 	movw	r3, #9999	; 0x270f
 8017c7c:	6013      	str	r3, [r2, #0]
 8017c7e:	9b00      	ldr	r3, [sp, #0]
 8017c80:	b923      	cbnz	r3, 8017c8c <_dtoa_r+0x84>
 8017c82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017c86:	2800      	cmp	r0, #0
 8017c88:	f000 8542 	beq.w	8018710 <_dtoa_r+0xb08>
 8017c8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017f3c <_dtoa_r+0x334>
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	f000 8544 	beq.w	8018720 <_dtoa_r+0xb18>
 8017c98:	f10b 0303 	add.w	r3, fp, #3
 8017c9c:	f000 bd3e 	b.w	801871c <_dtoa_r+0xb14>
 8017ca0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	4630      	mov	r0, r6
 8017caa:	4639      	mov	r1, r7
 8017cac:	f7e8 ff24 	bl	8000af8 <__aeabi_dcmpeq>
 8017cb0:	4681      	mov	r9, r0
 8017cb2:	b168      	cbz	r0, 8017cd0 <_dtoa_r+0xc8>
 8017cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	6013      	str	r3, [r2, #0]
 8017cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	f000 8524 	beq.w	801870a <_dtoa_r+0xb02>
 8017cc2:	4b9a      	ldr	r3, [pc, #616]	; (8017f2c <_dtoa_r+0x324>)
 8017cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017cc6:	f103 3bff 	add.w	fp, r3, #4294967295
 8017cca:	6013      	str	r3, [r2, #0]
 8017ccc:	f000 bd28 	b.w	8018720 <_dtoa_r+0xb18>
 8017cd0:	aa14      	add	r2, sp, #80	; 0x50
 8017cd2:	a915      	add	r1, sp, #84	; 0x54
 8017cd4:	ec47 6b10 	vmov	d0, r6, r7
 8017cd8:	4620      	mov	r0, r4
 8017cda:	f001 fbfb 	bl	80194d4 <__d2b>
 8017cde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017ce2:	9004      	str	r0, [sp, #16]
 8017ce4:	2d00      	cmp	r5, #0
 8017ce6:	d07c      	beq.n	8017de2 <_dtoa_r+0x1da>
 8017ce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017cec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017cf0:	46b2      	mov	sl, r6
 8017cf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017cf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017cfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017cfe:	2200      	movs	r2, #0
 8017d00:	4b8b      	ldr	r3, [pc, #556]	; (8017f30 <_dtoa_r+0x328>)
 8017d02:	4650      	mov	r0, sl
 8017d04:	4659      	mov	r1, fp
 8017d06:	f7e8 fad7 	bl	80002b8 <__aeabi_dsub>
 8017d0a:	a381      	add	r3, pc, #516	; (adr r3, 8017f10 <_dtoa_r+0x308>)
 8017d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d10:	f7e8 fc8a 	bl	8000628 <__aeabi_dmul>
 8017d14:	a380      	add	r3, pc, #512	; (adr r3, 8017f18 <_dtoa_r+0x310>)
 8017d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d1a:	f7e8 facf 	bl	80002bc <__adddf3>
 8017d1e:	4606      	mov	r6, r0
 8017d20:	4628      	mov	r0, r5
 8017d22:	460f      	mov	r7, r1
 8017d24:	f7e8 fc16 	bl	8000554 <__aeabi_i2d>
 8017d28:	a37d      	add	r3, pc, #500	; (adr r3, 8017f20 <_dtoa_r+0x318>)
 8017d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d2e:	f7e8 fc7b 	bl	8000628 <__aeabi_dmul>
 8017d32:	4602      	mov	r2, r0
 8017d34:	460b      	mov	r3, r1
 8017d36:	4630      	mov	r0, r6
 8017d38:	4639      	mov	r1, r7
 8017d3a:	f7e8 fabf 	bl	80002bc <__adddf3>
 8017d3e:	4606      	mov	r6, r0
 8017d40:	460f      	mov	r7, r1
 8017d42:	f7e8 ff21 	bl	8000b88 <__aeabi_d2iz>
 8017d46:	2200      	movs	r2, #0
 8017d48:	4682      	mov	sl, r0
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	4630      	mov	r0, r6
 8017d4e:	4639      	mov	r1, r7
 8017d50:	f7e8 fedc 	bl	8000b0c <__aeabi_dcmplt>
 8017d54:	b148      	cbz	r0, 8017d6a <_dtoa_r+0x162>
 8017d56:	4650      	mov	r0, sl
 8017d58:	f7e8 fbfc 	bl	8000554 <__aeabi_i2d>
 8017d5c:	4632      	mov	r2, r6
 8017d5e:	463b      	mov	r3, r7
 8017d60:	f7e8 feca 	bl	8000af8 <__aeabi_dcmpeq>
 8017d64:	b908      	cbnz	r0, 8017d6a <_dtoa_r+0x162>
 8017d66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d6a:	f1ba 0f16 	cmp.w	sl, #22
 8017d6e:	d859      	bhi.n	8017e24 <_dtoa_r+0x21c>
 8017d70:	4970      	ldr	r1, [pc, #448]	; (8017f34 <_dtoa_r+0x32c>)
 8017d72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d7e:	f7e8 fee3 	bl	8000b48 <__aeabi_dcmpgt>
 8017d82:	2800      	cmp	r0, #0
 8017d84:	d050      	beq.n	8017e28 <_dtoa_r+0x220>
 8017d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d90:	1b5d      	subs	r5, r3, r5
 8017d92:	f1b5 0801 	subs.w	r8, r5, #1
 8017d96:	bf49      	itett	mi
 8017d98:	f1c5 0301 	rsbmi	r3, r5, #1
 8017d9c:	2300      	movpl	r3, #0
 8017d9e:	9305      	strmi	r3, [sp, #20]
 8017da0:	f04f 0800 	movmi.w	r8, #0
 8017da4:	bf58      	it	pl
 8017da6:	9305      	strpl	r3, [sp, #20]
 8017da8:	f1ba 0f00 	cmp.w	sl, #0
 8017dac:	db3e      	blt.n	8017e2c <_dtoa_r+0x224>
 8017dae:	2300      	movs	r3, #0
 8017db0:	44d0      	add	r8, sl
 8017db2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017db6:	9307      	str	r3, [sp, #28]
 8017db8:	9b06      	ldr	r3, [sp, #24]
 8017dba:	2b09      	cmp	r3, #9
 8017dbc:	f200 8090 	bhi.w	8017ee0 <_dtoa_r+0x2d8>
 8017dc0:	2b05      	cmp	r3, #5
 8017dc2:	bfc4      	itt	gt
 8017dc4:	3b04      	subgt	r3, #4
 8017dc6:	9306      	strgt	r3, [sp, #24]
 8017dc8:	9b06      	ldr	r3, [sp, #24]
 8017dca:	f1a3 0302 	sub.w	r3, r3, #2
 8017dce:	bfcc      	ite	gt
 8017dd0:	2500      	movgt	r5, #0
 8017dd2:	2501      	movle	r5, #1
 8017dd4:	2b03      	cmp	r3, #3
 8017dd6:	f200 808f 	bhi.w	8017ef8 <_dtoa_r+0x2f0>
 8017dda:	e8df f003 	tbb	[pc, r3]
 8017dde:	7f7d      	.short	0x7f7d
 8017de0:	7131      	.short	0x7131
 8017de2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017de6:	441d      	add	r5, r3
 8017de8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017dec:	2820      	cmp	r0, #32
 8017dee:	dd13      	ble.n	8017e18 <_dtoa_r+0x210>
 8017df0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017df4:	9b00      	ldr	r3, [sp, #0]
 8017df6:	fa08 f800 	lsl.w	r8, r8, r0
 8017dfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017dfe:	fa23 f000 	lsr.w	r0, r3, r0
 8017e02:	ea48 0000 	orr.w	r0, r8, r0
 8017e06:	f7e8 fb95 	bl	8000534 <__aeabi_ui2d>
 8017e0a:	2301      	movs	r3, #1
 8017e0c:	4682      	mov	sl, r0
 8017e0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017e12:	3d01      	subs	r5, #1
 8017e14:	9313      	str	r3, [sp, #76]	; 0x4c
 8017e16:	e772      	b.n	8017cfe <_dtoa_r+0xf6>
 8017e18:	9b00      	ldr	r3, [sp, #0]
 8017e1a:	f1c0 0020 	rsb	r0, r0, #32
 8017e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8017e22:	e7f0      	b.n	8017e06 <_dtoa_r+0x1fe>
 8017e24:	2301      	movs	r3, #1
 8017e26:	e7b1      	b.n	8017d8c <_dtoa_r+0x184>
 8017e28:	900f      	str	r0, [sp, #60]	; 0x3c
 8017e2a:	e7b0      	b.n	8017d8e <_dtoa_r+0x186>
 8017e2c:	9b05      	ldr	r3, [sp, #20]
 8017e2e:	eba3 030a 	sub.w	r3, r3, sl
 8017e32:	9305      	str	r3, [sp, #20]
 8017e34:	f1ca 0300 	rsb	r3, sl, #0
 8017e38:	9307      	str	r3, [sp, #28]
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	930e      	str	r3, [sp, #56]	; 0x38
 8017e3e:	e7bb      	b.n	8017db8 <_dtoa_r+0x1b0>
 8017e40:	2301      	movs	r3, #1
 8017e42:	930a      	str	r3, [sp, #40]	; 0x28
 8017e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	dd59      	ble.n	8017efe <_dtoa_r+0x2f6>
 8017e4a:	9302      	str	r3, [sp, #8]
 8017e4c:	4699      	mov	r9, r3
 8017e4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017e50:	2200      	movs	r2, #0
 8017e52:	6072      	str	r2, [r6, #4]
 8017e54:	2204      	movs	r2, #4
 8017e56:	f102 0014 	add.w	r0, r2, #20
 8017e5a:	4298      	cmp	r0, r3
 8017e5c:	6871      	ldr	r1, [r6, #4]
 8017e5e:	d953      	bls.n	8017f08 <_dtoa_r+0x300>
 8017e60:	4620      	mov	r0, r4
 8017e62:	f000 fff6 	bl	8018e52 <_Balloc>
 8017e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e68:	6030      	str	r0, [r6, #0]
 8017e6a:	f1b9 0f0e 	cmp.w	r9, #14
 8017e6e:	f8d3 b000 	ldr.w	fp, [r3]
 8017e72:	f200 80e6 	bhi.w	8018042 <_dtoa_r+0x43a>
 8017e76:	2d00      	cmp	r5, #0
 8017e78:	f000 80e3 	beq.w	8018042 <_dtoa_r+0x43a>
 8017e7c:	ed9d 7b00 	vldr	d7, [sp]
 8017e80:	f1ba 0f00 	cmp.w	sl, #0
 8017e84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017e88:	dd74      	ble.n	8017f74 <_dtoa_r+0x36c>
 8017e8a:	4a2a      	ldr	r2, [pc, #168]	; (8017f34 <_dtoa_r+0x32c>)
 8017e8c:	f00a 030f 	and.w	r3, sl, #15
 8017e90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017e94:	ed93 7b00 	vldr	d7, [r3]
 8017e98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017e9c:	06f0      	lsls	r0, r6, #27
 8017e9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017ea2:	d565      	bpl.n	8017f70 <_dtoa_r+0x368>
 8017ea4:	4b24      	ldr	r3, [pc, #144]	; (8017f38 <_dtoa_r+0x330>)
 8017ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017eaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017eae:	f7e8 fce5 	bl	800087c <__aeabi_ddiv>
 8017eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8017eb6:	f006 060f 	and.w	r6, r6, #15
 8017eba:	2503      	movs	r5, #3
 8017ebc:	4f1e      	ldr	r7, [pc, #120]	; (8017f38 <_dtoa_r+0x330>)
 8017ebe:	e04c      	b.n	8017f5a <_dtoa_r+0x352>
 8017ec0:	2301      	movs	r3, #1
 8017ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8017ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ec6:	4453      	add	r3, sl
 8017ec8:	f103 0901 	add.w	r9, r3, #1
 8017ecc:	9302      	str	r3, [sp, #8]
 8017ece:	464b      	mov	r3, r9
 8017ed0:	2b01      	cmp	r3, #1
 8017ed2:	bfb8      	it	lt
 8017ed4:	2301      	movlt	r3, #1
 8017ed6:	e7ba      	b.n	8017e4e <_dtoa_r+0x246>
 8017ed8:	2300      	movs	r3, #0
 8017eda:	e7b2      	b.n	8017e42 <_dtoa_r+0x23a>
 8017edc:	2300      	movs	r3, #0
 8017ede:	e7f0      	b.n	8017ec2 <_dtoa_r+0x2ba>
 8017ee0:	2501      	movs	r5, #1
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	9306      	str	r3, [sp, #24]
 8017ee6:	950a      	str	r5, [sp, #40]	; 0x28
 8017ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8017eec:	9302      	str	r3, [sp, #8]
 8017eee:	4699      	mov	r9, r3
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	2312      	movs	r3, #18
 8017ef4:	920b      	str	r2, [sp, #44]	; 0x2c
 8017ef6:	e7aa      	b.n	8017e4e <_dtoa_r+0x246>
 8017ef8:	2301      	movs	r3, #1
 8017efa:	930a      	str	r3, [sp, #40]	; 0x28
 8017efc:	e7f4      	b.n	8017ee8 <_dtoa_r+0x2e0>
 8017efe:	2301      	movs	r3, #1
 8017f00:	9302      	str	r3, [sp, #8]
 8017f02:	4699      	mov	r9, r3
 8017f04:	461a      	mov	r2, r3
 8017f06:	e7f5      	b.n	8017ef4 <_dtoa_r+0x2ec>
 8017f08:	3101      	adds	r1, #1
 8017f0a:	6071      	str	r1, [r6, #4]
 8017f0c:	0052      	lsls	r2, r2, #1
 8017f0e:	e7a2      	b.n	8017e56 <_dtoa_r+0x24e>
 8017f10:	636f4361 	.word	0x636f4361
 8017f14:	3fd287a7 	.word	0x3fd287a7
 8017f18:	8b60c8b3 	.word	0x8b60c8b3
 8017f1c:	3fc68a28 	.word	0x3fc68a28
 8017f20:	509f79fb 	.word	0x509f79fb
 8017f24:	3fd34413 	.word	0x3fd34413
 8017f28:	7ff00000 	.word	0x7ff00000
 8017f2c:	0801ab24 	.word	0x0801ab24
 8017f30:	3ff80000 	.word	0x3ff80000
 8017f34:	0801aa28 	.word	0x0801aa28
 8017f38:	0801aa00 	.word	0x0801aa00
 8017f3c:	0801a9f1 	.word	0x0801a9f1
 8017f40:	07f1      	lsls	r1, r6, #31
 8017f42:	d508      	bpl.n	8017f56 <_dtoa_r+0x34e>
 8017f44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f4c:	f7e8 fb6c 	bl	8000628 <__aeabi_dmul>
 8017f50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017f54:	3501      	adds	r5, #1
 8017f56:	1076      	asrs	r6, r6, #1
 8017f58:	3708      	adds	r7, #8
 8017f5a:	2e00      	cmp	r6, #0
 8017f5c:	d1f0      	bne.n	8017f40 <_dtoa_r+0x338>
 8017f5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017f62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f66:	f7e8 fc89 	bl	800087c <__aeabi_ddiv>
 8017f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8017f6e:	e01a      	b.n	8017fa6 <_dtoa_r+0x39e>
 8017f70:	2502      	movs	r5, #2
 8017f72:	e7a3      	b.n	8017ebc <_dtoa_r+0x2b4>
 8017f74:	f000 80a0 	beq.w	80180b8 <_dtoa_r+0x4b0>
 8017f78:	f1ca 0600 	rsb	r6, sl, #0
 8017f7c:	4b9f      	ldr	r3, [pc, #636]	; (80181fc <_dtoa_r+0x5f4>)
 8017f7e:	4fa0      	ldr	r7, [pc, #640]	; (8018200 <_dtoa_r+0x5f8>)
 8017f80:	f006 020f 	and.w	r2, r6, #15
 8017f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017f90:	f7e8 fb4a 	bl	8000628 <__aeabi_dmul>
 8017f94:	e9cd 0100 	strd	r0, r1, [sp]
 8017f98:	1136      	asrs	r6, r6, #4
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	2502      	movs	r5, #2
 8017f9e:	2e00      	cmp	r6, #0
 8017fa0:	d17f      	bne.n	80180a2 <_dtoa_r+0x49a>
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d1e1      	bne.n	8017f6a <_dtoa_r+0x362>
 8017fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	f000 8087 	beq.w	80180bc <_dtoa_r+0x4b4>
 8017fae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	4b93      	ldr	r3, [pc, #588]	; (8018204 <_dtoa_r+0x5fc>)
 8017fb6:	4630      	mov	r0, r6
 8017fb8:	4639      	mov	r1, r7
 8017fba:	f7e8 fda7 	bl	8000b0c <__aeabi_dcmplt>
 8017fbe:	2800      	cmp	r0, #0
 8017fc0:	d07c      	beq.n	80180bc <_dtoa_r+0x4b4>
 8017fc2:	f1b9 0f00 	cmp.w	r9, #0
 8017fc6:	d079      	beq.n	80180bc <_dtoa_r+0x4b4>
 8017fc8:	9b02      	ldr	r3, [sp, #8]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	dd35      	ble.n	801803a <_dtoa_r+0x432>
 8017fce:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017fd2:	9308      	str	r3, [sp, #32]
 8017fd4:	4639      	mov	r1, r7
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	4b8b      	ldr	r3, [pc, #556]	; (8018208 <_dtoa_r+0x600>)
 8017fda:	4630      	mov	r0, r6
 8017fdc:	f7e8 fb24 	bl	8000628 <__aeabi_dmul>
 8017fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8017fe4:	9f02      	ldr	r7, [sp, #8]
 8017fe6:	3501      	adds	r5, #1
 8017fe8:	4628      	mov	r0, r5
 8017fea:	f7e8 fab3 	bl	8000554 <__aeabi_i2d>
 8017fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ff2:	f7e8 fb19 	bl	8000628 <__aeabi_dmul>
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	4b84      	ldr	r3, [pc, #528]	; (801820c <_dtoa_r+0x604>)
 8017ffa:	f7e8 f95f 	bl	80002bc <__adddf3>
 8017ffe:	4605      	mov	r5, r0
 8018000:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8018004:	2f00      	cmp	r7, #0
 8018006:	d15d      	bne.n	80180c4 <_dtoa_r+0x4bc>
 8018008:	2200      	movs	r2, #0
 801800a:	4b81      	ldr	r3, [pc, #516]	; (8018210 <_dtoa_r+0x608>)
 801800c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018010:	f7e8 f952 	bl	80002b8 <__aeabi_dsub>
 8018014:	462a      	mov	r2, r5
 8018016:	4633      	mov	r3, r6
 8018018:	e9cd 0100 	strd	r0, r1, [sp]
 801801c:	f7e8 fd94 	bl	8000b48 <__aeabi_dcmpgt>
 8018020:	2800      	cmp	r0, #0
 8018022:	f040 8288 	bne.w	8018536 <_dtoa_r+0x92e>
 8018026:	462a      	mov	r2, r5
 8018028:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801802c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018030:	f7e8 fd6c 	bl	8000b0c <__aeabi_dcmplt>
 8018034:	2800      	cmp	r0, #0
 8018036:	f040 827c 	bne.w	8018532 <_dtoa_r+0x92a>
 801803a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801803e:	e9cd 2300 	strd	r2, r3, [sp]
 8018042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018044:	2b00      	cmp	r3, #0
 8018046:	f2c0 8150 	blt.w	80182ea <_dtoa_r+0x6e2>
 801804a:	f1ba 0f0e 	cmp.w	sl, #14
 801804e:	f300 814c 	bgt.w	80182ea <_dtoa_r+0x6e2>
 8018052:	4b6a      	ldr	r3, [pc, #424]	; (80181fc <_dtoa_r+0x5f4>)
 8018054:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018058:	ed93 7b00 	vldr	d7, [r3]
 801805c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801805e:	2b00      	cmp	r3, #0
 8018060:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018064:	f280 80d8 	bge.w	8018218 <_dtoa_r+0x610>
 8018068:	f1b9 0f00 	cmp.w	r9, #0
 801806c:	f300 80d4 	bgt.w	8018218 <_dtoa_r+0x610>
 8018070:	f040 825e 	bne.w	8018530 <_dtoa_r+0x928>
 8018074:	2200      	movs	r2, #0
 8018076:	4b66      	ldr	r3, [pc, #408]	; (8018210 <_dtoa_r+0x608>)
 8018078:	ec51 0b17 	vmov	r0, r1, d7
 801807c:	f7e8 fad4 	bl	8000628 <__aeabi_dmul>
 8018080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018084:	f7e8 fd56 	bl	8000b34 <__aeabi_dcmpge>
 8018088:	464f      	mov	r7, r9
 801808a:	464e      	mov	r6, r9
 801808c:	2800      	cmp	r0, #0
 801808e:	f040 8234 	bne.w	80184fa <_dtoa_r+0x8f2>
 8018092:	2331      	movs	r3, #49	; 0x31
 8018094:	f10b 0501 	add.w	r5, fp, #1
 8018098:	f88b 3000 	strb.w	r3, [fp]
 801809c:	f10a 0a01 	add.w	sl, sl, #1
 80180a0:	e22f      	b.n	8018502 <_dtoa_r+0x8fa>
 80180a2:	07f2      	lsls	r2, r6, #31
 80180a4:	d505      	bpl.n	80180b2 <_dtoa_r+0x4aa>
 80180a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80180aa:	f7e8 fabd 	bl	8000628 <__aeabi_dmul>
 80180ae:	3501      	adds	r5, #1
 80180b0:	2301      	movs	r3, #1
 80180b2:	1076      	asrs	r6, r6, #1
 80180b4:	3708      	adds	r7, #8
 80180b6:	e772      	b.n	8017f9e <_dtoa_r+0x396>
 80180b8:	2502      	movs	r5, #2
 80180ba:	e774      	b.n	8017fa6 <_dtoa_r+0x39e>
 80180bc:	f8cd a020 	str.w	sl, [sp, #32]
 80180c0:	464f      	mov	r7, r9
 80180c2:	e791      	b.n	8017fe8 <_dtoa_r+0x3e0>
 80180c4:	4b4d      	ldr	r3, [pc, #308]	; (80181fc <_dtoa_r+0x5f4>)
 80180c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80180ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80180ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d047      	beq.n	8018164 <_dtoa_r+0x55c>
 80180d4:	4602      	mov	r2, r0
 80180d6:	460b      	mov	r3, r1
 80180d8:	2000      	movs	r0, #0
 80180da:	494e      	ldr	r1, [pc, #312]	; (8018214 <_dtoa_r+0x60c>)
 80180dc:	f7e8 fbce 	bl	800087c <__aeabi_ddiv>
 80180e0:	462a      	mov	r2, r5
 80180e2:	4633      	mov	r3, r6
 80180e4:	f7e8 f8e8 	bl	80002b8 <__aeabi_dsub>
 80180e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80180ec:	465d      	mov	r5, fp
 80180ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180f2:	f7e8 fd49 	bl	8000b88 <__aeabi_d2iz>
 80180f6:	4606      	mov	r6, r0
 80180f8:	f7e8 fa2c 	bl	8000554 <__aeabi_i2d>
 80180fc:	4602      	mov	r2, r0
 80180fe:	460b      	mov	r3, r1
 8018100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018104:	f7e8 f8d8 	bl	80002b8 <__aeabi_dsub>
 8018108:	3630      	adds	r6, #48	; 0x30
 801810a:	f805 6b01 	strb.w	r6, [r5], #1
 801810e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018112:	e9cd 0100 	strd	r0, r1, [sp]
 8018116:	f7e8 fcf9 	bl	8000b0c <__aeabi_dcmplt>
 801811a:	2800      	cmp	r0, #0
 801811c:	d163      	bne.n	80181e6 <_dtoa_r+0x5de>
 801811e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018122:	2000      	movs	r0, #0
 8018124:	4937      	ldr	r1, [pc, #220]	; (8018204 <_dtoa_r+0x5fc>)
 8018126:	f7e8 f8c7 	bl	80002b8 <__aeabi_dsub>
 801812a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801812e:	f7e8 fced 	bl	8000b0c <__aeabi_dcmplt>
 8018132:	2800      	cmp	r0, #0
 8018134:	f040 80b7 	bne.w	80182a6 <_dtoa_r+0x69e>
 8018138:	eba5 030b 	sub.w	r3, r5, fp
 801813c:	429f      	cmp	r7, r3
 801813e:	f77f af7c 	ble.w	801803a <_dtoa_r+0x432>
 8018142:	2200      	movs	r2, #0
 8018144:	4b30      	ldr	r3, [pc, #192]	; (8018208 <_dtoa_r+0x600>)
 8018146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801814a:	f7e8 fa6d 	bl	8000628 <__aeabi_dmul>
 801814e:	2200      	movs	r2, #0
 8018150:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018154:	4b2c      	ldr	r3, [pc, #176]	; (8018208 <_dtoa_r+0x600>)
 8018156:	e9dd 0100 	ldrd	r0, r1, [sp]
 801815a:	f7e8 fa65 	bl	8000628 <__aeabi_dmul>
 801815e:	e9cd 0100 	strd	r0, r1, [sp]
 8018162:	e7c4      	b.n	80180ee <_dtoa_r+0x4e6>
 8018164:	462a      	mov	r2, r5
 8018166:	4633      	mov	r3, r6
 8018168:	f7e8 fa5e 	bl	8000628 <__aeabi_dmul>
 801816c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018170:	eb0b 0507 	add.w	r5, fp, r7
 8018174:	465e      	mov	r6, fp
 8018176:	e9dd 0100 	ldrd	r0, r1, [sp]
 801817a:	f7e8 fd05 	bl	8000b88 <__aeabi_d2iz>
 801817e:	4607      	mov	r7, r0
 8018180:	f7e8 f9e8 	bl	8000554 <__aeabi_i2d>
 8018184:	3730      	adds	r7, #48	; 0x30
 8018186:	4602      	mov	r2, r0
 8018188:	460b      	mov	r3, r1
 801818a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801818e:	f7e8 f893 	bl	80002b8 <__aeabi_dsub>
 8018192:	f806 7b01 	strb.w	r7, [r6], #1
 8018196:	42ae      	cmp	r6, r5
 8018198:	e9cd 0100 	strd	r0, r1, [sp]
 801819c:	f04f 0200 	mov.w	r2, #0
 80181a0:	d126      	bne.n	80181f0 <_dtoa_r+0x5e8>
 80181a2:	4b1c      	ldr	r3, [pc, #112]	; (8018214 <_dtoa_r+0x60c>)
 80181a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80181a8:	f7e8 f888 	bl	80002bc <__adddf3>
 80181ac:	4602      	mov	r2, r0
 80181ae:	460b      	mov	r3, r1
 80181b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80181b4:	f7e8 fcc8 	bl	8000b48 <__aeabi_dcmpgt>
 80181b8:	2800      	cmp	r0, #0
 80181ba:	d174      	bne.n	80182a6 <_dtoa_r+0x69e>
 80181bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80181c0:	2000      	movs	r0, #0
 80181c2:	4914      	ldr	r1, [pc, #80]	; (8018214 <_dtoa_r+0x60c>)
 80181c4:	f7e8 f878 	bl	80002b8 <__aeabi_dsub>
 80181c8:	4602      	mov	r2, r0
 80181ca:	460b      	mov	r3, r1
 80181cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80181d0:	f7e8 fc9c 	bl	8000b0c <__aeabi_dcmplt>
 80181d4:	2800      	cmp	r0, #0
 80181d6:	f43f af30 	beq.w	801803a <_dtoa_r+0x432>
 80181da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80181de:	2b30      	cmp	r3, #48	; 0x30
 80181e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80181e4:	d002      	beq.n	80181ec <_dtoa_r+0x5e4>
 80181e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80181ea:	e04a      	b.n	8018282 <_dtoa_r+0x67a>
 80181ec:	4615      	mov	r5, r2
 80181ee:	e7f4      	b.n	80181da <_dtoa_r+0x5d2>
 80181f0:	4b05      	ldr	r3, [pc, #20]	; (8018208 <_dtoa_r+0x600>)
 80181f2:	f7e8 fa19 	bl	8000628 <__aeabi_dmul>
 80181f6:	e9cd 0100 	strd	r0, r1, [sp]
 80181fa:	e7bc      	b.n	8018176 <_dtoa_r+0x56e>
 80181fc:	0801aa28 	.word	0x0801aa28
 8018200:	0801aa00 	.word	0x0801aa00
 8018204:	3ff00000 	.word	0x3ff00000
 8018208:	40240000 	.word	0x40240000
 801820c:	401c0000 	.word	0x401c0000
 8018210:	40140000 	.word	0x40140000
 8018214:	3fe00000 	.word	0x3fe00000
 8018218:	e9dd 6700 	ldrd	r6, r7, [sp]
 801821c:	465d      	mov	r5, fp
 801821e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018222:	4630      	mov	r0, r6
 8018224:	4639      	mov	r1, r7
 8018226:	f7e8 fb29 	bl	800087c <__aeabi_ddiv>
 801822a:	f7e8 fcad 	bl	8000b88 <__aeabi_d2iz>
 801822e:	4680      	mov	r8, r0
 8018230:	f7e8 f990 	bl	8000554 <__aeabi_i2d>
 8018234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018238:	f7e8 f9f6 	bl	8000628 <__aeabi_dmul>
 801823c:	4602      	mov	r2, r0
 801823e:	460b      	mov	r3, r1
 8018240:	4630      	mov	r0, r6
 8018242:	4639      	mov	r1, r7
 8018244:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018248:	f7e8 f836 	bl	80002b8 <__aeabi_dsub>
 801824c:	f805 6b01 	strb.w	r6, [r5], #1
 8018250:	eba5 060b 	sub.w	r6, r5, fp
 8018254:	45b1      	cmp	r9, r6
 8018256:	4602      	mov	r2, r0
 8018258:	460b      	mov	r3, r1
 801825a:	d139      	bne.n	80182d0 <_dtoa_r+0x6c8>
 801825c:	f7e8 f82e 	bl	80002bc <__adddf3>
 8018260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018264:	4606      	mov	r6, r0
 8018266:	460f      	mov	r7, r1
 8018268:	f7e8 fc6e 	bl	8000b48 <__aeabi_dcmpgt>
 801826c:	b9c8      	cbnz	r0, 80182a2 <_dtoa_r+0x69a>
 801826e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018272:	4630      	mov	r0, r6
 8018274:	4639      	mov	r1, r7
 8018276:	f7e8 fc3f 	bl	8000af8 <__aeabi_dcmpeq>
 801827a:	b110      	cbz	r0, 8018282 <_dtoa_r+0x67a>
 801827c:	f018 0f01 	tst.w	r8, #1
 8018280:	d10f      	bne.n	80182a2 <_dtoa_r+0x69a>
 8018282:	9904      	ldr	r1, [sp, #16]
 8018284:	4620      	mov	r0, r4
 8018286:	f000 fe18 	bl	8018eba <_Bfree>
 801828a:	2300      	movs	r3, #0
 801828c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801828e:	702b      	strb	r3, [r5, #0]
 8018290:	f10a 0301 	add.w	r3, sl, #1
 8018294:	6013      	str	r3, [r2, #0]
 8018296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018298:	2b00      	cmp	r3, #0
 801829a:	f000 8241 	beq.w	8018720 <_dtoa_r+0xb18>
 801829e:	601d      	str	r5, [r3, #0]
 80182a0:	e23e      	b.n	8018720 <_dtoa_r+0xb18>
 80182a2:	f8cd a020 	str.w	sl, [sp, #32]
 80182a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80182aa:	2a39      	cmp	r2, #57	; 0x39
 80182ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80182b0:	d108      	bne.n	80182c4 <_dtoa_r+0x6bc>
 80182b2:	459b      	cmp	fp, r3
 80182b4:	d10a      	bne.n	80182cc <_dtoa_r+0x6c4>
 80182b6:	9b08      	ldr	r3, [sp, #32]
 80182b8:	3301      	adds	r3, #1
 80182ba:	9308      	str	r3, [sp, #32]
 80182bc:	2330      	movs	r3, #48	; 0x30
 80182be:	f88b 3000 	strb.w	r3, [fp]
 80182c2:	465b      	mov	r3, fp
 80182c4:	781a      	ldrb	r2, [r3, #0]
 80182c6:	3201      	adds	r2, #1
 80182c8:	701a      	strb	r2, [r3, #0]
 80182ca:	e78c      	b.n	80181e6 <_dtoa_r+0x5de>
 80182cc:	461d      	mov	r5, r3
 80182ce:	e7ea      	b.n	80182a6 <_dtoa_r+0x69e>
 80182d0:	2200      	movs	r2, #0
 80182d2:	4b9b      	ldr	r3, [pc, #620]	; (8018540 <_dtoa_r+0x938>)
 80182d4:	f7e8 f9a8 	bl	8000628 <__aeabi_dmul>
 80182d8:	2200      	movs	r2, #0
 80182da:	2300      	movs	r3, #0
 80182dc:	4606      	mov	r6, r0
 80182de:	460f      	mov	r7, r1
 80182e0:	f7e8 fc0a 	bl	8000af8 <__aeabi_dcmpeq>
 80182e4:	2800      	cmp	r0, #0
 80182e6:	d09a      	beq.n	801821e <_dtoa_r+0x616>
 80182e8:	e7cb      	b.n	8018282 <_dtoa_r+0x67a>
 80182ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80182ec:	2a00      	cmp	r2, #0
 80182ee:	f000 808b 	beq.w	8018408 <_dtoa_r+0x800>
 80182f2:	9a06      	ldr	r2, [sp, #24]
 80182f4:	2a01      	cmp	r2, #1
 80182f6:	dc6e      	bgt.n	80183d6 <_dtoa_r+0x7ce>
 80182f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80182fa:	2a00      	cmp	r2, #0
 80182fc:	d067      	beq.n	80183ce <_dtoa_r+0x7c6>
 80182fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018302:	9f07      	ldr	r7, [sp, #28]
 8018304:	9d05      	ldr	r5, [sp, #20]
 8018306:	9a05      	ldr	r2, [sp, #20]
 8018308:	2101      	movs	r1, #1
 801830a:	441a      	add	r2, r3
 801830c:	4620      	mov	r0, r4
 801830e:	9205      	str	r2, [sp, #20]
 8018310:	4498      	add	r8, r3
 8018312:	f000 feb0 	bl	8019076 <__i2b>
 8018316:	4606      	mov	r6, r0
 8018318:	2d00      	cmp	r5, #0
 801831a:	dd0c      	ble.n	8018336 <_dtoa_r+0x72e>
 801831c:	f1b8 0f00 	cmp.w	r8, #0
 8018320:	dd09      	ble.n	8018336 <_dtoa_r+0x72e>
 8018322:	4545      	cmp	r5, r8
 8018324:	9a05      	ldr	r2, [sp, #20]
 8018326:	462b      	mov	r3, r5
 8018328:	bfa8      	it	ge
 801832a:	4643      	movge	r3, r8
 801832c:	1ad2      	subs	r2, r2, r3
 801832e:	9205      	str	r2, [sp, #20]
 8018330:	1aed      	subs	r5, r5, r3
 8018332:	eba8 0803 	sub.w	r8, r8, r3
 8018336:	9b07      	ldr	r3, [sp, #28]
 8018338:	b1eb      	cbz	r3, 8018376 <_dtoa_r+0x76e>
 801833a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801833c:	2b00      	cmp	r3, #0
 801833e:	d067      	beq.n	8018410 <_dtoa_r+0x808>
 8018340:	b18f      	cbz	r7, 8018366 <_dtoa_r+0x75e>
 8018342:	4631      	mov	r1, r6
 8018344:	463a      	mov	r2, r7
 8018346:	4620      	mov	r0, r4
 8018348:	f000 ff34 	bl	80191b4 <__pow5mult>
 801834c:	9a04      	ldr	r2, [sp, #16]
 801834e:	4601      	mov	r1, r0
 8018350:	4606      	mov	r6, r0
 8018352:	4620      	mov	r0, r4
 8018354:	f000 fe98 	bl	8019088 <__multiply>
 8018358:	9904      	ldr	r1, [sp, #16]
 801835a:	9008      	str	r0, [sp, #32]
 801835c:	4620      	mov	r0, r4
 801835e:	f000 fdac 	bl	8018eba <_Bfree>
 8018362:	9b08      	ldr	r3, [sp, #32]
 8018364:	9304      	str	r3, [sp, #16]
 8018366:	9b07      	ldr	r3, [sp, #28]
 8018368:	1bda      	subs	r2, r3, r7
 801836a:	d004      	beq.n	8018376 <_dtoa_r+0x76e>
 801836c:	9904      	ldr	r1, [sp, #16]
 801836e:	4620      	mov	r0, r4
 8018370:	f000 ff20 	bl	80191b4 <__pow5mult>
 8018374:	9004      	str	r0, [sp, #16]
 8018376:	2101      	movs	r1, #1
 8018378:	4620      	mov	r0, r4
 801837a:	f000 fe7c 	bl	8019076 <__i2b>
 801837e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018380:	4607      	mov	r7, r0
 8018382:	2b00      	cmp	r3, #0
 8018384:	f000 81d0 	beq.w	8018728 <_dtoa_r+0xb20>
 8018388:	461a      	mov	r2, r3
 801838a:	4601      	mov	r1, r0
 801838c:	4620      	mov	r0, r4
 801838e:	f000 ff11 	bl	80191b4 <__pow5mult>
 8018392:	9b06      	ldr	r3, [sp, #24]
 8018394:	2b01      	cmp	r3, #1
 8018396:	4607      	mov	r7, r0
 8018398:	dc40      	bgt.n	801841c <_dtoa_r+0x814>
 801839a:	9b00      	ldr	r3, [sp, #0]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d139      	bne.n	8018414 <_dtoa_r+0x80c>
 80183a0:	9b01      	ldr	r3, [sp, #4]
 80183a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d136      	bne.n	8018418 <_dtoa_r+0x810>
 80183aa:	9b01      	ldr	r3, [sp, #4]
 80183ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80183b0:	0d1b      	lsrs	r3, r3, #20
 80183b2:	051b      	lsls	r3, r3, #20
 80183b4:	b12b      	cbz	r3, 80183c2 <_dtoa_r+0x7ba>
 80183b6:	9b05      	ldr	r3, [sp, #20]
 80183b8:	3301      	adds	r3, #1
 80183ba:	9305      	str	r3, [sp, #20]
 80183bc:	f108 0801 	add.w	r8, r8, #1
 80183c0:	2301      	movs	r3, #1
 80183c2:	9307      	str	r3, [sp, #28]
 80183c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d12a      	bne.n	8018420 <_dtoa_r+0x818>
 80183ca:	2001      	movs	r0, #1
 80183cc:	e030      	b.n	8018430 <_dtoa_r+0x828>
 80183ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80183d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80183d4:	e795      	b.n	8018302 <_dtoa_r+0x6fa>
 80183d6:	9b07      	ldr	r3, [sp, #28]
 80183d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80183dc:	42bb      	cmp	r3, r7
 80183de:	bfbf      	itttt	lt
 80183e0:	9b07      	ldrlt	r3, [sp, #28]
 80183e2:	9707      	strlt	r7, [sp, #28]
 80183e4:	1afa      	sublt	r2, r7, r3
 80183e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80183e8:	bfbb      	ittet	lt
 80183ea:	189b      	addlt	r3, r3, r2
 80183ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80183ee:	1bdf      	subge	r7, r3, r7
 80183f0:	2700      	movlt	r7, #0
 80183f2:	f1b9 0f00 	cmp.w	r9, #0
 80183f6:	bfb5      	itete	lt
 80183f8:	9b05      	ldrlt	r3, [sp, #20]
 80183fa:	9d05      	ldrge	r5, [sp, #20]
 80183fc:	eba3 0509 	sublt.w	r5, r3, r9
 8018400:	464b      	movge	r3, r9
 8018402:	bfb8      	it	lt
 8018404:	2300      	movlt	r3, #0
 8018406:	e77e      	b.n	8018306 <_dtoa_r+0x6fe>
 8018408:	9f07      	ldr	r7, [sp, #28]
 801840a:	9d05      	ldr	r5, [sp, #20]
 801840c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801840e:	e783      	b.n	8018318 <_dtoa_r+0x710>
 8018410:	9a07      	ldr	r2, [sp, #28]
 8018412:	e7ab      	b.n	801836c <_dtoa_r+0x764>
 8018414:	2300      	movs	r3, #0
 8018416:	e7d4      	b.n	80183c2 <_dtoa_r+0x7ba>
 8018418:	9b00      	ldr	r3, [sp, #0]
 801841a:	e7d2      	b.n	80183c2 <_dtoa_r+0x7ba>
 801841c:	2300      	movs	r3, #0
 801841e:	9307      	str	r3, [sp, #28]
 8018420:	693b      	ldr	r3, [r7, #16]
 8018422:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8018426:	6918      	ldr	r0, [r3, #16]
 8018428:	f000 fdd7 	bl	8018fda <__hi0bits>
 801842c:	f1c0 0020 	rsb	r0, r0, #32
 8018430:	4440      	add	r0, r8
 8018432:	f010 001f 	ands.w	r0, r0, #31
 8018436:	d047      	beq.n	80184c8 <_dtoa_r+0x8c0>
 8018438:	f1c0 0320 	rsb	r3, r0, #32
 801843c:	2b04      	cmp	r3, #4
 801843e:	dd3b      	ble.n	80184b8 <_dtoa_r+0x8b0>
 8018440:	9b05      	ldr	r3, [sp, #20]
 8018442:	f1c0 001c 	rsb	r0, r0, #28
 8018446:	4403      	add	r3, r0
 8018448:	9305      	str	r3, [sp, #20]
 801844a:	4405      	add	r5, r0
 801844c:	4480      	add	r8, r0
 801844e:	9b05      	ldr	r3, [sp, #20]
 8018450:	2b00      	cmp	r3, #0
 8018452:	dd05      	ble.n	8018460 <_dtoa_r+0x858>
 8018454:	461a      	mov	r2, r3
 8018456:	9904      	ldr	r1, [sp, #16]
 8018458:	4620      	mov	r0, r4
 801845a:	f000 fef9 	bl	8019250 <__lshift>
 801845e:	9004      	str	r0, [sp, #16]
 8018460:	f1b8 0f00 	cmp.w	r8, #0
 8018464:	dd05      	ble.n	8018472 <_dtoa_r+0x86a>
 8018466:	4639      	mov	r1, r7
 8018468:	4642      	mov	r2, r8
 801846a:	4620      	mov	r0, r4
 801846c:	f000 fef0 	bl	8019250 <__lshift>
 8018470:	4607      	mov	r7, r0
 8018472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018474:	b353      	cbz	r3, 80184cc <_dtoa_r+0x8c4>
 8018476:	4639      	mov	r1, r7
 8018478:	9804      	ldr	r0, [sp, #16]
 801847a:	f000 ff3d 	bl	80192f8 <__mcmp>
 801847e:	2800      	cmp	r0, #0
 8018480:	da24      	bge.n	80184cc <_dtoa_r+0x8c4>
 8018482:	2300      	movs	r3, #0
 8018484:	220a      	movs	r2, #10
 8018486:	9904      	ldr	r1, [sp, #16]
 8018488:	4620      	mov	r0, r4
 801848a:	f000 fd2d 	bl	8018ee8 <__multadd>
 801848e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018490:	9004      	str	r0, [sp, #16]
 8018492:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018496:	2b00      	cmp	r3, #0
 8018498:	f000 814d 	beq.w	8018736 <_dtoa_r+0xb2e>
 801849c:	2300      	movs	r3, #0
 801849e:	4631      	mov	r1, r6
 80184a0:	220a      	movs	r2, #10
 80184a2:	4620      	mov	r0, r4
 80184a4:	f000 fd20 	bl	8018ee8 <__multadd>
 80184a8:	9b02      	ldr	r3, [sp, #8]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	4606      	mov	r6, r0
 80184ae:	dc4f      	bgt.n	8018550 <_dtoa_r+0x948>
 80184b0:	9b06      	ldr	r3, [sp, #24]
 80184b2:	2b02      	cmp	r3, #2
 80184b4:	dd4c      	ble.n	8018550 <_dtoa_r+0x948>
 80184b6:	e011      	b.n	80184dc <_dtoa_r+0x8d4>
 80184b8:	d0c9      	beq.n	801844e <_dtoa_r+0x846>
 80184ba:	9a05      	ldr	r2, [sp, #20]
 80184bc:	331c      	adds	r3, #28
 80184be:	441a      	add	r2, r3
 80184c0:	9205      	str	r2, [sp, #20]
 80184c2:	441d      	add	r5, r3
 80184c4:	4498      	add	r8, r3
 80184c6:	e7c2      	b.n	801844e <_dtoa_r+0x846>
 80184c8:	4603      	mov	r3, r0
 80184ca:	e7f6      	b.n	80184ba <_dtoa_r+0x8b2>
 80184cc:	f1b9 0f00 	cmp.w	r9, #0
 80184d0:	dc38      	bgt.n	8018544 <_dtoa_r+0x93c>
 80184d2:	9b06      	ldr	r3, [sp, #24]
 80184d4:	2b02      	cmp	r3, #2
 80184d6:	dd35      	ble.n	8018544 <_dtoa_r+0x93c>
 80184d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80184dc:	9b02      	ldr	r3, [sp, #8]
 80184de:	b963      	cbnz	r3, 80184fa <_dtoa_r+0x8f2>
 80184e0:	4639      	mov	r1, r7
 80184e2:	2205      	movs	r2, #5
 80184e4:	4620      	mov	r0, r4
 80184e6:	f000 fcff 	bl	8018ee8 <__multadd>
 80184ea:	4601      	mov	r1, r0
 80184ec:	4607      	mov	r7, r0
 80184ee:	9804      	ldr	r0, [sp, #16]
 80184f0:	f000 ff02 	bl	80192f8 <__mcmp>
 80184f4:	2800      	cmp	r0, #0
 80184f6:	f73f adcc 	bgt.w	8018092 <_dtoa_r+0x48a>
 80184fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184fc:	465d      	mov	r5, fp
 80184fe:	ea6f 0a03 	mvn.w	sl, r3
 8018502:	f04f 0900 	mov.w	r9, #0
 8018506:	4639      	mov	r1, r7
 8018508:	4620      	mov	r0, r4
 801850a:	f000 fcd6 	bl	8018eba <_Bfree>
 801850e:	2e00      	cmp	r6, #0
 8018510:	f43f aeb7 	beq.w	8018282 <_dtoa_r+0x67a>
 8018514:	f1b9 0f00 	cmp.w	r9, #0
 8018518:	d005      	beq.n	8018526 <_dtoa_r+0x91e>
 801851a:	45b1      	cmp	r9, r6
 801851c:	d003      	beq.n	8018526 <_dtoa_r+0x91e>
 801851e:	4649      	mov	r1, r9
 8018520:	4620      	mov	r0, r4
 8018522:	f000 fcca 	bl	8018eba <_Bfree>
 8018526:	4631      	mov	r1, r6
 8018528:	4620      	mov	r0, r4
 801852a:	f000 fcc6 	bl	8018eba <_Bfree>
 801852e:	e6a8      	b.n	8018282 <_dtoa_r+0x67a>
 8018530:	2700      	movs	r7, #0
 8018532:	463e      	mov	r6, r7
 8018534:	e7e1      	b.n	80184fa <_dtoa_r+0x8f2>
 8018536:	f8dd a020 	ldr.w	sl, [sp, #32]
 801853a:	463e      	mov	r6, r7
 801853c:	e5a9      	b.n	8018092 <_dtoa_r+0x48a>
 801853e:	bf00      	nop
 8018540:	40240000 	.word	0x40240000
 8018544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018546:	f8cd 9008 	str.w	r9, [sp, #8]
 801854a:	2b00      	cmp	r3, #0
 801854c:	f000 80fa 	beq.w	8018744 <_dtoa_r+0xb3c>
 8018550:	2d00      	cmp	r5, #0
 8018552:	dd05      	ble.n	8018560 <_dtoa_r+0x958>
 8018554:	4631      	mov	r1, r6
 8018556:	462a      	mov	r2, r5
 8018558:	4620      	mov	r0, r4
 801855a:	f000 fe79 	bl	8019250 <__lshift>
 801855e:	4606      	mov	r6, r0
 8018560:	9b07      	ldr	r3, [sp, #28]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d04c      	beq.n	8018600 <_dtoa_r+0x9f8>
 8018566:	6871      	ldr	r1, [r6, #4]
 8018568:	4620      	mov	r0, r4
 801856a:	f000 fc72 	bl	8018e52 <_Balloc>
 801856e:	6932      	ldr	r2, [r6, #16]
 8018570:	3202      	adds	r2, #2
 8018572:	4605      	mov	r5, r0
 8018574:	0092      	lsls	r2, r2, #2
 8018576:	f106 010c 	add.w	r1, r6, #12
 801857a:	300c      	adds	r0, #12
 801857c:	f000 fc5e 	bl	8018e3c <memcpy>
 8018580:	2201      	movs	r2, #1
 8018582:	4629      	mov	r1, r5
 8018584:	4620      	mov	r0, r4
 8018586:	f000 fe63 	bl	8019250 <__lshift>
 801858a:	9b00      	ldr	r3, [sp, #0]
 801858c:	f8cd b014 	str.w	fp, [sp, #20]
 8018590:	f003 0301 	and.w	r3, r3, #1
 8018594:	46b1      	mov	r9, r6
 8018596:	9307      	str	r3, [sp, #28]
 8018598:	4606      	mov	r6, r0
 801859a:	4639      	mov	r1, r7
 801859c:	9804      	ldr	r0, [sp, #16]
 801859e:	f7ff faa5 	bl	8017aec <quorem>
 80185a2:	4649      	mov	r1, r9
 80185a4:	4605      	mov	r5, r0
 80185a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80185aa:	9804      	ldr	r0, [sp, #16]
 80185ac:	f000 fea4 	bl	80192f8 <__mcmp>
 80185b0:	4632      	mov	r2, r6
 80185b2:	9000      	str	r0, [sp, #0]
 80185b4:	4639      	mov	r1, r7
 80185b6:	4620      	mov	r0, r4
 80185b8:	f000 feb8 	bl	801932c <__mdiff>
 80185bc:	68c3      	ldr	r3, [r0, #12]
 80185be:	4602      	mov	r2, r0
 80185c0:	bb03      	cbnz	r3, 8018604 <_dtoa_r+0x9fc>
 80185c2:	4601      	mov	r1, r0
 80185c4:	9008      	str	r0, [sp, #32]
 80185c6:	9804      	ldr	r0, [sp, #16]
 80185c8:	f000 fe96 	bl	80192f8 <__mcmp>
 80185cc:	9a08      	ldr	r2, [sp, #32]
 80185ce:	4603      	mov	r3, r0
 80185d0:	4611      	mov	r1, r2
 80185d2:	4620      	mov	r0, r4
 80185d4:	9308      	str	r3, [sp, #32]
 80185d6:	f000 fc70 	bl	8018eba <_Bfree>
 80185da:	9b08      	ldr	r3, [sp, #32]
 80185dc:	b9a3      	cbnz	r3, 8018608 <_dtoa_r+0xa00>
 80185de:	9a06      	ldr	r2, [sp, #24]
 80185e0:	b992      	cbnz	r2, 8018608 <_dtoa_r+0xa00>
 80185e2:	9a07      	ldr	r2, [sp, #28]
 80185e4:	b982      	cbnz	r2, 8018608 <_dtoa_r+0xa00>
 80185e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80185ea:	d029      	beq.n	8018640 <_dtoa_r+0xa38>
 80185ec:	9b00      	ldr	r3, [sp, #0]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	dd01      	ble.n	80185f6 <_dtoa_r+0x9ee>
 80185f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80185f6:	9b05      	ldr	r3, [sp, #20]
 80185f8:	1c5d      	adds	r5, r3, #1
 80185fa:	f883 8000 	strb.w	r8, [r3]
 80185fe:	e782      	b.n	8018506 <_dtoa_r+0x8fe>
 8018600:	4630      	mov	r0, r6
 8018602:	e7c2      	b.n	801858a <_dtoa_r+0x982>
 8018604:	2301      	movs	r3, #1
 8018606:	e7e3      	b.n	80185d0 <_dtoa_r+0x9c8>
 8018608:	9a00      	ldr	r2, [sp, #0]
 801860a:	2a00      	cmp	r2, #0
 801860c:	db04      	blt.n	8018618 <_dtoa_r+0xa10>
 801860e:	d125      	bne.n	801865c <_dtoa_r+0xa54>
 8018610:	9a06      	ldr	r2, [sp, #24]
 8018612:	bb1a      	cbnz	r2, 801865c <_dtoa_r+0xa54>
 8018614:	9a07      	ldr	r2, [sp, #28]
 8018616:	bb0a      	cbnz	r2, 801865c <_dtoa_r+0xa54>
 8018618:	2b00      	cmp	r3, #0
 801861a:	ddec      	ble.n	80185f6 <_dtoa_r+0x9ee>
 801861c:	2201      	movs	r2, #1
 801861e:	9904      	ldr	r1, [sp, #16]
 8018620:	4620      	mov	r0, r4
 8018622:	f000 fe15 	bl	8019250 <__lshift>
 8018626:	4639      	mov	r1, r7
 8018628:	9004      	str	r0, [sp, #16]
 801862a:	f000 fe65 	bl	80192f8 <__mcmp>
 801862e:	2800      	cmp	r0, #0
 8018630:	dc03      	bgt.n	801863a <_dtoa_r+0xa32>
 8018632:	d1e0      	bne.n	80185f6 <_dtoa_r+0x9ee>
 8018634:	f018 0f01 	tst.w	r8, #1
 8018638:	d0dd      	beq.n	80185f6 <_dtoa_r+0x9ee>
 801863a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801863e:	d1d8      	bne.n	80185f2 <_dtoa_r+0x9ea>
 8018640:	9b05      	ldr	r3, [sp, #20]
 8018642:	9a05      	ldr	r2, [sp, #20]
 8018644:	1c5d      	adds	r5, r3, #1
 8018646:	2339      	movs	r3, #57	; 0x39
 8018648:	7013      	strb	r3, [r2, #0]
 801864a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801864e:	2b39      	cmp	r3, #57	; 0x39
 8018650:	f105 32ff 	add.w	r2, r5, #4294967295
 8018654:	d04f      	beq.n	80186f6 <_dtoa_r+0xaee>
 8018656:	3301      	adds	r3, #1
 8018658:	7013      	strb	r3, [r2, #0]
 801865a:	e754      	b.n	8018506 <_dtoa_r+0x8fe>
 801865c:	9a05      	ldr	r2, [sp, #20]
 801865e:	2b00      	cmp	r3, #0
 8018660:	f102 0501 	add.w	r5, r2, #1
 8018664:	dd06      	ble.n	8018674 <_dtoa_r+0xa6c>
 8018666:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801866a:	d0e9      	beq.n	8018640 <_dtoa_r+0xa38>
 801866c:	f108 0801 	add.w	r8, r8, #1
 8018670:	9b05      	ldr	r3, [sp, #20]
 8018672:	e7c2      	b.n	80185fa <_dtoa_r+0x9f2>
 8018674:	9a02      	ldr	r2, [sp, #8]
 8018676:	f805 8c01 	strb.w	r8, [r5, #-1]
 801867a:	eba5 030b 	sub.w	r3, r5, fp
 801867e:	4293      	cmp	r3, r2
 8018680:	d021      	beq.n	80186c6 <_dtoa_r+0xabe>
 8018682:	2300      	movs	r3, #0
 8018684:	220a      	movs	r2, #10
 8018686:	9904      	ldr	r1, [sp, #16]
 8018688:	4620      	mov	r0, r4
 801868a:	f000 fc2d 	bl	8018ee8 <__multadd>
 801868e:	45b1      	cmp	r9, r6
 8018690:	9004      	str	r0, [sp, #16]
 8018692:	f04f 0300 	mov.w	r3, #0
 8018696:	f04f 020a 	mov.w	r2, #10
 801869a:	4649      	mov	r1, r9
 801869c:	4620      	mov	r0, r4
 801869e:	d105      	bne.n	80186ac <_dtoa_r+0xaa4>
 80186a0:	f000 fc22 	bl	8018ee8 <__multadd>
 80186a4:	4681      	mov	r9, r0
 80186a6:	4606      	mov	r6, r0
 80186a8:	9505      	str	r5, [sp, #20]
 80186aa:	e776      	b.n	801859a <_dtoa_r+0x992>
 80186ac:	f000 fc1c 	bl	8018ee8 <__multadd>
 80186b0:	4631      	mov	r1, r6
 80186b2:	4681      	mov	r9, r0
 80186b4:	2300      	movs	r3, #0
 80186b6:	220a      	movs	r2, #10
 80186b8:	4620      	mov	r0, r4
 80186ba:	f000 fc15 	bl	8018ee8 <__multadd>
 80186be:	4606      	mov	r6, r0
 80186c0:	e7f2      	b.n	80186a8 <_dtoa_r+0xaa0>
 80186c2:	f04f 0900 	mov.w	r9, #0
 80186c6:	2201      	movs	r2, #1
 80186c8:	9904      	ldr	r1, [sp, #16]
 80186ca:	4620      	mov	r0, r4
 80186cc:	f000 fdc0 	bl	8019250 <__lshift>
 80186d0:	4639      	mov	r1, r7
 80186d2:	9004      	str	r0, [sp, #16]
 80186d4:	f000 fe10 	bl	80192f8 <__mcmp>
 80186d8:	2800      	cmp	r0, #0
 80186da:	dcb6      	bgt.n	801864a <_dtoa_r+0xa42>
 80186dc:	d102      	bne.n	80186e4 <_dtoa_r+0xadc>
 80186de:	f018 0f01 	tst.w	r8, #1
 80186e2:	d1b2      	bne.n	801864a <_dtoa_r+0xa42>
 80186e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80186e8:	2b30      	cmp	r3, #48	; 0x30
 80186ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80186ee:	f47f af0a 	bne.w	8018506 <_dtoa_r+0x8fe>
 80186f2:	4615      	mov	r5, r2
 80186f4:	e7f6      	b.n	80186e4 <_dtoa_r+0xadc>
 80186f6:	4593      	cmp	fp, r2
 80186f8:	d105      	bne.n	8018706 <_dtoa_r+0xafe>
 80186fa:	2331      	movs	r3, #49	; 0x31
 80186fc:	f10a 0a01 	add.w	sl, sl, #1
 8018700:	f88b 3000 	strb.w	r3, [fp]
 8018704:	e6ff      	b.n	8018506 <_dtoa_r+0x8fe>
 8018706:	4615      	mov	r5, r2
 8018708:	e79f      	b.n	801864a <_dtoa_r+0xa42>
 801870a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018770 <_dtoa_r+0xb68>
 801870e:	e007      	b.n	8018720 <_dtoa_r+0xb18>
 8018710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018712:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018774 <_dtoa_r+0xb6c>
 8018716:	b11b      	cbz	r3, 8018720 <_dtoa_r+0xb18>
 8018718:	f10b 0308 	add.w	r3, fp, #8
 801871c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801871e:	6013      	str	r3, [r2, #0]
 8018720:	4658      	mov	r0, fp
 8018722:	b017      	add	sp, #92	; 0x5c
 8018724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018728:	9b06      	ldr	r3, [sp, #24]
 801872a:	2b01      	cmp	r3, #1
 801872c:	f77f ae35 	ble.w	801839a <_dtoa_r+0x792>
 8018730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018732:	9307      	str	r3, [sp, #28]
 8018734:	e649      	b.n	80183ca <_dtoa_r+0x7c2>
 8018736:	9b02      	ldr	r3, [sp, #8]
 8018738:	2b00      	cmp	r3, #0
 801873a:	dc03      	bgt.n	8018744 <_dtoa_r+0xb3c>
 801873c:	9b06      	ldr	r3, [sp, #24]
 801873e:	2b02      	cmp	r3, #2
 8018740:	f73f aecc 	bgt.w	80184dc <_dtoa_r+0x8d4>
 8018744:	465d      	mov	r5, fp
 8018746:	4639      	mov	r1, r7
 8018748:	9804      	ldr	r0, [sp, #16]
 801874a:	f7ff f9cf 	bl	8017aec <quorem>
 801874e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018752:	f805 8b01 	strb.w	r8, [r5], #1
 8018756:	9a02      	ldr	r2, [sp, #8]
 8018758:	eba5 030b 	sub.w	r3, r5, fp
 801875c:	429a      	cmp	r2, r3
 801875e:	ddb0      	ble.n	80186c2 <_dtoa_r+0xaba>
 8018760:	2300      	movs	r3, #0
 8018762:	220a      	movs	r2, #10
 8018764:	9904      	ldr	r1, [sp, #16]
 8018766:	4620      	mov	r0, r4
 8018768:	f000 fbbe 	bl	8018ee8 <__multadd>
 801876c:	9004      	str	r0, [sp, #16]
 801876e:	e7ea      	b.n	8018746 <_dtoa_r+0xb3e>
 8018770:	0801ab23 	.word	0x0801ab23
 8018774:	0801a9e8 	.word	0x0801a9e8

08018778 <rshift>:
 8018778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801877a:	6906      	ldr	r6, [r0, #16]
 801877c:	114b      	asrs	r3, r1, #5
 801877e:	429e      	cmp	r6, r3
 8018780:	f100 0414 	add.w	r4, r0, #20
 8018784:	dd30      	ble.n	80187e8 <rshift+0x70>
 8018786:	f011 011f 	ands.w	r1, r1, #31
 801878a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801878e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018792:	d108      	bne.n	80187a6 <rshift+0x2e>
 8018794:	4621      	mov	r1, r4
 8018796:	42b2      	cmp	r2, r6
 8018798:	460b      	mov	r3, r1
 801879a:	d211      	bcs.n	80187c0 <rshift+0x48>
 801879c:	f852 3b04 	ldr.w	r3, [r2], #4
 80187a0:	f841 3b04 	str.w	r3, [r1], #4
 80187a4:	e7f7      	b.n	8018796 <rshift+0x1e>
 80187a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80187aa:	f1c1 0c20 	rsb	ip, r1, #32
 80187ae:	40cd      	lsrs	r5, r1
 80187b0:	3204      	adds	r2, #4
 80187b2:	4623      	mov	r3, r4
 80187b4:	42b2      	cmp	r2, r6
 80187b6:	4617      	mov	r7, r2
 80187b8:	d30c      	bcc.n	80187d4 <rshift+0x5c>
 80187ba:	601d      	str	r5, [r3, #0]
 80187bc:	b105      	cbz	r5, 80187c0 <rshift+0x48>
 80187be:	3304      	adds	r3, #4
 80187c0:	1b1a      	subs	r2, r3, r4
 80187c2:	42a3      	cmp	r3, r4
 80187c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80187c8:	bf08      	it	eq
 80187ca:	2300      	moveq	r3, #0
 80187cc:	6102      	str	r2, [r0, #16]
 80187ce:	bf08      	it	eq
 80187d0:	6143      	streq	r3, [r0, #20]
 80187d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187d4:	683f      	ldr	r7, [r7, #0]
 80187d6:	fa07 f70c 	lsl.w	r7, r7, ip
 80187da:	433d      	orrs	r5, r7
 80187dc:	f843 5b04 	str.w	r5, [r3], #4
 80187e0:	f852 5b04 	ldr.w	r5, [r2], #4
 80187e4:	40cd      	lsrs	r5, r1
 80187e6:	e7e5      	b.n	80187b4 <rshift+0x3c>
 80187e8:	4623      	mov	r3, r4
 80187ea:	e7e9      	b.n	80187c0 <rshift+0x48>

080187ec <__hexdig_fun>:
 80187ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80187f0:	2b09      	cmp	r3, #9
 80187f2:	d802      	bhi.n	80187fa <__hexdig_fun+0xe>
 80187f4:	3820      	subs	r0, #32
 80187f6:	b2c0      	uxtb	r0, r0
 80187f8:	4770      	bx	lr
 80187fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80187fe:	2b05      	cmp	r3, #5
 8018800:	d801      	bhi.n	8018806 <__hexdig_fun+0x1a>
 8018802:	3847      	subs	r0, #71	; 0x47
 8018804:	e7f7      	b.n	80187f6 <__hexdig_fun+0xa>
 8018806:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801880a:	2b05      	cmp	r3, #5
 801880c:	d801      	bhi.n	8018812 <__hexdig_fun+0x26>
 801880e:	3827      	subs	r0, #39	; 0x27
 8018810:	e7f1      	b.n	80187f6 <__hexdig_fun+0xa>
 8018812:	2000      	movs	r0, #0
 8018814:	4770      	bx	lr

08018816 <__gethex>:
 8018816:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801881a:	b08b      	sub	sp, #44	; 0x2c
 801881c:	468a      	mov	sl, r1
 801881e:	9002      	str	r0, [sp, #8]
 8018820:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018822:	9306      	str	r3, [sp, #24]
 8018824:	4690      	mov	r8, r2
 8018826:	f000 fadf 	bl	8018de8 <__localeconv_l>
 801882a:	6803      	ldr	r3, [r0, #0]
 801882c:	9303      	str	r3, [sp, #12]
 801882e:	4618      	mov	r0, r3
 8018830:	f7e7 fce6 	bl	8000200 <strlen>
 8018834:	9b03      	ldr	r3, [sp, #12]
 8018836:	9001      	str	r0, [sp, #4]
 8018838:	4403      	add	r3, r0
 801883a:	f04f 0b00 	mov.w	fp, #0
 801883e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018842:	9307      	str	r3, [sp, #28]
 8018844:	f8da 3000 	ldr.w	r3, [sl]
 8018848:	3302      	adds	r3, #2
 801884a:	461f      	mov	r7, r3
 801884c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018850:	2830      	cmp	r0, #48	; 0x30
 8018852:	d06c      	beq.n	801892e <__gethex+0x118>
 8018854:	f7ff ffca 	bl	80187ec <__hexdig_fun>
 8018858:	4604      	mov	r4, r0
 801885a:	2800      	cmp	r0, #0
 801885c:	d16a      	bne.n	8018934 <__gethex+0x11e>
 801885e:	9a01      	ldr	r2, [sp, #4]
 8018860:	9903      	ldr	r1, [sp, #12]
 8018862:	4638      	mov	r0, r7
 8018864:	f001 fc40 	bl	801a0e8 <strncmp>
 8018868:	2800      	cmp	r0, #0
 801886a:	d166      	bne.n	801893a <__gethex+0x124>
 801886c:	9b01      	ldr	r3, [sp, #4]
 801886e:	5cf8      	ldrb	r0, [r7, r3]
 8018870:	18fe      	adds	r6, r7, r3
 8018872:	f7ff ffbb 	bl	80187ec <__hexdig_fun>
 8018876:	2800      	cmp	r0, #0
 8018878:	d062      	beq.n	8018940 <__gethex+0x12a>
 801887a:	4633      	mov	r3, r6
 801887c:	7818      	ldrb	r0, [r3, #0]
 801887e:	2830      	cmp	r0, #48	; 0x30
 8018880:	461f      	mov	r7, r3
 8018882:	f103 0301 	add.w	r3, r3, #1
 8018886:	d0f9      	beq.n	801887c <__gethex+0x66>
 8018888:	f7ff ffb0 	bl	80187ec <__hexdig_fun>
 801888c:	fab0 f580 	clz	r5, r0
 8018890:	096d      	lsrs	r5, r5, #5
 8018892:	4634      	mov	r4, r6
 8018894:	f04f 0b01 	mov.w	fp, #1
 8018898:	463a      	mov	r2, r7
 801889a:	4616      	mov	r6, r2
 801889c:	3201      	adds	r2, #1
 801889e:	7830      	ldrb	r0, [r6, #0]
 80188a0:	f7ff ffa4 	bl	80187ec <__hexdig_fun>
 80188a4:	2800      	cmp	r0, #0
 80188a6:	d1f8      	bne.n	801889a <__gethex+0x84>
 80188a8:	9a01      	ldr	r2, [sp, #4]
 80188aa:	9903      	ldr	r1, [sp, #12]
 80188ac:	4630      	mov	r0, r6
 80188ae:	f001 fc1b 	bl	801a0e8 <strncmp>
 80188b2:	b950      	cbnz	r0, 80188ca <__gethex+0xb4>
 80188b4:	b954      	cbnz	r4, 80188cc <__gethex+0xb6>
 80188b6:	9b01      	ldr	r3, [sp, #4]
 80188b8:	18f4      	adds	r4, r6, r3
 80188ba:	4622      	mov	r2, r4
 80188bc:	4616      	mov	r6, r2
 80188be:	3201      	adds	r2, #1
 80188c0:	7830      	ldrb	r0, [r6, #0]
 80188c2:	f7ff ff93 	bl	80187ec <__hexdig_fun>
 80188c6:	2800      	cmp	r0, #0
 80188c8:	d1f8      	bne.n	80188bc <__gethex+0xa6>
 80188ca:	b10c      	cbz	r4, 80188d0 <__gethex+0xba>
 80188cc:	1ba4      	subs	r4, r4, r6
 80188ce:	00a4      	lsls	r4, r4, #2
 80188d0:	7833      	ldrb	r3, [r6, #0]
 80188d2:	2b50      	cmp	r3, #80	; 0x50
 80188d4:	d001      	beq.n	80188da <__gethex+0xc4>
 80188d6:	2b70      	cmp	r3, #112	; 0x70
 80188d8:	d140      	bne.n	801895c <__gethex+0x146>
 80188da:	7873      	ldrb	r3, [r6, #1]
 80188dc:	2b2b      	cmp	r3, #43	; 0x2b
 80188de:	d031      	beq.n	8018944 <__gethex+0x12e>
 80188e0:	2b2d      	cmp	r3, #45	; 0x2d
 80188e2:	d033      	beq.n	801894c <__gethex+0x136>
 80188e4:	1c71      	adds	r1, r6, #1
 80188e6:	f04f 0900 	mov.w	r9, #0
 80188ea:	7808      	ldrb	r0, [r1, #0]
 80188ec:	f7ff ff7e 	bl	80187ec <__hexdig_fun>
 80188f0:	1e43      	subs	r3, r0, #1
 80188f2:	b2db      	uxtb	r3, r3
 80188f4:	2b18      	cmp	r3, #24
 80188f6:	d831      	bhi.n	801895c <__gethex+0x146>
 80188f8:	f1a0 0210 	sub.w	r2, r0, #16
 80188fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018900:	f7ff ff74 	bl	80187ec <__hexdig_fun>
 8018904:	1e43      	subs	r3, r0, #1
 8018906:	b2db      	uxtb	r3, r3
 8018908:	2b18      	cmp	r3, #24
 801890a:	d922      	bls.n	8018952 <__gethex+0x13c>
 801890c:	f1b9 0f00 	cmp.w	r9, #0
 8018910:	d000      	beq.n	8018914 <__gethex+0xfe>
 8018912:	4252      	negs	r2, r2
 8018914:	4414      	add	r4, r2
 8018916:	f8ca 1000 	str.w	r1, [sl]
 801891a:	b30d      	cbz	r5, 8018960 <__gethex+0x14a>
 801891c:	f1bb 0f00 	cmp.w	fp, #0
 8018920:	bf0c      	ite	eq
 8018922:	2706      	moveq	r7, #6
 8018924:	2700      	movne	r7, #0
 8018926:	4638      	mov	r0, r7
 8018928:	b00b      	add	sp, #44	; 0x2c
 801892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801892e:	f10b 0b01 	add.w	fp, fp, #1
 8018932:	e78a      	b.n	801884a <__gethex+0x34>
 8018934:	2500      	movs	r5, #0
 8018936:	462c      	mov	r4, r5
 8018938:	e7ae      	b.n	8018898 <__gethex+0x82>
 801893a:	463e      	mov	r6, r7
 801893c:	2501      	movs	r5, #1
 801893e:	e7c7      	b.n	80188d0 <__gethex+0xba>
 8018940:	4604      	mov	r4, r0
 8018942:	e7fb      	b.n	801893c <__gethex+0x126>
 8018944:	f04f 0900 	mov.w	r9, #0
 8018948:	1cb1      	adds	r1, r6, #2
 801894a:	e7ce      	b.n	80188ea <__gethex+0xd4>
 801894c:	f04f 0901 	mov.w	r9, #1
 8018950:	e7fa      	b.n	8018948 <__gethex+0x132>
 8018952:	230a      	movs	r3, #10
 8018954:	fb03 0202 	mla	r2, r3, r2, r0
 8018958:	3a10      	subs	r2, #16
 801895a:	e7cf      	b.n	80188fc <__gethex+0xe6>
 801895c:	4631      	mov	r1, r6
 801895e:	e7da      	b.n	8018916 <__gethex+0x100>
 8018960:	1bf3      	subs	r3, r6, r7
 8018962:	3b01      	subs	r3, #1
 8018964:	4629      	mov	r1, r5
 8018966:	2b07      	cmp	r3, #7
 8018968:	dc49      	bgt.n	80189fe <__gethex+0x1e8>
 801896a:	9802      	ldr	r0, [sp, #8]
 801896c:	f000 fa71 	bl	8018e52 <_Balloc>
 8018970:	9b01      	ldr	r3, [sp, #4]
 8018972:	f100 0914 	add.w	r9, r0, #20
 8018976:	f04f 0b00 	mov.w	fp, #0
 801897a:	f1c3 0301 	rsb	r3, r3, #1
 801897e:	4605      	mov	r5, r0
 8018980:	f8cd 9010 	str.w	r9, [sp, #16]
 8018984:	46da      	mov	sl, fp
 8018986:	9308      	str	r3, [sp, #32]
 8018988:	42b7      	cmp	r7, r6
 801898a:	d33b      	bcc.n	8018a04 <__gethex+0x1ee>
 801898c:	9804      	ldr	r0, [sp, #16]
 801898e:	f840 ab04 	str.w	sl, [r0], #4
 8018992:	eba0 0009 	sub.w	r0, r0, r9
 8018996:	1080      	asrs	r0, r0, #2
 8018998:	6128      	str	r0, [r5, #16]
 801899a:	0147      	lsls	r7, r0, #5
 801899c:	4650      	mov	r0, sl
 801899e:	f000 fb1c 	bl	8018fda <__hi0bits>
 80189a2:	f8d8 6000 	ldr.w	r6, [r8]
 80189a6:	1a3f      	subs	r7, r7, r0
 80189a8:	42b7      	cmp	r7, r6
 80189aa:	dd64      	ble.n	8018a76 <__gethex+0x260>
 80189ac:	1bbf      	subs	r7, r7, r6
 80189ae:	4639      	mov	r1, r7
 80189b0:	4628      	mov	r0, r5
 80189b2:	f000 fe2b 	bl	801960c <__any_on>
 80189b6:	4682      	mov	sl, r0
 80189b8:	b178      	cbz	r0, 80189da <__gethex+0x1c4>
 80189ba:	1e7b      	subs	r3, r7, #1
 80189bc:	1159      	asrs	r1, r3, #5
 80189be:	f003 021f 	and.w	r2, r3, #31
 80189c2:	f04f 0a01 	mov.w	sl, #1
 80189c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80189ca:	fa0a f202 	lsl.w	r2, sl, r2
 80189ce:	420a      	tst	r2, r1
 80189d0:	d003      	beq.n	80189da <__gethex+0x1c4>
 80189d2:	4553      	cmp	r3, sl
 80189d4:	dc46      	bgt.n	8018a64 <__gethex+0x24e>
 80189d6:	f04f 0a02 	mov.w	sl, #2
 80189da:	4639      	mov	r1, r7
 80189dc:	4628      	mov	r0, r5
 80189de:	f7ff fecb 	bl	8018778 <rshift>
 80189e2:	443c      	add	r4, r7
 80189e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80189e8:	42a3      	cmp	r3, r4
 80189ea:	da52      	bge.n	8018a92 <__gethex+0x27c>
 80189ec:	4629      	mov	r1, r5
 80189ee:	9802      	ldr	r0, [sp, #8]
 80189f0:	f000 fa63 	bl	8018eba <_Bfree>
 80189f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189f6:	2300      	movs	r3, #0
 80189f8:	6013      	str	r3, [r2, #0]
 80189fa:	27a3      	movs	r7, #163	; 0xa3
 80189fc:	e793      	b.n	8018926 <__gethex+0x110>
 80189fe:	3101      	adds	r1, #1
 8018a00:	105b      	asrs	r3, r3, #1
 8018a02:	e7b0      	b.n	8018966 <__gethex+0x150>
 8018a04:	1e73      	subs	r3, r6, #1
 8018a06:	9305      	str	r3, [sp, #20]
 8018a08:	9a07      	ldr	r2, [sp, #28]
 8018a0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018a0e:	4293      	cmp	r3, r2
 8018a10:	d018      	beq.n	8018a44 <__gethex+0x22e>
 8018a12:	f1bb 0f20 	cmp.w	fp, #32
 8018a16:	d107      	bne.n	8018a28 <__gethex+0x212>
 8018a18:	9b04      	ldr	r3, [sp, #16]
 8018a1a:	f8c3 a000 	str.w	sl, [r3]
 8018a1e:	3304      	adds	r3, #4
 8018a20:	f04f 0a00 	mov.w	sl, #0
 8018a24:	9304      	str	r3, [sp, #16]
 8018a26:	46d3      	mov	fp, sl
 8018a28:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018a2c:	f7ff fede 	bl	80187ec <__hexdig_fun>
 8018a30:	f000 000f 	and.w	r0, r0, #15
 8018a34:	fa00 f00b 	lsl.w	r0, r0, fp
 8018a38:	ea4a 0a00 	orr.w	sl, sl, r0
 8018a3c:	f10b 0b04 	add.w	fp, fp, #4
 8018a40:	9b05      	ldr	r3, [sp, #20]
 8018a42:	e00d      	b.n	8018a60 <__gethex+0x24a>
 8018a44:	9b05      	ldr	r3, [sp, #20]
 8018a46:	9a08      	ldr	r2, [sp, #32]
 8018a48:	4413      	add	r3, r2
 8018a4a:	42bb      	cmp	r3, r7
 8018a4c:	d3e1      	bcc.n	8018a12 <__gethex+0x1fc>
 8018a4e:	4618      	mov	r0, r3
 8018a50:	9a01      	ldr	r2, [sp, #4]
 8018a52:	9903      	ldr	r1, [sp, #12]
 8018a54:	9309      	str	r3, [sp, #36]	; 0x24
 8018a56:	f001 fb47 	bl	801a0e8 <strncmp>
 8018a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a5c:	2800      	cmp	r0, #0
 8018a5e:	d1d8      	bne.n	8018a12 <__gethex+0x1fc>
 8018a60:	461e      	mov	r6, r3
 8018a62:	e791      	b.n	8018988 <__gethex+0x172>
 8018a64:	1eb9      	subs	r1, r7, #2
 8018a66:	4628      	mov	r0, r5
 8018a68:	f000 fdd0 	bl	801960c <__any_on>
 8018a6c:	2800      	cmp	r0, #0
 8018a6e:	d0b2      	beq.n	80189d6 <__gethex+0x1c0>
 8018a70:	f04f 0a03 	mov.w	sl, #3
 8018a74:	e7b1      	b.n	80189da <__gethex+0x1c4>
 8018a76:	da09      	bge.n	8018a8c <__gethex+0x276>
 8018a78:	1bf7      	subs	r7, r6, r7
 8018a7a:	4629      	mov	r1, r5
 8018a7c:	463a      	mov	r2, r7
 8018a7e:	9802      	ldr	r0, [sp, #8]
 8018a80:	f000 fbe6 	bl	8019250 <__lshift>
 8018a84:	1be4      	subs	r4, r4, r7
 8018a86:	4605      	mov	r5, r0
 8018a88:	f100 0914 	add.w	r9, r0, #20
 8018a8c:	f04f 0a00 	mov.w	sl, #0
 8018a90:	e7a8      	b.n	80189e4 <__gethex+0x1ce>
 8018a92:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018a96:	42a0      	cmp	r0, r4
 8018a98:	dd6a      	ble.n	8018b70 <__gethex+0x35a>
 8018a9a:	1b04      	subs	r4, r0, r4
 8018a9c:	42a6      	cmp	r6, r4
 8018a9e:	dc2e      	bgt.n	8018afe <__gethex+0x2e8>
 8018aa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018aa4:	2b02      	cmp	r3, #2
 8018aa6:	d022      	beq.n	8018aee <__gethex+0x2d8>
 8018aa8:	2b03      	cmp	r3, #3
 8018aaa:	d024      	beq.n	8018af6 <__gethex+0x2e0>
 8018aac:	2b01      	cmp	r3, #1
 8018aae:	d115      	bne.n	8018adc <__gethex+0x2c6>
 8018ab0:	42a6      	cmp	r6, r4
 8018ab2:	d113      	bne.n	8018adc <__gethex+0x2c6>
 8018ab4:	2e01      	cmp	r6, #1
 8018ab6:	dc0b      	bgt.n	8018ad0 <__gethex+0x2ba>
 8018ab8:	9a06      	ldr	r2, [sp, #24]
 8018aba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018abe:	6013      	str	r3, [r2, #0]
 8018ac0:	2301      	movs	r3, #1
 8018ac2:	612b      	str	r3, [r5, #16]
 8018ac4:	f8c9 3000 	str.w	r3, [r9]
 8018ac8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018aca:	2762      	movs	r7, #98	; 0x62
 8018acc:	601d      	str	r5, [r3, #0]
 8018ace:	e72a      	b.n	8018926 <__gethex+0x110>
 8018ad0:	1e71      	subs	r1, r6, #1
 8018ad2:	4628      	mov	r0, r5
 8018ad4:	f000 fd9a 	bl	801960c <__any_on>
 8018ad8:	2800      	cmp	r0, #0
 8018ada:	d1ed      	bne.n	8018ab8 <__gethex+0x2a2>
 8018adc:	4629      	mov	r1, r5
 8018ade:	9802      	ldr	r0, [sp, #8]
 8018ae0:	f000 f9eb 	bl	8018eba <_Bfree>
 8018ae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	6013      	str	r3, [r2, #0]
 8018aea:	2750      	movs	r7, #80	; 0x50
 8018aec:	e71b      	b.n	8018926 <__gethex+0x110>
 8018aee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d0e1      	beq.n	8018ab8 <__gethex+0x2a2>
 8018af4:	e7f2      	b.n	8018adc <__gethex+0x2c6>
 8018af6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d1dd      	bne.n	8018ab8 <__gethex+0x2a2>
 8018afc:	e7ee      	b.n	8018adc <__gethex+0x2c6>
 8018afe:	1e67      	subs	r7, r4, #1
 8018b00:	f1ba 0f00 	cmp.w	sl, #0
 8018b04:	d131      	bne.n	8018b6a <__gethex+0x354>
 8018b06:	b127      	cbz	r7, 8018b12 <__gethex+0x2fc>
 8018b08:	4639      	mov	r1, r7
 8018b0a:	4628      	mov	r0, r5
 8018b0c:	f000 fd7e 	bl	801960c <__any_on>
 8018b10:	4682      	mov	sl, r0
 8018b12:	117a      	asrs	r2, r7, #5
 8018b14:	2301      	movs	r3, #1
 8018b16:	f007 071f 	and.w	r7, r7, #31
 8018b1a:	fa03 f707 	lsl.w	r7, r3, r7
 8018b1e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018b22:	4621      	mov	r1, r4
 8018b24:	421f      	tst	r7, r3
 8018b26:	4628      	mov	r0, r5
 8018b28:	bf18      	it	ne
 8018b2a:	f04a 0a02 	orrne.w	sl, sl, #2
 8018b2e:	1b36      	subs	r6, r6, r4
 8018b30:	f7ff fe22 	bl	8018778 <rshift>
 8018b34:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018b38:	2702      	movs	r7, #2
 8018b3a:	f1ba 0f00 	cmp.w	sl, #0
 8018b3e:	d048      	beq.n	8018bd2 <__gethex+0x3bc>
 8018b40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b44:	2b02      	cmp	r3, #2
 8018b46:	d015      	beq.n	8018b74 <__gethex+0x35e>
 8018b48:	2b03      	cmp	r3, #3
 8018b4a:	d017      	beq.n	8018b7c <__gethex+0x366>
 8018b4c:	2b01      	cmp	r3, #1
 8018b4e:	d109      	bne.n	8018b64 <__gethex+0x34e>
 8018b50:	f01a 0f02 	tst.w	sl, #2
 8018b54:	d006      	beq.n	8018b64 <__gethex+0x34e>
 8018b56:	f8d9 3000 	ldr.w	r3, [r9]
 8018b5a:	ea4a 0a03 	orr.w	sl, sl, r3
 8018b5e:	f01a 0f01 	tst.w	sl, #1
 8018b62:	d10e      	bne.n	8018b82 <__gethex+0x36c>
 8018b64:	f047 0710 	orr.w	r7, r7, #16
 8018b68:	e033      	b.n	8018bd2 <__gethex+0x3bc>
 8018b6a:	f04f 0a01 	mov.w	sl, #1
 8018b6e:	e7d0      	b.n	8018b12 <__gethex+0x2fc>
 8018b70:	2701      	movs	r7, #1
 8018b72:	e7e2      	b.n	8018b3a <__gethex+0x324>
 8018b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b76:	f1c3 0301 	rsb	r3, r3, #1
 8018b7a:	9315      	str	r3, [sp, #84]	; 0x54
 8018b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d0f0      	beq.n	8018b64 <__gethex+0x34e>
 8018b82:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018b86:	f105 0314 	add.w	r3, r5, #20
 8018b8a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018b8e:	eb03 010a 	add.w	r1, r3, sl
 8018b92:	f04f 0c00 	mov.w	ip, #0
 8018b96:	4618      	mov	r0, r3
 8018b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018ba0:	d01c      	beq.n	8018bdc <__gethex+0x3c6>
 8018ba2:	3201      	adds	r2, #1
 8018ba4:	6002      	str	r2, [r0, #0]
 8018ba6:	2f02      	cmp	r7, #2
 8018ba8:	f105 0314 	add.w	r3, r5, #20
 8018bac:	d138      	bne.n	8018c20 <__gethex+0x40a>
 8018bae:	f8d8 2000 	ldr.w	r2, [r8]
 8018bb2:	3a01      	subs	r2, #1
 8018bb4:	42b2      	cmp	r2, r6
 8018bb6:	d10a      	bne.n	8018bce <__gethex+0x3b8>
 8018bb8:	1171      	asrs	r1, r6, #5
 8018bba:	2201      	movs	r2, #1
 8018bbc:	f006 061f 	and.w	r6, r6, #31
 8018bc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018bc4:	fa02 f606 	lsl.w	r6, r2, r6
 8018bc8:	421e      	tst	r6, r3
 8018bca:	bf18      	it	ne
 8018bcc:	4617      	movne	r7, r2
 8018bce:	f047 0720 	orr.w	r7, r7, #32
 8018bd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018bd4:	601d      	str	r5, [r3, #0]
 8018bd6:	9b06      	ldr	r3, [sp, #24]
 8018bd8:	601c      	str	r4, [r3, #0]
 8018bda:	e6a4      	b.n	8018926 <__gethex+0x110>
 8018bdc:	4299      	cmp	r1, r3
 8018bde:	f843 cc04 	str.w	ip, [r3, #-4]
 8018be2:	d8d8      	bhi.n	8018b96 <__gethex+0x380>
 8018be4:	68ab      	ldr	r3, [r5, #8]
 8018be6:	4599      	cmp	r9, r3
 8018be8:	db12      	blt.n	8018c10 <__gethex+0x3fa>
 8018bea:	6869      	ldr	r1, [r5, #4]
 8018bec:	9802      	ldr	r0, [sp, #8]
 8018bee:	3101      	adds	r1, #1
 8018bf0:	f000 f92f 	bl	8018e52 <_Balloc>
 8018bf4:	692a      	ldr	r2, [r5, #16]
 8018bf6:	3202      	adds	r2, #2
 8018bf8:	f105 010c 	add.w	r1, r5, #12
 8018bfc:	4683      	mov	fp, r0
 8018bfe:	0092      	lsls	r2, r2, #2
 8018c00:	300c      	adds	r0, #12
 8018c02:	f000 f91b 	bl	8018e3c <memcpy>
 8018c06:	4629      	mov	r1, r5
 8018c08:	9802      	ldr	r0, [sp, #8]
 8018c0a:	f000 f956 	bl	8018eba <_Bfree>
 8018c0e:	465d      	mov	r5, fp
 8018c10:	692b      	ldr	r3, [r5, #16]
 8018c12:	1c5a      	adds	r2, r3, #1
 8018c14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018c18:	612a      	str	r2, [r5, #16]
 8018c1a:	2201      	movs	r2, #1
 8018c1c:	615a      	str	r2, [r3, #20]
 8018c1e:	e7c2      	b.n	8018ba6 <__gethex+0x390>
 8018c20:	692a      	ldr	r2, [r5, #16]
 8018c22:	454a      	cmp	r2, r9
 8018c24:	dd0b      	ble.n	8018c3e <__gethex+0x428>
 8018c26:	2101      	movs	r1, #1
 8018c28:	4628      	mov	r0, r5
 8018c2a:	f7ff fda5 	bl	8018778 <rshift>
 8018c2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018c32:	3401      	adds	r4, #1
 8018c34:	42a3      	cmp	r3, r4
 8018c36:	f6ff aed9 	blt.w	80189ec <__gethex+0x1d6>
 8018c3a:	2701      	movs	r7, #1
 8018c3c:	e7c7      	b.n	8018bce <__gethex+0x3b8>
 8018c3e:	f016 061f 	ands.w	r6, r6, #31
 8018c42:	d0fa      	beq.n	8018c3a <__gethex+0x424>
 8018c44:	449a      	add	sl, r3
 8018c46:	f1c6 0620 	rsb	r6, r6, #32
 8018c4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018c4e:	f000 f9c4 	bl	8018fda <__hi0bits>
 8018c52:	42b0      	cmp	r0, r6
 8018c54:	dbe7      	blt.n	8018c26 <__gethex+0x410>
 8018c56:	e7f0      	b.n	8018c3a <__gethex+0x424>

08018c58 <L_shift>:
 8018c58:	f1c2 0208 	rsb	r2, r2, #8
 8018c5c:	0092      	lsls	r2, r2, #2
 8018c5e:	b570      	push	{r4, r5, r6, lr}
 8018c60:	f1c2 0620 	rsb	r6, r2, #32
 8018c64:	6843      	ldr	r3, [r0, #4]
 8018c66:	6804      	ldr	r4, [r0, #0]
 8018c68:	fa03 f506 	lsl.w	r5, r3, r6
 8018c6c:	432c      	orrs	r4, r5
 8018c6e:	40d3      	lsrs	r3, r2
 8018c70:	6004      	str	r4, [r0, #0]
 8018c72:	f840 3f04 	str.w	r3, [r0, #4]!
 8018c76:	4288      	cmp	r0, r1
 8018c78:	d3f4      	bcc.n	8018c64 <L_shift+0xc>
 8018c7a:	bd70      	pop	{r4, r5, r6, pc}

08018c7c <__match>:
 8018c7c:	b530      	push	{r4, r5, lr}
 8018c7e:	6803      	ldr	r3, [r0, #0]
 8018c80:	3301      	adds	r3, #1
 8018c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c86:	b914      	cbnz	r4, 8018c8e <__match+0x12>
 8018c88:	6003      	str	r3, [r0, #0]
 8018c8a:	2001      	movs	r0, #1
 8018c8c:	bd30      	pop	{r4, r5, pc}
 8018c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018c96:	2d19      	cmp	r5, #25
 8018c98:	bf98      	it	ls
 8018c9a:	3220      	addls	r2, #32
 8018c9c:	42a2      	cmp	r2, r4
 8018c9e:	d0f0      	beq.n	8018c82 <__match+0x6>
 8018ca0:	2000      	movs	r0, #0
 8018ca2:	e7f3      	b.n	8018c8c <__match+0x10>

08018ca4 <__hexnan>:
 8018ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca8:	680b      	ldr	r3, [r1, #0]
 8018caa:	6801      	ldr	r1, [r0, #0]
 8018cac:	115f      	asrs	r7, r3, #5
 8018cae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018cb2:	f013 031f 	ands.w	r3, r3, #31
 8018cb6:	b087      	sub	sp, #28
 8018cb8:	bf18      	it	ne
 8018cba:	3704      	addne	r7, #4
 8018cbc:	2500      	movs	r5, #0
 8018cbe:	1f3e      	subs	r6, r7, #4
 8018cc0:	4682      	mov	sl, r0
 8018cc2:	4690      	mov	r8, r2
 8018cc4:	9301      	str	r3, [sp, #4]
 8018cc6:	f847 5c04 	str.w	r5, [r7, #-4]
 8018cca:	46b1      	mov	r9, r6
 8018ccc:	4634      	mov	r4, r6
 8018cce:	9502      	str	r5, [sp, #8]
 8018cd0:	46ab      	mov	fp, r5
 8018cd2:	784a      	ldrb	r2, [r1, #1]
 8018cd4:	1c4b      	adds	r3, r1, #1
 8018cd6:	9303      	str	r3, [sp, #12]
 8018cd8:	b342      	cbz	r2, 8018d2c <__hexnan+0x88>
 8018cda:	4610      	mov	r0, r2
 8018cdc:	9105      	str	r1, [sp, #20]
 8018cde:	9204      	str	r2, [sp, #16]
 8018ce0:	f7ff fd84 	bl	80187ec <__hexdig_fun>
 8018ce4:	2800      	cmp	r0, #0
 8018ce6:	d143      	bne.n	8018d70 <__hexnan+0xcc>
 8018ce8:	9a04      	ldr	r2, [sp, #16]
 8018cea:	9905      	ldr	r1, [sp, #20]
 8018cec:	2a20      	cmp	r2, #32
 8018cee:	d818      	bhi.n	8018d22 <__hexnan+0x7e>
 8018cf0:	9b02      	ldr	r3, [sp, #8]
 8018cf2:	459b      	cmp	fp, r3
 8018cf4:	dd13      	ble.n	8018d1e <__hexnan+0x7a>
 8018cf6:	454c      	cmp	r4, r9
 8018cf8:	d206      	bcs.n	8018d08 <__hexnan+0x64>
 8018cfa:	2d07      	cmp	r5, #7
 8018cfc:	dc04      	bgt.n	8018d08 <__hexnan+0x64>
 8018cfe:	462a      	mov	r2, r5
 8018d00:	4649      	mov	r1, r9
 8018d02:	4620      	mov	r0, r4
 8018d04:	f7ff ffa8 	bl	8018c58 <L_shift>
 8018d08:	4544      	cmp	r4, r8
 8018d0a:	d944      	bls.n	8018d96 <__hexnan+0xf2>
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	f1a4 0904 	sub.w	r9, r4, #4
 8018d12:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d16:	f8cd b008 	str.w	fp, [sp, #8]
 8018d1a:	464c      	mov	r4, r9
 8018d1c:	461d      	mov	r5, r3
 8018d1e:	9903      	ldr	r1, [sp, #12]
 8018d20:	e7d7      	b.n	8018cd2 <__hexnan+0x2e>
 8018d22:	2a29      	cmp	r2, #41	; 0x29
 8018d24:	d14a      	bne.n	8018dbc <__hexnan+0x118>
 8018d26:	3102      	adds	r1, #2
 8018d28:	f8ca 1000 	str.w	r1, [sl]
 8018d2c:	f1bb 0f00 	cmp.w	fp, #0
 8018d30:	d044      	beq.n	8018dbc <__hexnan+0x118>
 8018d32:	454c      	cmp	r4, r9
 8018d34:	d206      	bcs.n	8018d44 <__hexnan+0xa0>
 8018d36:	2d07      	cmp	r5, #7
 8018d38:	dc04      	bgt.n	8018d44 <__hexnan+0xa0>
 8018d3a:	462a      	mov	r2, r5
 8018d3c:	4649      	mov	r1, r9
 8018d3e:	4620      	mov	r0, r4
 8018d40:	f7ff ff8a 	bl	8018c58 <L_shift>
 8018d44:	4544      	cmp	r4, r8
 8018d46:	d928      	bls.n	8018d9a <__hexnan+0xf6>
 8018d48:	4643      	mov	r3, r8
 8018d4a:	f854 2b04 	ldr.w	r2, [r4], #4
 8018d4e:	f843 2b04 	str.w	r2, [r3], #4
 8018d52:	42a6      	cmp	r6, r4
 8018d54:	d2f9      	bcs.n	8018d4a <__hexnan+0xa6>
 8018d56:	2200      	movs	r2, #0
 8018d58:	f843 2b04 	str.w	r2, [r3], #4
 8018d5c:	429e      	cmp	r6, r3
 8018d5e:	d2fb      	bcs.n	8018d58 <__hexnan+0xb4>
 8018d60:	6833      	ldr	r3, [r6, #0]
 8018d62:	b91b      	cbnz	r3, 8018d6c <__hexnan+0xc8>
 8018d64:	4546      	cmp	r6, r8
 8018d66:	d127      	bne.n	8018db8 <__hexnan+0x114>
 8018d68:	2301      	movs	r3, #1
 8018d6a:	6033      	str	r3, [r6, #0]
 8018d6c:	2005      	movs	r0, #5
 8018d6e:	e026      	b.n	8018dbe <__hexnan+0x11a>
 8018d70:	3501      	adds	r5, #1
 8018d72:	2d08      	cmp	r5, #8
 8018d74:	f10b 0b01 	add.w	fp, fp, #1
 8018d78:	dd06      	ble.n	8018d88 <__hexnan+0xe4>
 8018d7a:	4544      	cmp	r4, r8
 8018d7c:	d9cf      	bls.n	8018d1e <__hexnan+0x7a>
 8018d7e:	2300      	movs	r3, #0
 8018d80:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d84:	2501      	movs	r5, #1
 8018d86:	3c04      	subs	r4, #4
 8018d88:	6822      	ldr	r2, [r4, #0]
 8018d8a:	f000 000f 	and.w	r0, r0, #15
 8018d8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018d92:	6020      	str	r0, [r4, #0]
 8018d94:	e7c3      	b.n	8018d1e <__hexnan+0x7a>
 8018d96:	2508      	movs	r5, #8
 8018d98:	e7c1      	b.n	8018d1e <__hexnan+0x7a>
 8018d9a:	9b01      	ldr	r3, [sp, #4]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d0df      	beq.n	8018d60 <__hexnan+0xbc>
 8018da0:	f04f 32ff 	mov.w	r2, #4294967295
 8018da4:	f1c3 0320 	rsb	r3, r3, #32
 8018da8:	fa22 f303 	lsr.w	r3, r2, r3
 8018dac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018db0:	401a      	ands	r2, r3
 8018db2:	f847 2c04 	str.w	r2, [r7, #-4]
 8018db6:	e7d3      	b.n	8018d60 <__hexnan+0xbc>
 8018db8:	3e04      	subs	r6, #4
 8018dba:	e7d1      	b.n	8018d60 <__hexnan+0xbc>
 8018dbc:	2004      	movs	r0, #4
 8018dbe:	b007      	add	sp, #28
 8018dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018dc4 <__locale_ctype_ptr_l>:
 8018dc4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018dc8:	4770      	bx	lr
	...

08018dcc <__locale_ctype_ptr>:
 8018dcc:	4b04      	ldr	r3, [pc, #16]	; (8018de0 <__locale_ctype_ptr+0x14>)
 8018dce:	4a05      	ldr	r2, [pc, #20]	; (8018de4 <__locale_ctype_ptr+0x18>)
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	6a1b      	ldr	r3, [r3, #32]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	bf08      	it	eq
 8018dd8:	4613      	moveq	r3, r2
 8018dda:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018dde:	4770      	bx	lr
 8018de0:	2000000c 	.word	0x2000000c
 8018de4:	20000070 	.word	0x20000070

08018de8 <__localeconv_l>:
 8018de8:	30f0      	adds	r0, #240	; 0xf0
 8018dea:	4770      	bx	lr

08018dec <_localeconv_r>:
 8018dec:	4b04      	ldr	r3, [pc, #16]	; (8018e00 <_localeconv_r+0x14>)
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	6a18      	ldr	r0, [r3, #32]
 8018df2:	4b04      	ldr	r3, [pc, #16]	; (8018e04 <_localeconv_r+0x18>)
 8018df4:	2800      	cmp	r0, #0
 8018df6:	bf08      	it	eq
 8018df8:	4618      	moveq	r0, r3
 8018dfa:	30f0      	adds	r0, #240	; 0xf0
 8018dfc:	4770      	bx	lr
 8018dfe:	bf00      	nop
 8018e00:	2000000c 	.word	0x2000000c
 8018e04:	20000070 	.word	0x20000070

08018e08 <malloc>:
 8018e08:	4b02      	ldr	r3, [pc, #8]	; (8018e14 <malloc+0xc>)
 8018e0a:	4601      	mov	r1, r0
 8018e0c:	6818      	ldr	r0, [r3, #0]
 8018e0e:	f000 bc7b 	b.w	8019708 <_malloc_r>
 8018e12:	bf00      	nop
 8018e14:	2000000c 	.word	0x2000000c

08018e18 <__ascii_mbtowc>:
 8018e18:	b082      	sub	sp, #8
 8018e1a:	b901      	cbnz	r1, 8018e1e <__ascii_mbtowc+0x6>
 8018e1c:	a901      	add	r1, sp, #4
 8018e1e:	b142      	cbz	r2, 8018e32 <__ascii_mbtowc+0x1a>
 8018e20:	b14b      	cbz	r3, 8018e36 <__ascii_mbtowc+0x1e>
 8018e22:	7813      	ldrb	r3, [r2, #0]
 8018e24:	600b      	str	r3, [r1, #0]
 8018e26:	7812      	ldrb	r2, [r2, #0]
 8018e28:	1c10      	adds	r0, r2, #0
 8018e2a:	bf18      	it	ne
 8018e2c:	2001      	movne	r0, #1
 8018e2e:	b002      	add	sp, #8
 8018e30:	4770      	bx	lr
 8018e32:	4610      	mov	r0, r2
 8018e34:	e7fb      	b.n	8018e2e <__ascii_mbtowc+0x16>
 8018e36:	f06f 0001 	mvn.w	r0, #1
 8018e3a:	e7f8      	b.n	8018e2e <__ascii_mbtowc+0x16>

08018e3c <memcpy>:
 8018e3c:	b510      	push	{r4, lr}
 8018e3e:	1e43      	subs	r3, r0, #1
 8018e40:	440a      	add	r2, r1
 8018e42:	4291      	cmp	r1, r2
 8018e44:	d100      	bne.n	8018e48 <memcpy+0xc>
 8018e46:	bd10      	pop	{r4, pc}
 8018e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018e50:	e7f7      	b.n	8018e42 <memcpy+0x6>

08018e52 <_Balloc>:
 8018e52:	b570      	push	{r4, r5, r6, lr}
 8018e54:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018e56:	4604      	mov	r4, r0
 8018e58:	460e      	mov	r6, r1
 8018e5a:	b93d      	cbnz	r5, 8018e6c <_Balloc+0x1a>
 8018e5c:	2010      	movs	r0, #16
 8018e5e:	f7ff ffd3 	bl	8018e08 <malloc>
 8018e62:	6260      	str	r0, [r4, #36]	; 0x24
 8018e64:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018e68:	6005      	str	r5, [r0, #0]
 8018e6a:	60c5      	str	r5, [r0, #12]
 8018e6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018e6e:	68eb      	ldr	r3, [r5, #12]
 8018e70:	b183      	cbz	r3, 8018e94 <_Balloc+0x42>
 8018e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e74:	68db      	ldr	r3, [r3, #12]
 8018e76:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018e7a:	b9b8      	cbnz	r0, 8018eac <_Balloc+0x5a>
 8018e7c:	2101      	movs	r1, #1
 8018e7e:	fa01 f506 	lsl.w	r5, r1, r6
 8018e82:	1d6a      	adds	r2, r5, #5
 8018e84:	0092      	lsls	r2, r2, #2
 8018e86:	4620      	mov	r0, r4
 8018e88:	f000 fbe1 	bl	801964e <_calloc_r>
 8018e8c:	b160      	cbz	r0, 8018ea8 <_Balloc+0x56>
 8018e8e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018e92:	e00e      	b.n	8018eb2 <_Balloc+0x60>
 8018e94:	2221      	movs	r2, #33	; 0x21
 8018e96:	2104      	movs	r1, #4
 8018e98:	4620      	mov	r0, r4
 8018e9a:	f000 fbd8 	bl	801964e <_calloc_r>
 8018e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ea0:	60e8      	str	r0, [r5, #12]
 8018ea2:	68db      	ldr	r3, [r3, #12]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d1e4      	bne.n	8018e72 <_Balloc+0x20>
 8018ea8:	2000      	movs	r0, #0
 8018eaa:	bd70      	pop	{r4, r5, r6, pc}
 8018eac:	6802      	ldr	r2, [r0, #0]
 8018eae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018eb8:	e7f7      	b.n	8018eaa <_Balloc+0x58>

08018eba <_Bfree>:
 8018eba:	b570      	push	{r4, r5, r6, lr}
 8018ebc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018ebe:	4606      	mov	r6, r0
 8018ec0:	460d      	mov	r5, r1
 8018ec2:	b93c      	cbnz	r4, 8018ed4 <_Bfree+0x1a>
 8018ec4:	2010      	movs	r0, #16
 8018ec6:	f7ff ff9f 	bl	8018e08 <malloc>
 8018eca:	6270      	str	r0, [r6, #36]	; 0x24
 8018ecc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018ed0:	6004      	str	r4, [r0, #0]
 8018ed2:	60c4      	str	r4, [r0, #12]
 8018ed4:	b13d      	cbz	r5, 8018ee6 <_Bfree+0x2c>
 8018ed6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018ed8:	686a      	ldr	r2, [r5, #4]
 8018eda:	68db      	ldr	r3, [r3, #12]
 8018edc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ee0:	6029      	str	r1, [r5, #0]
 8018ee2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018ee6:	bd70      	pop	{r4, r5, r6, pc}

08018ee8 <__multadd>:
 8018ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eec:	690d      	ldr	r5, [r1, #16]
 8018eee:	461f      	mov	r7, r3
 8018ef0:	4606      	mov	r6, r0
 8018ef2:	460c      	mov	r4, r1
 8018ef4:	f101 0c14 	add.w	ip, r1, #20
 8018ef8:	2300      	movs	r3, #0
 8018efa:	f8dc 0000 	ldr.w	r0, [ip]
 8018efe:	b281      	uxth	r1, r0
 8018f00:	fb02 7101 	mla	r1, r2, r1, r7
 8018f04:	0c0f      	lsrs	r7, r1, #16
 8018f06:	0c00      	lsrs	r0, r0, #16
 8018f08:	fb02 7000 	mla	r0, r2, r0, r7
 8018f0c:	b289      	uxth	r1, r1
 8018f0e:	3301      	adds	r3, #1
 8018f10:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018f14:	429d      	cmp	r5, r3
 8018f16:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018f1a:	f84c 1b04 	str.w	r1, [ip], #4
 8018f1e:	dcec      	bgt.n	8018efa <__multadd+0x12>
 8018f20:	b1d7      	cbz	r7, 8018f58 <__multadd+0x70>
 8018f22:	68a3      	ldr	r3, [r4, #8]
 8018f24:	42ab      	cmp	r3, r5
 8018f26:	dc12      	bgt.n	8018f4e <__multadd+0x66>
 8018f28:	6861      	ldr	r1, [r4, #4]
 8018f2a:	4630      	mov	r0, r6
 8018f2c:	3101      	adds	r1, #1
 8018f2e:	f7ff ff90 	bl	8018e52 <_Balloc>
 8018f32:	6922      	ldr	r2, [r4, #16]
 8018f34:	3202      	adds	r2, #2
 8018f36:	f104 010c 	add.w	r1, r4, #12
 8018f3a:	4680      	mov	r8, r0
 8018f3c:	0092      	lsls	r2, r2, #2
 8018f3e:	300c      	adds	r0, #12
 8018f40:	f7ff ff7c 	bl	8018e3c <memcpy>
 8018f44:	4621      	mov	r1, r4
 8018f46:	4630      	mov	r0, r6
 8018f48:	f7ff ffb7 	bl	8018eba <_Bfree>
 8018f4c:	4644      	mov	r4, r8
 8018f4e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018f52:	3501      	adds	r5, #1
 8018f54:	615f      	str	r7, [r3, #20]
 8018f56:	6125      	str	r5, [r4, #16]
 8018f58:	4620      	mov	r0, r4
 8018f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f5e <__s2b>:
 8018f5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f62:	460c      	mov	r4, r1
 8018f64:	4615      	mov	r5, r2
 8018f66:	461f      	mov	r7, r3
 8018f68:	2209      	movs	r2, #9
 8018f6a:	3308      	adds	r3, #8
 8018f6c:	4606      	mov	r6, r0
 8018f6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8018f72:	2100      	movs	r1, #0
 8018f74:	2201      	movs	r2, #1
 8018f76:	429a      	cmp	r2, r3
 8018f78:	db20      	blt.n	8018fbc <__s2b+0x5e>
 8018f7a:	4630      	mov	r0, r6
 8018f7c:	f7ff ff69 	bl	8018e52 <_Balloc>
 8018f80:	9b08      	ldr	r3, [sp, #32]
 8018f82:	6143      	str	r3, [r0, #20]
 8018f84:	2d09      	cmp	r5, #9
 8018f86:	f04f 0301 	mov.w	r3, #1
 8018f8a:	6103      	str	r3, [r0, #16]
 8018f8c:	dd19      	ble.n	8018fc2 <__s2b+0x64>
 8018f8e:	f104 0809 	add.w	r8, r4, #9
 8018f92:	46c1      	mov	r9, r8
 8018f94:	442c      	add	r4, r5
 8018f96:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018f9a:	4601      	mov	r1, r0
 8018f9c:	3b30      	subs	r3, #48	; 0x30
 8018f9e:	220a      	movs	r2, #10
 8018fa0:	4630      	mov	r0, r6
 8018fa2:	f7ff ffa1 	bl	8018ee8 <__multadd>
 8018fa6:	45a1      	cmp	r9, r4
 8018fa8:	d1f5      	bne.n	8018f96 <__s2b+0x38>
 8018faa:	eb08 0405 	add.w	r4, r8, r5
 8018fae:	3c08      	subs	r4, #8
 8018fb0:	1b2d      	subs	r5, r5, r4
 8018fb2:	1963      	adds	r3, r4, r5
 8018fb4:	42bb      	cmp	r3, r7
 8018fb6:	db07      	blt.n	8018fc8 <__s2b+0x6a>
 8018fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fbc:	0052      	lsls	r2, r2, #1
 8018fbe:	3101      	adds	r1, #1
 8018fc0:	e7d9      	b.n	8018f76 <__s2b+0x18>
 8018fc2:	340a      	adds	r4, #10
 8018fc4:	2509      	movs	r5, #9
 8018fc6:	e7f3      	b.n	8018fb0 <__s2b+0x52>
 8018fc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018fcc:	4601      	mov	r1, r0
 8018fce:	3b30      	subs	r3, #48	; 0x30
 8018fd0:	220a      	movs	r2, #10
 8018fd2:	4630      	mov	r0, r6
 8018fd4:	f7ff ff88 	bl	8018ee8 <__multadd>
 8018fd8:	e7eb      	b.n	8018fb2 <__s2b+0x54>

08018fda <__hi0bits>:
 8018fda:	0c02      	lsrs	r2, r0, #16
 8018fdc:	0412      	lsls	r2, r2, #16
 8018fde:	4603      	mov	r3, r0
 8018fe0:	b9b2      	cbnz	r2, 8019010 <__hi0bits+0x36>
 8018fe2:	0403      	lsls	r3, r0, #16
 8018fe4:	2010      	movs	r0, #16
 8018fe6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018fea:	bf04      	itt	eq
 8018fec:	021b      	lsleq	r3, r3, #8
 8018fee:	3008      	addeq	r0, #8
 8018ff0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018ff4:	bf04      	itt	eq
 8018ff6:	011b      	lsleq	r3, r3, #4
 8018ff8:	3004      	addeq	r0, #4
 8018ffa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018ffe:	bf04      	itt	eq
 8019000:	009b      	lsleq	r3, r3, #2
 8019002:	3002      	addeq	r0, #2
 8019004:	2b00      	cmp	r3, #0
 8019006:	db06      	blt.n	8019016 <__hi0bits+0x3c>
 8019008:	005b      	lsls	r3, r3, #1
 801900a:	d503      	bpl.n	8019014 <__hi0bits+0x3a>
 801900c:	3001      	adds	r0, #1
 801900e:	4770      	bx	lr
 8019010:	2000      	movs	r0, #0
 8019012:	e7e8      	b.n	8018fe6 <__hi0bits+0xc>
 8019014:	2020      	movs	r0, #32
 8019016:	4770      	bx	lr

08019018 <__lo0bits>:
 8019018:	6803      	ldr	r3, [r0, #0]
 801901a:	f013 0207 	ands.w	r2, r3, #7
 801901e:	4601      	mov	r1, r0
 8019020:	d00b      	beq.n	801903a <__lo0bits+0x22>
 8019022:	07da      	lsls	r2, r3, #31
 8019024:	d423      	bmi.n	801906e <__lo0bits+0x56>
 8019026:	0798      	lsls	r0, r3, #30
 8019028:	bf49      	itett	mi
 801902a:	085b      	lsrmi	r3, r3, #1
 801902c:	089b      	lsrpl	r3, r3, #2
 801902e:	2001      	movmi	r0, #1
 8019030:	600b      	strmi	r3, [r1, #0]
 8019032:	bf5c      	itt	pl
 8019034:	600b      	strpl	r3, [r1, #0]
 8019036:	2002      	movpl	r0, #2
 8019038:	4770      	bx	lr
 801903a:	b298      	uxth	r0, r3
 801903c:	b9a8      	cbnz	r0, 801906a <__lo0bits+0x52>
 801903e:	0c1b      	lsrs	r3, r3, #16
 8019040:	2010      	movs	r0, #16
 8019042:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019046:	bf04      	itt	eq
 8019048:	0a1b      	lsreq	r3, r3, #8
 801904a:	3008      	addeq	r0, #8
 801904c:	071a      	lsls	r2, r3, #28
 801904e:	bf04      	itt	eq
 8019050:	091b      	lsreq	r3, r3, #4
 8019052:	3004      	addeq	r0, #4
 8019054:	079a      	lsls	r2, r3, #30
 8019056:	bf04      	itt	eq
 8019058:	089b      	lsreq	r3, r3, #2
 801905a:	3002      	addeq	r0, #2
 801905c:	07da      	lsls	r2, r3, #31
 801905e:	d402      	bmi.n	8019066 <__lo0bits+0x4e>
 8019060:	085b      	lsrs	r3, r3, #1
 8019062:	d006      	beq.n	8019072 <__lo0bits+0x5a>
 8019064:	3001      	adds	r0, #1
 8019066:	600b      	str	r3, [r1, #0]
 8019068:	4770      	bx	lr
 801906a:	4610      	mov	r0, r2
 801906c:	e7e9      	b.n	8019042 <__lo0bits+0x2a>
 801906e:	2000      	movs	r0, #0
 8019070:	4770      	bx	lr
 8019072:	2020      	movs	r0, #32
 8019074:	4770      	bx	lr

08019076 <__i2b>:
 8019076:	b510      	push	{r4, lr}
 8019078:	460c      	mov	r4, r1
 801907a:	2101      	movs	r1, #1
 801907c:	f7ff fee9 	bl	8018e52 <_Balloc>
 8019080:	2201      	movs	r2, #1
 8019082:	6144      	str	r4, [r0, #20]
 8019084:	6102      	str	r2, [r0, #16]
 8019086:	bd10      	pop	{r4, pc}

08019088 <__multiply>:
 8019088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801908c:	4614      	mov	r4, r2
 801908e:	690a      	ldr	r2, [r1, #16]
 8019090:	6923      	ldr	r3, [r4, #16]
 8019092:	429a      	cmp	r2, r3
 8019094:	bfb8      	it	lt
 8019096:	460b      	movlt	r3, r1
 8019098:	4688      	mov	r8, r1
 801909a:	bfbc      	itt	lt
 801909c:	46a0      	movlt	r8, r4
 801909e:	461c      	movlt	r4, r3
 80190a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80190a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80190a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80190ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80190b0:	eb07 0609 	add.w	r6, r7, r9
 80190b4:	42b3      	cmp	r3, r6
 80190b6:	bfb8      	it	lt
 80190b8:	3101      	addlt	r1, #1
 80190ba:	f7ff feca 	bl	8018e52 <_Balloc>
 80190be:	f100 0514 	add.w	r5, r0, #20
 80190c2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80190c6:	462b      	mov	r3, r5
 80190c8:	2200      	movs	r2, #0
 80190ca:	4573      	cmp	r3, lr
 80190cc:	d316      	bcc.n	80190fc <__multiply+0x74>
 80190ce:	f104 0214 	add.w	r2, r4, #20
 80190d2:	f108 0114 	add.w	r1, r8, #20
 80190d6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80190da:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80190de:	9300      	str	r3, [sp, #0]
 80190e0:	9b00      	ldr	r3, [sp, #0]
 80190e2:	9201      	str	r2, [sp, #4]
 80190e4:	4293      	cmp	r3, r2
 80190e6:	d80c      	bhi.n	8019102 <__multiply+0x7a>
 80190e8:	2e00      	cmp	r6, #0
 80190ea:	dd03      	ble.n	80190f4 <__multiply+0x6c>
 80190ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d05d      	beq.n	80191b0 <__multiply+0x128>
 80190f4:	6106      	str	r6, [r0, #16]
 80190f6:	b003      	add	sp, #12
 80190f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190fc:	f843 2b04 	str.w	r2, [r3], #4
 8019100:	e7e3      	b.n	80190ca <__multiply+0x42>
 8019102:	f8b2 b000 	ldrh.w	fp, [r2]
 8019106:	f1bb 0f00 	cmp.w	fp, #0
 801910a:	d023      	beq.n	8019154 <__multiply+0xcc>
 801910c:	4689      	mov	r9, r1
 801910e:	46ac      	mov	ip, r5
 8019110:	f04f 0800 	mov.w	r8, #0
 8019114:	f859 4b04 	ldr.w	r4, [r9], #4
 8019118:	f8dc a000 	ldr.w	sl, [ip]
 801911c:	b2a3      	uxth	r3, r4
 801911e:	fa1f fa8a 	uxth.w	sl, sl
 8019122:	fb0b a303 	mla	r3, fp, r3, sl
 8019126:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801912a:	f8dc 4000 	ldr.w	r4, [ip]
 801912e:	4443      	add	r3, r8
 8019130:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8019134:	fb0b 840a 	mla	r4, fp, sl, r8
 8019138:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801913c:	46e2      	mov	sl, ip
 801913e:	b29b      	uxth	r3, r3
 8019140:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019144:	454f      	cmp	r7, r9
 8019146:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801914a:	f84a 3b04 	str.w	r3, [sl], #4
 801914e:	d82b      	bhi.n	80191a8 <__multiply+0x120>
 8019150:	f8cc 8004 	str.w	r8, [ip, #4]
 8019154:	9b01      	ldr	r3, [sp, #4]
 8019156:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801915a:	3204      	adds	r2, #4
 801915c:	f1ba 0f00 	cmp.w	sl, #0
 8019160:	d020      	beq.n	80191a4 <__multiply+0x11c>
 8019162:	682b      	ldr	r3, [r5, #0]
 8019164:	4689      	mov	r9, r1
 8019166:	46a8      	mov	r8, r5
 8019168:	f04f 0b00 	mov.w	fp, #0
 801916c:	f8b9 c000 	ldrh.w	ip, [r9]
 8019170:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8019174:	fb0a 440c 	mla	r4, sl, ip, r4
 8019178:	445c      	add	r4, fp
 801917a:	46c4      	mov	ip, r8
 801917c:	b29b      	uxth	r3, r3
 801917e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019182:	f84c 3b04 	str.w	r3, [ip], #4
 8019186:	f859 3b04 	ldr.w	r3, [r9], #4
 801918a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801918e:	0c1b      	lsrs	r3, r3, #16
 8019190:	fb0a b303 	mla	r3, sl, r3, fp
 8019194:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8019198:	454f      	cmp	r7, r9
 801919a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801919e:	d805      	bhi.n	80191ac <__multiply+0x124>
 80191a0:	f8c8 3004 	str.w	r3, [r8, #4]
 80191a4:	3504      	adds	r5, #4
 80191a6:	e79b      	b.n	80190e0 <__multiply+0x58>
 80191a8:	46d4      	mov	ip, sl
 80191aa:	e7b3      	b.n	8019114 <__multiply+0x8c>
 80191ac:	46e0      	mov	r8, ip
 80191ae:	e7dd      	b.n	801916c <__multiply+0xe4>
 80191b0:	3e01      	subs	r6, #1
 80191b2:	e799      	b.n	80190e8 <__multiply+0x60>

080191b4 <__pow5mult>:
 80191b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191b8:	4615      	mov	r5, r2
 80191ba:	f012 0203 	ands.w	r2, r2, #3
 80191be:	4606      	mov	r6, r0
 80191c0:	460f      	mov	r7, r1
 80191c2:	d007      	beq.n	80191d4 <__pow5mult+0x20>
 80191c4:	3a01      	subs	r2, #1
 80191c6:	4c21      	ldr	r4, [pc, #132]	; (801924c <__pow5mult+0x98>)
 80191c8:	2300      	movs	r3, #0
 80191ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80191ce:	f7ff fe8b 	bl	8018ee8 <__multadd>
 80191d2:	4607      	mov	r7, r0
 80191d4:	10ad      	asrs	r5, r5, #2
 80191d6:	d035      	beq.n	8019244 <__pow5mult+0x90>
 80191d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80191da:	b93c      	cbnz	r4, 80191ec <__pow5mult+0x38>
 80191dc:	2010      	movs	r0, #16
 80191de:	f7ff fe13 	bl	8018e08 <malloc>
 80191e2:	6270      	str	r0, [r6, #36]	; 0x24
 80191e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80191e8:	6004      	str	r4, [r0, #0]
 80191ea:	60c4      	str	r4, [r0, #12]
 80191ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80191f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80191f4:	b94c      	cbnz	r4, 801920a <__pow5mult+0x56>
 80191f6:	f240 2171 	movw	r1, #625	; 0x271
 80191fa:	4630      	mov	r0, r6
 80191fc:	f7ff ff3b 	bl	8019076 <__i2b>
 8019200:	2300      	movs	r3, #0
 8019202:	f8c8 0008 	str.w	r0, [r8, #8]
 8019206:	4604      	mov	r4, r0
 8019208:	6003      	str	r3, [r0, #0]
 801920a:	f04f 0800 	mov.w	r8, #0
 801920e:	07eb      	lsls	r3, r5, #31
 8019210:	d50a      	bpl.n	8019228 <__pow5mult+0x74>
 8019212:	4639      	mov	r1, r7
 8019214:	4622      	mov	r2, r4
 8019216:	4630      	mov	r0, r6
 8019218:	f7ff ff36 	bl	8019088 <__multiply>
 801921c:	4639      	mov	r1, r7
 801921e:	4681      	mov	r9, r0
 8019220:	4630      	mov	r0, r6
 8019222:	f7ff fe4a 	bl	8018eba <_Bfree>
 8019226:	464f      	mov	r7, r9
 8019228:	106d      	asrs	r5, r5, #1
 801922a:	d00b      	beq.n	8019244 <__pow5mult+0x90>
 801922c:	6820      	ldr	r0, [r4, #0]
 801922e:	b938      	cbnz	r0, 8019240 <__pow5mult+0x8c>
 8019230:	4622      	mov	r2, r4
 8019232:	4621      	mov	r1, r4
 8019234:	4630      	mov	r0, r6
 8019236:	f7ff ff27 	bl	8019088 <__multiply>
 801923a:	6020      	str	r0, [r4, #0]
 801923c:	f8c0 8000 	str.w	r8, [r0]
 8019240:	4604      	mov	r4, r0
 8019242:	e7e4      	b.n	801920e <__pow5mult+0x5a>
 8019244:	4638      	mov	r0, r7
 8019246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801924a:	bf00      	nop
 801924c:	0801aaf0 	.word	0x0801aaf0

08019250 <__lshift>:
 8019250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019254:	460c      	mov	r4, r1
 8019256:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801925a:	6923      	ldr	r3, [r4, #16]
 801925c:	6849      	ldr	r1, [r1, #4]
 801925e:	eb0a 0903 	add.w	r9, sl, r3
 8019262:	68a3      	ldr	r3, [r4, #8]
 8019264:	4607      	mov	r7, r0
 8019266:	4616      	mov	r6, r2
 8019268:	f109 0501 	add.w	r5, r9, #1
 801926c:	42ab      	cmp	r3, r5
 801926e:	db32      	blt.n	80192d6 <__lshift+0x86>
 8019270:	4638      	mov	r0, r7
 8019272:	f7ff fdee 	bl	8018e52 <_Balloc>
 8019276:	2300      	movs	r3, #0
 8019278:	4680      	mov	r8, r0
 801927a:	f100 0114 	add.w	r1, r0, #20
 801927e:	461a      	mov	r2, r3
 8019280:	4553      	cmp	r3, sl
 8019282:	db2b      	blt.n	80192dc <__lshift+0x8c>
 8019284:	6920      	ldr	r0, [r4, #16]
 8019286:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801928a:	f104 0314 	add.w	r3, r4, #20
 801928e:	f016 021f 	ands.w	r2, r6, #31
 8019292:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019296:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801929a:	d025      	beq.n	80192e8 <__lshift+0x98>
 801929c:	f1c2 0e20 	rsb	lr, r2, #32
 80192a0:	2000      	movs	r0, #0
 80192a2:	681e      	ldr	r6, [r3, #0]
 80192a4:	468a      	mov	sl, r1
 80192a6:	4096      	lsls	r6, r2
 80192a8:	4330      	orrs	r0, r6
 80192aa:	f84a 0b04 	str.w	r0, [sl], #4
 80192ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80192b2:	459c      	cmp	ip, r3
 80192b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80192b8:	d814      	bhi.n	80192e4 <__lshift+0x94>
 80192ba:	6048      	str	r0, [r1, #4]
 80192bc:	b108      	cbz	r0, 80192c2 <__lshift+0x72>
 80192be:	f109 0502 	add.w	r5, r9, #2
 80192c2:	3d01      	subs	r5, #1
 80192c4:	4638      	mov	r0, r7
 80192c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80192ca:	4621      	mov	r1, r4
 80192cc:	f7ff fdf5 	bl	8018eba <_Bfree>
 80192d0:	4640      	mov	r0, r8
 80192d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192d6:	3101      	adds	r1, #1
 80192d8:	005b      	lsls	r3, r3, #1
 80192da:	e7c7      	b.n	801926c <__lshift+0x1c>
 80192dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80192e0:	3301      	adds	r3, #1
 80192e2:	e7cd      	b.n	8019280 <__lshift+0x30>
 80192e4:	4651      	mov	r1, sl
 80192e6:	e7dc      	b.n	80192a2 <__lshift+0x52>
 80192e8:	3904      	subs	r1, #4
 80192ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80192ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80192f2:	459c      	cmp	ip, r3
 80192f4:	d8f9      	bhi.n	80192ea <__lshift+0x9a>
 80192f6:	e7e4      	b.n	80192c2 <__lshift+0x72>

080192f8 <__mcmp>:
 80192f8:	6903      	ldr	r3, [r0, #16]
 80192fa:	690a      	ldr	r2, [r1, #16]
 80192fc:	1a9b      	subs	r3, r3, r2
 80192fe:	b530      	push	{r4, r5, lr}
 8019300:	d10c      	bne.n	801931c <__mcmp+0x24>
 8019302:	0092      	lsls	r2, r2, #2
 8019304:	3014      	adds	r0, #20
 8019306:	3114      	adds	r1, #20
 8019308:	1884      	adds	r4, r0, r2
 801930a:	4411      	add	r1, r2
 801930c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019310:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019314:	4295      	cmp	r5, r2
 8019316:	d003      	beq.n	8019320 <__mcmp+0x28>
 8019318:	d305      	bcc.n	8019326 <__mcmp+0x2e>
 801931a:	2301      	movs	r3, #1
 801931c:	4618      	mov	r0, r3
 801931e:	bd30      	pop	{r4, r5, pc}
 8019320:	42a0      	cmp	r0, r4
 8019322:	d3f3      	bcc.n	801930c <__mcmp+0x14>
 8019324:	e7fa      	b.n	801931c <__mcmp+0x24>
 8019326:	f04f 33ff 	mov.w	r3, #4294967295
 801932a:	e7f7      	b.n	801931c <__mcmp+0x24>

0801932c <__mdiff>:
 801932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019330:	460d      	mov	r5, r1
 8019332:	4607      	mov	r7, r0
 8019334:	4611      	mov	r1, r2
 8019336:	4628      	mov	r0, r5
 8019338:	4614      	mov	r4, r2
 801933a:	f7ff ffdd 	bl	80192f8 <__mcmp>
 801933e:	1e06      	subs	r6, r0, #0
 8019340:	d108      	bne.n	8019354 <__mdiff+0x28>
 8019342:	4631      	mov	r1, r6
 8019344:	4638      	mov	r0, r7
 8019346:	f7ff fd84 	bl	8018e52 <_Balloc>
 801934a:	2301      	movs	r3, #1
 801934c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8019350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019354:	bfa4      	itt	ge
 8019356:	4623      	movge	r3, r4
 8019358:	462c      	movge	r4, r5
 801935a:	4638      	mov	r0, r7
 801935c:	6861      	ldr	r1, [r4, #4]
 801935e:	bfa6      	itte	ge
 8019360:	461d      	movge	r5, r3
 8019362:	2600      	movge	r6, #0
 8019364:	2601      	movlt	r6, #1
 8019366:	f7ff fd74 	bl	8018e52 <_Balloc>
 801936a:	692b      	ldr	r3, [r5, #16]
 801936c:	60c6      	str	r6, [r0, #12]
 801936e:	6926      	ldr	r6, [r4, #16]
 8019370:	f105 0914 	add.w	r9, r5, #20
 8019374:	f104 0214 	add.w	r2, r4, #20
 8019378:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801937c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8019380:	f100 0514 	add.w	r5, r0, #20
 8019384:	f04f 0e00 	mov.w	lr, #0
 8019388:	f852 ab04 	ldr.w	sl, [r2], #4
 801938c:	f859 4b04 	ldr.w	r4, [r9], #4
 8019390:	fa1e f18a 	uxtah	r1, lr, sl
 8019394:	b2a3      	uxth	r3, r4
 8019396:	1ac9      	subs	r1, r1, r3
 8019398:	0c23      	lsrs	r3, r4, #16
 801939a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801939e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80193a2:	b289      	uxth	r1, r1
 80193a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80193a8:	45c8      	cmp	r8, r9
 80193aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80193ae:	4694      	mov	ip, r2
 80193b0:	f845 3b04 	str.w	r3, [r5], #4
 80193b4:	d8e8      	bhi.n	8019388 <__mdiff+0x5c>
 80193b6:	45bc      	cmp	ip, r7
 80193b8:	d304      	bcc.n	80193c4 <__mdiff+0x98>
 80193ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80193be:	b183      	cbz	r3, 80193e2 <__mdiff+0xb6>
 80193c0:	6106      	str	r6, [r0, #16]
 80193c2:	e7c5      	b.n	8019350 <__mdiff+0x24>
 80193c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80193c8:	fa1e f381 	uxtah	r3, lr, r1
 80193cc:	141a      	asrs	r2, r3, #16
 80193ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80193d2:	b29b      	uxth	r3, r3
 80193d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80193d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80193dc:	f845 3b04 	str.w	r3, [r5], #4
 80193e0:	e7e9      	b.n	80193b6 <__mdiff+0x8a>
 80193e2:	3e01      	subs	r6, #1
 80193e4:	e7e9      	b.n	80193ba <__mdiff+0x8e>
	...

080193e8 <__ulp>:
 80193e8:	4b12      	ldr	r3, [pc, #72]	; (8019434 <__ulp+0x4c>)
 80193ea:	ee10 2a90 	vmov	r2, s1
 80193ee:	401a      	ands	r2, r3
 80193f0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	dd04      	ble.n	8019402 <__ulp+0x1a>
 80193f8:	2000      	movs	r0, #0
 80193fa:	4619      	mov	r1, r3
 80193fc:	ec41 0b10 	vmov	d0, r0, r1
 8019400:	4770      	bx	lr
 8019402:	425b      	negs	r3, r3
 8019404:	151b      	asrs	r3, r3, #20
 8019406:	2b13      	cmp	r3, #19
 8019408:	f04f 0000 	mov.w	r0, #0
 801940c:	f04f 0100 	mov.w	r1, #0
 8019410:	dc04      	bgt.n	801941c <__ulp+0x34>
 8019412:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8019416:	fa42 f103 	asr.w	r1, r2, r3
 801941a:	e7ef      	b.n	80193fc <__ulp+0x14>
 801941c:	3b14      	subs	r3, #20
 801941e:	2b1e      	cmp	r3, #30
 8019420:	f04f 0201 	mov.w	r2, #1
 8019424:	bfda      	itte	le
 8019426:	f1c3 031f 	rsble	r3, r3, #31
 801942a:	fa02 f303 	lslle.w	r3, r2, r3
 801942e:	4613      	movgt	r3, r2
 8019430:	4618      	mov	r0, r3
 8019432:	e7e3      	b.n	80193fc <__ulp+0x14>
 8019434:	7ff00000 	.word	0x7ff00000

08019438 <__b2d>:
 8019438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801943a:	6905      	ldr	r5, [r0, #16]
 801943c:	f100 0714 	add.w	r7, r0, #20
 8019440:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019444:	1f2e      	subs	r6, r5, #4
 8019446:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801944a:	4620      	mov	r0, r4
 801944c:	f7ff fdc5 	bl	8018fda <__hi0bits>
 8019450:	f1c0 0320 	rsb	r3, r0, #32
 8019454:	280a      	cmp	r0, #10
 8019456:	600b      	str	r3, [r1, #0]
 8019458:	f8df c074 	ldr.w	ip, [pc, #116]	; 80194d0 <__b2d+0x98>
 801945c:	dc14      	bgt.n	8019488 <__b2d+0x50>
 801945e:	f1c0 0e0b 	rsb	lr, r0, #11
 8019462:	fa24 f10e 	lsr.w	r1, r4, lr
 8019466:	42b7      	cmp	r7, r6
 8019468:	ea41 030c 	orr.w	r3, r1, ip
 801946c:	bf34      	ite	cc
 801946e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019472:	2100      	movcs	r1, #0
 8019474:	3015      	adds	r0, #21
 8019476:	fa04 f000 	lsl.w	r0, r4, r0
 801947a:	fa21 f10e 	lsr.w	r1, r1, lr
 801947e:	ea40 0201 	orr.w	r2, r0, r1
 8019482:	ec43 2b10 	vmov	d0, r2, r3
 8019486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019488:	42b7      	cmp	r7, r6
 801948a:	bf3a      	itte	cc
 801948c:	f1a5 0608 	subcc.w	r6, r5, #8
 8019490:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019494:	2100      	movcs	r1, #0
 8019496:	380b      	subs	r0, #11
 8019498:	d015      	beq.n	80194c6 <__b2d+0x8e>
 801949a:	4084      	lsls	r4, r0
 801949c:	f1c0 0520 	rsb	r5, r0, #32
 80194a0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80194a4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80194a8:	42be      	cmp	r6, r7
 80194aa:	fa21 fc05 	lsr.w	ip, r1, r5
 80194ae:	ea44 030c 	orr.w	r3, r4, ip
 80194b2:	bf8c      	ite	hi
 80194b4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80194b8:	2400      	movls	r4, #0
 80194ba:	fa01 f000 	lsl.w	r0, r1, r0
 80194be:	40ec      	lsrs	r4, r5
 80194c0:	ea40 0204 	orr.w	r2, r0, r4
 80194c4:	e7dd      	b.n	8019482 <__b2d+0x4a>
 80194c6:	ea44 030c 	orr.w	r3, r4, ip
 80194ca:	460a      	mov	r2, r1
 80194cc:	e7d9      	b.n	8019482 <__b2d+0x4a>
 80194ce:	bf00      	nop
 80194d0:	3ff00000 	.word	0x3ff00000

080194d4 <__d2b>:
 80194d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80194d8:	460e      	mov	r6, r1
 80194da:	2101      	movs	r1, #1
 80194dc:	ec59 8b10 	vmov	r8, r9, d0
 80194e0:	4615      	mov	r5, r2
 80194e2:	f7ff fcb6 	bl	8018e52 <_Balloc>
 80194e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80194ea:	4607      	mov	r7, r0
 80194ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80194f0:	bb34      	cbnz	r4, 8019540 <__d2b+0x6c>
 80194f2:	9301      	str	r3, [sp, #4]
 80194f4:	f1b8 0300 	subs.w	r3, r8, #0
 80194f8:	d027      	beq.n	801954a <__d2b+0x76>
 80194fa:	a802      	add	r0, sp, #8
 80194fc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8019500:	f7ff fd8a 	bl	8019018 <__lo0bits>
 8019504:	9900      	ldr	r1, [sp, #0]
 8019506:	b1f0      	cbz	r0, 8019546 <__d2b+0x72>
 8019508:	9a01      	ldr	r2, [sp, #4]
 801950a:	f1c0 0320 	rsb	r3, r0, #32
 801950e:	fa02 f303 	lsl.w	r3, r2, r3
 8019512:	430b      	orrs	r3, r1
 8019514:	40c2      	lsrs	r2, r0
 8019516:	617b      	str	r3, [r7, #20]
 8019518:	9201      	str	r2, [sp, #4]
 801951a:	9b01      	ldr	r3, [sp, #4]
 801951c:	61bb      	str	r3, [r7, #24]
 801951e:	2b00      	cmp	r3, #0
 8019520:	bf14      	ite	ne
 8019522:	2102      	movne	r1, #2
 8019524:	2101      	moveq	r1, #1
 8019526:	6139      	str	r1, [r7, #16]
 8019528:	b1c4      	cbz	r4, 801955c <__d2b+0x88>
 801952a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801952e:	4404      	add	r4, r0
 8019530:	6034      	str	r4, [r6, #0]
 8019532:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019536:	6028      	str	r0, [r5, #0]
 8019538:	4638      	mov	r0, r7
 801953a:	b003      	add	sp, #12
 801953c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019544:	e7d5      	b.n	80194f2 <__d2b+0x1e>
 8019546:	6179      	str	r1, [r7, #20]
 8019548:	e7e7      	b.n	801951a <__d2b+0x46>
 801954a:	a801      	add	r0, sp, #4
 801954c:	f7ff fd64 	bl	8019018 <__lo0bits>
 8019550:	9b01      	ldr	r3, [sp, #4]
 8019552:	617b      	str	r3, [r7, #20]
 8019554:	2101      	movs	r1, #1
 8019556:	6139      	str	r1, [r7, #16]
 8019558:	3020      	adds	r0, #32
 801955a:	e7e5      	b.n	8019528 <__d2b+0x54>
 801955c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019560:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019564:	6030      	str	r0, [r6, #0]
 8019566:	6918      	ldr	r0, [r3, #16]
 8019568:	f7ff fd37 	bl	8018fda <__hi0bits>
 801956c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019570:	e7e1      	b.n	8019536 <__d2b+0x62>

08019572 <__ratio>:
 8019572:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019576:	4688      	mov	r8, r1
 8019578:	4669      	mov	r1, sp
 801957a:	4681      	mov	r9, r0
 801957c:	f7ff ff5c 	bl	8019438 <__b2d>
 8019580:	a901      	add	r1, sp, #4
 8019582:	4640      	mov	r0, r8
 8019584:	ec57 6b10 	vmov	r6, r7, d0
 8019588:	f7ff ff56 	bl	8019438 <__b2d>
 801958c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019590:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019594:	eba3 0c02 	sub.w	ip, r3, r2
 8019598:	e9dd 3200 	ldrd	r3, r2, [sp]
 801959c:	1a9b      	subs	r3, r3, r2
 801959e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80195a2:	ec5b ab10 	vmov	sl, fp, d0
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	bfce      	itee	gt
 80195aa:	463a      	movgt	r2, r7
 80195ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80195b0:	465a      	movle	r2, fp
 80195b2:	4659      	mov	r1, fp
 80195b4:	463d      	mov	r5, r7
 80195b6:	bfd4      	ite	le
 80195b8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80195bc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80195c0:	4630      	mov	r0, r6
 80195c2:	ee10 2a10 	vmov	r2, s0
 80195c6:	460b      	mov	r3, r1
 80195c8:	4629      	mov	r1, r5
 80195ca:	f7e7 f957 	bl	800087c <__aeabi_ddiv>
 80195ce:	ec41 0b10 	vmov	d0, r0, r1
 80195d2:	b003      	add	sp, #12
 80195d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080195d8 <__copybits>:
 80195d8:	3901      	subs	r1, #1
 80195da:	b510      	push	{r4, lr}
 80195dc:	1149      	asrs	r1, r1, #5
 80195de:	6914      	ldr	r4, [r2, #16]
 80195e0:	3101      	adds	r1, #1
 80195e2:	f102 0314 	add.w	r3, r2, #20
 80195e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80195ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80195ee:	42a3      	cmp	r3, r4
 80195f0:	4602      	mov	r2, r0
 80195f2:	d303      	bcc.n	80195fc <__copybits+0x24>
 80195f4:	2300      	movs	r3, #0
 80195f6:	428a      	cmp	r2, r1
 80195f8:	d305      	bcc.n	8019606 <__copybits+0x2e>
 80195fa:	bd10      	pop	{r4, pc}
 80195fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8019600:	f840 2b04 	str.w	r2, [r0], #4
 8019604:	e7f3      	b.n	80195ee <__copybits+0x16>
 8019606:	f842 3b04 	str.w	r3, [r2], #4
 801960a:	e7f4      	b.n	80195f6 <__copybits+0x1e>

0801960c <__any_on>:
 801960c:	f100 0214 	add.w	r2, r0, #20
 8019610:	6900      	ldr	r0, [r0, #16]
 8019612:	114b      	asrs	r3, r1, #5
 8019614:	4298      	cmp	r0, r3
 8019616:	b510      	push	{r4, lr}
 8019618:	db11      	blt.n	801963e <__any_on+0x32>
 801961a:	dd0a      	ble.n	8019632 <__any_on+0x26>
 801961c:	f011 011f 	ands.w	r1, r1, #31
 8019620:	d007      	beq.n	8019632 <__any_on+0x26>
 8019622:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019626:	fa24 f001 	lsr.w	r0, r4, r1
 801962a:	fa00 f101 	lsl.w	r1, r0, r1
 801962e:	428c      	cmp	r4, r1
 8019630:	d10b      	bne.n	801964a <__any_on+0x3e>
 8019632:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019636:	4293      	cmp	r3, r2
 8019638:	d803      	bhi.n	8019642 <__any_on+0x36>
 801963a:	2000      	movs	r0, #0
 801963c:	bd10      	pop	{r4, pc}
 801963e:	4603      	mov	r3, r0
 8019640:	e7f7      	b.n	8019632 <__any_on+0x26>
 8019642:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019646:	2900      	cmp	r1, #0
 8019648:	d0f5      	beq.n	8019636 <__any_on+0x2a>
 801964a:	2001      	movs	r0, #1
 801964c:	e7f6      	b.n	801963c <__any_on+0x30>

0801964e <_calloc_r>:
 801964e:	b538      	push	{r3, r4, r5, lr}
 8019650:	fb02 f401 	mul.w	r4, r2, r1
 8019654:	4621      	mov	r1, r4
 8019656:	f000 f857 	bl	8019708 <_malloc_r>
 801965a:	4605      	mov	r5, r0
 801965c:	b118      	cbz	r0, 8019666 <_calloc_r+0x18>
 801965e:	4622      	mov	r2, r4
 8019660:	2100      	movs	r1, #0
 8019662:	f7fc fc9f 	bl	8015fa4 <memset>
 8019666:	4628      	mov	r0, r5
 8019668:	bd38      	pop	{r3, r4, r5, pc}
	...

0801966c <_free_r>:
 801966c:	b538      	push	{r3, r4, r5, lr}
 801966e:	4605      	mov	r5, r0
 8019670:	2900      	cmp	r1, #0
 8019672:	d045      	beq.n	8019700 <_free_r+0x94>
 8019674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019678:	1f0c      	subs	r4, r1, #4
 801967a:	2b00      	cmp	r3, #0
 801967c:	bfb8      	it	lt
 801967e:	18e4      	addlt	r4, r4, r3
 8019680:	f000 fe30 	bl	801a2e4 <__malloc_lock>
 8019684:	4a1f      	ldr	r2, [pc, #124]	; (8019704 <_free_r+0x98>)
 8019686:	6813      	ldr	r3, [r2, #0]
 8019688:	4610      	mov	r0, r2
 801968a:	b933      	cbnz	r3, 801969a <_free_r+0x2e>
 801968c:	6063      	str	r3, [r4, #4]
 801968e:	6014      	str	r4, [r2, #0]
 8019690:	4628      	mov	r0, r5
 8019692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019696:	f000 be26 	b.w	801a2e6 <__malloc_unlock>
 801969a:	42a3      	cmp	r3, r4
 801969c:	d90c      	bls.n	80196b8 <_free_r+0x4c>
 801969e:	6821      	ldr	r1, [r4, #0]
 80196a0:	1862      	adds	r2, r4, r1
 80196a2:	4293      	cmp	r3, r2
 80196a4:	bf04      	itt	eq
 80196a6:	681a      	ldreq	r2, [r3, #0]
 80196a8:	685b      	ldreq	r3, [r3, #4]
 80196aa:	6063      	str	r3, [r4, #4]
 80196ac:	bf04      	itt	eq
 80196ae:	1852      	addeq	r2, r2, r1
 80196b0:	6022      	streq	r2, [r4, #0]
 80196b2:	6004      	str	r4, [r0, #0]
 80196b4:	e7ec      	b.n	8019690 <_free_r+0x24>
 80196b6:	4613      	mov	r3, r2
 80196b8:	685a      	ldr	r2, [r3, #4]
 80196ba:	b10a      	cbz	r2, 80196c0 <_free_r+0x54>
 80196bc:	42a2      	cmp	r2, r4
 80196be:	d9fa      	bls.n	80196b6 <_free_r+0x4a>
 80196c0:	6819      	ldr	r1, [r3, #0]
 80196c2:	1858      	adds	r0, r3, r1
 80196c4:	42a0      	cmp	r0, r4
 80196c6:	d10b      	bne.n	80196e0 <_free_r+0x74>
 80196c8:	6820      	ldr	r0, [r4, #0]
 80196ca:	4401      	add	r1, r0
 80196cc:	1858      	adds	r0, r3, r1
 80196ce:	4282      	cmp	r2, r0
 80196d0:	6019      	str	r1, [r3, #0]
 80196d2:	d1dd      	bne.n	8019690 <_free_r+0x24>
 80196d4:	6810      	ldr	r0, [r2, #0]
 80196d6:	6852      	ldr	r2, [r2, #4]
 80196d8:	605a      	str	r2, [r3, #4]
 80196da:	4401      	add	r1, r0
 80196dc:	6019      	str	r1, [r3, #0]
 80196de:	e7d7      	b.n	8019690 <_free_r+0x24>
 80196e0:	d902      	bls.n	80196e8 <_free_r+0x7c>
 80196e2:	230c      	movs	r3, #12
 80196e4:	602b      	str	r3, [r5, #0]
 80196e6:	e7d3      	b.n	8019690 <_free_r+0x24>
 80196e8:	6820      	ldr	r0, [r4, #0]
 80196ea:	1821      	adds	r1, r4, r0
 80196ec:	428a      	cmp	r2, r1
 80196ee:	bf04      	itt	eq
 80196f0:	6811      	ldreq	r1, [r2, #0]
 80196f2:	6852      	ldreq	r2, [r2, #4]
 80196f4:	6062      	str	r2, [r4, #4]
 80196f6:	bf04      	itt	eq
 80196f8:	1809      	addeq	r1, r1, r0
 80196fa:	6021      	streq	r1, [r4, #0]
 80196fc:	605c      	str	r4, [r3, #4]
 80196fe:	e7c7      	b.n	8019690 <_free_r+0x24>
 8019700:	bd38      	pop	{r3, r4, r5, pc}
 8019702:	bf00      	nop
 8019704:	20045364 	.word	0x20045364

08019708 <_malloc_r>:
 8019708:	b570      	push	{r4, r5, r6, lr}
 801970a:	1ccd      	adds	r5, r1, #3
 801970c:	f025 0503 	bic.w	r5, r5, #3
 8019710:	3508      	adds	r5, #8
 8019712:	2d0c      	cmp	r5, #12
 8019714:	bf38      	it	cc
 8019716:	250c      	movcc	r5, #12
 8019718:	2d00      	cmp	r5, #0
 801971a:	4606      	mov	r6, r0
 801971c:	db01      	blt.n	8019722 <_malloc_r+0x1a>
 801971e:	42a9      	cmp	r1, r5
 8019720:	d903      	bls.n	801972a <_malloc_r+0x22>
 8019722:	230c      	movs	r3, #12
 8019724:	6033      	str	r3, [r6, #0]
 8019726:	2000      	movs	r0, #0
 8019728:	bd70      	pop	{r4, r5, r6, pc}
 801972a:	f000 fddb 	bl	801a2e4 <__malloc_lock>
 801972e:	4a21      	ldr	r2, [pc, #132]	; (80197b4 <_malloc_r+0xac>)
 8019730:	6814      	ldr	r4, [r2, #0]
 8019732:	4621      	mov	r1, r4
 8019734:	b991      	cbnz	r1, 801975c <_malloc_r+0x54>
 8019736:	4c20      	ldr	r4, [pc, #128]	; (80197b8 <_malloc_r+0xb0>)
 8019738:	6823      	ldr	r3, [r4, #0]
 801973a:	b91b      	cbnz	r3, 8019744 <_malloc_r+0x3c>
 801973c:	4630      	mov	r0, r6
 801973e:	f000 fc91 	bl	801a064 <_sbrk_r>
 8019742:	6020      	str	r0, [r4, #0]
 8019744:	4629      	mov	r1, r5
 8019746:	4630      	mov	r0, r6
 8019748:	f000 fc8c 	bl	801a064 <_sbrk_r>
 801974c:	1c43      	adds	r3, r0, #1
 801974e:	d124      	bne.n	801979a <_malloc_r+0x92>
 8019750:	230c      	movs	r3, #12
 8019752:	6033      	str	r3, [r6, #0]
 8019754:	4630      	mov	r0, r6
 8019756:	f000 fdc6 	bl	801a2e6 <__malloc_unlock>
 801975a:	e7e4      	b.n	8019726 <_malloc_r+0x1e>
 801975c:	680b      	ldr	r3, [r1, #0]
 801975e:	1b5b      	subs	r3, r3, r5
 8019760:	d418      	bmi.n	8019794 <_malloc_r+0x8c>
 8019762:	2b0b      	cmp	r3, #11
 8019764:	d90f      	bls.n	8019786 <_malloc_r+0x7e>
 8019766:	600b      	str	r3, [r1, #0]
 8019768:	50cd      	str	r5, [r1, r3]
 801976a:	18cc      	adds	r4, r1, r3
 801976c:	4630      	mov	r0, r6
 801976e:	f000 fdba 	bl	801a2e6 <__malloc_unlock>
 8019772:	f104 000b 	add.w	r0, r4, #11
 8019776:	1d23      	adds	r3, r4, #4
 8019778:	f020 0007 	bic.w	r0, r0, #7
 801977c:	1ac3      	subs	r3, r0, r3
 801977e:	d0d3      	beq.n	8019728 <_malloc_r+0x20>
 8019780:	425a      	negs	r2, r3
 8019782:	50e2      	str	r2, [r4, r3]
 8019784:	e7d0      	b.n	8019728 <_malloc_r+0x20>
 8019786:	428c      	cmp	r4, r1
 8019788:	684b      	ldr	r3, [r1, #4]
 801978a:	bf16      	itet	ne
 801978c:	6063      	strne	r3, [r4, #4]
 801978e:	6013      	streq	r3, [r2, #0]
 8019790:	460c      	movne	r4, r1
 8019792:	e7eb      	b.n	801976c <_malloc_r+0x64>
 8019794:	460c      	mov	r4, r1
 8019796:	6849      	ldr	r1, [r1, #4]
 8019798:	e7cc      	b.n	8019734 <_malloc_r+0x2c>
 801979a:	1cc4      	adds	r4, r0, #3
 801979c:	f024 0403 	bic.w	r4, r4, #3
 80197a0:	42a0      	cmp	r0, r4
 80197a2:	d005      	beq.n	80197b0 <_malloc_r+0xa8>
 80197a4:	1a21      	subs	r1, r4, r0
 80197a6:	4630      	mov	r0, r6
 80197a8:	f000 fc5c 	bl	801a064 <_sbrk_r>
 80197ac:	3001      	adds	r0, #1
 80197ae:	d0cf      	beq.n	8019750 <_malloc_r+0x48>
 80197b0:	6025      	str	r5, [r4, #0]
 80197b2:	e7db      	b.n	801976c <_malloc_r+0x64>
 80197b4:	20045364 	.word	0x20045364
 80197b8:	20045368 	.word	0x20045368

080197bc <__ssputs_r>:
 80197bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197c0:	688e      	ldr	r6, [r1, #8]
 80197c2:	429e      	cmp	r6, r3
 80197c4:	4682      	mov	sl, r0
 80197c6:	460c      	mov	r4, r1
 80197c8:	4690      	mov	r8, r2
 80197ca:	4699      	mov	r9, r3
 80197cc:	d837      	bhi.n	801983e <__ssputs_r+0x82>
 80197ce:	898a      	ldrh	r2, [r1, #12]
 80197d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80197d4:	d031      	beq.n	801983a <__ssputs_r+0x7e>
 80197d6:	6825      	ldr	r5, [r4, #0]
 80197d8:	6909      	ldr	r1, [r1, #16]
 80197da:	1a6f      	subs	r7, r5, r1
 80197dc:	6965      	ldr	r5, [r4, #20]
 80197de:	2302      	movs	r3, #2
 80197e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80197e8:	f109 0301 	add.w	r3, r9, #1
 80197ec:	443b      	add	r3, r7
 80197ee:	429d      	cmp	r5, r3
 80197f0:	bf38      	it	cc
 80197f2:	461d      	movcc	r5, r3
 80197f4:	0553      	lsls	r3, r2, #21
 80197f6:	d530      	bpl.n	801985a <__ssputs_r+0x9e>
 80197f8:	4629      	mov	r1, r5
 80197fa:	f7ff ff85 	bl	8019708 <_malloc_r>
 80197fe:	4606      	mov	r6, r0
 8019800:	b950      	cbnz	r0, 8019818 <__ssputs_r+0x5c>
 8019802:	230c      	movs	r3, #12
 8019804:	f8ca 3000 	str.w	r3, [sl]
 8019808:	89a3      	ldrh	r3, [r4, #12]
 801980a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801980e:	81a3      	strh	r3, [r4, #12]
 8019810:	f04f 30ff 	mov.w	r0, #4294967295
 8019814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019818:	463a      	mov	r2, r7
 801981a:	6921      	ldr	r1, [r4, #16]
 801981c:	f7ff fb0e 	bl	8018e3c <memcpy>
 8019820:	89a3      	ldrh	r3, [r4, #12]
 8019822:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801982a:	81a3      	strh	r3, [r4, #12]
 801982c:	6126      	str	r6, [r4, #16]
 801982e:	6165      	str	r5, [r4, #20]
 8019830:	443e      	add	r6, r7
 8019832:	1bed      	subs	r5, r5, r7
 8019834:	6026      	str	r6, [r4, #0]
 8019836:	60a5      	str	r5, [r4, #8]
 8019838:	464e      	mov	r6, r9
 801983a:	454e      	cmp	r6, r9
 801983c:	d900      	bls.n	8019840 <__ssputs_r+0x84>
 801983e:	464e      	mov	r6, r9
 8019840:	4632      	mov	r2, r6
 8019842:	4641      	mov	r1, r8
 8019844:	6820      	ldr	r0, [r4, #0]
 8019846:	f000 fd34 	bl	801a2b2 <memmove>
 801984a:	68a3      	ldr	r3, [r4, #8]
 801984c:	1b9b      	subs	r3, r3, r6
 801984e:	60a3      	str	r3, [r4, #8]
 8019850:	6823      	ldr	r3, [r4, #0]
 8019852:	441e      	add	r6, r3
 8019854:	6026      	str	r6, [r4, #0]
 8019856:	2000      	movs	r0, #0
 8019858:	e7dc      	b.n	8019814 <__ssputs_r+0x58>
 801985a:	462a      	mov	r2, r5
 801985c:	f000 fd44 	bl	801a2e8 <_realloc_r>
 8019860:	4606      	mov	r6, r0
 8019862:	2800      	cmp	r0, #0
 8019864:	d1e2      	bne.n	801982c <__ssputs_r+0x70>
 8019866:	6921      	ldr	r1, [r4, #16]
 8019868:	4650      	mov	r0, sl
 801986a:	f7ff feff 	bl	801966c <_free_r>
 801986e:	e7c8      	b.n	8019802 <__ssputs_r+0x46>

08019870 <_svfiprintf_r>:
 8019870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019874:	461d      	mov	r5, r3
 8019876:	898b      	ldrh	r3, [r1, #12]
 8019878:	061f      	lsls	r7, r3, #24
 801987a:	b09d      	sub	sp, #116	; 0x74
 801987c:	4680      	mov	r8, r0
 801987e:	460c      	mov	r4, r1
 8019880:	4616      	mov	r6, r2
 8019882:	d50f      	bpl.n	80198a4 <_svfiprintf_r+0x34>
 8019884:	690b      	ldr	r3, [r1, #16]
 8019886:	b96b      	cbnz	r3, 80198a4 <_svfiprintf_r+0x34>
 8019888:	2140      	movs	r1, #64	; 0x40
 801988a:	f7ff ff3d 	bl	8019708 <_malloc_r>
 801988e:	6020      	str	r0, [r4, #0]
 8019890:	6120      	str	r0, [r4, #16]
 8019892:	b928      	cbnz	r0, 80198a0 <_svfiprintf_r+0x30>
 8019894:	230c      	movs	r3, #12
 8019896:	f8c8 3000 	str.w	r3, [r8]
 801989a:	f04f 30ff 	mov.w	r0, #4294967295
 801989e:	e0c8      	b.n	8019a32 <_svfiprintf_r+0x1c2>
 80198a0:	2340      	movs	r3, #64	; 0x40
 80198a2:	6163      	str	r3, [r4, #20]
 80198a4:	2300      	movs	r3, #0
 80198a6:	9309      	str	r3, [sp, #36]	; 0x24
 80198a8:	2320      	movs	r3, #32
 80198aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80198ae:	2330      	movs	r3, #48	; 0x30
 80198b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80198b4:	9503      	str	r5, [sp, #12]
 80198b6:	f04f 0b01 	mov.w	fp, #1
 80198ba:	4637      	mov	r7, r6
 80198bc:	463d      	mov	r5, r7
 80198be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80198c2:	b10b      	cbz	r3, 80198c8 <_svfiprintf_r+0x58>
 80198c4:	2b25      	cmp	r3, #37	; 0x25
 80198c6:	d13e      	bne.n	8019946 <_svfiprintf_r+0xd6>
 80198c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80198cc:	d00b      	beq.n	80198e6 <_svfiprintf_r+0x76>
 80198ce:	4653      	mov	r3, sl
 80198d0:	4632      	mov	r2, r6
 80198d2:	4621      	mov	r1, r4
 80198d4:	4640      	mov	r0, r8
 80198d6:	f7ff ff71 	bl	80197bc <__ssputs_r>
 80198da:	3001      	adds	r0, #1
 80198dc:	f000 80a4 	beq.w	8019a28 <_svfiprintf_r+0x1b8>
 80198e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198e2:	4453      	add	r3, sl
 80198e4:	9309      	str	r3, [sp, #36]	; 0x24
 80198e6:	783b      	ldrb	r3, [r7, #0]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	f000 809d 	beq.w	8019a28 <_svfiprintf_r+0x1b8>
 80198ee:	2300      	movs	r3, #0
 80198f0:	f04f 32ff 	mov.w	r2, #4294967295
 80198f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198f8:	9304      	str	r3, [sp, #16]
 80198fa:	9307      	str	r3, [sp, #28]
 80198fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019900:	931a      	str	r3, [sp, #104]	; 0x68
 8019902:	462f      	mov	r7, r5
 8019904:	2205      	movs	r2, #5
 8019906:	f817 1b01 	ldrb.w	r1, [r7], #1
 801990a:	4850      	ldr	r0, [pc, #320]	; (8019a4c <_svfiprintf_r+0x1dc>)
 801990c:	f7e6 fc80 	bl	8000210 <memchr>
 8019910:	9b04      	ldr	r3, [sp, #16]
 8019912:	b9d0      	cbnz	r0, 801994a <_svfiprintf_r+0xda>
 8019914:	06d9      	lsls	r1, r3, #27
 8019916:	bf44      	itt	mi
 8019918:	2220      	movmi	r2, #32
 801991a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801991e:	071a      	lsls	r2, r3, #28
 8019920:	bf44      	itt	mi
 8019922:	222b      	movmi	r2, #43	; 0x2b
 8019924:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019928:	782a      	ldrb	r2, [r5, #0]
 801992a:	2a2a      	cmp	r2, #42	; 0x2a
 801992c:	d015      	beq.n	801995a <_svfiprintf_r+0xea>
 801992e:	9a07      	ldr	r2, [sp, #28]
 8019930:	462f      	mov	r7, r5
 8019932:	2000      	movs	r0, #0
 8019934:	250a      	movs	r5, #10
 8019936:	4639      	mov	r1, r7
 8019938:	f811 3b01 	ldrb.w	r3, [r1], #1
 801993c:	3b30      	subs	r3, #48	; 0x30
 801993e:	2b09      	cmp	r3, #9
 8019940:	d94d      	bls.n	80199de <_svfiprintf_r+0x16e>
 8019942:	b1b8      	cbz	r0, 8019974 <_svfiprintf_r+0x104>
 8019944:	e00f      	b.n	8019966 <_svfiprintf_r+0xf6>
 8019946:	462f      	mov	r7, r5
 8019948:	e7b8      	b.n	80198bc <_svfiprintf_r+0x4c>
 801994a:	4a40      	ldr	r2, [pc, #256]	; (8019a4c <_svfiprintf_r+0x1dc>)
 801994c:	1a80      	subs	r0, r0, r2
 801994e:	fa0b f000 	lsl.w	r0, fp, r0
 8019952:	4318      	orrs	r0, r3
 8019954:	9004      	str	r0, [sp, #16]
 8019956:	463d      	mov	r5, r7
 8019958:	e7d3      	b.n	8019902 <_svfiprintf_r+0x92>
 801995a:	9a03      	ldr	r2, [sp, #12]
 801995c:	1d11      	adds	r1, r2, #4
 801995e:	6812      	ldr	r2, [r2, #0]
 8019960:	9103      	str	r1, [sp, #12]
 8019962:	2a00      	cmp	r2, #0
 8019964:	db01      	blt.n	801996a <_svfiprintf_r+0xfa>
 8019966:	9207      	str	r2, [sp, #28]
 8019968:	e004      	b.n	8019974 <_svfiprintf_r+0x104>
 801996a:	4252      	negs	r2, r2
 801996c:	f043 0302 	orr.w	r3, r3, #2
 8019970:	9207      	str	r2, [sp, #28]
 8019972:	9304      	str	r3, [sp, #16]
 8019974:	783b      	ldrb	r3, [r7, #0]
 8019976:	2b2e      	cmp	r3, #46	; 0x2e
 8019978:	d10c      	bne.n	8019994 <_svfiprintf_r+0x124>
 801997a:	787b      	ldrb	r3, [r7, #1]
 801997c:	2b2a      	cmp	r3, #42	; 0x2a
 801997e:	d133      	bne.n	80199e8 <_svfiprintf_r+0x178>
 8019980:	9b03      	ldr	r3, [sp, #12]
 8019982:	1d1a      	adds	r2, r3, #4
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	9203      	str	r2, [sp, #12]
 8019988:	2b00      	cmp	r3, #0
 801998a:	bfb8      	it	lt
 801998c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019990:	3702      	adds	r7, #2
 8019992:	9305      	str	r3, [sp, #20]
 8019994:	4d2e      	ldr	r5, [pc, #184]	; (8019a50 <_svfiprintf_r+0x1e0>)
 8019996:	7839      	ldrb	r1, [r7, #0]
 8019998:	2203      	movs	r2, #3
 801999a:	4628      	mov	r0, r5
 801999c:	f7e6 fc38 	bl	8000210 <memchr>
 80199a0:	b138      	cbz	r0, 80199b2 <_svfiprintf_r+0x142>
 80199a2:	2340      	movs	r3, #64	; 0x40
 80199a4:	1b40      	subs	r0, r0, r5
 80199a6:	fa03 f000 	lsl.w	r0, r3, r0
 80199aa:	9b04      	ldr	r3, [sp, #16]
 80199ac:	4303      	orrs	r3, r0
 80199ae:	3701      	adds	r7, #1
 80199b0:	9304      	str	r3, [sp, #16]
 80199b2:	7839      	ldrb	r1, [r7, #0]
 80199b4:	4827      	ldr	r0, [pc, #156]	; (8019a54 <_svfiprintf_r+0x1e4>)
 80199b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80199ba:	2206      	movs	r2, #6
 80199bc:	1c7e      	adds	r6, r7, #1
 80199be:	f7e6 fc27 	bl	8000210 <memchr>
 80199c2:	2800      	cmp	r0, #0
 80199c4:	d038      	beq.n	8019a38 <_svfiprintf_r+0x1c8>
 80199c6:	4b24      	ldr	r3, [pc, #144]	; (8019a58 <_svfiprintf_r+0x1e8>)
 80199c8:	bb13      	cbnz	r3, 8019a10 <_svfiprintf_r+0x1a0>
 80199ca:	9b03      	ldr	r3, [sp, #12]
 80199cc:	3307      	adds	r3, #7
 80199ce:	f023 0307 	bic.w	r3, r3, #7
 80199d2:	3308      	adds	r3, #8
 80199d4:	9303      	str	r3, [sp, #12]
 80199d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199d8:	444b      	add	r3, r9
 80199da:	9309      	str	r3, [sp, #36]	; 0x24
 80199dc:	e76d      	b.n	80198ba <_svfiprintf_r+0x4a>
 80199de:	fb05 3202 	mla	r2, r5, r2, r3
 80199e2:	2001      	movs	r0, #1
 80199e4:	460f      	mov	r7, r1
 80199e6:	e7a6      	b.n	8019936 <_svfiprintf_r+0xc6>
 80199e8:	2300      	movs	r3, #0
 80199ea:	3701      	adds	r7, #1
 80199ec:	9305      	str	r3, [sp, #20]
 80199ee:	4619      	mov	r1, r3
 80199f0:	250a      	movs	r5, #10
 80199f2:	4638      	mov	r0, r7
 80199f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199f8:	3a30      	subs	r2, #48	; 0x30
 80199fa:	2a09      	cmp	r2, #9
 80199fc:	d903      	bls.n	8019a06 <_svfiprintf_r+0x196>
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d0c8      	beq.n	8019994 <_svfiprintf_r+0x124>
 8019a02:	9105      	str	r1, [sp, #20]
 8019a04:	e7c6      	b.n	8019994 <_svfiprintf_r+0x124>
 8019a06:	fb05 2101 	mla	r1, r5, r1, r2
 8019a0a:	2301      	movs	r3, #1
 8019a0c:	4607      	mov	r7, r0
 8019a0e:	e7f0      	b.n	80199f2 <_svfiprintf_r+0x182>
 8019a10:	ab03      	add	r3, sp, #12
 8019a12:	9300      	str	r3, [sp, #0]
 8019a14:	4622      	mov	r2, r4
 8019a16:	4b11      	ldr	r3, [pc, #68]	; (8019a5c <_svfiprintf_r+0x1ec>)
 8019a18:	a904      	add	r1, sp, #16
 8019a1a:	4640      	mov	r0, r8
 8019a1c:	f7fc fb5e 	bl	80160dc <_printf_float>
 8019a20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019a24:	4681      	mov	r9, r0
 8019a26:	d1d6      	bne.n	80199d6 <_svfiprintf_r+0x166>
 8019a28:	89a3      	ldrh	r3, [r4, #12]
 8019a2a:	065b      	lsls	r3, r3, #25
 8019a2c:	f53f af35 	bmi.w	801989a <_svfiprintf_r+0x2a>
 8019a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a32:	b01d      	add	sp, #116	; 0x74
 8019a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a38:	ab03      	add	r3, sp, #12
 8019a3a:	9300      	str	r3, [sp, #0]
 8019a3c:	4622      	mov	r2, r4
 8019a3e:	4b07      	ldr	r3, [pc, #28]	; (8019a5c <_svfiprintf_r+0x1ec>)
 8019a40:	a904      	add	r1, sp, #16
 8019a42:	4640      	mov	r0, r8
 8019a44:	f7fc fe00 	bl	8016648 <_printf_i>
 8019a48:	e7ea      	b.n	8019a20 <_svfiprintf_r+0x1b0>
 8019a4a:	bf00      	nop
 8019a4c:	0801aafc 	.word	0x0801aafc
 8019a50:	0801ab02 	.word	0x0801ab02
 8019a54:	0801ab06 	.word	0x0801ab06
 8019a58:	080160dd 	.word	0x080160dd
 8019a5c:	080197bd 	.word	0x080197bd

08019a60 <_sungetc_r>:
 8019a60:	b538      	push	{r3, r4, r5, lr}
 8019a62:	1c4b      	adds	r3, r1, #1
 8019a64:	4614      	mov	r4, r2
 8019a66:	d103      	bne.n	8019a70 <_sungetc_r+0x10>
 8019a68:	f04f 35ff 	mov.w	r5, #4294967295
 8019a6c:	4628      	mov	r0, r5
 8019a6e:	bd38      	pop	{r3, r4, r5, pc}
 8019a70:	8993      	ldrh	r3, [r2, #12]
 8019a72:	f023 0320 	bic.w	r3, r3, #32
 8019a76:	8193      	strh	r3, [r2, #12]
 8019a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a7a:	6852      	ldr	r2, [r2, #4]
 8019a7c:	b2cd      	uxtb	r5, r1
 8019a7e:	b18b      	cbz	r3, 8019aa4 <_sungetc_r+0x44>
 8019a80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019a82:	4293      	cmp	r3, r2
 8019a84:	dd08      	ble.n	8019a98 <_sungetc_r+0x38>
 8019a86:	6823      	ldr	r3, [r4, #0]
 8019a88:	1e5a      	subs	r2, r3, #1
 8019a8a:	6022      	str	r2, [r4, #0]
 8019a8c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019a90:	6863      	ldr	r3, [r4, #4]
 8019a92:	3301      	adds	r3, #1
 8019a94:	6063      	str	r3, [r4, #4]
 8019a96:	e7e9      	b.n	8019a6c <_sungetc_r+0xc>
 8019a98:	4621      	mov	r1, r4
 8019a9a:	f000 fbc3 	bl	801a224 <__submore>
 8019a9e:	2800      	cmp	r0, #0
 8019aa0:	d0f1      	beq.n	8019a86 <_sungetc_r+0x26>
 8019aa2:	e7e1      	b.n	8019a68 <_sungetc_r+0x8>
 8019aa4:	6921      	ldr	r1, [r4, #16]
 8019aa6:	6823      	ldr	r3, [r4, #0]
 8019aa8:	b151      	cbz	r1, 8019ac0 <_sungetc_r+0x60>
 8019aaa:	4299      	cmp	r1, r3
 8019aac:	d208      	bcs.n	8019ac0 <_sungetc_r+0x60>
 8019aae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019ab2:	42a9      	cmp	r1, r5
 8019ab4:	d104      	bne.n	8019ac0 <_sungetc_r+0x60>
 8019ab6:	3b01      	subs	r3, #1
 8019ab8:	3201      	adds	r2, #1
 8019aba:	6023      	str	r3, [r4, #0]
 8019abc:	6062      	str	r2, [r4, #4]
 8019abe:	e7d5      	b.n	8019a6c <_sungetc_r+0xc>
 8019ac0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ac8:	6363      	str	r3, [r4, #52]	; 0x34
 8019aca:	2303      	movs	r3, #3
 8019acc:	63a3      	str	r3, [r4, #56]	; 0x38
 8019ace:	4623      	mov	r3, r4
 8019ad0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019ad4:	6023      	str	r3, [r4, #0]
 8019ad6:	2301      	movs	r3, #1
 8019ad8:	e7dc      	b.n	8019a94 <_sungetc_r+0x34>

08019ada <__ssrefill_r>:
 8019ada:	b510      	push	{r4, lr}
 8019adc:	460c      	mov	r4, r1
 8019ade:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019ae0:	b169      	cbz	r1, 8019afe <__ssrefill_r+0x24>
 8019ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ae6:	4299      	cmp	r1, r3
 8019ae8:	d001      	beq.n	8019aee <__ssrefill_r+0x14>
 8019aea:	f7ff fdbf 	bl	801966c <_free_r>
 8019aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019af0:	6063      	str	r3, [r4, #4]
 8019af2:	2000      	movs	r0, #0
 8019af4:	6360      	str	r0, [r4, #52]	; 0x34
 8019af6:	b113      	cbz	r3, 8019afe <__ssrefill_r+0x24>
 8019af8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019afa:	6023      	str	r3, [r4, #0]
 8019afc:	bd10      	pop	{r4, pc}
 8019afe:	6923      	ldr	r3, [r4, #16]
 8019b00:	6023      	str	r3, [r4, #0]
 8019b02:	2300      	movs	r3, #0
 8019b04:	6063      	str	r3, [r4, #4]
 8019b06:	89a3      	ldrh	r3, [r4, #12]
 8019b08:	f043 0320 	orr.w	r3, r3, #32
 8019b0c:	81a3      	strh	r3, [r4, #12]
 8019b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b12:	e7f3      	b.n	8019afc <__ssrefill_r+0x22>

08019b14 <__ssvfiscanf_r>:
 8019b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b18:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019b1c:	460c      	mov	r4, r1
 8019b1e:	2100      	movs	r1, #0
 8019b20:	9144      	str	r1, [sp, #272]	; 0x110
 8019b22:	9145      	str	r1, [sp, #276]	; 0x114
 8019b24:	499f      	ldr	r1, [pc, #636]	; (8019da4 <__ssvfiscanf_r+0x290>)
 8019b26:	91a0      	str	r1, [sp, #640]	; 0x280
 8019b28:	f10d 0804 	add.w	r8, sp, #4
 8019b2c:	499e      	ldr	r1, [pc, #632]	; (8019da8 <__ssvfiscanf_r+0x294>)
 8019b2e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019dac <__ssvfiscanf_r+0x298>
 8019b32:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019b36:	4606      	mov	r6, r0
 8019b38:	4692      	mov	sl, r2
 8019b3a:	91a1      	str	r1, [sp, #644]	; 0x284
 8019b3c:	9300      	str	r3, [sp, #0]
 8019b3e:	270a      	movs	r7, #10
 8019b40:	f89a 3000 	ldrb.w	r3, [sl]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	f000 812a 	beq.w	8019d9e <__ssvfiscanf_r+0x28a>
 8019b4a:	4655      	mov	r5, sl
 8019b4c:	f7ff f93e 	bl	8018dcc <__locale_ctype_ptr>
 8019b50:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019b54:	4458      	add	r0, fp
 8019b56:	7843      	ldrb	r3, [r0, #1]
 8019b58:	f013 0308 	ands.w	r3, r3, #8
 8019b5c:	d01c      	beq.n	8019b98 <__ssvfiscanf_r+0x84>
 8019b5e:	6863      	ldr	r3, [r4, #4]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	dd12      	ble.n	8019b8a <__ssvfiscanf_r+0x76>
 8019b64:	f7ff f932 	bl	8018dcc <__locale_ctype_ptr>
 8019b68:	6823      	ldr	r3, [r4, #0]
 8019b6a:	781a      	ldrb	r2, [r3, #0]
 8019b6c:	4410      	add	r0, r2
 8019b6e:	7842      	ldrb	r2, [r0, #1]
 8019b70:	0712      	lsls	r2, r2, #28
 8019b72:	d401      	bmi.n	8019b78 <__ssvfiscanf_r+0x64>
 8019b74:	46aa      	mov	sl, r5
 8019b76:	e7e3      	b.n	8019b40 <__ssvfiscanf_r+0x2c>
 8019b78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019b7a:	3201      	adds	r2, #1
 8019b7c:	9245      	str	r2, [sp, #276]	; 0x114
 8019b7e:	6862      	ldr	r2, [r4, #4]
 8019b80:	3301      	adds	r3, #1
 8019b82:	3a01      	subs	r2, #1
 8019b84:	6062      	str	r2, [r4, #4]
 8019b86:	6023      	str	r3, [r4, #0]
 8019b88:	e7e9      	b.n	8019b5e <__ssvfiscanf_r+0x4a>
 8019b8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019b8c:	4621      	mov	r1, r4
 8019b8e:	4630      	mov	r0, r6
 8019b90:	4798      	blx	r3
 8019b92:	2800      	cmp	r0, #0
 8019b94:	d0e6      	beq.n	8019b64 <__ssvfiscanf_r+0x50>
 8019b96:	e7ed      	b.n	8019b74 <__ssvfiscanf_r+0x60>
 8019b98:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019b9c:	f040 8082 	bne.w	8019ca4 <__ssvfiscanf_r+0x190>
 8019ba0:	9343      	str	r3, [sp, #268]	; 0x10c
 8019ba2:	9341      	str	r3, [sp, #260]	; 0x104
 8019ba4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8019baa:	d103      	bne.n	8019bb4 <__ssvfiscanf_r+0xa0>
 8019bac:	2310      	movs	r3, #16
 8019bae:	9341      	str	r3, [sp, #260]	; 0x104
 8019bb0:	f10a 0502 	add.w	r5, sl, #2
 8019bb4:	46aa      	mov	sl, r5
 8019bb6:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019bba:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019bbe:	2a09      	cmp	r2, #9
 8019bc0:	d922      	bls.n	8019c08 <__ssvfiscanf_r+0xf4>
 8019bc2:	2203      	movs	r2, #3
 8019bc4:	4879      	ldr	r0, [pc, #484]	; (8019dac <__ssvfiscanf_r+0x298>)
 8019bc6:	f7e6 fb23 	bl	8000210 <memchr>
 8019bca:	b138      	cbz	r0, 8019bdc <__ssvfiscanf_r+0xc8>
 8019bcc:	eba0 0309 	sub.w	r3, r0, r9
 8019bd0:	2001      	movs	r0, #1
 8019bd2:	4098      	lsls	r0, r3
 8019bd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019bd6:	4318      	orrs	r0, r3
 8019bd8:	9041      	str	r0, [sp, #260]	; 0x104
 8019bda:	46aa      	mov	sl, r5
 8019bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8019be0:	2b67      	cmp	r3, #103	; 0x67
 8019be2:	f10a 0501 	add.w	r5, sl, #1
 8019be6:	d82b      	bhi.n	8019c40 <__ssvfiscanf_r+0x12c>
 8019be8:	2b65      	cmp	r3, #101	; 0x65
 8019bea:	f080 809f 	bcs.w	8019d2c <__ssvfiscanf_r+0x218>
 8019bee:	2b47      	cmp	r3, #71	; 0x47
 8019bf0:	d810      	bhi.n	8019c14 <__ssvfiscanf_r+0x100>
 8019bf2:	2b45      	cmp	r3, #69	; 0x45
 8019bf4:	f080 809a 	bcs.w	8019d2c <__ssvfiscanf_r+0x218>
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d06c      	beq.n	8019cd6 <__ssvfiscanf_r+0x1c2>
 8019bfc:	2b25      	cmp	r3, #37	; 0x25
 8019bfe:	d051      	beq.n	8019ca4 <__ssvfiscanf_r+0x190>
 8019c00:	2303      	movs	r3, #3
 8019c02:	9347      	str	r3, [sp, #284]	; 0x11c
 8019c04:	9742      	str	r7, [sp, #264]	; 0x108
 8019c06:	e027      	b.n	8019c58 <__ssvfiscanf_r+0x144>
 8019c08:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019c0a:	fb07 1303 	mla	r3, r7, r3, r1
 8019c0e:	3b30      	subs	r3, #48	; 0x30
 8019c10:	9343      	str	r3, [sp, #268]	; 0x10c
 8019c12:	e7cf      	b.n	8019bb4 <__ssvfiscanf_r+0xa0>
 8019c14:	2b5b      	cmp	r3, #91	; 0x5b
 8019c16:	d06a      	beq.n	8019cee <__ssvfiscanf_r+0x1da>
 8019c18:	d80c      	bhi.n	8019c34 <__ssvfiscanf_r+0x120>
 8019c1a:	2b58      	cmp	r3, #88	; 0x58
 8019c1c:	d1f0      	bne.n	8019c00 <__ssvfiscanf_r+0xec>
 8019c1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019c24:	9241      	str	r2, [sp, #260]	; 0x104
 8019c26:	2210      	movs	r2, #16
 8019c28:	9242      	str	r2, [sp, #264]	; 0x108
 8019c2a:	2b6e      	cmp	r3, #110	; 0x6e
 8019c2c:	bf8c      	ite	hi
 8019c2e:	2304      	movhi	r3, #4
 8019c30:	2303      	movls	r3, #3
 8019c32:	e010      	b.n	8019c56 <__ssvfiscanf_r+0x142>
 8019c34:	2b63      	cmp	r3, #99	; 0x63
 8019c36:	d065      	beq.n	8019d04 <__ssvfiscanf_r+0x1f0>
 8019c38:	2b64      	cmp	r3, #100	; 0x64
 8019c3a:	d1e1      	bne.n	8019c00 <__ssvfiscanf_r+0xec>
 8019c3c:	9742      	str	r7, [sp, #264]	; 0x108
 8019c3e:	e7f4      	b.n	8019c2a <__ssvfiscanf_r+0x116>
 8019c40:	2b70      	cmp	r3, #112	; 0x70
 8019c42:	d04b      	beq.n	8019cdc <__ssvfiscanf_r+0x1c8>
 8019c44:	d826      	bhi.n	8019c94 <__ssvfiscanf_r+0x180>
 8019c46:	2b6e      	cmp	r3, #110	; 0x6e
 8019c48:	d062      	beq.n	8019d10 <__ssvfiscanf_r+0x1fc>
 8019c4a:	d84c      	bhi.n	8019ce6 <__ssvfiscanf_r+0x1d2>
 8019c4c:	2b69      	cmp	r3, #105	; 0x69
 8019c4e:	d1d7      	bne.n	8019c00 <__ssvfiscanf_r+0xec>
 8019c50:	2300      	movs	r3, #0
 8019c52:	9342      	str	r3, [sp, #264]	; 0x108
 8019c54:	2303      	movs	r3, #3
 8019c56:	9347      	str	r3, [sp, #284]	; 0x11c
 8019c58:	6863      	ldr	r3, [r4, #4]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	dd68      	ble.n	8019d30 <__ssvfiscanf_r+0x21c>
 8019c5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019c60:	0659      	lsls	r1, r3, #25
 8019c62:	d407      	bmi.n	8019c74 <__ssvfiscanf_r+0x160>
 8019c64:	f7ff f8b2 	bl	8018dcc <__locale_ctype_ptr>
 8019c68:	6823      	ldr	r3, [r4, #0]
 8019c6a:	781a      	ldrb	r2, [r3, #0]
 8019c6c:	4410      	add	r0, r2
 8019c6e:	7842      	ldrb	r2, [r0, #1]
 8019c70:	0712      	lsls	r2, r2, #28
 8019c72:	d464      	bmi.n	8019d3e <__ssvfiscanf_r+0x22a>
 8019c74:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019c76:	2b02      	cmp	r3, #2
 8019c78:	dc73      	bgt.n	8019d62 <__ssvfiscanf_r+0x24e>
 8019c7a:	466b      	mov	r3, sp
 8019c7c:	4622      	mov	r2, r4
 8019c7e:	a941      	add	r1, sp, #260	; 0x104
 8019c80:	4630      	mov	r0, r6
 8019c82:	f000 f897 	bl	8019db4 <_scanf_chars>
 8019c86:	2801      	cmp	r0, #1
 8019c88:	f000 8089 	beq.w	8019d9e <__ssvfiscanf_r+0x28a>
 8019c8c:	2802      	cmp	r0, #2
 8019c8e:	f47f af71 	bne.w	8019b74 <__ssvfiscanf_r+0x60>
 8019c92:	e01d      	b.n	8019cd0 <__ssvfiscanf_r+0x1bc>
 8019c94:	2b75      	cmp	r3, #117	; 0x75
 8019c96:	d0d1      	beq.n	8019c3c <__ssvfiscanf_r+0x128>
 8019c98:	2b78      	cmp	r3, #120	; 0x78
 8019c9a:	d0c0      	beq.n	8019c1e <__ssvfiscanf_r+0x10a>
 8019c9c:	2b73      	cmp	r3, #115	; 0x73
 8019c9e:	d1af      	bne.n	8019c00 <__ssvfiscanf_r+0xec>
 8019ca0:	2302      	movs	r3, #2
 8019ca2:	e7d8      	b.n	8019c56 <__ssvfiscanf_r+0x142>
 8019ca4:	6863      	ldr	r3, [r4, #4]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	dd0c      	ble.n	8019cc4 <__ssvfiscanf_r+0x1b0>
 8019caa:	6823      	ldr	r3, [r4, #0]
 8019cac:	781a      	ldrb	r2, [r3, #0]
 8019cae:	455a      	cmp	r2, fp
 8019cb0:	d175      	bne.n	8019d9e <__ssvfiscanf_r+0x28a>
 8019cb2:	3301      	adds	r3, #1
 8019cb4:	6862      	ldr	r2, [r4, #4]
 8019cb6:	6023      	str	r3, [r4, #0]
 8019cb8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019cba:	3a01      	subs	r2, #1
 8019cbc:	3301      	adds	r3, #1
 8019cbe:	6062      	str	r2, [r4, #4]
 8019cc0:	9345      	str	r3, [sp, #276]	; 0x114
 8019cc2:	e757      	b.n	8019b74 <__ssvfiscanf_r+0x60>
 8019cc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019cc6:	4621      	mov	r1, r4
 8019cc8:	4630      	mov	r0, r6
 8019cca:	4798      	blx	r3
 8019ccc:	2800      	cmp	r0, #0
 8019cce:	d0ec      	beq.n	8019caa <__ssvfiscanf_r+0x196>
 8019cd0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019cd2:	2800      	cmp	r0, #0
 8019cd4:	d159      	bne.n	8019d8a <__ssvfiscanf_r+0x276>
 8019cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8019cda:	e05c      	b.n	8019d96 <__ssvfiscanf_r+0x282>
 8019cdc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019cde:	f042 0220 	orr.w	r2, r2, #32
 8019ce2:	9241      	str	r2, [sp, #260]	; 0x104
 8019ce4:	e79b      	b.n	8019c1e <__ssvfiscanf_r+0x10a>
 8019ce6:	2308      	movs	r3, #8
 8019ce8:	9342      	str	r3, [sp, #264]	; 0x108
 8019cea:	2304      	movs	r3, #4
 8019cec:	e7b3      	b.n	8019c56 <__ssvfiscanf_r+0x142>
 8019cee:	4629      	mov	r1, r5
 8019cf0:	4640      	mov	r0, r8
 8019cf2:	f000 f9c7 	bl	801a084 <__sccl>
 8019cf6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cfc:	9341      	str	r3, [sp, #260]	; 0x104
 8019cfe:	4605      	mov	r5, r0
 8019d00:	2301      	movs	r3, #1
 8019d02:	e7a8      	b.n	8019c56 <__ssvfiscanf_r+0x142>
 8019d04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d0a:	9341      	str	r3, [sp, #260]	; 0x104
 8019d0c:	2300      	movs	r3, #0
 8019d0e:	e7a2      	b.n	8019c56 <__ssvfiscanf_r+0x142>
 8019d10:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019d12:	06c3      	lsls	r3, r0, #27
 8019d14:	f53f af2e 	bmi.w	8019b74 <__ssvfiscanf_r+0x60>
 8019d18:	9b00      	ldr	r3, [sp, #0]
 8019d1a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019d1c:	1d19      	adds	r1, r3, #4
 8019d1e:	9100      	str	r1, [sp, #0]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	07c0      	lsls	r0, r0, #31
 8019d24:	bf4c      	ite	mi
 8019d26:	801a      	strhmi	r2, [r3, #0]
 8019d28:	601a      	strpl	r2, [r3, #0]
 8019d2a:	e723      	b.n	8019b74 <__ssvfiscanf_r+0x60>
 8019d2c:	2305      	movs	r3, #5
 8019d2e:	e792      	b.n	8019c56 <__ssvfiscanf_r+0x142>
 8019d30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019d32:	4621      	mov	r1, r4
 8019d34:	4630      	mov	r0, r6
 8019d36:	4798      	blx	r3
 8019d38:	2800      	cmp	r0, #0
 8019d3a:	d090      	beq.n	8019c5e <__ssvfiscanf_r+0x14a>
 8019d3c:	e7c8      	b.n	8019cd0 <__ssvfiscanf_r+0x1bc>
 8019d3e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019d40:	3201      	adds	r2, #1
 8019d42:	9245      	str	r2, [sp, #276]	; 0x114
 8019d44:	6862      	ldr	r2, [r4, #4]
 8019d46:	3a01      	subs	r2, #1
 8019d48:	2a00      	cmp	r2, #0
 8019d4a:	6062      	str	r2, [r4, #4]
 8019d4c:	dd02      	ble.n	8019d54 <__ssvfiscanf_r+0x240>
 8019d4e:	3301      	adds	r3, #1
 8019d50:	6023      	str	r3, [r4, #0]
 8019d52:	e787      	b.n	8019c64 <__ssvfiscanf_r+0x150>
 8019d54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019d56:	4621      	mov	r1, r4
 8019d58:	4630      	mov	r0, r6
 8019d5a:	4798      	blx	r3
 8019d5c:	2800      	cmp	r0, #0
 8019d5e:	d081      	beq.n	8019c64 <__ssvfiscanf_r+0x150>
 8019d60:	e7b6      	b.n	8019cd0 <__ssvfiscanf_r+0x1bc>
 8019d62:	2b04      	cmp	r3, #4
 8019d64:	dc06      	bgt.n	8019d74 <__ssvfiscanf_r+0x260>
 8019d66:	466b      	mov	r3, sp
 8019d68:	4622      	mov	r2, r4
 8019d6a:	a941      	add	r1, sp, #260	; 0x104
 8019d6c:	4630      	mov	r0, r6
 8019d6e:	f000 f885 	bl	8019e7c <_scanf_i>
 8019d72:	e788      	b.n	8019c86 <__ssvfiscanf_r+0x172>
 8019d74:	4b0e      	ldr	r3, [pc, #56]	; (8019db0 <__ssvfiscanf_r+0x29c>)
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	f43f aefc 	beq.w	8019b74 <__ssvfiscanf_r+0x60>
 8019d7c:	466b      	mov	r3, sp
 8019d7e:	4622      	mov	r2, r4
 8019d80:	a941      	add	r1, sp, #260	; 0x104
 8019d82:	4630      	mov	r0, r6
 8019d84:	f7fc fd72 	bl	801686c <_scanf_float>
 8019d88:	e77d      	b.n	8019c86 <__ssvfiscanf_r+0x172>
 8019d8a:	89a3      	ldrh	r3, [r4, #12]
 8019d8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019d90:	bf18      	it	ne
 8019d92:	f04f 30ff 	movne.w	r0, #4294967295
 8019d96:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d9e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019da0:	e7f9      	b.n	8019d96 <__ssvfiscanf_r+0x282>
 8019da2:	bf00      	nop
 8019da4:	08019a61 	.word	0x08019a61
 8019da8:	08019adb 	.word	0x08019adb
 8019dac:	0801ab02 	.word	0x0801ab02
 8019db0:	0801686d 	.word	0x0801686d

08019db4 <_scanf_chars>:
 8019db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019db8:	4615      	mov	r5, r2
 8019dba:	688a      	ldr	r2, [r1, #8]
 8019dbc:	4680      	mov	r8, r0
 8019dbe:	460c      	mov	r4, r1
 8019dc0:	b932      	cbnz	r2, 8019dd0 <_scanf_chars+0x1c>
 8019dc2:	698a      	ldr	r2, [r1, #24]
 8019dc4:	2a00      	cmp	r2, #0
 8019dc6:	bf14      	ite	ne
 8019dc8:	f04f 32ff 	movne.w	r2, #4294967295
 8019dcc:	2201      	moveq	r2, #1
 8019dce:	608a      	str	r2, [r1, #8]
 8019dd0:	6822      	ldr	r2, [r4, #0]
 8019dd2:	06d1      	lsls	r1, r2, #27
 8019dd4:	bf5f      	itttt	pl
 8019dd6:	681a      	ldrpl	r2, [r3, #0]
 8019dd8:	1d11      	addpl	r1, r2, #4
 8019dda:	6019      	strpl	r1, [r3, #0]
 8019ddc:	6817      	ldrpl	r7, [r2, #0]
 8019dde:	2600      	movs	r6, #0
 8019de0:	69a3      	ldr	r3, [r4, #24]
 8019de2:	b1db      	cbz	r3, 8019e1c <_scanf_chars+0x68>
 8019de4:	2b01      	cmp	r3, #1
 8019de6:	d107      	bne.n	8019df8 <_scanf_chars+0x44>
 8019de8:	682b      	ldr	r3, [r5, #0]
 8019dea:	6962      	ldr	r2, [r4, #20]
 8019dec:	781b      	ldrb	r3, [r3, #0]
 8019dee:	5cd3      	ldrb	r3, [r2, r3]
 8019df0:	b9a3      	cbnz	r3, 8019e1c <_scanf_chars+0x68>
 8019df2:	2e00      	cmp	r6, #0
 8019df4:	d132      	bne.n	8019e5c <_scanf_chars+0xa8>
 8019df6:	e006      	b.n	8019e06 <_scanf_chars+0x52>
 8019df8:	2b02      	cmp	r3, #2
 8019dfa:	d007      	beq.n	8019e0c <_scanf_chars+0x58>
 8019dfc:	2e00      	cmp	r6, #0
 8019dfe:	d12d      	bne.n	8019e5c <_scanf_chars+0xa8>
 8019e00:	69a3      	ldr	r3, [r4, #24]
 8019e02:	2b01      	cmp	r3, #1
 8019e04:	d12a      	bne.n	8019e5c <_scanf_chars+0xa8>
 8019e06:	2001      	movs	r0, #1
 8019e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e0c:	f7fe ffde 	bl	8018dcc <__locale_ctype_ptr>
 8019e10:	682b      	ldr	r3, [r5, #0]
 8019e12:	781b      	ldrb	r3, [r3, #0]
 8019e14:	4418      	add	r0, r3
 8019e16:	7843      	ldrb	r3, [r0, #1]
 8019e18:	071b      	lsls	r3, r3, #28
 8019e1a:	d4ef      	bmi.n	8019dfc <_scanf_chars+0x48>
 8019e1c:	6823      	ldr	r3, [r4, #0]
 8019e1e:	06da      	lsls	r2, r3, #27
 8019e20:	bf5e      	ittt	pl
 8019e22:	682b      	ldrpl	r3, [r5, #0]
 8019e24:	781b      	ldrbpl	r3, [r3, #0]
 8019e26:	703b      	strbpl	r3, [r7, #0]
 8019e28:	682a      	ldr	r2, [r5, #0]
 8019e2a:	686b      	ldr	r3, [r5, #4]
 8019e2c:	f102 0201 	add.w	r2, r2, #1
 8019e30:	602a      	str	r2, [r5, #0]
 8019e32:	68a2      	ldr	r2, [r4, #8]
 8019e34:	f103 33ff 	add.w	r3, r3, #4294967295
 8019e38:	f102 32ff 	add.w	r2, r2, #4294967295
 8019e3c:	606b      	str	r3, [r5, #4]
 8019e3e:	f106 0601 	add.w	r6, r6, #1
 8019e42:	bf58      	it	pl
 8019e44:	3701      	addpl	r7, #1
 8019e46:	60a2      	str	r2, [r4, #8]
 8019e48:	b142      	cbz	r2, 8019e5c <_scanf_chars+0xa8>
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	dcc8      	bgt.n	8019de0 <_scanf_chars+0x2c>
 8019e4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019e52:	4629      	mov	r1, r5
 8019e54:	4640      	mov	r0, r8
 8019e56:	4798      	blx	r3
 8019e58:	2800      	cmp	r0, #0
 8019e5a:	d0c1      	beq.n	8019de0 <_scanf_chars+0x2c>
 8019e5c:	6823      	ldr	r3, [r4, #0]
 8019e5e:	f013 0310 	ands.w	r3, r3, #16
 8019e62:	d105      	bne.n	8019e70 <_scanf_chars+0xbc>
 8019e64:	68e2      	ldr	r2, [r4, #12]
 8019e66:	3201      	adds	r2, #1
 8019e68:	60e2      	str	r2, [r4, #12]
 8019e6a:	69a2      	ldr	r2, [r4, #24]
 8019e6c:	b102      	cbz	r2, 8019e70 <_scanf_chars+0xbc>
 8019e6e:	703b      	strb	r3, [r7, #0]
 8019e70:	6923      	ldr	r3, [r4, #16]
 8019e72:	441e      	add	r6, r3
 8019e74:	6126      	str	r6, [r4, #16]
 8019e76:	2000      	movs	r0, #0
 8019e78:	e7c6      	b.n	8019e08 <_scanf_chars+0x54>
	...

08019e7c <_scanf_i>:
 8019e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e80:	469a      	mov	sl, r3
 8019e82:	4b74      	ldr	r3, [pc, #464]	; (801a054 <_scanf_i+0x1d8>)
 8019e84:	460c      	mov	r4, r1
 8019e86:	4683      	mov	fp, r0
 8019e88:	4616      	mov	r6, r2
 8019e8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019e8e:	b087      	sub	sp, #28
 8019e90:	ab03      	add	r3, sp, #12
 8019e92:	68a7      	ldr	r7, [r4, #8]
 8019e94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019e98:	4b6f      	ldr	r3, [pc, #444]	; (801a058 <_scanf_i+0x1dc>)
 8019e9a:	69a1      	ldr	r1, [r4, #24]
 8019e9c:	4a6f      	ldr	r2, [pc, #444]	; (801a05c <_scanf_i+0x1e0>)
 8019e9e:	2903      	cmp	r1, #3
 8019ea0:	bf08      	it	eq
 8019ea2:	461a      	moveq	r2, r3
 8019ea4:	1e7b      	subs	r3, r7, #1
 8019ea6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019eaa:	bf84      	itt	hi
 8019eac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019eb0:	60a3      	strhi	r3, [r4, #8]
 8019eb2:	6823      	ldr	r3, [r4, #0]
 8019eb4:	9200      	str	r2, [sp, #0]
 8019eb6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019eba:	bf88      	it	hi
 8019ebc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019ec0:	f104 091c 	add.w	r9, r4, #28
 8019ec4:	6023      	str	r3, [r4, #0]
 8019ec6:	bf8c      	ite	hi
 8019ec8:	197f      	addhi	r7, r7, r5
 8019eca:	2700      	movls	r7, #0
 8019ecc:	464b      	mov	r3, r9
 8019ece:	f04f 0800 	mov.w	r8, #0
 8019ed2:	9301      	str	r3, [sp, #4]
 8019ed4:	6831      	ldr	r1, [r6, #0]
 8019ed6:	ab03      	add	r3, sp, #12
 8019ed8:	2202      	movs	r2, #2
 8019eda:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019ede:	7809      	ldrb	r1, [r1, #0]
 8019ee0:	f7e6 f996 	bl	8000210 <memchr>
 8019ee4:	9b01      	ldr	r3, [sp, #4]
 8019ee6:	b330      	cbz	r0, 8019f36 <_scanf_i+0xba>
 8019ee8:	f1b8 0f01 	cmp.w	r8, #1
 8019eec:	d15a      	bne.n	8019fa4 <_scanf_i+0x128>
 8019eee:	6862      	ldr	r2, [r4, #4]
 8019ef0:	b92a      	cbnz	r2, 8019efe <_scanf_i+0x82>
 8019ef2:	6822      	ldr	r2, [r4, #0]
 8019ef4:	2108      	movs	r1, #8
 8019ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019efa:	6061      	str	r1, [r4, #4]
 8019efc:	6022      	str	r2, [r4, #0]
 8019efe:	6822      	ldr	r2, [r4, #0]
 8019f00:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019f04:	6022      	str	r2, [r4, #0]
 8019f06:	68a2      	ldr	r2, [r4, #8]
 8019f08:	1e51      	subs	r1, r2, #1
 8019f0a:	60a1      	str	r1, [r4, #8]
 8019f0c:	b19a      	cbz	r2, 8019f36 <_scanf_i+0xba>
 8019f0e:	6832      	ldr	r2, [r6, #0]
 8019f10:	1c51      	adds	r1, r2, #1
 8019f12:	6031      	str	r1, [r6, #0]
 8019f14:	7812      	ldrb	r2, [r2, #0]
 8019f16:	701a      	strb	r2, [r3, #0]
 8019f18:	1c5d      	adds	r5, r3, #1
 8019f1a:	6873      	ldr	r3, [r6, #4]
 8019f1c:	3b01      	subs	r3, #1
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	6073      	str	r3, [r6, #4]
 8019f22:	dc07      	bgt.n	8019f34 <_scanf_i+0xb8>
 8019f24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019f28:	4631      	mov	r1, r6
 8019f2a:	4658      	mov	r0, fp
 8019f2c:	4798      	blx	r3
 8019f2e:	2800      	cmp	r0, #0
 8019f30:	f040 8086 	bne.w	801a040 <_scanf_i+0x1c4>
 8019f34:	462b      	mov	r3, r5
 8019f36:	f108 0801 	add.w	r8, r8, #1
 8019f3a:	f1b8 0f03 	cmp.w	r8, #3
 8019f3e:	d1c8      	bne.n	8019ed2 <_scanf_i+0x56>
 8019f40:	6862      	ldr	r2, [r4, #4]
 8019f42:	b90a      	cbnz	r2, 8019f48 <_scanf_i+0xcc>
 8019f44:	220a      	movs	r2, #10
 8019f46:	6062      	str	r2, [r4, #4]
 8019f48:	6862      	ldr	r2, [r4, #4]
 8019f4a:	4945      	ldr	r1, [pc, #276]	; (801a060 <_scanf_i+0x1e4>)
 8019f4c:	6960      	ldr	r0, [r4, #20]
 8019f4e:	9301      	str	r3, [sp, #4]
 8019f50:	1a89      	subs	r1, r1, r2
 8019f52:	f000 f897 	bl	801a084 <__sccl>
 8019f56:	9b01      	ldr	r3, [sp, #4]
 8019f58:	f04f 0800 	mov.w	r8, #0
 8019f5c:	461d      	mov	r5, r3
 8019f5e:	68a3      	ldr	r3, [r4, #8]
 8019f60:	6822      	ldr	r2, [r4, #0]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d03a      	beq.n	8019fdc <_scanf_i+0x160>
 8019f66:	6831      	ldr	r1, [r6, #0]
 8019f68:	6960      	ldr	r0, [r4, #20]
 8019f6a:	f891 c000 	ldrb.w	ip, [r1]
 8019f6e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019f72:	2800      	cmp	r0, #0
 8019f74:	d032      	beq.n	8019fdc <_scanf_i+0x160>
 8019f76:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019f7a:	d121      	bne.n	8019fc0 <_scanf_i+0x144>
 8019f7c:	0510      	lsls	r0, r2, #20
 8019f7e:	d51f      	bpl.n	8019fc0 <_scanf_i+0x144>
 8019f80:	f108 0801 	add.w	r8, r8, #1
 8019f84:	b117      	cbz	r7, 8019f8c <_scanf_i+0x110>
 8019f86:	3301      	adds	r3, #1
 8019f88:	3f01      	subs	r7, #1
 8019f8a:	60a3      	str	r3, [r4, #8]
 8019f8c:	6873      	ldr	r3, [r6, #4]
 8019f8e:	3b01      	subs	r3, #1
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	6073      	str	r3, [r6, #4]
 8019f94:	dd1b      	ble.n	8019fce <_scanf_i+0x152>
 8019f96:	6833      	ldr	r3, [r6, #0]
 8019f98:	3301      	adds	r3, #1
 8019f9a:	6033      	str	r3, [r6, #0]
 8019f9c:	68a3      	ldr	r3, [r4, #8]
 8019f9e:	3b01      	subs	r3, #1
 8019fa0:	60a3      	str	r3, [r4, #8]
 8019fa2:	e7dc      	b.n	8019f5e <_scanf_i+0xe2>
 8019fa4:	f1b8 0f02 	cmp.w	r8, #2
 8019fa8:	d1ad      	bne.n	8019f06 <_scanf_i+0x8a>
 8019faa:	6822      	ldr	r2, [r4, #0]
 8019fac:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019fb0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019fb4:	d1bf      	bne.n	8019f36 <_scanf_i+0xba>
 8019fb6:	2110      	movs	r1, #16
 8019fb8:	6061      	str	r1, [r4, #4]
 8019fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019fbe:	e7a1      	b.n	8019f04 <_scanf_i+0x88>
 8019fc0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019fc4:	6022      	str	r2, [r4, #0]
 8019fc6:	780b      	ldrb	r3, [r1, #0]
 8019fc8:	702b      	strb	r3, [r5, #0]
 8019fca:	3501      	adds	r5, #1
 8019fcc:	e7de      	b.n	8019f8c <_scanf_i+0x110>
 8019fce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019fd2:	4631      	mov	r1, r6
 8019fd4:	4658      	mov	r0, fp
 8019fd6:	4798      	blx	r3
 8019fd8:	2800      	cmp	r0, #0
 8019fda:	d0df      	beq.n	8019f9c <_scanf_i+0x120>
 8019fdc:	6823      	ldr	r3, [r4, #0]
 8019fde:	05d9      	lsls	r1, r3, #23
 8019fe0:	d50c      	bpl.n	8019ffc <_scanf_i+0x180>
 8019fe2:	454d      	cmp	r5, r9
 8019fe4:	d908      	bls.n	8019ff8 <_scanf_i+0x17c>
 8019fe6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019fea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019fee:	4632      	mov	r2, r6
 8019ff0:	4658      	mov	r0, fp
 8019ff2:	4798      	blx	r3
 8019ff4:	1e6f      	subs	r7, r5, #1
 8019ff6:	463d      	mov	r5, r7
 8019ff8:	454d      	cmp	r5, r9
 8019ffa:	d029      	beq.n	801a050 <_scanf_i+0x1d4>
 8019ffc:	6822      	ldr	r2, [r4, #0]
 8019ffe:	f012 0210 	ands.w	r2, r2, #16
 801a002:	d113      	bne.n	801a02c <_scanf_i+0x1b0>
 801a004:	702a      	strb	r2, [r5, #0]
 801a006:	6863      	ldr	r3, [r4, #4]
 801a008:	9e00      	ldr	r6, [sp, #0]
 801a00a:	4649      	mov	r1, r9
 801a00c:	4658      	mov	r0, fp
 801a00e:	47b0      	blx	r6
 801a010:	f8da 3000 	ldr.w	r3, [sl]
 801a014:	6821      	ldr	r1, [r4, #0]
 801a016:	1d1a      	adds	r2, r3, #4
 801a018:	f8ca 2000 	str.w	r2, [sl]
 801a01c:	f011 0f20 	tst.w	r1, #32
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	d010      	beq.n	801a046 <_scanf_i+0x1ca>
 801a024:	6018      	str	r0, [r3, #0]
 801a026:	68e3      	ldr	r3, [r4, #12]
 801a028:	3301      	adds	r3, #1
 801a02a:	60e3      	str	r3, [r4, #12]
 801a02c:	eba5 0509 	sub.w	r5, r5, r9
 801a030:	44a8      	add	r8, r5
 801a032:	6925      	ldr	r5, [r4, #16]
 801a034:	4445      	add	r5, r8
 801a036:	6125      	str	r5, [r4, #16]
 801a038:	2000      	movs	r0, #0
 801a03a:	b007      	add	sp, #28
 801a03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a040:	f04f 0800 	mov.w	r8, #0
 801a044:	e7ca      	b.n	8019fdc <_scanf_i+0x160>
 801a046:	07ca      	lsls	r2, r1, #31
 801a048:	bf4c      	ite	mi
 801a04a:	8018      	strhmi	r0, [r3, #0]
 801a04c:	6018      	strpl	r0, [r3, #0]
 801a04e:	e7ea      	b.n	801a026 <_scanf_i+0x1aa>
 801a050:	2001      	movs	r0, #1
 801a052:	e7f2      	b.n	801a03a <_scanf_i+0x1be>
 801a054:	0801a8a0 	.word	0x0801a8a0
 801a058:	08017a89 	.word	0x08017a89
 801a05c:	0801a201 	.word	0x0801a201
 801a060:	0801ab1d 	.word	0x0801ab1d

0801a064 <_sbrk_r>:
 801a064:	b538      	push	{r3, r4, r5, lr}
 801a066:	4c06      	ldr	r4, [pc, #24]	; (801a080 <_sbrk_r+0x1c>)
 801a068:	2300      	movs	r3, #0
 801a06a:	4605      	mov	r5, r0
 801a06c:	4608      	mov	r0, r1
 801a06e:	6023      	str	r3, [r4, #0]
 801a070:	f7ed ff9c 	bl	8007fac <_sbrk>
 801a074:	1c43      	adds	r3, r0, #1
 801a076:	d102      	bne.n	801a07e <_sbrk_r+0x1a>
 801a078:	6823      	ldr	r3, [r4, #0]
 801a07a:	b103      	cbz	r3, 801a07e <_sbrk_r+0x1a>
 801a07c:	602b      	str	r3, [r5, #0]
 801a07e:	bd38      	pop	{r3, r4, r5, pc}
 801a080:	20049d04 	.word	0x20049d04

0801a084 <__sccl>:
 801a084:	b570      	push	{r4, r5, r6, lr}
 801a086:	780b      	ldrb	r3, [r1, #0]
 801a088:	2b5e      	cmp	r3, #94	; 0x5e
 801a08a:	bf13      	iteet	ne
 801a08c:	1c4a      	addne	r2, r1, #1
 801a08e:	1c8a      	addeq	r2, r1, #2
 801a090:	784b      	ldrbeq	r3, [r1, #1]
 801a092:	2100      	movne	r1, #0
 801a094:	bf08      	it	eq
 801a096:	2101      	moveq	r1, #1
 801a098:	1e44      	subs	r4, r0, #1
 801a09a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801a09e:	f804 1f01 	strb.w	r1, [r4, #1]!
 801a0a2:	42ac      	cmp	r4, r5
 801a0a4:	d1fb      	bne.n	801a09e <__sccl+0x1a>
 801a0a6:	b913      	cbnz	r3, 801a0ae <__sccl+0x2a>
 801a0a8:	3a01      	subs	r2, #1
 801a0aa:	4610      	mov	r0, r2
 801a0ac:	bd70      	pop	{r4, r5, r6, pc}
 801a0ae:	f081 0401 	eor.w	r4, r1, #1
 801a0b2:	54c4      	strb	r4, [r0, r3]
 801a0b4:	1c51      	adds	r1, r2, #1
 801a0b6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801a0ba:	2d2d      	cmp	r5, #45	; 0x2d
 801a0bc:	f101 36ff 	add.w	r6, r1, #4294967295
 801a0c0:	460a      	mov	r2, r1
 801a0c2:	d006      	beq.n	801a0d2 <__sccl+0x4e>
 801a0c4:	2d5d      	cmp	r5, #93	; 0x5d
 801a0c6:	d0f0      	beq.n	801a0aa <__sccl+0x26>
 801a0c8:	b90d      	cbnz	r5, 801a0ce <__sccl+0x4a>
 801a0ca:	4632      	mov	r2, r6
 801a0cc:	e7ed      	b.n	801a0aa <__sccl+0x26>
 801a0ce:	462b      	mov	r3, r5
 801a0d0:	e7ef      	b.n	801a0b2 <__sccl+0x2e>
 801a0d2:	780e      	ldrb	r6, [r1, #0]
 801a0d4:	2e5d      	cmp	r6, #93	; 0x5d
 801a0d6:	d0fa      	beq.n	801a0ce <__sccl+0x4a>
 801a0d8:	42b3      	cmp	r3, r6
 801a0da:	dcf8      	bgt.n	801a0ce <__sccl+0x4a>
 801a0dc:	3301      	adds	r3, #1
 801a0de:	429e      	cmp	r6, r3
 801a0e0:	54c4      	strb	r4, [r0, r3]
 801a0e2:	dcfb      	bgt.n	801a0dc <__sccl+0x58>
 801a0e4:	3102      	adds	r1, #2
 801a0e6:	e7e6      	b.n	801a0b6 <__sccl+0x32>

0801a0e8 <strncmp>:
 801a0e8:	b510      	push	{r4, lr}
 801a0ea:	b16a      	cbz	r2, 801a108 <strncmp+0x20>
 801a0ec:	3901      	subs	r1, #1
 801a0ee:	1884      	adds	r4, r0, r2
 801a0f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a0f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a0f8:	4293      	cmp	r3, r2
 801a0fa:	d103      	bne.n	801a104 <strncmp+0x1c>
 801a0fc:	42a0      	cmp	r0, r4
 801a0fe:	d001      	beq.n	801a104 <strncmp+0x1c>
 801a100:	2b00      	cmp	r3, #0
 801a102:	d1f5      	bne.n	801a0f0 <strncmp+0x8>
 801a104:	1a98      	subs	r0, r3, r2
 801a106:	bd10      	pop	{r4, pc}
 801a108:	4610      	mov	r0, r2
 801a10a:	e7fc      	b.n	801a106 <strncmp+0x1e>

0801a10c <_strtoul_l.isra.0>:
 801a10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a110:	4680      	mov	r8, r0
 801a112:	4689      	mov	r9, r1
 801a114:	4692      	mov	sl, r2
 801a116:	461e      	mov	r6, r3
 801a118:	460f      	mov	r7, r1
 801a11a:	463d      	mov	r5, r7
 801a11c:	9808      	ldr	r0, [sp, #32]
 801a11e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a122:	f7fe fe4f 	bl	8018dc4 <__locale_ctype_ptr_l>
 801a126:	4420      	add	r0, r4
 801a128:	7843      	ldrb	r3, [r0, #1]
 801a12a:	f013 0308 	ands.w	r3, r3, #8
 801a12e:	d130      	bne.n	801a192 <_strtoul_l.isra.0+0x86>
 801a130:	2c2d      	cmp	r4, #45	; 0x2d
 801a132:	d130      	bne.n	801a196 <_strtoul_l.isra.0+0x8a>
 801a134:	787c      	ldrb	r4, [r7, #1]
 801a136:	1cbd      	adds	r5, r7, #2
 801a138:	2101      	movs	r1, #1
 801a13a:	2e00      	cmp	r6, #0
 801a13c:	d05c      	beq.n	801a1f8 <_strtoul_l.isra.0+0xec>
 801a13e:	2e10      	cmp	r6, #16
 801a140:	d109      	bne.n	801a156 <_strtoul_l.isra.0+0x4a>
 801a142:	2c30      	cmp	r4, #48	; 0x30
 801a144:	d107      	bne.n	801a156 <_strtoul_l.isra.0+0x4a>
 801a146:	782b      	ldrb	r3, [r5, #0]
 801a148:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a14c:	2b58      	cmp	r3, #88	; 0x58
 801a14e:	d14e      	bne.n	801a1ee <_strtoul_l.isra.0+0xe2>
 801a150:	786c      	ldrb	r4, [r5, #1]
 801a152:	2610      	movs	r6, #16
 801a154:	3502      	adds	r5, #2
 801a156:	f04f 32ff 	mov.w	r2, #4294967295
 801a15a:	2300      	movs	r3, #0
 801a15c:	fbb2 f2f6 	udiv	r2, r2, r6
 801a160:	fb06 fc02 	mul.w	ip, r6, r2
 801a164:	ea6f 0c0c 	mvn.w	ip, ip
 801a168:	4618      	mov	r0, r3
 801a16a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801a16e:	2f09      	cmp	r7, #9
 801a170:	d817      	bhi.n	801a1a2 <_strtoul_l.isra.0+0x96>
 801a172:	463c      	mov	r4, r7
 801a174:	42a6      	cmp	r6, r4
 801a176:	dd23      	ble.n	801a1c0 <_strtoul_l.isra.0+0xb4>
 801a178:	2b00      	cmp	r3, #0
 801a17a:	db1e      	blt.n	801a1ba <_strtoul_l.isra.0+0xae>
 801a17c:	4282      	cmp	r2, r0
 801a17e:	d31c      	bcc.n	801a1ba <_strtoul_l.isra.0+0xae>
 801a180:	d101      	bne.n	801a186 <_strtoul_l.isra.0+0x7a>
 801a182:	45a4      	cmp	ip, r4
 801a184:	db19      	blt.n	801a1ba <_strtoul_l.isra.0+0xae>
 801a186:	fb00 4006 	mla	r0, r0, r6, r4
 801a18a:	2301      	movs	r3, #1
 801a18c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a190:	e7eb      	b.n	801a16a <_strtoul_l.isra.0+0x5e>
 801a192:	462f      	mov	r7, r5
 801a194:	e7c1      	b.n	801a11a <_strtoul_l.isra.0+0xe>
 801a196:	2c2b      	cmp	r4, #43	; 0x2b
 801a198:	bf04      	itt	eq
 801a19a:	1cbd      	addeq	r5, r7, #2
 801a19c:	787c      	ldrbeq	r4, [r7, #1]
 801a19e:	4619      	mov	r1, r3
 801a1a0:	e7cb      	b.n	801a13a <_strtoul_l.isra.0+0x2e>
 801a1a2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801a1a6:	2f19      	cmp	r7, #25
 801a1a8:	d801      	bhi.n	801a1ae <_strtoul_l.isra.0+0xa2>
 801a1aa:	3c37      	subs	r4, #55	; 0x37
 801a1ac:	e7e2      	b.n	801a174 <_strtoul_l.isra.0+0x68>
 801a1ae:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801a1b2:	2f19      	cmp	r7, #25
 801a1b4:	d804      	bhi.n	801a1c0 <_strtoul_l.isra.0+0xb4>
 801a1b6:	3c57      	subs	r4, #87	; 0x57
 801a1b8:	e7dc      	b.n	801a174 <_strtoul_l.isra.0+0x68>
 801a1ba:	f04f 33ff 	mov.w	r3, #4294967295
 801a1be:	e7e5      	b.n	801a18c <_strtoul_l.isra.0+0x80>
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	da09      	bge.n	801a1d8 <_strtoul_l.isra.0+0xcc>
 801a1c4:	2322      	movs	r3, #34	; 0x22
 801a1c6:	f8c8 3000 	str.w	r3, [r8]
 801a1ca:	f04f 30ff 	mov.w	r0, #4294967295
 801a1ce:	f1ba 0f00 	cmp.w	sl, #0
 801a1d2:	d107      	bne.n	801a1e4 <_strtoul_l.isra.0+0xd8>
 801a1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1d8:	b101      	cbz	r1, 801a1dc <_strtoul_l.isra.0+0xd0>
 801a1da:	4240      	negs	r0, r0
 801a1dc:	f1ba 0f00 	cmp.w	sl, #0
 801a1e0:	d0f8      	beq.n	801a1d4 <_strtoul_l.isra.0+0xc8>
 801a1e2:	b10b      	cbz	r3, 801a1e8 <_strtoul_l.isra.0+0xdc>
 801a1e4:	f105 39ff 	add.w	r9, r5, #4294967295
 801a1e8:	f8ca 9000 	str.w	r9, [sl]
 801a1ec:	e7f2      	b.n	801a1d4 <_strtoul_l.isra.0+0xc8>
 801a1ee:	2430      	movs	r4, #48	; 0x30
 801a1f0:	2e00      	cmp	r6, #0
 801a1f2:	d1b0      	bne.n	801a156 <_strtoul_l.isra.0+0x4a>
 801a1f4:	2608      	movs	r6, #8
 801a1f6:	e7ae      	b.n	801a156 <_strtoul_l.isra.0+0x4a>
 801a1f8:	2c30      	cmp	r4, #48	; 0x30
 801a1fa:	d0a4      	beq.n	801a146 <_strtoul_l.isra.0+0x3a>
 801a1fc:	260a      	movs	r6, #10
 801a1fe:	e7aa      	b.n	801a156 <_strtoul_l.isra.0+0x4a>

0801a200 <_strtoul_r>:
 801a200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a202:	4c06      	ldr	r4, [pc, #24]	; (801a21c <_strtoul_r+0x1c>)
 801a204:	4d06      	ldr	r5, [pc, #24]	; (801a220 <_strtoul_r+0x20>)
 801a206:	6824      	ldr	r4, [r4, #0]
 801a208:	6a24      	ldr	r4, [r4, #32]
 801a20a:	2c00      	cmp	r4, #0
 801a20c:	bf08      	it	eq
 801a20e:	462c      	moveq	r4, r5
 801a210:	9400      	str	r4, [sp, #0]
 801a212:	f7ff ff7b 	bl	801a10c <_strtoul_l.isra.0>
 801a216:	b003      	add	sp, #12
 801a218:	bd30      	pop	{r4, r5, pc}
 801a21a:	bf00      	nop
 801a21c:	2000000c 	.word	0x2000000c
 801a220:	20000070 	.word	0x20000070

0801a224 <__submore>:
 801a224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a228:	460c      	mov	r4, r1
 801a22a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a22c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a230:	4299      	cmp	r1, r3
 801a232:	d11d      	bne.n	801a270 <__submore+0x4c>
 801a234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a238:	f7ff fa66 	bl	8019708 <_malloc_r>
 801a23c:	b918      	cbnz	r0, 801a246 <__submore+0x22>
 801a23e:	f04f 30ff 	mov.w	r0, #4294967295
 801a242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a24a:	63a3      	str	r3, [r4, #56]	; 0x38
 801a24c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a250:	6360      	str	r0, [r4, #52]	; 0x34
 801a252:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a256:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a25a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a25e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a262:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a266:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a26a:	6020      	str	r0, [r4, #0]
 801a26c:	2000      	movs	r0, #0
 801a26e:	e7e8      	b.n	801a242 <__submore+0x1e>
 801a270:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a272:	0077      	lsls	r7, r6, #1
 801a274:	463a      	mov	r2, r7
 801a276:	f000 f837 	bl	801a2e8 <_realloc_r>
 801a27a:	4605      	mov	r5, r0
 801a27c:	2800      	cmp	r0, #0
 801a27e:	d0de      	beq.n	801a23e <__submore+0x1a>
 801a280:	eb00 0806 	add.w	r8, r0, r6
 801a284:	4601      	mov	r1, r0
 801a286:	4632      	mov	r2, r6
 801a288:	4640      	mov	r0, r8
 801a28a:	f7fe fdd7 	bl	8018e3c <memcpy>
 801a28e:	f8c4 8000 	str.w	r8, [r4]
 801a292:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a296:	e7e9      	b.n	801a26c <__submore+0x48>

0801a298 <__ascii_wctomb>:
 801a298:	b149      	cbz	r1, 801a2ae <__ascii_wctomb+0x16>
 801a29a:	2aff      	cmp	r2, #255	; 0xff
 801a29c:	bf85      	ittet	hi
 801a29e:	238a      	movhi	r3, #138	; 0x8a
 801a2a0:	6003      	strhi	r3, [r0, #0]
 801a2a2:	700a      	strbls	r2, [r1, #0]
 801a2a4:	f04f 30ff 	movhi.w	r0, #4294967295
 801a2a8:	bf98      	it	ls
 801a2aa:	2001      	movls	r0, #1
 801a2ac:	4770      	bx	lr
 801a2ae:	4608      	mov	r0, r1
 801a2b0:	4770      	bx	lr

0801a2b2 <memmove>:
 801a2b2:	4288      	cmp	r0, r1
 801a2b4:	b510      	push	{r4, lr}
 801a2b6:	eb01 0302 	add.w	r3, r1, r2
 801a2ba:	d807      	bhi.n	801a2cc <memmove+0x1a>
 801a2bc:	1e42      	subs	r2, r0, #1
 801a2be:	4299      	cmp	r1, r3
 801a2c0:	d00a      	beq.n	801a2d8 <memmove+0x26>
 801a2c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a2c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a2ca:	e7f8      	b.n	801a2be <memmove+0xc>
 801a2cc:	4283      	cmp	r3, r0
 801a2ce:	d9f5      	bls.n	801a2bc <memmove+0xa>
 801a2d0:	1881      	adds	r1, r0, r2
 801a2d2:	1ad2      	subs	r2, r2, r3
 801a2d4:	42d3      	cmn	r3, r2
 801a2d6:	d100      	bne.n	801a2da <memmove+0x28>
 801a2d8:	bd10      	pop	{r4, pc}
 801a2da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a2de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a2e2:	e7f7      	b.n	801a2d4 <memmove+0x22>

0801a2e4 <__malloc_lock>:
 801a2e4:	4770      	bx	lr

0801a2e6 <__malloc_unlock>:
 801a2e6:	4770      	bx	lr

0801a2e8 <_realloc_r>:
 801a2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2ea:	4607      	mov	r7, r0
 801a2ec:	4614      	mov	r4, r2
 801a2ee:	460e      	mov	r6, r1
 801a2f0:	b921      	cbnz	r1, 801a2fc <_realloc_r+0x14>
 801a2f2:	4611      	mov	r1, r2
 801a2f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a2f8:	f7ff ba06 	b.w	8019708 <_malloc_r>
 801a2fc:	b922      	cbnz	r2, 801a308 <_realloc_r+0x20>
 801a2fe:	f7ff f9b5 	bl	801966c <_free_r>
 801a302:	4625      	mov	r5, r4
 801a304:	4628      	mov	r0, r5
 801a306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a308:	f000 f814 	bl	801a334 <_malloc_usable_size_r>
 801a30c:	42a0      	cmp	r0, r4
 801a30e:	d20f      	bcs.n	801a330 <_realloc_r+0x48>
 801a310:	4621      	mov	r1, r4
 801a312:	4638      	mov	r0, r7
 801a314:	f7ff f9f8 	bl	8019708 <_malloc_r>
 801a318:	4605      	mov	r5, r0
 801a31a:	2800      	cmp	r0, #0
 801a31c:	d0f2      	beq.n	801a304 <_realloc_r+0x1c>
 801a31e:	4631      	mov	r1, r6
 801a320:	4622      	mov	r2, r4
 801a322:	f7fe fd8b 	bl	8018e3c <memcpy>
 801a326:	4631      	mov	r1, r6
 801a328:	4638      	mov	r0, r7
 801a32a:	f7ff f99f 	bl	801966c <_free_r>
 801a32e:	e7e9      	b.n	801a304 <_realloc_r+0x1c>
 801a330:	4635      	mov	r5, r6
 801a332:	e7e7      	b.n	801a304 <_realloc_r+0x1c>

0801a334 <_malloc_usable_size_r>:
 801a334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a338:	1f18      	subs	r0, r3, #4
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	bfbc      	itt	lt
 801a33e:	580b      	ldrlt	r3, [r1, r0]
 801a340:	18c0      	addlt	r0, r0, r3
 801a342:	4770      	bx	lr

0801a344 <_init>:
 801a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a346:	bf00      	nop
 801a348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a34a:	bc08      	pop	{r3}
 801a34c:	469e      	mov	lr, r3
 801a34e:	4770      	bx	lr

0801a350 <_fini>:
 801a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a352:	bf00      	nop
 801a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a356:	bc08      	pop	{r3}
 801a358:	469e      	mov	lr, r3
 801a35a:	4770      	bx	lr
