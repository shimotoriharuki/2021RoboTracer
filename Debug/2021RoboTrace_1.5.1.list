
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019bfc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a0c  08019dc0  08019dc0  00029dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a7cc  0801a7cc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a7cc  0801a7cc  0002a7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a7d4  0801a7d4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a7d4  0801a7d4  0002a7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a7dc  0801a7dc  0002a7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a7e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046c58  200001e0  0801a9bc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046e38  0801a9bc  00036e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b1ca  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b3d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00073008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  00075348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  000773b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265e6  00000000  00000000  000ac86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001110e6  00000000  00000000  000d2e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3f38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a760  00000000  00000000  001e3fb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019da4 	.word	0x08019da4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019da4 	.word	0x08019da4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fb8a 	bl	800b6f0 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044930 	.word	0x20044930

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fb72 	bl	800b6f0 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044930 	.word	0x20044930

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a fa13 	bl	800b44c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 ff7a 	bl	8009f20 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 ff74 	bl	8009f20 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 ff6e 	bl	8009f20 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 ff68 	bl	8009f20 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 ff62 	bl	8009f20 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 ff5c 	bl	8009f20 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 ff56 	bl	8009f20 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 ff50 	bl	8009f20 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 ff4a 	bl	8009f20 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 ff44 	bl	8009f20 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 ff38 	bl	8009f20 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 ff32 	bl	8009f20 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 fa05 	bl	8017538 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00e f842 	bl	800f280 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00e f83e 	bl	800f280 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00e f83a 	bl	800f280 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00e f836 	bl	800f280 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20044a1c 	.word	0x20044a1c
 8001248:	20044984 	.word	0x20044984
 800124c:	20044aa4 	.word	0x20044aa4

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20044a1c 	.word	0x20044a1c
 800137c:	20044aa4 	.word	0x20044aa4
 8001380:	20044984 	.word	0x20044984

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20044a1c 	.word	0x20044a1c
 80013c4:	20044984 	.word	0x20044984
 80013c8:	20044aa4 	.word	0x20044aa4

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fff6 	bl	800f420 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fff2 	bl	800f420 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20044b84 	.word	0x20044b84
 8001458:	20044868 	.word	0x20044868
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f9d8 	bl	8001b58 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f9ec 	bl	8001b84 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 fb86 	bl	8013ed4 <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20043774 	.word	0x20043774

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 ff45 	bl	80166a0 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 fbca 	bl	8013fbc <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 fbc5 	bl	8013fbc <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f012 f933 	bl	8013aaa <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f9b8 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019dc0 	.word	0x08019dc0
 8001870:	200436e4 	.word	0x200436e4
 8001874:	20043774 	.word	0x20043774
 8001878:	20043764 	.word	0x20043764

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f960 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f012 fb41 	bl	8013f28 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fdac 	bl	8014404 <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f012 fb3b 	bl	8013f28 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f967 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fee0 	bl	80166a0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f012 fb68 	bl	8013fbc <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f012 f8d6 	bl	8013aaa <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f95b 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f012 fada 	bl	8013ed4 <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	200435e4 	.word	0x200435e4
 8001930:	200424a4 	.word	0x200424a4
 8001934:	08019ddc 	.word	0x08019ddc
 8001938:	08019dc0 	.word	0x08019dc0
 800193c:	200436e4 	.word	0x200436e4
 8001940:	20043774 	.word	0x20043774
 8001944:	20043764 	.word	0x20043764

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f8 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f90c 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fee3 	bl	8016748 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 ff0a 	bl	80147c0 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f901 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f012 fa8c 	bl	8013ed4 <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019dcc 	.word	0x08019dcc
 80019cc:	200436e4 	.word	0x200436e4
 80019d0:	20043774 	.word	0x20043774

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b2 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f8c6 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fe9d 	bl	8016748 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 fec4 	bl	80147c0 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f8bb 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f012 fa46 	bl	8013ed4 <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019dd8 	.word	0x08019dd8
 8001a58:	200436e4 	.word	0x200436e4
 8001a5c:	20043774 	.word	0x20043774

08001a60 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f86e 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <sd_write_array_int+0xa4>)
 8001a86:	f012 fa4f 	bl	8013f28 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_write_array_int+0xa8>)
 8001a8c:	f012 fcba 	bl	8014404 <f_unlink>
		f_chdir("..");
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <sd_write_array_int+0xac>)
 8001a92:	f012 fa49 	bl	8013f28 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a96:	f000 f875 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e022      	b.n	8001ae6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <sd_write_array_int+0xb0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ab4:	f014 fdf4 	bl	80166a0 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <sd_write_array_int+0xb8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ac0:	f012 fa7c 	bl	8013fbc <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ac6:	f7fe fb9b 	bl	8000200 <strlen>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sd_write_array_int+0xbc>)
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ad2:	f011 ffea 	bl	8013aaa <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ad6:	f000 f86f 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbd6      	blt.n	8001aa0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_write_array_int+0xb8>)
 8001af4:	f012 f9ee 	bl	8013ed4 <f_close>

	return ret;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200435e4 	.word	0x200435e4
 8001b08:	200424a4 	.word	0x200424a4
 8001b0c:	08019ddc 	.word	0x08019ddc
 8001b10:	08019de0 	.word	0x08019de0
 8001b14:	200436e4 	.word	0x200436e4
 8001b18:	20043774 	.word	0x20043774
 8001b1c:	20043764 	.word	0x20043764

08001b20 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <sd_mount+0x30>)
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <sd_mount+0x34>)
 8001b30:	f011 fc48 	bl	80133c4 <f_mount>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <sd_mount+0x20>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e001      	b.n	8001b44 <sd_mount+0x24>
	else ret = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08019de8 	.word	0x08019de8
 8001b54:	200425a4 	.word	0x200425a4

08001b58 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <create_path+0x24>)
 8001b66:	f014 fe1b 	bl	80167a0 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <create_path+0x28>)
 8001b6e:	f014 fe17 	bl	80167a0 <strcpy>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200435e4 	.word	0x200435e4
 8001b80:	200424a4 	.word	0x200424a4

08001b84 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b8a:	f012 fcfd 	bl	8014588 <f_mkdir>

	f_chdir(dirpath);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b90:	f012 f9ca 	bl	8013f28 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b94:	2213      	movs	r2, #19
 8001b96:	4905      	ldr	r1, [pc, #20]	; (8001bac <fopen_folder_and_file+0x28>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <fopen_folder_and_file+0x2c>)
 8001b9a:	f011 fc59 	bl	8013450 <f_open>

	f_chdir("..");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <fopen_folder_and_file+0x30>)
 8001ba0:	f012 f9c2 	bl	8013f28 <f_chdir>


}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200435e4 	.word	0x200435e4
 8001bac:	200424a4 	.word	0x200424a4
 8001bb0:	20043774 	.word	0x20043774
 8001bb4:	08019ddc 	.word	0x08019ddc

08001bb8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e007      	b.n	8001bd4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <bufclear+0x30>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd8:	ddf4      	ble.n	8001bc4 <bufclear+0xc>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200436e4 	.word	0x200436e4

08001bec <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <read_byte+0x54>)
 8001c08:	f009 fc20 	bl	800b44c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c0c:	f107 010f 	add.w	r1, r7, #15
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	2201      	movs	r2, #1
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <read_byte+0x58>)
 8001c16:	f00c fdc9 	bl	800e7ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	2201      	movs	r2, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <read_byte+0x58>)
 8001c24:	f00c fef6 	bl	800ea14 <HAL_SPI_Receive>
	CS_SET;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <read_byte+0x54>)
 8001c30:	f009 fc0c 	bl	800b44c <HAL_GPIO_WritePin>

	return val;
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	20044810 	.word	0x20044810

08001c48 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <write_byte+0x54>)
 8001c6a:	f009 fbef 	bl	800b44c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c6e:	f107 010f 	add.w	r1, r7, #15
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <write_byte+0x58>)
 8001c78:	f00c fd98 	bl	800e7ac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c7c:	1db9      	adds	r1, r7, #6
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <write_byte+0x58>)
 8001c84:	f00c fd92 	bl	800e7ac <HAL_SPI_Transmit>
	CS_SET;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <write_byte+0x54>)
 8001c90:	f009 fbdc 	bl	800b44c <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	20044810 	.word	0x20044810

08001ca4 <IMU_init>:

uint16_t IMU_init() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff9c 	bl	8001bec <read_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2be0      	cmp	r3, #224	; 0xe0
 8001cbc:	d119      	bne.n	8001cf2 <IMU_init+0x4e>
		ret = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff ffbf 	bl	8001c48 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ffbb 	bl	8001c48 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	207f      	movs	r0, #127	; 0x7f
 8001cd6:	f7ff ffb7 	bl	8001c48 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ffb3 	bl	8001c48 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ffaf 	bl	8001c48 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cea:	2100      	movs	r1, #0
 8001cec:	207f      	movs	r0, #127	; 0x7f
 8001cee:	f7ff ffab 	bl	8001c48 <write_byte>
	}
	return ret;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <read_gyro_data>:

void read_gyro_data() {
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ff73 	bl	8001bec <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff6d 	bl	8001bec <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <read_gyro_data+0x64>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001d1e:	2035      	movs	r0, #53	; 0x35
 8001d20:	f7ff ff64 	bl	8001bec <read_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21c      	sxth	r4, r3
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f7ff ff5e 	bl	8001bec <read_byte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4323      	orrs	r3, r4
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <read_gyro_data+0x68>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d3c:	2037      	movs	r0, #55	; 0x37
 8001d3e:	f7ff ff55 	bl	8001bec <read_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21c      	sxth	r4, r3
 8001d48:	2038      	movs	r0, #56	; 0x38
 8001d4a:	f7ff ff4f 	bl	8001bec <read_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <read_gyro_data+0x6c>)
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd98      	pop	{r3, r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200447ac 	.word	0x200447ac
 8001d64:	200447aa 	.word	0x200447aa
 8001d68:	200447a4 	.word	0x200447a4

08001d6c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	805a      	strh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	809a      	strh	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	811a      	strh	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
{

}
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001db8:	f7ff ff74 	bl	8001ca4 <IMU_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <_ZN3IMU4initEv+0x44>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <_ZN3IMU4initEv+0x48>)
 8001de0:	f7ff f998 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f008 f89a 	bl	8009f20 <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	08019dec 	.word	0x08019dec
 8001df8:	08019df8 	.word	0x08019df8
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001e08:	f7ff ff78 	bl	8001cfc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <_ZN3IMU12updateValuesEv+0xb8>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <_ZN3IMU12updateValuesEv+0xbc>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <_ZN3IMU12updateValuesEv+0xc0>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb8f 	bl	8000554 <__aeabi_i2d>
 8001e36:	a31c      	add	r3, pc, #112	; (adr r3, 8001ea8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbf4 	bl	8000628 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4625      	mov	r5, r4
 8001e46:	461c      	mov	r4, r3
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb80 	bl	8000554 <__aeabi_i2d>
 8001e54:	a316      	add	r3, pc, #88	; (adr r3, 8001eb0 <_ZN3IMU12updateValuesEv+0xb0>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbe5 	bl	8000628 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fa29 	bl	80002bc <__adddf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fe89 	bl	8000b88 <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e86:	801a      	strh	r2, [r3, #0]
	mon_zg= zg_;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <_ZN3IMU12updateValuesEv+0xc8>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	eb851eb8 	.word	0xeb851eb8
 8001eac:	3f9eb851 	.word	0x3f9eb851
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	3fef0a3d 	.word	0x3fef0a3d
 8001eb8:	200447ac 	.word	0x200447ac
 8001ebc:	200447aa 	.word	0x200447aa
 8001ec0:	200447a4 	.word	0x200447a4
 8001ec4:	20000214 	.word	0x20000214
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7fe fb3f 	bl	8000578 <__aeabi_f2d>
 8001efa:	a316      	add	r3, pc, #88	; (adr r3, 8001f54 <_ZN3IMU8getOmegaEv+0x84>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fcbc 	bl	800087c <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f0e:	a313      	add	r3, pc, #76	; (adr r3, 8001f5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb86 	bl	8000628 <__aeabi_dmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	460c      	mov	r4, r1
 8001f20:	4618      	mov	r0, r3
 8001f22:	4621      	mov	r1, r4
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <_ZN3IMU8getOmegaEv+0x80>)
 8001f2a:	f7fe fca7 	bl	800087c <__aeabi_ddiv>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	4618      	mov	r0, r3
 8001f34:	4621      	mov	r1, r4
 8001f36:	f7fe fe6f 	bl	8000c18 <__aeabi_d2f>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	ee07 3a90 	vmov	s15, r3
}
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40668000 	.word	0x40668000
 8001f54:	66666666 	.word	0x66666666
 8001f58:	40306666 	.word	0x40306666
 8001f5c:	54411744 	.word	0x54411744
 8001f60:	400921fb 	.word	0x400921fb

08001f64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f6c:	466b      	mov	r3, sp
 8001f6e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f74:	f007 ffd4 	bl	8009f20 <HAL_Delay>
	lcd_clear();
 8001f78:	f7ff f892 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff f89e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f84:	4840      	ldr	r0, [pc, #256]	; (8002088 <_ZN3IMU11calibrationEv+0x124>)
 8001f86:	f7ff f8c5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff f897 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f92:	483e      	ldr	r0, [pc, #248]	; (800208c <_ZN3IMU11calibrationEv+0x128>)
 8001f94:	f7ff f8be 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa2:	1e5d      	subs	r5, r3, #1
 8001fa4:	61bd      	str	r5, [r7, #24]
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	f04f 0400 	mov.w	r4, #0
 8001fb8:	0154      	lsls	r4, r2, #5
 8001fba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fbe:	014b      	lsls	r3, r1, #5
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	0154      	lsls	r4, r2, #5
 8001fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd8:	014b      	lsls	r3, r1, #5
 8001fda:	462b      	mov	r3, r5
 8001fdc:	3301      	adds	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	3307      	adds	r3, #7
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fec:	466b      	mov	r3, sp
 8001fee:	3303      	adds	r3, #3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	83fb      	strh	r3, [r7, #30]
 8001ffa:	8bfa      	ldrh	r2, [r7, #30]
 8001ffc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	da13      	bge.n	800202c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800200a:	8bfb      	ldrh	r3, [r7, #30]
 800200c:	ee07 2a90 	vmov	s15, r2
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800201e:	2002      	movs	r0, #2
 8002020:	f007 ff7e 	bl	8009f20 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8002024:	8bfb      	ldrh	r3, [r7, #30]
 8002026:	3301      	adds	r3, #1
 8002028:	83fb      	strh	r3, [r7, #30]
 800202a:	e7e6      	b.n	8001ffa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	462b      	mov	r3, r5
 8002034:	3301      	adds	r3, #1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d00e      	beq.n	8002062 <_ZN3IMU11calibrationEv+0xfe>
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	3304      	adds	r3, #4
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e7ec      	b.n	800203c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002062:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	edc3 7a03 	vstr	s15, [r3, #12]
 800207c:	46b5      	mov	sp, r6
}
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002086:	bf00      	nop
 8002088:	08019dfc 	.word	0x08019dfc
 800208c:	08019e08 	.word	0x08019e08

08002090 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	b299      	uxth	r1, r3
 80020a4:	1dfa      	adds	r2, r7, #7
 80020a6:	2364      	movs	r3, #100	; 0x64
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <INA260_read+0x50>)
 80020ae:	f009 fb1f 	bl	800b6f0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	b299      	uxth	r1, r3
 80020b6:	f107 020c 	add.w	r2, r7, #12
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2302      	movs	r3, #2
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <INA260_read+0x50>)
 80020c2:	f009 fc13 	bl	800b8ec <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	7b7b      	ldrb	r3, [r7, #13]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	81fb      	strh	r3, [r7, #14]
	return val;
 80020d6:	89fb      	ldrh	r3, [r7, #14]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200449c4 	.word	0x200449c4

080020e4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4603      	mov	r3, r0
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	460b      	mov	r3, r1
 80020fc:	717b      	strb	r3, [r7, #5]
 80020fe:	4613      	mov	r3, r2
 8002100:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	733b      	strb	r3, [r7, #12]
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	737b      	strb	r3, [r7, #13]
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800210e:	793b      	ldrb	r3, [r7, #4]
 8002110:	b299      	uxth	r1, r3
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2303      	movs	r3, #3
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <INA260_write+0x48>)
 800211e:	f009 fae7 	bl	800b6f0 <HAL_I2C_Master_Transmit>
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	200449c4 	.word	0x200449c4

08002130 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	460b      	mov	r3, r1
 800213c:	71bb      	strb	r3, [r7, #6]
 800213e:	4613      	mov	r3, r2
 8002140:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002142:	797b      	ldrb	r3, [r7, #5]
 8002144:	79ba      	ldrb	r2, [r7, #6]
 8002146:	79f9      	ldrb	r1, [r7, #7]
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ffcb 	bl	80020e4 <INA260_write>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	461a      	mov	r2, r3
 8002164:	21df      	movs	r1, #223	; 0xdf
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff ffe2 	bl	8002130 <setConfig>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
{

}
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	482a      	ldr	r0, [pc, #168]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 800219e:	f009 f93d 	bl	800b41c <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <_ZN8JoyStick8getValueEv+0x2e>
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80021ba:	2101      	movs	r1, #1
 80021bc:	4823      	ldr	r0, [pc, #140]	; (800224c <_ZN8JoyStick8getValueEv+0xc0>)
 80021be:	f009 f92d 	bl	800b41c <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <_ZN8JoyStick8getValueEv+0x4e>
 80021d2:	89fb      	ldrh	r3, [r7, #14]
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80021da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021de:	481a      	ldr	r0, [pc, #104]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 80021e0:	f009 f91c 	bl	800b41c <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0x70>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021fc:	2104      	movs	r1, #4
 80021fe:	4814      	ldr	r0, [pc, #80]	; (8002250 <_ZN8JoyStick8getValueEv+0xc4>)
 8002200:	f009 f90c 	bl	800b41c <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <_ZN8JoyStick8getValueEv+0x90>
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 8002220:	f009 f8fc 	bl	800b41c <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <_ZN8JoyStick8getValueEv+0xb0>
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800223c:	89fb      	ldrh	r3, [r7, #14]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40020400 	.word	0x40020400

08002254 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b52      	cmp	r3, #82	; 0x52
 8002264:	d112      	bne.n	800228c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	4856      	ldr	r0, [pc, #344]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800226e:	f009 f8ed 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002278:	4853      	ldr	r0, [pc, #332]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f009 f8e7 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002284:	4850      	ldr	r0, [pc, #320]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f009 f8e1 	bl	800b44c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800228a:	e098      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b47      	cmp	r3, #71	; 0x47
 8002290:	d112      	bne.n	80022b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002298:	484b      	ldr	r0, [pc, #300]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800229a:	f009 f8d7 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a4:	4848      	ldr	r0, [pc, #288]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f009 f8d1 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b0:	4845      	ldr	r0, [pc, #276]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f009 f8cb 	bl	800b44c <HAL_GPIO_WritePin>
}
 80022b6:	e082      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b42      	cmp	r3, #66	; 0x42
 80022bc:	d112      	bne.n	80022e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c4:	4840      	ldr	r0, [pc, #256]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022c6:	f009 f8c1 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d0:	483d      	ldr	r0, [pc, #244]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f009 f8bb 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022dc:	483a      	ldr	r0, [pc, #232]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f009 f8b5 	bl	800b44c <HAL_GPIO_WritePin>
}
 80022e2:	e06c      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	2b43      	cmp	r3, #67	; 0x43
 80022e8:	d112      	bne.n	8002310 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f0:	4835      	ldr	r0, [pc, #212]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022f2:	f009 f8ab 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fc:	4832      	ldr	r0, [pc, #200]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f009 f8a5 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	482f      	ldr	r0, [pc, #188]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f009 f89f 	bl	800b44c <HAL_GPIO_WritePin>
}
 800230e:	e056      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b4d      	cmp	r3, #77	; 0x4d
 8002314:	d112      	bne.n	800233c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800231c:	482a      	ldr	r0, [pc, #168]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800231e:	f009 f895 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002328:	4827      	ldr	r0, [pc, #156]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f009 f88f 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002334:	4824      	ldr	r0, [pc, #144]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f009 f889 	bl	800b44c <HAL_GPIO_WritePin>
}
 800233a:	e040      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b59      	cmp	r3, #89	; 0x59
 8002340:	d112      	bne.n	8002368 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002348:	481f      	ldr	r0, [pc, #124]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800234a:	f009 f87f 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002354:	481c      	ldr	r0, [pc, #112]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002356:	f009 f879 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002360:	4819      	ldr	r0, [pc, #100]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f009 f873 	bl	800b44c <HAL_GPIO_WritePin>
}
 8002366:	e02a      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b57      	cmp	r3, #87	; 0x57
 800236c:	d112      	bne.n	8002394 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002376:	f009 f869 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002380:	4811      	ldr	r0, [pc, #68]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002382:	f009 f863 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800238e:	f009 f85d 	bl	800b44c <HAL_GPIO_WritePin>
}
 8002392:	e014      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b7e      	cmp	r3, #126	; 0x7e
 8002398:	d111      	bne.n	80023be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023a2:	f009 f853 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	4806      	ldr	r0, [pc, #24]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ae:	f009 f84d 	bl	800b44c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ba:	f009 f847 	bl	800b44c <HAL_GPIO_WritePin>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40020000 	.word	0x40020000

080023cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ea:	4813      	ldr	r0, [pc, #76]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 80023ec:	f009 f82e 	bl	800b44c <HAL_GPIO_WritePin>
 80023f0:	e009      	b.n	8002406 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002402:	f009 f823 	bl	800b44c <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002416:	f009 f819 	bl	800b44c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800241a:	e009      	b.n	8002430 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800241c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800242a:	4803      	ldr	r0, [pc, #12]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 800242c:	f009 f80e 	bl	800b44c <HAL_GPIO_WritePin>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40020000 	.word	0x40020000

0800243c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800243c:	b580      	push	{r7, lr}
 800243e:	b092      	sub	sp, #72	; 0x48
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fe92 	bl	8002174 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	331c      	adds	r3, #28
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
 800245e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	429a      	cmp	r2, r3
 8002464:	d008      	beq.n	8002478 <_ZN10LineSensorC1Ev+0x3c>
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002472:	3302      	adds	r3, #2
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
 8002476:	e7f2      	b.n	800245e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	3338      	adds	r3, #56	; 0x38
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	429a      	cmp	r2, r3
 8002490:	d009      	beq.n	80024a6 <_ZN10LineSensorC1Ev+0x6a>
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	623b      	str	r3, [r7, #32]
		s = 0;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800249e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a0:	3304      	adds	r3, #4
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
 80024a4:	e7f1      	b.n	800248a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3338      	adds	r3, #56	; 0x38
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d009      	beq.n	80024d4 <_ZN10LineSensorC1Ev+0x98>
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	3304      	adds	r3, #4
 80024d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d2:	e7f1      	b.n	80024b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	3338      	adds	r3, #56	; 0x38
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d009      	beq.n	8002502 <_ZN10LineSensorC1Ev+0xc6>
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	3304      	adds	r3, #4
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	e7f1      	b.n	80024e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	3748      	adds	r7, #72	; 0x48
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	220e      	movs	r2, #14
 8002518:	4619      	mov	r1, r3
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800251c:	f007 fd66 	bl	8009fec <HAL_ADC_Start_DMA>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200448e8 	.word	0x200448e8

0800252c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b0d      	cmp	r3, #13
 800253c:	dc2f      	bgt.n	800259e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3392      	adds	r3, #146	; 0x92
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	33a0      	adds	r3, #160	; 0xa0
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1a5b      	subs	r3, r3, r1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	440b      	add	r3, r1
 800258a:	3306      	adds	r3, #6
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e7cc      	b.n	8002538 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d902      	bls.n	80025b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]


}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000254 	.word	0x20000254

080025c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025da:	2b0d      	cmp	r3, #13
 80025dc:	f200 8087 	bhi.w	80026ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d81c      	bhi.n	8002628 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4423      	add	r3, r4
 8002606:	3306      	adds	r3, #6
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4403      	add	r3, r0
 800260c:	3304      	adds	r3, #4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002616:	440b      	add	r3, r1
 8002618:	3b30      	subs	r3, #48	; 0x30
 800261a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800261c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002620:	3301      	adds	r3, #1
 8002622:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002626:	e7de      	b.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800262e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002632:	2b09      	cmp	r3, #9
 8002634:	d84d      	bhi.n	80026d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002636:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800263a:	3301      	adds	r3, #1
 800263c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002640:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002644:	2b09      	cmp	r3, #9
 8002646:	d83e      	bhi.n	80026c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002648:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002652:	4413      	add	r3, r2
 8002654:	3b30      	subs	r3, #48	; 0x30
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002664:	4413      	add	r3, r2
 8002666:	3b30      	subs	r3, #48	; 0x30
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	d521      	bpl.n	80026ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002676:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002680:	4413      	add	r3, r2
 8002682:	3b30      	subs	r3, #48	; 0x30
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002688:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800268c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002696:	440a      	add	r2, r1
 8002698:	3a30      	subs	r2, #48	; 0x30
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80026a2:	440b      	add	r3, r1
 80026a4:	3b30      	subs	r3, #48	; 0x30
 80026a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80026a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026b2:	4413      	add	r3, r2
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80026ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026be:	3301      	adds	r3, #1
 80026c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026c4:	e7bc      	b.n	8002640 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80026c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ca:	3301      	adds	r3, #1
 80026cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80026d0:	e7ad      	b.n	800262e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 80026d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	33b0      	adds	r3, #176	; 0xb0
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026e6:	3301      	adds	r3, #1
 80026e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026ec:	e773      	b.n	80025d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 80026f6:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002700:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 800270a:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 8002714:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 800271e:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 8002728:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 8002732:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 800273c:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002746:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002750:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800275a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 8002764:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 800276e:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 8002778:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	3738      	adds	r7, #56	; 0x38
 8002788:	46bd      	mov	sp, r7
 800278a:	bc90      	pop	{r4, r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000218 	.word	0x20000218
 8002794:	2000021c 	.word	0x2000021c
 8002798:	20000220 	.word	0x20000220
 800279c:	20000224 	.word	0x20000224
 80027a0:	20000228 	.word	0x20000228
 80027a4:	2000022c 	.word	0x2000022c
 80027a8:	20000230 	.word	0x20000230
 80027ac:	20000234 	.word	0x20000234
 80027b0:	20000238 	.word	0x20000238
 80027b4:	2000023c 	.word	0x2000023c
 80027b8:	20000240 	.word	0x20000240
 80027bc:	20000244 	.word	0x20000244
 80027c0:	20000248 	.word	0x20000248
 80027c4:	2000024c 	.word	0x2000024c
 80027c8:	20000250 	.word	0x20000250

080027cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a0      	sub	sp, #128	; 0x80
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80027d4:	2064      	movs	r0, #100	; 0x64
 80027d6:	f007 fba3 	bl	8009f20 <HAL_Delay>

	lcd_clear();
 80027da:	f7fe fc61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80027de:	2100      	movs	r1, #0
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fc6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027e6:	4886      	ldr	r0, [pc, #536]	; (8002a00 <_ZN10LineSensor11calibrationEv+0x234>)
 80027e8:	f7fe fc94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027ec:	2101      	movs	r1, #1
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe fc66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027f4:	4883      	ldr	r0, [pc, #524]	; (8002a04 <_ZN10LineSensor11calibrationEv+0x238>)
 80027f6:	f7fe fc8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002800:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002804:	2b0d      	cmp	r3, #13
 8002806:	d823      	bhi.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002808:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800280c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	32b0      	adds	r2, #176	; 0xb0
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	440a      	add	r2, r1
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002820:	440b      	add	r3, r1
 8002822:	3b40      	subs	r3, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002826:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800282a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	32b0      	adds	r2, #176	; 0xb0
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	440a      	add	r2, r1
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800283e:	440b      	add	r3, r1
 8002840:	3b78      	subs	r3, #120	; 0x78
 8002842:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002844:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002848:	3301      	adds	r3, #1
 800284a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800284e:	e7d7      	b.n	8002800 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc98 	bl	800218c <_ZN8JoyStick8getValueEv>
 800285c:	4603      	mov	r3, r0
 800285e:	2b02      	cmp	r3, #2
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d079      	beq.n	8002960 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800286c:	2300      	movs	r3, #0
 800286e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002872:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002876:	2b0d      	cmp	r3, #13
 8002878:	d850      	bhi.n	800291c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800287a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002884:	4413      	add	r3, r2
 8002886:	3b40      	subs	r3, #64	; 0x40
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	33b0      	adds	r3, #176	; 0xb0
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d50f      	bpl.n	80028c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80028a6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028aa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	32b0      	adds	r2, #176	; 0xb0
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	440a      	add	r2, r1
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028be:	440b      	add	r3, r1
 80028c0:	3b40      	subs	r3, #64	; 0x40
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e024      	b.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80028c6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028d0:	4413      	add	r3, r2
 80028d2:	3b78      	subs	r3, #120	; 0x78
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	33b0      	adds	r3, #176	; 0xb0
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	dd0e      	ble.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028f2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028f6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	32b0      	adds	r2, #176	; 0xb0
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	440a      	add	r2, r1
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800290a:	440b      	add	r3, r1
 800290c:	3b78      	subs	r3, #120	; 0x78
 800290e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002910:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002914:	3301      	adds	r3, #1
 8002916:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800291a:	e7aa      	b.n	8002872 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fe12 	bl	800554c <_ZN12RotarySwitch8getValueEv>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800293e:	2201      	movs	r2, #1
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fd41 	bl	80023cc <_ZN3LED2LREaa>
 800294a:	e781      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fd37 	bl	80023cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800295e:	e777      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002960:	2300      	movs	r3, #0
 8002962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800296a:	2b0d      	cmp	r3, #13
 800296c:	d826      	bhi.n	80029bc <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800296e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002978:	4413      	add	r3, r2
 800297a:	3b40      	subs	r3, #64	; 0x40
 800297c:	ed93 7a00 	vldr	s14, [r3]
 8002980:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800298a:	4413      	add	r3, r2
 800298c:	3b78      	subs	r3, #120	; 0x78
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002996:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800299a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a08 <_ZN10LineSensor11calibrationEv+0x23c>
 800299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	3392      	adds	r3, #146	; 0x92
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029b0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029ba:	e7d4      	b.n	8002966 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029c2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c6:	2b0d      	cmp	r3, #13
 80029c8:	d815      	bhi.n	80029f6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80029ca:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80029ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80029d8:	440a      	add	r2, r1
 80029da:	3a78      	subs	r2, #120	; 0x78
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	33a0      	adds	r3, #160	; 0xa0
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029ea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029f4:	e7e5      	b.n	80029c2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029f6:	bf00      	nop
 80029f8:	3780      	adds	r7, #128	; 0x80
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08019e14 	.word	0x08019e14
 8002a04:	08019e20 	.word	0x08019e20
 8002a08:	447a0000 	.word	0x447a0000

08002a0c <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002a18:	2303      	movs	r3, #3
 8002a1a:	81bb      	strh	r3, [r7, #12]
 8002a1c:	89bb      	ldrh	r3, [r7, #12]
 8002a1e:	2b0a      	cmp	r3, #10
 8002a20:	d814      	bhi.n	8002a4c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	33b0      	adds	r3, #176	; 0xb0
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002aa0 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	db02      	blt.n	8002a44 <_ZN10LineSensor13emergencyStopEv+0x38>
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	3301      	adds	r3, #1
 8002a42:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a44:	89bb      	ldrh	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	81bb      	strh	r3, [r7, #12]
 8002a4a:	e7e7      	b.n	8002a1c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d906      	bls.n	8002a60 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	2b63      	cmp	r3, #99	; 0x63
 8002a6c:	d903      	bls.n	8002a76 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e002      	b.n	8002a7c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d903      	bls.n	8002a90 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a8e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]

}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	44098000 	.word	0x44098000
 8002aa4:	20000256 	.word	0x20000256
 8002aa8:	20000258 	.word	0x20000258

08002aac <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aba:	eef0 7ae7 	vabs.f32	s15, s15
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), all_sideline_flag_(false)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b58:	3350      	adds	r3, #80	; 0x50
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b64:	3352      	adds	r3, #82	; 0x52
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b70:	3354      	adds	r3, #84	; 0x54
 8002b72:	2200      	movs	r2, #0
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	2200      	movs	r2, #0
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b88:	331c      	adds	r3, #28
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b94:	331e      	adds	r3, #30
 8002b96:	2200      	movs	r2, #0
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ba0:	3320      	adds	r3, #32
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	801a      	strh	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bac:	3322      	adds	r3, #34	; 0x22
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bb8:	3323      	adds	r3, #35	; 0x23
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bc4:	3324      	adds	r3, #36	; 0x24
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bd0:	3328      	adds	r3, #40	; 0x28
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bde:	332c      	adds	r3, #44	; 0x2c
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bec:	3330      	adds	r3, #48	; 0x30
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002bfa:	3334      	adds	r3, #52	; 0x34
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c08:	3338      	adds	r3, #56	; 0x38
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	801a      	strh	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c14:	333a      	adds	r3, #58	; 0x3a
 8002c16:	2200      	movs	r2, #0
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002c20:	333c      	adds	r3, #60	; 0x3c
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c3c:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c42:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c48:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c4e:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c54:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	83fb      	strh	r3, [r7, #30]
 8002c60:	8bfb      	ldrh	r3, [r7, #30]
 8002c62:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d80d      	bhi.n	8002c86 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ba>
		velocity_table_[i] = 0;
 8002c6a:	8bfb      	ldrh	r3, [r7, #30]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c72:	3304      	adds	r3, #4
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c7e:	8bfb      	ldrh	r3, [r7, #30]
 8002c80:	3301      	adds	r3, #1
 8002c82:	83fb      	strh	r3, [r7, #30]
 8002c84:	e7ec      	b.n	8002c60 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x194>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c86:	2300      	movs	r3, #0
 8002c88:	83bb      	strh	r3, [r7, #28]
 8002c8a:	8bbb      	ldrh	r3, [r7, #28]
 8002c8c:	2b63      	cmp	r3, #99	; 0x63
 8002c8e:	d80d      	bhi.n	8002cac <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e0>
		crossline_distance_[i] = 0;
 8002c90:	8bbb      	ldrh	r3, [r7, #28]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c98:	3316      	adds	r3, #22
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002ca4:	8bbb      	ldrh	r3, [r7, #28]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	83bb      	strh	r3, [r7, #28]
 8002caa:	e7ee      	b.n	8002c8a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1be>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cac:	2300      	movs	r3, #0
 8002cae:	837b      	strh	r3, [r7, #26]
 8002cb0:	8b7b      	ldrh	r3, [r7, #26]
 8002cb2:	2b63      	cmp	r3, #99	; 0x63
 8002cb4:	d80d      	bhi.n	8002cd2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x206>
		crossline_distance2_[i] = 0;
 8002cb6:	8b7b      	ldrh	r3, [r7, #26]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002cbe:	333a      	adds	r3, #58	; 0x3a
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cca:	8b7b      	ldrh	r3, [r7, #26]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	837b      	strh	r3, [r7, #26]
 8002cd0:	e7ee      	b.n	8002cb0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	833b      	strh	r3, [r7, #24]
 8002cd6:	8b3b      	ldrh	r3, [r7, #24]
 8002cd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cdc:	d20d      	bcs.n	8002cfa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x22e>
		sideline_distance_[i] = 0;
 8002cde:	8b3b      	ldrh	r3, [r7, #24]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002ce6:	331e      	adds	r3, #30
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cf2:	8b3b      	ldrh	r3, [r7, #24]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	833b      	strh	r3, [r7, #24]
 8002cf8:	e7ed      	b.n	8002cd6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20a>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	82fb      	strh	r3, [r7, #22]
 8002cfe:	8afb      	ldrh	r3, [r7, #22]
 8002d00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d04:	d20d      	bcs.n	8002d22 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x256>
		sideline_distance2_[i] = 0;
 8002d06:	8afb      	ldrh	r3, [r7, #22]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002d0e:	3312      	adds	r3, #18
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002d1a:	8afb      	ldrh	r3, [r7, #22]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	82fb      	strh	r3, [r7, #22]
 8002d20:	e7ed      	b.n	8002cfe <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4618      	mov	r0, r3
 8002d26:	3724      	adds	r7, #36	; 0x24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002d54:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002d68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002d74:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	ee07 3a90 	vmov	s15, r3

}
 8002d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	2000025c 	.word	0x2000025c

08002da0 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ffc1 	bl	8002d30 <_ZN9LineTrace9calcErrorEv>
 8002dae:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002dbc:	4b66      	ldr	r3, [pc, #408]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dd2:	3354      	adds	r3, #84	; 0x54
 8002dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d14c      	bne.n	8002e76 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002de2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dfe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e06:	ee17 0a90 	vmov	r0, s15
 8002e0a:	f7fd fbb5 	bl	8000578 <__aeabi_f2d>
 8002e0e:	a350      	add	r3, pc, #320	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f7fd fd32 	bl	800087c <__aeabi_ddiv>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	4621      	mov	r1, r4
 8002e20:	f7fd fefa 	bl	8000c18 <__aeabi_d2f>
 8002e24:	4603      	mov	r3, r0
 8002e26:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fba3 	bl	8000578 <__aeabi_f2d>
 8002e32:	4604      	mov	r4, r0
 8002e34:	460d      	mov	r5, r1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e44:	ee17 0a90 	vmov	r0, s15
 8002e48:	f7fd fb96 	bl	8000578 <__aeabi_f2d>
 8002e4c:	a340      	add	r3, pc, #256	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd fbe9 	bl	8000628 <__aeabi_dmul>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd fa2d 	bl	80002bc <__adddf3>
 8002e62:	4603      	mov	r3, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	4618      	mov	r0, r3
 8002e68:	4621      	mov	r1, r4
 8002e6a:	f7fd fed5 	bl	8000c18 <__aeabi_d2f>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e04b      	b.n	8002f0e <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e84:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea0:	ee17 0a90 	vmov	r0, s15
 8002ea4:	f7fd fb68 	bl	8000578 <__aeabi_f2d>
 8002ea8:	a329      	add	r3, pc, #164	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f7fd fce5 	bl	800087c <__aeabi_ddiv>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4621      	mov	r1, r4
 8002eba:	f7fd fead 	bl	8000c18 <__aeabi_d2f>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002ec2:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb56 	bl	8000578 <__aeabi_f2d>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	460d      	mov	r5, r1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ed6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ede:	ee17 0a90 	vmov	r0, s15
 8002ee2:	f7fd fb49 	bl	8000578 <__aeabi_f2d>
 8002ee6:	a31a      	add	r3, pc, #104	; (adr r3, 8002f50 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7fd fb9c 	bl	8000628 <__aeabi_dmul>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	f7fd f9e0 	bl	80002bc <__adddf3>
 8002efc:	4603      	mov	r3, r0
 8002efe:	460c      	mov	r4, r1
 8002f00:	4618      	mov	r0, r3
 8002f02:	4621      	mov	r1, r4
 8002f04:	f7fd fe88 	bl	8000c18 <__aeabi_d2f>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002f0c:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002f0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f12:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f24:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002f32:	edd7 0a02 	vldr	s1, [r7, #8]
 8002f36:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f003 f834 	bl	8005fa8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6013      	str	r3, [r2, #0]

}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f54:	3f50624d 	.word	0x3f50624d
 8002f58:	20000280 	.word	0x20000280
 8002f5c:	2000027c 	.word	0x2000027c

08002f60 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fbd7 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 f9aa 	bl	80052d0 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f001 fec0 	bl	8004d06 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 ff21 	bl	8004dea <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fca:	3318      	adds	r3, #24
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	461c      	mov	r4, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f7fe fb87 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002fd6:	eef0 7a40 	vmov.f32	s15, s0
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002fe0:	3316      	adds	r3, #22
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ffe:	3318      	adds	r3, #24
 8003000:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003008:	3318      	adds	r3, #24
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	2b63      	cmp	r3, #99	; 0x63
 800300e:	d905      	bls.n	800301c <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003016:	3318      	adds	r3, #24
 8003018:	2263      	movs	r2, #99	; 0x63
 800301a:	801a      	strh	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}

08003024 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003036:	331a      	adds	r3, #26
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	461c      	mov	r4, r3
 800303c:	4610      	mov	r0, r2
 800303e:	f7fe fb51 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003042:	eef0 7a40 	vmov.f32	s15, s0
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 800304c:	333a      	adds	r3, #58	; 0x3a
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800305c:	331a      	adds	r3, #26
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800306a:	331a      	adds	r3, #26
 800306c:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003074:	331a      	adds	r3, #26
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	2b63      	cmp	r3, #99	; 0x63
 800307a:	d905      	bls.n	8003088 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003082:	331a      	adds	r3, #26
 8003084:	2263      	movs	r2, #99	; 0x63
 8003086:	801a      	strh	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}

08003090 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030a2:	331c      	adds	r3, #28
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	461c      	mov	r4, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7fe fb1b 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80030ae:	eef0 7a40 	vmov.f32	s15, s0
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 80030b8:	331e      	adds	r3, #30
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030c8:	331c      	adds	r3, #28
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030d6:	331c      	adds	r3, #28
 80030d8:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030e0:	331c      	adds	r3, #28
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030e8:	d306      	bcc.n	80030f8 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030f0:	331c      	adds	r3, #28
 80030f2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030f6:	801a      	strh	r2, [r3, #0]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd90      	pop	{r4, r7, pc}

08003100 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003112:	331e      	adds	r3, #30
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	461c      	mov	r4, r3
 8003118:	4610      	mov	r0, r2
 800311a:	f7fe fae3 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800311e:	eef0 7a40 	vmov.f32	s15, s0
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8003128:	3312      	adds	r3, #18
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003138:	331e      	adds	r3, #30
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003146:	331e      	adds	r3, #30
 8003148:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003150:	331e      	adds	r3, #30
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003158:	d306      	bcc.n	8003168 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003160:	331e      	adds	r3, #30
 8003162:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003166:	801a      	strh	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}

08003170 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	ed2d 8b02 	vpush	{d8}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d046      	beq.n	8003214 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800318c:	3354      	adds	r3, #84	; 0x54
 800318e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11c      	bne.n	80031d0 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69dc      	ldr	r4, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fa91 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80031a4:	eeb0 8a40 	vmov.f32	s16, s0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 f87e 	bl	80052ae <_ZN8Odometry8getThetaEv>
 80031b2:	ec53 2b10 	vmov	r2, r3, d0
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f7fd fd2d 	bl	8000c18 <__aeabi_d2f>
 80031be:	4603      	mov	r3, r0
 80031c0:	ee00 3a90 	vmov	s1, r3
 80031c4:	eeb0 0a48 	vmov.f32	s0, s16
 80031c8:	4620      	mov	r0, r4
 80031ca:	f001 fc53 	bl	8004a74 <_ZN6Logger21storeDistanceAndThetaEff>
 80031ce:	e01b      	b.n	8003208 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69dc      	ldr	r4, [r3, #28]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fa83 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80031de:	eeb0 8a40 	vmov.f32	s16, s0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 f861 	bl	80052ae <_ZN8Odometry8getThetaEv>
 80031ec:	ec53 2b10 	vmov	r2, r3, d0
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	f7fd fd10 	bl	8000c18 <__aeabi_d2f>
 80031f8:	4603      	mov	r3, r0
 80031fa:	ee00 3a90 	vmov	s1, r3
 80031fe:	eeb0 0a48 	vmov.f32	s0, s16
 8003202:	4620      	mov	r0, r4
 8003204:	f001 fc79 	bl	8004afa <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003212:	801a      	strh	r2, [r3, #0]
	}
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	ecbd 8b02 	vpop	{d8}
 800321e:	bd90      	pop	{r4, r7, pc}
 8003220:	20000260 	.word	0x20000260

08003224 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:
	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;

}

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(sideline_idx_ <= SIDELINE_SIZE){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003232:	331c      	adds	r3, #28
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800323a:	d84e      	bhi.n	80032da <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb6>
		float temp_sideline_distance = sideline_distance_[sideline_idx_];
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003242:	331c      	adds	r3, #28
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800324c:	331e      	adds	r3, #30
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fa42 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003260:	eeb0 7a40 	vmov.f32	s14, s0
 8003264:	edd7 7a03 	vldr	s15, [r7, #12]
 8003268:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800326c:	eeb0 0a67 	vmov.f32	s0, s15
 8003270:	f7ff fc1c 	bl	8002aac <_ZSt3absf>
 8003274:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 230){
 8003278:	edd7 7a02 	vldr	s15, [r7, #8]
 800327c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003300 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xdc>
 8003280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	d81a      	bhi.n	80032c0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x9c>
			correction_check_cnt_ = 0;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003290:	3338      	adds	r3, #56	; 0x38
 8003292:	2200      	movs	r2, #0
 8003294:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[sideline_idx_] / DISTANCE_CORRECTION_CONST);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6959      	ldr	r1, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032a0:	331c      	adds	r3, #28
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80032aa:	331e      	adds	r3, #30
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	eeb0 0a67 	vmov.f32	s0, s15
 80032b8:	4608      	mov	r0, r1
 80032ba:	f7fe fa22 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 80032be:	e00c      	b.n	80032da <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb6>
		}
		sideline_idx_++;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032c6:	331c      	adds	r3, #28
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032d4:	331c      	adds	r3, #28
 80032d6:	801a      	strh	r2, [r3, #0]
	while(sideline_idx_ <= SIDELINE_SIZE){
 80032d8:	e7a8      	b.n	800322c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x8>
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032e0:	331c      	adds	r3, #28
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032e8:	d306      	bcc.n	80032f8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xd4>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032f0:	331c      	adds	r3, #28
 80032f2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032f6:	801a      	strh	r2, [r3, #0]

}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	43660000 	.word	0x43660000

08003304 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003316:	3354      	adds	r3, #84	; 0x54
 8003318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d12b      	bne.n	8003378 <_ZN9LineTrace15radius2VelocityEf+0x74>
		if(radius < 400) velocity = min_velocity_;
 8003320:	edd7 7a00 	vldr	s15, [r7]
 8003324:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003410 <_ZN9LineTrace15radius2VelocityEf+0x10c>
 8003328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	d504      	bpl.n	800333c <_ZN9LineTrace15radius2VelocityEf+0x38>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e05e      	b.n	80033fa <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 800) velocity = 1.7;
 800333c:	edd7 7a00 	vldr	s15, [r7]
 8003340:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003414 <_ZN9LineTrace15radius2VelocityEf+0x110>
 8003344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334c:	d502      	bpl.n	8003354 <_ZN9LineTrace15radius2VelocityEf+0x50>
 800334e:	4b32      	ldr	r3, [pc, #200]	; (8003418 <_ZN9LineTrace15radius2VelocityEf+0x114>)
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e052      	b.n	80033fa <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1400) velocity = 2.0;
 8003354:	edd7 7a00 	vldr	s15, [r7]
 8003358:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800341c <_ZN9LineTrace15radius2VelocityEf+0x118>
 800335c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	d503      	bpl.n	800336e <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8003366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e045      	b.n	80033fa <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity_;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e040      	b.n	80033fa <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800337e:	3354      	adds	r3, #84	; 0x54
 8003380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d136      	bne.n	80033f6 <_ZN9LineTrace15radius2VelocityEf+0xf2>
		if(radius < 300) velocity = min_velocity2_;
 8003388:	edd7 7a00 	vldr	s15, [r7]
 800338c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003420 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 8003390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	d504      	bpl.n	80033a4 <_ZN9LineTrace15radius2VelocityEf+0xa0>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e02a      	b.n	80033fa <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1500) velocity = 2.1;
 80033a4:	edd7 7a00 	vldr	s15, [r7]
 80033a8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003424 <_ZN9LineTrace15radius2VelocityEf+0x120>
 80033ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	d502      	bpl.n	80033bc <_ZN9LineTrace15radius2VelocityEf+0xb8>
 80033b6:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <_ZN9LineTrace15radius2VelocityEf+0x124>)
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e01e      	b.n	80033fa <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2000) velocity = 2.5;
 80033bc:	edd7 7a00 	vldr	s15, [r7]
 80033c0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800342c <_ZN9LineTrace15radius2VelocityEf+0x128>
 80033c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033cc:	d502      	bpl.n	80033d4 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 80033ce:	4b18      	ldr	r3, [pc, #96]	; (8003430 <_ZN9LineTrace15radius2VelocityEf+0x12c>)
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e012      	b.n	80033fa <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2500) velocity = 3.0;
 80033d4:	edd7 7a00 	vldr	s15, [r7]
 80033d8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003434 <_ZN9LineTrace15radius2VelocityEf+0x130>
 80033dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e4:	d502      	bpl.n	80033ec <_ZN9LineTrace15radius2VelocityEf+0xe8>
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <_ZN9LineTrace15radius2VelocityEf+0x134>)
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e006      	b.n	80033fa <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity2_;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e001      	b.n	80033fa <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}
	else velocity = 1.3;
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <_ZN9LineTrace15radius2VelocityEf+0x138>)
 80033f8:	60fb      	str	r3, [r7, #12]

	return velocity;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	ee07 3a90 	vmov	s15, r3
}
 8003400:	eeb0 0a67 	vmov.f32	s0, s15
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	43c80000 	.word	0x43c80000
 8003414:	44480000 	.word	0x44480000
 8003418:	3fd9999a 	.word	0x3fd9999a
 800341c:	44af0000 	.word	0x44af0000
 8003420:	43960000 	.word	0x43960000
 8003424:	44bb8000 	.word	0x44bb8000
 8003428:	40066666 	.word	0x40066666
 800342c:	44fa0000 	.word	0x44fa0000
 8003430:	40200000 	.word	0x40200000
 8003434:	451c4000 	.word	0x451c4000
 8003438:	40400000 	.word	0x40400000
 800343c:	3fa66666 	.word	0x3fa66666

08003440 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	ed87 0a02 	vstr	s0, [r7, #8]
 800344c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800344e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003452:	83fb      	strh	r3, [r7, #30]
 8003454:	8bfb      	ldrh	r3, [r7, #30]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 808d 	beq.w	8003576 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800345c:	8bfb      	ldrh	r3, [r7, #30]
 800345e:	3b01      	subs	r3, #1
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003466:	3304      	adds	r3, #4
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	ed93 7a00 	vldr	s14, [r3]
 8003470:	8bfb      	ldrh	r3, [r7, #30]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003478:	3304      	adds	r3, #4
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	edd3 7a00 	vldr	s15, [r3]
 8003482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003486:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800348a:	edd7 7a06 	vldr	s15, [r7, #24]
 800348e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	dd6a      	ble.n	800356e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003498:	8bfb      	ldrh	r3, [r7, #30]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	4413      	add	r3, r2
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd f868 	bl	8000578 <__aeabi_f2d>
 80034a8:	a335      	add	r3, pc, #212	; (adr r3, 8003580 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f7fd f8bb 	bl	8000628 <__aeabi_dmul>
 80034b2:	4603      	mov	r3, r0
 80034b4:	460c      	mov	r4, r1
 80034b6:	4625      	mov	r5, r4
 80034b8:	461c      	mov	r4, r3
 80034ba:	69b8      	ldr	r0, [r7, #24]
 80034bc:	f7fd f85c 	bl	8000578 <__aeabi_f2d>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4620      	mov	r0, r4
 80034c6:	4629      	mov	r1, r5
 80034c8:	f7fd f9d8 	bl	800087c <__aeabi_ddiv>
 80034cc:	4603      	mov	r3, r0
 80034ce:	460c      	mov	r4, r1
 80034d0:	4618      	mov	r0, r3
 80034d2:	4621      	mov	r1, r4
 80034d4:	f7fd fba0 	bl	8000c18 <__aeabi_d2f>
 80034d8:	4603      	mov	r3, r0
 80034da:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034dc:	edd7 6a06 	vldr	s13, [r7, #24]
 80034e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80034e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e8:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80034f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fc:	dd37      	ble.n	800356e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034fe:	8bfb      	ldrh	r3, [r7, #30]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003506:	3304      	adds	r3, #4
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd f832 	bl	8000578 <__aeabi_f2d>
 8003514:	4604      	mov	r4, r0
 8003516:	460d      	mov	r5, r1
 8003518:	8bfb      	ldrh	r3, [r7, #30]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	ed93 7a00 	vldr	s14, [r3]
 8003524:	edd7 7a02 	vldr	s15, [r7, #8]
 8003528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352c:	ee17 0a90 	vmov	r0, s15
 8003530:	f7fd f822 	bl	8000578 <__aeabi_f2d>
 8003534:	a312      	add	r3, pc, #72	; (adr r3, 8003580 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f7fd f875 	bl	8000628 <__aeabi_dmul>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4620      	mov	r0, r4
 8003544:	4629      	mov	r1, r5
 8003546:	f7fc feb9 	bl	80002bc <__adddf3>
 800354a:	4603      	mov	r3, r0
 800354c:	460c      	mov	r4, r1
 800354e:	4619      	mov	r1, r3
 8003550:	4622      	mov	r2, r4
 8003552:	8bfb      	ldrh	r3, [r7, #30]
 8003554:	1e5c      	subs	r4, r3, #1
 8003556:	4608      	mov	r0, r1
 8003558:	4611      	mov	r1, r2
 800355a:	f7fd fb5d 	bl	8000c18 <__aeabi_d2f>
 800355e:	4601      	mov	r1, r0
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003566:	3304      	adds	r3, #4
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800356e:	8bfb      	ldrh	r3, [r7, #30]
 8003570:	3b01      	subs	r3, #1
 8003572:	83fb      	strh	r3, [r7, #30]
 8003574:	e76e      	b.n	8003454 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003576:	bf00      	nop
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bdb0      	pop	{r4, r5, r7, pc}
 800357e:	bf00      	nop
 8003580:	d2f1a9fc 	.word	0xd2f1a9fc
 8003584:	3f50624d 	.word	0x3f50624d

08003588 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003588:	b5b0      	push	{r4, r5, r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	ed87 0a02 	vstr	s0, [r7, #8]
 8003594:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003596:	2300      	movs	r3, #0
 8003598:	83fb      	strh	r3, [r7, #30]
 800359a:	8bfb      	ldrh	r3, [r7, #30]
 800359c:	f241 726f 	movw	r2, #5999	; 0x176f
 80035a0:	4293      	cmp	r3, r2
 80035a2:	f200 808d 	bhi.w	80036c0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80035a6:	8bfb      	ldrh	r3, [r7, #30]
 80035a8:	3301      	adds	r3, #1
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035b0:	3304      	adds	r3, #4
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	ed93 7a00 	vldr	s14, [r3]
 80035ba:	8bfb      	ldrh	r3, [r7, #30]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035c2:	3304      	adds	r3, #4
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035d0:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80035d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80035d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e0:	dd6a      	ble.n	80036b8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80035e2:	8bfb      	ldrh	r3, [r7, #30]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fc ffc3 	bl	8000578 <__aeabi_f2d>
 80035f2:	a335      	add	r3, pc, #212	; (adr r3, 80036c8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f7fd f816 	bl	8000628 <__aeabi_dmul>
 80035fc:	4603      	mov	r3, r0
 80035fe:	460c      	mov	r4, r1
 8003600:	4625      	mov	r5, r4
 8003602:	461c      	mov	r4, r3
 8003604:	69b8      	ldr	r0, [r7, #24]
 8003606:	f7fc ffb7 	bl	8000578 <__aeabi_f2d>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4620      	mov	r0, r4
 8003610:	4629      	mov	r1, r5
 8003612:	f7fd f933 	bl	800087c <__aeabi_ddiv>
 8003616:	4603      	mov	r3, r0
 8003618:	460c      	mov	r4, r1
 800361a:	4618      	mov	r0, r3
 800361c:	4621      	mov	r1, r4
 800361e:	f7fd fafb 	bl	8000c18 <__aeabi_d2f>
 8003622:	4603      	mov	r3, r0
 8003624:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003626:	edd7 6a06 	vldr	s13, [r7, #24]
 800362a:	ed97 7a05 	vldr	s14, [r7, #20]
 800362e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003632:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003636:	ed97 7a04 	vldr	s14, [r7, #16]
 800363a:	edd7 7a02 	vldr	s15, [r7, #8]
 800363e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003646:	dd37      	ble.n	80036b8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003648:	8bfb      	ldrh	r3, [r7, #30]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003650:	3304      	adds	r3, #4
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff8d 	bl	8000578 <__aeabi_f2d>
 800365e:	4604      	mov	r4, r0
 8003660:	460d      	mov	r5, r1
 8003662:	8bfb      	ldrh	r3, [r7, #30]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	ed93 7a00 	vldr	s14, [r3]
 800366e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003676:	ee17 0a90 	vmov	r0, s15
 800367a:	f7fc ff7d 	bl	8000578 <__aeabi_f2d>
 800367e:	a312      	add	r3, pc, #72	; (adr r3, 80036c8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f7fc ffd0 	bl	8000628 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4620      	mov	r0, r4
 800368e:	4629      	mov	r1, r5
 8003690:	f7fc fe14 	bl	80002bc <__adddf3>
 8003694:	4603      	mov	r3, r0
 8003696:	460c      	mov	r4, r1
 8003698:	4619      	mov	r1, r3
 800369a:	4622      	mov	r2, r4
 800369c:	8bfb      	ldrh	r3, [r7, #30]
 800369e:	1c5c      	adds	r4, r3, #1
 80036a0:	4608      	mov	r0, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	f7fd fab8 	bl	8000c18 <__aeabi_d2f>
 80036a8:	4601      	mov	r1, r0
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80036b0:	3304      	adds	r3, #4
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80036b8:	8bfb      	ldrh	r3, [r7, #30]
 80036ba:	3301      	adds	r3, #1
 80036bc:	83fb      	strh	r3, [r7, #30]
 80036be:	e76c      	b.n	800359a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80036c0:	bf00      	nop
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bdb0      	pop	{r4, r5, r7, pc}
 80036c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80036cc:	3f50624d 	.word	0x3f50624d

080036d0 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe f82d 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e8:	3350      	adds	r3, #80	; 0x50
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003704:	3350      	adds	r3, #80	; 0x50
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003710:	3352      	adds	r3, #82	; 0x52
 8003712:	2200      	movs	r2, #0
 8003714:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800371c:	330c      	adds	r3, #12
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800373e:	3350      	adds	r3, #80	; 0x50
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8086 	beq.w	8003854 <_ZN9LineTrace20updateTargetVelocityEv+0x124>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd ffc9 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003752:	eeb0 7a40 	vmov.f32	s14, s0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800375c:	330c      	adds	r3, #12
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376a:	bfac      	ite	ge
 800376c:	2301      	movge	r3, #1
 800376e:	2300      	movlt	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d026      	beq.n	80037c4 <_ZN9LineTrace20updateTargetVelocityEv+0x94>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800377c:	330c      	adds	r3, #12
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003788:	3352      	adds	r3, #82	; 0x52
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	3332      	adds	r3, #50	; 0x32
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80037a4:	330c      	adds	r3, #12
 80037a6:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037b0:	3352      	adds	r3, #82	; 0x52
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037be:	3352      	adds	r3, #82	; 0x52
 80037c0:	801a      	strh	r2, [r3, #0]
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80037c2:	e7c1      	b.n	8003748 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037ca:	3352      	adds	r3, #82	; 0x52
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	f241 726f 	movw	r2, #5999	; 0x176f
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d906      	bls.n	80037e4 <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037dc:	3352      	adds	r3, #82	; 0x52
 80037de:	f241 726f 	movw	r2, #5999	; 0x176f
 80037e2:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80037ea:	330c      	adds	r3, #12
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	; (800385c <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 80037f0:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd ff74 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80037fc:	eef0 7a40 	vmov.f32	s15, s0
 8003800:	4b17      	ldr	r3, [pc, #92]	; (8003860 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 8003802:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800380c:	3352      	adds	r3, #82	; 0x52
 800380e:	881a      	ldrh	r2, [r3, #0]
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8003812:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800381a:	3352      	adds	r3, #82	; 0x52
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003824:	3304      	adds	r3, #4
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	eeb0 0a67 	vmov.f32	s0, s15
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fae5 	bl	8003e02 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800383e:	3352      	adds	r3, #82	; 0x52
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003848:	3304      	adds	r3, #4
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a05      	ldr	r2, [pc, #20]	; (8003868 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 8003852:	6013      	str	r3, [r2, #0]

	}
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	2000026c 	.word	0x2000026c
 8003860:	20000270 	.word	0x20000270
 8003864:	20000274 	.word	0x20000274
 8003868:	20000278 	.word	0x20000278

0800386c <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003878:	2300      	movs	r3, #0
 800387a:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd ff20 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003886:	eeb0 7a40 	vmov.f32	s14, s0
 800388a:	edd7 7a00 	vldr	s15, [r7]
 800388e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003896:	bf94      	ite	ls
 8003898:	2301      	movls	r3, #1
 800389a:	2300      	movhi	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80038c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80038d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038d4:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80038e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80038f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038f4:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80038f8:	4a3d      	ldr	r2, [pc, #244]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x140>)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80038fe:	4a3d      	ldr	r2, [pc, #244]	; (80039f4 <_ZN9LineTrace11isCrossLineEv+0x144>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8003904:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	f083 0301 	eor.w	r3, r3, #1
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d03e      	beq.n	8003990 <_ZN9LineTrace11isCrossLineEv+0xe0>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8003912:	edd7 7a03 	vldr	s15, [r7, #12]
 8003916:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80039fc <_ZN9LineTrace11isCrossLineEv+0x14c>
 800391a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800391e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003922:	d50f      	bpl.n	8003944 <_ZN9LineTrace11isCrossLineEv+0x94>
 8003924:	edd7 7a02 	vldr	s15, [r7, #8]
 8003928:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80039fc <_ZN9LineTrace11isCrossLineEv+0x14c>
 800392c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003934:	d506      	bpl.n	8003944 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 8003936:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	e002      	b.n	800394a <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 8003944:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003946:	2200      	movs	r2, #0
 8003948:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 800394a:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <_ZN9LineTrace11isCrossLineEv+0x150>)
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d047      	beq.n	80039e2 <_ZN9LineTrace11isCrossLineEv+0x132>
			flag = true;
 8003952:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8003958:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <_ZN9LineTrace11isCrossLineEv+0x148>)
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800395e:	4b28      	ldr	r3, [pc, #160]	; (8003a00 <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003960:	2200      	movs	r2, #0
 8003962:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800396a:	3324      	adds	r3, #36	; 0x24
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003976:	3354      	adds	r3, #84	; 0x54
 8003978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <_ZN9LineTrace11isCrossLineEv+0xd8>
				//store_check_cnt_ = 0;
				storeCrossLineDistance();
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff fb19 	bl	8002fb8 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003986:	e02c      	b.n	80039e2 <_ZN9LineTrace11isCrossLineEv+0x132>
			}
			else{
				//store_check_cnt_ = 0;
				//correctionTotalDistanceFromCrossLine();
				storeCrossLineDistance2(); //for correction check
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fb4b 	bl	8003024 <_ZN9LineTrace23storeCrossLineDistance2Ev>
 800398e:	e028      	b.n	80039e2 <_ZN9LineTrace11isCrossLineEv+0x132>
			}
			//correction_check_cnt_ = 0;
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003990:	edd7 7a03 	vldr	s15, [r7, #12]
 8003994:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003a08 <_ZN9LineTrace11isCrossLineEv+0x158>
 8003998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800399c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a0:	dd0f      	ble.n	80039c2 <_ZN9LineTrace11isCrossLineEv+0x112>
 80039a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80039a6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003a08 <_ZN9LineTrace11isCrossLineEv+0x158>
 80039aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b2:	dd06      	ble.n	80039c2 <_ZN9LineTrace11isCrossLineEv+0x112>
			cnt++;
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <_ZN9LineTrace11isCrossLineEv+0x150>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <_ZN9LineTrace11isCrossLineEv+0x150>)
 80039be:	801a      	strh	r2, [r3, #0]
 80039c0:	e002      	b.n	80039c8 <_ZN9LineTrace11isCrossLineEv+0x118>
		}
		else{
			cnt = 0;
 80039c2:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <_ZN9LineTrace11isCrossLineEv+0x150>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <_ZN9LineTrace11isCrossLineEv+0x150>)
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	d908      	bls.n	80039e2 <_ZN9LineTrace11isCrossLineEv+0x132>
			flag = false;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <_ZN9LineTrace11isCrossLineEv+0x148>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <_ZN9LineTrace11isCrossLineEv+0x150>)
 80039de:	2200      	movs	r2, #0
 80039e0:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000264 	.word	0x20000264
 80039f4:	20000268 	.word	0x20000268
 80039f8:	20000287 	.word	0x20000287
 80039fc:	44160000 	.word	0x44160000
 8003a00:	20000284 	.word	0x20000284
 8003a04:	20000286 	.word	0x20000286
 8003a08:	43fa0000 	.word	0x43fa0000

08003a0c <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003a14:	2300      	movs	r3, #0
 8003a16:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fd fe52 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003a22:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 fc3f 	bl	80052ae <_ZN8Odometry8getThetaEv>
 8003a30:	ec54 3b10 	vmov	r3, r4, d0
 8003a34:	4618      	mov	r0, r3
 8003a36:	4621      	mov	r1, r4
 8003a38:	f7fd f8ee 	bl	8000c18 <__aeabi_d2f>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003a40:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	d101      	bne.n	8003a52 <_ZN9LineTrace8isStableEv+0x46>
 8003a4e:	4b23      	ldr	r3, [pc, #140]	; (8003adc <_ZN9LineTrace8isStableEv+0xd0>)
 8003a50:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003a52:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a56:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a5e:	eeb0 0a66 	vmov.f32	s0, s13
 8003a62:	f7ff f823 	bl	8002aac <_ZSt3absf>
 8003a66:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a6e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003ae0 <_ZN9LineTrace8isStableEv+0xd4>
 8003a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7a:	db01      	blt.n	8003a80 <_ZN9LineTrace8isStableEv+0x74>
 8003a7c:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <_ZN9LineTrace8isStableEv+0xd8>)
 8003a7e:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a86:	3324      	adds	r3, #36	; 0x24
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a9a:	3324      	adds	r3, #36	; 0x24
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003aa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003aec <_ZN9LineTrace8isStableEv+0xe0>
 8003aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab0:	db06      	blt.n	8003ac0 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003abc:	801a      	strh	r2, [r3, #0]
 8003abe:	e002      	b.n	8003ac6 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d901      	bls.n	8003ad2 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd90      	pop	{r4, r7, pc}
 8003adc:	3727c5ac 	.word	0x3727c5ac
 8003ae0:	459c4000 	.word	0x459c4000
 8003ae4:	459c4000 	.word	0x459c4000
 8003ae8:	20000288 	.word	0x20000288
 8003aec:	44fa0000 	.word	0x44fa0000

08003af0 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b092      	sub	sp, #72	; 0x48
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003af8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003afc:	2201      	movs	r2, #1
 8003afe:	4963      	ldr	r1, [pc, #396]	; (8003c8c <_ZN9LineTrace4initEv+0x19c>)
 8003b00:	4863      	ldr	r0, [pc, #396]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003b02:	f7fd ff21 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003b06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4961      	ldr	r1, [pc, #388]	; (8003c94 <_ZN9LineTrace4initEv+0x1a4>)
 8003b0e:	4860      	ldr	r0, [pc, #384]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003b10:	f7fd ff1a 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003b14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b18:	2201      	movs	r2, #1
 8003b1a:	495f      	ldr	r1, [pc, #380]	; (8003c98 <_ZN9LineTrace4initEv+0x1a8>)
 8003b1c:	485c      	ldr	r0, [pc, #368]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003b1e:	f7fd ff13 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003b22:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003b26:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b2a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003b2e:	eeb0 1a66 	vmov.f32	s2, s13
 8003b32:	eef0 0a47 	vmov.f32	s1, s14
 8003b36:	eeb0 0a67 	vmov.f32	s0, s15
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8c6 	bl	8003ccc <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003b40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b44:	2201      	movs	r2, #1
 8003b46:	4955      	ldr	r1, [pc, #340]	; (8003c9c <_ZN9LineTrace4initEv+0x1ac>)
 8003b48:	4851      	ldr	r0, [pc, #324]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003b4a:	f7fd fefd 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003b4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b52:	2201      	movs	r2, #1
 8003b54:	4952      	ldr	r1, [pc, #328]	; (8003ca0 <_ZN9LineTrace4initEv+0x1b0>)
 8003b56:	484e      	ldr	r0, [pc, #312]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003b58:	f7fd fef6 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003b5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b60:	2201      	movs	r2, #1
 8003b62:	4950      	ldr	r1, [pc, #320]	; (8003ca4 <_ZN9LineTrace4initEv+0x1b4>)
 8003b64:	484a      	ldr	r0, [pc, #296]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003b66:	f7fd feef 	bl	8001948 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003b6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003b6e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b72:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003b76:	eeb0 1a66 	vmov.f32	s2, s13
 8003b7a:	eef0 0a47 	vmov.f32	s1, s14
 8003b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f8e8 	bl	8003d58 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	4946      	ldr	r1, [pc, #280]	; (8003ca8 <_ZN9LineTrace4initEv+0x1b8>)
 8003b90:	483f      	ldr	r0, [pc, #252]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003b92:	f7fd fed9 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4943      	ldr	r1, [pc, #268]	; (8003cac <_ZN9LineTrace4initEv+0x1bc>)
 8003b9e:	483c      	ldr	r0, [pc, #240]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003ba0:	f7fd fed2 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4941      	ldr	r1, [pc, #260]	; (8003cb0 <_ZN9LineTrace4initEv+0x1c0>)
 8003bac:	4838      	ldr	r0, [pc, #224]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003bae:	f7fd fecb 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003bb2:	f107 0320 	add.w	r3, r7, #32
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	493e      	ldr	r1, [pc, #248]	; (8003cb4 <_ZN9LineTrace4initEv+0x1c4>)
 8003bba:	4835      	ldr	r0, [pc, #212]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003bbc:	f7fd fec4 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003bc0:	f107 031c 	add.w	r3, r7, #28
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	493c      	ldr	r1, [pc, #240]	; (8003cb8 <_ZN9LineTrace4initEv+0x1c8>)
 8003bc8:	4831      	ldr	r0, [pc, #196]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003bca:	f7fd febd 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003bce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f913 	bl	8003e02 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003bdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003be0:	eeb0 0a67 	vmov.f32	s0, s15
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f91c 	bl	8003e22 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003bea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003bee:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f925 	bl	8003e42 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003bf8:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f92e 	bl	8003e62 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003c06:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f937 	bl	8003e82 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003c14:	f107 0318 	add.w	r3, r7, #24
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4928      	ldr	r1, [pc, #160]	; (8003cbc <_ZN9LineTrace4initEv+0x1cc>)
 8003c1c:	481c      	ldr	r0, [pc, #112]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003c1e:	f7fd fe93 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003c22:	f107 0314 	add.w	r3, r7, #20
 8003c26:	2201      	movs	r2, #1
 8003c28:	4925      	ldr	r1, [pc, #148]	; (8003cc0 <_ZN9LineTrace4initEv+0x1d0>)
 8003c2a:	4819      	ldr	r0, [pc, #100]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003c2c:	f7fd fe8c 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c34:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c38:	eef0 0a47 	vmov.f32	s1, s14
 8003c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f97e 	bl	8003f42 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003c52:	f107 0310 	add.w	r3, r7, #16
 8003c56:	2201      	movs	r2, #1
 8003c58:	491a      	ldr	r1, [pc, #104]	; (8003cc4 <_ZN9LineTrace4initEv+0x1d4>)
 8003c5a:	480d      	ldr	r0, [pc, #52]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003c5c:	f7fd fe74 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003c60:	f107 030c 	add.w	r3, r7, #12
 8003c64:	2201      	movs	r2, #1
 8003c66:	4918      	ldr	r1, [pc, #96]	; (8003cc8 <_ZN9LineTrace4initEv+0x1d8>)
 8003c68:	4809      	ldr	r0, [pc, #36]	; (8003c90 <_ZN9LineTrace4initEv+0x1a0>)
 8003c6a:	f7fd fe6d 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003c6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c72:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c76:	eef0 0a47 	vmov.f32	s1, s14
 8003c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f979 	bl	8003f76 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003c84:	bf00      	nop
 8003c86:	3748      	adds	r7, #72	; 0x48
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	08019e60 	.word	0x08019e60
 8003c90:	08019e68 	.word	0x08019e68
 8003c94:	08019e70 	.word	0x08019e70
 8003c98:	08019e78 	.word	0x08019e78
 8003c9c:	08019e80 	.word	0x08019e80
 8003ca0:	08019e8c 	.word	0x08019e8c
 8003ca4:	08019e98 	.word	0x08019e98
 8003ca8:	08019ea4 	.word	0x08019ea4
 8003cac:	08019eb0 	.word	0x08019eb0
 8003cb0:	08019ebc 	.word	0x08019ebc
 8003cb4:	08019ec8 	.word	0x08019ec8
 8003cb8:	08019ed4 	.word	0x08019ed4
 8003cbc:	08019ee0 	.word	0x08019ee0
 8003cc0:	08019ee8 	.word	0x08019ee8
 8003cc4:	08019ef0 	.word	0x08019ef0
 8003cc8:	08019efc 	.word	0x08019efc

08003ccc <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cd8:	edc7 0a01 	vstr	s1, [r7, #4]
 8003cdc:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
	return kp_;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	ee07 3a90 	vmov	s15, r3
}
 8003d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	return ki_;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	ee07 3a90 	vmov	s15, r3
}
 8003d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	return kd_;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	ee07 3a90 	vmov	s15, r3
}
 8003d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d64:	edc7 0a01 	vstr	s1, [r7, #4]
 8003d68:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	ee07 3a90 	vmov	s15, r3
}
 8003d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db4:	ee07 3a90 	vmov	s15, r3
}
 8003db8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	ee07 3a90 	vmov	s15, r3
}
 8003dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb0:	ee07 3a90 	vmov	s15, r3
}
 8003eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ed0:	ee07 3a90 	vmov	s15, r3
}
 8003ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ef0:	ee07 3a90 	vmov	s15, r3
}
 8003ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f10:	ee07 3a90 	vmov	s15, r3
}
 8003f14:	eeb0 0a67 	vmov.f32	s0, s15
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f30:	ee07 3a90 	vmov	s15, r3
}
 8003f34:	eeb0 0a67 	vmov.f32	s0, s15
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f4e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f58:	3328      	adds	r3, #40	; 0x28
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f64:	332c      	adds	r3, #44	; 0x2c
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	601a      	str	r2, [r3, #0]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b085      	sub	sp, #20
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f82:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f8c:	3330      	adds	r3, #48	; 0x30
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f98:	3334      	adds	r3, #52	; 0x34
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fb8:	3328      	adds	r3, #40	; 0x28
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	ee07 3a90 	vmov	s15, r3
}
 8003fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fdc:	3334      	adds	r3, #52	; 0x34
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	ee07 3a90 	vmov	s15, r3
}
 8003fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004000:	3330      	adds	r3, #48	; 0x30
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	ee07 3a90 	vmov	s15, r3
}
 8004008:	eeb0 0a67 	vmov.f32	s0, s15
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
	return max_dec_;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004024:	332c      	adds	r3, #44	; 0x2c
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	ee07 3a90 	vmov	s15, r3
}
 800402c:	eeb0 0a67 	vmov.f32	s0, s15
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8120 	beq.w	8004290 <_ZN9LineTrace4flipEv+0x254>
		// ---- line following processing -----//
		pidTrace();
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fe fea5 	bl	8002da0 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fb6a 	bl	8003730 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(50) == true){
 800405c:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8004298 <_ZN9LineTrace4flipEv+0x25c>
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff fc03 	bl	800386c <_ZN9LineTrace16isTargetDistanceEf>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d028      	beq.n	80040be <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff f87f 	bl	8003170 <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fcca 	bl	8003a0c <_ZN9LineTrace8isStableEv>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00c      	beq.n	8004098 <_ZN9LineTrace4flipEv+0x5c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	4618      	mov	r0, r3
 8004084:	f001 fbde 	bl	8005844 <_ZN10SideSensor10getStatusLEv>
 8004088:	4603      	mov	r3, r0
 800408a:	f083 0301 	eor.w	r3, r3, #1
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <_ZN9LineTrace4flipEv+0x5c>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <_ZN9LineTrace4flipEv+0x5e>
 8004098:	2300      	movs	r3, #0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040a4:	3323      	adds	r3, #35	; 0x23
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fd fb36 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 f909 	bl	80052d0 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040c4:	3323      	adds	r3, #35	; 0x23
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <_ZN9LineTrace4flipEv+0xa4>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 fbb7 	bl	8005844 <_ZN10SideSensor10getStatusLEv>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <_ZN9LineTrace4flipEv+0xa4>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <_ZN9LineTrace4flipEv+0xa6>
 80040e0:	2300      	movs	r3, #0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d029      	beq.n	800413a <_ZN9LineTrace4flipEv+0xfe>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040ec:	3354      	adds	r3, #84	; 0x54
 80040ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <_ZN9LineTrace4flipEv+0xce>
				store_check_cnt_ = 0;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040fc:	333a      	adds	r3, #58	; 0x3a
 80040fe:	2200      	movs	r2, #0
 8004100:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe ffc4 	bl	8003090 <_ZN9LineTrace21storeSideLineDistanceEv>
 8004108:	e00b      	b.n	8004122 <_ZN9LineTrace4flipEv+0xe6>
			}
			else{
				store_check_cnt_ = 0;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004110:	333a      	adds	r3, #58	; 0x3a
 8004112:	2200      	movs	r2, #0
 8004114:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff f884 	bl	8003224 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fe ffef 	bl	8003100 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004128:	3323      	adds	r3, #35	; 0x23
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004134:	3324      	adds	r3, #36	; 0x24
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fbb8 	bl	80038b0 <_ZN9LineTrace11isCrossLineEv>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <_ZN9LineTrace4flipEv+0x11e>
			side_sensor_->enableIgnore();
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	4618      	mov	r0, r3
 800414c:	f001 fba2 	bl	8005894 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd fb0e 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	4618      	mov	r0, r3
 8004160:	f001 fbb2 	bl	80058c8 <_ZN10SideSensor13getIgnoreFlagEv>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00f      	beq.n	800418a <_ZN9LineTrace4flipEv+0x14e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd faf2 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8004174:	eeb0 7a40 	vmov.f32	s14, s0
 8004178:	eddf 7a48 	vldr	s15, [pc, #288]	; 800429c <_ZN9LineTrace4flipEv+0x260>
 800417c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	db01      	blt.n	800418a <_ZN9LineTrace4flipEv+0x14e>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <_ZN9LineTrace4flipEv+0x150>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <_ZN9LineTrace4flipEv+0x15e>
			side_sensor_->disableIgnore();
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	4618      	mov	r0, r3
 8004196:	f001 fb8a 	bl	80058ae <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fc34 	bl	8002a0c <_ZN10LineSensor13emergencyStopEv>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <_ZN9LineTrace4flipEv+0x18a>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80042a0 <_ZN9LineTrace4flipEv+0x264>
 80041b2:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80042a0 <_ZN9LineTrace4flipEv+0x264>
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 fef6 	bl	8005fa8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fd f8df 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041cc:	3338      	adds	r3, #56	; 0x38
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	3301      	adds	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041da:	3338      	adds	r3, #56	; 0x38
 80041dc:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041e4:	3338      	adds	r3, #56	; 0x38
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d906      	bls.n	80041fe <_ZN9LineTrace4flipEv+0x1c2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041f6:	3338      	adds	r3, #56	; 0x38
 80041f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80041fc:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004204:	3338      	adds	r3, #56	; 0x38
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800420c:	d806      	bhi.n	800421c <_ZN9LineTrace4flipEv+0x1e0>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	330c      	adds	r3, #12
 8004212:	2152      	movs	r1, #82	; 0x52
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe f81d 	bl	8002254 <_ZN3LED9fullColorEc>
 800421a:	e005      	b.n	8004228 <_ZN9LineTrace4flipEv+0x1ec>
		else led_.fullColor('B');
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	330c      	adds	r3, #12
 8004220:	2142      	movs	r1, #66	; 0x42
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe f816 	bl	8002254 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800422e:	333a      	adds	r3, #58	; 0x3a
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800423c:	333a      	adds	r3, #58	; 0x3a
 800423e:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004246:	333a      	adds	r3, #58	; 0x3a
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	f242 720f 	movw	r2, #9999	; 0x270f
 800424e:	4293      	cmp	r3, r2
 8004250:	d906      	bls.n	8004260 <_ZN9LineTrace4flipEv+0x224>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004258:	333a      	adds	r3, #58	; 0x3a
 800425a:	f242 7210 	movw	r2, #10000	; 0x2710
 800425e:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004266:	333a      	adds	r3, #58	; 0x3a
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	2bc8      	cmp	r3, #200	; 0xc8
 800426c:	d808      	bhi.n	8004280 <_ZN9LineTrace4flipEv+0x244>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	330c      	adds	r3, #12
 8004272:	f04f 32ff 	mov.w	r2, #4294967295
 8004276:	2101      	movs	r1, #1
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe f8a7 	bl	80023cc <_ZN3LED2LREaa>
		else led_.LR(0, -1);
	}
}
 800427e:	e007      	b.n	8004290 <_ZN9LineTrace4flipEv+0x254>
		else led_.LR(0, -1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	330c      	adds	r3, #12
 8004284:	f04f 32ff 	mov.w	r2, #4294967295
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe f89e 	bl	80023cc <_ZN3LED2LREaa>
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	42480000 	.word	0x42480000
 800429c:	428c0000 	.word	0x428c0000
 80042a0:	00000000 	.word	0x00000000

080042a4 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042b6:	3354      	adds	r3, #84	; 0x54
 80042b8:	887a      	ldrh	r2, [r7, #2]
 80042ba:	801a      	strh	r2, [r3, #0]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f001 feb8 	bl	800605a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 fac0 	bl	8005874 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042fa:	3318      	adds	r3, #24
 80042fc:	2200      	movs	r2, #0
 80042fe:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004306:	331c      	adds	r3, #28
 8004308:	2200      	movs	r2, #0
 800430a:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004312:	331e      	adds	r3, #30
 8004314:	2200      	movs	r2, #0
 8004316:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800431e:	3320      	adds	r3, #32
 8004320:	2200      	movs	r2, #0
 8004322:	801a      	strh	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004338:	2300      	movs	r3, #0
 800433a:	737b      	strb	r3, [r7, #13]
	start();
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ffc3 	bl	80042c8 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8004342:	7b7b      	ldrb	r3, [r7, #13]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d161      	bne.n	800440c <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 8004348:	89fb      	ldrh	r3, [r7, #14]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <_ZN9LineTrace7runningEv+0x28>
 800434e:	2b0a      	cmp	r3, #10
 8004350:	d030      	beq.n	80043b4 <_ZN9LineTrace7runningEv+0x88>
 8004352:	e05a      	b.n	800440a <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	4618      	mov	r0, r3
 800435a:	f001 fa7f 	bl	800585c <_ZN10SideSensor16getWhiteLineCntREv>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d04a      	beq.n	8004404 <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fe fdf6 	bl	8002f60 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800437a:	3354      	adds	r3, #84	; 0x54
 800437c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff f9a3 	bl	80036d0 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd f9f1 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd f9cf 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	330c      	adds	r3, #12
 80043a2:	f04f 32ff 	mov.w	r2, #4294967295
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe f80f 	bl	80023cc <_ZN3LED2LREaa>
				stage = 10;
 80043ae:	230a      	movs	r3, #10
 80043b0:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80043b2:	e027      	b.n	8004404 <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f001 fa4f 	bl	800585c <_ZN10SideSensor16getWhiteLineCntREv>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01c      	beq.n	8004408 <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	330c      	adds	r3, #12
 80043d2:	214d      	movs	r1, #77	; 0x4d
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd ff3d 	bl	8002254 <_ZN3LED9fullColorEc>
				loggerStop();
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe fddb 	bl	8002f96 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff f988 	bl	80036f6 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80043e6:	2064      	movs	r0, #100	; 0x64
 80043e8:	f005 fd9a 	bl	8009f20 <HAL_Delay>

				setTargetVelocity(0);
 80043ec:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800441c <_ZN9LineTrace7runningEv+0xf0>
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fd06 	bl	8003e02 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80043f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043fa:	f005 fd91 	bl	8009f20 <HAL_Delay>

				goal_flag = true;
 80043fe:	2301      	movs	r3, #1
 8004400:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004402:	e001      	b.n	8004408 <_ZN9LineTrace7runningEv+0xdc>
			break;
 8004404:	bf00      	nop
 8004406:	e79c      	b.n	8004342 <_ZN9LineTrace7runningEv+0x16>
			break;
 8004408:	bf00      	nop
	while(goal_flag == false){
 800440a:	e79a      	b.n	8004342 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f807 	bl	8004420 <_ZN9LineTrace4stopEv>
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	00000000 	.word	0x00000000

08004420 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4618      	mov	r0, r3
 8004436:	f001 fe23 	bl	8006080 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	330c      	adds	r3, #12
 800443e:	2201      	movs	r2, #1
 8004440:	f04f 31ff 	mov.w	r1, #4294967295
 8004444:	4618      	mov	r0, r3
 8004446:	f7fd ffc1 	bl	80023cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004450:	3354      	adds	r3, #84	; 0x54
 8004452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d11e      	bne.n	8004498 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69d8      	ldr	r0, [r3, #28]
 800445e:	4b28      	ldr	r3, [pc, #160]	; (8004500 <_ZN9LineTrace4stopEv+0xe0>)
 8004460:	4a28      	ldr	r2, [pc, #160]	; (8004504 <_ZN9LineTrace4stopEv+0xe4>)
 8004462:	4929      	ldr	r1, [pc, #164]	; (8004508 <_ZN9LineTrace4stopEv+0xe8>)
 8004464:	f000 fbe8 	bl	8004c38 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800446e:	3358      	adds	r3, #88	; 0x58
 8004470:	2200      	movs	r2, #0
 8004472:	9200      	str	r2, [sp, #0]
 8004474:	2264      	movs	r2, #100	; 0x64
 8004476:	4925      	ldr	r1, [pc, #148]	; (800450c <_ZN9LineTrace4stopEv+0xec>)
 8004478:	4823      	ldr	r0, [pc, #140]	; (8004508 <_ZN9LineTrace4stopEv+0xe8>)
 800447a:	f7fd f9ff 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004484:	3378      	adds	r3, #120	; 0x78
 8004486:	2200      	movs	r2, #0
 8004488:	9200      	str	r2, [sp, #0]
 800448a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800448e:	4920      	ldr	r1, [pc, #128]	; (8004510 <_ZN9LineTrace4stopEv+0xf0>)
 8004490:	481d      	ldr	r0, [pc, #116]	; (8004508 <_ZN9LineTrace4stopEv+0xe8>)
 8004492:	f7fd f9f3 	bl	800187c <sd_write_array_float>
 8004496:	e01d      	b.n	80044d4 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69d8      	ldr	r0, [r3, #28]
 800449c:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <_ZN9LineTrace4stopEv+0xf4>)
 800449e:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <_ZN9LineTrace4stopEv+0xf8>)
 80044a0:	4919      	ldr	r1, [pc, #100]	; (8004508 <_ZN9LineTrace4stopEv+0xe8>)
 80044a2:	f000 fbec 	bl	8004c7e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80044ac:	33e8      	adds	r3, #232	; 0xe8
 80044ae:	2200      	movs	r2, #0
 80044b0:	9200      	str	r2, [sp, #0]
 80044b2:	2264      	movs	r2, #100	; 0x64
 80044b4:	4919      	ldr	r1, [pc, #100]	; (800451c <_ZN9LineTrace4stopEv+0xfc>)
 80044b6:	4814      	ldr	r0, [pc, #80]	; (8004508 <_ZN9LineTrace4stopEv+0xe8>)
 80044b8:	f7fd f9e0 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 80044c2:	3348      	adds	r3, #72	; 0x48
 80044c4:	2200      	movs	r2, #0
 80044c6:	9200      	str	r2, [sp, #0]
 80044c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044cc:	4914      	ldr	r1, [pc, #80]	; (8004520 <_ZN9LineTrace4stopEv+0x100>)
 80044ce:	480e      	ldr	r0, [pc, #56]	; (8004508 <_ZN9LineTrace4stopEv+0xe8>)
 80044d0:	f7fd f9d4 	bl	800187c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	330c      	adds	r3, #12
 80044d8:	2200      	movs	r2, #0
 80044da:	f04f 31ff 	mov.w	r1, #4294967295
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd ff74 	bl	80023cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fc58 	bl	8004d9e <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fc07 	bl	8004d06 <_ZN6Logger10resetLogs2Ev>
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	08019f08 	.word	0x08019f08
 8004504:	08019f14 	.word	0x08019f14
 8004508:	08019f24 	.word	0x08019f24
 800450c:	08019f30 	.word	0x08019f30
 8004510:	08019f40 	.word	0x08019f40
 8004514:	08019f4c 	.word	0x08019f4c
 8004518:	08019f58 	.word	0x08019f58
 800451c:	08019f68 	.word	0x08019f68
 8004520:	08019f78 	.word	0x08019f78

08004524 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b08b      	sub	sp, #44	; 0x2c
 8004528:	af02      	add	r7, sp, #8
 800452a:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fb25 	bl	8004b80 <_ZN6Logger23getDistanceArrayPointerEv>
 8004536:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fb2d 	bl	8004b9c <_ZN6Logger20getThetaArrayPointerEv>
 8004542:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004544:	2300      	movs	r3, #0
 8004546:	837b      	strh	r3, [r7, #26]
 8004548:	8b7b      	ldrh	r3, [r7, #26]
 800454a:	f241 726f 	movw	r2, #5999	; 0x176f
 800454e:	4293      	cmp	r3, r2
 8004550:	d84b      	bhi.n	80045ea <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8004552:	8b7b      	ldrh	r3, [r7, #26]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4413      	add	r3, r2
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800455e:	8b7b      	ldrh	r3, [r7, #26]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800456a:	edd7 7a07 	vldr	s15, [r7, #28]
 800456e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004576:	d101      	bne.n	800457c <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004578:	4b4c      	ldr	r3, [pc, #304]	; (80046ac <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 800457a:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 800457c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004580:	edd7 7a07 	vldr	s15, [r7, #28]
 8004584:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004588:	eeb0 0a66 	vmov.f32	s0, s13
 800458c:	f7fe fa8e 	bl	8002aac <_ZSt3absf>
 8004590:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004594:	edd7 7a05 	vldr	s15, [r7, #20]
 8004598:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80046b0 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 800459c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a4:	db01      	blt.n	80045aa <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 80045a6:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 80045a8:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80045aa:	8b7c      	ldrh	r4, [r7, #26]
 80045ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fe fea7 	bl	8003304 <_ZN9LineTrace15radius2VelocityEf>
 80045b6:	eef0 7a40 	vmov.f32	s15, s0
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045c0:	3304      	adds	r3, #4
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80045ca:	8b7b      	ldrh	r3, [r7, #26]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	441a      	add	r2, r3
 80045d2:	8b7b      	ldrh	r3, [r7, #26]
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	3332      	adds	r3, #50	; 0x32
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	3304      	adds	r3, #4
 80045e0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045e2:	8b7b      	ldrh	r3, [r7, #26]
 80045e4:	3301      	adds	r3, #1
 80045e6:	837b      	strh	r3, [r7, #26]
 80045e8:	e7ae      	b.n	8004548 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045f0:	3354      	adds	r3, #84	; 0x54
 80045f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d120      	bne.n	800463c <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004606:	3310      	adds	r3, #16
 8004608:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004610:	332c      	adds	r3, #44	; 0x2c
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	6939      	ldr	r1, [r7, #16]
 8004618:	eeb0 0a67 	vmov.f32	s0, s15
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fe ff0f 	bl	8003440 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004628:	3328      	adds	r3, #40	; 0x28
 800462a:	edd3 7a00 	vldr	s15, [r3]
 800462e:	6939      	ldr	r1, [r7, #16]
 8004630:	eeb0 0a67 	vmov.f32	s0, s15
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fe ffa7 	bl	8003588 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800463a:	e027      	b.n	800468c <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004642:	3354      	adds	r3, #84	; 0x54
 8004644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d11f      	bne.n	800468c <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004658:	3310      	adds	r3, #16
 800465a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004662:	3334      	adds	r3, #52	; 0x34
 8004664:	edd3 7a00 	vldr	s15, [r3]
 8004668:	6939      	ldr	r1, [r7, #16]
 800466a:	eeb0 0a67 	vmov.f32	s0, s15
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fe fee6 	bl	8003440 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800467a:	3330      	adds	r3, #48	; 0x30
 800467c:	edd3 7a00 	vldr	s15, [r3]
 8004680:	6939      	ldr	r1, [r7, #16]
 8004682:	eeb0 0a67 	vmov.f32	s0, s15
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fe ff7e 	bl	8003588 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004692:	3310      	adds	r3, #16
 8004694:	2200      	movs	r2, #0
 8004696:	9200      	str	r2, [sp, #0]
 8004698:	f241 7270 	movw	r2, #6000	; 0x1770
 800469c:	4906      	ldr	r1, [pc, #24]	; (80046b8 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 800469e:	4807      	ldr	r0, [pc, #28]	; (80046bc <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 80046a0:	f7fd f8ec 	bl	800187c <sd_write_array_float>

}
 80046a4:	bf00      	nop
 80046a6:	3724      	adds	r7, #36	; 0x24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd90      	pop	{r4, r7, pc}
 80046ac:	3727c5ac 	.word	0x3727c5ac
 80046b0:	459c4000 	.word	0x459c4000
 80046b4:	459c4000 	.word	0x459c4000
 80046b8:	08019f88 	.word	0x08019f88
 80046bc:	08019f24 	.word	0x08019f24

080046c0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 80046c0:	b590      	push	{r4, r7, lr}
 80046c2:	b08b      	sub	sp, #44	; 0x2c
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69d8      	ldr	r0, [r3, #28]
 80046cc:	4b6b      	ldr	r3, [pc, #428]	; (800487c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80046ce:	4a6c      	ldr	r2, [pc, #432]	; (8004880 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80046d0:	496c      	ldr	r1, [pc, #432]	; (8004884 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046d2:	f000 faf9 	bl	8004cc8 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046dc:	3358      	adds	r3, #88	; 0x58
 80046de:	2264      	movs	r2, #100	; 0x64
 80046e0:	4969      	ldr	r1, [pc, #420]	; (8004888 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80046e2:	4868      	ldr	r0, [pc, #416]	; (8004884 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046e4:	f7fd f930 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80046ee:	3378      	adds	r3, #120	; 0x78
 80046f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046f4:	4965      	ldr	r1, [pc, #404]	; (800488c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80046f6:	4863      	ldr	r0, [pc, #396]	; (8004884 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046f8:	f7fd f926 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fa3d 	bl	8004b80 <_ZN6Logger23getDistanceArrayPointerEv>
 8004706:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fa45 	bl	8004b9c <_ZN6Logger20getThetaArrayPointerEv>
 8004712:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004714:	2300      	movs	r3, #0
 8004716:	837b      	strh	r3, [r7, #26]
 8004718:	8b7b      	ldrh	r3, [r7, #26]
 800471a:	f241 726f 	movw	r2, #5999	; 0x176f
 800471e:	4293      	cmp	r3, r2
 8004720:	d84b      	bhi.n	80047ba <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 8004722:	8b7b      	ldrh	r3, [r7, #26]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4413      	add	r3, r2
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800472e:	8b7b      	ldrh	r3, [r7, #26]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800473a:	edd7 7a07 	vldr	s15, [r7, #28]
 800473e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	d101      	bne.n	800474c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004748:	4b51      	ldr	r3, [pc, #324]	; (8004890 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 800474a:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 800474c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004750:	edd7 7a07 	vldr	s15, [r7, #28]
 8004754:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004758:	eeb0 0a66 	vmov.f32	s0, s13
 800475c:	f7fe f9a6 	bl	8002aac <_ZSt3absf>
 8004760:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004764:	edd7 7a05 	vldr	s15, [r7, #20]
 8004768:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004894 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 800476c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004774:	db01      	blt.n	800477a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004776:	4b48      	ldr	r3, [pc, #288]	; (8004898 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004778:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 800477a:	8b7c      	ldrh	r4, [r7, #26]
 800477c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fe fdbf 	bl	8003304 <_ZN9LineTrace15radius2VelocityEf>
 8004786:	eef0 7a40 	vmov.f32	s15, s0
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004790:	3304      	adds	r3, #4
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 800479a:	8b7b      	ldrh	r3, [r7, #26]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	441a      	add	r2, r3
 80047a2:	8b7b      	ldrh	r3, [r7, #26]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	3332      	adds	r3, #50	; 0x32
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	3304      	adds	r3, #4
 80047b0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80047b2:	8b7b      	ldrh	r3, [r7, #26]
 80047b4:	3301      	adds	r3, #1
 80047b6:	837b      	strh	r3, [r7, #26]
 80047b8:	e7ae      	b.n	8004718 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047c0:	3354      	adds	r3, #84	; 0x54
 80047c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d120      	bne.n	800480c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047d6:	3310      	adds	r3, #16
 80047d8:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047e0:	332c      	adds	r3, #44	; 0x2c
 80047e2:	edd3 7a00 	vldr	s15, [r3]
 80047e6:	6939      	ldr	r1, [r7, #16]
 80047e8:	eeb0 0a67 	vmov.f32	s0, s15
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7fe fe27 	bl	8003440 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047f8:	3328      	adds	r3, #40	; 0x28
 80047fa:	edd3 7a00 	vldr	s15, [r3]
 80047fe:	6939      	ldr	r1, [r7, #16]
 8004800:	eeb0 0a67 	vmov.f32	s0, s15
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fe febf 	bl	8003588 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800480a:	e027      	b.n	800485c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004812:	3354      	adds	r3, #84	; 0x54
 8004814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d11f      	bne.n	800485c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004828:	3310      	adds	r3, #16
 800482a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004832:	3334      	adds	r3, #52	; 0x34
 8004834:	edd3 7a00 	vldr	s15, [r3]
 8004838:	6939      	ldr	r1, [r7, #16]
 800483a:	eeb0 0a67 	vmov.f32	s0, s15
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fe fdfe 	bl	8003440 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800484a:	3330      	adds	r3, #48	; 0x30
 800484c:	edd3 7a00 	vldr	s15, [r3]
 8004850:	6939      	ldr	r1, [r7, #16]
 8004852:	eeb0 0a67 	vmov.f32	s0, s15
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fe fe96 	bl	8003588 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004862:	3310      	adds	r3, #16
 8004864:	2200      	movs	r2, #0
 8004866:	9200      	str	r2, [sp, #0]
 8004868:	f241 7270 	movw	r2, #6000	; 0x1770
 800486c:	490b      	ldr	r1, [pc, #44]	; (800489c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800486e:	4805      	ldr	r0, [pc, #20]	; (8004884 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004870:	f7fd f804 	bl	800187c <sd_write_array_float>

}
 8004874:	bf00      	nop
 8004876:	3724      	adds	r7, #36	; 0x24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	08019f08 	.word	0x08019f08
 8004880:	08019f14 	.word	0x08019f14
 8004884:	08019f24 	.word	0x08019f24
 8004888:	08019f30 	.word	0x08019f30
 800488c:	08019f40 	.word	0x08019f40
 8004890:	3727c5ac 	.word	0x3727c5ac
 8004894:	459c4000 	.word	0x459c4000
 8004898:	459c4000 	.word	0x459c4000
 800489c:	08019f88 	.word	0x08019f88

080048a0 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048ae:	33c0      	adds	r3, #192	; 0xc0
 80048b0:	2200      	movs	r2, #0
 80048b2:	701a      	strb	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048ba:	33c2      	adds	r3, #194	; 0xc2
 80048bc:	2200      	movs	r2, #0
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048c6:	33c4      	adds	r3, #196	; 0xc4
 80048c8:	2200      	movs	r2, #0
 80048ca:	801a      	strh	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048d2:	33c6      	adds	r3, #198	; 0xc6
 80048d4:	2200      	movs	r2, #0
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048de:	33c8      	adds	r3, #200	; 0xc8
 80048e0:	2200      	movs	r2, #0
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048ea:	33ca      	adds	r3, #202	; 0xca
 80048ec:	2200      	movs	r2, #0
 80048ee:	801a      	strh	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 800490c:	f7fd f908 	bl	8001b20 <sd_mount>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d016      	beq.n	800494e <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004920:	f7fc fbbe 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004924:	2100      	movs	r1, #0
 8004926:	2000      	movs	r0, #0
 8004928:	f7fc fbca 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800492c:	4815      	ldr	r0, [pc, #84]	; (8004984 <_ZN6Logger10sdCardInitEv+0x84>)
 800492e:	f7fc fbf1 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004932:	2101      	movs	r1, #1
 8004934:	2000      	movs	r0, #0
 8004936:	f7fc fbc3 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800493a:	4813      	ldr	r0, [pc, #76]	; (8004988 <_ZN6Logger10sdCardInitEv+0x88>)
 800493c:	f7fc fbea 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004940:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004944:	f005 faec 	bl	8009f20 <HAL_Delay>

	  ret = true;
 8004948:	2301      	movs	r3, #1
 800494a:	73fb      	strb	r3, [r7, #15]
 800494c:	e015      	b.n	800497a <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800494e:	f7fc fba7 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004952:	2100      	movs	r1, #0
 8004954:	2000      	movs	r0, #0
 8004956:	f7fc fbb3 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800495a:	480a      	ldr	r0, [pc, #40]	; (8004984 <_ZN6Logger10sdCardInitEv+0x84>)
 800495c:	f7fc fbda 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004960:	2101      	movs	r1, #1
 8004962:	2000      	movs	r0, #0
 8004964:	f7fc fbac 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004968:	4808      	ldr	r0, [pc, #32]	; (800498c <_ZN6Logger10sdCardInitEv+0x8c>)
 800496a:	f7fc fbd3 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800496e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004972:	f005 fad5 	bl	8009f20 <HAL_Delay>

	  ret = false;
 8004976:	2300      	movs	r3, #0
 8004978:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	08019f98 	.word	0x08019f98
 8004988:	08019fa4 	.word	0x08019fa4
 800498c:	08019fac 	.word	0x08019fac

08004990 <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049a2:	33c0      	adds	r3, #192	; 0xc0
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d025      	beq.n	80049f6 <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049b0:	33c6      	adds	r3, #198	; 0xc6
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 80049bc:	8879      	ldrh	r1, [r7, #2]
 80049be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049c8:	33c6      	adds	r3, #198	; 0xc6
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	3301      	adds	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049d6:	33c6      	adds	r3, #198	; 0xc6
 80049d8:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049e0:	33c6      	adds	r3, #198	; 0xc6
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80049e8:	d305      	bcc.n	80049f6 <_ZN6Logger11storeLogIntEs+0x66>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049f0:	33c6      	adds	r3, #198	; 0xc6
 80049f2:	2200      	movs	r2, #0
 80049f4:	801a      	strh	r2, [r3, #0]
	}

}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a14:	33c0      	adds	r3, #192	; 0xc0
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d025      	beq.n	8004a68 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a22:	33c8      	adds	r3, #200	; 0xc8
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004a2c:	3310      	adds	r3, #16
 8004a2e:	8879      	ldrh	r1, [r7, #2]
 8004a30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a3a:	33c8      	adds	r3, #200	; 0xc8
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a48:	33c8      	adds	r3, #200	; 0xc8
 8004a4a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a52:	33c8      	adds	r3, #200	; 0xc8
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004a5a:	d305      	bcc.n	8004a68 <_ZN6Logger12storeLog2IntEs+0x66>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a62:	33c8      	adds	r3, #200	; 0xc8
 8004a64:	2200      	movs	r2, #0
 8004a66:	801a      	strh	r2, [r3, #0]
	}

}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a80:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a8a:	33ca      	adds	r3, #202	; 0xca
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004a94:	3310      	adds	r3, #16
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004aa4:	33ca      	adds	r3, #202	; 0xca
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004aae:	3320      	adds	r3, #32
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004abe:	33ca      	adds	r3, #202	; 0xca
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004acc:	33ca      	adds	r3, #202	; 0xca
 8004ace:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ad6:	33ca      	adds	r3, #202	; 0xca
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	f241 726f 	movw	r2, #5999	; 0x176f
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d905      	bls.n	8004aee <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ae8:	33ca      	adds	r3, #202	; 0xca
 8004aea:	2200      	movs	r2, #0
 8004aec:	801a      	strh	r2, [r3, #0]
	//}
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b06:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b10:	33ca      	adds	r3, #202	; 0xca
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004b1a:	3350      	adds	r3, #80	; 0x50
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b2a:	33ca      	adds	r3, #202	; 0xca
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b34:	3340      	adds	r3, #64	; 0x40
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b44:	33ca      	adds	r3, #202	; 0xca
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b52:	33ca      	adds	r3, #202	; 0xca
 8004b54:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b5c:	33ca      	adds	r3, #202	; 0xca
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d905      	bls.n	8004b74 <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b6e:	33ca      	adds	r3, #202	; 0xca
 8004b70:	2200      	movs	r2, #0
 8004b72:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b8e:	3340      	adds	r3, #64	; 0x40
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004baa:	3380      	adds	r3, #128	; 0x80
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	68b8      	ldr	r0, [r7, #8]
 8004bd4:	f7fc fe52 	bl	800187c <sd_write_array_float>
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	68b8      	ldr	r0, [r7, #8]
 8004c00:	f7fc ff2e 	bl	8001a60 <sd_write_array_int>
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004c1e:	3320      	adds	r3, #32
 8004c20:	2200      	movs	r2, #0
 8004c22:	9200      	str	r2, [sp, #0]
 8004c24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	68b8      	ldr	r0, [r7, #8]
 8004c2c:	f7fc ff18 	bl	8001a60 <sd_write_array_int>
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c4c:	3340      	adds	r3, #64	; 0x40
 8004c4e:	2200      	movs	r2, #0
 8004c50:	9200      	str	r2, [sp, #0]
 8004c52:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	68b8      	ldr	r0, [r7, #8]
 8004c5a:	f7fc fe0f 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004c64:	3380      	adds	r3, #128	; 0x80
 8004c66:	2200      	movs	r2, #0
 8004c68:	9200      	str	r2, [sp, #0]
 8004c6a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	68b8      	ldr	r0, [r7, #8]
 8004c72:	f7fc fe03 	bl	800187c <sd_write_array_float>
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af02      	add	r7, sp, #8
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c92:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c96:	2200      	movs	r2, #0
 8004c98:	9200      	str	r2, [sp, #0]
 8004c9a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	68b8      	ldr	r0, [r7, #8]
 8004ca2:	f7fc fdeb 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004cac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	9200      	str	r2, [sp, #0]
 8004cb4:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cb8:	6839      	ldr	r1, [r7, #0]
 8004cba:	68b8      	ldr	r0, [r7, #8]
 8004cbc:	f7fc fdde 	bl	800187c <sd_write_array_float>
}
 8004cc0:	bf00      	nop
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004cdc:	3340      	adds	r3, #64	; 0x40
 8004cde:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	68b8      	ldr	r0, [r7, #8]
 8004ce6:	f7fc fe2f 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004cf0:	3380      	adds	r3, #128	; 0x80
 8004cf2:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	68b8      	ldr	r0, [r7, #8]
 8004cfa:	f7fc fe25 	bl	8001948 <sd_read_array_float>
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004d06:	b480      	push	{r7}
 8004d08:	b08b      	sub	sp, #44	; 0x2c
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004d14:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d24:	3340      	adds	r3, #64	; 0x40
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d009      	beq.n	8004d44 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	617b      	str	r3, [r7, #20]
		log = 0;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	3304      	adds	r3, #4
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	e7f1      	b.n	8004d28 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004d4a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	623b      	str	r3, [r7, #32]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d5a:	3340      	adds	r3, #64	; 0x40
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d009      	beq.n	8004d7a <_ZN6Logger10resetLogs2Ev+0x74>
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	3304      	adds	r3, #4
 8004d76:	623b      	str	r3, [r7, #32]
 8004d78:	e7f1      	b.n	8004d5e <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d80:	33c2      	adds	r3, #194	; 0xc2
 8004d82:	2200      	movs	r2, #0
 8004d84:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d8c:	33ca      	adds	r3, #202	; 0xca
 8004d8e:	2200      	movs	r2, #0
 8004d90:	801a      	strh	r2, [r3, #0]
}
 8004d92:	bf00      	nop
 8004d94:	372c      	adds	r7, #44	; 0x2c
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004dac:	33c2      	adds	r3, #194	; 0xc2
 8004dae:	2200      	movs	r2, #0
 8004db0:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004db8:	33ca      	adds	r3, #202	; 0xca
 8004dba:	2200      	movs	r2, #0
 8004dbc:	801a      	strh	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <_ZN6Logger5startEv>:

void Logger::start()
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004dd8:	33c0      	adds	r3, #192	; 0xc0
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004df8:	33c0      	adds	r3, #192	; 0xc0
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	801a      	strh	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	805a      	strh	r2, [r3, #2]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <_ZN5Motor4initEv>:

void Motor::init()
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004e34:	2108      	movs	r1, #8
 8004e36:	4805      	ldr	r0, [pc, #20]	; (8004e4c <_ZN5Motor4initEv+0x20>)
 8004e38:	f00a fa22 	bl	800f280 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004e3c:	210c      	movs	r1, #12
 8004e3e:	4803      	ldr	r0, [pc, #12]	; (8004e4c <_ZN5Motor4initEv+0x20>)
 8004e40:	f00a fa1e 	bl	800f280 <HAL_TIM_PWM_Start>

}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	200448a8 	.word	0x200448a8

08004e50 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	da0d      	bge.n	8004e7e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004e62:	2200      	movs	r2, #0
 8004e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e68:	481f      	ldr	r0, [pc, #124]	; (8004ee8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e6a:	f006 faef 	bl	800b44c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	425b      	negs	r3, r3
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	81fb      	strh	r3, [r7, #14]
 8004e7c:	e00a      	b.n	8004e94 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e84:	4818      	ldr	r0, [pc, #96]	; (8004ee8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e86:	f006 fae1 	bl	800b44c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	da0d      	bge.n	8004eba <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea4:	4810      	ldr	r0, [pc, #64]	; (8004ee8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ea6:	f006 fad1 	bl	800b44c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	425b      	negs	r3, r3
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	81bb      	strh	r3, [r7, #12]
 8004eb8:	e00a      	b.n	8004ed0 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ec0:	4809      	ldr	r0, [pc, #36]	; (8004ee8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ec2:	f006 fac3 	bl	800b44c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004ed0:	89fa      	ldrh	r2, [r7, #14]
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <_ZN5Motor9motorCtrlEv+0x9c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004ed8:	89ba      	ldrh	r2, [r7, #12]
 8004eda:	4b04      	ldr	r3, [pc, #16]	; (8004eec <_ZN5Motor9motorCtrlEv+0x9c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40020c00 	.word	0x40020c00
 8004eec:	200448a8 	.word	0x200448a8

08004ef0 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6178      	str	r0, [r7, #20]
 8004ef8:	ed87 0b02 	vstr	d0, [r7, #8]
 8004efc:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	4b30      	ldr	r3, [pc, #192]	; (8004fc8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f0a:	f7fb fe1d 	bl	8000b48 <__aeabi_dcmpgt>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <_ZN5Motor8setRatioEdd+0x30>
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	4c2b      	ldr	r4, [pc, #172]	; (8004fc8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f1a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004f1e:	e00e      	b.n	8004f3e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	4b29      	ldr	r3, [pc, #164]	; (8004fcc <_ZN5Motor8setRatioEdd+0xdc>)
 8004f26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f2a:	f7fb fdef 	bl	8000b0c <__aeabi_dcmplt>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <_ZN5Motor8setRatioEdd+0x4e>
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	4c24      	ldr	r4, [pc, #144]	; (8004fcc <_ZN5Motor8setRatioEdd+0xdc>)
 8004f3a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f48:	f7fb fdfe 	bl	8000b48 <__aeabi_dcmpgt>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <_ZN5Motor8setRatioEdd+0x6e>
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	4c1c      	ldr	r4, [pc, #112]	; (8004fc8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f58:	e9c7 3400 	strd	r3, r4, [r7]
 8004f5c:	e00e      	b.n	8004f7c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <_ZN5Motor8setRatioEdd+0xdc>)
 8004f64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f68:	f7fb fdd0 	bl	8000b0c <__aeabi_dcmplt>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <_ZN5Motor8setRatioEdd+0x8c>
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	4c15      	ldr	r4, [pc, #84]	; (8004fcc <_ZN5Motor8setRatioEdd+0xdc>)
 8004f78:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004f82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f86:	f7fb fb4f 	bl	8000628 <__aeabi_dmul>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	4618      	mov	r0, r3
 8004f90:	4621      	mov	r1, r4
 8004f92:	f7fb fdf9 	bl	8000b88 <__aeabi_d2iz>
 8004f96:	4603      	mov	r3, r0
 8004f98:	b21a      	sxth	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fa8:	f7fb fb3e 	bl	8000628 <__aeabi_dmul>
 8004fac:	4603      	mov	r3, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	f7fb fde8 	bl	8000b88 <__aeabi_d2iz>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	b21a      	sxth	r2, r3
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	805a      	strh	r2, [r3, #2]

}
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd90      	pop	{r4, r7, pc}
 8004fc8:	3ff00000 	.word	0x3ff00000
 8004fcc:	bff00000 	.word	0xbff00000
 8004fd0:	409c2000 	.word	0x409c2000

08004fd4 <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8005008:	b490      	push	{r4, r7}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	f04f 0400 	mov.w	r4, #0
 8005020:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	f04f 0400 	mov.w	r4, #0
 800502e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	f04f 0400 	mov.w	r4, #0
 800503c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	f04f 0400 	mov.w	r4, #0
 800504a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	f04f 0400 	mov.w	r4, #0
 8005058:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	609a      	str	r2, [r3, #8]
}
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bc90      	pop	{r4, r7}
 8005078:	4770      	bx	lr
 800507a:	0000      	movs	r0, r0
 800507c:	0000      	movs	r0, r0
	...

08005080 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4618      	mov	r0, r3
 8005090:	f7fc ff1e 	bl	8001ed0 <_ZN3IMU8getOmegaEv>
 8005094:	ee10 3a10 	vmov	r3, s0
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb fa6d 	bl	8000578 <__aeabi_f2d>
 800509e:	4603      	mov	r3, r0
 80050a0:	460c      	mov	r4, r1
 80050a2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fc fafc 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 80050b0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80050b4:	a376      	add	r3, pc, #472	; (adr r3, 8005290 <_ZN8Odometry12calcPotitionEv+0x210>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050be:	f7fb fab3 	bl	8000628 <__aeabi_dmul>
 80050c2:	4603      	mov	r3, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7fb fa50 	bl	8000578 <__aeabi_f2d>
 80050d8:	4682      	mov	sl, r0
 80050da:	468b      	mov	fp, r1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050f0:	f7fb fbc4 	bl	800087c <__aeabi_ddiv>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4640      	mov	r0, r8
 80050fa:	4649      	mov	r1, r9
 80050fc:	f7fb f8de 	bl	80002bc <__adddf3>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	ec43 2b17 	vmov	d7, r2, r3
 8005108:	eeb0 0a47 	vmov.f32	s0, s14
 800510c:	eef0 0a67 	vmov.f32	s1, s15
 8005110:	f00f fbfa 	bl	8014908 <cos>
 8005114:	ec53 2b10 	vmov	r2, r3, d0
 8005118:	4650      	mov	r0, sl
 800511a:	4659      	mov	r1, fp
 800511c:	f7fb fa84 	bl	8000628 <__aeabi_dmul>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4620      	mov	r0, r4
 8005126:	4629      	mov	r1, r5
 8005128:	f7fb f8c8 	bl	80002bc <__adddf3>
 800512c:	4603      	mov	r3, r0
 800512e:	460c      	mov	r4, r1
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7fb fa1b 	bl	8000578 <__aeabi_f2d>
 8005142:	4682      	mov	sl, r0
 8005144:	468b      	mov	fp, r1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800515a:	f7fb fb8f 	bl	800087c <__aeabi_ddiv>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4640      	mov	r0, r8
 8005164:	4649      	mov	r1, r9
 8005166:	f7fb f8a9 	bl	80002bc <__adddf3>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	ec43 2b17 	vmov	d7, r2, r3
 8005172:	eeb0 0a47 	vmov.f32	s0, s14
 8005176:	eef0 0a67 	vmov.f32	s1, s15
 800517a:	f00f fc09 	bl	8014990 <sin>
 800517e:	ec53 2b10 	vmov	r2, r3, d0
 8005182:	4650      	mov	r0, sl
 8005184:	4659      	mov	r1, fp
 8005186:	f7fb fa4f 	bl	8000628 <__aeabi_dmul>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4620      	mov	r0, r4
 8005190:	4629      	mov	r1, r5
 8005192:	f7fb f893 	bl	80002bc <__adddf3>
 8005196:	4603      	mov	r3, r0
 8005198:	460c      	mov	r4, r1
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80051ac:	461a      	mov	r2, r3
 80051ae:	4623      	mov	r3, r4
 80051b0:	f7fb f884 	bl	80002bc <__adddf3>
 80051b4:	4603      	mov	r3, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	ed93 7b08 	vldr	d7, [r3, #32]
 80051ca:	eeb0 0a47 	vmov.f32	s0, s14
 80051ce:	eef0 0a67 	vmov.f32	s1, s15
 80051d2:	f00f fb99 	bl	8014908 <cos>
 80051d6:	ec51 0b10 	vmov	r0, r1, d0
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	4b28      	ldr	r3, [pc, #160]	; (8005280 <_ZN8Odometry12calcPotitionEv+0x200>)
 80051e0:	f7fb fa22 	bl	8000628 <__aeabi_dmul>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4620      	mov	r0, r4
 80051ea:	4629      	mov	r1, r5
 80051ec:	f7fb f866 	bl	80002bc <__adddf3>
 80051f0:	4603      	mov	r3, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	ed93 7b08 	vldr	d7, [r3, #32]
 8005206:	eeb0 0a47 	vmov.f32	s0, s14
 800520a:	eef0 0a67 	vmov.f32	s1, s15
 800520e:	f00f fbbf 	bl	8014990 <sin>
 8005212:	ec51 0b10 	vmov	r0, r1, d0
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	4b19      	ldr	r3, [pc, #100]	; (8005280 <_ZN8Odometry12calcPotitionEv+0x200>)
 800521c:	f7fb fa04 	bl	8000628 <__aeabi_dmul>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4620      	mov	r0, r4
 8005226:	4629      	mov	r1, r5
 8005228:	f7fb f848 	bl	80002bc <__adddf3>
 800522c:	4603      	mov	r3, r0
 800522e:	460c      	mov	r4, r1
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800523c:	4618      	mov	r0, r3
 800523e:	4621      	mov	r1, r4
 8005240:	f7fb fcea 	bl	8000c18 <__aeabi_d2f>
 8005244:	4602      	mov	r2, r0
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <_ZN8Odometry12calcPotitionEv+0x204>)
 8005248:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005250:	4618      	mov	r0, r3
 8005252:	4621      	mov	r1, r4
 8005254:	f7fb fce0 	bl	8000c18 <__aeabi_d2f>
 8005258:	4602      	mov	r2, r0
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <_ZN8Odometry12calcPotitionEv+0x208>)
 800525c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005264:	4618      	mov	r0, r3
 8005266:	4621      	mov	r1, r4
 8005268:	f7fb fcd6 	bl	8000c18 <__aeabi_d2f>
 800526c:	4602      	mov	r2, r0
 800526e:	4b07      	ldr	r3, [pc, #28]	; (800528c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527c:	f3af 8000 	nop.w
 8005280:	405b8000 	.word	0x405b8000
 8005284:	2000028c 	.word	0x2000028c
 8005288:	20000290 	.word	0x20000290
 800528c:	20000294 	.word	0x20000294
 8005290:	d2f1a9fc 	.word	0xd2f1a9fc
 8005294:	3f50624d 	.word	0x3f50624d

08005298 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
	calcPotition();
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff feed 	bl	8005080 <_ZN8Odometry12calcPotitionEv>
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80052ae:	b490      	push	{r4, r7}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
	return theta_;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80052bc:	ec44 3b17 	vmov	d7, r3, r4
}
 80052c0:	eeb0 0a47 	vmov.f32	s0, s14
 80052c4:	eef0 0a67 	vmov.f32	s1, s15
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc90      	pop	{r4, r7}
 80052ce:	4770      	bx	lr

080052d0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80052d0:	b490      	push	{r4, r7}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	f04f 0400 	mov.w	r4, #0
 80052e2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	f04f 0400 	mov.w	r4, #0
 80052f0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	f04f 0400 	mov.w	r4, #0
 80052fe:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bc90      	pop	{r4, r7}
 800530a:	4770      	bx	lr

0800530c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 800530c:	b490      	push	{r4, r7}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	f04f 0400 	mov.w	r4, #0
 8005324:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	f04f 0400 	mov.w	r4, #0
 8005332:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	f04f 0400 	mov.w	r4, #0
 8005340:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800534a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800534e:	2200      	movs	r2, #0
 8005350:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005352:	4a29      	ldr	r2, [pc, #164]	; (80053f8 <_ZN13PathFollowingC1Ev+0xec>)
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	f04f 0400 	mov.w	r4, #0
 800535c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005360:	4a25      	ldr	r2, [pc, #148]	; (80053f8 <_ZN13PathFollowingC1Ev+0xec>)
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	f04f 0400 	mov.w	r4, #0
 800536a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800536e:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <_ZN13PathFollowingC1Ev+0xec>)
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	f04f 0400 	mov.w	r4, #0
 8005378:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800537c:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <_ZN13PathFollowingC1Ev+0xf0>)
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	f04f 0400 	mov.w	r4, #0
 8005386:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800538a:	4a1c      	ldr	r2, [pc, #112]	; (80053fc <_ZN13PathFollowingC1Ev+0xf0>)
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	f04f 0400 	mov.w	r4, #0
 8005394:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005398:	4a18      	ldr	r2, [pc, #96]	; (80053fc <_ZN13PathFollowingC1Ev+0xf0>)
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	f04f 0400 	mov.w	r4, #0
 80053a2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80053a6:	4a15      	ldr	r2, [pc, #84]	; (80053fc <_ZN13PathFollowingC1Ev+0xf0>)
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	f04f 0400 	mov.w	r4, #0
 80053b0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80053b4:	4a11      	ldr	r2, [pc, #68]	; (80053fc <_ZN13PathFollowingC1Ev+0xf0>)
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	f04f 0400 	mov.w	r4, #0
 80053be:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80053c2:	4a0e      	ldr	r2, [pc, #56]	; (80053fc <_ZN13PathFollowingC1Ev+0xf0>)
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80053d0:	4a0b      	ldr	r2, [pc, #44]	; (8005400 <_ZN13PathFollowingC1Ev+0xf4>)
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80053de:	4a08      	ldr	r2, [pc, #32]	; (8005400 <_ZN13PathFollowingC1Ev+0xf4>)
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	f04f 0400 	mov.w	r4, #0
 80053e8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc90      	pop	{r4, r7}
 80053f6:	4770      	bx	lr
 80053f8:	20044da8 	.word	0x20044da8
 80053fc:	20044d38 	.word	0x20044d38
 8005400:	20044d98 	.word	0x20044d98

08005404 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800540c:	f001 fdce 	bl	8006fac <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005410:	f107 0318 	add.w	r3, r7, #24
 8005414:	2201      	movs	r2, #1
 8005416:	4915      	ldr	r1, [pc, #84]	; (800546c <_ZN13PathFollowing4initEv+0x68>)
 8005418:	4815      	ldr	r0, [pc, #84]	; (8005470 <_ZN13PathFollowing4initEv+0x6c>)
 800541a:	f7fc fadb 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800541e:	f107 0310 	add.w	r3, r7, #16
 8005422:	2201      	movs	r2, #1
 8005424:	4913      	ldr	r1, [pc, #76]	; (8005474 <_ZN13PathFollowing4initEv+0x70>)
 8005426:	4812      	ldr	r0, [pc, #72]	; (8005470 <_ZN13PathFollowing4initEv+0x6c>)
 8005428:	f7fc fad4 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 800542c:	f107 0308 	add.w	r3, r7, #8
 8005430:	2201      	movs	r2, #1
 8005432:	4911      	ldr	r1, [pc, #68]	; (8005478 <_ZN13PathFollowing4initEv+0x74>)
 8005434:	480e      	ldr	r0, [pc, #56]	; (8005470 <_ZN13PathFollowing4initEv+0x6c>)
 8005436:	f7fc facd 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800543a:	ed97 7b06 	vldr	d7, [r7, #24]
 800543e:	ed97 6b04 	vldr	d6, [r7, #16]
 8005442:	ed97 5b02 	vldr	d5, [r7, #8]
 8005446:	eeb0 2a45 	vmov.f32	s4, s10
 800544a:	eef0 2a65 	vmov.f32	s5, s11
 800544e:	eeb0 1a46 	vmov.f32	s2, s12
 8005452:	eef0 1a66 	vmov.f32	s3, s13
 8005456:	eeb0 0a47 	vmov.f32	s0, s14
 800545a:	eef0 0a67 	vmov.f32	s1, s15
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f80c 	bl	800547c <_ZN13PathFollowing7setGainEddd>
}
 8005464:	bf00      	nop
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	08019fb4 	.word	0x08019fb4
 8005470:	08019fbc 	.word	0x08019fbc
 8005474:	08019fc4 	.word	0x08019fc4
 8005478:	08019fcc 	.word	0x08019fcc

0800547c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 800547c:	b490      	push	{r4, r7}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	61f8      	str	r0, [r7, #28]
 8005484:	ed87 0b04 	vstr	d0, [r7, #16]
 8005488:	ed87 1b02 	vstr	d1, [r7, #8]
 800548c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005490:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005492:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005496:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800549a:	4a07      	ldr	r2, [pc, #28]	; (80054b8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800549c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80054a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80054a4:	4a04      	ldr	r2, [pc, #16]	; (80054b8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80054a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80054aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80054ae:	bf00      	nop
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc90      	pop	{r4, r7}
 80054b6:	4770      	bx	lr
 80054b8:	20044da8 	.word	0x20044da8

080054bc <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80054c4:	2088      	movs	r0, #136	; 0x88
 80054c6:	f7fc fe46 	bl	8002156 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80054ca:	2080      	movs	r0, #128	; 0x80
 80054cc:	f7fc fe43 	bl	8002156 <INA260_init>
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80054e0:	2188      	movs	r1, #136	; 0x88
 80054e2:	2002      	movs	r0, #2
 80054e4:	f7fc fdd4 	bl	8002090 <INA260_read>
 80054e8:	4603      	mov	r3, r0
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fb f832 	bl	8000554 <__aeabi_i2d>
 80054f0:	a30c      	add	r3, pc, #48	; (adr r3, 8005524 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fb f897 	bl	8000628 <__aeabi_dmul>
 80054fa:	4603      	mov	r3, r0
 80054fc:	460c      	mov	r4, r1
 80054fe:	4618      	mov	r0, r3
 8005500:	4621      	mov	r1, r4
 8005502:	f7fb fb89 	bl	8000c18 <__aeabi_d2f>
 8005506:	4602      	mov	r2, r0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	4a03      	ldr	r2, [pc, #12]	; (8005520 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005512:	6013      	str	r3, [r2, #0]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	bd90      	pop	{r4, r7, pc}
 800551c:	f3af 8000 	nop.w
 8005520:	20000298 	.word	0x20000298
 8005524:	47ae147b 	.word	0x47ae147b
 8005528:	3f547ae1 	.word	0x3f547ae1

0800552c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	ee07 3a90 	vmov	s15, r3

}
 800553c:	eeb0 0a67 	vmov.f32	s0, s15
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005558:	2102      	movs	r1, #2
 800555a:	4822      	ldr	r0, [pc, #136]	; (80055e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800555c:	f005 ff5e 	bl	800b41c <HAL_GPIO_ReadPin>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	bf0c      	ite	eq
 8005566:	2301      	moveq	r3, #1
 8005568:	2300      	movne	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	f043 0301 	orr.w	r3, r3, #1
 8005576:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005578:	2108      	movs	r1, #8
 800557a:	481a      	ldr	r0, [pc, #104]	; (80055e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800557c:	f005 ff4e 	bl	800b41c <HAL_GPIO_ReadPin>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005590:	89fb      	ldrh	r3, [r7, #14]
 8005592:	f043 0302 	orr.w	r3, r3, #2
 8005596:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005598:	2110      	movs	r1, #16
 800559a:	4812      	ldr	r0, [pc, #72]	; (80055e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800559c:	f005 ff3e 	bl	800b41c <HAL_GPIO_ReadPin>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf0c      	ite	eq
 80055a6:	2301      	moveq	r3, #1
 80055a8:	2300      	movne	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80055b0:	89fb      	ldrh	r3, [r7, #14]
 80055b2:	f043 0304 	orr.w	r3, r3, #4
 80055b6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80055b8:	2180      	movs	r1, #128	; 0x80
 80055ba:	480a      	ldr	r0, [pc, #40]	; (80055e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80055bc:	f005 ff2e 	bl	800b41c <HAL_GPIO_ReadPin>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf0c      	ite	eq
 80055c6:	2301      	moveq	r3, #1
 80055c8:	2300      	movne	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80055d0:	89fb      	ldrh	r3, [r7, #14]
 80055d2:	f043 0308 	orr.w	r3, r3, #8
 80055d6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80055d8:	89fb      	ldrh	r3, [r7, #14]

}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40020c00 	.word	0x40020c00

080055e8 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	709a      	strb	r2, [r3, #2]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	70da      	strb	r2, [r3, #3]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	809a      	strh	r2, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	80da      	strh	r2, [r3, #6]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	721a      	strb	r2, [r3, #8]
{

}
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	7a1b      	ldrb	r3, [r3, #8]
 8005630:	f083 0301 	eor.w	r3, r3, #1
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 80ea 	beq.w	8005810 <_ZN10SideSensor12updateStatusEv+0x1ec>
		if(white_flag1 == false){
 800563c:	4b76      	ldr	r3, [pc, #472]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f083 0301 	eor.w	r3, r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d032      	beq.n	80056b0 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 800564a:	2104      	movs	r1, #4
 800564c:	4873      	ldr	r0, [pc, #460]	; (800581c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 800564e:	f005 fee5 	bl	800b41c <HAL_GPIO_ReadPin>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d109      	bne.n	800566c <_ZN10SideSensor12updateStatusEv+0x48>
 8005658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800565c:	4870      	ldr	r0, [pc, #448]	; (8005820 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800565e:	f005 fedd 	bl	800b41c <HAL_GPIO_ReadPin>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <_ZN10SideSensor12updateStatusEv+0x48>
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <_ZN10SideSensor12updateStatusEv+0x4a>
 800566c:	2300      	movs	r3, #0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d006      	beq.n	8005680 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 8005672:	4b6c      	ldr	r3, [pc, #432]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x200>)
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	e002      	b.n	8005686 <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 8005680:	4b68      	ldr	r3, [pc, #416]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005682:	2200      	movs	r2, #0
 8005684:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005686:	4b67      	ldr	r3, [pc, #412]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	2b04      	cmp	r3, #4
 800568c:	d945      	bls.n	800571a <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ |= 0x01;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 80056a2:	4b5d      	ldr	r3, [pc, #372]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80056a8:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x200>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	e034      	b.n	800571a <_ZN10SideSensor12updateStatusEv+0xf6>
			}

		}
		else if(white_flag1 == true){
 80056b0:	4b59      	ldr	r3, [pc, #356]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d030      	beq.n	800571a <_ZN10SideSensor12updateStatusEv+0xf6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 80056b8:	2104      	movs	r1, #4
 80056ba:	4858      	ldr	r0, [pc, #352]	; (800581c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80056bc:	f005 feae 	bl	800b41c <HAL_GPIO_ReadPin>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d006      	beq.n	80056de <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 80056d0:	4b54      	ldr	r3, [pc, #336]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x200>)
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	4b52      	ldr	r3, [pc, #328]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x200>)
 80056da:	801a      	strh	r2, [r3, #0]
 80056dc:	e002      	b.n	80056e4 <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 80056de:	4b51      	ldr	r3, [pc, #324]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x200>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80056e4:	4b4f      	ldr	r3, [pc, #316]	; (8005824 <_ZN10SideSensor12updateStatusEv+0x200>)
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d916      	bls.n	800571a <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ ^= 0x01;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	f083 0301 	eor.w	r3, r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 8005700:	4b45      	ldr	r3, [pc, #276]	; (8005818 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	88db      	ldrh	r3, [r3, #6]
 800570a:	3301      	adds	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	88da      	ldrh	r2, [r3, #6]
 8005716:	4b44      	ldr	r3, [pc, #272]	; (8005828 <_ZN10SideSensor12updateStatusEv+0x204>)
 8005718:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800571a:	4b44      	ldr	r3, [pc, #272]	; (800582c <_ZN10SideSensor12updateStatusEv+0x208>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	f083 0301 	eor.w	r3, r3, #1
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d031      	beq.n	800578c <_ZN10SideSensor12updateStatusEv+0x168>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 8005728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800572c:	483c      	ldr	r0, [pc, #240]	; (8005820 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800572e:	f005 fe75 	bl	800b41c <HAL_GPIO_ReadPin>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d108      	bne.n	800574a <_ZN10SideSensor12updateStatusEv+0x126>
 8005738:	2104      	movs	r1, #4
 800573a:	4838      	ldr	r0, [pc, #224]	; (800581c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 800573c:	f005 fe6e 	bl	800b41c <HAL_GPIO_ReadPin>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <_ZN10SideSensor12updateStatusEv+0x126>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <_ZN10SideSensor12updateStatusEv+0x128>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d006      	beq.n	800575e <_ZN10SideSensor12updateStatusEv+0x13a>
				cnt_l++;
 8005750:	4b37      	ldr	r3, [pc, #220]	; (8005830 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	4b35      	ldr	r3, [pc, #212]	; (8005830 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	e002      	b.n	8005764 <_ZN10SideSensor12updateStatusEv+0x140>
			}
			else{
				cnt_l = 0;
 800575e:	4b34      	ldr	r3, [pc, #208]	; (8005830 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005760:	2200      	movs	r2, #0
 8005762:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005764:	4b32      	ldr	r3, [pc, #200]	; (8005830 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	2b04      	cmp	r3, #4
 800576a:	d90f      	bls.n	800578c <_ZN10SideSensor12updateStatusEv+0x168>
				status_ |= 0x02;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	f043 0302 	orr.w	r3, r3, #2
 8005774:	b29a      	uxth	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005780:	4b2a      	ldr	r3, [pc, #168]	; (800582c <_ZN10SideSensor12updateStatusEv+0x208>)
 8005782:	2201      	movs	r2, #1
 8005784:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005786:	4b2a      	ldr	r3, [pc, #168]	; (8005830 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005788:	2200      	movs	r2, #0
 800578a:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 800578c:	4b27      	ldr	r3, [pc, #156]	; (800582c <_ZN10SideSensor12updateStatusEv+0x208>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d031      	beq.n	80057f8 <_ZN10SideSensor12updateStatusEv+0x1d4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 8005794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005798:	4821      	ldr	r0, [pc, #132]	; (8005820 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800579a:	f005 fe3f 	bl	800b41c <HAL_GPIO_ReadPin>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d006      	beq.n	80057bc <_ZN10SideSensor12updateStatusEv+0x198>
				cnt_l++;
 80057ae:	4b20      	ldr	r3, [pc, #128]	; (8005830 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	3301      	adds	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	e002      	b.n	80057c2 <_ZN10SideSensor12updateStatusEv+0x19e>
			}
			else{
				cnt_l = 0;
 80057bc:	4b1c      	ldr	r3, [pc, #112]	; (8005830 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057be:	2200      	movs	r2, #0
 80057c0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80057c2:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d916      	bls.n	80057f8 <_ZN10SideSensor12updateStatusEv+0x1d4>
				status_ ^= 0x02;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	f083 0302 	eor.w	r3, r3, #2
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <_ZN10SideSensor12updateStatusEv+0x208>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	889b      	ldrh	r3, [r3, #4]
 80057e8:	3301      	adds	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	889a      	ldrh	r2, [r3, #4]
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <_ZN10SideSensor12updateStatusEv+0x210>)
 80057f6:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	881a      	ldrh	r2, [r3, #0]
 80057fc:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <_ZN10SideSensor12updateStatusEv+0x214>)
 80057fe:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	789a      	ldrb	r2, [r3, #2]
 8005804:	4b0d      	ldr	r3, [pc, #52]	; (800583c <_ZN10SideSensor12updateStatusEv+0x218>)
 8005806:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	78da      	ldrb	r2, [r3, #3]
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <_ZN10SideSensor12updateStatusEv+0x21c>)
 800580e:	701a      	strb	r2, [r3, #0]
	}

}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	200002a4 	.word	0x200002a4
 800581c:	40021000 	.word	0x40021000
 8005820:	40020c00 	.word	0x40020c00
 8005824:	200002a8 	.word	0x200002a8
 8005828:	200002a2 	.word	0x200002a2
 800582c:	200002a5 	.word	0x200002a5
 8005830:	200002a6 	.word	0x200002a6
 8005834:	200002a0 	.word	0x200002a0
 8005838:	2000029c 	.word	0x2000029c
 800583c:	2000029e 	.word	0x2000029e
 8005840:	2000029f 	.word	0x2000029f

08005844 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	return status_L_;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	789b      	ldrb	r3, [r3, #2]
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	88db      	ldrh	r3, [r3, #6]
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	80da      	strh	r2, [r3, #6]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	721a      	strb	r2, [r3, #8]
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	721a      	strb	r2, [r3, #8]
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	7a1b      	ldrb	r3, [r3, #8]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3308      	adds	r3, #8
 80058f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058f4:	2100      	movs	r1, #0
 80058f6:	4618      	mov	r0, r3
 80058f8:	f010 f886 	bl	8015a08 <memset>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005902:	811a      	strh	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590a:	815a      	strh	r2, [r3, #10]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005912:	819a      	strh	r2, [r3, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800591a:	81da      	strh	r2, [r3, #14]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005922:	821a      	strh	r2, [r3, #16]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800592a:	825a      	strh	r2, [r3, #18]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	829a      	strh	r2, [r3, #20]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	82da      	strh	r2, [r3, #22]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	831a      	strh	r2, [r3, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	835a      	strh	r2, [r3, #26]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	839a      	strh	r2, [r3, #28]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	83da      	strh	r2, [r3, #30]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	841a      	strh	r2, [r3, #32]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800595c:	845a      	strh	r2, [r3, #34]	; 0x22
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	849a      	strh	r2, [r3, #36]	; 0x24
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800596a:	84da      	strh	r2, [r3, #38]	; 0x26
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	851a      	strh	r2, [r3, #40]	; 0x28
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005978:	855a      	strh	r2, [r3, #42]	; 0x2a
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005986:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800598e:	861a      	strh	r2, [r3, #48]	; 0x30
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	865a      	strh	r2, [r3, #50]	; 0x32
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	869a      	strh	r2, [r3, #52]	; 0x34
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059aa:	871a      	strh	r2, [r3, #56]	; 0x38
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	879a      	strh	r2, [r3, #60]	; 0x3c
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a02:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a2e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a86:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aa0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005acc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ae6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005af0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b02:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b0c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b1e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b28:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b32:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b54:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b5e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b68:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b72:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b84:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bb6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bc0:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bd2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005be4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c06:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c10:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c2a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c3c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d042      	beq.n	8005d08 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3204      	adds	r2, #4
 8005c94:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005c98:	ee07 3a90 	vmov	s15, r3
 8005c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cc0:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8005cc2:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005cca:	2bf9      	cmp	r3, #249	; 0xf9
 8005ccc:	d903      	bls.n	8005cd6 <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	22fa      	movs	r2, #250	; 0xfa
 8005cd2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685c      	ldr	r4, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fa fc49 	bl	8000578 <__aeabi_f2d>
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	460e      	mov	r6, r1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fa fc41 	bl	8000578 <__aeabi_f2d>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	ec43 2b11 	vmov	d1, r2, r3
 8005cfe:	ec46 5b10 	vmov	d0, r5, r6
 8005d02:	4620      	mov	r0, r4
 8005d04:	f7ff f8f4 	bl	8004ef0 <_ZN5Motor8setRatioEdd>

	}

}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d10:	200002ac 	.word	0x200002ac

08005d14 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	609a      	str	r2, [r3, #8]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	611a      	str	r2, [r3, #16]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	615a      	str	r2, [r3, #20]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	619a      	str	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	61da      	str	r2, [r3, #28]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	621a      	str	r2, [r3, #32]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	625a      	str	r2, [r3, #36]	; 0x24
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	0000      	movs	r0, r0
 8005dac:	0000      	movs	r0, r0
	...

08005db0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005db0:	b590      	push	{r4, r7, lr}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbc:	f107 020c 	add.w	r2, r7, #12
 8005dc0:	f107 0110 	add.w	r1, r7, #16
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fb fc5b 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005dca:	ed97 7a04 	vldr	s14, [r7, #16]
 8005dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dd6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dde:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005de2:	6978      	ldr	r0, [r7, #20]
 8005de4:	f7fa fbc8 	bl	8000578 <__aeabi_f2d>
 8005de8:	a30e      	add	r3, pc, #56	; (adr r3, 8005e24 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f7fa fc1b 	bl	8000628 <__aeabi_dmul>
 8005df2:	4603      	mov	r3, r0
 8005df4:	460c      	mov	r4, r1
 8005df6:	4618      	mov	r0, r3
 8005df8:	4621      	mov	r1, r4
 8005dfa:	f7fa ff0d 	bl	8000c18 <__aeabi_d2f>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	4a05      	ldr	r2, [pc, #20]	; (8005e20 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005e0a:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	ee07 3a90 	vmov	s15, r3
}
 8005e14:	eeb0 0a67 	vmov.f32	s0, s15
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	200002b0 	.word	0x200002b0
 8005e24:	1ab1d998 	.word	0x1ab1d998
 8005e28:	3f7830b5 	.word	0x3f7830b5
 8005e2c:	00000000 	.word	0x00000000

08005e30 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	ed93 7a00 	vldr	s14, [r3]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e48:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005e56:	4b48      	ldr	r3, [pc, #288]	; (8005f78 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	edd3 7a04 	vldr	s15, [r3, #16]
 8005e6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e74:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005e78:	4b3f      	ldr	r3, [pc, #252]	; (8005f78 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fa fb7b 	bl	8000578 <__aeabi_f2d>
 8005e82:	4604      	mov	r4, r0
 8005e84:	460d      	mov	r5, r1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	ed93 7a06 	vldr	s14, [r3, #24]
 8005e8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e94:	ee17 0a90 	vmov	r0, s15
 8005e98:	f7fa fb6e 	bl	8000578 <__aeabi_f2d>
 8005e9c:	a334      	add	r3, pc, #208	; (adr r3, 8005f70 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	f7fa fbc1 	bl	8000628 <__aeabi_dmul>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4629      	mov	r1, r5
 8005eae:	f7fa fa05 	bl	80002bc <__adddf3>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	4621      	mov	r1, r4
 8005eba:	f7fa fead 	bl	8000c18 <__aeabi_d2f>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005ec2:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	ed93 7a05 	vldr	s14, [r3, #20]
 8005eca:	4b2c      	ldr	r3, [pc, #176]	; (8005f7c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005ecc:	edd3 7a00 	vldr	s15, [r3]
 8005ed0:	edd7 6a05 	vldr	s13, [r7, #20]
 8005ed4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005edc:	ee17 0a90 	vmov	r0, s15
 8005ee0:	f7fa fb4a 	bl	8000578 <__aeabi_f2d>
 8005ee4:	a322      	add	r3, pc, #136	; (adr r3, 8005f70 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f7fa fcc7 	bl	800087c <__aeabi_ddiv>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	f7fa fe8f 	bl	8000c18 <__aeabi_d2f>
 8005efa:	4603      	mov	r3, r0
 8005efc:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005efe:	ed97 7a04 	vldr	s14, [r7, #16]
 8005f02:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f0a:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005f0c:	edd3 7a00 	vldr	s15, [r3]
 8005f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f14:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f2a:	ee17 0a90 	vmov	r0, s15
 8005f2e:	f7fa fb23 	bl	8000578 <__aeabi_f2d>
 8005f32:	4605      	mov	r5, r0
 8005f34:	460e      	mov	r6, r1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005f3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f44:	ee17 0a90 	vmov	r0, s15
 8005f48:	f7fa fb16 	bl	8000578 <__aeabi_f2d>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	ec43 2b11 	vmov	d1, r2, r3
 8005f54:	ec46 5b10 	vmov	d0, r5, r6
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f7fe ffc9 	bl	8004ef0 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005f5e:	4a07      	ldr	r2, [pc, #28]	; (8005f7c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	6013      	str	r3, [r2, #0]
}
 8005f64:	bf00      	nop
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6c:	f3af 8000 	nop.w
 8005f70:	d2f1a9fc 	.word	0xd2f1a9fc
 8005f74:	3f50624d 	.word	0x3f50624d
 8005f78:	200002b8 	.word	0x200002b8
 8005f7c:	200002b4 	.word	0x200002b4

08005f80 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	ed87 0a02 	vstr	s0, [r7, #8]
 8005f8c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	605a      	str	r2, [r3, #4]
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005fb4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005fc4:	bf00      	nop
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005fdc:	edc7 0a01 	vstr	s1, [r7, #4]
 8005fe0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	615a      	str	r2, [r3, #20]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	ed87 0a02 	vstr	s0, [r7, #8]
 800600e:	edc7 0a01 	vstr	s1, [r7, #4]
 8006012:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	621a      	str	r2, [r3, #32]
}
 8006028:	bf00      	nop
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff feb7 	bl	8005db0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff feef 	bl	8005e30 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
	...

08006080 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80060b0 <_ZN12VelocityCtrl4stopEv+0x30>
 8006098:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80060b0 <_ZN12VelocityCtrl4stopEv+0x30>
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe ff27 	bl	8004ef0 <_ZN5Motor8setRatioEdd>

}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	f3af 8000 	nop.w
	...

080060b8 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1e      	ldr	r2, [pc, #120]	; (8006140 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d10e      	bne.n	80060e8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 80060ca:	f001 fe11 	bl	8007cf0 <cppFlip100ns>

		tim7_timer++;
 80060ce:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	4a1b      	ldr	r2, [pc, #108]	; (8006144 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80060d6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80060d8:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1a      	ldr	r2, [pc, #104]	; (8006148 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d902      	bls.n	80060e8 <HAL_TIM_PeriodElapsedCallback+0x30>
 80060e2:	4b18      	ldr	r3, [pc, #96]	; (8006144 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a17      	ldr	r2, [pc, #92]	; (800614c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d10e      	bne.n	8006110 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80060f2:	f001 fdcd 	bl	8007c90 <cppFlip1ms>

		tim6_timer++;
 80060f6:	4b16      	ldr	r3, [pc, #88]	; (8006150 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3301      	adds	r3, #1
 80060fc:	4a14      	ldr	r2, [pc, #80]	; (8006150 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80060fe:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8006100:	4b13      	ldr	r3, [pc, #76]	; (8006150 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a10      	ldr	r2, [pc, #64]	; (8006148 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d902      	bls.n	8006110 <HAL_TIM_PeriodElapsedCallback+0x58>
 800610a:	4b11      	ldr	r3, [pc, #68]	; (8006150 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a0f      	ldr	r2, [pc, #60]	; (8006154 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d10e      	bne.n	8006138 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800611a:	f001 fdf3 	bl	8007d04 <cppFlip10ms>

		tim13_timer++;
 800611e:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3301      	adds	r3, #1
 8006124:	4a0c      	ldr	r2, [pc, #48]	; (8006158 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006126:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a06      	ldr	r2, [pc, #24]	; (8006148 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d902      	bls.n	8006138 <HAL_TIM_PeriodElapsedCallback+0x80>
 8006132:	4b09      	ldr	r3, [pc, #36]	; (8006158 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]
	}

}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40001400 	.word	0x40001400
 8006144:	20044a5c 	.word	0x20044a5c
 8006148:	0001869f 	.word	0x0001869f
 800614c:	40001000 	.word	0x40001000
 8006150:	20044a18 	.word	0x20044a18
 8006154:	40001c00 	.word	0x40001c00
 8006158:	20044a60 	.word	0x20044a60

0800615c <init>:

void init()
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8006160:	2201      	movs	r2, #1
 8006162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006166:	4808      	ldr	r0, [pc, #32]	; (8006188 <init+0x2c>)
 8006168:	f005 f970 	bl	800b44c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 800616c:	4807      	ldr	r0, [pc, #28]	; (800618c <init+0x30>)
 800616e:	f009 f838 	bl	800f1e2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8006172:	4807      	ldr	r0, [pc, #28]	; (8006190 <init+0x34>)
 8006174:	f009 f835 	bl	800f1e2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8006178:	4806      	ldr	r0, [pc, #24]	; (8006194 <init+0x38>)
 800617a:	f009 f832 	bl	800f1e2 <HAL_TIM_Base_Start_IT>

	cppInit();
 800617e:	f001 fce3 	bl	8007b48 <cppInit>

	//path_following_initialize();

}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40021000 	.word	0x40021000
 800618c:	20044b44 	.word	0x20044b44
 8006190:	20044ce8 	.word	0x20044ce8
 8006194:	20044a64 	.word	0x20044a64

08006198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800619c:	f003 fe4e 	bl	8009e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80061a0:	f000 f82a 	bl	80061f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80061a4:	f000 fdbc 	bl	8006d20 <MX_GPIO_Init>
  MX_DMA_Init();
 80061a8:	f000 fd8a 	bl	8006cc0 <MX_DMA_Init>
  MX_I2C2_Init();
 80061ac:	f000 f9e8 	bl	8006580 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80061b0:	f000 fa14 	bl	80065dc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80061b4:	f000 fa32 	bl	800661c <MX_SPI2_Init>
  MX_TIM1_Init();
 80061b8:	f000 fa66 	bl	8006688 <MX_TIM1_Init>
  MX_TIM4_Init();
 80061bc:	f000 fb70 	bl	80068a0 <MX_TIM4_Init>
  MX_TIM8_Init();
 80061c0:	f000 fc3c 	bl	8006a3c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80061c4:	f000 fd52 	bl	8006c6c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80061c8:	f00a ffde 	bl	8011188 <MX_FATFS_Init>
  MX_TIM6_Init();
 80061cc:	f000 fbcc 	bl	8006968 <MX_TIM6_Init>
  MX_I2C1_Init();
 80061d0:	f000 f9a8 	bl	8006524 <MX_I2C1_Init>
  MX_TIM3_Init();
 80061d4:	f000 fb00 	bl	80067d8 <MX_TIM3_Init>
  MX_TIM10_Init();
 80061d8:	f000 fc88 	bl	8006aec <MX_TIM10_Init>
  MX_TIM11_Init();
 80061dc:	f000 fcd4 	bl	8006b88 <MX_TIM11_Init>
  MX_ADC2_Init();
 80061e0:	f000 f898 	bl	8006314 <MX_ADC2_Init>
  MX_TIM7_Init();
 80061e4:	f000 fbf6 	bl	80069d4 <MX_TIM7_Init>
  MX_TIM13_Init();
 80061e8:	f000 fd1c 	bl	8006c24 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80061ec:	f7ff ffb6 	bl	800615c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80061f0:	f001 fdb6 	bl	8007d60 <cppLoop>
 80061f4:	e7fc      	b.n	80061f0 <main+0x58>
	...

080061f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b0a4      	sub	sp, #144	; 0x90
 80061fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006202:	2234      	movs	r2, #52	; 0x34
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f00f fbfe 	bl	8015a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800620c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	605a      	str	r2, [r3, #4]
 8006216:	609a      	str	r2, [r3, #8]
 8006218:	60da      	str	r2, [r3, #12]
 800621a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800621c:	f107 030c 	add.w	r3, r7, #12
 8006220:	223c      	movs	r2, #60	; 0x3c
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f00f fbef 	bl	8015a08 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	4b37      	ldr	r3, [pc, #220]	; (800630c <SystemClock_Config+0x114>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	4a36      	ldr	r2, [pc, #216]	; (800630c <SystemClock_Config+0x114>)
 8006234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006238:	6413      	str	r3, [r2, #64]	; 0x40
 800623a:	4b34      	ldr	r3, [pc, #208]	; (800630c <SystemClock_Config+0x114>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006242:	60bb      	str	r3, [r7, #8]
 8006244:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006246:	2300      	movs	r3, #0
 8006248:	607b      	str	r3, [r7, #4]
 800624a:	4b31      	ldr	r3, [pc, #196]	; (8006310 <SystemClock_Config+0x118>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a30      	ldr	r2, [pc, #192]	; (8006310 <SystemClock_Config+0x118>)
 8006250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	4b2e      	ldr	r3, [pc, #184]	; (8006310 <SystemClock_Config+0x118>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800625e:	607b      	str	r3, [r7, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006262:	2301      	movs	r3, #1
 8006264:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800626a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800626c:	2302      	movs	r3, #2
 800626e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006270:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006274:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006276:	2308      	movs	r3, #8
 8006278:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800627a:	23b4      	movs	r3, #180	; 0xb4
 800627c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006280:	2302      	movs	r3, #2
 8006282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006286:	2308      	movs	r3, #8
 8006288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800628c:	2302      	movs	r3, #2
 800628e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006292:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006296:	4618      	mov	r0, r3
 8006298:	f006 fcfa 	bl	800cc90 <HAL_RCC_OscConfig>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80062a2:	f000 fe7f 	bl	8006fa4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80062a6:	f006 f875 	bl	800c394 <HAL_PWREx_EnableOverDrive>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80062b0:	f000 fe78 	bl	8006fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062b4:	230f      	movs	r3, #15
 80062b6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80062b8:	2302      	movs	r3, #2
 80062ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062bc:	2300      	movs	r3, #0
 80062be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80062c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80062c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80062c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062ca:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80062cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80062d0:	2105      	movs	r1, #5
 80062d2:	4618      	mov	r0, r3
 80062d4:	f006 f8ae 	bl	800c434 <HAL_RCC_ClockConfig>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80062de:	f000 fe61 	bl	8006fa4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80062e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80062e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80062e8:	2300      	movs	r3, #0
 80062ea:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80062ec:	2300      	movs	r3, #0
 80062ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062f0:	f107 030c 	add.w	r3, r7, #12
 80062f4:	4618      	mov	r0, r3
 80062f6:	f006 fa8d 	bl	800c814 <HAL_RCCEx_PeriphCLKConfig>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006300:	f000 fe50 	bl	8006fa4 <Error_Handler>
  }
}
 8006304:	bf00      	nop
 8006306:	3790      	adds	r7, #144	; 0x90
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40023800 	.word	0x40023800
 8006310:	40007000 	.word	0x40007000

08006314 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800631a:	463b      	mov	r3, r7
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	605a      	str	r2, [r3, #4]
 8006322:	609a      	str	r2, [r3, #8]
 8006324:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006326:	4b7c      	ldr	r3, [pc, #496]	; (8006518 <MX_ADC2_Init+0x204>)
 8006328:	4a7c      	ldr	r2, [pc, #496]	; (800651c <MX_ADC2_Init+0x208>)
 800632a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800632c:	4b7a      	ldr	r3, [pc, #488]	; (8006518 <MX_ADC2_Init+0x204>)
 800632e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006332:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006334:	4b78      	ldr	r3, [pc, #480]	; (8006518 <MX_ADC2_Init+0x204>)
 8006336:	2200      	movs	r2, #0
 8006338:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800633a:	4b77      	ldr	r3, [pc, #476]	; (8006518 <MX_ADC2_Init+0x204>)
 800633c:	2201      	movs	r2, #1
 800633e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006340:	4b75      	ldr	r3, [pc, #468]	; (8006518 <MX_ADC2_Init+0x204>)
 8006342:	2201      	movs	r2, #1
 8006344:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006346:	4b74      	ldr	r3, [pc, #464]	; (8006518 <MX_ADC2_Init+0x204>)
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800634e:	4b72      	ldr	r3, [pc, #456]	; (8006518 <MX_ADC2_Init+0x204>)
 8006350:	2200      	movs	r2, #0
 8006352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006354:	4b70      	ldr	r3, [pc, #448]	; (8006518 <MX_ADC2_Init+0x204>)
 8006356:	4a72      	ldr	r2, [pc, #456]	; (8006520 <MX_ADC2_Init+0x20c>)
 8006358:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800635a:	4b6f      	ldr	r3, [pc, #444]	; (8006518 <MX_ADC2_Init+0x204>)
 800635c:	2200      	movs	r2, #0
 800635e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006360:	4b6d      	ldr	r3, [pc, #436]	; (8006518 <MX_ADC2_Init+0x204>)
 8006362:	220e      	movs	r2, #14
 8006364:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006366:	4b6c      	ldr	r3, [pc, #432]	; (8006518 <MX_ADC2_Init+0x204>)
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800636e:	4b6a      	ldr	r3, [pc, #424]	; (8006518 <MX_ADC2_Init+0x204>)
 8006370:	2201      	movs	r2, #1
 8006372:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006374:	4868      	ldr	r0, [pc, #416]	; (8006518 <MX_ADC2_Init+0x204>)
 8006376:	f003 fdf5 	bl	8009f64 <HAL_ADC_Init>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006380:	f000 fe10 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006384:	230a      	movs	r3, #10
 8006386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006388:	2301      	movs	r3, #1
 800638a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800638c:	2306      	movs	r3, #6
 800638e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006390:	463b      	mov	r3, r7
 8006392:	4619      	mov	r1, r3
 8006394:	4860      	ldr	r0, [pc, #384]	; (8006518 <MX_ADC2_Init+0x204>)
 8006396:	f003 ff39 	bl	800a20c <HAL_ADC_ConfigChannel>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80063a0:	f000 fe00 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80063a4:	230b      	movs	r3, #11
 80063a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80063a8:	2302      	movs	r3, #2
 80063aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063ac:	463b      	mov	r3, r7
 80063ae:	4619      	mov	r1, r3
 80063b0:	4859      	ldr	r0, [pc, #356]	; (8006518 <MX_ADC2_Init+0x204>)
 80063b2:	f003 ff2b 	bl	800a20c <HAL_ADC_ConfigChannel>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80063bc:	f000 fdf2 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80063c0:	230c      	movs	r3, #12
 80063c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80063c4:	2303      	movs	r3, #3
 80063c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063c8:	463b      	mov	r3, r7
 80063ca:	4619      	mov	r1, r3
 80063cc:	4852      	ldr	r0, [pc, #328]	; (8006518 <MX_ADC2_Init+0x204>)
 80063ce:	f003 ff1d 	bl	800a20c <HAL_ADC_ConfigChannel>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80063d8:	f000 fde4 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80063dc:	230d      	movs	r3, #13
 80063de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80063e0:	2304      	movs	r3, #4
 80063e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063e4:	463b      	mov	r3, r7
 80063e6:	4619      	mov	r1, r3
 80063e8:	484b      	ldr	r0, [pc, #300]	; (8006518 <MX_ADC2_Init+0x204>)
 80063ea:	f003 ff0f 	bl	800a20c <HAL_ADC_ConfigChannel>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80063f4:	f000 fdd6 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80063fc:	2305      	movs	r3, #5
 80063fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006400:	463b      	mov	r3, r7
 8006402:	4619      	mov	r1, r3
 8006404:	4844      	ldr	r0, [pc, #272]	; (8006518 <MX_ADC2_Init+0x204>)
 8006406:	f003 ff01 	bl	800a20c <HAL_ADC_ConfigChannel>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006410:	f000 fdc8 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006414:	2301      	movs	r3, #1
 8006416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006418:	2306      	movs	r3, #6
 800641a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800641c:	463b      	mov	r3, r7
 800641e:	4619      	mov	r1, r3
 8006420:	483d      	ldr	r0, [pc, #244]	; (8006518 <MX_ADC2_Init+0x204>)
 8006422:	f003 fef3 	bl	800a20c <HAL_ADC_ConfigChannel>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800642c:	f000 fdba 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006430:	2302      	movs	r3, #2
 8006432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006434:	2307      	movs	r3, #7
 8006436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006438:	463b      	mov	r3, r7
 800643a:	4619      	mov	r1, r3
 800643c:	4836      	ldr	r0, [pc, #216]	; (8006518 <MX_ADC2_Init+0x204>)
 800643e:	f003 fee5 	bl	800a20c <HAL_ADC_ConfigChannel>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006448:	f000 fdac 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800644c:	2303      	movs	r3, #3
 800644e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006450:	2308      	movs	r3, #8
 8006452:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006454:	463b      	mov	r3, r7
 8006456:	4619      	mov	r1, r3
 8006458:	482f      	ldr	r0, [pc, #188]	; (8006518 <MX_ADC2_Init+0x204>)
 800645a:	f003 fed7 	bl	800a20c <HAL_ADC_ConfigChannel>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006464:	f000 fd9e 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006468:	2304      	movs	r3, #4
 800646a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800646c:	2309      	movs	r3, #9
 800646e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006470:	463b      	mov	r3, r7
 8006472:	4619      	mov	r1, r3
 8006474:	4828      	ldr	r0, [pc, #160]	; (8006518 <MX_ADC2_Init+0x204>)
 8006476:	f003 fec9 	bl	800a20c <HAL_ADC_ConfigChannel>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006480:	f000 fd90 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006484:	2305      	movs	r3, #5
 8006486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006488:	230a      	movs	r3, #10
 800648a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800648c:	463b      	mov	r3, r7
 800648e:	4619      	mov	r1, r3
 8006490:	4821      	ldr	r0, [pc, #132]	; (8006518 <MX_ADC2_Init+0x204>)
 8006492:	f003 febb 	bl	800a20c <HAL_ADC_ConfigChannel>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800649c:	f000 fd82 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80064a0:	2306      	movs	r3, #6
 80064a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80064a4:	230b      	movs	r3, #11
 80064a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064a8:	463b      	mov	r3, r7
 80064aa:	4619      	mov	r1, r3
 80064ac:	481a      	ldr	r0, [pc, #104]	; (8006518 <MX_ADC2_Init+0x204>)
 80064ae:	f003 fead 	bl	800a20c <HAL_ADC_ConfigChannel>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80064b8:	f000 fd74 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80064bc:	2307      	movs	r3, #7
 80064be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80064c0:	230c      	movs	r3, #12
 80064c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064c4:	463b      	mov	r3, r7
 80064c6:	4619      	mov	r1, r3
 80064c8:	4813      	ldr	r0, [pc, #76]	; (8006518 <MX_ADC2_Init+0x204>)
 80064ca:	f003 fe9f 	bl	800a20c <HAL_ADC_ConfigChannel>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80064d4:	f000 fd66 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80064d8:	2308      	movs	r3, #8
 80064da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80064dc:	230d      	movs	r3, #13
 80064de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064e0:	463b      	mov	r3, r7
 80064e2:	4619      	mov	r1, r3
 80064e4:	480c      	ldr	r0, [pc, #48]	; (8006518 <MX_ADC2_Init+0x204>)
 80064e6:	f003 fe91 	bl	800a20c <HAL_ADC_ConfigChannel>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80064f0:	f000 fd58 	bl	8006fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80064f4:	2309      	movs	r3, #9
 80064f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80064f8:	230e      	movs	r3, #14
 80064fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80064fc:	463b      	mov	r3, r7
 80064fe:	4619      	mov	r1, r3
 8006500:	4805      	ldr	r0, [pc, #20]	; (8006518 <MX_ADC2_Init+0x204>)
 8006502:	f003 fe83 	bl	800a20c <HAL_ADC_ConfigChannel>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 800650c:	f000 fd4a 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	200448e8 	.word	0x200448e8
 800651c:	40012100 	.word	0x40012100
 8006520:	0f000001 	.word	0x0f000001

08006524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006528:	4b12      	ldr	r3, [pc, #72]	; (8006574 <MX_I2C1_Init+0x50>)
 800652a:	4a13      	ldr	r2, [pc, #76]	; (8006578 <MX_I2C1_Init+0x54>)
 800652c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <MX_I2C1_Init+0x50>)
 8006530:	4a12      	ldr	r2, [pc, #72]	; (800657c <MX_I2C1_Init+0x58>)
 8006532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006534:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <MX_I2C1_Init+0x50>)
 8006536:	2200      	movs	r2, #0
 8006538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800653a:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <MX_I2C1_Init+0x50>)
 800653c:	2200      	movs	r2, #0
 800653e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006540:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <MX_I2C1_Init+0x50>)
 8006542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <MX_I2C1_Init+0x50>)
 800654a:	2200      	movs	r2, #0
 800654c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <MX_I2C1_Init+0x50>)
 8006550:	2200      	movs	r2, #0
 8006552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006554:	4b07      	ldr	r3, [pc, #28]	; (8006574 <MX_I2C1_Init+0x50>)
 8006556:	2200      	movs	r2, #0
 8006558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <MX_I2C1_Init+0x50>)
 800655c:	2280      	movs	r2, #128	; 0x80
 800655e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006560:	4804      	ldr	r0, [pc, #16]	; (8006574 <MX_I2C1_Init+0x50>)
 8006562:	f004 ff8d 	bl	800b480 <HAL_I2C_Init>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800656c:	f000 fd1a 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006570:	bf00      	nop
 8006572:	bd80      	pop	{r7, pc}
 8006574:	20044930 	.word	0x20044930
 8006578:	40005400 	.word	0x40005400
 800657c:	000186a0 	.word	0x000186a0

08006580 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006584:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <MX_I2C2_Init+0x50>)
 8006586:	4a13      	ldr	r2, [pc, #76]	; (80065d4 <MX_I2C2_Init+0x54>)
 8006588:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800658a:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <MX_I2C2_Init+0x50>)
 800658c:	4a12      	ldr	r2, [pc, #72]	; (80065d8 <MX_I2C2_Init+0x58>)
 800658e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006590:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <MX_I2C2_Init+0x50>)
 8006592:	2200      	movs	r2, #0
 8006594:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006596:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <MX_I2C2_Init+0x50>)
 8006598:	2200      	movs	r2, #0
 800659a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800659c:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <MX_I2C2_Init+0x50>)
 800659e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <MX_I2C2_Init+0x50>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80065aa:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <MX_I2C2_Init+0x50>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <MX_I2C2_Init+0x50>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <MX_I2C2_Init+0x50>)
 80065b8:	2280      	movs	r2, #128	; 0x80
 80065ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80065bc:	4804      	ldr	r0, [pc, #16]	; (80065d0 <MX_I2C2_Init+0x50>)
 80065be:	f004 ff5f 	bl	800b480 <HAL_I2C_Init>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80065c8:	f000 fcec 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80065cc:	bf00      	nop
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	200449c4 	.word	0x200449c4
 80065d4:	40005800 	.word	0x40005800
 80065d8:	000186a0 	.word	0x000186a0

080065dc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <MX_SDIO_SD_Init+0x38>)
 80065e2:	4a0d      	ldr	r2, [pc, #52]	; (8006618 <MX_SDIO_SD_Init+0x3c>)
 80065e4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80065e6:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <MX_SDIO_SD_Init+0x38>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80065ec:	4b09      	ldr	r3, [pc, #36]	; (8006614 <MX_SDIO_SD_Init+0x38>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80065f2:	4b08      	ldr	r3, [pc, #32]	; (8006614 <MX_SDIO_SD_Init+0x38>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80065f8:	4b06      	ldr	r3, [pc, #24]	; (8006614 <MX_SDIO_SD_Init+0x38>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80065fe:	4b05      	ldr	r3, [pc, #20]	; (8006614 <MX_SDIO_SD_Init+0x38>)
 8006600:	2200      	movs	r2, #0
 8006602:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8006604:	4b03      	ldr	r3, [pc, #12]	; (8006614 <MX_SDIO_SD_Init+0x38>)
 8006606:	2202      	movs	r2, #2
 8006608:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800660a:	bf00      	nop
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	20044bc4 	.word	0x20044bc4
 8006618:	40012c00 	.word	0x40012c00

0800661c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006620:	4b17      	ldr	r3, [pc, #92]	; (8006680 <MX_SPI2_Init+0x64>)
 8006622:	4a18      	ldr	r2, [pc, #96]	; (8006684 <MX_SPI2_Init+0x68>)
 8006624:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006626:	4b16      	ldr	r3, [pc, #88]	; (8006680 <MX_SPI2_Init+0x64>)
 8006628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800662c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <MX_SPI2_Init+0x64>)
 8006630:	2200      	movs	r2, #0
 8006632:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006634:	4b12      	ldr	r3, [pc, #72]	; (8006680 <MX_SPI2_Init+0x64>)
 8006636:	2200      	movs	r2, #0
 8006638:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <MX_SPI2_Init+0x64>)
 800663c:	2202      	movs	r2, #2
 800663e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006640:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <MX_SPI2_Init+0x64>)
 8006642:	2201      	movs	r2, #1
 8006644:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006646:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <MX_SPI2_Init+0x64>)
 8006648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800664c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800664e:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <MX_SPI2_Init+0x64>)
 8006650:	2228      	movs	r2, #40	; 0x28
 8006652:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006654:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <MX_SPI2_Init+0x64>)
 8006656:	2200      	movs	r2, #0
 8006658:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800665a:	4b09      	ldr	r3, [pc, #36]	; (8006680 <MX_SPI2_Init+0x64>)
 800665c:	2200      	movs	r2, #0
 800665e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <MX_SPI2_Init+0x64>)
 8006662:	2200      	movs	r2, #0
 8006664:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006666:	4b06      	ldr	r3, [pc, #24]	; (8006680 <MX_SPI2_Init+0x64>)
 8006668:	220a      	movs	r2, #10
 800666a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800666c:	4804      	ldr	r0, [pc, #16]	; (8006680 <MX_SPI2_Init+0x64>)
 800666e:	f008 f839 	bl	800e6e4 <HAL_SPI_Init>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006678:	f000 fc94 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800667c:	bf00      	nop
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20044810 	.word	0x20044810
 8006684:	40003800 	.word	0x40003800

08006688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b09a      	sub	sp, #104	; 0x68
 800668c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800668e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006692:	2224      	movs	r2, #36	; 0x24
 8006694:	2100      	movs	r1, #0
 8006696:	4618      	mov	r0, r3
 8006698:	f00f f9b6 	bl	8015a08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800669c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066a6:	f107 0320 	add.w	r3, r7, #32
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	605a      	str	r2, [r3, #4]
 80066b0:	609a      	str	r2, [r3, #8]
 80066b2:	60da      	str	r2, [r3, #12]
 80066b4:	611a      	str	r2, [r3, #16]
 80066b6:	615a      	str	r2, [r3, #20]
 80066b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80066ba:	463b      	mov	r3, r7
 80066bc:	2220      	movs	r2, #32
 80066be:	2100      	movs	r1, #0
 80066c0:	4618      	mov	r0, r3
 80066c2:	f00f f9a1 	bl	8015a08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80066c6:	4b42      	ldr	r3, [pc, #264]	; (80067d0 <MX_TIM1_Init+0x148>)
 80066c8:	4a42      	ldr	r2, [pc, #264]	; (80067d4 <MX_TIM1_Init+0x14c>)
 80066ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80066cc:	4b40      	ldr	r3, [pc, #256]	; (80067d0 <MX_TIM1_Init+0x148>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066d2:	4b3f      	ldr	r3, [pc, #252]	; (80067d0 <MX_TIM1_Init+0x148>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80066d8:	4b3d      	ldr	r3, [pc, #244]	; (80067d0 <MX_TIM1_Init+0x148>)
 80066da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066e0:	4b3b      	ldr	r3, [pc, #236]	; (80067d0 <MX_TIM1_Init+0x148>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80066e6:	4b3a      	ldr	r3, [pc, #232]	; (80067d0 <MX_TIM1_Init+0x148>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066ec:	4b38      	ldr	r3, [pc, #224]	; (80067d0 <MX_TIM1_Init+0x148>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80066f2:	4837      	ldr	r0, [pc, #220]	; (80067d0 <MX_TIM1_Init+0x148>)
 80066f4:	f008 fd99 	bl	800f22a <HAL_TIM_PWM_Init>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80066fe:	f000 fc51 	bl	8006fa4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006702:	2303      	movs	r3, #3
 8006704:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006706:	2300      	movs	r3, #0
 8006708:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800670a:	2301      	movs	r3, #1
 800670c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800670e:	2300      	movs	r3, #0
 8006710:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006716:	2300      	movs	r3, #0
 8006718:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800671a:	2301      	movs	r3, #1
 800671c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800671e:	2300      	movs	r3, #0
 8006720:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006726:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800672a:	4619      	mov	r1, r3
 800672c:	4828      	ldr	r0, [pc, #160]	; (80067d0 <MX_TIM1_Init+0x148>)
 800672e:	f008 fde5 	bl	800f2fc <HAL_TIM_Encoder_Init>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006738:	f000 fc34 	bl	8006fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800673c:	2300      	movs	r3, #0
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006740:	2300      	movs	r3, #0
 8006742:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006744:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006748:	4619      	mov	r1, r3
 800674a:	4821      	ldr	r0, [pc, #132]	; (80067d0 <MX_TIM1_Init+0x148>)
 800674c:	f009 fb0c 	bl	800fd68 <HAL_TIMEx_MasterConfigSynchronization>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006756:	f000 fc25 	bl	8006fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800675a:	2360      	movs	r3, #96	; 0x60
 800675c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006762:	2300      	movs	r3, #0
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006766:	2300      	movs	r3, #0
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800676a:	2300      	movs	r3, #0
 800676c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800676e:	2300      	movs	r3, #0
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006772:	2300      	movs	r3, #0
 8006774:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006776:	f107 0320 	add.w	r3, r7, #32
 800677a:	2208      	movs	r2, #8
 800677c:	4619      	mov	r1, r3
 800677e:	4814      	ldr	r0, [pc, #80]	; (80067d0 <MX_TIM1_Init+0x148>)
 8006780:	f008 ff8e 	bl	800f6a0 <HAL_TIM_PWM_ConfigChannel>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800678a:	f000 fc0b 	bl	8006fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800678e:	2300      	movs	r3, #0
 8006790:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006792:	2300      	movs	r3, #0
 8006794:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006796:	2300      	movs	r3, #0
 8006798:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80067a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80067ac:	463b      	mov	r3, r7
 80067ae:	4619      	mov	r1, r3
 80067b0:	4807      	ldr	r0, [pc, #28]	; (80067d0 <MX_TIM1_Init+0x148>)
 80067b2:	f009 fb55 	bl	800fe60 <HAL_TIMEx_ConfigBreakDeadTime>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80067bc:	f000 fbf2 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80067c0:	4803      	ldr	r0, [pc, #12]	; (80067d0 <MX_TIM1_Init+0x148>)
 80067c2:	f000 ffdf 	bl	8007784 <HAL_TIM_MspPostInit>

}
 80067c6:	bf00      	nop
 80067c8:	3768      	adds	r7, #104	; 0x68
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20044b84 	.word	0x20044b84
 80067d4:	40010000 	.word	0x40010000

080067d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	; 0x28
 80067dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067de:	f107 0320 	add.w	r3, r7, #32
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80067e8:	1d3b      	adds	r3, r7, #4
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	609a      	str	r2, [r3, #8]
 80067f2:	60da      	str	r2, [r3, #12]
 80067f4:	611a      	str	r2, [r3, #16]
 80067f6:	615a      	str	r2, [r3, #20]
 80067f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80067fa:	4b27      	ldr	r3, [pc, #156]	; (8006898 <MX_TIM3_Init+0xc0>)
 80067fc:	4a27      	ldr	r2, [pc, #156]	; (800689c <MX_TIM3_Init+0xc4>)
 80067fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <MX_TIM3_Init+0xc0>)
 8006802:	2201      	movs	r2, #1
 8006804:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006806:	4b24      	ldr	r3, [pc, #144]	; (8006898 <MX_TIM3_Init+0xc0>)
 8006808:	2200      	movs	r2, #0
 800680a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 800680c:	4b22      	ldr	r3, [pc, #136]	; (8006898 <MX_TIM3_Init+0xc0>)
 800680e:	f241 1293 	movw	r2, #4499	; 0x1193
 8006812:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006814:	4b20      	ldr	r3, [pc, #128]	; (8006898 <MX_TIM3_Init+0xc0>)
 8006816:	2200      	movs	r2, #0
 8006818:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800681a:	4b1f      	ldr	r3, [pc, #124]	; (8006898 <MX_TIM3_Init+0xc0>)
 800681c:	2200      	movs	r2, #0
 800681e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006820:	481d      	ldr	r0, [pc, #116]	; (8006898 <MX_TIM3_Init+0xc0>)
 8006822:	f008 fd02 	bl	800f22a <HAL_TIM_PWM_Init>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800682c:	f000 fbba 	bl	8006fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006830:	2300      	movs	r3, #0
 8006832:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006834:	2300      	movs	r3, #0
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006838:	f107 0320 	add.w	r3, r7, #32
 800683c:	4619      	mov	r1, r3
 800683e:	4816      	ldr	r0, [pc, #88]	; (8006898 <MX_TIM3_Init+0xc0>)
 8006840:	f009 fa92 	bl	800fd68 <HAL_TIMEx_MasterConfigSynchronization>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800684a:	f000 fbab 	bl	8006fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800684e:	2360      	movs	r3, #96	; 0x60
 8006850:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800685e:	1d3b      	adds	r3, r7, #4
 8006860:	2200      	movs	r2, #0
 8006862:	4619      	mov	r1, r3
 8006864:	480c      	ldr	r0, [pc, #48]	; (8006898 <MX_TIM3_Init+0xc0>)
 8006866:	f008 ff1b 	bl	800f6a0 <HAL_TIM_PWM_ConfigChannel>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006870:	f000 fb98 	bl	8006fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006874:	1d3b      	adds	r3, r7, #4
 8006876:	2204      	movs	r2, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4807      	ldr	r0, [pc, #28]	; (8006898 <MX_TIM3_Init+0xc0>)
 800687c:	f008 ff10 	bl	800f6a0 <HAL_TIM_PWM_ConfigChannel>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006886:	f000 fb8d 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800688a:	4803      	ldr	r0, [pc, #12]	; (8006898 <MX_TIM3_Init+0xc0>)
 800688c:	f000 ff7a 	bl	8007784 <HAL_TIM_MspPostInit>

}
 8006890:	bf00      	nop
 8006892:	3728      	adds	r7, #40	; 0x28
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20044a1c 	.word	0x20044a1c
 800689c:	40000400 	.word	0x40000400

080068a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	; 0x28
 80068a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068a6:	f107 0320 	add.w	r3, r7, #32
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	609a      	str	r2, [r3, #8]
 80068ba:	60da      	str	r2, [r3, #12]
 80068bc:	611a      	str	r2, [r3, #16]
 80068be:	615a      	str	r2, [r3, #20]
 80068c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80068c2:	4b27      	ldr	r3, [pc, #156]	; (8006960 <MX_TIM4_Init+0xc0>)
 80068c4:	4a27      	ldr	r2, [pc, #156]	; (8006964 <MX_TIM4_Init+0xc4>)
 80068c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80068c8:	4b25      	ldr	r3, [pc, #148]	; (8006960 <MX_TIM4_Init+0xc0>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068ce:	4b24      	ldr	r3, [pc, #144]	; (8006960 <MX_TIM4_Init+0xc0>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80068d4:	4b22      	ldr	r3, [pc, #136]	; (8006960 <MX_TIM4_Init+0xc0>)
 80068d6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80068da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068dc:	4b20      	ldr	r3, [pc, #128]	; (8006960 <MX_TIM4_Init+0xc0>)
 80068de:	2200      	movs	r2, #0
 80068e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068e2:	4b1f      	ldr	r3, [pc, #124]	; (8006960 <MX_TIM4_Init+0xc0>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80068e8:	481d      	ldr	r0, [pc, #116]	; (8006960 <MX_TIM4_Init+0xc0>)
 80068ea:	f008 fc9e 	bl	800f22a <HAL_TIM_PWM_Init>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80068f4:	f000 fb56 	bl	8006fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068f8:	2300      	movs	r3, #0
 80068fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006900:	f107 0320 	add.w	r3, r7, #32
 8006904:	4619      	mov	r1, r3
 8006906:	4816      	ldr	r0, [pc, #88]	; (8006960 <MX_TIM4_Init+0xc0>)
 8006908:	f009 fa2e 	bl	800fd68 <HAL_TIMEx_MasterConfigSynchronization>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006912:	f000 fb47 	bl	8006fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006916:	2360      	movs	r3, #96	; 0x60
 8006918:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006926:	1d3b      	adds	r3, r7, #4
 8006928:	2208      	movs	r2, #8
 800692a:	4619      	mov	r1, r3
 800692c:	480c      	ldr	r0, [pc, #48]	; (8006960 <MX_TIM4_Init+0xc0>)
 800692e:	f008 feb7 	bl	800f6a0 <HAL_TIM_PWM_ConfigChannel>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006938:	f000 fb34 	bl	8006fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800693c:	1d3b      	adds	r3, r7, #4
 800693e:	220c      	movs	r2, #12
 8006940:	4619      	mov	r1, r3
 8006942:	4807      	ldr	r0, [pc, #28]	; (8006960 <MX_TIM4_Init+0xc0>)
 8006944:	f008 feac 	bl	800f6a0 <HAL_TIM_PWM_ConfigChannel>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800694e:	f000 fb29 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006952:	4803      	ldr	r0, [pc, #12]	; (8006960 <MX_TIM4_Init+0xc0>)
 8006954:	f000 ff16 	bl	8007784 <HAL_TIM_MspPostInit>

}
 8006958:	bf00      	nop
 800695a:	3728      	adds	r7, #40	; 0x28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	200448a8 	.word	0x200448a8
 8006964:	40000800 	.word	0x40000800

08006968 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800696e:	463b      	mov	r3, r7
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006976:	4b15      	ldr	r3, [pc, #84]	; (80069cc <MX_TIM6_Init+0x64>)
 8006978:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <MX_TIM6_Init+0x68>)
 800697a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800697c:	4b13      	ldr	r3, [pc, #76]	; (80069cc <MX_TIM6_Init+0x64>)
 800697e:	2259      	movs	r2, #89	; 0x59
 8006980:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <MX_TIM6_Init+0x64>)
 8006984:	2200      	movs	r2, #0
 8006986:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006988:	4b10      	ldr	r3, [pc, #64]	; (80069cc <MX_TIM6_Init+0x64>)
 800698a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800698e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006990:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <MX_TIM6_Init+0x64>)
 8006992:	2280      	movs	r2, #128	; 0x80
 8006994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006996:	480d      	ldr	r0, [pc, #52]	; (80069cc <MX_TIM6_Init+0x64>)
 8006998:	f008 fbf8 	bl	800f18c <HAL_TIM_Base_Init>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80069a2:	f000 faff 	bl	8006fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069a6:	2300      	movs	r3, #0
 80069a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80069ae:	463b      	mov	r3, r7
 80069b0:	4619      	mov	r1, r3
 80069b2:	4806      	ldr	r0, [pc, #24]	; (80069cc <MX_TIM6_Init+0x64>)
 80069b4:	f009 f9d8 	bl	800fd68 <HAL_TIMEx_MasterConfigSynchronization>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80069be:	f000 faf1 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20044b44 	.word	0x20044b44
 80069d0:	40001000 	.word	0x40001000

080069d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069da:	463b      	mov	r3, r7
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80069e2:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <MX_TIM7_Init+0x60>)
 80069e4:	4a14      	ldr	r2, [pc, #80]	; (8006a38 <MX_TIM7_Init+0x64>)
 80069e6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80069e8:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <MX_TIM7_Init+0x60>)
 80069ea:	22b3      	movs	r2, #179	; 0xb3
 80069ec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069ee:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <MX_TIM7_Init+0x60>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80069f4:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <MX_TIM7_Init+0x60>)
 80069f6:	2231      	movs	r2, #49	; 0x31
 80069f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80069fa:	4b0e      	ldr	r3, [pc, #56]	; (8006a34 <MX_TIM7_Init+0x60>)
 80069fc:	2280      	movs	r2, #128	; 0x80
 80069fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006a00:	480c      	ldr	r0, [pc, #48]	; (8006a34 <MX_TIM7_Init+0x60>)
 8006a02:	f008 fbc3 	bl	800f18c <HAL_TIM_Base_Init>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006a0c:	f000 faca 	bl	8006fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a10:	2300      	movs	r3, #0
 8006a12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006a18:	463b      	mov	r3, r7
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4805      	ldr	r0, [pc, #20]	; (8006a34 <MX_TIM7_Init+0x60>)
 8006a1e:	f009 f9a3 	bl	800fd68 <HAL_TIMEx_MasterConfigSynchronization>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006a28:	f000 fabc 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20044ce8 	.word	0x20044ce8
 8006a38:	40001400 	.word	0x40001400

08006a3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006a42:	f107 030c 	add.w	r3, r7, #12
 8006a46:	2224      	movs	r2, #36	; 0x24
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f00e ffdc 	bl	8015a08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a50:	1d3b      	adds	r3, r7, #4
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006a58:	4b22      	ldr	r3, [pc, #136]	; (8006ae4 <MX_TIM8_Init+0xa8>)
 8006a5a:	4a23      	ldr	r2, [pc, #140]	; (8006ae8 <MX_TIM8_Init+0xac>)
 8006a5c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006a5e:	4b21      	ldr	r3, [pc, #132]	; (8006ae4 <MX_TIM8_Init+0xa8>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006a64:	4b1f      	ldr	r3, [pc, #124]	; (8006ae4 <MX_TIM8_Init+0xa8>)
 8006a66:	2210      	movs	r2, #16
 8006a68:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006a6a:	4b1e      	ldr	r3, [pc, #120]	; (8006ae4 <MX_TIM8_Init+0xa8>)
 8006a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a72:	4b1c      	ldr	r3, [pc, #112]	; (8006ae4 <MX_TIM8_Init+0xa8>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006a78:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <MX_TIM8_Init+0xa8>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a7e:	4b19      	ldr	r3, [pc, #100]	; (8006ae4 <MX_TIM8_Init+0xa8>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006a84:	2303      	movs	r3, #3
 8006a86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006a90:	2300      	movs	r3, #0
 8006a92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006aa8:	f107 030c 	add.w	r3, r7, #12
 8006aac:	4619      	mov	r1, r3
 8006aae:	480d      	ldr	r0, [pc, #52]	; (8006ae4 <MX_TIM8_Init+0xa8>)
 8006ab0:	f008 fc24 	bl	800f2fc <HAL_TIM_Encoder_Init>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006aba:	f000 fa73 	bl	8006fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006ac6:	1d3b      	adds	r3, r7, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4806      	ldr	r0, [pc, #24]	; (8006ae4 <MX_TIM8_Init+0xa8>)
 8006acc:	f009 f94c 	bl	800fd68 <HAL_TIMEx_MasterConfigSynchronization>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006ad6:	f000 fa65 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006ada:	bf00      	nop
 8006adc:	3730      	adds	r7, #48	; 0x30
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20044868 	.word	0x20044868
 8006ae8:	40010400 	.word	0x40010400

08006aec <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006af2:	1d3b      	adds	r3, r7, #4
 8006af4:	2200      	movs	r2, #0
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	605a      	str	r2, [r3, #4]
 8006afa:	609a      	str	r2, [r3, #8]
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	611a      	str	r2, [r3, #16]
 8006b00:	615a      	str	r2, [r3, #20]
 8006b02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006b04:	4b1e      	ldr	r3, [pc, #120]	; (8006b80 <MX_TIM10_Init+0x94>)
 8006b06:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <MX_TIM10_Init+0x98>)
 8006b08:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006b0a:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <MX_TIM10_Init+0x94>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b10:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <MX_TIM10_Init+0x94>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006b16:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <MX_TIM10_Init+0x94>)
 8006b18:	f242 3227 	movw	r2, #8999	; 0x2327
 8006b1c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b1e:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <MX_TIM10_Init+0x94>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b24:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <MX_TIM10_Init+0x94>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006b2a:	4815      	ldr	r0, [pc, #84]	; (8006b80 <MX_TIM10_Init+0x94>)
 8006b2c:	f008 fb2e 	bl	800f18c <HAL_TIM_Base_Init>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006b36:	f000 fa35 	bl	8006fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006b3a:	4811      	ldr	r0, [pc, #68]	; (8006b80 <MX_TIM10_Init+0x94>)
 8006b3c:	f008 fb75 	bl	800f22a <HAL_TIM_PWM_Init>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006b46:	f000 fa2d 	bl	8006fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b4a:	2360      	movs	r3, #96	; 0x60
 8006b4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b5a:	1d3b      	adds	r3, r7, #4
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4807      	ldr	r0, [pc, #28]	; (8006b80 <MX_TIM10_Init+0x94>)
 8006b62:	f008 fd9d 	bl	800f6a0 <HAL_TIM_PWM_ConfigChannel>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006b6c:	f000 fa1a 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006b70:	4803      	ldr	r0, [pc, #12]	; (8006b80 <MX_TIM10_Init+0x94>)
 8006b72:	f000 fe07 	bl	8007784 <HAL_TIM_MspPostInit>

}
 8006b76:	bf00      	nop
 8006b78:	3720      	adds	r7, #32
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20044984 	.word	0x20044984
 8006b84:	40014400 	.word	0x40014400

08006b88 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b8e:	1d3b      	adds	r3, r7, #4
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	605a      	str	r2, [r3, #4]
 8006b96:	609a      	str	r2, [r3, #8]
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	611a      	str	r2, [r3, #16]
 8006b9c:	615a      	str	r2, [r3, #20]
 8006b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006ba0:	4b1e      	ldr	r3, [pc, #120]	; (8006c1c <MX_TIM11_Init+0x94>)
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <MX_TIM11_Init+0x98>)
 8006ba4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006ba6:	4b1d      	ldr	r3, [pc, #116]	; (8006c1c <MX_TIM11_Init+0x94>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bac:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <MX_TIM11_Init+0x94>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006bb2:	4b1a      	ldr	r3, [pc, #104]	; (8006c1c <MX_TIM11_Init+0x94>)
 8006bb4:	f242 3227 	movw	r2, #8999	; 0x2327
 8006bb8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bba:	4b18      	ldr	r3, [pc, #96]	; (8006c1c <MX_TIM11_Init+0x94>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bc0:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <MX_TIM11_Init+0x94>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006bc6:	4815      	ldr	r0, [pc, #84]	; (8006c1c <MX_TIM11_Init+0x94>)
 8006bc8:	f008 fae0 	bl	800f18c <HAL_TIM_Base_Init>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006bd2:	f000 f9e7 	bl	8006fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006bd6:	4811      	ldr	r0, [pc, #68]	; (8006c1c <MX_TIM11_Init+0x94>)
 8006bd8:	f008 fb27 	bl	800f22a <HAL_TIM_PWM_Init>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006be2:	f000 f9df 	bl	8006fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006be6:	2360      	movs	r3, #96	; 0x60
 8006be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4807      	ldr	r0, [pc, #28]	; (8006c1c <MX_TIM11_Init+0x94>)
 8006bfe:	f008 fd4f 	bl	800f6a0 <HAL_TIM_PWM_ConfigChannel>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006c08:	f000 f9cc 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006c0c:	4803      	ldr	r0, [pc, #12]	; (8006c1c <MX_TIM11_Init+0x94>)
 8006c0e:	f000 fdb9 	bl	8007784 <HAL_TIM_MspPostInit>

}
 8006c12:	bf00      	nop
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20044aa4 	.word	0x20044aa4
 8006c20:	40014800 	.word	0x40014800

08006c24 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006c28:	4b0e      	ldr	r3, [pc, #56]	; (8006c64 <MX_TIM13_Init+0x40>)
 8006c2a:	4a0f      	ldr	r2, [pc, #60]	; (8006c68 <MX_TIM13_Init+0x44>)
 8006c2c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <MX_TIM13_Init+0x40>)
 8006c30:	2259      	movs	r2, #89	; 0x59
 8006c32:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c34:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <MX_TIM13_Init+0x40>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006c3a:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <MX_TIM13_Init+0x40>)
 8006c3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006c40:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c42:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <MX_TIM13_Init+0x40>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006c48:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <MX_TIM13_Init+0x40>)
 8006c4a:	2280      	movs	r2, #128	; 0x80
 8006c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006c4e:	4805      	ldr	r0, [pc, #20]	; (8006c64 <MX_TIM13_Init+0x40>)
 8006c50:	f008 fa9c 	bl	800f18c <HAL_TIM_Base_Init>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006c5a:	f000 f9a3 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006c5e:	bf00      	nop
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20044a64 	.word	0x20044a64
 8006c68:	40001c00 	.word	0x40001c00

08006c6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006c70:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <MX_USART2_UART_Init+0x4c>)
 8006c72:	4a12      	ldr	r2, [pc, #72]	; (8006cbc <MX_USART2_UART_Init+0x50>)
 8006c74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006c76:	4b10      	ldr	r3, [pc, #64]	; (8006cb8 <MX_USART2_UART_Init+0x4c>)
 8006c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <MX_USART2_UART_Init+0x4c>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <MX_USART2_UART_Init+0x4c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	; (8006cb8 <MX_USART2_UART_Init+0x4c>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006c90:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <MX_USART2_UART_Init+0x4c>)
 8006c92:	220c      	movs	r2, #12
 8006c94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c96:	4b08      	ldr	r3, [pc, #32]	; (8006cb8 <MX_USART2_UART_Init+0x4c>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <MX_USART2_UART_Init+0x4c>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006ca2:	4805      	ldr	r0, [pc, #20]	; (8006cb8 <MX_USART2_UART_Init+0x4c>)
 8006ca4:	f009 f942 	bl	800ff2c <HAL_UART_Init>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006cae:	f000 f979 	bl	8006fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006cb2:	bf00      	nop
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20044c48 	.word	0x20044c48
 8006cbc:	40004400 	.word	0x40004400

08006cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	607b      	str	r3, [r7, #4]
 8006cca:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <MX_DMA_Init+0x5c>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	4a13      	ldr	r2, [pc, #76]	; (8006d1c <MX_DMA_Init+0x5c>)
 8006cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cd6:	4b11      	ldr	r3, [pc, #68]	; (8006d1c <MX_DMA_Init+0x5c>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cde:	607b      	str	r3, [r7, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	203a      	movs	r0, #58	; 0x3a
 8006ce8:	f003 fe1b 	bl	800a922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006cec:	203a      	movs	r0, #58	; 0x3a
 8006cee:	f003 fe34 	bl	800a95a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	203b      	movs	r0, #59	; 0x3b
 8006cf8:	f003 fe13 	bl	800a922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006cfc:	203b      	movs	r0, #59	; 0x3b
 8006cfe:	f003 fe2c 	bl	800a95a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006d02:	2200      	movs	r2, #0
 8006d04:	2100      	movs	r1, #0
 8006d06:	2045      	movs	r0, #69	; 0x45
 8006d08:	f003 fe0b 	bl	800a922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006d0c:	2045      	movs	r0, #69	; 0x45
 8006d0e:	f003 fe24 	bl	800a95a <HAL_NVIC_EnableIRQ>

}
 8006d12:	bf00      	nop
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40023800 	.word	0x40023800

08006d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08c      	sub	sp, #48	; 0x30
 8006d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d26:	f107 031c 	add.w	r3, r7, #28
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	605a      	str	r2, [r3, #4]
 8006d30:	609a      	str	r2, [r3, #8]
 8006d32:	60da      	str	r2, [r3, #12]
 8006d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d36:	2300      	movs	r3, #0
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	4b94      	ldr	r3, [pc, #592]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	4a93      	ldr	r2, [pc, #588]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d40:	f043 0310 	orr.w	r3, r3, #16
 8006d44:	6313      	str	r3, [r2, #48]	; 0x30
 8006d46:	4b91      	ldr	r3, [pc, #580]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	f003 0310 	and.w	r3, r3, #16
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	4b8d      	ldr	r3, [pc, #564]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	4a8c      	ldr	r2, [pc, #560]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d60:	6313      	str	r3, [r2, #48]	; 0x30
 8006d62:	4b8a      	ldr	r3, [pc, #552]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	4b86      	ldr	r3, [pc, #536]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	4a85      	ldr	r2, [pc, #532]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d78:	f043 0304 	orr.w	r3, r3, #4
 8006d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d7e:	4b83      	ldr	r3, [pc, #524]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	4b7f      	ldr	r3, [pc, #508]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	4a7e      	ldr	r2, [pc, #504]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	6313      	str	r3, [r2, #48]	; 0x30
 8006d9a:	4b7c      	ldr	r3, [pc, #496]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	4b78      	ldr	r3, [pc, #480]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dae:	4a77      	ldr	r2, [pc, #476]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006db0:	f043 0302 	orr.w	r3, r3, #2
 8006db4:	6313      	str	r3, [r2, #48]	; 0x30
 8006db6:	4b75      	ldr	r3, [pc, #468]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	4b71      	ldr	r3, [pc, #452]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dca:	4a70      	ldr	r2, [pc, #448]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006dcc:	f043 0308 	orr.w	r3, r3, #8
 8006dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006dd2:	4b6e      	ldr	r3, [pc, #440]	; (8006f8c <MX_GPIO_Init+0x26c>)
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	607b      	str	r3, [r7, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006dde:	2200      	movs	r2, #0
 8006de0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006de4:	486a      	ldr	r0, [pc, #424]	; (8006f90 <MX_GPIO_Init+0x270>)
 8006de6:	f004 fb31 	bl	800b44c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006dea:	2200      	movs	r2, #0
 8006dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006df0:	4868      	ldr	r0, [pc, #416]	; (8006f94 <MX_GPIO_Init+0x274>)
 8006df2:	f004 fb2b 	bl	800b44c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006df6:	2200      	movs	r2, #0
 8006df8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006dfc:	4866      	ldr	r0, [pc, #408]	; (8006f98 <MX_GPIO_Init+0x278>)
 8006dfe:	f004 fb25 	bl	800b44c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006e02:	2200      	movs	r2, #0
 8006e04:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006e08:	4864      	ldr	r0, [pc, #400]	; (8006f9c <MX_GPIO_Init+0x27c>)
 8006e0a:	f004 fb1f 	bl	800b44c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006e0e:	2304      	movs	r3, #4
 8006e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e12:	2300      	movs	r3, #0
 8006e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e1a:	f107 031c 	add.w	r3, r7, #28
 8006e1e:	4619      	mov	r1, r3
 8006e20:	485b      	ldr	r0, [pc, #364]	; (8006f90 <MX_GPIO_Init+0x270>)
 8006e22:	f004 f951 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006e26:	230f      	movs	r3, #15
 8006e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e32:	f107 031c 	add.w	r3, r7, #28
 8006e36:	4619      	mov	r1, r3
 8006e38:	4859      	ldr	r0, [pc, #356]	; (8006fa0 <MX_GPIO_Init+0x280>)
 8006e3a:	f004 f945 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006e3e:	23e1      	movs	r3, #225	; 0xe1
 8006e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e42:	2303      	movs	r3, #3
 8006e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e4a:	f107 031c 	add.w	r3, r7, #28
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4852      	ldr	r0, [pc, #328]	; (8006f9c <MX_GPIO_Init+0x27c>)
 8006e52:	f004 f939 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006e56:	2303      	movs	r3, #3
 8006e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e62:	f107 031c 	add.w	r3, r7, #28
 8006e66:	4619      	mov	r1, r3
 8006e68:	484a      	ldr	r0, [pc, #296]	; (8006f94 <MX_GPIO_Init+0x274>)
 8006e6a:	f004 f92d 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006e6e:	2304      	movs	r3, #4
 8006e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e72:	2300      	movs	r3, #0
 8006e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e76:	2301      	movs	r3, #1
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e7a:	f107 031c 	add.w	r3, r7, #28
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4844      	ldr	r0, [pc, #272]	; (8006f94 <MX_GPIO_Init+0x274>)
 8006e82:	f004 f921 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006e86:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e90:	2301      	movs	r3, #1
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e94:	f107 031c 	add.w	r3, r7, #28
 8006e98:	4619      	mov	r1, r3
 8006e9a:	483d      	ldr	r0, [pc, #244]	; (8006f90 <MX_GPIO_Init+0x270>)
 8006e9c:	f004 f914 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006ea0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006eb2:	f107 031c 	add.w	r3, r7, #28
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4835      	ldr	r0, [pc, #212]	; (8006f90 <MX_GPIO_Init+0x270>)
 8006eba:	f004 f905 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ed0:	f107 031c 	add.w	r3, r7, #28
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	482f      	ldr	r0, [pc, #188]	; (8006f94 <MX_GPIO_Init+0x274>)
 8006ed8:	f004 f8f6 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006eea:	f107 031c 	add.w	r3, r7, #28
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4829      	ldr	r0, [pc, #164]	; (8006f98 <MX_GPIO_Init+0x278>)
 8006ef2:	f004 f8e9 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006efc:	2301      	movs	r3, #1
 8006efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f04:	2300      	movs	r3, #0
 8006f06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f08:	f107 031c 	add.w	r3, r7, #28
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4822      	ldr	r0, [pc, #136]	; (8006f98 <MX_GPIO_Init+0x278>)
 8006f10:	f004 f8da 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f22:	2300      	movs	r3, #0
 8006f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f26:	f107 031c 	add.w	r3, r7, #28
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	481a      	ldr	r0, [pc, #104]	; (8006f98 <MX_GPIO_Init+0x278>)
 8006f2e:	f004 f8cb 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006f32:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006f36:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f40:	2300      	movs	r3, #0
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f44:	f107 031c 	add.w	r3, r7, #28
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4814      	ldr	r0, [pc, #80]	; (8006f9c <MX_GPIO_Init+0x27c>)
 8006f4c:	f004 f8bc 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f56:	2300      	movs	r3, #0
 8006f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f5e:	f107 031c 	add.w	r3, r7, #28
 8006f62:	4619      	mov	r1, r3
 8006f64:	480d      	ldr	r0, [pc, #52]	; (8006f9c <MX_GPIO_Init+0x27c>)
 8006f66:	f004 f8af 	bl	800b0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006f6a:	239b      	movs	r3, #155	; 0x9b
 8006f6c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f72:	2301      	movs	r3, #1
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f76:	f107 031c 	add.w	r3, r7, #28
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4806      	ldr	r0, [pc, #24]	; (8006f98 <MX_GPIO_Init+0x278>)
 8006f7e:	f004 f8a3 	bl	800b0c8 <HAL_GPIO_Init>

}
 8006f82:	bf00      	nop
 8006f84:	3730      	adds	r7, #48	; 0x30
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	40021000 	.word	0x40021000
 8006f94:	40020400 	.word	0x40020400
 8006f98:	40020c00 	.word	0x40020c00
 8006f9c:	40020000 	.word	0x40020000
 8006fa0:	40020800 	.word	0x40020800

08006fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006fa8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006faa:	e7fe      	b.n	8006faa <Error_Handler+0x6>

08006fac <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
	...

08006fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	4b10      	ldr	r3, [pc, #64]	; (8007008 <HAL_MspInit+0x4c>)
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fca:	4a0f      	ldr	r2, [pc, #60]	; (8007008 <HAL_MspInit+0x4c>)
 8006fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <HAL_MspInit+0x4c>)
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fde:	2300      	movs	r3, #0
 8006fe0:	603b      	str	r3, [r7, #0]
 8006fe2:	4b09      	ldr	r3, [pc, #36]	; (8007008 <HAL_MspInit+0x4c>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	4a08      	ldr	r2, [pc, #32]	; (8007008 <HAL_MspInit+0x4c>)
 8006fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fec:	6413      	str	r3, [r2, #64]	; 0x40
 8006fee:	4b06      	ldr	r3, [pc, #24]	; (8007008 <HAL_MspInit+0x4c>)
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40023800 	.word	0x40023800

0800700c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08c      	sub	sp, #48	; 0x30
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007014:	f107 031c 	add.w	r3, r7, #28
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	605a      	str	r2, [r3, #4]
 800701e:	609a      	str	r2, [r3, #8]
 8007020:	60da      	str	r2, [r3, #12]
 8007022:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a4a      	ldr	r2, [pc, #296]	; (8007154 <HAL_ADC_MspInit+0x148>)
 800702a:	4293      	cmp	r3, r2
 800702c:	f040 808e 	bne.w	800714c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007030:	2300      	movs	r3, #0
 8007032:	61bb      	str	r3, [r7, #24]
 8007034:	4b48      	ldr	r3, [pc, #288]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	4a47      	ldr	r2, [pc, #284]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 800703a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800703e:	6453      	str	r3, [r2, #68]	; 0x44
 8007040:	4b45      	ldr	r3, [pc, #276]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 8007042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	4b41      	ldr	r3, [pc, #260]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	4a40      	ldr	r2, [pc, #256]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 8007056:	f043 0304 	orr.w	r3, r3, #4
 800705a:	6313      	str	r3, [r2, #48]	; 0x30
 800705c:	4b3e      	ldr	r3, [pc, #248]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 800705e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007068:	2300      	movs	r3, #0
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	4b3a      	ldr	r3, [pc, #232]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	4a39      	ldr	r2, [pc, #228]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 8007072:	f043 0301 	orr.w	r3, r3, #1
 8007076:	6313      	str	r3, [r2, #48]	; 0x30
 8007078:	4b37      	ldr	r3, [pc, #220]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	4b33      	ldr	r3, [pc, #204]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 800708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708c:	4a32      	ldr	r2, [pc, #200]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 800708e:	f043 0302 	orr.w	r3, r3, #2
 8007092:	6313      	str	r3, [r2, #48]	; 0x30
 8007094:	4b30      	ldr	r3, [pc, #192]	; (8007158 <HAL_ADC_MspInit+0x14c>)
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80070a0:	230f      	movs	r3, #15
 80070a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070a4:	2303      	movs	r3, #3
 80070a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070ac:	f107 031c 	add.w	r3, r7, #28
 80070b0:	4619      	mov	r1, r3
 80070b2:	482a      	ldr	r0, [pc, #168]	; (800715c <HAL_ADC_MspInit+0x150>)
 80070b4:	f004 f808 	bl	800b0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80070b8:	23ff      	movs	r3, #255	; 0xff
 80070ba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070bc:	2303      	movs	r3, #3
 80070be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070c4:	f107 031c 	add.w	r3, r7, #28
 80070c8:	4619      	mov	r1, r3
 80070ca:	4825      	ldr	r0, [pc, #148]	; (8007160 <HAL_ADC_MspInit+0x154>)
 80070cc:	f003 fffc 	bl	800b0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80070d0:	2303      	movs	r3, #3
 80070d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070d4:	2303      	movs	r3, #3
 80070d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d8:	2300      	movs	r3, #0
 80070da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070dc:	f107 031c 	add.w	r3, r7, #28
 80070e0:	4619      	mov	r1, r3
 80070e2:	4820      	ldr	r0, [pc, #128]	; (8007164 <HAL_ADC_MspInit+0x158>)
 80070e4:	f003 fff0 	bl	800b0c8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80070e8:	4b1f      	ldr	r3, [pc, #124]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 80070ea:	4a20      	ldr	r2, [pc, #128]	; (800716c <HAL_ADC_MspInit+0x160>)
 80070ec:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80070ee:	4b1e      	ldr	r3, [pc, #120]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 80070f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070f4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070f6:	4b1c      	ldr	r3, [pc, #112]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80070fc:	4b1a      	ldr	r3, [pc, #104]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 80070fe:	2200      	movs	r2, #0
 8007100:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007102:	4b19      	ldr	r3, [pc, #100]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 8007104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007108:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800710a:	4b17      	ldr	r3, [pc, #92]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 800710c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007110:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 8007114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007118:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800711a:	4b13      	ldr	r3, [pc, #76]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 800711c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007120:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007122:	4b11      	ldr	r3, [pc, #68]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 8007124:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007128:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800712a:	4b0f      	ldr	r3, [pc, #60]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 800712c:	2200      	movs	r2, #0
 800712e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007130:	480d      	ldr	r0, [pc, #52]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 8007132:	f003 fc2d 	bl	800a990 <HAL_DMA_Init>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800713c:	f7ff ff32 	bl	8006fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a09      	ldr	r2, [pc, #36]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 8007144:	639a      	str	r2, [r3, #56]	; 0x38
 8007146:	4a08      	ldr	r2, [pc, #32]	; (8007168 <HAL_ADC_MspInit+0x15c>)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800714c:	bf00      	nop
 800714e:	3730      	adds	r7, #48	; 0x30
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40012100 	.word	0x40012100
 8007158:	40023800 	.word	0x40023800
 800715c:	40020800 	.word	0x40020800
 8007160:	40020000 	.word	0x40020000
 8007164:	40020400 	.word	0x40020400
 8007168:	20044c88 	.word	0x20044c88
 800716c:	40026440 	.word	0x40026440

08007170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08c      	sub	sp, #48	; 0x30
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007178:	f107 031c 	add.w	r3, r7, #28
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	605a      	str	r2, [r3, #4]
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	60da      	str	r2, [r3, #12]
 8007186:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a32      	ldr	r2, [pc, #200]	; (8007258 <HAL_I2C_MspInit+0xe8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d12c      	bne.n	80071ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007192:	2300      	movs	r3, #0
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	4b31      	ldr	r3, [pc, #196]	; (800725c <HAL_I2C_MspInit+0xec>)
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	4a30      	ldr	r2, [pc, #192]	; (800725c <HAL_I2C_MspInit+0xec>)
 800719c:	f043 0302 	orr.w	r3, r3, #2
 80071a0:	6313      	str	r3, [r2, #48]	; 0x30
 80071a2:	4b2e      	ldr	r3, [pc, #184]	; (800725c <HAL_I2C_MspInit+0xec>)
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80071ae:	23c0      	movs	r3, #192	; 0xc0
 80071b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071b2:	2312      	movs	r3, #18
 80071b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071b6:	2301      	movs	r3, #1
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ba:	2303      	movs	r3, #3
 80071bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80071be:	2304      	movs	r3, #4
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071c2:	f107 031c 	add.w	r3, r7, #28
 80071c6:	4619      	mov	r1, r3
 80071c8:	4825      	ldr	r0, [pc, #148]	; (8007260 <HAL_I2C_MspInit+0xf0>)
 80071ca:	f003 ff7d 	bl	800b0c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80071ce:	2300      	movs	r3, #0
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	4b22      	ldr	r3, [pc, #136]	; (800725c <HAL_I2C_MspInit+0xec>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	4a21      	ldr	r2, [pc, #132]	; (800725c <HAL_I2C_MspInit+0xec>)
 80071d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071dc:	6413      	str	r3, [r2, #64]	; 0x40
 80071de:	4b1f      	ldr	r3, [pc, #124]	; (800725c <HAL_I2C_MspInit+0xec>)
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80071ea:	e031      	b.n	8007250 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1c      	ldr	r2, [pc, #112]	; (8007264 <HAL_I2C_MspInit+0xf4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d12c      	bne.n	8007250 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	4b18      	ldr	r3, [pc, #96]	; (800725c <HAL_I2C_MspInit+0xec>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	4a17      	ldr	r2, [pc, #92]	; (800725c <HAL_I2C_MspInit+0xec>)
 8007200:	f043 0302 	orr.w	r3, r3, #2
 8007204:	6313      	str	r3, [r2, #48]	; 0x30
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <HAL_I2C_MspInit+0xec>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007212:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007218:	2312      	movs	r3, #18
 800721a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800721c:	2301      	movs	r3, #1
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007220:	2303      	movs	r3, #3
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007224:	2304      	movs	r3, #4
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007228:	f107 031c 	add.w	r3, r7, #28
 800722c:	4619      	mov	r1, r3
 800722e:	480c      	ldr	r0, [pc, #48]	; (8007260 <HAL_I2C_MspInit+0xf0>)
 8007230:	f003 ff4a 	bl	800b0c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	4b08      	ldr	r3, [pc, #32]	; (800725c <HAL_I2C_MspInit+0xec>)
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	4a07      	ldr	r2, [pc, #28]	; (800725c <HAL_I2C_MspInit+0xec>)
 800723e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007242:	6413      	str	r3, [r2, #64]	; 0x40
 8007244:	4b05      	ldr	r3, [pc, #20]	; (800725c <HAL_I2C_MspInit+0xec>)
 8007246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
}
 8007250:	bf00      	nop
 8007252:	3730      	adds	r7, #48	; 0x30
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	40005400 	.word	0x40005400
 800725c:	40023800 	.word	0x40023800
 8007260:	40020400 	.word	0x40020400
 8007264:	40005800 	.word	0x40005800

08007268 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08a      	sub	sp, #40	; 0x28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007270:	f107 0314 	add.w	r3, r7, #20
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	605a      	str	r2, [r3, #4]
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	60da      	str	r2, [r3, #12]
 800727e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a69      	ldr	r2, [pc, #420]	; (800742c <HAL_SD_MspInit+0x1c4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	f040 80cb 	bne.w	8007422 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800728c:	2300      	movs	r3, #0
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	4b67      	ldr	r3, [pc, #412]	; (8007430 <HAL_SD_MspInit+0x1c8>)
 8007292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007294:	4a66      	ldr	r2, [pc, #408]	; (8007430 <HAL_SD_MspInit+0x1c8>)
 8007296:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800729a:	6453      	str	r3, [r2, #68]	; 0x44
 800729c:	4b64      	ldr	r3, [pc, #400]	; (8007430 <HAL_SD_MspInit+0x1c8>)
 800729e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a4:	613b      	str	r3, [r7, #16]
 80072a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	4b60      	ldr	r3, [pc, #384]	; (8007430 <HAL_SD_MspInit+0x1c8>)
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	4a5f      	ldr	r2, [pc, #380]	; (8007430 <HAL_SD_MspInit+0x1c8>)
 80072b2:	f043 0304 	orr.w	r3, r3, #4
 80072b6:	6313      	str	r3, [r2, #48]	; 0x30
 80072b8:	4b5d      	ldr	r3, [pc, #372]	; (8007430 <HAL_SD_MspInit+0x1c8>)
 80072ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072c4:	2300      	movs	r3, #0
 80072c6:	60bb      	str	r3, [r7, #8]
 80072c8:	4b59      	ldr	r3, [pc, #356]	; (8007430 <HAL_SD_MspInit+0x1c8>)
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	4a58      	ldr	r2, [pc, #352]	; (8007430 <HAL_SD_MspInit+0x1c8>)
 80072ce:	f043 0308 	orr.w	r3, r3, #8
 80072d2:	6313      	str	r3, [r2, #48]	; 0x30
 80072d4:	4b56      	ldr	r3, [pc, #344]	; (8007430 <HAL_SD_MspInit+0x1c8>)
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80072e0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80072e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e6:	2302      	movs	r3, #2
 80072e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ee:	2303      	movs	r3, #3
 80072f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80072f2:	230c      	movs	r3, #12
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072f6:	f107 0314 	add.w	r3, r7, #20
 80072fa:	4619      	mov	r1, r3
 80072fc:	484d      	ldr	r0, [pc, #308]	; (8007434 <HAL_SD_MspInit+0x1cc>)
 80072fe:	f003 fee3 	bl	800b0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007302:	2304      	movs	r3, #4
 8007304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007306:	2302      	movs	r3, #2
 8007308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800730e:	2303      	movs	r3, #3
 8007310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007312:	230c      	movs	r3, #12
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007316:	f107 0314 	add.w	r3, r7, #20
 800731a:	4619      	mov	r1, r3
 800731c:	4846      	ldr	r0, [pc, #280]	; (8007438 <HAL_SD_MspInit+0x1d0>)
 800731e:	f003 fed3 	bl	800b0c8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8007322:	4b46      	ldr	r3, [pc, #280]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007324:	4a46      	ldr	r2, [pc, #280]	; (8007440 <HAL_SD_MspInit+0x1d8>)
 8007326:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007328:	4b44      	ldr	r3, [pc, #272]	; (800743c <HAL_SD_MspInit+0x1d4>)
 800732a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800732e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007330:	4b42      	ldr	r3, [pc, #264]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007332:	2200      	movs	r2, #0
 8007334:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007336:	4b41      	ldr	r3, [pc, #260]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007338:	2200      	movs	r2, #0
 800733a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800733c:	4b3f      	ldr	r3, [pc, #252]	; (800743c <HAL_SD_MspInit+0x1d4>)
 800733e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007342:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007344:	4b3d      	ldr	r3, [pc, #244]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007346:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800734a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800734c:	4b3b      	ldr	r3, [pc, #236]	; (800743c <HAL_SD_MspInit+0x1d4>)
 800734e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007352:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007354:	4b39      	ldr	r3, [pc, #228]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007356:	2220      	movs	r2, #32
 8007358:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800735a:	4b38      	ldr	r3, [pc, #224]	; (800743c <HAL_SD_MspInit+0x1d4>)
 800735c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007360:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007362:	4b36      	ldr	r3, [pc, #216]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007364:	2204      	movs	r2, #4
 8007366:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007368:	4b34      	ldr	r3, [pc, #208]	; (800743c <HAL_SD_MspInit+0x1d4>)
 800736a:	2203      	movs	r2, #3
 800736c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800736e:	4b33      	ldr	r3, [pc, #204]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007370:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007374:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007376:	4b31      	ldr	r3, [pc, #196]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007378:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800737c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800737e:	482f      	ldr	r0, [pc, #188]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007380:	f003 fb06 	bl	800a990 <HAL_DMA_Init>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800738a:	f7ff fe0b 	bl	8006fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a2a      	ldr	r2, [pc, #168]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007392:	641a      	str	r2, [r3, #64]	; 0x40
 8007394:	4a29      	ldr	r2, [pc, #164]	; (800743c <HAL_SD_MspInit+0x1d4>)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800739a:	4b2a      	ldr	r3, [pc, #168]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 800739c:	4a2a      	ldr	r2, [pc, #168]	; (8007448 <HAL_SD_MspInit+0x1e0>)
 800739e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80073a0:	4b28      	ldr	r3, [pc, #160]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073a6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80073a8:	4b26      	ldr	r3, [pc, #152]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073aa:	2240      	movs	r2, #64	; 0x40
 80073ac:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073ae:	4b25      	ldr	r3, [pc, #148]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80073b4:	4b23      	ldr	r3, [pc, #140]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073ba:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80073bc:	4b21      	ldr	r3, [pc, #132]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80073c2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80073c4:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073ca:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80073cc:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073ce:	2220      	movs	r2, #32
 80073d0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80073d2:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80073d8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80073da:	4b1a      	ldr	r3, [pc, #104]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073dc:	2204      	movs	r2, #4
 80073de:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80073e0:	4b18      	ldr	r3, [pc, #96]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073e2:	2203      	movs	r2, #3
 80073e4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80073e6:	4b17      	ldr	r3, [pc, #92]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80073ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80073ee:	4b15      	ldr	r3, [pc, #84]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80073f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80073f6:	4813      	ldr	r0, [pc, #76]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 80073f8:	f003 faca 	bl	800a990 <HAL_DMA_Init>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8007402:	f7ff fdcf 	bl	8006fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a0e      	ldr	r2, [pc, #56]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 800740a:	63da      	str	r2, [r3, #60]	; 0x3c
 800740c:	4a0d      	ldr	r2, [pc, #52]	; (8007444 <HAL_SD_MspInit+0x1dc>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8007412:	2200      	movs	r2, #0
 8007414:	2100      	movs	r1, #0
 8007416:	2031      	movs	r0, #49	; 0x31
 8007418:	f003 fa83 	bl	800a922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800741c:	2031      	movs	r0, #49	; 0x31
 800741e:	f003 fa9c 	bl	800a95a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8007422:	bf00      	nop
 8007424:	3728      	adds	r7, #40	; 0x28
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40012c00 	.word	0x40012c00
 8007430:	40023800 	.word	0x40023800
 8007434:	40020800 	.word	0x40020800
 8007438:	40020c00 	.word	0x40020c00
 800743c:	200447b0 	.word	0x200447b0
 8007440:	40026458 	.word	0x40026458
 8007444:	20044ae4 	.word	0x20044ae4
 8007448:	400264a0 	.word	0x400264a0

0800744c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08a      	sub	sp, #40	; 0x28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007454:	f107 0314 	add.w	r3, r7, #20
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	605a      	str	r2, [r3, #4]
 800745e:	609a      	str	r2, [r3, #8]
 8007460:	60da      	str	r2, [r3, #12]
 8007462:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a19      	ldr	r2, [pc, #100]	; (80074d0 <HAL_SPI_MspInit+0x84>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d12c      	bne.n	80074c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800746e:	2300      	movs	r3, #0
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <HAL_SPI_MspInit+0x88>)
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	4a17      	ldr	r2, [pc, #92]	; (80074d4 <HAL_SPI_MspInit+0x88>)
 8007478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800747c:	6413      	str	r3, [r2, #64]	; 0x40
 800747e:	4b15      	ldr	r3, [pc, #84]	; (80074d4 <HAL_SPI_MspInit+0x88>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007486:	613b      	str	r3, [r7, #16]
 8007488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <HAL_SPI_MspInit+0x88>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	4a10      	ldr	r2, [pc, #64]	; (80074d4 <HAL_SPI_MspInit+0x88>)
 8007494:	f043 0302 	orr.w	r3, r3, #2
 8007498:	6313      	str	r3, [r2, #48]	; 0x30
 800749a:	4b0e      	ldr	r3, [pc, #56]	; (80074d4 <HAL_SPI_MspInit+0x88>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80074a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80074aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ac:	2302      	movs	r3, #2
 80074ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074b4:	2303      	movs	r3, #3
 80074b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80074b8:	2305      	movs	r3, #5
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	4619      	mov	r1, r3
 80074c2:	4805      	ldr	r0, [pc, #20]	; (80074d8 <HAL_SPI_MspInit+0x8c>)
 80074c4:	f003 fe00 	bl	800b0c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80074c8:	bf00      	nop
 80074ca:	3728      	adds	r7, #40	; 0x28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40003800 	.word	0x40003800
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40020400 	.word	0x40020400

080074dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08c      	sub	sp, #48	; 0x30
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074e4:	f107 031c 	add.w	r3, r7, #28
 80074e8:	2200      	movs	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	605a      	str	r2, [r3, #4]
 80074ee:	609a      	str	r2, [r3, #8]
 80074f0:	60da      	str	r2, [r3, #12]
 80074f2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a2d      	ldr	r2, [pc, #180]	; (80075b0 <HAL_TIM_PWM_MspInit+0xd4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d12d      	bne.n	800755a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80074fe:	2300      	movs	r3, #0
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	4b2c      	ldr	r3, [pc, #176]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007506:	4a2b      	ldr	r2, [pc, #172]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007508:	f043 0301 	orr.w	r3, r3, #1
 800750c:	6453      	str	r3, [r2, #68]	; 0x44
 800750e:	4b29      	ldr	r3, [pc, #164]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	61bb      	str	r3, [r7, #24]
 8007518:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800751a:	2300      	movs	r3, #0
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	4b25      	ldr	r3, [pc, #148]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	4a24      	ldr	r2, [pc, #144]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007524:	f043 0310 	orr.w	r3, r3, #16
 8007528:	6313      	str	r3, [r2, #48]	; 0x30
 800752a:	4b22      	ldr	r3, [pc, #136]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	f003 0310 	and.w	r3, r3, #16
 8007532:	617b      	str	r3, [r7, #20]
 8007534:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007536:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800753a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800753c:	2302      	movs	r3, #2
 800753e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007540:	2300      	movs	r3, #0
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007544:	2300      	movs	r3, #0
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007548:	2301      	movs	r3, #1
 800754a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800754c:	f107 031c 	add.w	r3, r7, #28
 8007550:	4619      	mov	r1, r3
 8007552:	4819      	ldr	r0, [pc, #100]	; (80075b8 <HAL_TIM_PWM_MspInit+0xdc>)
 8007554:	f003 fdb8 	bl	800b0c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007558:	e026      	b.n	80075a8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a17      	ldr	r2, [pc, #92]	; (80075bc <HAL_TIM_PWM_MspInit+0xe0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d10e      	bne.n	8007582 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007564:	2300      	movs	r3, #0
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 800756a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756c:	4a11      	ldr	r2, [pc, #68]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 800756e:	f043 0302 	orr.w	r3, r3, #2
 8007572:	6413      	str	r3, [r2, #64]	; 0x40
 8007574:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	693b      	ldr	r3, [r7, #16]
}
 8007580:	e012      	b.n	80075a8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a0e      	ldr	r2, [pc, #56]	; (80075c0 <HAL_TIM_PWM_MspInit+0xe4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d10d      	bne.n	80075a8 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	4a07      	ldr	r2, [pc, #28]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007596:	f043 0304 	orr.w	r3, r3, #4
 800759a:	6413      	str	r3, [r2, #64]	; 0x40
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <HAL_TIM_PWM_MspInit+0xd8>)
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	68fb      	ldr	r3, [r7, #12]
}
 80075a8:	bf00      	nop
 80075aa:	3730      	adds	r7, #48	; 0x30
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	40010000 	.word	0x40010000
 80075b4:	40023800 	.word	0x40023800
 80075b8:	40021000 	.word	0x40021000
 80075bc:	40000400 	.word	0x40000400
 80075c0:	40000800 	.word	0x40000800

080075c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a3e      	ldr	r2, [pc, #248]	; (80076cc <HAL_TIM_Base_MspInit+0x108>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d116      	bne.n	8007604 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80075d6:	2300      	movs	r3, #0
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	4b3d      	ldr	r3, [pc, #244]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	4a3c      	ldr	r2, [pc, #240]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 80075e0:	f043 0310 	orr.w	r3, r3, #16
 80075e4:	6413      	str	r3, [r2, #64]	; 0x40
 80075e6:	4b3a      	ldr	r3, [pc, #232]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	f003 0310 	and.w	r3, r3, #16
 80075ee:	61fb      	str	r3, [r7, #28]
 80075f0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80075f2:	2200      	movs	r2, #0
 80075f4:	2101      	movs	r1, #1
 80075f6:	2036      	movs	r0, #54	; 0x36
 80075f8:	f003 f993 	bl	800a922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80075fc:	2036      	movs	r0, #54	; 0x36
 80075fe:	f003 f9ac 	bl	800a95a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007602:	e05e      	b.n	80076c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a32      	ldr	r2, [pc, #200]	; (80076d4 <HAL_TIM_Base_MspInit+0x110>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d116      	bne.n	800763c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800760e:	2300      	movs	r3, #0
 8007610:	61bb      	str	r3, [r7, #24]
 8007612:	4b2f      	ldr	r3, [pc, #188]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	4a2e      	ldr	r2, [pc, #184]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007618:	f043 0320 	orr.w	r3, r3, #32
 800761c:	6413      	str	r3, [r2, #64]	; 0x40
 800761e:	4b2c      	ldr	r3, [pc, #176]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	61bb      	str	r3, [r7, #24]
 8007628:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800762a:	2200      	movs	r2, #0
 800762c:	2100      	movs	r1, #0
 800762e:	2037      	movs	r0, #55	; 0x37
 8007630:	f003 f977 	bl	800a922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007634:	2037      	movs	r0, #55	; 0x37
 8007636:	f003 f990 	bl	800a95a <HAL_NVIC_EnableIRQ>
}
 800763a:	e042      	b.n	80076c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a25      	ldr	r2, [pc, #148]	; (80076d8 <HAL_TIM_Base_MspInit+0x114>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d10e      	bne.n	8007664 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007646:	2300      	movs	r3, #0
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	4b21      	ldr	r3, [pc, #132]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 800764c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764e:	4a20      	ldr	r2, [pc, #128]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007654:	6453      	str	r3, [r2, #68]	; 0x44
 8007656:	4b1e      	ldr	r3, [pc, #120]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	697b      	ldr	r3, [r7, #20]
}
 8007662:	e02e      	b.n	80076c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a1c      	ldr	r2, [pc, #112]	; (80076dc <HAL_TIM_Base_MspInit+0x118>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d10e      	bne.n	800768c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800766e:	2300      	movs	r3, #0
 8007670:	613b      	str	r3, [r7, #16]
 8007672:	4b17      	ldr	r3, [pc, #92]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007676:	4a16      	ldr	r2, [pc, #88]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800767c:	6453      	str	r3, [r2, #68]	; 0x44
 800767e:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 8007680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007686:	613b      	str	r3, [r7, #16]
 8007688:	693b      	ldr	r3, [r7, #16]
}
 800768a:	e01a      	b.n	80076c2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <HAL_TIM_Base_MspInit+0x11c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d115      	bne.n	80076c2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	4a0c      	ldr	r2, [pc, #48]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 80076a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a4:	6413      	str	r3, [r2, #64]	; 0x40
 80076a6:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <HAL_TIM_Base_MspInit+0x10c>)
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	202c      	movs	r0, #44	; 0x2c
 80076b8:	f003 f933 	bl	800a922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80076bc:	202c      	movs	r0, #44	; 0x2c
 80076be:	f003 f94c 	bl	800a95a <HAL_NVIC_EnableIRQ>
}
 80076c2:	bf00      	nop
 80076c4:	3720      	adds	r7, #32
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40001000 	.word	0x40001000
 80076d0:	40023800 	.word	0x40023800
 80076d4:	40001400 	.word	0x40001400
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800
 80076e0:	40001c00 	.word	0x40001c00

080076e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076ec:	f107 0314 	add.w	r3, r7, #20
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	605a      	str	r2, [r3, #4]
 80076f6:	609a      	str	r2, [r3, #8]
 80076f8:	60da      	str	r2, [r3, #12]
 80076fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1d      	ldr	r2, [pc, #116]	; (8007778 <HAL_TIM_Encoder_MspInit+0x94>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d133      	bne.n	800776e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007706:	2300      	movs	r3, #0
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	4b1c      	ldr	r3, [pc, #112]	; (800777c <HAL_TIM_Encoder_MspInit+0x98>)
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	4a1b      	ldr	r2, [pc, #108]	; (800777c <HAL_TIM_Encoder_MspInit+0x98>)
 8007710:	f043 0302 	orr.w	r3, r3, #2
 8007714:	6453      	str	r3, [r2, #68]	; 0x44
 8007716:	4b19      	ldr	r3, [pc, #100]	; (800777c <HAL_TIM_Encoder_MspInit+0x98>)
 8007718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	4b15      	ldr	r3, [pc, #84]	; (800777c <HAL_TIM_Encoder_MspInit+0x98>)
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	4a14      	ldr	r2, [pc, #80]	; (800777c <HAL_TIM_Encoder_MspInit+0x98>)
 800772c:	f043 0304 	orr.w	r3, r3, #4
 8007730:	6313      	str	r3, [r2, #48]	; 0x30
 8007732:	4b12      	ldr	r3, [pc, #72]	; (800777c <HAL_TIM_Encoder_MspInit+0x98>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800773e:	23c0      	movs	r3, #192	; 0xc0
 8007740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007742:	2302      	movs	r3, #2
 8007744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800774a:	2300      	movs	r3, #0
 800774c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800774e:	2303      	movs	r3, #3
 8007750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007752:	f107 0314 	add.w	r3, r7, #20
 8007756:	4619      	mov	r1, r3
 8007758:	4809      	ldr	r0, [pc, #36]	; (8007780 <HAL_TIM_Encoder_MspInit+0x9c>)
 800775a:	f003 fcb5 	bl	800b0c8 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800775e:	2200      	movs	r2, #0
 8007760:	2100      	movs	r1, #0
 8007762:	202c      	movs	r0, #44	; 0x2c
 8007764:	f003 f8dd 	bl	800a922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007768:	202c      	movs	r0, #44	; 0x2c
 800776a:	f003 f8f6 	bl	800a95a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800776e:	bf00      	nop
 8007770:	3728      	adds	r7, #40	; 0x28
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	40010400 	.word	0x40010400
 800777c:	40023800 	.word	0x40023800
 8007780:	40020800 	.word	0x40020800

08007784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08c      	sub	sp, #48	; 0x30
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800778c:	f107 031c 	add.w	r3, r7, #28
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	605a      	str	r2, [r3, #4]
 8007796:	609a      	str	r2, [r3, #8]
 8007798:	60da      	str	r2, [r3, #12]
 800779a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a5c      	ldr	r2, [pc, #368]	; (8007914 <HAL_TIM_MspPostInit+0x190>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d11f      	bne.n	80077e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80077a6:	2300      	movs	r3, #0
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	4b5b      	ldr	r3, [pc, #364]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 80077ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ae:	4a5a      	ldr	r2, [pc, #360]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 80077b0:	f043 0310 	orr.w	r3, r3, #16
 80077b4:	6313      	str	r3, [r2, #48]	; 0x30
 80077b6:	4b58      	ldr	r3, [pc, #352]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	f003 0310 	and.w	r3, r3, #16
 80077be:	61bb      	str	r3, [r7, #24]
 80077c0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80077c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077c8:	2302      	movs	r3, #2
 80077ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077cc:	2300      	movs	r3, #0
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077d0:	2300      	movs	r3, #0
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80077d4:	2301      	movs	r3, #1
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077d8:	f107 031c 	add.w	r3, r7, #28
 80077dc:	4619      	mov	r1, r3
 80077de:	484f      	ldr	r0, [pc, #316]	; (800791c <HAL_TIM_MspPostInit+0x198>)
 80077e0:	f003 fc72 	bl	800b0c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80077e4:	e091      	b.n	800790a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a4d      	ldr	r2, [pc, #308]	; (8007920 <HAL_TIM_MspPostInit+0x19c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d11e      	bne.n	800782e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077f0:	2300      	movs	r3, #0
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	4b48      	ldr	r3, [pc, #288]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 80077f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f8:	4a47      	ldr	r2, [pc, #284]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 80077fa:	f043 0302 	orr.w	r3, r3, #2
 80077fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007800:	4b45      	ldr	r3, [pc, #276]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800780c:	2330      	movs	r3, #48	; 0x30
 800780e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007810:	2302      	movs	r3, #2
 8007812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007814:	2300      	movs	r3, #0
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007818:	2300      	movs	r3, #0
 800781a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800781c:	2302      	movs	r3, #2
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007820:	f107 031c 	add.w	r3, r7, #28
 8007824:	4619      	mov	r1, r3
 8007826:	483f      	ldr	r0, [pc, #252]	; (8007924 <HAL_TIM_MspPostInit+0x1a0>)
 8007828:	f003 fc4e 	bl	800b0c8 <HAL_GPIO_Init>
}
 800782c:	e06d      	b.n	800790a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a3d      	ldr	r2, [pc, #244]	; (8007928 <HAL_TIM_MspPostInit+0x1a4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d11f      	bne.n	8007878 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007838:	2300      	movs	r3, #0
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	4b36      	ldr	r3, [pc, #216]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	4a35      	ldr	r2, [pc, #212]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 8007842:	f043 0308 	orr.w	r3, r3, #8
 8007846:	6313      	str	r3, [r2, #48]	; 0x30
 8007848:	4b33      	ldr	r3, [pc, #204]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	613b      	str	r3, [r7, #16]
 8007852:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007854:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800785a:	2302      	movs	r3, #2
 800785c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800785e:	2300      	movs	r3, #0
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007862:	2300      	movs	r3, #0
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007866:	2302      	movs	r3, #2
 8007868:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800786a:	f107 031c 	add.w	r3, r7, #28
 800786e:	4619      	mov	r1, r3
 8007870:	482e      	ldr	r0, [pc, #184]	; (800792c <HAL_TIM_MspPostInit+0x1a8>)
 8007872:	f003 fc29 	bl	800b0c8 <HAL_GPIO_Init>
}
 8007876:	e048      	b.n	800790a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2c      	ldr	r2, [pc, #176]	; (8007930 <HAL_TIM_MspPostInit+0x1ac>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d11f      	bne.n	80078c2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	4b24      	ldr	r3, [pc, #144]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	4a23      	ldr	r2, [pc, #140]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 800788c:	f043 0302 	orr.w	r3, r3, #2
 8007890:	6313      	str	r3, [r2, #48]	; 0x30
 8007892:	4b21      	ldr	r3, [pc, #132]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800789e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078a4:	2302      	movs	r3, #2
 80078a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ac:	2300      	movs	r3, #0
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80078b0:	2303      	movs	r3, #3
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078b4:	f107 031c 	add.w	r3, r7, #28
 80078b8:	4619      	mov	r1, r3
 80078ba:	481a      	ldr	r0, [pc, #104]	; (8007924 <HAL_TIM_MspPostInit+0x1a0>)
 80078bc:	f003 fc04 	bl	800b0c8 <HAL_GPIO_Init>
}
 80078c0:	e023      	b.n	800790a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <HAL_TIM_MspPostInit+0x1b0>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d11e      	bne.n	800790a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078cc:	2300      	movs	r3, #0
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	4b11      	ldr	r3, [pc, #68]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	4a10      	ldr	r2, [pc, #64]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 80078d6:	f043 0302 	orr.w	r3, r3, #2
 80078da:	6313      	str	r3, [r2, #48]	; 0x30
 80078dc:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <HAL_TIM_MspPostInit+0x194>)
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80078e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ee:	2302      	movs	r3, #2
 80078f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078f6:	2300      	movs	r3, #0
 80078f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80078fa:	2303      	movs	r3, #3
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078fe:	f107 031c 	add.w	r3, r7, #28
 8007902:	4619      	mov	r1, r3
 8007904:	4807      	ldr	r0, [pc, #28]	; (8007924 <HAL_TIM_MspPostInit+0x1a0>)
 8007906:	f003 fbdf 	bl	800b0c8 <HAL_GPIO_Init>
}
 800790a:	bf00      	nop
 800790c:	3730      	adds	r7, #48	; 0x30
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	40010000 	.word	0x40010000
 8007918:	40023800 	.word	0x40023800
 800791c:	40021000 	.word	0x40021000
 8007920:	40000400 	.word	0x40000400
 8007924:	40020400 	.word	0x40020400
 8007928:	40000800 	.word	0x40000800
 800792c:	40020c00 	.word	0x40020c00
 8007930:	40014400 	.word	0x40014400
 8007934:	40014800 	.word	0x40014800

08007938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08a      	sub	sp, #40	; 0x28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007940:	f107 0314 	add.w	r3, r7, #20
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	609a      	str	r2, [r3, #8]
 800794c:	60da      	str	r2, [r3, #12]
 800794e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a19      	ldr	r2, [pc, #100]	; (80079bc <HAL_UART_MspInit+0x84>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d12b      	bne.n	80079b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800795a:	2300      	movs	r3, #0
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	4b18      	ldr	r3, [pc, #96]	; (80079c0 <HAL_UART_MspInit+0x88>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	4a17      	ldr	r2, [pc, #92]	; (80079c0 <HAL_UART_MspInit+0x88>)
 8007964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007968:	6413      	str	r3, [r2, #64]	; 0x40
 800796a:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <HAL_UART_MspInit+0x88>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007972:	613b      	str	r3, [r7, #16]
 8007974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	4b11      	ldr	r3, [pc, #68]	; (80079c0 <HAL_UART_MspInit+0x88>)
 800797c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797e:	4a10      	ldr	r2, [pc, #64]	; (80079c0 <HAL_UART_MspInit+0x88>)
 8007980:	f043 0308 	orr.w	r3, r3, #8
 8007984:	6313      	str	r3, [r2, #48]	; 0x30
 8007986:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <HAL_UART_MspInit+0x88>)
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	f003 0308 	and.w	r3, r3, #8
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007992:	2360      	movs	r3, #96	; 0x60
 8007994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007996:	2302      	movs	r3, #2
 8007998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799a:	2300      	movs	r3, #0
 800799c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800799e:	2303      	movs	r3, #3
 80079a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80079a2:	2307      	movs	r3, #7
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80079a6:	f107 0314 	add.w	r3, r7, #20
 80079aa:	4619      	mov	r1, r3
 80079ac:	4805      	ldr	r0, [pc, #20]	; (80079c4 <HAL_UART_MspInit+0x8c>)
 80079ae:	f003 fb8b 	bl	800b0c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80079b2:	bf00      	nop
 80079b4:	3728      	adds	r7, #40	; 0x28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	40004400 	.word	0x40004400
 80079c0:	40023800 	.word	0x40023800
 80079c4:	40020c00 	.word	0x40020c00

080079c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80079cc:	e7fe      	b.n	80079cc <NMI_Handler+0x4>

080079ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079ce:	b480      	push	{r7}
 80079d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079d2:	e7fe      	b.n	80079d2 <HardFault_Handler+0x4>

080079d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079d8:	e7fe      	b.n	80079d8 <MemManage_Handler+0x4>

080079da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079da:	b480      	push	{r7}
 80079dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079de:	e7fe      	b.n	80079de <BusFault_Handler+0x4>

080079e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079e4:	e7fe      	b.n	80079e4 <UsageFault_Handler+0x4>

080079e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079e6:	b480      	push	{r7}
 80079e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079ea:	bf00      	nop
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079f8:	bf00      	nop
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007a02:	b480      	push	{r7}
 8007a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a06:	bf00      	nop
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a14:	f002 fa64 	bl	8009ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a18:	bf00      	nop
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007a20:	4803      	ldr	r0, [pc, #12]	; (8007a30 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007a22:	f007 fd34 	bl	800f48e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007a26:	4803      	ldr	r0, [pc, #12]	; (8007a34 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007a28:	f007 fd31 	bl	800f48e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007a2c:	bf00      	nop
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20044868 	.word	0x20044868
 8007a34:	20044a64 	.word	0x20044a64

08007a38 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007a3c:	4802      	ldr	r0, [pc, #8]	; (8007a48 <SDIO_IRQHandler+0x10>)
 8007a3e:	f005 fdcd 	bl	800d5dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007a42:	bf00      	nop
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20044bc4 	.word	0x20044bc4

08007a4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007a50:	4802      	ldr	r0, [pc, #8]	; (8007a5c <TIM6_DAC_IRQHandler+0x10>)
 8007a52:	f007 fd1c 	bl	800f48e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007a56:	bf00      	nop
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20044b44 	.word	0x20044b44

08007a60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007a64:	4802      	ldr	r0, [pc, #8]	; (8007a70 <TIM7_IRQHandler+0x10>)
 8007a66:	f007 fd12 	bl	800f48e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007a6a:	bf00      	nop
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20044ce8 	.word	0x20044ce8

08007a74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007a78:	4802      	ldr	r0, [pc, #8]	; (8007a84 <DMA2_Stream2_IRQHandler+0x10>)
 8007a7a:	f003 f8b1 	bl	800abe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007a7e:	bf00      	nop
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20044c88 	.word	0x20044c88

08007a88 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007a8c:	4802      	ldr	r0, [pc, #8]	; (8007a98 <DMA2_Stream3_IRQHandler+0x10>)
 8007a8e:	f003 f8a7 	bl	800abe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007a92:	bf00      	nop
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	200447b0 	.word	0x200447b0

08007a9c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007aa0:	4802      	ldr	r0, [pc, #8]	; (8007aac <DMA2_Stream6_IRQHandler+0x10>)
 8007aa2:	f003 f89d 	bl	800abe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007aa6:	bf00      	nop
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20044ae4 	.word	0x20044ae4

08007ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007ab8:	4a14      	ldr	r2, [pc, #80]	; (8007b0c <_sbrk+0x5c>)
 8007aba:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <_sbrk+0x60>)
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007ac4:	4b13      	ldr	r3, [pc, #76]	; (8007b14 <_sbrk+0x64>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d102      	bne.n	8007ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007acc:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <_sbrk+0x64>)
 8007ace:	4a12      	ldr	r2, [pc, #72]	; (8007b18 <_sbrk+0x68>)
 8007ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007ad2:	4b10      	ldr	r3, [pc, #64]	; (8007b14 <_sbrk+0x64>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4413      	add	r3, r2
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d207      	bcs.n	8007af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007ae0:	f00d ff68 	bl	80159b4 <__errno>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007aea:	f04f 33ff 	mov.w	r3, #4294967295
 8007aee:	e009      	b.n	8007b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007af0:	4b08      	ldr	r3, [pc, #32]	; (8007b14 <_sbrk+0x64>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007af6:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <_sbrk+0x64>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4413      	add	r3, r2
 8007afe:	4a05      	ldr	r2, [pc, #20]	; (8007b14 <_sbrk+0x64>)
 8007b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007b02:	68fb      	ldr	r3, [r7, #12]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20050000 	.word	0x20050000
 8007b10:	00000800 	.word	0x00000800
 8007b14:	200002bc 	.word	0x200002bc
 8007b18:	20046e38 	.word	0x20046e38

08007b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007b20:	4b08      	ldr	r3, [pc, #32]	; (8007b44 <SystemInit+0x28>)
 8007b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b26:	4a07      	ldr	r2, [pc, #28]	; (8007b44 <SystemInit+0x28>)
 8007b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b30:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <SystemInit+0x28>)
 8007b32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b36:	609a      	str	r2, [r3, #8]
#endif
}
 8007b38:	bf00      	nop
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	e000ed00 	.word	0xe000ed00

08007b48 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007b48:	b598      	push	{r3, r4, r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
	lcd_init();
 8007b4c:	f7f9 fa64 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007b50:	483b      	ldr	r0, [pc, #236]	; (8007c40 <cppInit+0xf8>)
 8007b52:	f7fd fcb3 	bl	80054bc <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007b56:	2064      	movs	r0, #100	; 0x64
 8007b58:	f002 f9e2 	bl	8009f20 <HAL_Delay>
	power_sensor.updateValues();
 8007b5c:	4838      	ldr	r0, [pc, #224]	; (8007c40 <cppInit+0xf8>)
 8007b5e:	f7fd fcbb 	bl	80054d8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007b62:	f7f9 fa9d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007b66:	2100      	movs	r1, #0
 8007b68:	2000      	movs	r0, #0
 8007b6a:	f7f9 faa9 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007b6e:	4835      	ldr	r0, [pc, #212]	; (8007c44 <cppInit+0xfc>)
 8007b70:	f7f9 fad0 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007b74:	2101      	movs	r1, #1
 8007b76:	2000      	movs	r0, #0
 8007b78:	f7f9 faa2 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007b7c:	4830      	ldr	r0, [pc, #192]	; (8007c40 <cppInit+0xf8>)
 8007b7e:	f7fd fcd5 	bl	800552c <_ZN11PowerSensor17getButteryVoltageEv>
 8007b82:	ee10 3a10 	vmov	r3, s0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7f8 fcf6 	bl	8000578 <__aeabi_f2d>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	461a      	mov	r2, r3
 8007b92:	4623      	mov	r3, r4
 8007b94:	482c      	ldr	r0, [pc, #176]	; (8007c48 <cppInit+0x100>)
 8007b96:	f7f9 fabd 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b9e:	f002 f9bf 	bl	8009f20 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007ba2:	482a      	ldr	r0, [pc, #168]	; (8007c4c <cppInit+0x104>)
 8007ba4:	f7fc feac 	bl	8004900 <_ZN6Logger10sdCardInitEv>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <cppInit+0x76>
		led.fullColor('G');
 8007bae:	2147      	movs	r1, #71	; 0x47
 8007bb0:	4827      	ldr	r0, [pc, #156]	; (8007c50 <cppInit+0x108>)
 8007bb2:	f7fa fb4f 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007bb6:	2064      	movs	r0, #100	; 0x64
 8007bb8:	f002 f9b2 	bl	8009f20 <HAL_Delay>
 8007bbc:	e006      	b.n	8007bcc <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007bbe:	2152      	movs	r1, #82	; 0x52
 8007bc0:	4823      	ldr	r0, [pc, #140]	; (8007c50 <cppInit+0x108>)
 8007bc2:	f7fa fb47 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007bc6:	2064      	movs	r0, #100	; 0x64
 8007bc8:	f002 f9aa 	bl	8009f20 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007bcc:	4821      	ldr	r0, [pc, #132]	; (8007c54 <cppInit+0x10c>)
 8007bce:	f7fa fc9d 	bl	800250c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007bd2:	4821      	ldr	r0, [pc, #132]	; (8007c58 <cppInit+0x110>)
 8007bd4:	f7fd f92a 	bl	8004e2c <_ZN5Motor4initEv>
	encoder.init();
 8007bd8:	4820      	ldr	r0, [pc, #128]	; (8007c5c <cppInit+0x114>)
 8007bda:	f7f9 fc23 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007bde:	4820      	ldr	r0, [pc, #128]	; (8007c60 <cppInit+0x118>)
 8007be0:	f7fa f8e6 	bl	8001db0 <_ZN3IMU4initEv>
	line_trace.init();
 8007be4:	481f      	ldr	r0, [pc, #124]	; (8007c64 <cppInit+0x11c>)
 8007be6:	f7fb ff83 	bl	8003af0 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007bea:	481a      	ldr	r0, [pc, #104]	; (8007c54 <cppInit+0x10c>)
 8007bec:	f7fa fdee 	bl	80027cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007bf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bf4:	f002 f994 	bl	8009f20 <HAL_Delay>

	led.fullColor('M');
 8007bf8:	214d      	movs	r1, #77	; 0x4d
 8007bfa:	4815      	ldr	r0, [pc, #84]	; (8007c50 <cppInit+0x108>)
 8007bfc:	f7fa fb2a 	bl	8002254 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007c00:	4817      	ldr	r0, [pc, #92]	; (8007c60 <cppInit+0x118>)
 8007c02:	f7fa f9af 	bl	8001f64 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 8007c06:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007c68 <cppInit+0x120>
 8007c0a:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007c6c <cppInit+0x124>
 8007c0e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007c70 <cppInit+0x128>
 8007c12:	4818      	ldr	r0, [pc, #96]	; (8007c74 <cppInit+0x12c>)
 8007c14:	f7fe f9dc 	bl	8005fd0 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007c18:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007c78 <cppInit+0x130>
 8007c1c:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007c7c <cppInit+0x134>
 8007c20:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007c80 <cppInit+0x138>
 8007c24:	4813      	ldr	r0, [pc, #76]	; (8007c74 <cppInit+0x12c>)
 8007c26:	f7fe f9ec 	bl	8006002 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007c2a:	4816      	ldr	r0, [pc, #88]	; (8007c84 <cppInit+0x13c>)
 8007c2c:	f7fd fb50 	bl	80052d0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007c30:	4815      	ldr	r0, [pc, #84]	; (8007c88 <cppInit+0x140>)
 8007c32:	f7fd fbe7 	bl	8005404 <_ZN13PathFollowing4initEv>

	esc.init();
 8007c36:	4815      	ldr	r0, [pc, #84]	; (8007c8c <cppInit+0x144>)
 8007c38:	f7f9 fad8 	bl	80011ec <_ZN3ESC4initEv>

}
 8007c3c:	bf00      	nop
 8007c3e:	bd98      	pop	{r3, r4, r7, pc}
 8007c40:	200005d4 	.word	0x200005d4
 8007c44:	08019ffc 	.word	0x08019ffc
 8007c48:	0801a004 	.word	0x0801a004
 8007c4c:	200005f4 	.word	0x200005f4
 8007c50:	200005d0 	.word	0x200005d0
 8007c54:	200002c0 	.word	0x200002c0
 8007c58:	200005cc 	.word	0x200005cc
 8007c5c:	2001dac0 	.word	0x2001dac0
 8007c60:	200005e0 	.word	0x200005e0
 8007c64:	2001db64 	.word	0x2001db64
 8007c68:	3a8439b6 	.word	0x3a8439b6
 8007c6c:	40d1a29c 	.word	0x40d1a29c
 8007c70:	3f81f8a1 	.word	0x3f81f8a1
 8007c74:	2001dae0 	.word	0x2001dae0
 8007c78:	00000000 	.word	0x00000000
 8007c7c:	3f5e3fbc 	.word	0x3f5e3fbc
 8007c80:	3d75c28f 	.word	0x3d75c28f
 8007c84:	2001db20 	.word	0x2001db20
 8007c88:	2002acb0 	.word	0x2002acb0
 8007c8c:	2001db60 	.word	0x2001db60

08007c90 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007c94:	480e      	ldr	r0, [pc, #56]	; (8007cd0 <cppFlip1ms+0x40>)
 8007c96:	f7fa fc97 	bl	80025c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007c9a:	480e      	ldr	r0, [pc, #56]	; (8007cd4 <cppFlip1ms+0x44>)
 8007c9c:	f7fa f8b0 	bl	8001e00 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007ca0:	480d      	ldr	r0, [pc, #52]	; (8007cd8 <cppFlip1ms+0x48>)
 8007ca2:	f7f9 fbe1 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007ca6:	480d      	ldr	r0, [pc, #52]	; (8007cdc <cppFlip1ms+0x4c>)
 8007ca8:	f7fc f9c8 	bl	800403c <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007cac:	480c      	ldr	r0, [pc, #48]	; (8007ce0 <cppFlip1ms+0x50>)
 8007cae:	f7fe f9c1 	bl	8006034 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007cb2:	480c      	ldr	r0, [pc, #48]	; (8007ce4 <cppFlip1ms+0x54>)
 8007cb4:	f7fd faf0 	bl	8005298 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007cb8:	480b      	ldr	r0, [pc, #44]	; (8007ce8 <cppFlip1ms+0x58>)
 8007cba:	f7fd fcb3 	bl	8005624 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007cbe:	480b      	ldr	r0, [pc, #44]	; (8007cec <cppFlip1ms+0x5c>)
 8007cc0:	f7fd f8c6 	bl	8004e50 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007cc4:	4804      	ldr	r0, [pc, #16]	; (8007cd8 <cppFlip1ms+0x48>)
 8007cc6:	f7f9 fcb9 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007cca:	bf00      	nop
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	200002c0 	.word	0x200002c0
 8007cd4:	200005e0 	.word	0x200005e0
 8007cd8:	2001dac0 	.word	0x2001dac0
 8007cdc:	2001db64 	.word	0x2001db64
 8007ce0:	2001dae0 	.word	0x2001dae0
 8007ce4:	2001db20 	.word	0x2001db20
 8007ce8:	200005b8 	.word	0x200005b8
 8007cec:	200005cc 	.word	0x200005cc

08007cf0 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007cf4:	4802      	ldr	r0, [pc, #8]	; (8007d00 <cppFlip100ns+0x10>)
 8007cf6:	f7fa fc19 	bl	800252c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007cfa:	bf00      	nop
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	200002c0 	.word	0x200002c0

08007d04 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007d08:	4b10      	ldr	r3, [pc, #64]	; (8007d4c <cppFlip10ms+0x48>)
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	4b0e      	ldr	r3, [pc, #56]	; (8007d4c <cppFlip10ms+0x48>)
 8007d12:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 8007d14:	4b0d      	ldr	r3, [pc, #52]	; (8007d4c <cppFlip10ms+0x48>)
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	2b10      	cmp	r3, #16
 8007d1a:	d905      	bls.n	8007d28 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007d1c:	480c      	ldr	r0, [pc, #48]	; (8007d50 <cppFlip10ms+0x4c>)
 8007d1e:	f7fd ffa7 	bl	8005c70 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007d22:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <cppFlip10ms+0x48>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007d28:	480a      	ldr	r0, [pc, #40]	; (8007d54 <cppFlip10ms+0x50>)
 8007d2a:	f7fd f953 	bl	8004fd4 <_ZN5Motor20getLeftCounterPeriodEv>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	4619      	mov	r1, r3
 8007d32:	4809      	ldr	r0, [pc, #36]	; (8007d58 <cppFlip10ms+0x54>)
 8007d34:	f7fc fe2c 	bl	8004990 <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007d38:	4806      	ldr	r0, [pc, #24]	; (8007d54 <cppFlip10ms+0x50>)
 8007d3a:	f7fd f958 	bl	8004fee <_ZN5Motor21getRightCounterPeriodEv>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	4619      	mov	r1, r3
 8007d42:	4805      	ldr	r0, [pc, #20]	; (8007d58 <cppFlip10ms+0x54>)
 8007d44:	f7fc fe5d 	bl	8004a02 <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007d48:	bf00      	nop
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	200423d8 	.word	0x200423d8
 8007d50:	2002aaa4 	.word	0x2002aaa4
 8007d54:	200005cc 	.word	0x200005cc
 8007d58:	200005f4 	.word	0x200005f4
 8007d5c:	00000000 	.word	0x00000000

08007d60 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007d66:	4baf      	ldr	r3, [pc, #700]	; (8008024 <cppLoop+0x2c4>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	f3bf 8f5b 	dmb	ish
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bf0c      	ite	eq
 8007d78:	2301      	moveq	r3, #1
 8007d7a:	2300      	movne	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d015      	beq.n	8007dae <cppLoop+0x4e>
 8007d82:	48a8      	ldr	r0, [pc, #672]	; (8008024 <cppLoop+0x2c4>)
 8007d84:	f00c fdb1 	bl	80148ea <__cxa_guard_acquire>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	bf14      	ite	ne
 8007d8e:	2301      	movne	r3, #1
 8007d90:	2300      	moveq	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <cppLoop+0x4e>
 8007d98:	48a3      	ldr	r0, [pc, #652]	; (8008028 <cppLoop+0x2c8>)
 8007d9a:	f7fb ffb0 	bl	8003cfe <_ZN9LineTrace5getKpEv>
 8007d9e:	eef0 7a40 	vmov.f32	s15, s0
 8007da2:	4ba2      	ldr	r3, [pc, #648]	; (800802c <cppLoop+0x2cc>)
 8007da4:	edc3 7a00 	vstr	s15, [r3]
 8007da8:	489e      	ldr	r0, [pc, #632]	; (8008024 <cppLoop+0x2c4>)
 8007daa:	f00c fdaa 	bl	8014902 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007dae:	4ba0      	ldr	r3, [pc, #640]	; (8008030 <cppLoop+0x2d0>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	f3bf 8f5b 	dmb	ish
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bf0c      	ite	eq
 8007dc0:	2301      	moveq	r3, #1
 8007dc2:	2300      	movne	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d015      	beq.n	8007df6 <cppLoop+0x96>
 8007dca:	4899      	ldr	r0, [pc, #612]	; (8008030 <cppLoop+0x2d0>)
 8007dcc:	f00c fd8d 	bl	80148ea <__cxa_guard_acquire>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	bf14      	ite	ne
 8007dd6:	2301      	movne	r3, #1
 8007dd8:	2300      	moveq	r3, #0
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <cppLoop+0x96>
 8007de0:	4891      	ldr	r0, [pc, #580]	; (8008028 <cppLoop+0x2c8>)
 8007de2:	f7fb ff9b 	bl	8003d1c <_ZN9LineTrace5getKiEv>
 8007de6:	eef0 7a40 	vmov.f32	s15, s0
 8007dea:	4b92      	ldr	r3, [pc, #584]	; (8008034 <cppLoop+0x2d4>)
 8007dec:	edc3 7a00 	vstr	s15, [r3]
 8007df0:	488f      	ldr	r0, [pc, #572]	; (8008030 <cppLoop+0x2d0>)
 8007df2:	f00c fd86 	bl	8014902 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007df6:	4b90      	ldr	r3, [pc, #576]	; (8008038 <cppLoop+0x2d8>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	f3bf 8f5b 	dmb	ish
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bf0c      	ite	eq
 8007e08:	2301      	moveq	r3, #1
 8007e0a:	2300      	movne	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d015      	beq.n	8007e3e <cppLoop+0xde>
 8007e12:	4889      	ldr	r0, [pc, #548]	; (8008038 <cppLoop+0x2d8>)
 8007e14:	f00c fd69 	bl	80148ea <__cxa_guard_acquire>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	bf14      	ite	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	2300      	moveq	r3, #0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00a      	beq.n	8007e3e <cppLoop+0xde>
 8007e28:	487f      	ldr	r0, [pc, #508]	; (8008028 <cppLoop+0x2c8>)
 8007e2a:	f7fb ff86 	bl	8003d3a <_ZN9LineTrace5getKdEv>
 8007e2e:	eef0 7a40 	vmov.f32	s15, s0
 8007e32:	4b82      	ldr	r3, [pc, #520]	; (800803c <cppLoop+0x2dc>)
 8007e34:	edc3 7a00 	vstr	s15, [r3]
 8007e38:	487f      	ldr	r0, [pc, #508]	; (8008038 <cppLoop+0x2d8>)
 8007e3a:	f00c fd62 	bl	8014902 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007e3e:	4b80      	ldr	r3, [pc, #512]	; (8008040 <cppLoop+0x2e0>)
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	f3bf 8f5b 	dmb	ish
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bf0c      	ite	eq
 8007e50:	2301      	moveq	r3, #1
 8007e52:	2300      	movne	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d015      	beq.n	8007e86 <cppLoop+0x126>
 8007e5a:	4879      	ldr	r0, [pc, #484]	; (8008040 <cppLoop+0x2e0>)
 8007e5c:	f00c fd45 	bl	80148ea <__cxa_guard_acquire>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bf14      	ite	ne
 8007e66:	2301      	movne	r3, #1
 8007e68:	2300      	moveq	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <cppLoop+0x126>
 8007e70:	486d      	ldr	r0, [pc, #436]	; (8008028 <cppLoop+0x2c8>)
 8007e72:	f7fb ff8a 	bl	8003d8a <_ZN9LineTrace9getKpSlowEv>
 8007e76:	eef0 7a40 	vmov.f32	s15, s0
 8007e7a:	4b72      	ldr	r3, [pc, #456]	; (8008044 <cppLoop+0x2e4>)
 8007e7c:	edc3 7a00 	vstr	s15, [r3]
 8007e80:	486f      	ldr	r0, [pc, #444]	; (8008040 <cppLoop+0x2e0>)
 8007e82:	f00c fd3e 	bl	8014902 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007e86:	4b70      	ldr	r3, [pc, #448]	; (8008048 <cppLoop+0x2e8>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	f3bf 8f5b 	dmb	ish
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	bf0c      	ite	eq
 8007e98:	2301      	moveq	r3, #1
 8007e9a:	2300      	movne	r3, #0
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d015      	beq.n	8007ece <cppLoop+0x16e>
 8007ea2:	4869      	ldr	r0, [pc, #420]	; (8008048 <cppLoop+0x2e8>)
 8007ea4:	f00c fd21 	bl	80148ea <__cxa_guard_acquire>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bf14      	ite	ne
 8007eae:	2301      	movne	r3, #1
 8007eb0:	2300      	moveq	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <cppLoop+0x16e>
 8007eb8:	485b      	ldr	r0, [pc, #364]	; (8008028 <cppLoop+0x2c8>)
 8007eba:	f7fb ff75 	bl	8003da8 <_ZN9LineTrace9getKiSlowEv>
 8007ebe:	eef0 7a40 	vmov.f32	s15, s0
 8007ec2:	4b62      	ldr	r3, [pc, #392]	; (800804c <cppLoop+0x2ec>)
 8007ec4:	edc3 7a00 	vstr	s15, [r3]
 8007ec8:	485f      	ldr	r0, [pc, #380]	; (8008048 <cppLoop+0x2e8>)
 8007eca:	f00c fd1a 	bl	8014902 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007ece:	4b60      	ldr	r3, [pc, #384]	; (8008050 <cppLoop+0x2f0>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	f3bf 8f5b 	dmb	ish
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bf0c      	ite	eq
 8007ee0:	2301      	moveq	r3, #1
 8007ee2:	2300      	movne	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d015      	beq.n	8007f16 <cppLoop+0x1b6>
 8007eea:	4859      	ldr	r0, [pc, #356]	; (8008050 <cppLoop+0x2f0>)
 8007eec:	f00c fcfd 	bl	80148ea <__cxa_guard_acquire>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bf14      	ite	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	2300      	moveq	r3, #0
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <cppLoop+0x1b6>
 8007f00:	4849      	ldr	r0, [pc, #292]	; (8008028 <cppLoop+0x2c8>)
 8007f02:	f7fb ff60 	bl	8003dc6 <_ZN9LineTrace9getKdSlowEv>
 8007f06:	eef0 7a40 	vmov.f32	s15, s0
 8007f0a:	4b52      	ldr	r3, [pc, #328]	; (8008054 <cppLoop+0x2f4>)
 8007f0c:	edc3 7a00 	vstr	s15, [r3]
 8007f10:	484f      	ldr	r0, [pc, #316]	; (8008050 <cppLoop+0x2f0>)
 8007f12:	f00c fcf6 	bl	8014902 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007f16:	4b50      	ldr	r3, [pc, #320]	; (8008058 <cppLoop+0x2f8>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	f3bf 8f5b 	dmb	ish
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	bf0c      	ite	eq
 8007f28:	2301      	moveq	r3, #1
 8007f2a:	2300      	movne	r3, #0
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d015      	beq.n	8007f5e <cppLoop+0x1fe>
 8007f32:	4849      	ldr	r0, [pc, #292]	; (8008058 <cppLoop+0x2f8>)
 8007f34:	f00c fcd9 	bl	80148ea <__cxa_guard_acquire>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bf14      	ite	ne
 8007f3e:	2301      	movne	r3, #1
 8007f40:	2300      	moveq	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00a      	beq.n	8007f5e <cppLoop+0x1fe>
 8007f48:	4837      	ldr	r0, [pc, #220]	; (8008028 <cppLoop+0x2c8>)
 8007f4a:	f7fb ffaa 	bl	8003ea2 <_ZN9LineTrace17getTargetVelocityEv>
 8007f4e:	eef0 7a40 	vmov.f32	s15, s0
 8007f52:	4b42      	ldr	r3, [pc, #264]	; (800805c <cppLoop+0x2fc>)
 8007f54:	edc3 7a00 	vstr	s15, [r3]
 8007f58:	483f      	ldr	r0, [pc, #252]	; (8008058 <cppLoop+0x2f8>)
 8007f5a:	f00c fcd2 	bl	8014902 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007f5e:	4b40      	ldr	r3, [pc, #256]	; (8008060 <cppLoop+0x300>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	f3bf 8f5b 	dmb	ish
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bf0c      	ite	eq
 8007f70:	2301      	moveq	r3, #1
 8007f72:	2300      	movne	r3, #0
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d015      	beq.n	8007fa6 <cppLoop+0x246>
 8007f7a:	4839      	ldr	r0, [pc, #228]	; (8008060 <cppLoop+0x300>)
 8007f7c:	f00c fcb5 	bl	80148ea <__cxa_guard_acquire>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	bf14      	ite	ne
 8007f86:	2301      	movne	r3, #1
 8007f88:	2300      	moveq	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00a      	beq.n	8007fa6 <cppLoop+0x246>
 8007f90:	4825      	ldr	r0, [pc, #148]	; (8008028 <cppLoop+0x2c8>)
 8007f92:	f7fb ff96 	bl	8003ec2 <_ZN9LineTrace14getMaxVelocityEv>
 8007f96:	eef0 7a40 	vmov.f32	s15, s0
 8007f9a:	4b32      	ldr	r3, [pc, #200]	; (8008064 <cppLoop+0x304>)
 8007f9c:	edc3 7a00 	vstr	s15, [r3]
 8007fa0:	482f      	ldr	r0, [pc, #188]	; (8008060 <cppLoop+0x300>)
 8007fa2:	f00c fcae 	bl	8014902 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007fa6:	4b30      	ldr	r3, [pc, #192]	; (8008068 <cppLoop+0x308>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	f3bf 8f5b 	dmb	ish
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	bf0c      	ite	eq
 8007fb8:	2301      	moveq	r3, #1
 8007fba:	2300      	movne	r3, #0
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d015      	beq.n	8007fee <cppLoop+0x28e>
 8007fc2:	4829      	ldr	r0, [pc, #164]	; (8008068 <cppLoop+0x308>)
 8007fc4:	f00c fc91 	bl	80148ea <__cxa_guard_acquire>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bf14      	ite	ne
 8007fce:	2301      	movne	r3, #1
 8007fd0:	2300      	moveq	r3, #0
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <cppLoop+0x28e>
 8007fd8:	4813      	ldr	r0, [pc, #76]	; (8008028 <cppLoop+0x2c8>)
 8007fda:	f7fb ff82 	bl	8003ee2 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007fde:	eef0 7a40 	vmov.f32	s15, s0
 8007fe2:	4b22      	ldr	r3, [pc, #136]	; (800806c <cppLoop+0x30c>)
 8007fe4:	edc3 7a00 	vstr	s15, [r3]
 8007fe8:	481f      	ldr	r0, [pc, #124]	; (8008068 <cppLoop+0x308>)
 8007fea:	f00c fc8a 	bl	8014902 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007fee:	4b20      	ldr	r3, [pc, #128]	; (8008070 <cppLoop+0x310>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	f3bf 8f5b 	dmb	ish
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bf0c      	ite	eq
 8008000:	2301      	moveq	r3, #1
 8008002:	2300      	movne	r3, #0
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d03f      	beq.n	800808a <cppLoop+0x32a>
 800800a:	4819      	ldr	r0, [pc, #100]	; (8008070 <cppLoop+0x310>)
 800800c:	f00c fc6d 	bl	80148ea <__cxa_guard_acquire>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	bf14      	ite	ne
 8008016:	2301      	movne	r3, #1
 8008018:	2300      	moveq	r3, #0
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d034      	beq.n	800808a <cppLoop+0x32a>
 8008020:	e028      	b.n	8008074 <cppLoop+0x314>
 8008022:	bf00      	nop
 8008024:	200423e8 	.word	0x200423e8
 8008028:	2001db64 	.word	0x2001db64
 800802c:	200423e4 	.word	0x200423e4
 8008030:	200423f0 	.word	0x200423f0
 8008034:	200423ec 	.word	0x200423ec
 8008038:	200423f8 	.word	0x200423f8
 800803c:	200423f4 	.word	0x200423f4
 8008040:	20042400 	.word	0x20042400
 8008044:	200423fc 	.word	0x200423fc
 8008048:	20042408 	.word	0x20042408
 800804c:	20042404 	.word	0x20042404
 8008050:	20042410 	.word	0x20042410
 8008054:	2004240c 	.word	0x2004240c
 8008058:	20042418 	.word	0x20042418
 800805c:	20042414 	.word	0x20042414
 8008060:	20042420 	.word	0x20042420
 8008064:	2004241c 	.word	0x2004241c
 8008068:	20042428 	.word	0x20042428
 800806c:	20042424 	.word	0x20042424
 8008070:	20042430 	.word	0x20042430
 8008074:	48b6      	ldr	r0, [pc, #728]	; (8008350 <cppLoop+0x5f0>)
 8008076:	f7fb ff44 	bl	8003f02 <_ZN9LineTrace14getMinVelocityEv>
 800807a:	eef0 7a40 	vmov.f32	s15, s0
 800807e:	4bb5      	ldr	r3, [pc, #724]	; (8008354 <cppLoop+0x5f4>)
 8008080:	edc3 7a00 	vstr	s15, [r3]
 8008084:	48b4      	ldr	r0, [pc, #720]	; (8008358 <cppLoop+0x5f8>)
 8008086:	f00c fc3c 	bl	8014902 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 800808a:	4bb4      	ldr	r3, [pc, #720]	; (800835c <cppLoop+0x5fc>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	f3bf 8f5b 	dmb	ish
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	bf0c      	ite	eq
 800809c:	2301      	moveq	r3, #1
 800809e:	2300      	movne	r3, #0
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d015      	beq.n	80080d2 <cppLoop+0x372>
 80080a6:	48ad      	ldr	r0, [pc, #692]	; (800835c <cppLoop+0x5fc>)
 80080a8:	f00c fc1f 	bl	80148ea <__cxa_guard_acquire>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bf14      	ite	ne
 80080b2:	2301      	movne	r3, #1
 80080b4:	2300      	moveq	r3, #0
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <cppLoop+0x372>
 80080bc:	48a4      	ldr	r0, [pc, #656]	; (8008350 <cppLoop+0x5f0>)
 80080be:	f7fb ff30 	bl	8003f22 <_ZN9LineTrace15getMinVelocity2Ev>
 80080c2:	eef0 7a40 	vmov.f32	s15, s0
 80080c6:	4ba6      	ldr	r3, [pc, #664]	; (8008360 <cppLoop+0x600>)
 80080c8:	edc3 7a00 	vstr	s15, [r3]
 80080cc:	48a3      	ldr	r0, [pc, #652]	; (800835c <cppLoop+0x5fc>)
 80080ce:	f00c fc18 	bl	8014902 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 80080d2:	4ba4      	ldr	r3, [pc, #656]	; (8008364 <cppLoop+0x604>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	f3bf 8f5b 	dmb	ish
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bf0c      	ite	eq
 80080e4:	2301      	moveq	r3, #1
 80080e6:	2300      	movne	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d015      	beq.n	800811a <cppLoop+0x3ba>
 80080ee:	489d      	ldr	r0, [pc, #628]	; (8008364 <cppLoop+0x604>)
 80080f0:	f00c fbfb 	bl	80148ea <__cxa_guard_acquire>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	bf14      	ite	ne
 80080fa:	2301      	movne	r3, #1
 80080fc:	2300      	moveq	r3, #0
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <cppLoop+0x3ba>
 8008104:	4892      	ldr	r0, [pc, #584]	; (8008350 <cppLoop+0x5f0>)
 8008106:	f7fb ff50 	bl	8003faa <_ZN9LineTrace9getMaxAccEv>
 800810a:	eef0 7a40 	vmov.f32	s15, s0
 800810e:	4b96      	ldr	r3, [pc, #600]	; (8008368 <cppLoop+0x608>)
 8008110:	edc3 7a00 	vstr	s15, [r3]
 8008114:	4893      	ldr	r0, [pc, #588]	; (8008364 <cppLoop+0x604>)
 8008116:	f00c fbf4 	bl	8014902 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 800811a:	4b94      	ldr	r3, [pc, #592]	; (800836c <cppLoop+0x60c>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	f3bf 8f5b 	dmb	ish
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	bf0c      	ite	eq
 800812c:	2301      	moveq	r3, #1
 800812e:	2300      	movne	r3, #0
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d015      	beq.n	8008162 <cppLoop+0x402>
 8008136:	488d      	ldr	r0, [pc, #564]	; (800836c <cppLoop+0x60c>)
 8008138:	f00c fbd7 	bl	80148ea <__cxa_guard_acquire>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	bf14      	ite	ne
 8008142:	2301      	movne	r3, #1
 8008144:	2300      	moveq	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <cppLoop+0x402>
 800814c:	4880      	ldr	r0, [pc, #512]	; (8008350 <cppLoop+0x5f0>)
 800814e:	f7fb ff62 	bl	8004016 <_ZN9LineTrace9getMaxDecEv>
 8008152:	eef0 7a40 	vmov.f32	s15, s0
 8008156:	4b86      	ldr	r3, [pc, #536]	; (8008370 <cppLoop+0x610>)
 8008158:	edc3 7a00 	vstr	s15, [r3]
 800815c:	4883      	ldr	r0, [pc, #524]	; (800836c <cppLoop+0x60c>)
 800815e:	f00c fbd0 	bl	8014902 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8008162:	4b84      	ldr	r3, [pc, #528]	; (8008374 <cppLoop+0x614>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	f3bf 8f5b 	dmb	ish
 800816a:	b2db      	uxtb	r3, r3
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	bf0c      	ite	eq
 8008174:	2301      	moveq	r3, #1
 8008176:	2300      	movne	r3, #0
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d015      	beq.n	80081aa <cppLoop+0x44a>
 800817e:	487d      	ldr	r0, [pc, #500]	; (8008374 <cppLoop+0x614>)
 8008180:	f00c fbb3 	bl	80148ea <__cxa_guard_acquire>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	bf14      	ite	ne
 800818a:	2301      	movne	r3, #1
 800818c:	2300      	moveq	r3, #0
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <cppLoop+0x44a>
 8008194:	486e      	ldr	r0, [pc, #440]	; (8008350 <cppLoop+0x5f0>)
 8008196:	f7fb ff2c 	bl	8003ff2 <_ZN9LineTrace10getMaxAcc2Ev>
 800819a:	eef0 7a40 	vmov.f32	s15, s0
 800819e:	4b76      	ldr	r3, [pc, #472]	; (8008378 <cppLoop+0x618>)
 80081a0:	edc3 7a00 	vstr	s15, [r3]
 80081a4:	4873      	ldr	r0, [pc, #460]	; (8008374 <cppLoop+0x614>)
 80081a6:	f00c fbac 	bl	8014902 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 80081aa:	4b74      	ldr	r3, [pc, #464]	; (800837c <cppLoop+0x61c>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	f3bf 8f5b 	dmb	ish
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	bf0c      	ite	eq
 80081bc:	2301      	moveq	r3, #1
 80081be:	2300      	movne	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d015      	beq.n	80081f2 <cppLoop+0x492>
 80081c6:	486d      	ldr	r0, [pc, #436]	; (800837c <cppLoop+0x61c>)
 80081c8:	f00c fb8f 	bl	80148ea <__cxa_guard_acquire>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bf14      	ite	ne
 80081d2:	2301      	movne	r3, #1
 80081d4:	2300      	moveq	r3, #0
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <cppLoop+0x492>
 80081dc:	485c      	ldr	r0, [pc, #368]	; (8008350 <cppLoop+0x5f0>)
 80081de:	f7fb fef6 	bl	8003fce <_ZN9LineTrace10getMaxDec2Ev>
 80081e2:	eef0 7a40 	vmov.f32	s15, s0
 80081e6:	4b66      	ldr	r3, [pc, #408]	; (8008380 <cppLoop+0x620>)
 80081e8:	edc3 7a00 	vstr	s15, [r3]
 80081ec:	4863      	ldr	r0, [pc, #396]	; (800837c <cppLoop+0x61c>)
 80081ee:	f00c fb88 	bl	8014902 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 80081f2:	4864      	ldr	r0, [pc, #400]	; (8008384 <cppLoop+0x624>)
 80081f4:	f7fd f9aa 	bl	800554c <_ZN12RotarySwitch8getValueEv>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b0f      	cmp	r3, #15
 80081fc:	f201 8546 	bhi.w	8009c8c <cppLoop+0x1f2c>
 8008200:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <cppLoop+0x4a8>)
 8008202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008206:	bf00      	nop
 8008208:	08008249 	.word	0x08008249
 800820c:	080085cd 	.word	0x080085cd
 8008210:	080086e9 	.word	0x080086e9
 8008214:	0800883b 	.word	0x0800883b
 8008218:	08008915 	.word	0x08008915
 800821c:	08008ba5 	.word	0x08008ba5
 8008220:	08008ce1 	.word	0x08008ce1
 8008224:	08008f65 	.word	0x08008f65
 8008228:	080091af 	.word	0x080091af
 800822c:	0800943f 	.word	0x0800943f
 8008230:	080094fb 	.word	0x080094fb
 8008234:	080095f1 	.word	0x080095f1
 8008238:	08009677 	.word	0x08009677
 800823c:	0800973d 	.word	0x0800973d
 8008240:	08009803 	.word	0x08009803
 8008244:	0800991d 	.word	0x0800991d
	case 0:
		led.fullColor('W');
 8008248:	2157      	movs	r1, #87	; 0x57
 800824a:	484f      	ldr	r0, [pc, #316]	; (8008388 <cppLoop+0x628>)
 800824c:	f7fa f802 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008250:	f7f8 ff26 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008254:	2100      	movs	r1, #0
 8008256:	2000      	movs	r0, #0
 8008258:	f7f8 ff32 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 800825c:	483c      	ldr	r0, [pc, #240]	; (8008350 <cppLoop+0x5f0>)
 800825e:	f7fb fd94 	bl	8003d8a <_ZN9LineTrace9getKpSlowEv>
 8008262:	eeb0 7a40 	vmov.f32	s14, s0
 8008266:	eddf 7a49 	vldr	s15, [pc, #292]	; 800838c <cppLoop+0x62c>
 800826a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826e:	eeb0 0a67 	vmov.f32	s0, s15
 8008272:	f7fa fc1b 	bl	8002aac <_ZSt3absf>
 8008276:	ee10 3a10 	vmov	r3, s0
 800827a:	4618      	mov	r0, r3
 800827c:	f7f8 f97c 	bl	8000578 <__aeabi_f2d>
 8008280:	4603      	mov	r3, r0
 8008282:	460c      	mov	r4, r1
 8008284:	461a      	mov	r2, r3
 8008286:	4623      	mov	r3, r4
 8008288:	4841      	ldr	r0, [pc, #260]	; (8008390 <cppLoop+0x630>)
 800828a:	f7f8 ff43 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800828e:	2101      	movs	r1, #1
 8008290:	2000      	movs	r0, #0
 8008292:	f7f8 ff15 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 8008296:	482e      	ldr	r0, [pc, #184]	; (8008350 <cppLoop+0x5f0>)
 8008298:	f7fb fd86 	bl	8003da8 <_ZN9LineTrace9getKiSlowEv>
 800829c:	eeb0 7a40 	vmov.f32	s14, s0
 80082a0:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8008394 <cppLoop+0x634>
 80082a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a8:	eeb0 0a67 	vmov.f32	s0, s15
 80082ac:	f7fa fbfe 	bl	8002aac <_ZSt3absf>
 80082b0:	ee10 3a10 	vmov	r3, s0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7f8 f95f 	bl	8000578 <__aeabi_f2d>
 80082ba:	4605      	mov	r5, r0
 80082bc:	460e      	mov	r6, r1
 80082be:	4824      	ldr	r0, [pc, #144]	; (8008350 <cppLoop+0x5f0>)
 80082c0:	f7fb fd81 	bl	8003dc6 <_ZN9LineTrace9getKdSlowEv>
 80082c4:	eeb0 7a40 	vmov.f32	s14, s0
 80082c8:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008398 <cppLoop+0x638>
 80082cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d0:	eeb0 0a67 	vmov.f32	s0, s15
 80082d4:	f7fa fbea 	bl	8002aac <_ZSt3absf>
 80082d8:	ee10 3a10 	vmov	r3, s0
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f8 f94b 	bl	8000578 <__aeabi_f2d>
 80082e2:	4603      	mov	r3, r0
 80082e4:	460c      	mov	r4, r1
 80082e6:	e9cd 3400 	strd	r3, r4, [sp]
 80082ea:	462a      	mov	r2, r5
 80082ec:	4633      	mov	r3, r6
 80082ee:	482b      	ldr	r0, [pc, #172]	; (800839c <cppLoop+0x63c>)
 80082f0:	f7f8 ff10 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80082f4:	482a      	ldr	r0, [pc, #168]	; (80083a0 <cppLoop+0x640>)
 80082f6:	f7f9 ff49 	bl	800218c <_ZN8JoyStick8getValueEv>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	bf0c      	ite	eq
 8008300:	2301      	moveq	r3, #1
 8008302:	2300      	movne	r3, #0
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d04e      	beq.n	80083a8 <cppLoop+0x648>
			led.LR(-1, 1);
 800830a:	2201      	movs	r2, #1
 800830c:	f04f 31ff 	mov.w	r1, #4294967295
 8008310:	481d      	ldr	r0, [pc, #116]	; (8008388 <cppLoop+0x628>)
 8008312:	f7fa f85b 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008316:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800831a:	f001 fe01 	bl	8009f20 <HAL_Delay>

			selector++;
 800831e:	4b21      	ldr	r3, [pc, #132]	; (80083a4 <cppLoop+0x644>)
 8008320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008324:	b29b      	uxth	r3, r3
 8008326:	3301      	adds	r3, #1
 8008328:	b29b      	uxth	r3, r3
 800832a:	b21a      	sxth	r2, r3
 800832c:	4b1d      	ldr	r3, [pc, #116]	; (80083a4 <cppLoop+0x644>)
 800832e:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8008330:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <cppLoop+0x644>)
 8008332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008336:	2b02      	cmp	r3, #2
 8008338:	dd02      	ble.n	8008340 <cppLoop+0x5e0>
 800833a:	4b1a      	ldr	r3, [pc, #104]	; (80083a4 <cppLoop+0x644>)
 800833c:	2200      	movs	r2, #0
 800833e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008340:	2200      	movs	r2, #0
 8008342:	f04f 31ff 	mov.w	r1, #4294967295
 8008346:	4810      	ldr	r0, [pc, #64]	; (8008388 <cppLoop+0x628>)
 8008348:	f7fa f840 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 800834c:	f001 bca0 	b.w	8009c90 <cppLoop+0x1f30>
 8008350:	2001db64 	.word	0x2001db64
 8008354:	2004242c 	.word	0x2004242c
 8008358:	20042430 	.word	0x20042430
 800835c:	20042438 	.word	0x20042438
 8008360:	20042434 	.word	0x20042434
 8008364:	20042440 	.word	0x20042440
 8008368:	2004243c 	.word	0x2004243c
 800836c:	20042448 	.word	0x20042448
 8008370:	20042444 	.word	0x20042444
 8008374:	20042450 	.word	0x20042450
 8008378:	2004244c 	.word	0x2004244c
 800837c:	20042458 	.word	0x20042458
 8008380:	20042454 	.word	0x20042454
 8008384:	200005c8 	.word	0x200005c8
 8008388:	200005d0 	.word	0x200005d0
 800838c:	447a0000 	.word	0x447a0000
 8008390:	0801a008 	.word	0x0801a008
 8008394:	42c80000 	.word	0x42c80000
 8008398:	461c4000 	.word	0x461c4000
 800839c:	0801a014 	.word	0x0801a014
 80083a0:	200005c4 	.word	0x200005c4
 80083a4:	200423da 	.word	0x200423da
		else if(joy_stick.getValue() == JOY_R){
 80083a8:	48bd      	ldr	r0, [pc, #756]	; (80086a0 <cppLoop+0x940>)
 80083aa:	f7f9 feef 	bl	800218c <_ZN8JoyStick8getValueEv>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b10      	cmp	r3, #16
 80083b2:	bf0c      	ite	eq
 80083b4:	2301      	moveq	r3, #1
 80083b6:	2300      	movne	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d059      	beq.n	8008472 <cppLoop+0x712>
			led.LR(-1, 1);
 80083be:	2201      	movs	r2, #1
 80083c0:	f04f 31ff 	mov.w	r1, #4294967295
 80083c4:	48b7      	ldr	r0, [pc, #732]	; (80086a4 <cppLoop+0x944>)
 80083c6:	f7fa f801 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80083ca:	2064      	movs	r0, #100	; 0x64
 80083cc:	f001 fda8 	bl	8009f20 <HAL_Delay>
			if(selector == 0){
 80083d0:	4bb5      	ldr	r3, [pc, #724]	; (80086a8 <cppLoop+0x948>)
 80083d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d113      	bne.n	8008402 <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 80083da:	4bb4      	ldr	r3, [pc, #720]	; (80086ac <cppLoop+0x94c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4618      	mov	r0, r3
 80083e0:	f7f8 f8ca 	bl	8000578 <__aeabi_f2d>
 80083e4:	a3a8      	add	r3, pc, #672	; (adr r3, 8008688 <cppLoop+0x928>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f7f7 ff67 	bl	80002bc <__adddf3>
 80083ee:	4603      	mov	r3, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	4618      	mov	r0, r3
 80083f4:	4621      	mov	r1, r4
 80083f6:	f7f8 fc0f 	bl	8000c18 <__aeabi_d2f>
 80083fa:	4602      	mov	r2, r0
 80083fc:	4bab      	ldr	r3, [pc, #684]	; (80086ac <cppLoop+0x94c>)
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	e02b      	b.n	800845a <cppLoop+0x6fa>
			else if(selector == 1){
 8008402:	4ba9      	ldr	r3, [pc, #676]	; (80086a8 <cppLoop+0x948>)
 8008404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d113      	bne.n	8008434 <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 800840c:	4ba8      	ldr	r3, [pc, #672]	; (80086b0 <cppLoop+0x950>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f7f8 f8b1 	bl	8000578 <__aeabi_f2d>
 8008416:	a39e      	add	r3, pc, #632	; (adr r3, 8008690 <cppLoop+0x930>)
 8008418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841c:	f7f7 ff4e 	bl	80002bc <__adddf3>
 8008420:	4603      	mov	r3, r0
 8008422:	460c      	mov	r4, r1
 8008424:	4618      	mov	r0, r3
 8008426:	4621      	mov	r1, r4
 8008428:	f7f8 fbf6 	bl	8000c18 <__aeabi_d2f>
 800842c:	4602      	mov	r2, r0
 800842e:	4ba0      	ldr	r3, [pc, #640]	; (80086b0 <cppLoop+0x950>)
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e012      	b.n	800845a <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 8008434:	4b9f      	ldr	r3, [pc, #636]	; (80086b4 <cppLoop+0x954>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4618      	mov	r0, r3
 800843a:	f7f8 f89d 	bl	8000578 <__aeabi_f2d>
 800843e:	a396      	add	r3, pc, #600	; (adr r3, 8008698 <cppLoop+0x938>)
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f7f7 ff3a 	bl	80002bc <__adddf3>
 8008448:	4603      	mov	r3, r0
 800844a:	460c      	mov	r4, r1
 800844c:	4618      	mov	r0, r3
 800844e:	4621      	mov	r1, r4
 8008450:	f7f8 fbe2 	bl	8000c18 <__aeabi_d2f>
 8008454:	4602      	mov	r2, r0
 8008456:	4b97      	ldr	r3, [pc, #604]	; (80086b4 <cppLoop+0x954>)
 8008458:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800845a:	2152      	movs	r1, #82	; 0x52
 800845c:	4891      	ldr	r0, [pc, #580]	; (80086a4 <cppLoop+0x944>)
 800845e:	f7f9 fef9 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008462:	2200      	movs	r2, #0
 8008464:	f04f 31ff 	mov.w	r1, #4294967295
 8008468:	488e      	ldr	r0, [pc, #568]	; (80086a4 <cppLoop+0x944>)
 800846a:	f7f9 ffaf 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800846e:	f001 bc0f 	b.w	8009c90 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_L){
 8008472:	488b      	ldr	r0, [pc, #556]	; (80086a0 <cppLoop+0x940>)
 8008474:	f7f9 fe8a 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008478:	4603      	mov	r3, r0
 800847a:	2b01      	cmp	r3, #1
 800847c:	bf0c      	ite	eq
 800847e:	2301      	moveq	r3, #1
 8008480:	2300      	movne	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d059      	beq.n	800853c <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008488:	2201      	movs	r2, #1
 800848a:	f04f 31ff 	mov.w	r1, #4294967295
 800848e:	4885      	ldr	r0, [pc, #532]	; (80086a4 <cppLoop+0x944>)
 8008490:	f7f9 ff9c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008494:	2064      	movs	r0, #100	; 0x64
 8008496:	f001 fd43 	bl	8009f20 <HAL_Delay>
			if(selector == 0){
 800849a:	4b83      	ldr	r3, [pc, #524]	; (80086a8 <cppLoop+0x948>)
 800849c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d113      	bne.n	80084cc <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 80084a4:	4b81      	ldr	r3, [pc, #516]	; (80086ac <cppLoop+0x94c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7f8 f865 	bl	8000578 <__aeabi_f2d>
 80084ae:	a376      	add	r3, pc, #472	; (adr r3, 8008688 <cppLoop+0x928>)
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f7 ff00 	bl	80002b8 <__aeabi_dsub>
 80084b8:	4603      	mov	r3, r0
 80084ba:	460c      	mov	r4, r1
 80084bc:	4618      	mov	r0, r3
 80084be:	4621      	mov	r1, r4
 80084c0:	f7f8 fbaa 	bl	8000c18 <__aeabi_d2f>
 80084c4:	4602      	mov	r2, r0
 80084c6:	4b79      	ldr	r3, [pc, #484]	; (80086ac <cppLoop+0x94c>)
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	e02b      	b.n	8008524 <cppLoop+0x7c4>
			else if(selector == 1){
 80084cc:	4b76      	ldr	r3, [pc, #472]	; (80086a8 <cppLoop+0x948>)
 80084ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d113      	bne.n	80084fe <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 80084d6:	4b76      	ldr	r3, [pc, #472]	; (80086b0 <cppLoop+0x950>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7f8 f84c 	bl	8000578 <__aeabi_f2d>
 80084e0:	a36b      	add	r3, pc, #428	; (adr r3, 8008690 <cppLoop+0x930>)
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	f7f7 fee7 	bl	80002b8 <__aeabi_dsub>
 80084ea:	4603      	mov	r3, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	4618      	mov	r0, r3
 80084f0:	4621      	mov	r1, r4
 80084f2:	f7f8 fb91 	bl	8000c18 <__aeabi_d2f>
 80084f6:	4602      	mov	r2, r0
 80084f8:	4b6d      	ldr	r3, [pc, #436]	; (80086b0 <cppLoop+0x950>)
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	e012      	b.n	8008524 <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 80084fe:	4b6d      	ldr	r3, [pc, #436]	; (80086b4 <cppLoop+0x954>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4618      	mov	r0, r3
 8008504:	f7f8 f838 	bl	8000578 <__aeabi_f2d>
 8008508:	a363      	add	r3, pc, #396	; (adr r3, 8008698 <cppLoop+0x938>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f7 fed3 	bl	80002b8 <__aeabi_dsub>
 8008512:	4603      	mov	r3, r0
 8008514:	460c      	mov	r4, r1
 8008516:	4618      	mov	r0, r3
 8008518:	4621      	mov	r1, r4
 800851a:	f7f8 fb7d 	bl	8000c18 <__aeabi_d2f>
 800851e:	4602      	mov	r2, r0
 8008520:	4b64      	ldr	r3, [pc, #400]	; (80086b4 <cppLoop+0x954>)
 8008522:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008524:	2152      	movs	r1, #82	; 0x52
 8008526:	485f      	ldr	r0, [pc, #380]	; (80086a4 <cppLoop+0x944>)
 8008528:	f7f9 fe94 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800852c:	2200      	movs	r2, #0
 800852e:	f04f 31ff 	mov.w	r1, #4294967295
 8008532:	485c      	ldr	r0, [pc, #368]	; (80086a4 <cppLoop+0x944>)
 8008534:	f7f9 ff4a 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008538:	f001 bbaa 	b.w	8009c90 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_C){
 800853c:	4858      	ldr	r0, [pc, #352]	; (80086a0 <cppLoop+0x940>)
 800853e:	f7f9 fe25 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008542:	4603      	mov	r3, r0
 8008544:	2b02      	cmp	r3, #2
 8008546:	bf0c      	ite	eq
 8008548:	2301      	moveq	r3, #1
 800854a:	2300      	movne	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	f001 839e 	beq.w	8009c90 <cppLoop+0x1f30>
			led.LR(-1, 1);
 8008554:	2201      	movs	r2, #1
 8008556:	f04f 31ff 	mov.w	r1, #4294967295
 800855a:	4852      	ldr	r0, [pc, #328]	; (80086a4 <cppLoop+0x944>)
 800855c:	f7f9 ff36 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008560:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008564:	f001 fcdc 	bl	8009f20 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008568:	2300      	movs	r3, #0
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4b4f      	ldr	r3, [pc, #316]	; (80086ac <cppLoop+0x94c>)
 800856e:	2201      	movs	r2, #1
 8008570:	4951      	ldr	r1, [pc, #324]	; (80086b8 <cppLoop+0x958>)
 8008572:	4852      	ldr	r0, [pc, #328]	; (80086bc <cppLoop+0x95c>)
 8008574:	f7f9 f982 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008578:	2300      	movs	r3, #0
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	4b4c      	ldr	r3, [pc, #304]	; (80086b0 <cppLoop+0x950>)
 800857e:	2201      	movs	r2, #1
 8008580:	494f      	ldr	r1, [pc, #316]	; (80086c0 <cppLoop+0x960>)
 8008582:	484e      	ldr	r0, [pc, #312]	; (80086bc <cppLoop+0x95c>)
 8008584:	f7f9 f97a 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008588:	2300      	movs	r3, #0
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	4b49      	ldr	r3, [pc, #292]	; (80086b4 <cppLoop+0x954>)
 800858e:	2201      	movs	r2, #1
 8008590:	494c      	ldr	r1, [pc, #304]	; (80086c4 <cppLoop+0x964>)
 8008592:	484a      	ldr	r0, [pc, #296]	; (80086bc <cppLoop+0x95c>)
 8008594:	f7f9 f972 	bl	800187c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008598:	4b44      	ldr	r3, [pc, #272]	; (80086ac <cppLoop+0x94c>)
 800859a:	edd3 7a00 	vldr	s15, [r3]
 800859e:	4b44      	ldr	r3, [pc, #272]	; (80086b0 <cppLoop+0x950>)
 80085a0:	ed93 7a00 	vldr	s14, [r3]
 80085a4:	4b43      	ldr	r3, [pc, #268]	; (80086b4 <cppLoop+0x954>)
 80085a6:	edd3 6a00 	vldr	s13, [r3]
 80085aa:	eeb0 1a66 	vmov.f32	s2, s13
 80085ae:	eef0 0a47 	vmov.f32	s1, s14
 80085b2:	eeb0 0a67 	vmov.f32	s0, s15
 80085b6:	4844      	ldr	r0, [pc, #272]	; (80086c8 <cppLoop+0x968>)
 80085b8:	f7fb fbce 	bl	8003d58 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 80085bc:	2200      	movs	r2, #0
 80085be:	f04f 31ff 	mov.w	r1, #4294967295
 80085c2:	4838      	ldr	r0, [pc, #224]	; (80086a4 <cppLoop+0x944>)
 80085c4:	f7f9 ff02 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80085c8:	f001 bb62 	b.w	8009c90 <cppLoop+0x1f30>

	case 1:
		led.fullColor('C');
 80085cc:	2143      	movs	r1, #67	; 0x43
 80085ce:	4835      	ldr	r0, [pc, #212]	; (80086a4 <cppLoop+0x944>)
 80085d0:	f7f9 fe40 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80085d4:	f7f8 fd64 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80085d8:	2100      	movs	r1, #0
 80085da:	2000      	movs	r0, #0
 80085dc:	f7f8 fd70 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80085e0:	483a      	ldr	r0, [pc, #232]	; (80086cc <cppLoop+0x96c>)
 80085e2:	f7f8 fd97 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085e6:	2101      	movs	r1, #1
 80085e8:	2000      	movs	r0, #0
 80085ea:	f7f8 fd69 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80085ee:	4b38      	ldr	r3, [pc, #224]	; (80086d0 <cppLoop+0x970>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7f7 ffc0 	bl	8000578 <__aeabi_f2d>
 80085f8:	4603      	mov	r3, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	461a      	mov	r2, r3
 80085fe:	4623      	mov	r3, r4
 8008600:	4834      	ldr	r0, [pc, #208]	; (80086d4 <cppLoop+0x974>)
 8008602:	f7f8 fd87 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008606:	4826      	ldr	r0, [pc, #152]	; (80086a0 <cppLoop+0x940>)
 8008608:	f7f9 fdc0 	bl	800218c <_ZN8JoyStick8getValueEv>
 800860c:	4603      	mov	r3, r0
 800860e:	2b02      	cmp	r3, #2
 8008610:	bf0c      	ite	eq
 8008612:	2301      	moveq	r3, #1
 8008614:	2300      	movne	r3, #0
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	f001 833b 	beq.w	8009c94 <cppLoop+0x1f34>
			HAL_Delay(500);
 800861e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008622:	f001 fc7d 	bl	8009f20 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8008626:	4b2a      	ldr	r3, [pc, #168]	; (80086d0 <cppLoop+0x970>)
 8008628:	edd3 7a00 	vldr	s15, [r3]
 800862c:	eeb0 0a67 	vmov.f32	s0, s15
 8008630:	4825      	ldr	r0, [pc, #148]	; (80086c8 <cppLoop+0x968>)
 8008632:	f7fb fbe6 	bl	8003e02 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008636:	f04f 32ff 	mov.w	r2, #4294967295
 800863a:	2101      	movs	r1, #1
 800863c:	4819      	ldr	r0, [pc, #100]	; (80086a4 <cppLoop+0x944>)
 800863e:	f7f9 fec5 	bl	80023cc <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 8008642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008646:	f001 fc6b 	bl	8009f20 <HAL_Delay>
			logger.start();
 800864a:	4823      	ldr	r0, [pc, #140]	; (80086d8 <cppLoop+0x978>)
 800864c:	f7fc fbbd 	bl	8004dca <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8008650:	2100      	movs	r1, #0
 8008652:	481d      	ldr	r0, [pc, #116]	; (80086c8 <cppLoop+0x968>)
 8008654:	f7fb fe26 	bl	80042a4 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8008658:	481b      	ldr	r0, [pc, #108]	; (80086c8 <cppLoop+0x968>)
 800865a:	f7fb fe67 	bl	800432c <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 800865e:	481e      	ldr	r0, [pc, #120]	; (80086d8 <cppLoop+0x978>)
 8008660:	f7fc fbc3 	bl	8004dea <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 8008664:	4a1d      	ldr	r2, [pc, #116]	; (80086dc <cppLoop+0x97c>)
 8008666:	491e      	ldr	r1, [pc, #120]	; (80086e0 <cppLoop+0x980>)
 8008668:	481b      	ldr	r0, [pc, #108]	; (80086d8 <cppLoop+0x978>)
 800866a:	f7fc fab9 	bl	8004be0 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 800866e:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <cppLoop+0x984>)
 8008670:	491b      	ldr	r1, [pc, #108]	; (80086e0 <cppLoop+0x980>)
 8008672:	4819      	ldr	r0, [pc, #100]	; (80086d8 <cppLoop+0x978>)
 8008674:	f7fc faca 	bl	8004c0c <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 8008678:	f04f 32ff 	mov.w	r2, #4294967295
 800867c:	2100      	movs	r1, #0
 800867e:	4809      	ldr	r0, [pc, #36]	; (80086a4 <cppLoop+0x944>)
 8008680:	f7f9 fea4 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008684:	f001 bb06 	b.w	8009c94 <cppLoop+0x1f34>
 8008688:	88e368f1 	.word	0x88e368f1
 800868c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008690:	eb1c432d 	.word	0xeb1c432d
 8008694:	3f1a36e2 	.word	0x3f1a36e2
 8008698:	a0b5ed8d 	.word	0xa0b5ed8d
 800869c:	3eb0c6f7 	.word	0x3eb0c6f7
 80086a0:	200005c4 	.word	0x200005c4
 80086a4:	200005d0 	.word	0x200005d0
 80086a8:	200423da 	.word	0x200423da
 80086ac:	200423fc 	.word	0x200423fc
 80086b0:	20042404 	.word	0x20042404
 80086b4:	2004240c 	.word	0x2004240c
 80086b8:	0801a024 	.word	0x0801a024
 80086bc:	0801a030 	.word	0x0801a030
 80086c0:	0801a038 	.word	0x0801a038
 80086c4:	0801a044 	.word	0x0801a044
 80086c8:	2001db64 	.word	0x2001db64
 80086cc:	0801a050 	.word	0x0801a050
 80086d0:	20042414 	.word	0x20042414
 80086d4:	0801a05c 	.word	0x0801a05c
 80086d8:	200005f4 	.word	0x200005f4
 80086dc:	0801a068 	.word	0x0801a068
 80086e0:	0801a074 	.word	0x0801a074
 80086e4:	0801a080 	.word	0x0801a080

	case 2:
		led.fullColor('B');
 80086e8:	2142      	movs	r1, #66	; 0x42
 80086ea:	48b9      	ldr	r0, [pc, #740]	; (80089d0 <cppLoop+0xc70>)
 80086ec:	f7f9 fdb2 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80086f0:	f7f8 fcd6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80086f4:	2100      	movs	r1, #0
 80086f6:	2000      	movs	r0, #0
 80086f8:	f7f8 fce2 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80086fc:	48b5      	ldr	r0, [pc, #724]	; (80089d4 <cppLoop+0xc74>)
 80086fe:	f7f8 fd09 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008702:	2101      	movs	r1, #1
 8008704:	2000      	movs	r0, #0
 8008706:	f7f8 fcdb 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 800870a:	4bb3      	ldr	r3, [pc, #716]	; (80089d8 <cppLoop+0xc78>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	f7f7 ff32 	bl	8000578 <__aeabi_f2d>
 8008714:	4603      	mov	r3, r0
 8008716:	460c      	mov	r4, r1
 8008718:	461a      	mov	r2, r3
 800871a:	4623      	mov	r3, r4
 800871c:	48af      	ldr	r0, [pc, #700]	; (80089dc <cppLoop+0xc7c>)
 800871e:	f7f8 fcf9 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8008722:	48af      	ldr	r0, [pc, #700]	; (80089e0 <cppLoop+0xc80>)
 8008724:	f7f9 fd32 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008728:	4603      	mov	r3, r0
 800872a:	2b10      	cmp	r3, #16
 800872c:	bf0c      	ite	eq
 800872e:	2301      	moveq	r3, #1
 8008730:	2300      	movne	r3, #0
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b00      	cmp	r3, #0
 8008736:	d023      	beq.n	8008780 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008738:	2201      	movs	r2, #1
 800873a:	f04f 31ff 	mov.w	r1, #4294967295
 800873e:	48a4      	ldr	r0, [pc, #656]	; (80089d0 <cppLoop+0xc70>)
 8008740:	f7f9 fe44 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008744:	2064      	movs	r0, #100	; 0x64
 8008746:	f001 fbeb 	bl	8009f20 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 800874a:	4ba3      	ldr	r3, [pc, #652]	; (80089d8 <cppLoop+0xc78>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f7f7 ff12 	bl	8000578 <__aeabi_f2d>
 8008754:	a39c      	add	r3, pc, #624	; (adr r3, 80089c8 <cppLoop+0xc68>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f7f7 fdaf 	bl	80002bc <__adddf3>
 800875e:	4603      	mov	r3, r0
 8008760:	460c      	mov	r4, r1
 8008762:	4618      	mov	r0, r3
 8008764:	4621      	mov	r1, r4
 8008766:	f7f8 fa57 	bl	8000c18 <__aeabi_d2f>
 800876a:	4602      	mov	r2, r0
 800876c:	4b9a      	ldr	r3, [pc, #616]	; (80089d8 <cppLoop+0xc78>)
 800876e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008770:	2200      	movs	r2, #0
 8008772:	f04f 31ff 	mov.w	r1, #4294967295
 8008776:	4896      	ldr	r0, [pc, #600]	; (80089d0 <cppLoop+0xc70>)
 8008778:	f7f9 fe28 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800877c:	f001 ba8c 	b.w	8009c98 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_L){
 8008780:	4897      	ldr	r0, [pc, #604]	; (80089e0 <cppLoop+0xc80>)
 8008782:	f7f9 fd03 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008786:	4603      	mov	r3, r0
 8008788:	2b01      	cmp	r3, #1
 800878a:	bf0c      	ite	eq
 800878c:	2301      	moveq	r3, #1
 800878e:	2300      	movne	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d023      	beq.n	80087de <cppLoop+0xa7e>
			led.LR(-1, 1);
 8008796:	2201      	movs	r2, #1
 8008798:	f04f 31ff 	mov.w	r1, #4294967295
 800879c:	488c      	ldr	r0, [pc, #560]	; (80089d0 <cppLoop+0xc70>)
 800879e:	f7f9 fe15 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80087a2:	2064      	movs	r0, #100	; 0x64
 80087a4:	f001 fbbc 	bl	8009f20 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 80087a8:	4b8b      	ldr	r3, [pc, #556]	; (80089d8 <cppLoop+0xc78>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7f7 fee3 	bl	8000578 <__aeabi_f2d>
 80087b2:	a385      	add	r3, pc, #532	; (adr r3, 80089c8 <cppLoop+0xc68>)
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f7f7 fd7e 	bl	80002b8 <__aeabi_dsub>
 80087bc:	4603      	mov	r3, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	4618      	mov	r0, r3
 80087c2:	4621      	mov	r1, r4
 80087c4:	f7f8 fa28 	bl	8000c18 <__aeabi_d2f>
 80087c8:	4602      	mov	r2, r0
 80087ca:	4b83      	ldr	r3, [pc, #524]	; (80089d8 <cppLoop+0xc78>)
 80087cc:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80087ce:	2200      	movs	r2, #0
 80087d0:	f04f 31ff 	mov.w	r1, #4294967295
 80087d4:	487e      	ldr	r0, [pc, #504]	; (80089d0 <cppLoop+0xc70>)
 80087d6:	f7f9 fdf9 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80087da:	f001 ba5d 	b.w	8009c98 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_C){
 80087de:	4880      	ldr	r0, [pc, #512]	; (80089e0 <cppLoop+0xc80>)
 80087e0:	f7f9 fcd4 	bl	800218c <_ZN8JoyStick8getValueEv>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	bf0c      	ite	eq
 80087ea:	2301      	moveq	r3, #1
 80087ec:	2300      	movne	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f001 8251 	beq.w	8009c98 <cppLoop+0x1f38>
			led.LR(-1, 1);
 80087f6:	2201      	movs	r2, #1
 80087f8:	f04f 31ff 	mov.w	r1, #4294967295
 80087fc:	4874      	ldr	r0, [pc, #464]	; (80089d0 <cppLoop+0xc70>)
 80087fe:	f7f9 fde5 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008802:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008806:	f001 fb8b 	bl	8009f20 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 800880a:	2300      	movs	r3, #0
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	4b72      	ldr	r3, [pc, #456]	; (80089d8 <cppLoop+0xc78>)
 8008810:	2201      	movs	r2, #1
 8008812:	4974      	ldr	r1, [pc, #464]	; (80089e4 <cppLoop+0xc84>)
 8008814:	4874      	ldr	r0, [pc, #464]	; (80089e8 <cppLoop+0xc88>)
 8008816:	f7f9 f831 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 800881a:	4b6f      	ldr	r3, [pc, #444]	; (80089d8 <cppLoop+0xc78>)
 800881c:	edd3 7a00 	vldr	s15, [r3]
 8008820:	eeb0 0a67 	vmov.f32	s0, s15
 8008824:	4871      	ldr	r0, [pc, #452]	; (80089ec <cppLoop+0xc8c>)
 8008826:	f7fb faec 	bl	8003e02 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 800882a:	2200      	movs	r2, #0
 800882c:	f04f 31ff 	mov.w	r1, #4294967295
 8008830:	4867      	ldr	r0, [pc, #412]	; (80089d0 <cppLoop+0xc70>)
 8008832:	f7f9 fdcb 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008836:	f001 ba2f 	b.w	8009c98 <cppLoop+0x1f38>

	case 3:
		led.fullColor('Y');
 800883a:	2159      	movs	r1, #89	; 0x59
 800883c:	4864      	ldr	r0, [pc, #400]	; (80089d0 <cppLoop+0xc70>)
 800883e:	f7f9 fd09 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008842:	f7f8 fc2d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008846:	2100      	movs	r1, #0
 8008848:	2000      	movs	r0, #0
 800884a:	f7f8 fc39 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 800884e:	4b68      	ldr	r3, [pc, #416]	; (80089f0 <cppLoop+0xc90>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f7f7 fe90 	bl	8000578 <__aeabi_f2d>
 8008858:	4603      	mov	r3, r0
 800885a:	460c      	mov	r4, r1
 800885c:	461a      	mov	r2, r3
 800885e:	4623      	mov	r3, r4
 8008860:	4864      	ldr	r0, [pc, #400]	; (80089f4 <cppLoop+0xc94>)
 8008862:	f7f8 fc57 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008866:	2101      	movs	r1, #1
 8008868:	2000      	movs	r0, #0
 800886a:	f7f8 fc29 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 800886e:	4b62      	ldr	r3, [pc, #392]	; (80089f8 <cppLoop+0xc98>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4618      	mov	r0, r3
 8008874:	f7f7 fe80 	bl	8000578 <__aeabi_f2d>
 8008878:	4603      	mov	r3, r0
 800887a:	460c      	mov	r4, r1
 800887c:	461a      	mov	r2, r3
 800887e:	4623      	mov	r3, r4
 8008880:	485e      	ldr	r0, [pc, #376]	; (80089fc <cppLoop+0xc9c>)
 8008882:	f7f8 fc47 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008886:	4856      	ldr	r0, [pc, #344]	; (80089e0 <cppLoop+0xc80>)
 8008888:	f7f9 fc80 	bl	800218c <_ZN8JoyStick8getValueEv>
 800888c:	4603      	mov	r3, r0
 800888e:	2b02      	cmp	r3, #2
 8008890:	bf0c      	ite	eq
 8008892:	2301      	moveq	r3, #1
 8008894:	2300      	movne	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	f001 81ff 	beq.w	8009c9c <cppLoop+0x1f3c>
			HAL_Delay(500);
 800889e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088a2:	f001 fb3d 	bl	8009f20 <HAL_Delay>

			led.LR(1, -1);
 80088a6:	f04f 32ff 	mov.w	r2, #4294967295
 80088aa:	2101      	movs	r1, #1
 80088ac:	4848      	ldr	r0, [pc, #288]	; (80089d0 <cppLoop+0xc70>)
 80088ae:	f7f9 fd8d 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80088b2:	2101      	movs	r1, #1
 80088b4:	484d      	ldr	r0, [pc, #308]	; (80089ec <cppLoop+0xc8c>)
 80088b6:	f7fb fcf5 	bl	80042a4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80088ba:	4b4f      	ldr	r3, [pc, #316]	; (80089f8 <cppLoop+0xc98>)
 80088bc:	edd3 7a00 	vldr	s15, [r3]
 80088c0:	eeb0 0a67 	vmov.f32	s0, s15
 80088c4:	4849      	ldr	r0, [pc, #292]	; (80089ec <cppLoop+0xc8c>)
 80088c6:	f7fb fa9c 	bl	8003e02 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80088ca:	4b49      	ldr	r3, [pc, #292]	; (80089f0 <cppLoop+0xc90>)
 80088cc:	edd3 7a00 	vldr	s15, [r3]
 80088d0:	eeb0 0a67 	vmov.f32	s0, s15
 80088d4:	4845      	ldr	r0, [pc, #276]	; (80089ec <cppLoop+0xc8c>)
 80088d6:	f7fb faa4 	bl	8003e22 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80088da:	4b47      	ldr	r3, [pc, #284]	; (80089f8 <cppLoop+0xc98>)
 80088dc:	edd3 7a00 	vldr	s15, [r3]
 80088e0:	eeb0 0a67 	vmov.f32	s0, s15
 80088e4:	4841      	ldr	r0, [pc, #260]	; (80089ec <cppLoop+0xc8c>)
 80088e6:	f7fb fabc 	bl	8003e62 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80088ea:	4840      	ldr	r0, [pc, #256]	; (80089ec <cppLoop+0xc8c>)
 80088ec:	f7fb fe1a 	bl	8004524 <_ZN9LineTrace20createVelocityTabeleEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80088f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088f4:	f001 fb14 	bl	8009f20 <HAL_Delay>

			line_trace.running();
 80088f8:	483c      	ldr	r0, [pc, #240]	; (80089ec <cppLoop+0xc8c>)
 80088fa:	f7fb fd17 	bl	800432c <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 80088fe:	4840      	ldr	r0, [pc, #256]	; (8008a00 <cppLoop+0xca0>)
 8008900:	f7f8 fd40 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8008904:	f04f 32ff 	mov.w	r2, #4294967295
 8008908:	2100      	movs	r1, #0
 800890a:	4831      	ldr	r0, [pc, #196]	; (80089d0 <cppLoop+0xc70>)
 800890c:	f7f9 fd5e 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008910:	f001 b9c4 	b.w	8009c9c <cppLoop+0x1f3c>

	case 4:
		led.fullColor('G');
 8008914:	2147      	movs	r1, #71	; 0x47
 8008916:	482e      	ldr	r0, [pc, #184]	; (80089d0 <cppLoop+0xc70>)
 8008918:	f7f9 fc9c 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800891c:	f7f8 fbc0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008920:	2100      	movs	r1, #0
 8008922:	2000      	movs	r0, #0
 8008924:	f7f8 fbcc 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008928:	4830      	ldr	r0, [pc, #192]	; (80089ec <cppLoop+0xc8c>)
 800892a:	f7fb faca 	bl	8003ec2 <_ZN9LineTrace14getMaxVelocityEv>
 800892e:	ee10 3a10 	vmov	r3, s0
 8008932:	4618      	mov	r0, r3
 8008934:	f7f7 fe20 	bl	8000578 <__aeabi_f2d>
 8008938:	4603      	mov	r3, r0
 800893a:	460c      	mov	r4, r1
 800893c:	461a      	mov	r2, r3
 800893e:	4623      	mov	r3, r4
 8008940:	482c      	ldr	r0, [pc, #176]	; (80089f4 <cppLoop+0xc94>)
 8008942:	f7f8 fbe7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008946:	2101      	movs	r1, #1
 8008948:	2000      	movs	r0, #0
 800894a:	f7f8 fbb9 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 800894e:	4827      	ldr	r0, [pc, #156]	; (80089ec <cppLoop+0xc8c>)
 8008950:	f7fb fad7 	bl	8003f02 <_ZN9LineTrace14getMinVelocityEv>
 8008954:	ee10 3a10 	vmov	r3, s0
 8008958:	4618      	mov	r0, r3
 800895a:	f7f7 fe0d 	bl	8000578 <__aeabi_f2d>
 800895e:	4603      	mov	r3, r0
 8008960:	460c      	mov	r4, r1
 8008962:	461a      	mov	r2, r3
 8008964:	4623      	mov	r3, r4
 8008966:	481d      	ldr	r0, [pc, #116]	; (80089dc <cppLoop+0xc7c>)
 8008968:	f7f8 fbd4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800896c:	481c      	ldr	r0, [pc, #112]	; (80089e0 <cppLoop+0xc80>)
 800896e:	f7f9 fc0d 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008972:	4603      	mov	r3, r0
 8008974:	2b08      	cmp	r3, #8
 8008976:	bf0c      	ite	eq
 8008978:	2301      	moveq	r3, #1
 800897a:	2300      	movne	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d042      	beq.n	8008a08 <cppLoop+0xca8>
			led.LR(-1, 1);
 8008982:	2201      	movs	r2, #1
 8008984:	f04f 31ff 	mov.w	r1, #4294967295
 8008988:	4811      	ldr	r0, [pc, #68]	; (80089d0 <cppLoop+0xc70>)
 800898a:	f7f9 fd1f 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800898e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008992:	f001 fac5 	bl	8009f20 <HAL_Delay>

			selector_vel++;
 8008996:	4b1b      	ldr	r3, [pc, #108]	; (8008a04 <cppLoop+0xca4>)
 8008998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800899c:	b29b      	uxth	r3, r3
 800899e:	3301      	adds	r3, #1
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	b21a      	sxth	r2, r3
 80089a4:	4b17      	ldr	r3, [pc, #92]	; (8008a04 <cppLoop+0xca4>)
 80089a6:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 80089a8:	4b16      	ldr	r3, [pc, #88]	; (8008a04 <cppLoop+0xca4>)
 80089aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	dd02      	ble.n	80089b8 <cppLoop+0xc58>
 80089b2:	4b14      	ldr	r3, [pc, #80]	; (8008a04 <cppLoop+0xca4>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80089b8:	2200      	movs	r2, #0
 80089ba:	f04f 31ff 	mov.w	r1, #4294967295
 80089be:	4804      	ldr	r0, [pc, #16]	; (80089d0 <cppLoop+0xc70>)
 80089c0:	f7f9 fd04 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80089c4:	f001 b96c 	b.w	8009ca0 <cppLoop+0x1f40>
 80089c8:	9999999a 	.word	0x9999999a
 80089cc:	3fb99999 	.word	0x3fb99999
 80089d0:	200005d0 	.word	0x200005d0
 80089d4:	0801a050 	.word	0x0801a050
 80089d8:	20042414 	.word	0x20042414
 80089dc:	0801a08c 	.word	0x0801a08c
 80089e0:	200005c4 	.word	0x200005c4
 80089e4:	0801a098 	.word	0x0801a098
 80089e8:	0801a030 	.word	0x0801a030
 80089ec:	2001db64 	.word	0x2001db64
 80089f0:	2004241c 	.word	0x2004241c
 80089f4:	0801a0a4 	.word	0x0801a0a4
 80089f8:	2004242c 	.word	0x2004242c
 80089fc:	0801a05c 	.word	0x0801a05c
 8008a00:	2001db60 	.word	0x2001db60
 8008a04:	200423e0 	.word	0x200423e0
		else if(joy_stick.getValue() == JOY_R){
 8008a08:	48a5      	ldr	r0, [pc, #660]	; (8008ca0 <cppLoop+0xf40>)
 8008a0a:	f7f9 fbbf 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b10      	cmp	r3, #16
 8008a12:	bf0c      	ite	eq
 8008a14:	2301      	moveq	r3, #1
 8008a16:	2300      	movne	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d03c      	beq.n	8008a98 <cppLoop+0xd38>
			led.LR(-1, 1);
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f04f 31ff 	mov.w	r1, #4294967295
 8008a24:	489f      	ldr	r0, [pc, #636]	; (8008ca4 <cppLoop+0xf44>)
 8008a26:	f7f9 fcd1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a2a:	2064      	movs	r0, #100	; 0x64
 8008a2c:	f001 fa78 	bl	8009f20 <HAL_Delay>
			if(selector_vel == 0)
 8008a30:	4b9d      	ldr	r3, [pc, #628]	; (8008ca8 <cppLoop+0xf48>)
 8008a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d113      	bne.n	8008a62 <cppLoop+0xd02>
				adj_max_velocity = adj_max_velocity + 0.1;
 8008a3a:	4b9c      	ldr	r3, [pc, #624]	; (8008cac <cppLoop+0xf4c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7f7 fd9a 	bl	8000578 <__aeabi_f2d>
 8008a44:	a394      	add	r3, pc, #592	; (adr r3, 8008c98 <cppLoop+0xf38>)
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f7f7 fc37 	bl	80002bc <__adddf3>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	4618      	mov	r0, r3
 8008a54:	4621      	mov	r1, r4
 8008a56:	f7f8 f8df 	bl	8000c18 <__aeabi_d2f>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	4b93      	ldr	r3, [pc, #588]	; (8008cac <cppLoop+0xf4c>)
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	e012      	b.n	8008a88 <cppLoop+0xd28>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008a62:	4b93      	ldr	r3, [pc, #588]	; (8008cb0 <cppLoop+0xf50>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f7 fd86 	bl	8000578 <__aeabi_f2d>
 8008a6c:	a38a      	add	r3, pc, #552	; (adr r3, 8008c98 <cppLoop+0xf38>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fc23 	bl	80002bc <__adddf3>
 8008a76:	4603      	mov	r3, r0
 8008a78:	460c      	mov	r4, r1
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	f7f8 f8cb 	bl	8000c18 <__aeabi_d2f>
 8008a82:	4602      	mov	r2, r0
 8008a84:	4b8a      	ldr	r3, [pc, #552]	; (8008cb0 <cppLoop+0xf50>)
 8008a86:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a8e:	4885      	ldr	r0, [pc, #532]	; (8008ca4 <cppLoop+0xf44>)
 8008a90:	f7f9 fc9c 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008a94:	f001 b904 	b.w	8009ca0 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_L){
 8008a98:	4881      	ldr	r0, [pc, #516]	; (8008ca0 <cppLoop+0xf40>)
 8008a9a:	f7f9 fb77 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	bf0c      	ite	eq
 8008aa4:	2301      	moveq	r3, #1
 8008aa6:	2300      	movne	r3, #0
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d03c      	beq.n	8008b28 <cppLoop+0xdc8>
			led.LR(-1, 1);
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ab4:	487b      	ldr	r0, [pc, #492]	; (8008ca4 <cppLoop+0xf44>)
 8008ab6:	f7f9 fc89 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008aba:	2064      	movs	r0, #100	; 0x64
 8008abc:	f001 fa30 	bl	8009f20 <HAL_Delay>
			if(selector_vel == 0)
 8008ac0:	4b79      	ldr	r3, [pc, #484]	; (8008ca8 <cppLoop+0xf48>)
 8008ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d113      	bne.n	8008af2 <cppLoop+0xd92>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008aca:	4b78      	ldr	r3, [pc, #480]	; (8008cac <cppLoop+0xf4c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7f7 fd52 	bl	8000578 <__aeabi_f2d>
 8008ad4:	a370      	add	r3, pc, #448	; (adr r3, 8008c98 <cppLoop+0xf38>)
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	f7f7 fbed 	bl	80002b8 <__aeabi_dsub>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f7f8 f897 	bl	8000c18 <__aeabi_d2f>
 8008aea:	4602      	mov	r2, r0
 8008aec:	4b6f      	ldr	r3, [pc, #444]	; (8008cac <cppLoop+0xf4c>)
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	e012      	b.n	8008b18 <cppLoop+0xdb8>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008af2:	4b6f      	ldr	r3, [pc, #444]	; (8008cb0 <cppLoop+0xf50>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7f7 fd3e 	bl	8000578 <__aeabi_f2d>
 8008afc:	a366      	add	r3, pc, #408	; (adr r3, 8008c98 <cppLoop+0xf38>)
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f7f7 fbd9 	bl	80002b8 <__aeabi_dsub>
 8008b06:	4603      	mov	r3, r0
 8008b08:	460c      	mov	r4, r1
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	f7f8 f883 	bl	8000c18 <__aeabi_d2f>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b66      	ldr	r3, [pc, #408]	; (8008cb0 <cppLoop+0xf50>)
 8008b16:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b1e:	4861      	ldr	r0, [pc, #388]	; (8008ca4 <cppLoop+0xf44>)
 8008b20:	f7f9 fc54 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008b24:	f001 b8bc 	b.w	8009ca0 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_C){
 8008b28:	485d      	ldr	r0, [pc, #372]	; (8008ca0 <cppLoop+0xf40>)
 8008b2a:	f7f9 fb2f 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	bf0c      	ite	eq
 8008b34:	2301      	moveq	r3, #1
 8008b36:	2300      	movne	r3, #0
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f001 80b0 	beq.w	8009ca0 <cppLoop+0x1f40>
			led.LR(-1, 1);
 8008b40:	2201      	movs	r2, #1
 8008b42:	f04f 31ff 	mov.w	r1, #4294967295
 8008b46:	4857      	ldr	r0, [pc, #348]	; (8008ca4 <cppLoop+0xf44>)
 8008b48:	f7f9 fc40 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b50:	f001 f9e6 	bl	8009f20 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008b54:	2300      	movs	r3, #0
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	4b54      	ldr	r3, [pc, #336]	; (8008cac <cppLoop+0xf4c>)
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	4955      	ldr	r1, [pc, #340]	; (8008cb4 <cppLoop+0xf54>)
 8008b5e:	4856      	ldr	r0, [pc, #344]	; (8008cb8 <cppLoop+0xf58>)
 8008b60:	f7f8 fe8c 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008b64:	2300      	movs	r3, #0
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	4b51      	ldr	r3, [pc, #324]	; (8008cb0 <cppLoop+0xf50>)
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	4953      	ldr	r1, [pc, #332]	; (8008cbc <cppLoop+0xf5c>)
 8008b6e:	4852      	ldr	r0, [pc, #328]	; (8008cb8 <cppLoop+0xf58>)
 8008b70:	f7f8 fe84 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008b74:	4b4d      	ldr	r3, [pc, #308]	; (8008cac <cppLoop+0xf4c>)
 8008b76:	edd3 7a00 	vldr	s15, [r3]
 8008b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b7e:	4850      	ldr	r0, [pc, #320]	; (8008cc0 <cppLoop+0xf60>)
 8008b80:	f7fb f94f 	bl	8003e22 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008b84:	4b4a      	ldr	r3, [pc, #296]	; (8008cb0 <cppLoop+0xf50>)
 8008b86:	edd3 7a00 	vldr	s15, [r3]
 8008b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b8e:	484c      	ldr	r0, [pc, #304]	; (8008cc0 <cppLoop+0xf60>)
 8008b90:	f7fb f967 	bl	8003e62 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008b94:	2200      	movs	r2, #0
 8008b96:	f04f 31ff 	mov.w	r1, #4294967295
 8008b9a:	4842      	ldr	r0, [pc, #264]	; (8008ca4 <cppLoop+0xf44>)
 8008b9c:	f7f9 fc16 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008ba0:	f001 b87e 	b.w	8009ca0 <cppLoop+0x1f40>

	case 5:
		led.fullColor('M');
 8008ba4:	214d      	movs	r1, #77	; 0x4d
 8008ba6:	483f      	ldr	r0, [pc, #252]	; (8008ca4 <cppLoop+0xf44>)
 8008ba8:	f7f9 fb54 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008bac:	f7f8 fa78 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	f7f8 fa84 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008bb8:	4b42      	ldr	r3, [pc, #264]	; (8008cc4 <cppLoop+0xf64>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7f7 fcdb 	bl	8000578 <__aeabi_f2d>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4623      	mov	r3, r4
 8008bca:	483f      	ldr	r0, [pc, #252]	; (8008cc8 <cppLoop+0xf68>)
 8008bcc:	f7f8 faa2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	f7f8 fa74 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008bd8:	4b3c      	ldr	r3, [pc, #240]	; (8008ccc <cppLoop+0xf6c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7f7 fccb 	bl	8000578 <__aeabi_f2d>
 8008be2:	4603      	mov	r3, r0
 8008be4:	460c      	mov	r4, r1
 8008be6:	461a      	mov	r2, r3
 8008be8:	4623      	mov	r3, r4
 8008bea:	4839      	ldr	r0, [pc, #228]	; (8008cd0 <cppLoop+0xf70>)
 8008bec:	f7f8 fa92 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008bf0:	482b      	ldr	r0, [pc, #172]	; (8008ca0 <cppLoop+0xf40>)
 8008bf2:	f7f9 facb 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	bf0c      	ite	eq
 8008bfc:	2301      	moveq	r3, #1
 8008bfe:	2300      	movne	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f001 804e 	beq.w	8009ca4 <cppLoop+0x1f44>
			HAL_Delay(500);
 8008c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008c0c:	f001 f988 	bl	8009f20 <HAL_Delay>

			led.LR(1, -1);
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295
 8008c14:	2101      	movs	r1, #1
 8008c16:	4823      	ldr	r0, [pc, #140]	; (8008ca4 <cppLoop+0xf44>)
 8008c18:	f7f9 fbd8 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008c1c:	4b2d      	ldr	r3, [pc, #180]	; (8008cd4 <cppLoop+0xf74>)
 8008c1e:	edd3 7a00 	vldr	s15, [r3]
 8008c22:	4b2d      	ldr	r3, [pc, #180]	; (8008cd8 <cppLoop+0xf78>)
 8008c24:	ed93 7a00 	vldr	s14, [r3]
 8008c28:	4b2c      	ldr	r3, [pc, #176]	; (8008cdc <cppLoop+0xf7c>)
 8008c2a:	edd3 6a00 	vldr	s13, [r3]
 8008c2e:	eeb0 1a66 	vmov.f32	s2, s13
 8008c32:	eef0 0a47 	vmov.f32	s1, s14
 8008c36:	eeb0 0a67 	vmov.f32	s0, s15
 8008c3a:	4821      	ldr	r0, [pc, #132]	; (8008cc0 <cppLoop+0xf60>)
 8008c3c:	f7fb f846 	bl	8003ccc <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008c40:	2102      	movs	r1, #2
 8008c42:	481f      	ldr	r0, [pc, #124]	; (8008cc0 <cppLoop+0xf60>)
 8008c44:	f7fb fb2e 	bl	80042a4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008c48:	4b20      	ldr	r3, [pc, #128]	; (8008ccc <cppLoop+0xf6c>)
 8008c4a:	edd3 7a00 	vldr	s15, [r3]
 8008c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c52:	481b      	ldr	r0, [pc, #108]	; (8008cc0 <cppLoop+0xf60>)
 8008c54:	f7fb f8d5 	bl	8003e02 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008c58:	4b1a      	ldr	r3, [pc, #104]	; (8008cc4 <cppLoop+0xf64>)
 8008c5a:	edd3 7a00 	vldr	s15, [r3]
 8008c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c62:	4817      	ldr	r0, [pc, #92]	; (8008cc0 <cppLoop+0xf60>)
 8008c64:	f7fb f8ed 	bl	8003e42 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008c68:	4b18      	ldr	r3, [pc, #96]	; (8008ccc <cppLoop+0xf6c>)
 8008c6a:	edd3 7a00 	vldr	s15, [r3]
 8008c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c72:	4813      	ldr	r0, [pc, #76]	; (8008cc0 <cppLoop+0xf60>)
 8008c74:	f7fb f905 	bl	8003e82 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008c78:	4811      	ldr	r0, [pc, #68]	; (8008cc0 <cppLoop+0xf60>)
 8008c7a:	f7fb fc53 	bl	8004524 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008c7e:	4810      	ldr	r0, [pc, #64]	; (8008cc0 <cppLoop+0xf60>)
 8008c80:	f7fb fb54 	bl	800432c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008c84:	f04f 32ff 	mov.w	r2, #4294967295
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4806      	ldr	r0, [pc, #24]	; (8008ca4 <cppLoop+0xf44>)
 8008c8c:	f7f9 fb9e 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008c90:	f001 b808 	b.w	8009ca4 <cppLoop+0x1f44>
 8008c94:	f3af 8000 	nop.w
 8008c98:	9999999a 	.word	0x9999999a
 8008c9c:	3fb99999 	.word	0x3fb99999
 8008ca0:	200005c4 	.word	0x200005c4
 8008ca4:	200005d0 	.word	0x200005d0
 8008ca8:	200423e0 	.word	0x200423e0
 8008cac:	2004241c 	.word	0x2004241c
 8008cb0:	2004242c 	.word	0x2004242c
 8008cb4:	0801a0b0 	.word	0x0801a0b0
 8008cb8:	0801a030 	.word	0x0801a030
 8008cbc:	0801a0bc 	.word	0x0801a0bc
 8008cc0:	2001db64 	.word	0x2001db64
 8008cc4:	20042424 	.word	0x20042424
 8008cc8:	0801a0c8 	.word	0x0801a0c8
 8008ccc:	20042434 	.word	0x20042434
 8008cd0:	0801a05c 	.word	0x0801a05c
 8008cd4:	200423e4 	.word	0x200423e4
 8008cd8:	200423ec 	.word	0x200423ec
 8008cdc:	200423f4 	.word	0x200423f4

	case 6:
		led.fullColor('R');
 8008ce0:	2152      	movs	r1, #82	; 0x52
 8008ce2:	4895      	ldr	r0, [pc, #596]	; (8008f38 <cppLoop+0x11d8>)
 8008ce4:	f7f9 fab6 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ce8:	f7f8 f9da 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008cec:	2100      	movs	r1, #0
 8008cee:	2000      	movs	r0, #0
 8008cf0:	f7f8 f9e6 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008cf4:	4891      	ldr	r0, [pc, #580]	; (8008f3c <cppLoop+0x11dc>)
 8008cf6:	f7fb f8f4 	bl	8003ee2 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008cfa:	ee10 3a10 	vmov	r3, s0
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7f7 fc3a 	bl	8000578 <__aeabi_f2d>
 8008d04:	4603      	mov	r3, r0
 8008d06:	460c      	mov	r4, r1
 8008d08:	461a      	mov	r2, r3
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	488c      	ldr	r0, [pc, #560]	; (8008f40 <cppLoop+0x11e0>)
 8008d0e:	f7f8 fa01 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008d12:	2101      	movs	r1, #1
 8008d14:	2000      	movs	r0, #0
 8008d16:	f7f8 f9d3 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008d1a:	4888      	ldr	r0, [pc, #544]	; (8008f3c <cppLoop+0x11dc>)
 8008d1c:	f7fb f901 	bl	8003f22 <_ZN9LineTrace15getMinVelocity2Ev>
 8008d20:	ee10 3a10 	vmov	r3, s0
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7f7 fc27 	bl	8000578 <__aeabi_f2d>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	461a      	mov	r2, r3
 8008d30:	4623      	mov	r3, r4
 8008d32:	4884      	ldr	r0, [pc, #528]	; (8008f44 <cppLoop+0x11e4>)
 8008d34:	f7f8 f9ee 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008d38:	4883      	ldr	r0, [pc, #524]	; (8008f48 <cppLoop+0x11e8>)
 8008d3a:	f7f9 fa27 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	bf0c      	ite	eq
 8008d44:	2301      	moveq	r3, #1
 8008d46:	2300      	movne	r3, #0
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d022      	beq.n	8008d94 <cppLoop+0x1034>
			led.LR(-1, 1);
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f04f 31ff 	mov.w	r1, #4294967295
 8008d54:	4878      	ldr	r0, [pc, #480]	; (8008f38 <cppLoop+0x11d8>)
 8008d56:	f7f9 fb39 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d5a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d5e:	f001 f8df 	bl	8009f20 <HAL_Delay>

			selector_vel2++;
 8008d62:	4b7a      	ldr	r3, [pc, #488]	; (8008f4c <cppLoop+0x11ec>)
 8008d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	b21a      	sxth	r2, r3
 8008d70:	4b76      	ldr	r3, [pc, #472]	; (8008f4c <cppLoop+0x11ec>)
 8008d72:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008d74:	4b75      	ldr	r3, [pc, #468]	; (8008f4c <cppLoop+0x11ec>)
 8008d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	dd02      	ble.n	8008d84 <cppLoop+0x1024>
 8008d7e:	4b73      	ldr	r3, [pc, #460]	; (8008f4c <cppLoop+0x11ec>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008d84:	2200      	movs	r2, #0
 8008d86:	f04f 31ff 	mov.w	r1, #4294967295
 8008d8a:	486b      	ldr	r0, [pc, #428]	; (8008f38 <cppLoop+0x11d8>)
 8008d8c:	f7f9 fb1e 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008d90:	f000 bf8a 	b.w	8009ca8 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_R){
 8008d94:	486c      	ldr	r0, [pc, #432]	; (8008f48 <cppLoop+0x11e8>)
 8008d96:	f7f9 f9f9 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b10      	cmp	r3, #16
 8008d9e:	bf0c      	ite	eq
 8008da0:	2301      	moveq	r3, #1
 8008da2:	2300      	movne	r3, #0
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d03c      	beq.n	8008e24 <cppLoop+0x10c4>
			led.LR(-1, 1);
 8008daa:	2201      	movs	r2, #1
 8008dac:	f04f 31ff 	mov.w	r1, #4294967295
 8008db0:	4861      	ldr	r0, [pc, #388]	; (8008f38 <cppLoop+0x11d8>)
 8008db2:	f7f9 fb0b 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008db6:	2064      	movs	r0, #100	; 0x64
 8008db8:	f001 f8b2 	bl	8009f20 <HAL_Delay>
			if(selector_vel2 == 0)
 8008dbc:	4b63      	ldr	r3, [pc, #396]	; (8008f4c <cppLoop+0x11ec>)
 8008dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d113      	bne.n	8008dee <cppLoop+0x108e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008dc6:	4b62      	ldr	r3, [pc, #392]	; (8008f50 <cppLoop+0x11f0>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7f7 fbd4 	bl	8000578 <__aeabi_f2d>
 8008dd0:	a357      	add	r3, pc, #348	; (adr r3, 8008f30 <cppLoop+0x11d0>)
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	f7f7 fa71 	bl	80002bc <__adddf3>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	4618      	mov	r0, r3
 8008de0:	4621      	mov	r1, r4
 8008de2:	f7f7 ff19 	bl	8000c18 <__aeabi_d2f>
 8008de6:	4602      	mov	r2, r0
 8008de8:	4b59      	ldr	r3, [pc, #356]	; (8008f50 <cppLoop+0x11f0>)
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	e012      	b.n	8008e14 <cppLoop+0x10b4>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008dee:	4b59      	ldr	r3, [pc, #356]	; (8008f54 <cppLoop+0x11f4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7f7 fbc0 	bl	8000578 <__aeabi_f2d>
 8008df8:	a34d      	add	r3, pc, #308	; (adr r3, 8008f30 <cppLoop+0x11d0>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f7f7 fa5d 	bl	80002bc <__adddf3>
 8008e02:	4603      	mov	r3, r0
 8008e04:	460c      	mov	r4, r1
 8008e06:	4618      	mov	r0, r3
 8008e08:	4621      	mov	r1, r4
 8008e0a:	f7f7 ff05 	bl	8000c18 <__aeabi_d2f>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	4b50      	ldr	r3, [pc, #320]	; (8008f54 <cppLoop+0x11f4>)
 8008e12:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e14:	2200      	movs	r2, #0
 8008e16:	f04f 31ff 	mov.w	r1, #4294967295
 8008e1a:	4847      	ldr	r0, [pc, #284]	; (8008f38 <cppLoop+0x11d8>)
 8008e1c:	f7f9 fad6 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008e20:	f000 bf42 	b.w	8009ca8 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_L){
 8008e24:	4848      	ldr	r0, [pc, #288]	; (8008f48 <cppLoop+0x11e8>)
 8008e26:	f7f9 f9b1 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	bf0c      	ite	eq
 8008e30:	2301      	moveq	r3, #1
 8008e32:	2300      	movne	r3, #0
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d03c      	beq.n	8008eb4 <cppLoop+0x1154>
			led.LR(-1, 1);
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e40:	483d      	ldr	r0, [pc, #244]	; (8008f38 <cppLoop+0x11d8>)
 8008e42:	f7f9 fac3 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e46:	2064      	movs	r0, #100	; 0x64
 8008e48:	f001 f86a 	bl	8009f20 <HAL_Delay>
			if(selector_vel2 == 0)
 8008e4c:	4b3f      	ldr	r3, [pc, #252]	; (8008f4c <cppLoop+0x11ec>)
 8008e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d113      	bne.n	8008e7e <cppLoop+0x111e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008e56:	4b3e      	ldr	r3, [pc, #248]	; (8008f50 <cppLoop+0x11f0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7f7 fb8c 	bl	8000578 <__aeabi_f2d>
 8008e60:	a333      	add	r3, pc, #204	; (adr r3, 8008f30 <cppLoop+0x11d0>)
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	f7f7 fa27 	bl	80002b8 <__aeabi_dsub>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	4618      	mov	r0, r3
 8008e70:	4621      	mov	r1, r4
 8008e72:	f7f7 fed1 	bl	8000c18 <__aeabi_d2f>
 8008e76:	4602      	mov	r2, r0
 8008e78:	4b35      	ldr	r3, [pc, #212]	; (8008f50 <cppLoop+0x11f0>)
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	e012      	b.n	8008ea4 <cppLoop+0x1144>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008e7e:	4b35      	ldr	r3, [pc, #212]	; (8008f54 <cppLoop+0x11f4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7f7 fb78 	bl	8000578 <__aeabi_f2d>
 8008e88:	a329      	add	r3, pc, #164	; (adr r3, 8008f30 <cppLoop+0x11d0>)
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	f7f7 fa13 	bl	80002b8 <__aeabi_dsub>
 8008e92:	4603      	mov	r3, r0
 8008e94:	460c      	mov	r4, r1
 8008e96:	4618      	mov	r0, r3
 8008e98:	4621      	mov	r1, r4
 8008e9a:	f7f7 febd 	bl	8000c18 <__aeabi_d2f>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	4b2c      	ldr	r3, [pc, #176]	; (8008f54 <cppLoop+0x11f4>)
 8008ea2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f04f 31ff 	mov.w	r1, #4294967295
 8008eaa:	4823      	ldr	r0, [pc, #140]	; (8008f38 <cppLoop+0x11d8>)
 8008eac:	f7f9 fa8e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008eb0:	f000 befa 	b.w	8009ca8 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_C){
 8008eb4:	4824      	ldr	r0, [pc, #144]	; (8008f48 <cppLoop+0x11e8>)
 8008eb6:	f7f9 f969 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	bf0c      	ite	eq
 8008ec0:	2301      	moveq	r3, #1
 8008ec2:	2300      	movne	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 86ee 	beq.w	8009ca8 <cppLoop+0x1f48>
			led.LR(-1, 1);
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f04f 31ff 	mov.w	r1, #4294967295
 8008ed2:	4819      	ldr	r0, [pc, #100]	; (8008f38 <cppLoop+0x11d8>)
 8008ed4:	f7f9 fa7a 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ed8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008edc:	f001 f820 	bl	8009f20 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	4b1a      	ldr	r3, [pc, #104]	; (8008f50 <cppLoop+0x11f0>)
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	491b      	ldr	r1, [pc, #108]	; (8008f58 <cppLoop+0x11f8>)
 8008eea:	481c      	ldr	r0, [pc, #112]	; (8008f5c <cppLoop+0x11fc>)
 8008eec:	f7f8 fcc6 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	4b17      	ldr	r3, [pc, #92]	; (8008f54 <cppLoop+0x11f4>)
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	4919      	ldr	r1, [pc, #100]	; (8008f60 <cppLoop+0x1200>)
 8008efa:	4818      	ldr	r0, [pc, #96]	; (8008f5c <cppLoop+0x11fc>)
 8008efc:	f7f8 fcbe 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008f00:	4b13      	ldr	r3, [pc, #76]	; (8008f50 <cppLoop+0x11f0>)
 8008f02:	edd3 7a00 	vldr	s15, [r3]
 8008f06:	eeb0 0a67 	vmov.f32	s0, s15
 8008f0a:	480c      	ldr	r0, [pc, #48]	; (8008f3c <cppLoop+0x11dc>)
 8008f0c:	f7fa ff99 	bl	8003e42 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008f10:	4b10      	ldr	r3, [pc, #64]	; (8008f54 <cppLoop+0x11f4>)
 8008f12:	edd3 7a00 	vldr	s15, [r3]
 8008f16:	eeb0 0a67 	vmov.f32	s0, s15
 8008f1a:	4808      	ldr	r0, [pc, #32]	; (8008f3c <cppLoop+0x11dc>)
 8008f1c:	f7fa ffb1 	bl	8003e82 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008f20:	2200      	movs	r2, #0
 8008f22:	f04f 31ff 	mov.w	r1, #4294967295
 8008f26:	4804      	ldr	r0, [pc, #16]	; (8008f38 <cppLoop+0x11d8>)
 8008f28:	f7f9 fa50 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008f2c:	f000 bebc 	b.w	8009ca8 <cppLoop+0x1f48>
 8008f30:	9999999a 	.word	0x9999999a
 8008f34:	3fb99999 	.word	0x3fb99999
 8008f38:	200005d0 	.word	0x200005d0
 8008f3c:	2001db64 	.word	0x2001db64
 8008f40:	0801a0c8 	.word	0x0801a0c8
 8008f44:	0801a08c 	.word	0x0801a08c
 8008f48:	200005c4 	.word	0x200005c4
 8008f4c:	200423e2 	.word	0x200423e2
 8008f50:	20042424 	.word	0x20042424
 8008f54:	20042434 	.word	0x20042434
 8008f58:	0801a0d4 	.word	0x0801a0d4
 8008f5c:	0801a030 	.word	0x0801a030
 8008f60:	0801a0e0 	.word	0x0801a0e0

	case 7:
		led.fullColor('W');
 8008f64:	2157      	movs	r1, #87	; 0x57
 8008f66:	48c2      	ldr	r0, [pc, #776]	; (8009270 <cppLoop+0x1510>)
 8008f68:	f7f9 f974 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f6c:	f7f8 f898 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f70:	2100      	movs	r1, #0
 8008f72:	2000      	movs	r0, #0
 8008f74:	f7f8 f8a4 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008f78:	48be      	ldr	r0, [pc, #760]	; (8009274 <cppLoop+0x1514>)
 8008f7a:	f7fb f816 	bl	8003faa <_ZN9LineTrace9getMaxAccEv>
 8008f7e:	ee10 3a10 	vmov	r3, s0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7f7 faf8 	bl	8000578 <__aeabi_f2d>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4623      	mov	r3, r4
 8008f90:	48b9      	ldr	r0, [pc, #740]	; (8009278 <cppLoop+0x1518>)
 8008f92:	f7f8 f8bf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f96:	2101      	movs	r1, #1
 8008f98:	2000      	movs	r0, #0
 8008f9a:	f7f8 f891 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008f9e:	48b5      	ldr	r0, [pc, #724]	; (8009274 <cppLoop+0x1514>)
 8008fa0:	f7fb f839 	bl	8004016 <_ZN9LineTrace9getMaxDecEv>
 8008fa4:	ee10 3a10 	vmov	r3, s0
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7f7 fae5 	bl	8000578 <__aeabi_f2d>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4623      	mov	r3, r4
 8008fb6:	48b1      	ldr	r0, [pc, #708]	; (800927c <cppLoop+0x151c>)
 8008fb8:	f7f8 f8ac 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008fbc:	48b0      	ldr	r0, [pc, #704]	; (8009280 <cppLoop+0x1520>)
 8008fbe:	f7f9 f8e5 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	bf0c      	ite	eq
 8008fc8:	2301      	moveq	r3, #1
 8008fca:	2300      	movne	r3, #0
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d022      	beq.n	8009018 <cppLoop+0x12b8>
			led.LR(-1, 1);
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8008fd8:	48a5      	ldr	r0, [pc, #660]	; (8009270 <cppLoop+0x1510>)
 8008fda:	f7f9 f9f7 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008fde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008fe2:	f000 ff9d 	bl	8009f20 <HAL_Delay>

			selector_acc++;
 8008fe6:	4ba7      	ldr	r3, [pc, #668]	; (8009284 <cppLoop+0x1524>)
 8008fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3301      	adds	r3, #1
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	b21a      	sxth	r2, r3
 8008ff4:	4ba3      	ldr	r3, [pc, #652]	; (8009284 <cppLoop+0x1524>)
 8008ff6:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008ff8:	4ba2      	ldr	r3, [pc, #648]	; (8009284 <cppLoop+0x1524>)
 8008ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	dd02      	ble.n	8009008 <cppLoop+0x12a8>
 8009002:	4ba0      	ldr	r3, [pc, #640]	; (8009284 <cppLoop+0x1524>)
 8009004:	2200      	movs	r2, #0
 8009006:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009008:	2200      	movs	r2, #0
 800900a:	f04f 31ff 	mov.w	r1, #4294967295
 800900e:	4898      	ldr	r0, [pc, #608]	; (8009270 <cppLoop+0x1510>)
 8009010:	f7f9 f9dc 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8009014:	f000 be4a 	b.w	8009cac <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_R){
 8009018:	4899      	ldr	r0, [pc, #612]	; (8009280 <cppLoop+0x1520>)
 800901a:	f7f9 f8b7 	bl	800218c <_ZN8JoyStick8getValueEv>
 800901e:	4603      	mov	r3, r0
 8009020:	2b10      	cmp	r3, #16
 8009022:	bf0c      	ite	eq
 8009024:	2301      	moveq	r3, #1
 8009026:	2300      	movne	r3, #0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d03c      	beq.n	80090a8 <cppLoop+0x1348>
			led.LR(-1, 1);
 800902e:	2201      	movs	r2, #1
 8009030:	f04f 31ff 	mov.w	r1, #4294967295
 8009034:	488e      	ldr	r0, [pc, #568]	; (8009270 <cppLoop+0x1510>)
 8009036:	f7f9 f9c9 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800903a:	2064      	movs	r0, #100	; 0x64
 800903c:	f000 ff70 	bl	8009f20 <HAL_Delay>
			if(selector_acc == 0){
 8009040:	4b90      	ldr	r3, [pc, #576]	; (8009284 <cppLoop+0x1524>)
 8009042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d113      	bne.n	8009072 <cppLoop+0x1312>
				adj_acc = adj_acc + 0.1;
 800904a:	4b8f      	ldr	r3, [pc, #572]	; (8009288 <cppLoop+0x1528>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f7f7 fa92 	bl	8000578 <__aeabi_f2d>
 8009054:	a384      	add	r3, pc, #528	; (adr r3, 8009268 <cppLoop+0x1508>)
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	f7f7 f92f 	bl	80002bc <__adddf3>
 800905e:	4603      	mov	r3, r0
 8009060:	460c      	mov	r4, r1
 8009062:	4618      	mov	r0, r3
 8009064:	4621      	mov	r1, r4
 8009066:	f7f7 fdd7 	bl	8000c18 <__aeabi_d2f>
 800906a:	4602      	mov	r2, r0
 800906c:	4b86      	ldr	r3, [pc, #536]	; (8009288 <cppLoop+0x1528>)
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	e012      	b.n	8009098 <cppLoop+0x1338>
				adj_dec = adj_dec + 0.1;
 8009072:	4b86      	ldr	r3, [pc, #536]	; (800928c <cppLoop+0x152c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4618      	mov	r0, r3
 8009078:	f7f7 fa7e 	bl	8000578 <__aeabi_f2d>
 800907c:	a37a      	add	r3, pc, #488	; (adr r3, 8009268 <cppLoop+0x1508>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 f91b 	bl	80002bc <__adddf3>
 8009086:	4603      	mov	r3, r0
 8009088:	460c      	mov	r4, r1
 800908a:	4618      	mov	r0, r3
 800908c:	4621      	mov	r1, r4
 800908e:	f7f7 fdc3 	bl	8000c18 <__aeabi_d2f>
 8009092:	4602      	mov	r2, r0
 8009094:	4b7d      	ldr	r3, [pc, #500]	; (800928c <cppLoop+0x152c>)
 8009096:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009098:	2200      	movs	r2, #0
 800909a:	f04f 31ff 	mov.w	r1, #4294967295
 800909e:	4874      	ldr	r0, [pc, #464]	; (8009270 <cppLoop+0x1510>)
 80090a0:	f7f9 f994 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80090a4:	f000 be02 	b.w	8009cac <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_L){
 80090a8:	4875      	ldr	r0, [pc, #468]	; (8009280 <cppLoop+0x1520>)
 80090aa:	f7f9 f86f 	bl	800218c <_ZN8JoyStick8getValueEv>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	bf0c      	ite	eq
 80090b4:	2301      	moveq	r3, #1
 80090b6:	2300      	movne	r3, #0
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d03c      	beq.n	8009138 <cppLoop+0x13d8>
			led.LR(-1, 1);
 80090be:	2201      	movs	r2, #1
 80090c0:	f04f 31ff 	mov.w	r1, #4294967295
 80090c4:	486a      	ldr	r0, [pc, #424]	; (8009270 <cppLoop+0x1510>)
 80090c6:	f7f9 f981 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80090ca:	2064      	movs	r0, #100	; 0x64
 80090cc:	f000 ff28 	bl	8009f20 <HAL_Delay>
			if(selector_acc == 0){
 80090d0:	4b6c      	ldr	r3, [pc, #432]	; (8009284 <cppLoop+0x1524>)
 80090d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d113      	bne.n	8009102 <cppLoop+0x13a2>
				adj_acc = adj_acc - 0.1;
 80090da:	4b6b      	ldr	r3, [pc, #428]	; (8009288 <cppLoop+0x1528>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4618      	mov	r0, r3
 80090e0:	f7f7 fa4a 	bl	8000578 <__aeabi_f2d>
 80090e4:	a360      	add	r3, pc, #384	; (adr r3, 8009268 <cppLoop+0x1508>)
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	f7f7 f8e5 	bl	80002b8 <__aeabi_dsub>
 80090ee:	4603      	mov	r3, r0
 80090f0:	460c      	mov	r4, r1
 80090f2:	4618      	mov	r0, r3
 80090f4:	4621      	mov	r1, r4
 80090f6:	f7f7 fd8f 	bl	8000c18 <__aeabi_d2f>
 80090fa:	4602      	mov	r2, r0
 80090fc:	4b62      	ldr	r3, [pc, #392]	; (8009288 <cppLoop+0x1528>)
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	e012      	b.n	8009128 <cppLoop+0x13c8>
				adj_dec = adj_dec - 0.1;
 8009102:	4b62      	ldr	r3, [pc, #392]	; (800928c <cppLoop+0x152c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f7f7 fa36 	bl	8000578 <__aeabi_f2d>
 800910c:	a356      	add	r3, pc, #344	; (adr r3, 8009268 <cppLoop+0x1508>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 f8d1 	bl	80002b8 <__aeabi_dsub>
 8009116:	4603      	mov	r3, r0
 8009118:	460c      	mov	r4, r1
 800911a:	4618      	mov	r0, r3
 800911c:	4621      	mov	r1, r4
 800911e:	f7f7 fd7b 	bl	8000c18 <__aeabi_d2f>
 8009122:	4602      	mov	r2, r0
 8009124:	4b59      	ldr	r3, [pc, #356]	; (800928c <cppLoop+0x152c>)
 8009126:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009128:	2200      	movs	r2, #0
 800912a:	f04f 31ff 	mov.w	r1, #4294967295
 800912e:	4850      	ldr	r0, [pc, #320]	; (8009270 <cppLoop+0x1510>)
 8009130:	f7f9 f94c 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009134:	f000 bdba 	b.w	8009cac <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_C){
 8009138:	4851      	ldr	r0, [pc, #324]	; (8009280 <cppLoop+0x1520>)
 800913a:	f7f9 f827 	bl	800218c <_ZN8JoyStick8getValueEv>
 800913e:	4603      	mov	r3, r0
 8009140:	2b02      	cmp	r3, #2
 8009142:	bf0c      	ite	eq
 8009144:	2301      	moveq	r3, #1
 8009146:	2300      	movne	r3, #0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 85ae 	beq.w	8009cac <cppLoop+0x1f4c>
			led.LR(-1, 1);
 8009150:	2201      	movs	r2, #1
 8009152:	f04f 31ff 	mov.w	r1, #4294967295
 8009156:	4846      	ldr	r0, [pc, #280]	; (8009270 <cppLoop+0x1510>)
 8009158:	f7f9 f938 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800915c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009160:	f000 fede 	bl	8009f20 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8009164:	2300      	movs	r3, #0
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4b47      	ldr	r3, [pc, #284]	; (8009288 <cppLoop+0x1528>)
 800916a:	2201      	movs	r2, #1
 800916c:	4948      	ldr	r1, [pc, #288]	; (8009290 <cppLoop+0x1530>)
 800916e:	4849      	ldr	r0, [pc, #292]	; (8009294 <cppLoop+0x1534>)
 8009170:	f7f8 fb84 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8009174:	2300      	movs	r3, #0
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	4b44      	ldr	r3, [pc, #272]	; (800928c <cppLoop+0x152c>)
 800917a:	2201      	movs	r2, #1
 800917c:	4946      	ldr	r1, [pc, #280]	; (8009298 <cppLoop+0x1538>)
 800917e:	4845      	ldr	r0, [pc, #276]	; (8009294 <cppLoop+0x1534>)
 8009180:	f7f8 fb7c 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8009184:	4b40      	ldr	r3, [pc, #256]	; (8009288 <cppLoop+0x1528>)
 8009186:	edd3 7a00 	vldr	s15, [r3]
 800918a:	4b40      	ldr	r3, [pc, #256]	; (800928c <cppLoop+0x152c>)
 800918c:	ed93 7a00 	vldr	s14, [r3]
 8009190:	eef0 0a47 	vmov.f32	s1, s14
 8009194:	eeb0 0a67 	vmov.f32	s0, s15
 8009198:	4836      	ldr	r0, [pc, #216]	; (8009274 <cppLoop+0x1514>)
 800919a:	f7fa fed2 	bl	8003f42 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800919e:	2200      	movs	r2, #0
 80091a0:	f04f 31ff 	mov.w	r1, #4294967295
 80091a4:	4832      	ldr	r0, [pc, #200]	; (8009270 <cppLoop+0x1510>)
 80091a6:	f7f9 f911 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80091aa:	f000 bd7f 	b.w	8009cac <cppLoop+0x1f4c>

	case 8:
		led.fullColor('W');
 80091ae:	2157      	movs	r1, #87	; 0x57
 80091b0:	482f      	ldr	r0, [pc, #188]	; (8009270 <cppLoop+0x1510>)
 80091b2:	f7f9 f84f 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80091b6:	f7f7 ff73 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80091ba:	2100      	movs	r1, #0
 80091bc:	2000      	movs	r0, #0
 80091be:	f7f7 ff7f 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 80091c2:	482c      	ldr	r0, [pc, #176]	; (8009274 <cppLoop+0x1514>)
 80091c4:	f7fa ff15 	bl	8003ff2 <_ZN9LineTrace10getMaxAcc2Ev>
 80091c8:	ee10 3a10 	vmov	r3, s0
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7f7 f9d3 	bl	8000578 <__aeabi_f2d>
 80091d2:	4603      	mov	r3, r0
 80091d4:	460c      	mov	r4, r1
 80091d6:	461a      	mov	r2, r3
 80091d8:	4623      	mov	r3, r4
 80091da:	4830      	ldr	r0, [pc, #192]	; (800929c <cppLoop+0x153c>)
 80091dc:	f7f7 ff9a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80091e0:	2101      	movs	r1, #1
 80091e2:	2000      	movs	r0, #0
 80091e4:	f7f7 ff6c 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 80091e8:	4822      	ldr	r0, [pc, #136]	; (8009274 <cppLoop+0x1514>)
 80091ea:	f7fa fef0 	bl	8003fce <_ZN9LineTrace10getMaxDec2Ev>
 80091ee:	ee10 3a10 	vmov	r3, s0
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7f7 f9c0 	bl	8000578 <__aeabi_f2d>
 80091f8:	4603      	mov	r3, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	461a      	mov	r2, r3
 80091fe:	4623      	mov	r3, r4
 8009200:	4827      	ldr	r0, [pc, #156]	; (80092a0 <cppLoop+0x1540>)
 8009202:	f7f7 ff87 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009206:	481e      	ldr	r0, [pc, #120]	; (8009280 <cppLoop+0x1520>)
 8009208:	f7f8 ffc0 	bl	800218c <_ZN8JoyStick8getValueEv>
 800920c:	4603      	mov	r3, r0
 800920e:	2b08      	cmp	r3, #8
 8009210:	bf0c      	ite	eq
 8009212:	2301      	moveq	r3, #1
 8009214:	2300      	movne	r3, #0
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	d045      	beq.n	80092a8 <cppLoop+0x1548>
			led.LR(-1, 1);
 800921c:	2201      	movs	r2, #1
 800921e:	f04f 31ff 	mov.w	r1, #4294967295
 8009222:	4813      	ldr	r0, [pc, #76]	; (8009270 <cppLoop+0x1510>)
 8009224:	f7f9 f8d2 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009228:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800922c:	f000 fe78 	bl	8009f20 <HAL_Delay>

			selector_acc2++;
 8009230:	4b1c      	ldr	r3, [pc, #112]	; (80092a4 <cppLoop+0x1544>)
 8009232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009236:	b29b      	uxth	r3, r3
 8009238:	3301      	adds	r3, #1
 800923a:	b29b      	uxth	r3, r3
 800923c:	b21a      	sxth	r2, r3
 800923e:	4b19      	ldr	r3, [pc, #100]	; (80092a4 <cppLoop+0x1544>)
 8009240:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8009242:	4b18      	ldr	r3, [pc, #96]	; (80092a4 <cppLoop+0x1544>)
 8009244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009248:	2b01      	cmp	r3, #1
 800924a:	dd02      	ble.n	8009252 <cppLoop+0x14f2>
 800924c:	4b15      	ldr	r3, [pc, #84]	; (80092a4 <cppLoop+0x1544>)
 800924e:	2200      	movs	r2, #0
 8009250:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009252:	2200      	movs	r2, #0
 8009254:	f04f 31ff 	mov.w	r1, #4294967295
 8009258:	4805      	ldr	r0, [pc, #20]	; (8009270 <cppLoop+0x1510>)
 800925a:	f7f9 f8b7 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 800925e:	f000 bd27 	b.w	8009cb0 <cppLoop+0x1f50>
 8009262:	bf00      	nop
 8009264:	f3af 8000 	nop.w
 8009268:	9999999a 	.word	0x9999999a
 800926c:	3fb99999 	.word	0x3fb99999
 8009270:	200005d0 	.word	0x200005d0
 8009274:	2001db64 	.word	0x2001db64
 8009278:	0801a0ec 	.word	0x0801a0ec
 800927c:	0801a0f8 	.word	0x0801a0f8
 8009280:	200005c4 	.word	0x200005c4
 8009284:	200423dc 	.word	0x200423dc
 8009288:	2004243c 	.word	0x2004243c
 800928c:	20042444 	.word	0x20042444
 8009290:	0801a104 	.word	0x0801a104
 8009294:	0801a030 	.word	0x0801a030
 8009298:	0801a10c 	.word	0x0801a10c
 800929c:	0801a114 	.word	0x0801a114
 80092a0:	0801a120 	.word	0x0801a120
 80092a4:	200423de 	.word	0x200423de
		else if(joy_stick.getValue() == JOY_R){
 80092a8:	48bf      	ldr	r0, [pc, #764]	; (80095a8 <cppLoop+0x1848>)
 80092aa:	f7f8 ff6f 	bl	800218c <_ZN8JoyStick8getValueEv>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b10      	cmp	r3, #16
 80092b2:	bf0c      	ite	eq
 80092b4:	2301      	moveq	r3, #1
 80092b6:	2300      	movne	r3, #0
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d03c      	beq.n	8009338 <cppLoop+0x15d8>
			led.LR(-1, 1);
 80092be:	2201      	movs	r2, #1
 80092c0:	f04f 31ff 	mov.w	r1, #4294967295
 80092c4:	48b9      	ldr	r0, [pc, #740]	; (80095ac <cppLoop+0x184c>)
 80092c6:	f7f9 f881 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80092ca:	2064      	movs	r0, #100	; 0x64
 80092cc:	f000 fe28 	bl	8009f20 <HAL_Delay>
			if(selector_acc2 == 0){
 80092d0:	4bb7      	ldr	r3, [pc, #732]	; (80095b0 <cppLoop+0x1850>)
 80092d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d113      	bne.n	8009302 <cppLoop+0x15a2>
				adj_acc2 = adj_acc2 + 0.1;
 80092da:	4bb6      	ldr	r3, [pc, #728]	; (80095b4 <cppLoop+0x1854>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4618      	mov	r0, r3
 80092e0:	f7f7 f94a 	bl	8000578 <__aeabi_f2d>
 80092e4:	a3ae      	add	r3, pc, #696	; (adr r3, 80095a0 <cppLoop+0x1840>)
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f7f6 ffe7 	bl	80002bc <__adddf3>
 80092ee:	4603      	mov	r3, r0
 80092f0:	460c      	mov	r4, r1
 80092f2:	4618      	mov	r0, r3
 80092f4:	4621      	mov	r1, r4
 80092f6:	f7f7 fc8f 	bl	8000c18 <__aeabi_d2f>
 80092fa:	4602      	mov	r2, r0
 80092fc:	4bad      	ldr	r3, [pc, #692]	; (80095b4 <cppLoop+0x1854>)
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	e012      	b.n	8009328 <cppLoop+0x15c8>
				adj_dec2 = adj_dec2 + 0.1;
 8009302:	4bad      	ldr	r3, [pc, #692]	; (80095b8 <cppLoop+0x1858>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4618      	mov	r0, r3
 8009308:	f7f7 f936 	bl	8000578 <__aeabi_f2d>
 800930c:	a3a4      	add	r3, pc, #656	; (adr r3, 80095a0 <cppLoop+0x1840>)
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	f7f6 ffd3 	bl	80002bc <__adddf3>
 8009316:	4603      	mov	r3, r0
 8009318:	460c      	mov	r4, r1
 800931a:	4618      	mov	r0, r3
 800931c:	4621      	mov	r1, r4
 800931e:	f7f7 fc7b 	bl	8000c18 <__aeabi_d2f>
 8009322:	4602      	mov	r2, r0
 8009324:	4ba4      	ldr	r3, [pc, #656]	; (80095b8 <cppLoop+0x1858>)
 8009326:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009328:	2200      	movs	r2, #0
 800932a:	f04f 31ff 	mov.w	r1, #4294967295
 800932e:	489f      	ldr	r0, [pc, #636]	; (80095ac <cppLoop+0x184c>)
 8009330:	f7f9 f84c 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009334:	f000 bcbc 	b.w	8009cb0 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_L){
 8009338:	489b      	ldr	r0, [pc, #620]	; (80095a8 <cppLoop+0x1848>)
 800933a:	f7f8 ff27 	bl	800218c <_ZN8JoyStick8getValueEv>
 800933e:	4603      	mov	r3, r0
 8009340:	2b01      	cmp	r3, #1
 8009342:	bf0c      	ite	eq
 8009344:	2301      	moveq	r3, #1
 8009346:	2300      	movne	r3, #0
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d03c      	beq.n	80093c8 <cppLoop+0x1668>
			led.LR(-1, 1);
 800934e:	2201      	movs	r2, #1
 8009350:	f04f 31ff 	mov.w	r1, #4294967295
 8009354:	4895      	ldr	r0, [pc, #596]	; (80095ac <cppLoop+0x184c>)
 8009356:	f7f9 f839 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800935a:	2064      	movs	r0, #100	; 0x64
 800935c:	f000 fde0 	bl	8009f20 <HAL_Delay>
			if(selector_acc2 == 0){
 8009360:	4b93      	ldr	r3, [pc, #588]	; (80095b0 <cppLoop+0x1850>)
 8009362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d113      	bne.n	8009392 <cppLoop+0x1632>
				adj_acc2 = adj_acc2 - 0.1;
 800936a:	4b92      	ldr	r3, [pc, #584]	; (80095b4 <cppLoop+0x1854>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f7f7 f902 	bl	8000578 <__aeabi_f2d>
 8009374:	a38a      	add	r3, pc, #552	; (adr r3, 80095a0 <cppLoop+0x1840>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f7f6 ff9d 	bl	80002b8 <__aeabi_dsub>
 800937e:	4603      	mov	r3, r0
 8009380:	460c      	mov	r4, r1
 8009382:	4618      	mov	r0, r3
 8009384:	4621      	mov	r1, r4
 8009386:	f7f7 fc47 	bl	8000c18 <__aeabi_d2f>
 800938a:	4602      	mov	r2, r0
 800938c:	4b89      	ldr	r3, [pc, #548]	; (80095b4 <cppLoop+0x1854>)
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	e012      	b.n	80093b8 <cppLoop+0x1658>
				adj_dec2 = adj_dec2 - 0.1;
 8009392:	4b89      	ldr	r3, [pc, #548]	; (80095b8 <cppLoop+0x1858>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4618      	mov	r0, r3
 8009398:	f7f7 f8ee 	bl	8000578 <__aeabi_f2d>
 800939c:	a380      	add	r3, pc, #512	; (adr r3, 80095a0 <cppLoop+0x1840>)
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f7f6 ff89 	bl	80002b8 <__aeabi_dsub>
 80093a6:	4603      	mov	r3, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	4618      	mov	r0, r3
 80093ac:	4621      	mov	r1, r4
 80093ae:	f7f7 fc33 	bl	8000c18 <__aeabi_d2f>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4b80      	ldr	r3, [pc, #512]	; (80095b8 <cppLoop+0x1858>)
 80093b6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80093b8:	2200      	movs	r2, #0
 80093ba:	f04f 31ff 	mov.w	r1, #4294967295
 80093be:	487b      	ldr	r0, [pc, #492]	; (80095ac <cppLoop+0x184c>)
 80093c0:	f7f9 f804 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80093c4:	f000 bc74 	b.w	8009cb0 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_C){
 80093c8:	4877      	ldr	r0, [pc, #476]	; (80095a8 <cppLoop+0x1848>)
 80093ca:	f7f8 fedf 	bl	800218c <_ZN8JoyStick8getValueEv>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	bf0c      	ite	eq
 80093d4:	2301      	moveq	r3, #1
 80093d6:	2300      	movne	r3, #0
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 8468 	beq.w	8009cb0 <cppLoop+0x1f50>
			led.LR(-1, 1);
 80093e0:	2201      	movs	r2, #1
 80093e2:	f04f 31ff 	mov.w	r1, #4294967295
 80093e6:	4871      	ldr	r0, [pc, #452]	; (80095ac <cppLoop+0x184c>)
 80093e8:	f7f8 fff0 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80093ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80093f0:	f000 fd96 	bl	8009f20 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80093f4:	2300      	movs	r3, #0
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	4b6e      	ldr	r3, [pc, #440]	; (80095b4 <cppLoop+0x1854>)
 80093fa:	2201      	movs	r2, #1
 80093fc:	496f      	ldr	r1, [pc, #444]	; (80095bc <cppLoop+0x185c>)
 80093fe:	4870      	ldr	r0, [pc, #448]	; (80095c0 <cppLoop+0x1860>)
 8009400:	f7f8 fa3c 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8009404:	2300      	movs	r3, #0
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4b6b      	ldr	r3, [pc, #428]	; (80095b8 <cppLoop+0x1858>)
 800940a:	2201      	movs	r2, #1
 800940c:	496d      	ldr	r1, [pc, #436]	; (80095c4 <cppLoop+0x1864>)
 800940e:	486c      	ldr	r0, [pc, #432]	; (80095c0 <cppLoop+0x1860>)
 8009410:	f7f8 fa34 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8009414:	4b67      	ldr	r3, [pc, #412]	; (80095b4 <cppLoop+0x1854>)
 8009416:	edd3 7a00 	vldr	s15, [r3]
 800941a:	4b67      	ldr	r3, [pc, #412]	; (80095b8 <cppLoop+0x1858>)
 800941c:	ed93 7a00 	vldr	s14, [r3]
 8009420:	eef0 0a47 	vmov.f32	s1, s14
 8009424:	eeb0 0a67 	vmov.f32	s0, s15
 8009428:	4867      	ldr	r0, [pc, #412]	; (80095c8 <cppLoop+0x1868>)
 800942a:	f7fa fda4 	bl	8003f76 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 800942e:	2200      	movs	r2, #0
 8009430:	f04f 31ff 	mov.w	r1, #4294967295
 8009434:	485d      	ldr	r0, [pc, #372]	; (80095ac <cppLoop+0x184c>)
 8009436:	f7f8 ffc9 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800943a:	f000 bc39 	b.w	8009cb0 <cppLoop+0x1f50>

	case 9:
		led.fullColor('~');
 800943e:	217e      	movs	r1, #126	; 0x7e
 8009440:	485a      	ldr	r0, [pc, #360]	; (80095ac <cppLoop+0x184c>)
 8009442:	f7f8 ff07 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009446:	f7f7 fe2b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800944a:	2100      	movs	r1, #0
 800944c:	2000      	movs	r0, #0
 800944e:	f7f7 fe37 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8009452:	485e      	ldr	r0, [pc, #376]	; (80095cc <cppLoop+0x186c>)
 8009454:	f7f7 fe5e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009458:	2101      	movs	r1, #1
 800945a:	2000      	movs	r0, #0
 800945c:	f7f7 fe30 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009460:	485b      	ldr	r0, [pc, #364]	; (80095d0 <cppLoop+0x1870>)
 8009462:	f7f7 fe57 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009466:	4850      	ldr	r0, [pc, #320]	; (80095a8 <cppLoop+0x1848>)
 8009468:	f7f8 fe90 	bl	800218c <_ZN8JoyStick8getValueEv>
 800946c:	4603      	mov	r3, r0
 800946e:	2b02      	cmp	r3, #2
 8009470:	bf0c      	ite	eq
 8009472:	2301      	moveq	r3, #1
 8009474:	2300      	movne	r3, #0
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 841b 	beq.w	8009cb4 <cppLoop+0x1f54>
			led.LR(-1, 1);
 800947e:	2201      	movs	r2, #1
 8009480:	f04f 31ff 	mov.w	r1, #4294967295
 8009484:	4849      	ldr	r0, [pc, #292]	; (80095ac <cppLoop+0x184c>)
 8009486:	f7f8 ffa1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 800948a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800948e:	f000 fd47 	bl	8009f20 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8009492:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80095d4 <cppLoop+0x1874>
 8009496:	484c      	ldr	r0, [pc, #304]	; (80095c8 <cppLoop+0x1868>)
 8009498:	f7fa fca4 	bl	8003de4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800949c:	484a      	ldr	r0, [pc, #296]	; (80095c8 <cppLoop+0x1868>)
 800949e:	f7fa ff13 	bl	80042c8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80094a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094a6:	f000 fd3b 	bl	8009f20 <HAL_Delay>

			led.fullColor('R');
 80094aa:	2152      	movs	r1, #82	; 0x52
 80094ac:	483f      	ldr	r0, [pc, #252]	; (80095ac <cppLoop+0x184c>)
 80094ae:	f7f8 fed1 	bl	8002254 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 80094b2:	4849      	ldr	r0, [pc, #292]	; (80095d8 <cppLoop+0x1878>)
 80094b4:	f7f8 f934 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80094b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80094bc:	f000 fd30 	bl	8009f20 <HAL_Delay>

			line_trace.stop();
 80094c0:	4841      	ldr	r0, [pc, #260]	; (80095c8 <cppLoop+0x1868>)
 80094c2:	f7fa ffad 	bl	8004420 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80094c6:	4945      	ldr	r1, [pc, #276]	; (80095dc <cppLoop+0x187c>)
 80094c8:	4845      	ldr	r0, [pc, #276]	; (80095e0 <cppLoop+0x1880>)
 80094ca:	f7f8 f962 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 80094ce:	4842      	ldr	r0, [pc, #264]	; (80095d8 <cppLoop+0x1878>)
 80094d0:	f7f8 f8ea 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 80094d4:	eef0 7a40 	vmov.f32	s15, s0
 80094d8:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 80094dc:	1d3b      	adds	r3, r7, #4
 80094de:	2201      	movs	r2, #1
 80094e0:	4619      	mov	r1, r3
 80094e2:	2001      	movs	r0, #1
 80094e4:	f7f8 f978 	bl	80017d8 <sd_write_float>
			user_fclose();
 80094e8:	f7f8 f966 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 80094ec:	2200      	movs	r2, #0
 80094ee:	f04f 31ff 	mov.w	r1, #4294967295
 80094f2:	482e      	ldr	r0, [pc, #184]	; (80095ac <cppLoop+0x184c>)
 80094f4:	f7f8 ff6a 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 80094f8:	e3dc      	b.n	8009cb4 <cppLoop+0x1f54>

	case 10:
		led.fullColor('~');
 80094fa:	217e      	movs	r1, #126	; 0x7e
 80094fc:	482b      	ldr	r0, [pc, #172]	; (80095ac <cppLoop+0x184c>)
 80094fe:	f7f8 fea9 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009502:	f7f7 fdcd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009506:	2100      	movs	r1, #0
 8009508:	2000      	movs	r0, #0
 800950a:	f7f7 fdd9 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800950e:	4835      	ldr	r0, [pc, #212]	; (80095e4 <cppLoop+0x1884>)
 8009510:	f7f7 fe00 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009514:	2101      	movs	r1, #1
 8009516:	2000      	movs	r0, #0
 8009518:	f7f7 fdd2 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800951c:	4832      	ldr	r0, [pc, #200]	; (80095e8 <cppLoop+0x1888>)
 800951e:	f7f7 fdf9 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009522:	4821      	ldr	r0, [pc, #132]	; (80095a8 <cppLoop+0x1848>)
 8009524:	f7f8 fe32 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009528:	4603      	mov	r3, r0
 800952a:	2b02      	cmp	r3, #2
 800952c:	bf0c      	ite	eq
 800952e:	2301      	moveq	r3, #1
 8009530:	2300      	movne	r3, #0
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 83bf 	beq.w	8009cb8 <cppLoop+0x1f58>
			HAL_Delay(500);
 800953a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800953e:	f000 fcef 	bl	8009f20 <HAL_Delay>
			led.LR(-1, 1);
 8009542:	2201      	movs	r2, #1
 8009544:	f04f 31ff 	mov.w	r1, #4294967295
 8009548:	4818      	ldr	r0, [pc, #96]	; (80095ac <cppLoop+0x184c>)
 800954a:	f7f8 ff3f 	bl	80023cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800954e:	2102      	movs	r1, #2
 8009550:	481d      	ldr	r0, [pc, #116]	; (80095c8 <cppLoop+0x1868>)
 8009552:	f7fa fea7 	bl	80042a4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009556:	4b25      	ldr	r3, [pc, #148]	; (80095ec <cppLoop+0x188c>)
 8009558:	edd3 7a00 	vldr	s15, [r3]
 800955c:	eeb0 0a67 	vmov.f32	s0, s15
 8009560:	4819      	ldr	r0, [pc, #100]	; (80095c8 <cppLoop+0x1868>)
 8009562:	f7fa fc4e 	bl	8003e02 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009566:	4b21      	ldr	r3, [pc, #132]	; (80095ec <cppLoop+0x188c>)
 8009568:	edd3 7a00 	vldr	s15, [r3]
 800956c:	eeb0 0a67 	vmov.f32	s0, s15
 8009570:	4815      	ldr	r0, [pc, #84]	; (80095c8 <cppLoop+0x1868>)
 8009572:	f7fa fc56 	bl	8003e22 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009576:	4b1d      	ldr	r3, [pc, #116]	; (80095ec <cppLoop+0x188c>)
 8009578:	edd3 7a00 	vldr	s15, [r3]
 800957c:	eeb0 0a67 	vmov.f32	s0, s15
 8009580:	4811      	ldr	r0, [pc, #68]	; (80095c8 <cppLoop+0x1868>)
 8009582:	f7fa fc6e 	bl	8003e62 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009586:	4810      	ldr	r0, [pc, #64]	; (80095c8 <cppLoop+0x1868>)
 8009588:	f7fb f89a 	bl	80046c0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800958c:	2200      	movs	r2, #0
 800958e:	f04f 31ff 	mov.w	r1, #4294967295
 8009592:	4806      	ldr	r0, [pc, #24]	; (80095ac <cppLoop+0x184c>)
 8009594:	f7f8 ff1a 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8009598:	e38e      	b.n	8009cb8 <cppLoop+0x1f58>
 800959a:	bf00      	nop
 800959c:	f3af 8000 	nop.w
 80095a0:	9999999a 	.word	0x9999999a
 80095a4:	3fb99999 	.word	0x3fb99999
 80095a8:	200005c4 	.word	0x200005c4
 80095ac:	200005d0 	.word	0x200005d0
 80095b0:	200423de 	.word	0x200423de
 80095b4:	2004244c 	.word	0x2004244c
 80095b8:	20042454 	.word	0x20042454
 80095bc:	0801a12c 	.word	0x0801a12c
 80095c0:	0801a030 	.word	0x0801a030
 80095c4:	0801a138 	.word	0x0801a138
 80095c8:	2001db64 	.word	0x2001db64
 80095cc:	0801a144 	.word	0x0801a144
 80095d0:	0801a14c 	.word	0x0801a14c
 80095d4:	00000000 	.word	0x00000000
 80095d8:	2001dac0 	.word	0x2001dac0
 80095dc:	0801a158 	.word	0x0801a158
 80095e0:	0801a160 	.word	0x0801a160
 80095e4:	0801a16c 	.word	0x0801a16c
 80095e8:	0801a178 	.word	0x0801a178
 80095ec:	20042424 	.word	0x20042424

	case 11:
		led.fullColor('~');
 80095f0:	217e      	movs	r1, #126	; 0x7e
 80095f2:	48b5      	ldr	r0, [pc, #724]	; (80098c8 <cppLoop+0x1b68>)
 80095f4:	f7f8 fe2e 	bl	8002254 <_ZN3LED9fullColorEc>

lcd_clear();
 80095f8:	f7f7 fd52 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095fc:	2100      	movs	r1, #0
 80095fe:	2000      	movs	r0, #0
 8009600:	f7f7 fd5e 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8009604:	48b1      	ldr	r0, [pc, #708]	; (80098cc <cppLoop+0x1b6c>)
 8009606:	f7f7 fd85 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800960a:	2101      	movs	r1, #1
 800960c:	2000      	movs	r0, #0
 800960e:	f7f7 fd57 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8009612:	48af      	ldr	r0, [pc, #700]	; (80098d0 <cppLoop+0x1b70>)
 8009614:	f7f7 fd7e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009618:	48ae      	ldr	r0, [pc, #696]	; (80098d4 <cppLoop+0x1b74>)
 800961a:	f7f8 fdb7 	bl	800218c <_ZN8JoyStick8getValueEv>
 800961e:	4603      	mov	r3, r0
 8009620:	2b02      	cmp	r3, #2
 8009622:	bf0c      	ite	eq
 8009624:	2301      	moveq	r3, #1
 8009626:	2300      	movne	r3, #0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 8346 	beq.w	8009cbc <cppLoop+0x1f5c>
			HAL_Delay(1000);
 8009630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009634:	f000 fc74 	bl	8009f20 <HAL_Delay>
			led.LR(-1, 1);
 8009638:	2201      	movs	r2, #1
 800963a:	f04f 31ff 	mov.w	r1, #4294967295
 800963e:	48a2      	ldr	r0, [pc, #648]	; (80098c8 <cppLoop+0x1b68>)
 8009640:	f7f8 fec4 	bl	80023cc <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009644:	eddf 1aa4 	vldr	s3, [pc, #656]	; 80098d8 <cppLoop+0x1b78>
 8009648:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 80098d8 <cppLoop+0x1b78>
 800964c:	eddf 0aa2 	vldr	s1, [pc, #648]	; 80098d8 <cppLoop+0x1b78>
 8009650:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 80098d8 <cppLoop+0x1b78>
 8009654:	48a1      	ldr	r0, [pc, #644]	; (80098dc <cppLoop+0x1b7c>)
 8009656:	f7f7 fdfb 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 800965a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800965e:	f000 fc5f 	bl	8009f20 <HAL_Delay>
			esc.off();
 8009662:	489e      	ldr	r0, [pc, #632]	; (80098dc <cppLoop+0x1b7c>)
 8009664:	f7f7 fe8e 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009668:	2200      	movs	r2, #0
 800966a:	f04f 31ff 	mov.w	r1, #4294967295
 800966e:	4896      	ldr	r0, [pc, #600]	; (80098c8 <cppLoop+0x1b68>)
 8009670:	f7f8 feac 	bl	80023cc <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 8009674:	e322      	b.n	8009cbc <cppLoop+0x1f5c>

	case 12:
		led.fullColor('~');
 8009676:	217e      	movs	r1, #126	; 0x7e
 8009678:	4893      	ldr	r0, [pc, #588]	; (80098c8 <cppLoop+0x1b68>)
 800967a:	f7f8 fdeb 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800967e:	f7f7 fd0f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009682:	2100      	movs	r1, #0
 8009684:	2000      	movs	r0, #0
 8009686:	f7f7 fd1b 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800968a:	4895      	ldr	r0, [pc, #596]	; (80098e0 <cppLoop+0x1b80>)
 800968c:	f7f7 fd42 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009690:	2101      	movs	r1, #1
 8009692:	2000      	movs	r0, #0
 8009694:	f7f7 fd14 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009698:	4892      	ldr	r0, [pc, #584]	; (80098e4 <cppLoop+0x1b84>)
 800969a:	f7f7 fd3b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800969e:	488d      	ldr	r0, [pc, #564]	; (80098d4 <cppLoop+0x1b74>)
 80096a0:	f7f8 fd74 	bl	800218c <_ZN8JoyStick8getValueEv>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	bf0c      	ite	eq
 80096aa:	2301      	moveq	r3, #1
 80096ac:	2300      	movne	r3, #0
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 8305 	beq.w	8009cc0 <cppLoop+0x1f60>
			HAL_Delay(1500);
 80096b6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80096ba:	f000 fc31 	bl	8009f20 <HAL_Delay>
			led.LR(-1, 1);
 80096be:	2201      	movs	r2, #1
 80096c0:	f04f 31ff 	mov.w	r1, #4294967295
 80096c4:	4880      	ldr	r0, [pc, #512]	; (80098c8 <cppLoop+0x1b68>)
 80096c6:	f7f8 fe81 	bl	80023cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80096ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80096ce:	f000 fc27 	bl	8009f20 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80096d2:	eddf 1a81 	vldr	s3, [pc, #516]	; 80098d8 <cppLoop+0x1b78>
 80096d6:	ed9f 1a80 	vldr	s2, [pc, #512]	; 80098d8 <cppLoop+0x1b78>
 80096da:	eddf 0a7f 	vldr	s1, [pc, #508]	; 80098d8 <cppLoop+0x1b78>
 80096de:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80098d8 <cppLoop+0x1b78>
 80096e2:	487e      	ldr	r0, [pc, #504]	; (80098dc <cppLoop+0x1b7c>)
 80096e4:	f7f7 fdb4 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80096e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096ec:	f000 fc18 	bl	8009f20 <HAL_Delay>

			logger.start();
 80096f0:	487d      	ldr	r0, [pc, #500]	; (80098e8 <cppLoop+0x1b88>)
 80096f2:	f7fb fb6a 	bl	8004dca <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80096f6:	487d      	ldr	r0, [pc, #500]	; (80098ec <cppLoop+0x1b8c>)
 80096f8:	f7fc fcaf 	bl	800605a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80096fc:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80098f0 <cppLoop+0x1b90>
 8009700:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009704:	4879      	ldr	r0, [pc, #484]	; (80098ec <cppLoop+0x1b8c>)
 8009706:	f7fc fc3b 	bl	8005f80 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800970a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800970e:	f000 fc07 	bl	8009f20 <HAL_Delay>

			logger.stop();
 8009712:	4875      	ldr	r0, [pc, #468]	; (80098e8 <cppLoop+0x1b88>)
 8009714:	f7fb fb69 	bl	8004dea <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009718:	4874      	ldr	r0, [pc, #464]	; (80098ec <cppLoop+0x1b8c>)
 800971a:	f7fc fcb1 	bl	8006080 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 800971e:	486f      	ldr	r0, [pc, #444]	; (80098dc <cppLoop+0x1b7c>)
 8009720:	f7f7 fe30 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009724:	4a73      	ldr	r2, [pc, #460]	; (80098f4 <cppLoop+0x1b94>)
 8009726:	4974      	ldr	r1, [pc, #464]	; (80098f8 <cppLoop+0x1b98>)
 8009728:	486f      	ldr	r0, [pc, #444]	; (80098e8 <cppLoop+0x1b88>)
 800972a:	f7fb fa45 	bl	8004bb8 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800972e:	2200      	movs	r2, #0
 8009730:	f04f 31ff 	mov.w	r1, #4294967295
 8009734:	4864      	ldr	r0, [pc, #400]	; (80098c8 <cppLoop+0x1b68>)
 8009736:	f7f8 fe49 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 800973a:	e2c1      	b.n	8009cc0 <cppLoop+0x1f60>

	case 13:

		led.fullColor('W');
 800973c:	2157      	movs	r1, #87	; 0x57
 800973e:	4862      	ldr	r0, [pc, #392]	; (80098c8 <cppLoop+0x1b68>)
 8009740:	f7f8 fd88 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009744:	f7f7 fcac 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009748:	2100      	movs	r1, #0
 800974a:	2000      	movs	r0, #0
 800974c:	f7f7 fcb8 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009750:	486a      	ldr	r0, [pc, #424]	; (80098fc <cppLoop+0x1b9c>)
 8009752:	f7f7 fcdf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009756:	2101      	movs	r1, #1
 8009758:	2000      	movs	r0, #0
 800975a:	f7f7 fcb1 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800975e:	4b68      	ldr	r3, [pc, #416]	; (8009900 <cppLoop+0x1ba0>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f7f6 ff08 	bl	8000578 <__aeabi_f2d>
 8009768:	4603      	mov	r3, r0
 800976a:	460c      	mov	r4, r1
 800976c:	461a      	mov	r2, r3
 800976e:	4623      	mov	r3, r4
 8009770:	4864      	ldr	r0, [pc, #400]	; (8009904 <cppLoop+0x1ba4>)
 8009772:	f7f7 fccf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009776:	4857      	ldr	r0, [pc, #348]	; (80098d4 <cppLoop+0x1b74>)
 8009778:	f7f8 fd08 	bl	800218c <_ZN8JoyStick8getValueEv>
 800977c:	4603      	mov	r3, r0
 800977e:	2b02      	cmp	r3, #2
 8009780:	bf0c      	ite	eq
 8009782:	2301      	moveq	r3, #1
 8009784:	2300      	movne	r3, #0
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 829b 	beq.w	8009cc4 <cppLoop+0x1f64>
			HAL_Delay(500);
 800978e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009792:	f000 fbc5 	bl	8009f20 <HAL_Delay>

			led.LR(1, -1);
 8009796:	f04f 32ff 	mov.w	r2, #4294967295
 800979a:	2101      	movs	r1, #1
 800979c:	484a      	ldr	r0, [pc, #296]	; (80098c8 <cppLoop+0x1b68>)
 800979e:	f7f8 fe15 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80097a2:	2102      	movs	r1, #2
 80097a4:	4858      	ldr	r0, [pc, #352]	; (8009908 <cppLoop+0x1ba8>)
 80097a6:	f7fa fd7d 	bl	80042a4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80097aa:	4b58      	ldr	r3, [pc, #352]	; (800990c <cppLoop+0x1bac>)
 80097ac:	edd3 7a00 	vldr	s15, [r3]
 80097b0:	eeb0 0a67 	vmov.f32	s0, s15
 80097b4:	4854      	ldr	r0, [pc, #336]	; (8009908 <cppLoop+0x1ba8>)
 80097b6:	f7fa fb24 	bl	8003e02 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80097ba:	4b51      	ldr	r3, [pc, #324]	; (8009900 <cppLoop+0x1ba0>)
 80097bc:	edd3 7a00 	vldr	s15, [r3]
 80097c0:	eeb0 0a67 	vmov.f32	s0, s15
 80097c4:	4850      	ldr	r0, [pc, #320]	; (8009908 <cppLoop+0x1ba8>)
 80097c6:	f7fa fb2c 	bl	8003e22 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80097ca:	4b4d      	ldr	r3, [pc, #308]	; (8009900 <cppLoop+0x1ba0>)
 80097cc:	edd3 7a00 	vldr	s15, [r3]
 80097d0:	eeb0 0a67 	vmov.f32	s0, s15
 80097d4:	484c      	ldr	r0, [pc, #304]	; (8009908 <cppLoop+0x1ba8>)
 80097d6:	f7fa fb44 	bl	8003e62 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80097da:	484b      	ldr	r0, [pc, #300]	; (8009908 <cppLoop+0x1ba8>)
 80097dc:	f7fa ff70 	bl	80046c0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80097e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097e4:	f000 fb9c 	bl	8009f20 <HAL_Delay>

			line_trace.running();
 80097e8:	4847      	ldr	r0, [pc, #284]	; (8009908 <cppLoop+0x1ba8>)
 80097ea:	f7fa fd9f 	bl	800432c <_ZN9LineTrace7runningEv>

			esc.off();
 80097ee:	483b      	ldr	r0, [pc, #236]	; (80098dc <cppLoop+0x1b7c>)
 80097f0:	f7f7 fdc8 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80097f4:	f04f 32ff 	mov.w	r2, #4294967295
 80097f8:	2100      	movs	r1, #0
 80097fa:	4833      	ldr	r0, [pc, #204]	; (80098c8 <cppLoop+0x1b68>)
 80097fc:	f7f8 fde6 	bl	80023cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009800:	e260      	b.n	8009cc4 <cppLoop+0x1f64>

	case 14:
		led.fullColor('W');
 8009802:	2157      	movs	r1, #87	; 0x57
 8009804:	4830      	ldr	r0, [pc, #192]	; (80098c8 <cppLoop+0x1b68>)
 8009806:	f7f8 fd25 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800980a:	f7f7 fc49 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800980e:	2100      	movs	r1, #0
 8009810:	2000      	movs	r0, #0
 8009812:	f7f7 fc55 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009816:	483e      	ldr	r0, [pc, #248]	; (8009910 <cppLoop+0x1bb0>)
 8009818:	f7f7 fc7c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800981c:	2101      	movs	r1, #1
 800981e:	2000      	movs	r0, #0
 8009820:	f7f7 fc4e 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009824:	4b3b      	ldr	r3, [pc, #236]	; (8009914 <cppLoop+0x1bb4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f7f6 fea5 	bl	8000578 <__aeabi_f2d>
 800982e:	4603      	mov	r3, r0
 8009830:	460c      	mov	r4, r1
 8009832:	461a      	mov	r2, r3
 8009834:	4623      	mov	r3, r4
 8009836:	4833      	ldr	r0, [pc, #204]	; (8009904 <cppLoop+0x1ba4>)
 8009838:	f7f7 fc6c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800983c:	4825      	ldr	r0, [pc, #148]	; (80098d4 <cppLoop+0x1b74>)
 800983e:	f7f8 fca5 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009842:	4603      	mov	r3, r0
 8009844:	2b02      	cmp	r3, #2
 8009846:	bf0c      	ite	eq
 8009848:	2301      	moveq	r3, #1
 800984a:	2300      	movne	r3, #0
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 823a 	beq.w	8009cc8 <cppLoop+0x1f68>
			HAL_Delay(500);
 8009854:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009858:	f000 fb62 	bl	8009f20 <HAL_Delay>

			led.LR(1, -1);
 800985c:	f04f 32ff 	mov.w	r2, #4294967295
 8009860:	2101      	movs	r1, #1
 8009862:	4819      	ldr	r0, [pc, #100]	; (80098c8 <cppLoop+0x1b68>)
 8009864:	f7f8 fdb2 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009868:	2101      	movs	r1, #1
 800986a:	4827      	ldr	r0, [pc, #156]	; (8009908 <cppLoop+0x1ba8>)
 800986c:	f7fa fd1a 	bl	80042a4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009870:	4b29      	ldr	r3, [pc, #164]	; (8009918 <cppLoop+0x1bb8>)
 8009872:	edd3 7a00 	vldr	s15, [r3]
 8009876:	eeb0 0a67 	vmov.f32	s0, s15
 800987a:	4823      	ldr	r0, [pc, #140]	; (8009908 <cppLoop+0x1ba8>)
 800987c:	f7fa fac1 	bl	8003e02 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009880:	4b24      	ldr	r3, [pc, #144]	; (8009914 <cppLoop+0x1bb4>)
 8009882:	edd3 7a00 	vldr	s15, [r3]
 8009886:	eeb0 0a67 	vmov.f32	s0, s15
 800988a:	481f      	ldr	r0, [pc, #124]	; (8009908 <cppLoop+0x1ba8>)
 800988c:	f7fa fac9 	bl	8003e22 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009890:	4b21      	ldr	r3, [pc, #132]	; (8009918 <cppLoop+0x1bb8>)
 8009892:	edd3 7a00 	vldr	s15, [r3]
 8009896:	eeb0 0a67 	vmov.f32	s0, s15
 800989a:	481b      	ldr	r0, [pc, #108]	; (8009908 <cppLoop+0x1ba8>)
 800989c:	f7fa fae1 	bl	8003e62 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80098a0:	4819      	ldr	r0, [pc, #100]	; (8009908 <cppLoop+0x1ba8>)
 80098a2:	f7fa ff0d 	bl	80046c0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80098a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80098aa:	f000 fb39 	bl	8009f20 <HAL_Delay>

			line_trace.running();
 80098ae:	4816      	ldr	r0, [pc, #88]	; (8009908 <cppLoop+0x1ba8>)
 80098b0:	f7fa fd3c 	bl	800432c <_ZN9LineTrace7runningEv>

			esc.off();
 80098b4:	4809      	ldr	r0, [pc, #36]	; (80098dc <cppLoop+0x1b7c>)
 80098b6:	f7f7 fd65 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80098ba:	f04f 32ff 	mov.w	r2, #4294967295
 80098be:	2100      	movs	r1, #0
 80098c0:	4801      	ldr	r0, [pc, #4]	; (80098c8 <cppLoop+0x1b68>)
 80098c2:	f7f8 fd83 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 80098c6:	e1ff      	b.n	8009cc8 <cppLoop+0x1f68>
 80098c8:	200005d0 	.word	0x200005d0
 80098cc:	0801a184 	.word	0x0801a184
 80098d0:	0801a188 	.word	0x0801a188
 80098d4:	200005c4 	.word	0x200005c4
 80098d8:	3ea3d70a 	.word	0x3ea3d70a
 80098dc:	2001db60 	.word	0x2001db60
 80098e0:	0801a190 	.word	0x0801a190
 80098e4:	0801a194 	.word	0x0801a194
 80098e8:	200005f4 	.word	0x200005f4
 80098ec:	2001dae0 	.word	0x2001dae0
 80098f0:	00000000 	.word	0x00000000
 80098f4:	0801a1a0 	.word	0x0801a1a0
 80098f8:	0801a1ac 	.word	0x0801a1ac
 80098fc:	0801a1b8 	.word	0x0801a1b8
 8009900:	20042424 	.word	0x20042424
 8009904:	0801a05c 	.word	0x0801a05c
 8009908:	2001db64 	.word	0x2001db64
 800990c:	20042434 	.word	0x20042434
 8009910:	0801a1c4 	.word	0x0801a1c4
 8009914:	2004241c 	.word	0x2004241c
 8009918:	2004242c 	.word	0x2004242c

	case 15:
		led.fullColor('W');
 800991c:	2157      	movs	r1, #87	; 0x57
 800991e:	48ac      	ldr	r0, [pc, #688]	; (8009bd0 <cppLoop+0x1e70>)
 8009920:	f7f8 fc98 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009924:	f7f7 fbbc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009928:	2100      	movs	r1, #0
 800992a:	2000      	movs	r0, #0
 800992c:	f7f7 fbc8 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 8009930:	48a8      	ldr	r0, [pc, #672]	; (8009bd4 <cppLoop+0x1e74>)
 8009932:	f7fa f9e4 	bl	8003cfe <_ZN9LineTrace5getKpEv>
 8009936:	eeb0 7a40 	vmov.f32	s14, s0
 800993a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8009bd8 <cppLoop+0x1e78>
 800993e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009942:	eeb0 0a67 	vmov.f32	s0, s15
 8009946:	f7f9 f8b1 	bl	8002aac <_ZSt3absf>
 800994a:	ee10 3a10 	vmov	r3, s0
 800994e:	4618      	mov	r0, r3
 8009950:	f7f6 fe12 	bl	8000578 <__aeabi_f2d>
 8009954:	4603      	mov	r3, r0
 8009956:	460c      	mov	r4, r1
 8009958:	461a      	mov	r2, r3
 800995a:	4623      	mov	r3, r4
 800995c:	489f      	ldr	r0, [pc, #636]	; (8009bdc <cppLoop+0x1e7c>)
 800995e:	f7f7 fbd9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009962:	2101      	movs	r1, #1
 8009964:	2000      	movs	r0, #0
 8009966:	f7f7 fbab 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 800996a:	489a      	ldr	r0, [pc, #616]	; (8009bd4 <cppLoop+0x1e74>)
 800996c:	f7fa f9d6 	bl	8003d1c <_ZN9LineTrace5getKiEv>
 8009970:	eeb0 7a40 	vmov.f32	s14, s0
 8009974:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8009be0 <cppLoop+0x1e80>
 8009978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997c:	eeb0 0a67 	vmov.f32	s0, s15
 8009980:	f7f9 f894 	bl	8002aac <_ZSt3absf>
 8009984:	ee10 3a10 	vmov	r3, s0
 8009988:	4618      	mov	r0, r3
 800998a:	f7f6 fdf5 	bl	8000578 <__aeabi_f2d>
 800998e:	4605      	mov	r5, r0
 8009990:	460e      	mov	r6, r1
 8009992:	4890      	ldr	r0, [pc, #576]	; (8009bd4 <cppLoop+0x1e74>)
 8009994:	f7fa f9d1 	bl	8003d3a <_ZN9LineTrace5getKdEv>
 8009998:	eeb0 7a40 	vmov.f32	s14, s0
 800999c:	eddf 7a91 	vldr	s15, [pc, #580]	; 8009be4 <cppLoop+0x1e84>
 80099a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a4:	eeb0 0a67 	vmov.f32	s0, s15
 80099a8:	f7f9 f880 	bl	8002aac <_ZSt3absf>
 80099ac:	ee10 3a10 	vmov	r3, s0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7f6 fde1 	bl	8000578 <__aeabi_f2d>
 80099b6:	4603      	mov	r3, r0
 80099b8:	460c      	mov	r4, r1
 80099ba:	e9cd 3400 	strd	r3, r4, [sp]
 80099be:	462a      	mov	r2, r5
 80099c0:	4633      	mov	r3, r6
 80099c2:	4889      	ldr	r0, [pc, #548]	; (8009be8 <cppLoop+0x1e88>)
 80099c4:	f7f7 fba6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80099c8:	4888      	ldr	r0, [pc, #544]	; (8009bec <cppLoop+0x1e8c>)
 80099ca:	f7f8 fbdf 	bl	800218c <_ZN8JoyStick8getValueEv>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	bf0c      	ite	eq
 80099d4:	2301      	moveq	r3, #1
 80099d6:	2300      	movne	r3, #0
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d021      	beq.n	8009a22 <cppLoop+0x1cc2>
			led.LR(-1, 1);
 80099de:	2201      	movs	r2, #1
 80099e0:	f04f 31ff 	mov.w	r1, #4294967295
 80099e4:	487a      	ldr	r0, [pc, #488]	; (8009bd0 <cppLoop+0x1e70>)
 80099e6:	f7f8 fcf1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80099ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099ee:	f000 fa97 	bl	8009f20 <HAL_Delay>

			selector++;
 80099f2:	4b7f      	ldr	r3, [pc, #508]	; (8009bf0 <cppLoop+0x1e90>)
 80099f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	3301      	adds	r3, #1
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	b21a      	sxth	r2, r3
 8009a00:	4b7b      	ldr	r3, [pc, #492]	; (8009bf0 <cppLoop+0x1e90>)
 8009a02:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8009a04:	4b7a      	ldr	r3, [pc, #488]	; (8009bf0 <cppLoop+0x1e90>)
 8009a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	dd02      	ble.n	8009a14 <cppLoop+0x1cb4>
 8009a0e:	4b78      	ldr	r3, [pc, #480]	; (8009bf0 <cppLoop+0x1e90>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009a14:	2200      	movs	r2, #0
 8009a16:	f04f 31ff 	mov.w	r1, #4294967295
 8009a1a:	486d      	ldr	r0, [pc, #436]	; (8009bd0 <cppLoop+0x1e70>)
 8009a1c:	f7f8 fcd6 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009a20:	e154      	b.n	8009ccc <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_R){
 8009a22:	4872      	ldr	r0, [pc, #456]	; (8009bec <cppLoop+0x1e8c>)
 8009a24:	f7f8 fbb2 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b10      	cmp	r3, #16
 8009a2c:	bf0c      	ite	eq
 8009a2e:	2301      	moveq	r3, #1
 8009a30:	2300      	movne	r3, #0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d058      	beq.n	8009aea <cppLoop+0x1d8a>
			led.LR(-1, 1);
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a3e:	4864      	ldr	r0, [pc, #400]	; (8009bd0 <cppLoop+0x1e70>)
 8009a40:	f7f8 fcc4 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009a44:	2064      	movs	r0, #100	; 0x64
 8009a46:	f000 fa6b 	bl	8009f20 <HAL_Delay>
			if(selector == 0){
 8009a4a:	4b69      	ldr	r3, [pc, #420]	; (8009bf0 <cppLoop+0x1e90>)
 8009a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d113      	bne.n	8009a7c <cppLoop+0x1d1c>
				adj_kp = adj_kp + 0.00001;
 8009a54:	4b67      	ldr	r3, [pc, #412]	; (8009bf4 <cppLoop+0x1e94>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7f6 fd8d 	bl	8000578 <__aeabi_f2d>
 8009a5e:	a356      	add	r3, pc, #344	; (adr r3, 8009bb8 <cppLoop+0x1e58>)
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	f7f6 fc2a 	bl	80002bc <__adddf3>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	4621      	mov	r1, r4
 8009a70:	f7f7 f8d2 	bl	8000c18 <__aeabi_d2f>
 8009a74:	4602      	mov	r2, r0
 8009a76:	4b5f      	ldr	r3, [pc, #380]	; (8009bf4 <cppLoop+0x1e94>)
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	e02b      	b.n	8009ad4 <cppLoop+0x1d74>
			else if(selector == 1){
 8009a7c:	4b5c      	ldr	r3, [pc, #368]	; (8009bf0 <cppLoop+0x1e90>)
 8009a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d113      	bne.n	8009aae <cppLoop+0x1d4e>
				adj_ki = adj_ki + 0.0001;
 8009a86:	4b5c      	ldr	r3, [pc, #368]	; (8009bf8 <cppLoop+0x1e98>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7f6 fd74 	bl	8000578 <__aeabi_f2d>
 8009a90:	a34b      	add	r3, pc, #300	; (adr r3, 8009bc0 <cppLoop+0x1e60>)
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	f7f6 fc11 	bl	80002bc <__adddf3>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	f7f7 f8b9 	bl	8000c18 <__aeabi_d2f>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	4b53      	ldr	r3, [pc, #332]	; (8009bf8 <cppLoop+0x1e98>)
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	e012      	b.n	8009ad4 <cppLoop+0x1d74>
				adj_kd = adj_kd + 0.000001;
 8009aae:	4b53      	ldr	r3, [pc, #332]	; (8009bfc <cppLoop+0x1e9c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7f6 fd60 	bl	8000578 <__aeabi_f2d>
 8009ab8:	a343      	add	r3, pc, #268	; (adr r3, 8009bc8 <cppLoop+0x1e68>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fbfd 	bl	80002bc <__adddf3>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	4621      	mov	r1, r4
 8009aca:	f7f7 f8a5 	bl	8000c18 <__aeabi_d2f>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	4b4a      	ldr	r3, [pc, #296]	; (8009bfc <cppLoop+0x1e9c>)
 8009ad2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009ad4:	2152      	movs	r1, #82	; 0x52
 8009ad6:	483e      	ldr	r0, [pc, #248]	; (8009bd0 <cppLoop+0x1e70>)
 8009ad8:	f7f8 fbbc 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009adc:	2200      	movs	r2, #0
 8009ade:	f04f 31ff 	mov.w	r1, #4294967295
 8009ae2:	483b      	ldr	r0, [pc, #236]	; (8009bd0 <cppLoop+0x1e70>)
 8009ae4:	f7f8 fc72 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009ae8:	e0f0      	b.n	8009ccc <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_L){
 8009aea:	4840      	ldr	r0, [pc, #256]	; (8009bec <cppLoop+0x1e8c>)
 8009aec:	f7f8 fb4e 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	bf0c      	ite	eq
 8009af6:	2301      	moveq	r3, #1
 8009af8:	2300      	movne	r3, #0
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d07f      	beq.n	8009c00 <cppLoop+0x1ea0>
			led.LR(-1, 1);
 8009b00:	2201      	movs	r2, #1
 8009b02:	f04f 31ff 	mov.w	r1, #4294967295
 8009b06:	4832      	ldr	r0, [pc, #200]	; (8009bd0 <cppLoop+0x1e70>)
 8009b08:	f7f8 fc60 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009b0c:	2064      	movs	r0, #100	; 0x64
 8009b0e:	f000 fa07 	bl	8009f20 <HAL_Delay>
			if(selector == 0){
 8009b12:	4b37      	ldr	r3, [pc, #220]	; (8009bf0 <cppLoop+0x1e90>)
 8009b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d113      	bne.n	8009b44 <cppLoop+0x1de4>
				adj_kp = adj_kp - 0.00001;
 8009b1c:	4b35      	ldr	r3, [pc, #212]	; (8009bf4 <cppLoop+0x1e94>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7f6 fd29 	bl	8000578 <__aeabi_f2d>
 8009b26:	a324      	add	r3, pc, #144	; (adr r3, 8009bb8 <cppLoop+0x1e58>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	f7f6 fbc4 	bl	80002b8 <__aeabi_dsub>
 8009b30:	4603      	mov	r3, r0
 8009b32:	460c      	mov	r4, r1
 8009b34:	4618      	mov	r0, r3
 8009b36:	4621      	mov	r1, r4
 8009b38:	f7f7 f86e 	bl	8000c18 <__aeabi_d2f>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	4b2d      	ldr	r3, [pc, #180]	; (8009bf4 <cppLoop+0x1e94>)
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	e02b      	b.n	8009b9c <cppLoop+0x1e3c>
			else if(selector == 1){
 8009b44:	4b2a      	ldr	r3, [pc, #168]	; (8009bf0 <cppLoop+0x1e90>)
 8009b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d113      	bne.n	8009b76 <cppLoop+0x1e16>
				adj_ki = adj_ki - 0.0001;
 8009b4e:	4b2a      	ldr	r3, [pc, #168]	; (8009bf8 <cppLoop+0x1e98>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f6 fd10 	bl	8000578 <__aeabi_f2d>
 8009b58:	a319      	add	r3, pc, #100	; (adr r3, 8009bc0 <cppLoop+0x1e60>)
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	f7f6 fbab 	bl	80002b8 <__aeabi_dsub>
 8009b62:	4603      	mov	r3, r0
 8009b64:	460c      	mov	r4, r1
 8009b66:	4618      	mov	r0, r3
 8009b68:	4621      	mov	r1, r4
 8009b6a:	f7f7 f855 	bl	8000c18 <__aeabi_d2f>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	4b21      	ldr	r3, [pc, #132]	; (8009bf8 <cppLoop+0x1e98>)
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	e012      	b.n	8009b9c <cppLoop+0x1e3c>
				adj_kd = adj_kd - 0.000001;
 8009b76:	4b21      	ldr	r3, [pc, #132]	; (8009bfc <cppLoop+0x1e9c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7f6 fcfc 	bl	8000578 <__aeabi_f2d>
 8009b80:	a311      	add	r3, pc, #68	; (adr r3, 8009bc8 <cppLoop+0x1e68>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 fb97 	bl	80002b8 <__aeabi_dsub>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	4618      	mov	r0, r3
 8009b90:	4621      	mov	r1, r4
 8009b92:	f7f7 f841 	bl	8000c18 <__aeabi_d2f>
 8009b96:	4602      	mov	r2, r0
 8009b98:	4b18      	ldr	r3, [pc, #96]	; (8009bfc <cppLoop+0x1e9c>)
 8009b9a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009b9c:	2152      	movs	r1, #82	; 0x52
 8009b9e:	480c      	ldr	r0, [pc, #48]	; (8009bd0 <cppLoop+0x1e70>)
 8009ba0:	f7f8 fb58 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f04f 31ff 	mov.w	r1, #4294967295
 8009baa:	4809      	ldr	r0, [pc, #36]	; (8009bd0 <cppLoop+0x1e70>)
 8009bac:	f7f8 fc0e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009bb0:	e08c      	b.n	8009ccc <cppLoop+0x1f6c>
 8009bb2:	bf00      	nop
 8009bb4:	f3af 8000 	nop.w
 8009bb8:	88e368f1 	.word	0x88e368f1
 8009bbc:	3ee4f8b5 	.word	0x3ee4f8b5
 8009bc0:	eb1c432d 	.word	0xeb1c432d
 8009bc4:	3f1a36e2 	.word	0x3f1a36e2
 8009bc8:	a0b5ed8d 	.word	0xa0b5ed8d
 8009bcc:	3eb0c6f7 	.word	0x3eb0c6f7
 8009bd0:	200005d0 	.word	0x200005d0
 8009bd4:	2001db64 	.word	0x2001db64
 8009bd8:	447a0000 	.word	0x447a0000
 8009bdc:	0801a1d0 	.word	0x0801a1d0
 8009be0:	42c80000 	.word	0x42c80000
 8009be4:	461c4000 	.word	0x461c4000
 8009be8:	0801a014 	.word	0x0801a014
 8009bec:	200005c4 	.word	0x200005c4
 8009bf0:	200423da 	.word	0x200423da
 8009bf4:	200423e4 	.word	0x200423e4
 8009bf8:	200423ec 	.word	0x200423ec
 8009bfc:	200423f4 	.word	0x200423f4
		else if(joy_stick.getValue() == JOY_C){
 8009c00:	4836      	ldr	r0, [pc, #216]	; (8009cdc <cppLoop+0x1f7c>)
 8009c02:	f7f8 fac3 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	bf0c      	ite	eq
 8009c0c:	2301      	moveq	r3, #1
 8009c0e:	2300      	movne	r3, #0
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d05a      	beq.n	8009ccc <cppLoop+0x1f6c>
			led.LR(-1, 1);
 8009c16:	2201      	movs	r2, #1
 8009c18:	f04f 31ff 	mov.w	r1, #4294967295
 8009c1c:	4830      	ldr	r0, [pc, #192]	; (8009ce0 <cppLoop+0x1f80>)
 8009c1e:	f7f8 fbd5 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009c22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009c26:	f000 f97b 	bl	8009f20 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	4b2d      	ldr	r3, [pc, #180]	; (8009ce4 <cppLoop+0x1f84>)
 8009c30:	2201      	movs	r2, #1
 8009c32:	492d      	ldr	r1, [pc, #180]	; (8009ce8 <cppLoop+0x1f88>)
 8009c34:	482d      	ldr	r0, [pc, #180]	; (8009cec <cppLoop+0x1f8c>)
 8009c36:	f7f7 fe21 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	4b2c      	ldr	r3, [pc, #176]	; (8009cf0 <cppLoop+0x1f90>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	492c      	ldr	r1, [pc, #176]	; (8009cf4 <cppLoop+0x1f94>)
 8009c44:	4829      	ldr	r0, [pc, #164]	; (8009cec <cppLoop+0x1f8c>)
 8009c46:	f7f7 fe19 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	4b2a      	ldr	r3, [pc, #168]	; (8009cf8 <cppLoop+0x1f98>)
 8009c50:	2201      	movs	r2, #1
 8009c52:	492a      	ldr	r1, [pc, #168]	; (8009cfc <cppLoop+0x1f9c>)
 8009c54:	4825      	ldr	r0, [pc, #148]	; (8009cec <cppLoop+0x1f8c>)
 8009c56:	f7f7 fe11 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009c5a:	4b22      	ldr	r3, [pc, #136]	; (8009ce4 <cppLoop+0x1f84>)
 8009c5c:	edd3 7a00 	vldr	s15, [r3]
 8009c60:	4b23      	ldr	r3, [pc, #140]	; (8009cf0 <cppLoop+0x1f90>)
 8009c62:	ed93 7a00 	vldr	s14, [r3]
 8009c66:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <cppLoop+0x1f98>)
 8009c68:	edd3 6a00 	vldr	s13, [r3]
 8009c6c:	eeb0 1a66 	vmov.f32	s2, s13
 8009c70:	eef0 0a47 	vmov.f32	s1, s14
 8009c74:	eeb0 0a67 	vmov.f32	s0, s15
 8009c78:	4821      	ldr	r0, [pc, #132]	; (8009d00 <cppLoop+0x1fa0>)
 8009c7a:	f7fa f827 	bl	8003ccc <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f04f 31ff 	mov.w	r1, #4294967295
 8009c84:	4816      	ldr	r0, [pc, #88]	; (8009ce0 <cppLoop+0x1f80>)
 8009c86:	f7f8 fba1 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009c8a:	e01f      	b.n	8009ccc <cppLoop+0x1f6c>

	default:
		break;
 8009c8c:	bf00      	nop
 8009c8e:	e01e      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009c90:	bf00      	nop
 8009c92:	e01c      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009c94:	bf00      	nop
 8009c96:	e01a      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009c98:	bf00      	nop
 8009c9a:	e018      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009c9c:	bf00      	nop
 8009c9e:	e016      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009ca0:	bf00      	nop
 8009ca2:	e014      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009ca4:	bf00      	nop
 8009ca6:	e012      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009ca8:	bf00      	nop
 8009caa:	e010      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009cac:	bf00      	nop
 8009cae:	e00e      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009cb0:	bf00      	nop
 8009cb2:	e00c      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009cb4:	bf00      	nop
 8009cb6:	e00a      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009cb8:	bf00      	nop
 8009cba:	e008      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009cbc:	bf00      	nop
 8009cbe:	e006      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009cc0:	bf00      	nop
 8009cc2:	e004      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009cc4:	bf00      	nop
 8009cc6:	e002      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009cc8:	bf00      	nop
 8009cca:	e000      	b.n	8009cce <cppLoop+0x1f6e>
		break;
 8009ccc:	bf00      	nop

	}

	HAL_Delay(30);
 8009cce:	201e      	movs	r0, #30
 8009cd0:	f000 f926 	bl	8009f20 <HAL_Delay>

}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cdc:	200005c4 	.word	0x200005c4
 8009ce0:	200005d0 	.word	0x200005d0
 8009ce4:	200423e4 	.word	0x200423e4
 8009ce8:	0801a1dc 	.word	0x0801a1dc
 8009cec:	0801a030 	.word	0x0801a030
 8009cf0:	200423ec 	.word	0x200423ec
 8009cf4:	0801a1e4 	.word	0x0801a1e4
 8009cf8:	200423f4 	.word	0x200423f4
 8009cfc:	0801a1ec 	.word	0x0801a1ec
 8009d00:	2001db64 	.word	0x2001db64

08009d04 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b088      	sub	sp, #32
 8009d08:	af06      	add	r7, sp, #24
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d142      	bne.n	8009d9a <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d13d      	bne.n	8009d9a <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009d1e:	4821      	ldr	r0, [pc, #132]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009d20:	f7f8 fb8c 	bl	800243c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009d24:	4820      	ldr	r0, [pc, #128]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d26:	f7fb fc5f 	bl	80055e8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009d2a:	4820      	ldr	r0, [pc, #128]	; (8009dac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009d2c:	f7f8 fa22 	bl	8002174 <_ZN8JoyStickC1Ev>
Motor motor;
 8009d30:	481f      	ldr	r0, [pc, #124]	; (8009db0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d32:	f7fb f86a 	bl	8004e0a <_ZN5MotorC1Ev>
IMU imu;
 8009d36:	481f      	ldr	r0, [pc, #124]	; (8009db4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d38:	f7f8 f818 	bl	8001d6c <_ZN3IMUC1Ev>
Logger logger;
 8009d3c:	481e      	ldr	r0, [pc, #120]	; (8009db8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d3e:	f7fa fdaf 	bl	80048a0 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009d42:	481e      	ldr	r0, [pc, #120]	; (8009dbc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d44:	f7f7 fb42 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009d48:	4b1a      	ldr	r3, [pc, #104]	; (8009db4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d4a:	4a1c      	ldr	r2, [pc, #112]	; (8009dbc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d4c:	4918      	ldr	r1, [pc, #96]	; (8009db0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d4e:	481c      	ldr	r0, [pc, #112]	; (8009dc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d50:	f7fb ffe0 	bl	8005d14 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009d54:	4b1a      	ldr	r3, [pc, #104]	; (8009dc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d56:	4a17      	ldr	r2, [pc, #92]	; (8009db4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d58:	4918      	ldr	r1, [pc, #96]	; (8009dbc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d5a:	481a      	ldr	r0, [pc, #104]	; (8009dc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d5c:	f7fb f954 	bl	8005008 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009d60:	4819      	ldr	r0, [pc, #100]	; (8009dc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d62:	f7f7 fa37 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009d66:	4b18      	ldr	r3, [pc, #96]	; (8009dc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	4b12      	ldr	r3, [pc, #72]	; (8009db4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	4b12      	ldr	r3, [pc, #72]	; (8009db8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d70:	9303      	str	r3, [sp, #12]
 8009d72:	4b14      	ldr	r3, [pc, #80]	; (8009dc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d74:	9302      	str	r3, [sp, #8]
 8009d76:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d80:	4a08      	ldr	r2, [pc, #32]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009d82:	490b      	ldr	r1, [pc, #44]	; (8009db0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d84:	4811      	ldr	r0, [pc, #68]	; (8009dcc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009d86:	f7f8 fea1 	bl	8002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009d8a:	4a09      	ldr	r2, [pc, #36]	; (8009db0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d8c:	490a      	ldr	r1, [pc, #40]	; (8009db8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d8e:	4810      	ldr	r0, [pc, #64]	; (8009dd0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009d90:	f7fb fda6 	bl	80058e0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009d94:	480f      	ldr	r0, [pc, #60]	; (8009dd4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009d96:	f7fb fab9 	bl	800530c <_ZN13PathFollowingC1Ev>
}
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	200002c0 	.word	0x200002c0
 8009da8:	200005b8 	.word	0x200005b8
 8009dac:	200005c4 	.word	0x200005c4
 8009db0:	200005cc 	.word	0x200005cc
 8009db4:	200005e0 	.word	0x200005e0
 8009db8:	200005f4 	.word	0x200005f4
 8009dbc:	2001dac0 	.word	0x2001dac0
 8009dc0:	2001dae0 	.word	0x2001dae0
 8009dc4:	2001db20 	.word	0x2001db20
 8009dc8:	2001db60 	.word	0x2001db60
 8009dcc:	2001db64 	.word	0x2001db64
 8009dd0:	2002aaa4 	.word	0x2002aaa4
 8009dd4:	2002acb0 	.word	0x2002acb0

08009dd8 <_GLOBAL__sub_I_line_sensor>:
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009de0:	2001      	movs	r0, #1
 8009de2:	f7ff ff8f 	bl	8009d04 <_Z41__static_initialization_and_destruction_0ii>
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009dec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009dee:	e003      	b.n	8009df8 <LoopCopyDataInit>

08009df0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009df0:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009df2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009df4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009df6:	3104      	adds	r1, #4

08009df8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009df8:	480b      	ldr	r0, [pc, #44]	; (8009e28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009dfa:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009dfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009dfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009e00:	d3f6      	bcc.n	8009df0 <CopyDataInit>
  ldr  r2, =_sbss
 8009e02:	4a0b      	ldr	r2, [pc, #44]	; (8009e30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009e04:	e002      	b.n	8009e0c <LoopFillZerobss>

08009e06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009e06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009e08:	f842 3b04 	str.w	r3, [r2], #4

08009e0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009e0c:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009e0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009e10:	d3f9      	bcc.n	8009e06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009e12:	f7fd fe83 	bl	8007b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009e16:	f00b fdd3 	bl	80159c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009e1a:	f7fc f9bd 	bl	8006198 <main>
  bx  lr    
 8009e1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009e20:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009e24:	0801a7e0 	.word	0x0801a7e0
  ldr  r0, =_sdata
 8009e28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009e2c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009e30:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009e34:	20046e38 	.word	0x20046e38

08009e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e38:	e7fe      	b.n	8009e38 <ADC_IRQHandler>
	...

08009e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009e40:	4b0e      	ldr	r3, [pc, #56]	; (8009e7c <HAL_Init+0x40>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a0d      	ldr	r2, [pc, #52]	; (8009e7c <HAL_Init+0x40>)
 8009e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009e4c:	4b0b      	ldr	r3, [pc, #44]	; (8009e7c <HAL_Init+0x40>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a0a      	ldr	r2, [pc, #40]	; (8009e7c <HAL_Init+0x40>)
 8009e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009e58:	4b08      	ldr	r3, [pc, #32]	; (8009e7c <HAL_Init+0x40>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a07      	ldr	r2, [pc, #28]	; (8009e7c <HAL_Init+0x40>)
 8009e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e64:	2003      	movs	r0, #3
 8009e66:	f000 fd51 	bl	800a90c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	f000 f808 	bl	8009e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009e70:	f7fd f8a4 	bl	8006fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40023c00 	.word	0x40023c00

08009e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e88:	4b12      	ldr	r3, [pc, #72]	; (8009ed4 <HAL_InitTick+0x54>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	4b12      	ldr	r3, [pc, #72]	; (8009ed8 <HAL_InitTick+0x58>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	4619      	mov	r1, r3
 8009e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 fd69 	bl	800a976 <HAL_SYSTICK_Config>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e00e      	b.n	8009ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2b0f      	cmp	r3, #15
 8009eb2:	d80a      	bhi.n	8009eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	f000 fd31 	bl	800a922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009ec0:	4a06      	ldr	r2, [pc, #24]	; (8009edc <HAL_InitTick+0x5c>)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	e000      	b.n	8009ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	20000000 	.word	0x20000000
 8009ed8:	20000008 	.word	0x20000008
 8009edc:	20000004 	.word	0x20000004

08009ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ee4:	4b06      	ldr	r3, [pc, #24]	; (8009f00 <HAL_IncTick+0x20>)
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	4b06      	ldr	r3, [pc, #24]	; (8009f04 <HAL_IncTick+0x24>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4413      	add	r3, r2
 8009ef0:	4a04      	ldr	r2, [pc, #16]	; (8009f04 <HAL_IncTick+0x24>)
 8009ef2:	6013      	str	r3, [r2, #0]
}
 8009ef4:	bf00      	nop
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	20000008 	.word	0x20000008
 8009f04:	20044dc0 	.word	0x20044dc0

08009f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8009f0c:	4b03      	ldr	r3, [pc, #12]	; (8009f1c <HAL_GetTick+0x14>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	20044dc0 	.word	0x20044dc0

08009f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f28:	f7ff ffee 	bl	8009f08 <HAL_GetTick>
 8009f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d005      	beq.n	8009f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f3a:	4b09      	ldr	r3, [pc, #36]	; (8009f60 <HAL_Delay+0x40>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4413      	add	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009f46:	bf00      	nop
 8009f48:	f7ff ffde 	bl	8009f08 <HAL_GetTick>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d8f7      	bhi.n	8009f48 <HAL_Delay+0x28>
  {
  }
}
 8009f58:	bf00      	nop
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20000008 	.word	0x20000008

08009f64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e033      	b.n	8009fe2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d109      	bne.n	8009f96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7fd f842 	bl	800700c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9a:	f003 0310 	and.w	r3, r3, #16
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d118      	bne.n	8009fd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009faa:	f023 0302 	bic.w	r3, r3, #2
 8009fae:	f043 0202 	orr.w	r2, r3, #2
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fa5a 	bl	800a470 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	f043 0201 	orr.w	r2, r3, #1
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	641a      	str	r2, [r3, #64]	; 0x40
 8009fd2:	e001      	b.n	8009fd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
	...

08009fec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <HAL_ADC_Start_DMA+0x1e>
 800a006:	2302      	movs	r3, #2
 800a008:	e0cc      	b.n	800a1a4 <HAL_ADC_Start_DMA+0x1b8>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d018      	beq.n	800a052 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689a      	ldr	r2, [r3, #8]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f042 0201 	orr.w	r2, r2, #1
 800a02e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a030:	4b5e      	ldr	r3, [pc, #376]	; (800a1ac <HAL_ADC_Start_DMA+0x1c0>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a5e      	ldr	r2, [pc, #376]	; (800a1b0 <HAL_ADC_Start_DMA+0x1c4>)
 800a036:	fba2 2303 	umull	r2, r3, r2, r3
 800a03a:	0c9a      	lsrs	r2, r3, #18
 800a03c:	4613      	mov	r3, r2
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	4413      	add	r3, r2
 800a042:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a044:	e002      	b.n	800a04c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	3b01      	subs	r3, #1
 800a04a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1f9      	bne.n	800a046 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	f040 80a0 	bne.w	800a1a2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a066:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a06a:	f023 0301 	bic.w	r3, r3, #1
 800a06e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a080:	2b00      	cmp	r3, #0
 800a082:	d007      	beq.n	800a094 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a088:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a08c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0a0:	d106      	bne.n	800a0b0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a6:	f023 0206 	bic.w	r2, r3, #6
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	645a      	str	r2, [r3, #68]	; 0x44
 800a0ae:	e002      	b.n	800a0b6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a0be:	4b3d      	ldr	r3, [pc, #244]	; (800a1b4 <HAL_ADC_Start_DMA+0x1c8>)
 800a0c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c6:	4a3c      	ldr	r2, [pc, #240]	; (800a1b8 <HAL_ADC_Start_DMA+0x1cc>)
 800a0c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	4a3b      	ldr	r2, [pc, #236]	; (800a1bc <HAL_ADC_Start_DMA+0x1d0>)
 800a0d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d6:	4a3a      	ldr	r2, [pc, #232]	; (800a1c0 <HAL_ADC_Start_DMA+0x1d4>)
 800a0d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a0e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a0f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689a      	ldr	r2, [r3, #8]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a102:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	334c      	adds	r3, #76	; 0x4c
 800a10e:	4619      	mov	r1, r3
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f000 fcea 	bl	800aaec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f003 031f 	and.w	r3, r3, #31
 800a120:	2b00      	cmp	r3, #0
 800a122:	d12a      	bne.n	800a17a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a26      	ldr	r2, [pc, #152]	; (800a1c4 <HAL_ADC_Start_DMA+0x1d8>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d015      	beq.n	800a15a <HAL_ADC_Start_DMA+0x16e>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a25      	ldr	r2, [pc, #148]	; (800a1c8 <HAL_ADC_Start_DMA+0x1dc>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d105      	bne.n	800a144 <HAL_ADC_Start_DMA+0x158>
 800a138:	4b1e      	ldr	r3, [pc, #120]	; (800a1b4 <HAL_ADC_Start_DMA+0x1c8>)
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	f003 031f 	and.w	r3, r3, #31
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00a      	beq.n	800a15a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a20      	ldr	r2, [pc, #128]	; (800a1cc <HAL_ADC_Start_DMA+0x1e0>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d129      	bne.n	800a1a2 <HAL_ADC_Start_DMA+0x1b6>
 800a14e:	4b19      	ldr	r3, [pc, #100]	; (800a1b4 <HAL_ADC_Start_DMA+0x1c8>)
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f003 031f 	and.w	r3, r3, #31
 800a156:	2b0f      	cmp	r3, #15
 800a158:	d823      	bhi.n	800a1a2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d11c      	bne.n	800a1a2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689a      	ldr	r2, [r3, #8]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a176:	609a      	str	r2, [r3, #8]
 800a178:	e013      	b.n	800a1a2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a11      	ldr	r2, [pc, #68]	; (800a1c4 <HAL_ADC_Start_DMA+0x1d8>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d10e      	bne.n	800a1a2 <HAL_ADC_Start_DMA+0x1b6>
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d107      	bne.n	800a1a2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a1a0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3718      	adds	r7, #24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20000000 	.word	0x20000000
 800a1b0:	431bde83 	.word	0x431bde83
 800a1b4:	40012300 	.word	0x40012300
 800a1b8:	0800a669 	.word	0x0800a669
 800a1bc:	0800a723 	.word	0x0800a723
 800a1c0:	0800a73f 	.word	0x0800a73f
 800a1c4:	40012000 	.word	0x40012000
 800a1c8:	40012100 	.word	0x40012100
 800a1cc:	40012200 	.word	0x40012200

0800a1d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_ADC_ConfigChannel+0x1c>
 800a224:	2302      	movs	r3, #2
 800a226:	e113      	b.n	800a450 <HAL_ADC_ConfigChannel+0x244>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b09      	cmp	r3, #9
 800a236:	d925      	bls.n	800a284 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68d9      	ldr	r1, [r3, #12]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	b29b      	uxth	r3, r3
 800a244:	461a      	mov	r2, r3
 800a246:	4613      	mov	r3, r2
 800a248:	005b      	lsls	r3, r3, #1
 800a24a:	4413      	add	r3, r2
 800a24c:	3b1e      	subs	r3, #30
 800a24e:	2207      	movs	r2, #7
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	43da      	mvns	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	400a      	ands	r2, r1
 800a25c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68d9      	ldr	r1, [r3, #12]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4618      	mov	r0, r3
 800a270:	4603      	mov	r3, r0
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	4403      	add	r3, r0
 800a276:	3b1e      	subs	r3, #30
 800a278:	409a      	lsls	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	60da      	str	r2, [r3, #12]
 800a282:	e022      	b.n	800a2ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6919      	ldr	r1, [r3, #16]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	461a      	mov	r2, r3
 800a292:	4613      	mov	r3, r2
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	4413      	add	r3, r2
 800a298:	2207      	movs	r2, #7
 800a29a:	fa02 f303 	lsl.w	r3, r2, r3
 800a29e:	43da      	mvns	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	400a      	ands	r2, r1
 800a2a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6919      	ldr	r1, [r3, #16]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	689a      	ldr	r2, [r3, #8]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	005b      	lsls	r3, r3, #1
 800a2be:	4403      	add	r3, r0
 800a2c0:	409a      	lsls	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	2b06      	cmp	r3, #6
 800a2d0:	d824      	bhi.n	800a31c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	3b05      	subs	r3, #5
 800a2e4:	221f      	movs	r2, #31
 800a2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ea:	43da      	mvns	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	400a      	ands	r2, r1
 800a2f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	4618      	mov	r0, r3
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	4613      	mov	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4413      	add	r3, r2
 800a30c:	3b05      	subs	r3, #5
 800a30e:	fa00 f203 	lsl.w	r2, r0, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	430a      	orrs	r2, r1
 800a318:	635a      	str	r2, [r3, #52]	; 0x34
 800a31a:	e04c      	b.n	800a3b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	2b0c      	cmp	r3, #12
 800a322:	d824      	bhi.n	800a36e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	4613      	mov	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	3b23      	subs	r3, #35	; 0x23
 800a336:	221f      	movs	r2, #31
 800a338:	fa02 f303 	lsl.w	r3, r2, r3
 800a33c:	43da      	mvns	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	400a      	ands	r2, r1
 800a344:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	b29b      	uxth	r3, r3
 800a352:	4618      	mov	r0, r3
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	3b23      	subs	r3, #35	; 0x23
 800a360:	fa00 f203 	lsl.w	r2, r0, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	430a      	orrs	r2, r1
 800a36a:	631a      	str	r2, [r3, #48]	; 0x30
 800a36c:	e023      	b.n	800a3b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	685a      	ldr	r2, [r3, #4]
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	3b41      	subs	r3, #65	; 0x41
 800a380:	221f      	movs	r2, #31
 800a382:	fa02 f303 	lsl.w	r3, r2, r3
 800a386:	43da      	mvns	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	400a      	ands	r2, r1
 800a38e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	4618      	mov	r0, r3
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	3b41      	subs	r3, #65	; 0x41
 800a3aa:	fa00 f203 	lsl.w	r2, r0, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a3b6:	4b29      	ldr	r3, [pc, #164]	; (800a45c <HAL_ADC_ConfigChannel+0x250>)
 800a3b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a28      	ldr	r2, [pc, #160]	; (800a460 <HAL_ADC_ConfigChannel+0x254>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d10f      	bne.n	800a3e4 <HAL_ADC_ConfigChannel+0x1d8>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b12      	cmp	r3, #18
 800a3ca:	d10b      	bne.n	800a3e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a1d      	ldr	r2, [pc, #116]	; (800a460 <HAL_ADC_ConfigChannel+0x254>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d12b      	bne.n	800a446 <HAL_ADC_ConfigChannel+0x23a>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a1c      	ldr	r2, [pc, #112]	; (800a464 <HAL_ADC_ConfigChannel+0x258>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d003      	beq.n	800a400 <HAL_ADC_ConfigChannel+0x1f4>
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b11      	cmp	r3, #17
 800a3fe:	d122      	bne.n	800a446 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a11      	ldr	r2, [pc, #68]	; (800a464 <HAL_ADC_ConfigChannel+0x258>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d111      	bne.n	800a446 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a422:	4b11      	ldr	r3, [pc, #68]	; (800a468 <HAL_ADC_ConfigChannel+0x25c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a11      	ldr	r2, [pc, #68]	; (800a46c <HAL_ADC_ConfigChannel+0x260>)
 800a428:	fba2 2303 	umull	r2, r3, r2, r3
 800a42c:	0c9a      	lsrs	r2, r3, #18
 800a42e:	4613      	mov	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a438:	e002      	b.n	800a440 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1f9      	bne.n	800a43a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	40012300 	.word	0x40012300
 800a460:	40012000 	.word	0x40012000
 800a464:	10000012 	.word	0x10000012
 800a468:	20000000 	.word	0x20000000
 800a46c:	431bde83 	.word	0x431bde83

0800a470 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a478:	4b79      	ldr	r3, [pc, #484]	; (800a660 <ADC_Init+0x1f0>)
 800a47a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	431a      	orrs	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6859      	ldr	r1, [r3, #4]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	021a      	lsls	r2, r3, #8
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a4c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6859      	ldr	r1, [r3, #4]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689a      	ldr	r2, [r3, #8]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689a      	ldr	r2, [r3, #8]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6899      	ldr	r1, [r3, #8]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a502:	4a58      	ldr	r2, [pc, #352]	; (800a664 <ADC_Init+0x1f4>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d022      	beq.n	800a54e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	689a      	ldr	r2, [r3, #8]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a516:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6899      	ldr	r1, [r3, #8]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	430a      	orrs	r2, r1
 800a528:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6899      	ldr	r1, [r3, #8]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	430a      	orrs	r2, r1
 800a54a:	609a      	str	r2, [r3, #8]
 800a54c:	e00f      	b.n	800a56e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a55c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a56c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	689a      	ldr	r2, [r3, #8]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f022 0202 	bic.w	r2, r2, #2
 800a57c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6899      	ldr	r1, [r3, #8]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	7e1b      	ldrb	r3, [r3, #24]
 800a588:	005a      	lsls	r2, r3, #1
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01b      	beq.n	800a5d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a5ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6859      	ldr	r1, [r3, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	035a      	lsls	r2, r3, #13
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	605a      	str	r2, [r3, #4]
 800a5d2:	e007      	b.n	800a5e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	685a      	ldr	r2, [r3, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a5f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	69db      	ldr	r3, [r3, #28]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	051a      	lsls	r2, r3, #20
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	689a      	ldr	r2, [r3, #8]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6899      	ldr	r1, [r3, #8]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a626:	025a      	lsls	r2, r3, #9
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	430a      	orrs	r2, r1
 800a62e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689a      	ldr	r2, [r3, #8]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a63e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6899      	ldr	r1, [r3, #8]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	029a      	lsls	r2, r3, #10
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	430a      	orrs	r2, r1
 800a652:	609a      	str	r2, [r3, #8]
}
 800a654:	bf00      	nop
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	40012300 	.word	0x40012300
 800a664:	0f000001 	.word	0x0f000001

0800a668 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a674:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d13c      	bne.n	800a6fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a686:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d12b      	bne.n	800a6f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d127      	bne.n	800a6f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d006      	beq.n	800a6c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d119      	bne.n	800a6f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f022 0220 	bic.w	r2, r2, #32
 800a6ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d105      	bne.n	800a6f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ec:	f043 0201 	orr.w	r2, r3, #1
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f7ff fd6b 	bl	800a1d0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a6fa:	e00e      	b.n	800a71a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a700:	f003 0310 	and.w	r3, r3, #16
 800a704:	2b00      	cmp	r3, #0
 800a706:	d003      	beq.n	800a710 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff fd75 	bl	800a1f8 <HAL_ADC_ErrorCallback>
}
 800a70e:	e004      	b.n	800a71a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	4798      	blx	r3
}
 800a71a:	bf00      	nop
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b084      	sub	sp, #16
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f7ff fd57 	bl	800a1e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2240      	movs	r2, #64	; 0x40
 800a750:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a756:	f043 0204 	orr.w	r2, r3, #4
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7ff fd4a 	bl	800a1f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a764:	bf00      	nop
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a77c:	4b0c      	ldr	r3, [pc, #48]	; (800a7b0 <__NVIC_SetPriorityGrouping+0x44>)
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a788:	4013      	ands	r3, r2
 800a78a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a79c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a79e:	4a04      	ldr	r2, [pc, #16]	; (800a7b0 <__NVIC_SetPriorityGrouping+0x44>)
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	60d3      	str	r3, [r2, #12]
}
 800a7a4:	bf00      	nop
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	e000ed00 	.word	0xe000ed00

0800a7b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a7b8:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <__NVIC_GetPriorityGrouping+0x18>)
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	0a1b      	lsrs	r3, r3, #8
 800a7be:	f003 0307 	and.w	r3, r3, #7
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	e000ed00 	.word	0xe000ed00

0800a7d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	db0b      	blt.n	800a7fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	f003 021f 	and.w	r2, r3, #31
 800a7e8:	4907      	ldr	r1, [pc, #28]	; (800a808 <__NVIC_EnableIRQ+0x38>)
 800a7ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7ee:	095b      	lsrs	r3, r3, #5
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	fa00 f202 	lsl.w	r2, r0, r2
 800a7f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a7fa:	bf00      	nop
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	e000e100 	.word	0xe000e100

0800a80c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	6039      	str	r1, [r7, #0]
 800a816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	db0a      	blt.n	800a836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	b2da      	uxtb	r2, r3
 800a824:	490c      	ldr	r1, [pc, #48]	; (800a858 <__NVIC_SetPriority+0x4c>)
 800a826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a82a:	0112      	lsls	r2, r2, #4
 800a82c:	b2d2      	uxtb	r2, r2
 800a82e:	440b      	add	r3, r1
 800a830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a834:	e00a      	b.n	800a84c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	4908      	ldr	r1, [pc, #32]	; (800a85c <__NVIC_SetPriority+0x50>)
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	f003 030f 	and.w	r3, r3, #15
 800a842:	3b04      	subs	r3, #4
 800a844:	0112      	lsls	r2, r2, #4
 800a846:	b2d2      	uxtb	r2, r2
 800a848:	440b      	add	r3, r1
 800a84a:	761a      	strb	r2, [r3, #24]
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr
 800a858:	e000e100 	.word	0xe000e100
 800a85c:	e000ed00 	.word	0xe000ed00

0800a860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a860:	b480      	push	{r7}
 800a862:	b089      	sub	sp, #36	; 0x24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f003 0307 	and.w	r3, r3, #7
 800a872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	f1c3 0307 	rsb	r3, r3, #7
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	bf28      	it	cs
 800a87e:	2304      	movcs	r3, #4
 800a880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	3304      	adds	r3, #4
 800a886:	2b06      	cmp	r3, #6
 800a888:	d902      	bls.n	800a890 <NVIC_EncodePriority+0x30>
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	3b03      	subs	r3, #3
 800a88e:	e000      	b.n	800a892 <NVIC_EncodePriority+0x32>
 800a890:	2300      	movs	r3, #0
 800a892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a894:	f04f 32ff 	mov.w	r2, #4294967295
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	fa02 f303 	lsl.w	r3, r2, r3
 800a89e:	43da      	mvns	r2, r3
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	401a      	ands	r2, r3
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a8a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b2:	43d9      	mvns	r1, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a8b8:	4313      	orrs	r3, r2
         );
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3724      	adds	r7, #36	; 0x24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
	...

0800a8c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8d8:	d301      	bcc.n	800a8de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e00f      	b.n	800a8fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a8de:	4a0a      	ldr	r2, [pc, #40]	; (800a908 <SysTick_Config+0x40>)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a8e6:	210f      	movs	r1, #15
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ec:	f7ff ff8e 	bl	800a80c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a8f0:	4b05      	ldr	r3, [pc, #20]	; (800a908 <SysTick_Config+0x40>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a8f6:	4b04      	ldr	r3, [pc, #16]	; (800a908 <SysTick_Config+0x40>)
 800a8f8:	2207      	movs	r2, #7
 800a8fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	e000e010 	.word	0xe000e010

0800a90c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7ff ff29 	bl	800a76c <__NVIC_SetPriorityGrouping>
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a922:	b580      	push	{r7, lr}
 800a924:	b086      	sub	sp, #24
 800a926:	af00      	add	r7, sp, #0
 800a928:	4603      	mov	r3, r0
 800a92a:	60b9      	str	r1, [r7, #8]
 800a92c:	607a      	str	r2, [r7, #4]
 800a92e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a930:	2300      	movs	r3, #0
 800a932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a934:	f7ff ff3e 	bl	800a7b4 <__NVIC_GetPriorityGrouping>
 800a938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	68b9      	ldr	r1, [r7, #8]
 800a93e:	6978      	ldr	r0, [r7, #20]
 800a940:	f7ff ff8e 	bl	800a860 <NVIC_EncodePriority>
 800a944:	4602      	mov	r2, r0
 800a946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a94a:	4611      	mov	r1, r2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7ff ff5d 	bl	800a80c <__NVIC_SetPriority>
}
 800a952:	bf00      	nop
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b082      	sub	sp, #8
 800a95e:	af00      	add	r7, sp, #0
 800a960:	4603      	mov	r3, r0
 800a962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff ff31 	bl	800a7d0 <__NVIC_EnableIRQ>
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff ffa2 	bl	800a8c8 <SysTick_Config>
 800a984:	4603      	mov	r3, r0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a998:	2300      	movs	r3, #0
 800a99a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a99c:	f7ff fab4 	bl	8009f08 <HAL_GetTick>
 800a9a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d101      	bne.n	800a9ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e099      	b.n	800aae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f022 0201 	bic.w	r2, r2, #1
 800a9ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9cc:	e00f      	b.n	800a9ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a9ce:	f7ff fa9b 	bl	8009f08 <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	2b05      	cmp	r3, #5
 800a9da:	d908      	bls.n	800a9ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2220      	movs	r2, #32
 800a9e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2203      	movs	r2, #3
 800a9e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e078      	b.n	800aae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 0301 	and.w	r3, r3, #1
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1e8      	bne.n	800a9ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	4b38      	ldr	r3, [pc, #224]	; (800aae8 <HAL_DMA_Init+0x158>)
 800aa08:	4013      	ands	r3, r2
 800aa0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aa26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	d107      	bne.n	800aa58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa50:	4313      	orrs	r3, r2
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	f023 0307 	bic.w	r3, r3, #7
 800aa6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	2b04      	cmp	r3, #4
 800aa80:	d117      	bne.n	800aab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00e      	beq.n	800aab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fa9d 	bl	800afd4 <DMA_CheckFifoParam>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d008      	beq.n	800aab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2240      	movs	r2, #64	; 0x40
 800aaa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800aaae:	2301      	movs	r3, #1
 800aab0:	e016      	b.n	800aae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fa54 	bl	800af68 <DMA_CalcBaseAndBitshift>
 800aac0:	4603      	mov	r3, r0
 800aac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac8:	223f      	movs	r2, #63	; 0x3f
 800aaca:	409a      	lsls	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3718      	adds	r7, #24
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	f010803f 	.word	0xf010803f

0800aaec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
 800aaf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d101      	bne.n	800ab12 <HAL_DMA_Start_IT+0x26>
 800ab0e:	2302      	movs	r3, #2
 800ab10:	e040      	b.n	800ab94 <HAL_DMA_Start_IT+0xa8>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d12f      	bne.n	800ab86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2202      	movs	r2, #2
 800ab2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	68b9      	ldr	r1, [r7, #8]
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f000 f9e6 	bl	800af0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab44:	223f      	movs	r2, #63	; 0x3f
 800ab46:	409a      	lsls	r2, r3
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f042 0216 	orr.w	r2, r2, #22
 800ab5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d007      	beq.n	800ab74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f042 0208 	orr.w	r2, r2, #8
 800ab72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f042 0201 	orr.w	r2, r2, #1
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	e005      	b.n	800ab92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ab8e:	2302      	movs	r3, #2
 800ab90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3718      	adds	r7, #24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	2b02      	cmp	r3, #2
 800abae:	d004      	beq.n	800abba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2280      	movs	r2, #128	; 0x80
 800abb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e00c      	b.n	800abd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2205      	movs	r2, #5
 800abbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f022 0201 	bic.w	r2, r2, #1
 800abd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800abe8:	2300      	movs	r3, #0
 800abea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800abec:	4b92      	ldr	r3, [pc, #584]	; (800ae38 <HAL_DMA_IRQHandler+0x258>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a92      	ldr	r2, [pc, #584]	; (800ae3c <HAL_DMA_IRQHandler+0x25c>)
 800abf2:	fba2 2303 	umull	r2, r3, r2, r3
 800abf6:	0a9b      	lsrs	r3, r3, #10
 800abf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac0a:	2208      	movs	r2, #8
 800ac0c:	409a      	lsls	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	4013      	ands	r3, r2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d01a      	beq.n	800ac4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d013      	beq.n	800ac4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f022 0204 	bic.w	r2, r2, #4
 800ac32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac38:	2208      	movs	r2, #8
 800ac3a:	409a      	lsls	r2, r3
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac44:	f043 0201 	orr.w	r2, r3, #1
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac50:	2201      	movs	r2, #1
 800ac52:	409a      	lsls	r2, r3
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4013      	ands	r3, r2
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d012      	beq.n	800ac82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00b      	beq.n	800ac82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac6e:	2201      	movs	r2, #1
 800ac70:	409a      	lsls	r2, r3
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac7a:	f043 0202 	orr.w	r2, r3, #2
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac86:	2204      	movs	r2, #4
 800ac88:	409a      	lsls	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d012      	beq.n	800acb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 0302 	and.w	r3, r3, #2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00b      	beq.n	800acb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aca4:	2204      	movs	r2, #4
 800aca6:	409a      	lsls	r2, r3
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb0:	f043 0204 	orr.w	r2, r3, #4
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acbc:	2210      	movs	r2, #16
 800acbe:	409a      	lsls	r2, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4013      	ands	r3, r2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d043      	beq.n	800ad50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 0308 	and.w	r3, r3, #8
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d03c      	beq.n	800ad50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acda:	2210      	movs	r2, #16
 800acdc:	409a      	lsls	r2, r3
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d018      	beq.n	800ad22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d108      	bne.n	800ad10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d024      	beq.n	800ad50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	4798      	blx	r3
 800ad0e:	e01f      	b.n	800ad50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d01b      	beq.n	800ad50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	4798      	blx	r3
 800ad20:	e016      	b.n	800ad50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d107      	bne.n	800ad40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f022 0208 	bic.w	r2, r2, #8
 800ad3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d003      	beq.n	800ad50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad54:	2220      	movs	r2, #32
 800ad56:	409a      	lsls	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 808e 	beq.w	800ae7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0310 	and.w	r3, r3, #16
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 8086 	beq.w	800ae7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad76:	2220      	movs	r2, #32
 800ad78:	409a      	lsls	r2, r3
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b05      	cmp	r3, #5
 800ad88:	d136      	bne.n	800adf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f022 0216 	bic.w	r2, r2, #22
 800ad98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	695a      	ldr	r2, [r3, #20]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ada8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d103      	bne.n	800adba <HAL_DMA_IRQHandler+0x1da>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d007      	beq.n	800adca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f022 0208 	bic.w	r2, r2, #8
 800adc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adce:	223f      	movs	r2, #63	; 0x3f
 800add0:	409a      	lsls	r2, r3
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adea:	2b00      	cmp	r3, #0
 800adec:	d07d      	beq.n	800aeea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	4798      	blx	r3
        }
        return;
 800adf6:	e078      	b.n	800aeea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d01c      	beq.n	800ae40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d108      	bne.n	800ae26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d030      	beq.n	800ae7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	4798      	blx	r3
 800ae24:	e02b      	b.n	800ae7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d027      	beq.n	800ae7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	4798      	blx	r3
 800ae36:	e022      	b.n	800ae7e <HAL_DMA_IRQHandler+0x29e>
 800ae38:	20000000 	.word	0x20000000
 800ae3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10f      	bne.n	800ae6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f022 0210 	bic.w	r2, r2, #16
 800ae5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d032      	beq.n	800aeec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d022      	beq.n	800aed8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2205      	movs	r2, #5
 800ae96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f022 0201 	bic.w	r2, r2, #1
 800aea8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	3301      	adds	r3, #1
 800aeae:	60bb      	str	r3, [r7, #8]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d307      	bcc.n	800aec6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1f2      	bne.n	800aeaa <HAL_DMA_IRQHandler+0x2ca>
 800aec4:	e000      	b.n	800aec8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800aec6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d005      	beq.n	800aeec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	4798      	blx	r3
 800aee8:	e000      	b.n	800aeec <HAL_DMA_IRQHandler+0x30c>
        return;
 800aeea:	bf00      	nop
    }
  }
}
 800aeec:	3718      	adds	r7, #24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop

0800aef4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800af00:	4618      	mov	r0, r3
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
 800af18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	2b40      	cmp	r3, #64	; 0x40
 800af38:	d108      	bne.n	800af4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800af4a:	e007      	b.n	800af5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	60da      	str	r2, [r3, #12]
}
 800af5c:	bf00      	nop
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	b2db      	uxtb	r3, r3
 800af76:	3b10      	subs	r3, #16
 800af78:	4a14      	ldr	r2, [pc, #80]	; (800afcc <DMA_CalcBaseAndBitshift+0x64>)
 800af7a:	fba2 2303 	umull	r2, r3, r2, r3
 800af7e:	091b      	lsrs	r3, r3, #4
 800af80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af82:	4a13      	ldr	r2, [pc, #76]	; (800afd0 <DMA_CalcBaseAndBitshift+0x68>)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	4413      	add	r3, r2
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	461a      	mov	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2b03      	cmp	r3, #3
 800af94:	d909      	bls.n	800afaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af9e:	f023 0303 	bic.w	r3, r3, #3
 800afa2:	1d1a      	adds	r2, r3, #4
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	659a      	str	r2, [r3, #88]	; 0x58
 800afa8:	e007      	b.n	800afba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800afb2:	f023 0303 	bic.w	r3, r3, #3
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	aaaaaaab 	.word	0xaaaaaaab
 800afd0:	0801a228 	.word	0x0801a228

0800afd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d11f      	bne.n	800b02e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	d855      	bhi.n	800b0a0 <DMA_CheckFifoParam+0xcc>
 800aff4:	a201      	add	r2, pc, #4	; (adr r2, 800affc <DMA_CheckFifoParam+0x28>)
 800aff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affa:	bf00      	nop
 800affc:	0800b00d 	.word	0x0800b00d
 800b000:	0800b01f 	.word	0x0800b01f
 800b004:	0800b00d 	.word	0x0800b00d
 800b008:	0800b0a1 	.word	0x0800b0a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d045      	beq.n	800b0a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b01c:	e042      	b.n	800b0a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b022:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b026:	d13f      	bne.n	800b0a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b02c:	e03c      	b.n	800b0a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b036:	d121      	bne.n	800b07c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d836      	bhi.n	800b0ac <DMA_CheckFifoParam+0xd8>
 800b03e:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <DMA_CheckFifoParam+0x70>)
 800b040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b044:	0800b055 	.word	0x0800b055
 800b048:	0800b05b 	.word	0x0800b05b
 800b04c:	0800b055 	.word	0x0800b055
 800b050:	0800b06d 	.word	0x0800b06d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	73fb      	strb	r3, [r7, #15]
      break;
 800b058:	e02f      	b.n	800b0ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b062:	2b00      	cmp	r3, #0
 800b064:	d024      	beq.n	800b0b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b06a:	e021      	b.n	800b0b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b074:	d11e      	bne.n	800b0b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b07a:	e01b      	b.n	800b0b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d902      	bls.n	800b088 <DMA_CheckFifoParam+0xb4>
 800b082:	2b03      	cmp	r3, #3
 800b084:	d003      	beq.n	800b08e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b086:	e018      	b.n	800b0ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	73fb      	strb	r3, [r7, #15]
      break;
 800b08c:	e015      	b.n	800b0ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00e      	beq.n	800b0b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	73fb      	strb	r3, [r7, #15]
      break;
 800b09e:	e00b      	b.n	800b0b8 <DMA_CheckFifoParam+0xe4>
      break;
 800b0a0:	bf00      	nop
 800b0a2:	e00a      	b.n	800b0ba <DMA_CheckFifoParam+0xe6>
      break;
 800b0a4:	bf00      	nop
 800b0a6:	e008      	b.n	800b0ba <DMA_CheckFifoParam+0xe6>
      break;
 800b0a8:	bf00      	nop
 800b0aa:	e006      	b.n	800b0ba <DMA_CheckFifoParam+0xe6>
      break;
 800b0ac:	bf00      	nop
 800b0ae:	e004      	b.n	800b0ba <DMA_CheckFifoParam+0xe6>
      break;
 800b0b0:	bf00      	nop
 800b0b2:	e002      	b.n	800b0ba <DMA_CheckFifoParam+0xe6>
      break;   
 800b0b4:	bf00      	nop
 800b0b6:	e000      	b.n	800b0ba <DMA_CheckFifoParam+0xe6>
      break;
 800b0b8:	bf00      	nop
    }
  } 
  
  return status; 
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b089      	sub	sp, #36	; 0x24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0de:	2300      	movs	r3, #0
 800b0e0:	61fb      	str	r3, [r7, #28]
 800b0e2:	e177      	b.n	800b3d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	f040 8166 	bne.w	800b3ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d00b      	beq.n	800b122 <HAL_GPIO_Init+0x5a>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d007      	beq.n	800b122 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b116:	2b11      	cmp	r3, #17
 800b118:	d003      	beq.n	800b122 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	2b12      	cmp	r3, #18
 800b120:	d130      	bne.n	800b184 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	2203      	movs	r2, #3
 800b12e:	fa02 f303 	lsl.w	r3, r2, r3
 800b132:	43db      	mvns	r3, r3
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	4013      	ands	r3, r2
 800b138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	68da      	ldr	r2, [r3, #12]
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	005b      	lsls	r3, r3, #1
 800b142:	fa02 f303 	lsl.w	r3, r2, r3
 800b146:	69ba      	ldr	r2, [r7, #24]
 800b148:	4313      	orrs	r3, r2
 800b14a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b158:	2201      	movs	r2, #1
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	fa02 f303 	lsl.w	r3, r2, r3
 800b160:	43db      	mvns	r3, r3
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	4013      	ands	r3, r2
 800b166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	091b      	lsrs	r3, r3, #4
 800b16e:	f003 0201 	and.w	r2, r3, #1
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	fa02 f303 	lsl.w	r3, r2, r3
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	69ba      	ldr	r2, [r7, #24]
 800b182:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	005b      	lsls	r3, r3, #1
 800b18e:	2203      	movs	r2, #3
 800b190:	fa02 f303 	lsl.w	r3, r2, r3
 800b194:	43db      	mvns	r3, r3
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	4013      	ands	r3, r2
 800b19a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	689a      	ldr	r2, [r3, #8]
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	005b      	lsls	r3, r3, #1
 800b1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	69ba      	ldr	r2, [r7, #24]
 800b1b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d003      	beq.n	800b1c4 <HAL_GPIO_Init+0xfc>
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	2b12      	cmp	r3, #18
 800b1c2:	d123      	bne.n	800b20c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	08da      	lsrs	r2, r3, #3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3208      	adds	r2, #8
 800b1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	f003 0307 	and.w	r3, r3, #7
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	220f      	movs	r2, #15
 800b1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e0:	43db      	mvns	r3, r3
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	691a      	ldr	r2, [r3, #16]
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	f003 0307 	and.w	r3, r3, #7
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f8:	69ba      	ldr	r2, [r7, #24]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	08da      	lsrs	r2, r3, #3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3208      	adds	r2, #8
 800b206:	69b9      	ldr	r1, [r7, #24]
 800b208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	2203      	movs	r2, #3
 800b218:	fa02 f303 	lsl.w	r3, r2, r3
 800b21c:	43db      	mvns	r3, r3
 800b21e:	69ba      	ldr	r2, [r7, #24]
 800b220:	4013      	ands	r3, r2
 800b222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	f003 0203 	and.w	r2, r3, #3
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	fa02 f303 	lsl.w	r3, r2, r3
 800b234:	69ba      	ldr	r2, [r7, #24]
 800b236:	4313      	orrs	r3, r2
 800b238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	69ba      	ldr	r2, [r7, #24]
 800b23e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 80c0 	beq.w	800b3ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b24e:	2300      	movs	r3, #0
 800b250:	60fb      	str	r3, [r7, #12]
 800b252:	4b65      	ldr	r3, [pc, #404]	; (800b3e8 <HAL_GPIO_Init+0x320>)
 800b254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b256:	4a64      	ldr	r2, [pc, #400]	; (800b3e8 <HAL_GPIO_Init+0x320>)
 800b258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b25c:	6453      	str	r3, [r2, #68]	; 0x44
 800b25e:	4b62      	ldr	r3, [pc, #392]	; (800b3e8 <HAL_GPIO_Init+0x320>)
 800b260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b26a:	4a60      	ldr	r2, [pc, #384]	; (800b3ec <HAL_GPIO_Init+0x324>)
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	089b      	lsrs	r3, r3, #2
 800b270:	3302      	adds	r3, #2
 800b272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	f003 0303 	and.w	r3, r3, #3
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	220f      	movs	r2, #15
 800b282:	fa02 f303 	lsl.w	r3, r2, r3
 800b286:	43db      	mvns	r3, r3
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	4013      	ands	r3, r2
 800b28c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a57      	ldr	r2, [pc, #348]	; (800b3f0 <HAL_GPIO_Init+0x328>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d037      	beq.n	800b306 <HAL_GPIO_Init+0x23e>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a56      	ldr	r2, [pc, #344]	; (800b3f4 <HAL_GPIO_Init+0x32c>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d031      	beq.n	800b302 <HAL_GPIO_Init+0x23a>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a55      	ldr	r2, [pc, #340]	; (800b3f8 <HAL_GPIO_Init+0x330>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d02b      	beq.n	800b2fe <HAL_GPIO_Init+0x236>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a54      	ldr	r2, [pc, #336]	; (800b3fc <HAL_GPIO_Init+0x334>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d025      	beq.n	800b2fa <HAL_GPIO_Init+0x232>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a53      	ldr	r2, [pc, #332]	; (800b400 <HAL_GPIO_Init+0x338>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d01f      	beq.n	800b2f6 <HAL_GPIO_Init+0x22e>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a52      	ldr	r2, [pc, #328]	; (800b404 <HAL_GPIO_Init+0x33c>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d019      	beq.n	800b2f2 <HAL_GPIO_Init+0x22a>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a51      	ldr	r2, [pc, #324]	; (800b408 <HAL_GPIO_Init+0x340>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d013      	beq.n	800b2ee <HAL_GPIO_Init+0x226>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a50      	ldr	r2, [pc, #320]	; (800b40c <HAL_GPIO_Init+0x344>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d00d      	beq.n	800b2ea <HAL_GPIO_Init+0x222>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a4f      	ldr	r2, [pc, #316]	; (800b410 <HAL_GPIO_Init+0x348>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d007      	beq.n	800b2e6 <HAL_GPIO_Init+0x21e>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a4e      	ldr	r2, [pc, #312]	; (800b414 <HAL_GPIO_Init+0x34c>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d101      	bne.n	800b2e2 <HAL_GPIO_Init+0x21a>
 800b2de:	2309      	movs	r3, #9
 800b2e0:	e012      	b.n	800b308 <HAL_GPIO_Init+0x240>
 800b2e2:	230a      	movs	r3, #10
 800b2e4:	e010      	b.n	800b308 <HAL_GPIO_Init+0x240>
 800b2e6:	2308      	movs	r3, #8
 800b2e8:	e00e      	b.n	800b308 <HAL_GPIO_Init+0x240>
 800b2ea:	2307      	movs	r3, #7
 800b2ec:	e00c      	b.n	800b308 <HAL_GPIO_Init+0x240>
 800b2ee:	2306      	movs	r3, #6
 800b2f0:	e00a      	b.n	800b308 <HAL_GPIO_Init+0x240>
 800b2f2:	2305      	movs	r3, #5
 800b2f4:	e008      	b.n	800b308 <HAL_GPIO_Init+0x240>
 800b2f6:	2304      	movs	r3, #4
 800b2f8:	e006      	b.n	800b308 <HAL_GPIO_Init+0x240>
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e004      	b.n	800b308 <HAL_GPIO_Init+0x240>
 800b2fe:	2302      	movs	r3, #2
 800b300:	e002      	b.n	800b308 <HAL_GPIO_Init+0x240>
 800b302:	2301      	movs	r3, #1
 800b304:	e000      	b.n	800b308 <HAL_GPIO_Init+0x240>
 800b306:	2300      	movs	r3, #0
 800b308:	69fa      	ldr	r2, [r7, #28]
 800b30a:	f002 0203 	and.w	r2, r2, #3
 800b30e:	0092      	lsls	r2, r2, #2
 800b310:	4093      	lsls	r3, r2
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	4313      	orrs	r3, r2
 800b316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b318:	4934      	ldr	r1, [pc, #208]	; (800b3ec <HAL_GPIO_Init+0x324>)
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	089b      	lsrs	r3, r3, #2
 800b31e:	3302      	adds	r3, #2
 800b320:	69ba      	ldr	r2, [r7, #24]
 800b322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b326:	4b3c      	ldr	r3, [pc, #240]	; (800b418 <HAL_GPIO_Init+0x350>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	43db      	mvns	r3, r3
 800b330:	69ba      	ldr	r2, [r7, #24]
 800b332:	4013      	ands	r3, r2
 800b334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b342:	69ba      	ldr	r2, [r7, #24]
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	4313      	orrs	r3, r2
 800b348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b34a:	4a33      	ldr	r2, [pc, #204]	; (800b418 <HAL_GPIO_Init+0x350>)
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b350:	4b31      	ldr	r3, [pc, #196]	; (800b418 <HAL_GPIO_Init+0x350>)
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	43db      	mvns	r3, r3
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	4013      	ands	r3, r2
 800b35e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	4313      	orrs	r3, r2
 800b372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b374:	4a28      	ldr	r2, [pc, #160]	; (800b418 <HAL_GPIO_Init+0x350>)
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b37a:	4b27      	ldr	r3, [pc, #156]	; (800b418 <HAL_GPIO_Init+0x350>)
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	43db      	mvns	r3, r3
 800b384:	69ba      	ldr	r2, [r7, #24]
 800b386:	4013      	ands	r3, r2
 800b388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b396:	69ba      	ldr	r2, [r7, #24]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b39e:	4a1e      	ldr	r2, [pc, #120]	; (800b418 <HAL_GPIO_Init+0x350>)
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b3a4:	4b1c      	ldr	r3, [pc, #112]	; (800b418 <HAL_GPIO_Init+0x350>)
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	43db      	mvns	r3, r3
 800b3ae:	69ba      	ldr	r2, [r7, #24]
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d003      	beq.n	800b3c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b3c0:	69ba      	ldr	r2, [r7, #24]
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b3c8:	4a13      	ldr	r2, [pc, #76]	; (800b418 <HAL_GPIO_Init+0x350>)
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	61fb      	str	r3, [r7, #28]
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	2b0f      	cmp	r3, #15
 800b3d8:	f67f ae84 	bls.w	800b0e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b3dc:	bf00      	nop
 800b3de:	3724      	adds	r7, #36	; 0x24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	40023800 	.word	0x40023800
 800b3ec:	40013800 	.word	0x40013800
 800b3f0:	40020000 	.word	0x40020000
 800b3f4:	40020400 	.word	0x40020400
 800b3f8:	40020800 	.word	0x40020800
 800b3fc:	40020c00 	.word	0x40020c00
 800b400:	40021000 	.word	0x40021000
 800b404:	40021400 	.word	0x40021400
 800b408:	40021800 	.word	0x40021800
 800b40c:	40021c00 	.word	0x40021c00
 800b410:	40022000 	.word	0x40022000
 800b414:	40022400 	.word	0x40022400
 800b418:	40013c00 	.word	0x40013c00

0800b41c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	460b      	mov	r3, r1
 800b426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	691a      	ldr	r2, [r3, #16]
 800b42c:	887b      	ldrh	r3, [r7, #2]
 800b42e:	4013      	ands	r3, r2
 800b430:	2b00      	cmp	r3, #0
 800b432:	d002      	beq.n	800b43a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b434:	2301      	movs	r3, #1
 800b436:	73fb      	strb	r3, [r7, #15]
 800b438:	e001      	b.n	800b43e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	460b      	mov	r3, r1
 800b456:	807b      	strh	r3, [r7, #2]
 800b458:	4613      	mov	r3, r2
 800b45a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b45c:	787b      	ldrb	r3, [r7, #1]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b462:	887a      	ldrh	r2, [r7, #2]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b468:	e003      	b.n	800b472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b46a:	887b      	ldrh	r3, [r7, #2]
 800b46c:	041a      	lsls	r2, r3, #16
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	619a      	str	r2, [r3, #24]
}
 800b472:	bf00      	nop
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
	...

0800b480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e11f      	b.n	800b6d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7fb fe62 	bl	8007170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2224      	movs	r2, #36	; 0x24
 800b4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f022 0201 	bic.w	r2, r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b4e4:	f001 f96e 	bl	800c7c4 <HAL_RCC_GetPCLK1Freq>
 800b4e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	4a7b      	ldr	r2, [pc, #492]	; (800b6dc <HAL_I2C_Init+0x25c>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d807      	bhi.n	800b504 <HAL_I2C_Init+0x84>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4a7a      	ldr	r2, [pc, #488]	; (800b6e0 <HAL_I2C_Init+0x260>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	bf94      	ite	ls
 800b4fc:	2301      	movls	r3, #1
 800b4fe:	2300      	movhi	r3, #0
 800b500:	b2db      	uxtb	r3, r3
 800b502:	e006      	b.n	800b512 <HAL_I2C_Init+0x92>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	4a77      	ldr	r2, [pc, #476]	; (800b6e4 <HAL_I2C_Init+0x264>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	bf94      	ite	ls
 800b50c:	2301      	movls	r3, #1
 800b50e:	2300      	movhi	r3, #0
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e0db      	b.n	800b6d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	4a72      	ldr	r2, [pc, #456]	; (800b6e8 <HAL_I2C_Init+0x268>)
 800b51e:	fba2 2303 	umull	r2, r3, r2, r3
 800b522:	0c9b      	lsrs	r3, r3, #18
 800b524:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	430a      	orrs	r2, r1
 800b538:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	6a1b      	ldr	r3, [r3, #32]
 800b540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	4a64      	ldr	r2, [pc, #400]	; (800b6dc <HAL_I2C_Init+0x25c>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d802      	bhi.n	800b554 <HAL_I2C_Init+0xd4>
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	3301      	adds	r3, #1
 800b552:	e009      	b.n	800b568 <HAL_I2C_Init+0xe8>
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b55a:	fb02 f303 	mul.w	r3, r2, r3
 800b55e:	4a63      	ldr	r2, [pc, #396]	; (800b6ec <HAL_I2C_Init+0x26c>)
 800b560:	fba2 2303 	umull	r2, r3, r2, r3
 800b564:	099b      	lsrs	r3, r3, #6
 800b566:	3301      	adds	r3, #1
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	6812      	ldr	r2, [r2, #0]
 800b56c:	430b      	orrs	r3, r1
 800b56e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	69db      	ldr	r3, [r3, #28]
 800b576:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b57a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	4956      	ldr	r1, [pc, #344]	; (800b6dc <HAL_I2C_Init+0x25c>)
 800b584:	428b      	cmp	r3, r1
 800b586:	d80d      	bhi.n	800b5a4 <HAL_I2C_Init+0x124>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	1e59      	subs	r1, r3, #1
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	fbb1 f3f3 	udiv	r3, r1, r3
 800b596:	3301      	adds	r3, #1
 800b598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b59c:	2b04      	cmp	r3, #4
 800b59e:	bf38      	it	cc
 800b5a0:	2304      	movcc	r3, #4
 800b5a2:	e04f      	b.n	800b644 <HAL_I2C_Init+0x1c4>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d111      	bne.n	800b5d0 <HAL_I2C_Init+0x150>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	1e58      	subs	r0, r3, #1
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6859      	ldr	r1, [r3, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	440b      	add	r3, r1
 800b5ba:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5be:	3301      	adds	r3, #1
 800b5c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	bf0c      	ite	eq
 800b5c8:	2301      	moveq	r3, #1
 800b5ca:	2300      	movne	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	e012      	b.n	800b5f6 <HAL_I2C_Init+0x176>
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	1e58      	subs	r0, r3, #1
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6859      	ldr	r1, [r3, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	440b      	add	r3, r1
 800b5de:	0099      	lsls	r1, r3, #2
 800b5e0:	440b      	add	r3, r1
 800b5e2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	bf0c      	ite	eq
 800b5f0:	2301      	moveq	r3, #1
 800b5f2:	2300      	movne	r3, #0
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <HAL_I2C_Init+0x17e>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e022      	b.n	800b644 <HAL_I2C_Init+0x1c4>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10e      	bne.n	800b624 <HAL_I2C_Init+0x1a4>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	1e58      	subs	r0, r3, #1
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6859      	ldr	r1, [r3, #4]
 800b60e:	460b      	mov	r3, r1
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	440b      	add	r3, r1
 800b614:	fbb0 f3f3 	udiv	r3, r0, r3
 800b618:	3301      	adds	r3, #1
 800b61a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b61e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b622:	e00f      	b.n	800b644 <HAL_I2C_Init+0x1c4>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	1e58      	subs	r0, r3, #1
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6859      	ldr	r1, [r3, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	440b      	add	r3, r1
 800b632:	0099      	lsls	r1, r3, #2
 800b634:	440b      	add	r3, r1
 800b636:	fbb0 f3f3 	udiv	r3, r0, r3
 800b63a:	3301      	adds	r3, #1
 800b63c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	6809      	ldr	r1, [r1, #0]
 800b648:	4313      	orrs	r3, r2
 800b64a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	69da      	ldr	r2, [r3, #28]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	431a      	orrs	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	430a      	orrs	r2, r1
 800b666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	6911      	ldr	r1, [r2, #16]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	68d2      	ldr	r2, [r2, #12]
 800b67e:	4311      	orrs	r1, r2
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	6812      	ldr	r2, [r2, #0]
 800b684:	430b      	orrs	r3, r1
 800b686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	695a      	ldr	r2, [r3, #20]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	431a      	orrs	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f042 0201 	orr.w	r2, r2, #1
 800b6b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2220      	movs	r2, #32
 800b6be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	000186a0 	.word	0x000186a0
 800b6e0:	001e847f 	.word	0x001e847f
 800b6e4:	003d08ff 	.word	0x003d08ff
 800b6e8:	431bde83 	.word	0x431bde83
 800b6ec:	10624dd3 	.word	0x10624dd3

0800b6f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b088      	sub	sp, #32
 800b6f4:	af02      	add	r7, sp, #8
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	607a      	str	r2, [r7, #4]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	817b      	strh	r3, [r7, #10]
 800b700:	4613      	mov	r3, r2
 800b702:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b704:	f7fe fc00 	bl	8009f08 <HAL_GetTick>
 800b708:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b20      	cmp	r3, #32
 800b714:	f040 80e0 	bne.w	800b8d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	9300      	str	r3, [sp, #0]
 800b71c:	2319      	movs	r3, #25
 800b71e:	2201      	movs	r2, #1
 800b720:	4970      	ldr	r1, [pc, #448]	; (800b8e4 <HAL_I2C_Master_Transmit+0x1f4>)
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f000 fc58 	bl	800bfd8 <I2C_WaitOnFlagUntilTimeout>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b72e:	2302      	movs	r3, #2
 800b730:	e0d3      	b.n	800b8da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d101      	bne.n	800b740 <HAL_I2C_Master_Transmit+0x50>
 800b73c:	2302      	movs	r3, #2
 800b73e:	e0cc      	b.n	800b8da <HAL_I2C_Master_Transmit+0x1ea>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2201      	movs	r2, #1
 800b744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 0301 	and.w	r3, r3, #1
 800b752:	2b01      	cmp	r3, #1
 800b754:	d007      	beq.n	800b766 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f042 0201 	orr.w	r2, r2, #1
 800b764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b774:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2221      	movs	r2, #33	; 0x21
 800b77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2210      	movs	r2, #16
 800b782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	893a      	ldrh	r2, [r7, #8]
 800b796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	4a50      	ldr	r2, [pc, #320]	; (800b8e8 <HAL_I2C_Master_Transmit+0x1f8>)
 800b7a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b7a8:	8979      	ldrh	r1, [r7, #10]
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	6a3a      	ldr	r2, [r7, #32]
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f000 fac2 	bl	800bd38 <I2C_MasterRequestWrite>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e08d      	b.n	800b8da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7be:	2300      	movs	r3, #0
 800b7c0:	613b      	str	r3, [r7, #16]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	695b      	ldr	r3, [r3, #20]
 800b7c8:	613b      	str	r3, [r7, #16]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	613b      	str	r3, [r7, #16]
 800b7d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b7d4:	e066      	b.n	800b8a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	6a39      	ldr	r1, [r7, #32]
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f000 fcd2 	bl	800c184 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00d      	beq.n	800b802 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	d107      	bne.n	800b7fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e06b      	b.n	800b8da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	781a      	ldrb	r2, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	3b01      	subs	r3, #1
 800b820:	b29a      	uxth	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b82a:	3b01      	subs	r3, #1
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	f003 0304 	and.w	r3, r3, #4
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	d11b      	bne.n	800b878 <HAL_I2C_Master_Transmit+0x188>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b844:	2b00      	cmp	r3, #0
 800b846:	d017      	beq.n	800b878 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84c:	781a      	ldrb	r2, [r3, #0]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b862:	b29b      	uxth	r3, r3
 800b864:	3b01      	subs	r3, #1
 800b866:	b29a      	uxth	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b870:	3b01      	subs	r3, #1
 800b872:	b29a      	uxth	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	6a39      	ldr	r1, [r7, #32]
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 fcc2 	bl	800c206 <I2C_WaitOnBTFFlagUntilTimeout>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00d      	beq.n	800b8a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88c:	2b04      	cmp	r3, #4
 800b88e:	d107      	bne.n	800b8a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b89e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e01a      	b.n	800b8da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d194      	bne.n	800b7d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2220      	movs	r2, #32
 800b8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	e000      	b.n	800b8da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b8d8:	2302      	movs	r3, #2
  }
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	00100002 	.word	0x00100002
 800b8e8:	ffff0000 	.word	0xffff0000

0800b8ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08c      	sub	sp, #48	; 0x30
 800b8f0:	af02      	add	r7, sp, #8
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	607a      	str	r2, [r7, #4]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	817b      	strh	r3, [r7, #10]
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b900:	f7fe fb02 	bl	8009f08 <HAL_GetTick>
 800b904:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b20      	cmp	r3, #32
 800b910:	f040 820b 	bne.w	800bd2a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	2319      	movs	r3, #25
 800b91a:	2201      	movs	r2, #1
 800b91c:	497c      	ldr	r1, [pc, #496]	; (800bb10 <HAL_I2C_Master_Receive+0x224>)
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f000 fb5a 	bl	800bfd8 <I2C_WaitOnFlagUntilTimeout>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b92a:	2302      	movs	r3, #2
 800b92c:	e1fe      	b.n	800bd2c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b934:	2b01      	cmp	r3, #1
 800b936:	d101      	bne.n	800b93c <HAL_I2C_Master_Receive+0x50>
 800b938:	2302      	movs	r3, #2
 800b93a:	e1f7      	b.n	800bd2c <HAL_I2C_Master_Receive+0x440>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d007      	beq.n	800b962 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f042 0201 	orr.w	r2, r2, #1
 800b960:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b970:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2222      	movs	r2, #34	; 0x22
 800b976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2210      	movs	r2, #16
 800b97e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2200      	movs	r2, #0
 800b986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	893a      	ldrh	r2, [r7, #8]
 800b992:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b998:	b29a      	uxth	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	4a5c      	ldr	r2, [pc, #368]	; (800bb14 <HAL_I2C_Master_Receive+0x228>)
 800b9a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b9a4:	8979      	ldrh	r1, [r7, #10]
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f000 fa46 	bl	800be3c <I2C_MasterRequestRead>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e1b8      	b.n	800bd2c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d113      	bne.n	800b9ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	623b      	str	r3, [r7, #32]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	623b      	str	r3, [r7, #32]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	623b      	str	r3, [r7, #32]
 800b9d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9e6:	601a      	str	r2, [r3, #0]
 800b9e8:	e18c      	b.n	800bd04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d11b      	bne.n	800ba2a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba02:	2300      	movs	r3, #0
 800ba04:	61fb      	str	r3, [r7, #28]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	695b      	ldr	r3, [r3, #20]
 800ba0c:	61fb      	str	r3, [r7, #28]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	61fb      	str	r3, [r7, #28]
 800ba16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba26:	601a      	str	r2, [r3, #0]
 800ba28:	e16c      	b.n	800bd04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d11b      	bne.n	800ba6a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba52:	2300      	movs	r3, #0
 800ba54:	61bb      	str	r3, [r7, #24]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	61bb      	str	r3, [r7, #24]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	61bb      	str	r3, [r7, #24]
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	e14c      	b.n	800bd04 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	617b      	str	r3, [r7, #20]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	695b      	ldr	r3, [r3, #20]
 800ba84:	617b      	str	r3, [r7, #20]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	699b      	ldr	r3, [r3, #24]
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ba90:	e138      	b.n	800bd04 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba96:	2b03      	cmp	r3, #3
 800ba98:	f200 80f1 	bhi.w	800bc7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d123      	bne.n	800baec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800baa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f000 fbed 	bl	800c288 <I2C_WaitOnRXNEFlagUntilTimeout>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e139      	b.n	800bd2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	691a      	ldr	r2, [r3, #16]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac2:	b2d2      	uxtb	r2, r2
 800bac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bad4:	3b01      	subs	r3, #1
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	3b01      	subs	r3, #1
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800baea:	e10b      	b.n	800bd04 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d14e      	bne.n	800bb92 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafa:	2200      	movs	r2, #0
 800bafc:	4906      	ldr	r1, [pc, #24]	; (800bb18 <HAL_I2C_Master_Receive+0x22c>)
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f000 fa6a 	bl	800bfd8 <I2C_WaitOnFlagUntilTimeout>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d008      	beq.n	800bb1c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e10e      	b.n	800bd2c <HAL_I2C_Master_Receive+0x440>
 800bb0e:	bf00      	nop
 800bb10:	00100002 	.word	0x00100002
 800bb14:	ffff0000 	.word	0xffff0000
 800bb18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	691a      	ldr	r2, [r3, #16]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb36:	b2d2      	uxtb	r2, r2
 800bb38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	3b01      	subs	r3, #1
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	691a      	ldr	r2, [r3, #16]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb68:	b2d2      	uxtb	r2, r2
 800bb6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb90:	e0b8      	b.n	800bd04 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb98:	2200      	movs	r2, #0
 800bb9a:	4966      	ldr	r1, [pc, #408]	; (800bd34 <HAL_I2C_Master_Receive+0x448>)
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f000 fa1b 	bl	800bfd8 <I2C_WaitOnFlagUntilTimeout>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e0bf      	b.n	800bd2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	691a      	ldr	r2, [r3, #16]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc6:	b2d2      	uxtb	r2, r2
 800bbc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbce:	1c5a      	adds	r2, r3, #1
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	494f      	ldr	r1, [pc, #316]	; (800bd34 <HAL_I2C_Master_Receive+0x448>)
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 f9ed 	bl	800bfd8 <I2C_WaitOnFlagUntilTimeout>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d001      	beq.n	800bc08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	e091      	b.n	800bd2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	691a      	ldr	r2, [r3, #16]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc22:	b2d2      	uxtb	r2, r2
 800bc24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	1c5a      	adds	r2, r3, #1
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc34:	3b01      	subs	r3, #1
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	3b01      	subs	r3, #1
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	691a      	ldr	r2, [r3, #16]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	b2d2      	uxtb	r2, r2
 800bc56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	1c5a      	adds	r2, r3, #1
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc66:	3b01      	subs	r3, #1
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	3b01      	subs	r3, #1
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc7c:	e042      	b.n	800bd04 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f000 fb00 	bl	800c288 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e04c      	b.n	800bd2c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	691a      	ldr	r2, [r3, #16]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9c:	b2d2      	uxtb	r2, r2
 800bc9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca4:	1c5a      	adds	r2, r3, #1
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	f003 0304 	and.w	r3, r3, #4
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d118      	bne.n	800bd04 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	691a      	ldr	r2, [r3, #16]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	b2d2      	uxtb	r2, r2
 800bcde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	1c5a      	adds	r2, r3, #1
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f47f aec2 	bne.w	800ba92 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2220      	movs	r2, #32
 800bd12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bd26:	2300      	movs	r3, #0
 800bd28:	e000      	b.n	800bd2c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bd2a:	2302      	movs	r3, #2
  }
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3728      	adds	r7, #40	; 0x28
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	00010004 	.word	0x00010004

0800bd38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b088      	sub	sp, #32
 800bd3c:	af02      	add	r7, sp, #8
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	607a      	str	r2, [r7, #4]
 800bd42:	603b      	str	r3, [r7, #0]
 800bd44:	460b      	mov	r3, r1
 800bd46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b08      	cmp	r3, #8
 800bd52:	d006      	beq.n	800bd62 <I2C_MasterRequestWrite+0x2a>
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d003      	beq.n	800bd62 <I2C_MasterRequestWrite+0x2a>
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd60:	d108      	bne.n	800bd74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	e00b      	b.n	800bd8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd78:	2b12      	cmp	r3, #18
 800bd7a:	d107      	bne.n	800bd8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 f91d 	bl	800bfd8 <I2C_WaitOnFlagUntilTimeout>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00d      	beq.n	800bdc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdb2:	d103      	bne.n	800bdbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e035      	b.n	800be2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	691b      	ldr	r3, [r3, #16]
 800bdc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdc8:	d108      	bne.n	800bddc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdca:	897b      	ldrh	r3, [r7, #10]
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	461a      	mov	r2, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bdd8:	611a      	str	r2, [r3, #16]
 800bdda:	e01b      	b.n	800be14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bddc:	897b      	ldrh	r3, [r7, #10]
 800bdde:	11db      	asrs	r3, r3, #7
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	f003 0306 	and.w	r3, r3, #6
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	f063 030f 	orn	r3, r3, #15
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	490e      	ldr	r1, [pc, #56]	; (800be34 <I2C_MasterRequestWrite+0xfc>)
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 f943 	bl	800c086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e010      	b.n	800be2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800be0a:	897b      	ldrh	r3, [r7, #10]
 800be0c:	b2da      	uxtb	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	4907      	ldr	r1, [pc, #28]	; (800be38 <I2C_MasterRequestWrite+0x100>)
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 f933 	bl	800c086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800be26:	2301      	movs	r3, #1
 800be28:	e000      	b.n	800be2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3718      	adds	r7, #24
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	00010008 	.word	0x00010008
 800be38:	00010002 	.word	0x00010002

0800be3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af02      	add	r7, sp, #8
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	607a      	str	r2, [r7, #4]
 800be46:	603b      	str	r3, [r7, #0]
 800be48:	460b      	mov	r3, r1
 800be4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	2b08      	cmp	r3, #8
 800be66:	d006      	beq.n	800be76 <I2C_MasterRequestRead+0x3a>
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d003      	beq.n	800be76 <I2C_MasterRequestRead+0x3a>
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be74:	d108      	bne.n	800be88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be84:	601a      	str	r2, [r3, #0]
 800be86:	e00b      	b.n	800bea0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8c:	2b11      	cmp	r3, #17
 800be8e:	d107      	bne.n	800bea0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f000 f893 	bl	800bfd8 <I2C_WaitOnFlagUntilTimeout>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00d      	beq.n	800bed4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bec6:	d103      	bne.n	800bed0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e079      	b.n	800bfc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bedc:	d108      	bne.n	800bef0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bede:	897b      	ldrh	r3, [r7, #10]
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	f043 0301 	orr.w	r3, r3, #1
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	611a      	str	r2, [r3, #16]
 800beee:	e05f      	b.n	800bfb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bef0:	897b      	ldrh	r3, [r7, #10]
 800bef2:	11db      	asrs	r3, r3, #7
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	f003 0306 	and.w	r3, r3, #6
 800befa:	b2db      	uxtb	r3, r3
 800befc:	f063 030f 	orn	r3, r3, #15
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	4930      	ldr	r1, [pc, #192]	; (800bfd0 <I2C_MasterRequestRead+0x194>)
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 f8b9 	bl	800c086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e054      	b.n	800bfc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bf1e:	897b      	ldrh	r3, [r7, #10]
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	4929      	ldr	r1, [pc, #164]	; (800bfd4 <I2C_MasterRequestRead+0x198>)
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 f8a9 	bl	800c086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d001      	beq.n	800bf3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e044      	b.n	800bfc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf3e:	2300      	movs	r3, #0
 800bf40:	613b      	str	r3, [r7, #16]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	613b      	str	r3, [r7, #16]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	613b      	str	r3, [r7, #16]
 800bf52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f000 f831 	bl	800bfd8 <I2C_WaitOnFlagUntilTimeout>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00d      	beq.n	800bf98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf8a:	d103      	bne.n	800bf94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bf94:	2303      	movs	r3, #3
 800bf96:	e017      	b.n	800bfc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bf98:	897b      	ldrh	r3, [r7, #10]
 800bf9a:	11db      	asrs	r3, r3, #7
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	f003 0306 	and.w	r3, r3, #6
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	f063 030e 	orn	r3, r3, #14
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	4907      	ldr	r1, [pc, #28]	; (800bfd4 <I2C_MasterRequestRead+0x198>)
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f000 f865 	bl	800c086 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e000      	b.n	800bfc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3718      	adds	r7, #24
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	00010008 	.word	0x00010008
 800bfd4:	00010002 	.word	0x00010002

0800bfd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	603b      	str	r3, [r7, #0]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfe8:	e025      	b.n	800c036 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff0:	d021      	beq.n	800c036 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bff2:	f7fd ff89 	bl	8009f08 <HAL_GetTick>
 800bff6:	4602      	mov	r2, r0
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d302      	bcc.n	800c008 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d116      	bne.n	800c036 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2200      	movs	r2, #0
 800c00c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2220      	movs	r2, #32
 800c012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c022:	f043 0220 	orr.w	r2, r3, #32
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	e023      	b.n	800c07e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	0c1b      	lsrs	r3, r3, #16
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d10d      	bne.n	800c05c <I2C_WaitOnFlagUntilTimeout+0x84>
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	43da      	mvns	r2, r3
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	4013      	ands	r3, r2
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	2b00      	cmp	r3, #0
 800c050:	bf0c      	ite	eq
 800c052:	2301      	moveq	r3, #1
 800c054:	2300      	movne	r3, #0
 800c056:	b2db      	uxtb	r3, r3
 800c058:	461a      	mov	r2, r3
 800c05a:	e00c      	b.n	800c076 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	43da      	mvns	r2, r3
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	4013      	ands	r3, r2
 800c068:	b29b      	uxth	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	bf0c      	ite	eq
 800c06e:	2301      	moveq	r3, #1
 800c070:	2300      	movne	r3, #0
 800c072:	b2db      	uxtb	r3, r3
 800c074:	461a      	mov	r2, r3
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d0b6      	beq.n	800bfea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b084      	sub	sp, #16
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	60f8      	str	r0, [r7, #12]
 800c08e:	60b9      	str	r1, [r7, #8]
 800c090:	607a      	str	r2, [r7, #4]
 800c092:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c094:	e051      	b.n	800c13a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	695b      	ldr	r3, [r3, #20]
 800c09c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0a4:	d123      	bne.n	800c0ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c0be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2220      	movs	r2, #32
 800c0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0da:	f043 0204 	orr.w	r2, r3, #4
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e046      	b.n	800c17c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f4:	d021      	beq.n	800c13a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0f6:	f7fd ff07 	bl	8009f08 <HAL_GetTick>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	429a      	cmp	r2, r3
 800c104:	d302      	bcc.n	800c10c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d116      	bne.n	800c13a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2200      	movs	r2, #0
 800c110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2220      	movs	r2, #32
 800c116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c126:	f043 0220 	orr.w	r2, r3, #32
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	e020      	b.n	800c17c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	0c1b      	lsrs	r3, r3, #16
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b01      	cmp	r3, #1
 800c142:	d10c      	bne.n	800c15e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	43da      	mvns	r2, r3
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	4013      	ands	r3, r2
 800c150:	b29b      	uxth	r3, r3
 800c152:	2b00      	cmp	r3, #0
 800c154:	bf14      	ite	ne
 800c156:	2301      	movne	r3, #1
 800c158:	2300      	moveq	r3, #0
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	e00b      	b.n	800c176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	43da      	mvns	r2, r3
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	4013      	ands	r3, r2
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	bf14      	ite	ne
 800c170:	2301      	movne	r3, #1
 800c172:	2300      	moveq	r3, #0
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b00      	cmp	r3, #0
 800c178:	d18d      	bne.n	800c096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3710      	adds	r7, #16
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c190:	e02d      	b.n	800c1ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	f000 f8ce 	bl	800c334 <I2C_IsAcknowledgeFailed>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d001      	beq.n	800c1a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e02d      	b.n	800c1fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a8:	d021      	beq.n	800c1ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1aa:	f7fd fead 	bl	8009f08 <HAL_GetTick>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d302      	bcc.n	800c1c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d116      	bne.n	800c1ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2220      	movs	r2, #32
 800c1ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1da:	f043 0220 	orr.w	r2, r3, #32
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e007      	b.n	800c1fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1f8:	2b80      	cmp	r3, #128	; 0x80
 800c1fa:	d1ca      	bne.n	800c192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b084      	sub	sp, #16
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	60b9      	str	r1, [r7, #8]
 800c210:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c212:	e02d      	b.n	800c270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f000 f88d 	bl	800c334 <I2C_IsAcknowledgeFailed>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	e02d      	b.n	800c280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22a:	d021      	beq.n	800c270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c22c:	f7fd fe6c 	bl	8009f08 <HAL_GetTick>
 800c230:	4602      	mov	r2, r0
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d302      	bcc.n	800c242 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d116      	bne.n	800c270 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2200      	movs	r2, #0
 800c246:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2220      	movs	r2, #32
 800c24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25c:	f043 0220 	orr.w	r2, r3, #32
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	e007      	b.n	800c280 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	f003 0304 	and.w	r3, r3, #4
 800c27a:	2b04      	cmp	r3, #4
 800c27c:	d1ca      	bne.n	800c214 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c294:	e042      	b.n	800c31c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	f003 0310 	and.w	r3, r3, #16
 800c2a0:	2b10      	cmp	r3, #16
 800c2a2:	d119      	bne.n	800c2d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f06f 0210 	mvn.w	r2, #16
 800c2ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e029      	b.n	800c32c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2d8:	f7fd fe16 	bl	8009f08 <HAL_GetTick>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d302      	bcc.n	800c2ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d116      	bne.n	800c31c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2220      	movs	r2, #32
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c308:	f043 0220 	orr.w	r2, r3, #32
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	e007      	b.n	800c32c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c326:	2b40      	cmp	r3, #64	; 0x40
 800c328:	d1b5      	bne.n	800c296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	695b      	ldr	r3, [r3, #20]
 800c342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c34a:	d11b      	bne.n	800c384 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c354:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2220      	movs	r2, #32
 800c360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c370:	f043 0204 	orr.w	r2, r3, #4
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	e000      	b.n	800c386 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
	...

0800c394 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c39a:	2300      	movs	r3, #0
 800c39c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c39e:	2300      	movs	r3, #0
 800c3a0:	603b      	str	r3, [r7, #0]
 800c3a2:	4b20      	ldr	r3, [pc, #128]	; (800c424 <HAL_PWREx_EnableOverDrive+0x90>)
 800c3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a6:	4a1f      	ldr	r2, [pc, #124]	; (800c424 <HAL_PWREx_EnableOverDrive+0x90>)
 800c3a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3ac:	6413      	str	r3, [r2, #64]	; 0x40
 800c3ae:	4b1d      	ldr	r3, [pc, #116]	; (800c424 <HAL_PWREx_EnableOverDrive+0x90>)
 800c3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3b6:	603b      	str	r3, [r7, #0]
 800c3b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c3ba:	4b1b      	ldr	r3, [pc, #108]	; (800c428 <HAL_PWREx_EnableOverDrive+0x94>)
 800c3bc:	2201      	movs	r2, #1
 800c3be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3c0:	f7fd fda2 	bl	8009f08 <HAL_GetTick>
 800c3c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c3c6:	e009      	b.n	800c3dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c3c8:	f7fd fd9e 	bl	8009f08 <HAL_GetTick>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3d6:	d901      	bls.n	800c3dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e01f      	b.n	800c41c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c3dc:	4b13      	ldr	r3, [pc, #76]	; (800c42c <HAL_PWREx_EnableOverDrive+0x98>)
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3e8:	d1ee      	bne.n	800c3c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c3ea:	4b11      	ldr	r3, [pc, #68]	; (800c430 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3f0:	f7fd fd8a 	bl	8009f08 <HAL_GetTick>
 800c3f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c3f6:	e009      	b.n	800c40c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c3f8:	f7fd fd86 	bl	8009f08 <HAL_GetTick>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c406:	d901      	bls.n	800c40c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c408:	2303      	movs	r3, #3
 800c40a:	e007      	b.n	800c41c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <HAL_PWREx_EnableOverDrive+0x98>)
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c418:	d1ee      	bne.n	800c3f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	40023800 	.word	0x40023800
 800c428:	420e0040 	.word	0x420e0040
 800c42c:	40007000 	.word	0x40007000
 800c430:	420e0044 	.word	0x420e0044

0800c434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	e0cc      	b.n	800c5e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c448:	4b68      	ldr	r3, [pc, #416]	; (800c5ec <HAL_RCC_ClockConfig+0x1b8>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f003 030f 	and.w	r3, r3, #15
 800c450:	683a      	ldr	r2, [r7, #0]
 800c452:	429a      	cmp	r2, r3
 800c454:	d90c      	bls.n	800c470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c456:	4b65      	ldr	r3, [pc, #404]	; (800c5ec <HAL_RCC_ClockConfig+0x1b8>)
 800c458:	683a      	ldr	r2, [r7, #0]
 800c45a:	b2d2      	uxtb	r2, r2
 800c45c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c45e:	4b63      	ldr	r3, [pc, #396]	; (800c5ec <HAL_RCC_ClockConfig+0x1b8>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f003 030f 	and.w	r3, r3, #15
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d001      	beq.n	800c470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	e0b8      	b.n	800c5e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0302 	and.w	r3, r3, #2
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d020      	beq.n	800c4be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 0304 	and.w	r3, r3, #4
 800c484:	2b00      	cmp	r3, #0
 800c486:	d005      	beq.n	800c494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c488:	4b59      	ldr	r3, [pc, #356]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	4a58      	ldr	r2, [pc, #352]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c48e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 0308 	and.w	r3, r3, #8
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d005      	beq.n	800c4ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c4a0:	4b53      	ldr	r3, [pc, #332]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	4a52      	ldr	r2, [pc, #328]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c4aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4ac:	4b50      	ldr	r3, [pc, #320]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	494d      	ldr	r1, [pc, #308]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d044      	beq.n	800c554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d107      	bne.n	800c4e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4d2:	4b47      	ldr	r3, [pc, #284]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d119      	bne.n	800c512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e07f      	b.n	800c5e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d003      	beq.n	800c4f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d107      	bne.n	800c502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4f2:	4b3f      	ldr	r3, [pc, #252]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d109      	bne.n	800c512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e06f      	b.n	800c5e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c502:	4b3b      	ldr	r3, [pc, #236]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f003 0302 	and.w	r3, r3, #2
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e067      	b.n	800c5e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c512:	4b37      	ldr	r3, [pc, #220]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	f023 0203 	bic.w	r2, r3, #3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	4934      	ldr	r1, [pc, #208]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c520:	4313      	orrs	r3, r2
 800c522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c524:	f7fd fcf0 	bl	8009f08 <HAL_GetTick>
 800c528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c52a:	e00a      	b.n	800c542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c52c:	f7fd fcec 	bl	8009f08 <HAL_GetTick>
 800c530:	4602      	mov	r2, r0
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	f241 3288 	movw	r2, #5000	; 0x1388
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d901      	bls.n	800c542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c53e:	2303      	movs	r3, #3
 800c540:	e04f      	b.n	800c5e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c542:	4b2b      	ldr	r3, [pc, #172]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	f003 020c 	and.w	r2, r3, #12
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	429a      	cmp	r2, r3
 800c552:	d1eb      	bne.n	800c52c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c554:	4b25      	ldr	r3, [pc, #148]	; (800c5ec <HAL_RCC_ClockConfig+0x1b8>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f003 030f 	and.w	r3, r3, #15
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d20c      	bcs.n	800c57c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c562:	4b22      	ldr	r3, [pc, #136]	; (800c5ec <HAL_RCC_ClockConfig+0x1b8>)
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	b2d2      	uxtb	r2, r2
 800c568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c56a:	4b20      	ldr	r3, [pc, #128]	; (800c5ec <HAL_RCC_ClockConfig+0x1b8>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 030f 	and.w	r3, r3, #15
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	429a      	cmp	r2, r3
 800c576:	d001      	beq.n	800c57c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	e032      	b.n	800c5e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 0304 	and.w	r3, r3, #4
 800c584:	2b00      	cmp	r3, #0
 800c586:	d008      	beq.n	800c59a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c588:	4b19      	ldr	r3, [pc, #100]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	4916      	ldr	r1, [pc, #88]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c596:	4313      	orrs	r3, r2
 800c598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 0308 	and.w	r3, r3, #8
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d009      	beq.n	800c5ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c5a6:	4b12      	ldr	r3, [pc, #72]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	00db      	lsls	r3, r3, #3
 800c5b4:	490e      	ldr	r1, [pc, #56]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c5ba:	f000 f821 	bl	800c600 <HAL_RCC_GetSysClockFreq>
 800c5be:	4601      	mov	r1, r0
 800c5c0:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <HAL_RCC_ClockConfig+0x1bc>)
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	091b      	lsrs	r3, r3, #4
 800c5c6:	f003 030f 	and.w	r3, r3, #15
 800c5ca:	4a0a      	ldr	r2, [pc, #40]	; (800c5f4 <HAL_RCC_ClockConfig+0x1c0>)
 800c5cc:	5cd3      	ldrb	r3, [r2, r3]
 800c5ce:	fa21 f303 	lsr.w	r3, r1, r3
 800c5d2:	4a09      	ldr	r2, [pc, #36]	; (800c5f8 <HAL_RCC_ClockConfig+0x1c4>)
 800c5d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c5d6:	4b09      	ldr	r3, [pc, #36]	; (800c5fc <HAL_RCC_ClockConfig+0x1c8>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fd fc50 	bl	8009e80 <HAL_InitTick>

  return HAL_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	40023c00 	.word	0x40023c00
 800c5f0:	40023800 	.word	0x40023800
 800c5f4:	0801a210 	.word	0x0801a210
 800c5f8:	20000000 	.word	0x20000000
 800c5fc:	20000004 	.word	0x20000004

0800c600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c606:	2300      	movs	r3, #0
 800c608:	607b      	str	r3, [r7, #4]
 800c60a:	2300      	movs	r3, #0
 800c60c:	60fb      	str	r3, [r7, #12]
 800c60e:	2300      	movs	r3, #0
 800c610:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c612:	2300      	movs	r3, #0
 800c614:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c616:	4b63      	ldr	r3, [pc, #396]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	f003 030c 	and.w	r3, r3, #12
 800c61e:	2b04      	cmp	r3, #4
 800c620:	d007      	beq.n	800c632 <HAL_RCC_GetSysClockFreq+0x32>
 800c622:	2b08      	cmp	r3, #8
 800c624:	d008      	beq.n	800c638 <HAL_RCC_GetSysClockFreq+0x38>
 800c626:	2b00      	cmp	r3, #0
 800c628:	f040 80b4 	bne.w	800c794 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c62c:	4b5e      	ldr	r3, [pc, #376]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c62e:	60bb      	str	r3, [r7, #8]
       break;
 800c630:	e0b3      	b.n	800c79a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c632:	4b5d      	ldr	r3, [pc, #372]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c634:	60bb      	str	r3, [r7, #8]
      break;
 800c636:	e0b0      	b.n	800c79a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c638:	4b5a      	ldr	r3, [pc, #360]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c640:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c642:	4b58      	ldr	r3, [pc, #352]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d04a      	beq.n	800c6e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c64e:	4b55      	ldr	r3, [pc, #340]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	099b      	lsrs	r3, r3, #6
 800c654:	f04f 0400 	mov.w	r4, #0
 800c658:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c65c:	f04f 0200 	mov.w	r2, #0
 800c660:	ea03 0501 	and.w	r5, r3, r1
 800c664:	ea04 0602 	and.w	r6, r4, r2
 800c668:	4629      	mov	r1, r5
 800c66a:	4632      	mov	r2, r6
 800c66c:	f04f 0300 	mov.w	r3, #0
 800c670:	f04f 0400 	mov.w	r4, #0
 800c674:	0154      	lsls	r4, r2, #5
 800c676:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c67a:	014b      	lsls	r3, r1, #5
 800c67c:	4619      	mov	r1, r3
 800c67e:	4622      	mov	r2, r4
 800c680:	1b49      	subs	r1, r1, r5
 800c682:	eb62 0206 	sbc.w	r2, r2, r6
 800c686:	f04f 0300 	mov.w	r3, #0
 800c68a:	f04f 0400 	mov.w	r4, #0
 800c68e:	0194      	lsls	r4, r2, #6
 800c690:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c694:	018b      	lsls	r3, r1, #6
 800c696:	1a5b      	subs	r3, r3, r1
 800c698:	eb64 0402 	sbc.w	r4, r4, r2
 800c69c:	f04f 0100 	mov.w	r1, #0
 800c6a0:	f04f 0200 	mov.w	r2, #0
 800c6a4:	00e2      	lsls	r2, r4, #3
 800c6a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c6aa:	00d9      	lsls	r1, r3, #3
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4614      	mov	r4, r2
 800c6b0:	195b      	adds	r3, r3, r5
 800c6b2:	eb44 0406 	adc.w	r4, r4, r6
 800c6b6:	f04f 0100 	mov.w	r1, #0
 800c6ba:	f04f 0200 	mov.w	r2, #0
 800c6be:	02a2      	lsls	r2, r4, #10
 800c6c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c6c4:	0299      	lsls	r1, r3, #10
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	4614      	mov	r4, r2
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f04f 0400 	mov.w	r4, #0
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	4623      	mov	r3, r4
 800c6d8:	f7f4 faee 	bl	8000cb8 <__aeabi_uldivmod>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	460c      	mov	r4, r1
 800c6e0:	60fb      	str	r3, [r7, #12]
 800c6e2:	e049      	b.n	800c778 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6e4:	4b2f      	ldr	r3, [pc, #188]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	099b      	lsrs	r3, r3, #6
 800c6ea:	f04f 0400 	mov.w	r4, #0
 800c6ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c6f2:	f04f 0200 	mov.w	r2, #0
 800c6f6:	ea03 0501 	and.w	r5, r3, r1
 800c6fa:	ea04 0602 	and.w	r6, r4, r2
 800c6fe:	4629      	mov	r1, r5
 800c700:	4632      	mov	r2, r6
 800c702:	f04f 0300 	mov.w	r3, #0
 800c706:	f04f 0400 	mov.w	r4, #0
 800c70a:	0154      	lsls	r4, r2, #5
 800c70c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c710:	014b      	lsls	r3, r1, #5
 800c712:	4619      	mov	r1, r3
 800c714:	4622      	mov	r2, r4
 800c716:	1b49      	subs	r1, r1, r5
 800c718:	eb62 0206 	sbc.w	r2, r2, r6
 800c71c:	f04f 0300 	mov.w	r3, #0
 800c720:	f04f 0400 	mov.w	r4, #0
 800c724:	0194      	lsls	r4, r2, #6
 800c726:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c72a:	018b      	lsls	r3, r1, #6
 800c72c:	1a5b      	subs	r3, r3, r1
 800c72e:	eb64 0402 	sbc.w	r4, r4, r2
 800c732:	f04f 0100 	mov.w	r1, #0
 800c736:	f04f 0200 	mov.w	r2, #0
 800c73a:	00e2      	lsls	r2, r4, #3
 800c73c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c740:	00d9      	lsls	r1, r3, #3
 800c742:	460b      	mov	r3, r1
 800c744:	4614      	mov	r4, r2
 800c746:	195b      	adds	r3, r3, r5
 800c748:	eb44 0406 	adc.w	r4, r4, r6
 800c74c:	f04f 0100 	mov.w	r1, #0
 800c750:	f04f 0200 	mov.w	r2, #0
 800c754:	02a2      	lsls	r2, r4, #10
 800c756:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c75a:	0299      	lsls	r1, r3, #10
 800c75c:	460b      	mov	r3, r1
 800c75e:	4614      	mov	r4, r2
 800c760:	4618      	mov	r0, r3
 800c762:	4621      	mov	r1, r4
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f04f 0400 	mov.w	r4, #0
 800c76a:	461a      	mov	r2, r3
 800c76c:	4623      	mov	r3, r4
 800c76e:	f7f4 faa3 	bl	8000cb8 <__aeabi_uldivmod>
 800c772:	4603      	mov	r3, r0
 800c774:	460c      	mov	r4, r1
 800c776:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c778:	4b0a      	ldr	r3, [pc, #40]	; (800c7a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	0c1b      	lsrs	r3, r3, #16
 800c77e:	f003 0303 	and.w	r3, r3, #3
 800c782:	3301      	adds	r3, #1
 800c784:	005b      	lsls	r3, r3, #1
 800c786:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c790:	60bb      	str	r3, [r7, #8]
      break;
 800c792:	e002      	b.n	800c79a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c794:	4b04      	ldr	r3, [pc, #16]	; (800c7a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c796:	60bb      	str	r3, [r7, #8]
      break;
 800c798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c79a:	68bb      	ldr	r3, [r7, #8]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3714      	adds	r7, #20
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7a4:	40023800 	.word	0x40023800
 800c7a8:	00f42400 	.word	0x00f42400

0800c7ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c7b0:	4b03      	ldr	r3, [pc, #12]	; (800c7c0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	20000000 	.word	0x20000000

0800c7c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c7c8:	f7ff fff0 	bl	800c7ac <HAL_RCC_GetHCLKFreq>
 800c7cc:	4601      	mov	r1, r0
 800c7ce:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	0a9b      	lsrs	r3, r3, #10
 800c7d4:	f003 0307 	and.w	r3, r3, #7
 800c7d8:	4a03      	ldr	r2, [pc, #12]	; (800c7e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c7da:	5cd3      	ldrb	r3, [r2, r3]
 800c7dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	40023800 	.word	0x40023800
 800c7e8:	0801a220 	.word	0x0801a220

0800c7ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c7f0:	f7ff ffdc 	bl	800c7ac <HAL_RCC_GetHCLKFreq>
 800c7f4:	4601      	mov	r1, r0
 800c7f6:	4b05      	ldr	r3, [pc, #20]	; (800c80c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	0b5b      	lsrs	r3, r3, #13
 800c7fc:	f003 0307 	and.w	r3, r3, #7
 800c800:	4a03      	ldr	r2, [pc, #12]	; (800c810 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c802:	5cd3      	ldrb	r3, [r2, r3]
 800c804:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c808:	4618      	mov	r0, r3
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	40023800 	.word	0x40023800
 800c810:	0801a220 	.word	0x0801a220

0800c814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b088      	sub	sp, #32
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c81c:	2300      	movs	r3, #0
 800c81e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c820:	2300      	movs	r3, #0
 800c822:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c824:	2300      	movs	r3, #0
 800c826:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c828:	2300      	movs	r3, #0
 800c82a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c82c:	2300      	movs	r3, #0
 800c82e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00a      	beq.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c83c:	4b66      	ldr	r3, [pc, #408]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c83e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c842:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c84a:	4963      	ldr	r1, [pc, #396]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c84c:	4313      	orrs	r3, r2
 800c84e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00a      	beq.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c85e:	4b5e      	ldr	r3, [pc, #376]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c864:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86c:	495a      	ldr	r1, [pc, #360]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c86e:	4313      	orrs	r3, r2
 800c870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10b      	bne.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d105      	bne.n	800c898 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c894:	2b00      	cmp	r3, #0
 800c896:	d075      	beq.n	800c984 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c898:	4b50      	ldr	r3, [pc, #320]	; (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c89e:	f7fd fb33 	bl	8009f08 <HAL_GetTick>
 800c8a2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8a4:	e008      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c8a6:	f7fd fb2f 	bl	8009f08 <HAL_GetTick>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	1ad3      	subs	r3, r2, r3
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d901      	bls.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	e1dc      	b.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8b8:	4b47      	ldr	r3, [pc, #284]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1f0      	bne.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 0301 	and.w	r3, r3, #1
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d009      	beq.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	019a      	lsls	r2, r3, #6
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	071b      	lsls	r3, r3, #28
 800c8dc:	493e      	ldr	r1, [pc, #248]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0302 	and.w	r3, r3, #2
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d01f      	beq.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c8f0:	4b39      	ldr	r3, [pc, #228]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8f6:	0f1b      	lsrs	r3, r3, #28
 800c8f8:	f003 0307 	and.w	r3, r3, #7
 800c8fc:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	019a      	lsls	r2, r3, #6
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	061b      	lsls	r3, r3, #24
 800c90a:	431a      	orrs	r2, r3
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	071b      	lsls	r3, r3, #28
 800c910:	4931      	ldr	r1, [pc, #196]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c912:	4313      	orrs	r3, r2
 800c914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c918:	4b2f      	ldr	r3, [pc, #188]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c91a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c91e:	f023 021f 	bic.w	r2, r3, #31
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a1b      	ldr	r3, [r3, #32]
 800c926:	3b01      	subs	r3, #1
 800c928:	492b      	ldr	r1, [pc, #172]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c92a:	4313      	orrs	r3, r2
 800c92c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d00d      	beq.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	019a      	lsls	r2, r3, #6
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	061b      	lsls	r3, r3, #24
 800c948:	431a      	orrs	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	071b      	lsls	r3, r3, #28
 800c950:	4921      	ldr	r1, [pc, #132]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c952:	4313      	orrs	r3, r2
 800c954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c958:	4b20      	ldr	r3, [pc, #128]	; (800c9dc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c95a:	2201      	movs	r2, #1
 800c95c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c95e:	f7fd fad3 	bl	8009f08 <HAL_GetTick>
 800c962:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c964:	e008      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c966:	f7fd facf 	bl	8009f08 <HAL_GetTick>
 800c96a:	4602      	mov	r2, r0
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	2b02      	cmp	r3, #2
 800c972:	d901      	bls.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c974:	2303      	movs	r3, #3
 800c976:	e17c      	b.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c978:	4b17      	ldr	r3, [pc, #92]	; (800c9d8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c980:	2b00      	cmp	r3, #0
 800c982:	d0f0      	beq.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 0304 	and.w	r3, r3, #4
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d112      	bne.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10c      	bne.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f000 80ce 	beq.w	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c9ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9b2:	f040 80c8 	bne.w	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c9b6:	4b0a      	ldr	r3, [pc, #40]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c9bc:	f7fd faa4 	bl	8009f08 <HAL_GetTick>
 800c9c0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9c2:	e00f      	b.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c9c4:	f7fd faa0 	bl	8009f08 <HAL_GetTick>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d908      	bls.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e14d      	b.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c9d6:	bf00      	nop
 800c9d8:	40023800 	.word	0x40023800
 800c9dc:	42470068 	.word	0x42470068
 800c9e0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9e4:	4ba5      	ldr	r3, [pc, #660]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9f0:	d0e8      	beq.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 0304 	and.w	r3, r3, #4
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d02e      	beq.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c9fe:	4b9f      	ldr	r3, [pc, #636]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca04:	0c1b      	lsrs	r3, r3, #16
 800ca06:	f003 0303 	and.w	r3, r3, #3
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	005b      	lsls	r3, r3, #1
 800ca0e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ca10:	4b9a      	ldr	r3, [pc, #616]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca16:	0f1b      	lsrs	r3, r3, #28
 800ca18:	f003 0307 	and.w	r3, r3, #7
 800ca1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	691b      	ldr	r3, [r3, #16]
 800ca22:	019a      	lsls	r2, r3, #6
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	085b      	lsrs	r3, r3, #1
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	041b      	lsls	r3, r3, #16
 800ca2c:	431a      	orrs	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	699b      	ldr	r3, [r3, #24]
 800ca32:	061b      	lsls	r3, r3, #24
 800ca34:	431a      	orrs	r2, r3
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	071b      	lsls	r3, r3, #28
 800ca3a:	4990      	ldr	r1, [pc, #576]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ca42:	4b8e      	ldr	r3, [pc, #568]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca50:	3b01      	subs	r3, #1
 800ca52:	021b      	lsls	r3, r3, #8
 800ca54:	4989      	ldr	r1, [pc, #548]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca56:	4313      	orrs	r3, r2
 800ca58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 0308 	and.w	r3, r3, #8
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d02c      	beq.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ca68:	4b84      	ldr	r3, [pc, #528]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca6e:	0c1b      	lsrs	r3, r3, #16
 800ca70:	f003 0303 	and.w	r3, r3, #3
 800ca74:	3301      	adds	r3, #1
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca7a:	4b80      	ldr	r3, [pc, #512]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca80:	0e1b      	lsrs	r3, r3, #24
 800ca82:	f003 030f 	and.w	r3, r3, #15
 800ca86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	691b      	ldr	r3, [r3, #16]
 800ca8c:	019a      	lsls	r2, r3, #6
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	085b      	lsrs	r3, r3, #1
 800ca92:	3b01      	subs	r3, #1
 800ca94:	041b      	lsls	r3, r3, #16
 800ca96:	431a      	orrs	r2, r3
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	061b      	lsls	r3, r3, #24
 800ca9c:	431a      	orrs	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	69db      	ldr	r3, [r3, #28]
 800caa2:	071b      	lsls	r3, r3, #28
 800caa4:	4975      	ldr	r1, [pc, #468]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caa6:	4313      	orrs	r3, r2
 800caa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800caac:	4b73      	ldr	r3, [pc, #460]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cab2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caba:	4970      	ldr	r1, [pc, #448]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cabc:	4313      	orrs	r3, r2
 800cabe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d024      	beq.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cad6:	d11f      	bne.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cad8:	4b68      	ldr	r3, [pc, #416]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cade:	0e1b      	lsrs	r3, r3, #24
 800cae0:	f003 030f 	and.w	r3, r3, #15
 800cae4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cae6:	4b65      	ldr	r3, [pc, #404]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caec:	0f1b      	lsrs	r3, r3, #28
 800caee:	f003 0307 	and.w	r3, r3, #7
 800caf2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	019a      	lsls	r2, r3, #6
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	085b      	lsrs	r3, r3, #1
 800cb00:	3b01      	subs	r3, #1
 800cb02:	041b      	lsls	r3, r3, #16
 800cb04:	431a      	orrs	r2, r3
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	061b      	lsls	r3, r3, #24
 800cb0a:	431a      	orrs	r2, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	071b      	lsls	r3, r3, #28
 800cb10:	495a      	ldr	r1, [pc, #360]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb12:	4313      	orrs	r3, r2
 800cb14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cb18:	4b59      	ldr	r3, [pc, #356]	; (800cc80 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cb1e:	f7fd f9f3 	bl	8009f08 <HAL_GetTick>
 800cb22:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb24:	e008      	b.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cb26:	f7fd f9ef 	bl	8009f08 <HAL_GetTick>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d901      	bls.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cb34:	2303      	movs	r3, #3
 800cb36:	e09c      	b.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb38:	4b50      	ldr	r3, [pc, #320]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb44:	d1ef      	bne.n	800cb26 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f003 0320 	and.w	r3, r3, #32
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f000 8083 	beq.w	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cb54:	2300      	movs	r3, #0
 800cb56:	60bb      	str	r3, [r7, #8]
 800cb58:	4b48      	ldr	r3, [pc, #288]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5c:	4a47      	ldr	r2, [pc, #284]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb62:	6413      	str	r3, [r2, #64]	; 0x40
 800cb64:	4b45      	ldr	r3, [pc, #276]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb6c:	60bb      	str	r3, [r7, #8]
 800cb6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cb70:	4b44      	ldr	r3, [pc, #272]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a43      	ldr	r2, [pc, #268]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb7a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb7c:	f7fd f9c4 	bl	8009f08 <HAL_GetTick>
 800cb80:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb82:	e008      	b.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cb84:	f7fd f9c0 	bl	8009f08 <HAL_GetTick>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d901      	bls.n	800cb96 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800cb92:	2303      	movs	r3, #3
 800cb94:	e06d      	b.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb96:	4b3b      	ldr	r3, [pc, #236]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d0f0      	beq.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cba2:	4b36      	ldr	r3, [pc, #216]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbaa:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d02f      	beq.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d028      	beq.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cbc0:	4b2e      	ldr	r3, [pc, #184]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbc8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cbca:	4b2f      	ldr	r3, [pc, #188]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cbcc:	2201      	movs	r2, #1
 800cbce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cbd0:	4b2d      	ldr	r3, [pc, #180]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cbd6:	4a29      	ldr	r2, [pc, #164]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cbdc:	4b27      	ldr	r3, [pc, #156]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d114      	bne.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cbe8:	f7fd f98e 	bl	8009f08 <HAL_GetTick>
 800cbec:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbee:	e00a      	b.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cbf0:	f7fd f98a 	bl	8009f08 <HAL_GetTick>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d901      	bls.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800cc02:	2303      	movs	r3, #3
 800cc04:	e035      	b.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc06:	4b1d      	ldr	r3, [pc, #116]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc0a:	f003 0302 	and.w	r3, r3, #2
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d0ee      	beq.n	800cbf0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc1e:	d10d      	bne.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cc20:	4b16      	ldr	r3, [pc, #88]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cc30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc34:	4911      	ldr	r1, [pc, #68]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc36:	4313      	orrs	r3, r2
 800cc38:	608b      	str	r3, [r1, #8]
 800cc3a:	e005      	b.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800cc3c:	4b0f      	ldr	r3, [pc, #60]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	4a0e      	ldr	r2, [pc, #56]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cc46:	6093      	str	r3, [r2, #8]
 800cc48:	4b0c      	ldr	r3, [pc, #48]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc54:	4909      	ldr	r1, [pc, #36]	; (800cc7c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc56:	4313      	orrs	r3, r2
 800cc58:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f003 0310 	and.w	r3, r3, #16
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d004      	beq.n	800cc70 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cc6c:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cc6e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3720      	adds	r7, #32
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	40023800 	.word	0x40023800
 800cc80:	42470070 	.word	0x42470070
 800cc84:	40007000 	.word	0x40007000
 800cc88:	42470e40 	.word	0x42470e40
 800cc8c:	424711e0 	.word	0x424711e0

0800cc90 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f003 0301 	and.w	r3, r3, #1
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d075      	beq.n	800cd94 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cca8:	4ba2      	ldr	r3, [pc, #648]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f003 030c 	and.w	r3, r3, #12
 800ccb0:	2b04      	cmp	r3, #4
 800ccb2:	d00c      	beq.n	800ccce <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ccb4:	4b9f      	ldr	r3, [pc, #636]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ccbc:	2b08      	cmp	r3, #8
 800ccbe:	d112      	bne.n	800cce6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ccc0:	4b9c      	ldr	r3, [pc, #624]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cccc:	d10b      	bne.n	800cce6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ccce:	4b99      	ldr	r3, [pc, #612]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d05b      	beq.n	800cd92 <HAL_RCC_OscConfig+0x102>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d157      	bne.n	800cd92 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	e20b      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccee:	d106      	bne.n	800ccfe <HAL_RCC_OscConfig+0x6e>
 800ccf0:	4b90      	ldr	r3, [pc, #576]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a8f      	ldr	r2, [pc, #572]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ccf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccfa:	6013      	str	r3, [r2, #0]
 800ccfc:	e01d      	b.n	800cd3a <HAL_RCC_OscConfig+0xaa>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd06:	d10c      	bne.n	800cd22 <HAL_RCC_OscConfig+0x92>
 800cd08:	4b8a      	ldr	r3, [pc, #552]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a89      	ldr	r2, [pc, #548]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cd0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd12:	6013      	str	r3, [r2, #0]
 800cd14:	4b87      	ldr	r3, [pc, #540]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a86      	ldr	r2, [pc, #536]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cd1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	e00b      	b.n	800cd3a <HAL_RCC_OscConfig+0xaa>
 800cd22:	4b84      	ldr	r3, [pc, #528]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a83      	ldr	r2, [pc, #524]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cd28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	4b81      	ldr	r3, [pc, #516]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a80      	ldr	r2, [pc, #512]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cd34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d013      	beq.n	800cd6a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd42:	f7fd f8e1 	bl	8009f08 <HAL_GetTick>
 800cd46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd48:	e008      	b.n	800cd5c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd4a:	f7fd f8dd 	bl	8009f08 <HAL_GetTick>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	2b64      	cmp	r3, #100	; 0x64
 800cd56:	d901      	bls.n	800cd5c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e1d0      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd5c:	4b75      	ldr	r3, [pc, #468]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d0f0      	beq.n	800cd4a <HAL_RCC_OscConfig+0xba>
 800cd68:	e014      	b.n	800cd94 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd6a:	f7fd f8cd 	bl	8009f08 <HAL_GetTick>
 800cd6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd70:	e008      	b.n	800cd84 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd72:	f7fd f8c9 	bl	8009f08 <HAL_GetTick>
 800cd76:	4602      	mov	r2, r0
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	2b64      	cmp	r3, #100	; 0x64
 800cd7e:	d901      	bls.n	800cd84 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cd80:	2303      	movs	r3, #3
 800cd82:	e1bc      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd84:	4b6b      	ldr	r3, [pc, #428]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d1f0      	bne.n	800cd72 <HAL_RCC_OscConfig+0xe2>
 800cd90:	e000      	b.n	800cd94 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f003 0302 	and.w	r3, r3, #2
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d063      	beq.n	800ce68 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cda0:	4b64      	ldr	r3, [pc, #400]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	f003 030c 	and.w	r3, r3, #12
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00b      	beq.n	800cdc4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cdac:	4b61      	ldr	r3, [pc, #388]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cdb4:	2b08      	cmp	r3, #8
 800cdb6:	d11c      	bne.n	800cdf2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cdb8:	4b5e      	ldr	r3, [pc, #376]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d116      	bne.n	800cdf2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cdc4:	4b5b      	ldr	r3, [pc, #364]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f003 0302 	and.w	r3, r3, #2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d005      	beq.n	800cddc <HAL_RCC_OscConfig+0x14c>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d001      	beq.n	800cddc <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e190      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cddc:	4b55      	ldr	r3, [pc, #340]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	00db      	lsls	r3, r3, #3
 800cdea:	4952      	ldr	r1, [pc, #328]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cdec:	4313      	orrs	r3, r2
 800cdee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cdf0:	e03a      	b.n	800ce68 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d020      	beq.n	800ce3c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cdfa:	4b4f      	ldr	r3, [pc, #316]	; (800cf38 <HAL_RCC_OscConfig+0x2a8>)
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce00:	f7fd f882 	bl	8009f08 <HAL_GetTick>
 800ce04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce06:	e008      	b.n	800ce1a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce08:	f7fd f87e 	bl	8009f08 <HAL_GetTick>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	2b02      	cmp	r3, #2
 800ce14:	d901      	bls.n	800ce1a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800ce16:	2303      	movs	r3, #3
 800ce18:	e171      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce1a:	4b46      	ldr	r3, [pc, #280]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f003 0302 	and.w	r3, r3, #2
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d0f0      	beq.n	800ce08 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce26:	4b43      	ldr	r3, [pc, #268]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	00db      	lsls	r3, r3, #3
 800ce34:	493f      	ldr	r1, [pc, #252]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ce36:	4313      	orrs	r3, r2
 800ce38:	600b      	str	r3, [r1, #0]
 800ce3a:	e015      	b.n	800ce68 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce3c:	4b3e      	ldr	r3, [pc, #248]	; (800cf38 <HAL_RCC_OscConfig+0x2a8>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce42:	f7fd f861 	bl	8009f08 <HAL_GetTick>
 800ce46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce48:	e008      	b.n	800ce5c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce4a:	f7fd f85d 	bl	8009f08 <HAL_GetTick>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d901      	bls.n	800ce5c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e150      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce5c:	4b35      	ldr	r3, [pc, #212]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 0302 	and.w	r3, r3, #2
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1f0      	bne.n	800ce4a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 0308 	and.w	r3, r3, #8
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d030      	beq.n	800ced6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d016      	beq.n	800ceaa <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce7c:	4b2f      	ldr	r3, [pc, #188]	; (800cf3c <HAL_RCC_OscConfig+0x2ac>)
 800ce7e:	2201      	movs	r2, #1
 800ce80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce82:	f7fd f841 	bl	8009f08 <HAL_GetTick>
 800ce86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce88:	e008      	b.n	800ce9c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce8a:	f7fd f83d 	bl	8009f08 <HAL_GetTick>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	2b02      	cmp	r3, #2
 800ce96:	d901      	bls.n	800ce9c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	e130      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce9c:	4b25      	ldr	r3, [pc, #148]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ce9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cea0:	f003 0302 	and.w	r3, r3, #2
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d0f0      	beq.n	800ce8a <HAL_RCC_OscConfig+0x1fa>
 800cea8:	e015      	b.n	800ced6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ceaa:	4b24      	ldr	r3, [pc, #144]	; (800cf3c <HAL_RCC_OscConfig+0x2ac>)
 800ceac:	2200      	movs	r2, #0
 800ceae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceb0:	f7fd f82a 	bl	8009f08 <HAL_GetTick>
 800ceb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ceb6:	e008      	b.n	800ceca <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ceb8:	f7fd f826 	bl	8009f08 <HAL_GetTick>
 800cebc:	4602      	mov	r2, r0
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	1ad3      	subs	r3, r2, r3
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d901      	bls.n	800ceca <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cec6:	2303      	movs	r3, #3
 800cec8:	e119      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ceca:	4b1a      	ldr	r3, [pc, #104]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cece:	f003 0302 	and.w	r3, r3, #2
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1f0      	bne.n	800ceb8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f003 0304 	and.w	r3, r3, #4
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 809f 	beq.w	800d022 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cee4:	2300      	movs	r3, #0
 800cee6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cee8:	4b12      	ldr	r3, [pc, #72]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800ceea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10f      	bne.n	800cf14 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cef4:	2300      	movs	r3, #0
 800cef6:	60fb      	str	r3, [r7, #12]
 800cef8:	4b0e      	ldr	r3, [pc, #56]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefc:	4a0d      	ldr	r2, [pc, #52]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cefe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf02:	6413      	str	r3, [r2, #64]	; 0x40
 800cf04:	4b0b      	ldr	r3, [pc, #44]	; (800cf34 <HAL_RCC_OscConfig+0x2a4>)
 800cf06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf0c:	60fb      	str	r3, [r7, #12]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cf10:	2301      	movs	r3, #1
 800cf12:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf14:	4b0a      	ldr	r3, [pc, #40]	; (800cf40 <HAL_RCC_OscConfig+0x2b0>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d120      	bne.n	800cf62 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf20:	4b07      	ldr	r3, [pc, #28]	; (800cf40 <HAL_RCC_OscConfig+0x2b0>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a06      	ldr	r2, [pc, #24]	; (800cf40 <HAL_RCC_OscConfig+0x2b0>)
 800cf26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf2c:	f7fc ffec 	bl	8009f08 <HAL_GetTick>
 800cf30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf32:	e010      	b.n	800cf56 <HAL_RCC_OscConfig+0x2c6>
 800cf34:	40023800 	.word	0x40023800
 800cf38:	42470000 	.word	0x42470000
 800cf3c:	42470e80 	.word	0x42470e80
 800cf40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf44:	f7fc ffe0 	bl	8009f08 <HAL_GetTick>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	1ad3      	subs	r3, r2, r3
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d901      	bls.n	800cf56 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cf52:	2303      	movs	r3, #3
 800cf54:	e0d3      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf56:	4b6c      	ldr	r3, [pc, #432]	; (800d108 <HAL_RCC_OscConfig+0x478>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d0f0      	beq.n	800cf44 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d106      	bne.n	800cf78 <HAL_RCC_OscConfig+0x2e8>
 800cf6a:	4b68      	ldr	r3, [pc, #416]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cf6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf6e:	4a67      	ldr	r2, [pc, #412]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cf70:	f043 0301 	orr.w	r3, r3, #1
 800cf74:	6713      	str	r3, [r2, #112]	; 0x70
 800cf76:	e01c      	b.n	800cfb2 <HAL_RCC_OscConfig+0x322>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	2b05      	cmp	r3, #5
 800cf7e:	d10c      	bne.n	800cf9a <HAL_RCC_OscConfig+0x30a>
 800cf80:	4b62      	ldr	r3, [pc, #392]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cf82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf84:	4a61      	ldr	r2, [pc, #388]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cf86:	f043 0304 	orr.w	r3, r3, #4
 800cf8a:	6713      	str	r3, [r2, #112]	; 0x70
 800cf8c:	4b5f      	ldr	r3, [pc, #380]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cf8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf90:	4a5e      	ldr	r2, [pc, #376]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cf92:	f043 0301 	orr.w	r3, r3, #1
 800cf96:	6713      	str	r3, [r2, #112]	; 0x70
 800cf98:	e00b      	b.n	800cfb2 <HAL_RCC_OscConfig+0x322>
 800cf9a:	4b5c      	ldr	r3, [pc, #368]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cf9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf9e:	4a5b      	ldr	r2, [pc, #364]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cfa0:	f023 0301 	bic.w	r3, r3, #1
 800cfa4:	6713      	str	r3, [r2, #112]	; 0x70
 800cfa6:	4b59      	ldr	r3, [pc, #356]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cfa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfaa:	4a58      	ldr	r2, [pc, #352]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cfac:	f023 0304 	bic.w	r3, r3, #4
 800cfb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d015      	beq.n	800cfe6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfba:	f7fc ffa5 	bl	8009f08 <HAL_GetTick>
 800cfbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfc0:	e00a      	b.n	800cfd8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfc2:	f7fc ffa1 	bl	8009f08 <HAL_GetTick>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d901      	bls.n	800cfd8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	e092      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfd8:	4b4c      	ldr	r3, [pc, #304]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800cfda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfdc:	f003 0302 	and.w	r3, r3, #2
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d0ee      	beq.n	800cfc2 <HAL_RCC_OscConfig+0x332>
 800cfe4:	e014      	b.n	800d010 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfe6:	f7fc ff8f 	bl	8009f08 <HAL_GetTick>
 800cfea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cfec:	e00a      	b.n	800d004 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfee:	f7fc ff8b 	bl	8009f08 <HAL_GetTick>
 800cff2:	4602      	mov	r2, r0
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d901      	bls.n	800d004 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800d000:	2303      	movs	r3, #3
 800d002:	e07c      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d004:	4b41      	ldr	r3, [pc, #260]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800d006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d008:	f003 0302 	and.w	r3, r3, #2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d1ee      	bne.n	800cfee <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d010:	7dfb      	ldrb	r3, [r7, #23]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d105      	bne.n	800d022 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d016:	4b3d      	ldr	r3, [pc, #244]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800d018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01a:	4a3c      	ldr	r2, [pc, #240]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800d01c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d068      	beq.n	800d0fc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d02a:	4b38      	ldr	r3, [pc, #224]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	f003 030c 	and.w	r3, r3, #12
 800d032:	2b08      	cmp	r3, #8
 800d034:	d060      	beq.n	800d0f8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	699b      	ldr	r3, [r3, #24]
 800d03a:	2b02      	cmp	r3, #2
 800d03c:	d145      	bne.n	800d0ca <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d03e:	4b34      	ldr	r3, [pc, #208]	; (800d110 <HAL_RCC_OscConfig+0x480>)
 800d040:	2200      	movs	r2, #0
 800d042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d044:	f7fc ff60 	bl	8009f08 <HAL_GetTick>
 800d048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d04a:	e008      	b.n	800d05e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d04c:	f7fc ff5c 	bl	8009f08 <HAL_GetTick>
 800d050:	4602      	mov	r2, r0
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	2b02      	cmp	r3, #2
 800d058:	d901      	bls.n	800d05e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800d05a:	2303      	movs	r3, #3
 800d05c:	e04f      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d05e:	4b2b      	ldr	r3, [pc, #172]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1f0      	bne.n	800d04c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	69da      	ldr	r2, [r3, #28]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a1b      	ldr	r3, [r3, #32]
 800d072:	431a      	orrs	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d078:	019b      	lsls	r3, r3, #6
 800d07a:	431a      	orrs	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d080:	085b      	lsrs	r3, r3, #1
 800d082:	3b01      	subs	r3, #1
 800d084:	041b      	lsls	r3, r3, #16
 800d086:	431a      	orrs	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08c:	061b      	lsls	r3, r3, #24
 800d08e:	431a      	orrs	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d094:	071b      	lsls	r3, r3, #28
 800d096:	491d      	ldr	r1, [pc, #116]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800d098:	4313      	orrs	r3, r2
 800d09a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d09c:	4b1c      	ldr	r3, [pc, #112]	; (800d110 <HAL_RCC_OscConfig+0x480>)
 800d09e:	2201      	movs	r2, #1
 800d0a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0a2:	f7fc ff31 	bl	8009f08 <HAL_GetTick>
 800d0a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0a8:	e008      	b.n	800d0bc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0aa:	f7fc ff2d 	bl	8009f08 <HAL_GetTick>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d901      	bls.n	800d0bc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	e020      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0bc:	4b13      	ldr	r3, [pc, #76]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d0f0      	beq.n	800d0aa <HAL_RCC_OscConfig+0x41a>
 800d0c8:	e018      	b.n	800d0fc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0ca:	4b11      	ldr	r3, [pc, #68]	; (800d110 <HAL_RCC_OscConfig+0x480>)
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0d0:	f7fc ff1a 	bl	8009f08 <HAL_GetTick>
 800d0d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0d6:	e008      	b.n	800d0ea <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0d8:	f7fc ff16 	bl	8009f08 <HAL_GetTick>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d901      	bls.n	800d0ea <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	e009      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0ea:	4b08      	ldr	r3, [pc, #32]	; (800d10c <HAL_RCC_OscConfig+0x47c>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d1f0      	bne.n	800d0d8 <HAL_RCC_OscConfig+0x448>
 800d0f6:	e001      	b.n	800d0fc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e000      	b.n	800d0fe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3718      	adds	r7, #24
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	40007000 	.word	0x40007000
 800d10c:	40023800 	.word	0x40023800
 800d110:	42470060 	.word	0x42470060

0800d114 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d101      	bne.n	800d126 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	e022      	b.n	800d16c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d105      	bne.n	800d13e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7fa f895 	bl	8007268 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2203      	movs	r2, #3
 800d142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f814 	bl	800d174 <HAL_SD_InitCard>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e00a      	b.n	800d16c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2201      	movs	r2, #1
 800d166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d174:	b5b0      	push	{r4, r5, r7, lr}
 800d176:	b08e      	sub	sp, #56	; 0x38
 800d178:	af04      	add	r7, sp, #16
 800d17a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d17c:	2300      	movs	r3, #0
 800d17e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d180:	2300      	movs	r3, #0
 800d182:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d184:	2300      	movs	r3, #0
 800d186:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d188:	2300      	movs	r3, #0
 800d18a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d18c:	2300      	movs	r3, #0
 800d18e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d190:	2376      	movs	r3, #118	; 0x76
 800d192:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681d      	ldr	r5, [r3, #0]
 800d198:	466c      	mov	r4, sp
 800d19a:	f107 0314 	add.w	r3, r7, #20
 800d19e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d1a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d1a6:	f107 0308 	add.w	r3, r7, #8
 800d1aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f003 fa87 	bl	80106c0 <SDIO_Init>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e031      	b.n	800d228 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d1c4:	4b1a      	ldr	r3, [pc, #104]	; (800d230 <HAL_SD_InitCard+0xbc>)
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f003 fabf 	bl	8010752 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d1d4:	4b16      	ldr	r3, [pc, #88]	; (800d230 <HAL_SD_InitCard+0xbc>)
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 ffc6 	bl	800e16c <SD_PowerON>
 800d1e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00b      	beq.n	800d200 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1f4:	6a3b      	ldr	r3, [r7, #32]
 800d1f6:	431a      	orrs	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e013      	b.n	800d228 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fee5 	bl	800dfd0 <SD_InitCard>
 800d206:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00b      	beq.n	800d226 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	431a      	orrs	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d222:	2301      	movs	r3, #1
 800d224:	e000      	b.n	800d228 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3728      	adds	r7, #40	; 0x28
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bdb0      	pop	{r4, r5, r7, pc}
 800d230:	422580a0 	.word	0x422580a0

0800d234 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b08c      	sub	sp, #48	; 0x30
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	607a      	str	r2, [r7, #4]
 800d240:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d107      	bne.n	800d25c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d250:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d258:	2301      	movs	r3, #1
 800d25a:	e0c7      	b.n	800d3ec <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2b01      	cmp	r3, #1
 800d266:	f040 80c0 	bne.w	800d3ea <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	441a      	add	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d907      	bls.n	800d28e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d282:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e0ae      	b.n	800d3ec <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2203      	movs	r2, #3
 800d292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2200      	movs	r2, #0
 800d29c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d2ac:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b2:	4a50      	ldr	r2, [pc, #320]	; (800d3f4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d2b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ba:	4a4f      	ldr	r2, [pc, #316]	; (800d3f8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d2bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	3380      	adds	r3, #128	; 0x80
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	025b      	lsls	r3, r3, #9
 800d2d8:	089b      	lsrs	r3, r3, #2
 800d2da:	f7fd fc07 	bl	800aaec <HAL_DMA_Start_IT>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d017      	beq.n	800d314 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d2f2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a40      	ldr	r2, [pc, #256]	; (800d3fc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d2fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d300:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e06b      	b.n	800d3ec <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d314:	4b3a      	ldr	r3, [pc, #232]	; (800d400 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d316:	2201      	movs	r2, #1
 800d318:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d002      	beq.n	800d328 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	025b      	lsls	r3, r3, #9
 800d326:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d330:	4618      	mov	r0, r3
 800d332:	f003 faa1 	bl	8010878 <SDMMC_CmdBlockLength>
 800d336:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00f      	beq.n	800d35e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a2e      	ldr	r2, [pc, #184]	; (800d3fc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d344:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	431a      	orrs	r2, r3
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2201      	movs	r2, #1
 800d356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d35a:	2301      	movs	r3, #1
 800d35c:	e046      	b.n	800d3ec <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d35e:	f04f 33ff 	mov.w	r3, #4294967295
 800d362:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	025b      	lsls	r3, r3, #9
 800d368:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d36a:	2390      	movs	r3, #144	; 0x90
 800d36c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d36e:	2302      	movs	r3, #2
 800d370:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d372:	2300      	movs	r3, #0
 800d374:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d376:	2301      	movs	r3, #1
 800d378:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f107 0210 	add.w	r2, r7, #16
 800d382:	4611      	mov	r1, r2
 800d384:	4618      	mov	r0, r3
 800d386:	f003 fa4b 	bl	8010820 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d90a      	bls.n	800d3a6 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2282      	movs	r2, #130	; 0x82
 800d394:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d39c:	4618      	mov	r0, r3
 800d39e:	f003 faaf 	bl	8010900 <SDMMC_CmdReadMultiBlock>
 800d3a2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3a4:	e009      	b.n	800d3ba <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2281      	movs	r2, #129	; 0x81
 800d3aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f003 fa82 	bl	80108bc <SDMMC_CmdReadSingleBlock>
 800d3b8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d012      	beq.n	800d3e6 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a0d      	ldr	r2, [pc, #52]	; (800d3fc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d3c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ce:	431a      	orrs	r2, r3
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e002      	b.n	800d3ec <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	e000      	b.n	800d3ec <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d3ea:	2302      	movs	r3, #2
  }
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3730      	adds	r7, #48	; 0x30
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	0800dddf 	.word	0x0800dddf
 800d3f8:	0800de51 	.word	0x0800de51
 800d3fc:	004005ff 	.word	0x004005ff
 800d400:	4225858c 	.word	0x4225858c

0800d404 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b08c      	sub	sp, #48	; 0x30
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
 800d410:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d107      	bne.n	800d42c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d420:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	e0ca      	b.n	800d5c2 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d432:	b2db      	uxtb	r3, r3
 800d434:	2b01      	cmp	r3, #1
 800d436:	f040 80c3 	bne.w	800d5c0 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	441a      	add	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d907      	bls.n	800d45e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d452:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d45a:	2301      	movs	r3, #1
 800d45c:	e0b1      	b.n	800d5c2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2203      	movs	r2, #3
 800d462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2200      	movs	r2, #0
 800d46c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f042 021a 	orr.w	r2, r2, #26
 800d47c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d482:	4a52      	ldr	r2, [pc, #328]	; (800d5cc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d48a:	4a51      	ldr	r2, [pc, #324]	; (800d5d0 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d48c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d492:	2200      	movs	r2, #0
 800d494:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d002      	beq.n	800d4a4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a0:	025b      	lsls	r3, r3, #9
 800d4a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f003 f9e3 	bl	8010878 <SDMMC_CmdBlockLength>
 800d4b2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00f      	beq.n	800d4da <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4a45      	ldr	r2, [pc, #276]	; (800d5d4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d4c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c8:	431a      	orrs	r2, r3
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e073      	b.n	800d5c2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d90a      	bls.n	800d4f6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	22a0      	movs	r2, #160	; 0xa0
 800d4e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f003 fa4b 	bl	8010988 <SDMMC_CmdWriteMultiBlock>
 800d4f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4f4:	e009      	b.n	800d50a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2290      	movs	r2, #144	; 0x90
 800d4fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d502:	4618      	mov	r0, r3
 800d504:	f003 fa1e 	bl	8010944 <SDMMC_CmdWriteSingleBlock>
 800d508:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d012      	beq.n	800d536 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a2f      	ldr	r2, [pc, #188]	; (800d5d4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d516:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51e:	431a      	orrs	r2, r3
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2201      	movs	r2, #1
 800d528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d532:	2301      	movs	r3, #1
 800d534:	e045      	b.n	800d5c2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d536:	4b28      	ldr	r3, [pc, #160]	; (800d5d8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d538:	2201      	movs	r2, #1
 800d53a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d540:	68b9      	ldr	r1, [r7, #8]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3380      	adds	r3, #128	; 0x80
 800d548:	461a      	mov	r2, r3
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	025b      	lsls	r3, r3, #9
 800d54e:	089b      	lsrs	r3, r3, #2
 800d550:	f7fd facc 	bl	800aaec <HAL_DMA_Start_IT>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d01a      	beq.n	800d590 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f022 021a 	bic.w	r2, r2, #26
 800d568:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a19      	ldr	r2, [pc, #100]	; (800d5d4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d570:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d576:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2201      	movs	r2, #1
 800d582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2200      	movs	r2, #0
 800d58a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	e018      	b.n	800d5c2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d590:	f04f 33ff 	mov.w	r3, #4294967295
 800d594:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	025b      	lsls	r3, r3, #9
 800d59a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d59c:	2390      	movs	r3, #144	; 0x90
 800d59e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f107 0210 	add.w	r2, r7, #16
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f003 f932 	bl	8010820 <SDIO_ConfigData>

      return HAL_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e000      	b.n	800d5c2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d5c0:	2302      	movs	r3, #2
  }
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3730      	adds	r7, #48	; 0x30
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	0800ddb5 	.word	0x0800ddb5
 800d5d0:	0800de51 	.word	0x0800de51
 800d5d4:	004005ff 	.word	0x004005ff
 800d5d8:	4225858c 	.word	0x4225858c

0800d5dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d008      	beq.n	800d60a <HAL_SD_IRQHandler+0x2e>
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f003 0308 	and.w	r3, r3, #8
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d003      	beq.n	800d60a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 ffc8 	bl	800e598 <SD_Read_IT>
 800d608:	e155      	b.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d614:	2b00      	cmp	r3, #0
 800d616:	f000 808f 	beq.w	800d738 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d622:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	6812      	ldr	r2, [r2, #0]
 800d62e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d632:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d636:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f022 0201 	bic.w	r2, r2, #1
 800d646:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f003 0308 	and.w	r3, r3, #8
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d039      	beq.n	800d6c6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f003 0302 	and.w	r3, r3, #2
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d104      	bne.n	800d666 <HAL_SD_IRQHandler+0x8a>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f003 0320 	and.w	r3, r3, #32
 800d662:	2b00      	cmp	r3, #0
 800d664:	d011      	beq.n	800d68a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f003 f9ae 	bl	80109cc <SDMMC_CmdStopTransfer>
 800d670:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d008      	beq.n	800d68a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	431a      	orrs	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 f91f 	bl	800d8c8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d692:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f003 0301 	and.w	r3, r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d104      	bne.n	800d6b6 <HAL_SD_IRQHandler+0xda>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f003 0302 	and.w	r3, r3, #2
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f003 fe04 	bl	80112c4 <HAL_SD_RxCpltCallback>
 800d6bc:	e0fb      	b.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f003 fdf6 	bl	80112b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d6c4:	e0f7      	b.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	f000 80f2 	beq.w	800d8b6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f003 0320 	and.w	r3, r3, #32
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d011      	beq.n	800d700 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f003 f973 	bl	80109cc <SDMMC_CmdStopTransfer>
 800d6e6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d008      	beq.n	800d700 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	431a      	orrs	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f8e4 	bl	800d8c8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f003 0301 	and.w	r3, r3, #1
 800d706:	2b00      	cmp	r3, #0
 800d708:	f040 80d5 	bne.w	800d8b6 <HAL_SD_IRQHandler+0x2da>
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f003 0302 	and.w	r3, r3, #2
 800d712:	2b00      	cmp	r3, #0
 800d714:	f040 80cf 	bne.w	800d8b6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f022 0208 	bic.w	r2, r2, #8
 800d726:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2201      	movs	r2, #1
 800d72c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f003 fdbd 	bl	80112b0 <HAL_SD_TxCpltCallback>
}
 800d736:	e0be      	b.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d73e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d742:	2b00      	cmp	r3, #0
 800d744:	d008      	beq.n	800d758 <HAL_SD_IRQHandler+0x17c>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f003 0308 	and.w	r3, r3, #8
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d003      	beq.n	800d758 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 ff72 	bl	800e63a <SD_Write_IT>
 800d756:	e0ae      	b.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d762:	2b00      	cmp	r3, #0
 800d764:	f000 80a7 	beq.w	800d8b6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76e:	f003 0302 	and.w	r3, r3, #2
 800d772:	2b00      	cmp	r3, #0
 800d774:	d005      	beq.n	800d782 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77a:	f043 0202 	orr.w	r2, r3, #2
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d788:	f003 0308 	and.w	r3, r3, #8
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d005      	beq.n	800d79c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d794:	f043 0208 	orr.w	r2, r3, #8
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a2:	f003 0320 	and.w	r3, r3, #32
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d005      	beq.n	800d7b6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ae:	f043 0220 	orr.w	r2, r3, #32
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7bc:	f003 0310 	and.w	r3, r3, #16
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d005      	beq.n	800d7d0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c8:	f043 0210 	orr.w	r2, r3, #16
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d7d8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d7e8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f003 f8ec 	bl	80109cc <SDMMC_CmdStopTransfer>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fa:	431a      	orrs	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f003 0308 	and.w	r3, r3, #8
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f855 	bl	800d8c8 <HAL_SD_ErrorCallback>
}
 800d81e:	e04a      	b.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d826:	2b00      	cmp	r3, #0
 800d828:	d045      	beq.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f003 0310 	and.w	r3, r3, #16
 800d830:	2b00      	cmp	r3, #0
 800d832:	d104      	bne.n	800d83e <HAL_SD_IRQHandler+0x262>
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f003 0320 	and.w	r3, r3, #32
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d011      	beq.n	800d862 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d842:	4a1f      	ldr	r2, [pc, #124]	; (800d8c0 <HAL_SD_IRQHandler+0x2e4>)
 800d844:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fd f9a6 	bl	800ab9c <HAL_DMA_Abort_IT>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d02f      	beq.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 fb4a 	bl	800def4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d860:	e029      	b.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f003 0301 	and.w	r3, r3, #1
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d104      	bne.n	800d876 <HAL_SD_IRQHandler+0x29a>
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f003 0302 	and.w	r3, r3, #2
 800d872:	2b00      	cmp	r3, #0
 800d874:	d011      	beq.n	800d89a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87a:	4a12      	ldr	r2, [pc, #72]	; (800d8c4 <HAL_SD_IRQHandler+0x2e8>)
 800d87c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d882:	4618      	mov	r0, r3
 800d884:	f7fd f98a 	bl	800ab9c <HAL_DMA_Abort_IT>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d013      	beq.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d892:	4618      	mov	r0, r3
 800d894:	f000 fb65 	bl	800df62 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d898:	e00d      	b.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f003 fcf4 	bl	801129c <HAL_SD_AbortCallback>
}
 800d8b4:	e7ff      	b.n	800d8b6 <HAL_SD_IRQHandler+0x2da>
 800d8b6:	bf00      	nop
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	0800def5 	.word	0x0800def5
 800d8c4:	0800df63 	.word	0x0800df63

0800d8c8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8ea:	0f9b      	lsrs	r3, r3, #30
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8f6:	0e9b      	lsrs	r3, r3, #26
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	f003 030f 	and.w	r3, r3, #15
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d908:	0e1b      	lsrs	r3, r3, #24
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	f003 0303 	and.w	r3, r3, #3
 800d910:	b2da      	uxtb	r2, r3
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d91a:	0c1b      	lsrs	r3, r3, #16
 800d91c:	b2da      	uxtb	r2, r3
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d926:	0a1b      	lsrs	r3, r3, #8
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d932:	b2da      	uxtb	r2, r3
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d93c:	0d1b      	lsrs	r3, r3, #20
 800d93e:	b29a      	uxth	r2, r3
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d948:	0c1b      	lsrs	r3, r3, #16
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	f003 030f 	and.w	r3, r3, #15
 800d950:	b2da      	uxtb	r2, r3
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d95a:	0bdb      	lsrs	r3, r3, #15
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	f003 0301 	and.w	r3, r3, #1
 800d962:	b2da      	uxtb	r2, r3
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d96c:	0b9b      	lsrs	r3, r3, #14
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	f003 0301 	and.w	r3, r3, #1
 800d974:	b2da      	uxtb	r2, r3
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d97e:	0b5b      	lsrs	r3, r3, #13
 800d980:	b2db      	uxtb	r3, r3
 800d982:	f003 0301 	and.w	r3, r3, #1
 800d986:	b2da      	uxtb	r2, r3
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d990:	0b1b      	lsrs	r3, r3, #12
 800d992:	b2db      	uxtb	r3, r3
 800d994:	f003 0301 	and.w	r3, r3, #1
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d163      	bne.n	800da74 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9b0:	009a      	lsls	r2, r3, #2
 800d9b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d9b6:	4013      	ands	r3, r2
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d9bc:	0f92      	lsrs	r2, r2, #30
 800d9be:	431a      	orrs	r2, r3
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9c8:	0edb      	lsrs	r3, r3, #27
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	f003 0307 	and.w	r3, r3, #7
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9da:	0e1b      	lsrs	r3, r3, #24
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	f003 0307 	and.w	r3, r3, #7
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9ec:	0d5b      	lsrs	r3, r3, #21
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	f003 0307 	and.w	r3, r3, #7
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9fe:	0c9b      	lsrs	r3, r3, #18
 800da00:	b2db      	uxtb	r3, r3
 800da02:	f003 0307 	and.w	r3, r3, #7
 800da06:	b2da      	uxtb	r2, r3
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da10:	0bdb      	lsrs	r3, r3, #15
 800da12:	b2db      	uxtb	r3, r3
 800da14:	f003 0307 	and.w	r3, r3, #7
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	7e1b      	ldrb	r3, [r3, #24]
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 0307 	and.w	r3, r3, #7
 800da32:	3302      	adds	r3, #2
 800da34:	2201      	movs	r2, #1
 800da36:	fa02 f303 	lsl.w	r3, r2, r3
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800da3e:	fb02 f203 	mul.w	r2, r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	7a1b      	ldrb	r3, [r3, #8]
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	f003 030f 	and.w	r3, r3, #15
 800da50:	2201      	movs	r2, #1
 800da52:	409a      	lsls	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800da60:	0a52      	lsrs	r2, r2, #9
 800da62:	fb02 f203 	mul.w	r2, r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da70:	661a      	str	r2, [r3, #96]	; 0x60
 800da72:	e031      	b.n	800dad8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d11d      	bne.n	800dab8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da80:	041b      	lsls	r3, r3, #16
 800da82:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da8a:	0c1b      	lsrs	r3, r3, #16
 800da8c:	431a      	orrs	r2, r3
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	3301      	adds	r3, #1
 800da98:	029a      	lsls	r2, r3, #10
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	661a      	str	r2, [r3, #96]	; 0x60
 800dab6:	e00f      	b.n	800dad8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a58      	ldr	r2, [pc, #352]	; (800dc20 <HAL_SD_GetCardCSD+0x344>)
 800dabe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dad4:	2301      	movs	r3, #1
 800dad6:	e09d      	b.n	800dc14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dadc:	0b9b      	lsrs	r3, r3, #14
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	f003 0301 	and.w	r3, r3, #1
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daee:	09db      	lsrs	r3, r3, #7
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db00:	b2db      	uxtb	r3, r3
 800db02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db06:	b2da      	uxtb	r2, r3
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db10:	0fdb      	lsrs	r3, r3, #31
 800db12:	b2da      	uxtb	r2, r3
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db1c:	0f5b      	lsrs	r3, r3, #29
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	f003 0303 	and.w	r3, r3, #3
 800db24:	b2da      	uxtb	r2, r3
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db2e:	0e9b      	lsrs	r3, r3, #26
 800db30:	b2db      	uxtb	r3, r3
 800db32:	f003 0307 	and.w	r3, r3, #7
 800db36:	b2da      	uxtb	r2, r3
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db40:	0d9b      	lsrs	r3, r3, #22
 800db42:	b2db      	uxtb	r3, r3
 800db44:	f003 030f 	and.w	r3, r3, #15
 800db48:	b2da      	uxtb	r2, r3
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db52:	0d5b      	lsrs	r3, r3, #21
 800db54:	b2db      	uxtb	r3, r3
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	b2da      	uxtb	r2, r3
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	2200      	movs	r2, #0
 800db66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6e:	0c1b      	lsrs	r3, r3, #16
 800db70:	b2db      	uxtb	r3, r3
 800db72:	f003 0301 	and.w	r3, r3, #1
 800db76:	b2da      	uxtb	r2, r3
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db82:	0bdb      	lsrs	r3, r3, #15
 800db84:	b2db      	uxtb	r3, r3
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	b2da      	uxtb	r2, r3
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db96:	0b9b      	lsrs	r3, r3, #14
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f003 0301 	and.w	r3, r3, #1
 800db9e:	b2da      	uxtb	r2, r3
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbaa:	0b5b      	lsrs	r3, r3, #13
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	f003 0301 	and.w	r3, r3, #1
 800dbb2:	b2da      	uxtb	r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbbe:	0b1b      	lsrs	r3, r3, #12
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd2:	0a9b      	lsrs	r3, r3, #10
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	f003 0303 	and.w	r3, r3, #3
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbe6:	0a1b      	lsrs	r3, r3, #8
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	f003 0303 	and.w	r3, r3, #3
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbfa:	085b      	lsrs	r3, r3, #1
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr
 800dc20:	004005ff 	.word	0x004005ff

0800dc24 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc6e:	2300      	movs	r3, #0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc7c:	b5b0      	push	{r4, r5, r7, lr}
 800dc7e:	b08e      	sub	sp, #56	; 0x38
 800dc80:	af04      	add	r7, sp, #16
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2203      	movs	r2, #3
 800dc8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc92:	2b03      	cmp	r3, #3
 800dc94:	d02e      	beq.n	800dcf4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc9c:	d106      	bne.n	800dcac <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	639a      	str	r2, [r3, #56]	; 0x38
 800dcaa:	e029      	b.n	800dd00 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcb2:	d10a      	bne.n	800dcca <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fb0f 	bl	800e2d8 <SD_WideBus_Enable>
 800dcba:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	431a      	orrs	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	639a      	str	r2, [r3, #56]	; 0x38
 800dcc8:	e01a      	b.n	800dd00 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10a      	bne.n	800dce6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fb4c 	bl	800e36e <SD_WideBus_Disable>
 800dcd6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcde:	431a      	orrs	r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	639a      	str	r2, [r3, #56]	; 0x38
 800dce4:	e00c      	b.n	800dd00 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	639a      	str	r2, [r3, #56]	; 0x38
 800dcf2:	e005      	b.n	800dd00 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d009      	beq.n	800dd1c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a18      	ldr	r2, [pc, #96]	; (800dd70 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800dd0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2201      	movs	r2, #1
 800dd14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	e024      	b.n	800dd66 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	68db      	ldr	r3, [r3, #12]
 800dd2c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	695b      	ldr	r3, [r3, #20]
 800dd36:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	699b      	ldr	r3, [r3, #24]
 800dd3c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681d      	ldr	r5, [r3, #0]
 800dd42:	466c      	mov	r4, sp
 800dd44:	f107 0318 	add.w	r3, r7, #24
 800dd48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd50:	f107 030c 	add.w	r3, r7, #12
 800dd54:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd56:	4628      	mov	r0, r5
 800dd58:	f002 fcb2 	bl	80106c0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3728      	adds	r7, #40	; 0x28
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bdb0      	pop	{r4, r5, r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	004005ff 	.word	0x004005ff

0800dd74 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b086      	sub	sp, #24
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dd80:	f107 030c 	add.w	r3, r7, #12
 800dd84:	4619      	mov	r1, r3
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 fa7e 	bl	800e288 <SD_SendStatus>
 800dd8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d005      	beq.n	800dda0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	431a      	orrs	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	0a5b      	lsrs	r3, r3, #9
 800dda4:	f003 030f 	and.w	r3, r3, #15
 800dda8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ddaa:	693b      	ldr	r3, [r7, #16]
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3718      	adds	r7, #24
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ddd0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ddd2:	bf00      	nop
 800ddd4:	3714      	adds	r7, #20
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr

0800ddde <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b084      	sub	sp, #16
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddea:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddf0:	2b82      	cmp	r3, #130	; 0x82
 800ddf2:	d111      	bne.n	800de18 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f002 fde7 	bl	80109cc <SDMMC_CmdStopTransfer>
 800ddfe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d008      	beq.n	800de18 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	431a      	orrs	r2, r3
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f7ff fd58 	bl	800d8c8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f022 0208 	bic.w	r2, r2, #8
 800de26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f240 523a 	movw	r2, #1338	; 0x53a
 800de30:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2201      	movs	r2, #1
 800de36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2200      	movs	r2, #0
 800de3e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f003 fa3f 	bl	80112c4 <HAL_SD_RxCpltCallback>
#endif
}
 800de46:	bf00      	nop
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
	...

0800de50 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b086      	sub	sp, #24
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de5c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f7fd f848 	bl	800aef4 <HAL_DMA_GetError>
 800de64:	4603      	mov	r3, r0
 800de66:	2b02      	cmp	r3, #2
 800de68:	d03e      	beq.n	800dee8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de70:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de78:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d002      	beq.n	800de86 <SD_DMAError+0x36>
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d12d      	bne.n	800dee2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a19      	ldr	r2, [pc, #100]	; (800def0 <SD_DMAError+0xa0>)
 800de8c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800de9c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800deaa:	6978      	ldr	r0, [r7, #20]
 800deac:	f7ff ff62 	bl	800dd74 <HAL_SD_GetCardState>
 800deb0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	2b06      	cmp	r3, #6
 800deb6:	d002      	beq.n	800debe <SD_DMAError+0x6e>
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	2b05      	cmp	r3, #5
 800debc:	d10a      	bne.n	800ded4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f002 fd82 	bl	80109cc <SDMMC_CmdStopTransfer>
 800dec8:	4602      	mov	r2, r0
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dece:	431a      	orrs	r2, r3
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	2201      	movs	r2, #1
 800ded8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	2200      	movs	r2, #0
 800dee0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dee2:	6978      	ldr	r0, [r7, #20]
 800dee4:	f7ff fcf0 	bl	800d8c8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dee8:	bf00      	nop
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	004005ff 	.word	0x004005ff

0800def4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df00:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f240 523a 	movw	r2, #1338	; 0x53a
 800df0a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f7ff ff31 	bl	800dd74 <HAL_SD_GetCardState>
 800df12:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2201      	movs	r2, #1
 800df18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2200      	movs	r2, #0
 800df20:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	2b06      	cmp	r3, #6
 800df26:	d002      	beq.n	800df2e <SD_DMATxAbort+0x3a>
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	2b05      	cmp	r3, #5
 800df2c:	d10a      	bne.n	800df44 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4618      	mov	r0, r3
 800df34:	f002 fd4a 	bl	80109cc <SDMMC_CmdStopTransfer>
 800df38:	4602      	mov	r2, r0
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df3e:	431a      	orrs	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d103      	bne.n	800df54 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	f003 f9a5 	bl	801129c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800df52:	e002      	b.n	800df5a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800df54:	68f8      	ldr	r0, [r7, #12]
 800df56:	f7ff fcb7 	bl	800d8c8 <HAL_SD_ErrorCallback>
}
 800df5a:	bf00      	nop
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800df62:	b580      	push	{r7, lr}
 800df64:	b084      	sub	sp, #16
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f240 523a 	movw	r2, #1338	; 0x53a
 800df78:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f7ff fefa 	bl	800dd74 <HAL_SD_GetCardState>
 800df80:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2201      	movs	r2, #1
 800df86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2200      	movs	r2, #0
 800df8e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	2b06      	cmp	r3, #6
 800df94:	d002      	beq.n	800df9c <SD_DMARxAbort+0x3a>
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2b05      	cmp	r3, #5
 800df9a:	d10a      	bne.n	800dfb2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f002 fd13 	bl	80109cc <SDMMC_CmdStopTransfer>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfac:	431a      	orrs	r2, r3
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d103      	bne.n	800dfc2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f003 f96e 	bl	801129c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dfc0:	e002      	b.n	800dfc8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f7ff fc80 	bl	800d8c8 <HAL_SD_ErrorCallback>
}
 800dfc8:	bf00      	nop
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dfd0:	b5b0      	push	{r4, r5, r7, lr}
 800dfd2:	b094      	sub	sp, #80	; 0x50
 800dfd4:	af04      	add	r7, sp, #16
 800dfd6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f002 fbc5 	bl	8010770 <SDIO_GetPowerState>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d102      	bne.n	800dff2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dff0:	e0b7      	b.n	800e162 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dff6:	2b03      	cmp	r3, #3
 800dff8:	d02f      	beq.n	800e05a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4618      	mov	r0, r3
 800e000:	f002 fdee 	bl	8010be0 <SDMMC_CmdSendCID>
 800e004:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <SD_InitCard+0x40>
    {
      return errorstate;
 800e00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e00e:	e0a8      	b.n	800e162 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2100      	movs	r1, #0
 800e016:	4618      	mov	r0, r3
 800e018:	f002 fbef 	bl	80107fa <SDIO_GetResponse>
 800e01c:	4602      	mov	r2, r0
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2104      	movs	r1, #4
 800e028:	4618      	mov	r0, r3
 800e02a:	f002 fbe6 	bl	80107fa <SDIO_GetResponse>
 800e02e:	4602      	mov	r2, r0
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2108      	movs	r1, #8
 800e03a:	4618      	mov	r0, r3
 800e03c:	f002 fbdd 	bl	80107fa <SDIO_GetResponse>
 800e040:	4602      	mov	r2, r0
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	210c      	movs	r1, #12
 800e04c:	4618      	mov	r0, r3
 800e04e:	f002 fbd4 	bl	80107fa <SDIO_GetResponse>
 800e052:	4602      	mov	r2, r0
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e05e:	2b03      	cmp	r3, #3
 800e060:	d00d      	beq.n	800e07e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f107 020e 	add.w	r2, r7, #14
 800e06a:	4611      	mov	r1, r2
 800e06c:	4618      	mov	r0, r3
 800e06e:	f002 fdf4 	bl	8010c5a <SDMMC_CmdSetRelAdd>
 800e072:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e076:	2b00      	cmp	r3, #0
 800e078:	d001      	beq.n	800e07e <SD_InitCard+0xae>
    {
      return errorstate;
 800e07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e07c:	e071      	b.n	800e162 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e082:	2b03      	cmp	r3, #3
 800e084:	d036      	beq.n	800e0f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e086:	89fb      	ldrh	r3, [r7, #14]
 800e088:	461a      	mov	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e096:	041b      	lsls	r3, r3, #16
 800e098:	4619      	mov	r1, r3
 800e09a:	4610      	mov	r0, r2
 800e09c:	f002 fdbe 	bl	8010c1c <SDMMC_CmdSendCSD>
 800e0a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d001      	beq.n	800e0ac <SD_InitCard+0xdc>
    {
      return errorstate;
 800e0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0aa:	e05a      	b.n	800e162 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f002 fba1 	bl	80107fa <SDIO_GetResponse>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2104      	movs	r1, #4
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f002 fb98 	bl	80107fa <SDIO_GetResponse>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2108      	movs	r1, #8
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f002 fb8f 	bl	80107fa <SDIO_GetResponse>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	210c      	movs	r1, #12
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f002 fb86 	bl	80107fa <SDIO_GetResponse>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2104      	movs	r1, #4
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f002 fb7d 	bl	80107fa <SDIO_GetResponse>
 800e100:	4603      	mov	r3, r0
 800e102:	0d1a      	lsrs	r2, r3, #20
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e108:	f107 0310 	add.w	r3, r7, #16
 800e10c:	4619      	mov	r1, r3
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7ff fbe4 	bl	800d8dc <HAL_SD_GetCardCSD>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d002      	beq.n	800e120 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e11a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e11e:	e020      	b.n	800e162 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6819      	ldr	r1, [r3, #0]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e128:	041b      	lsls	r3, r3, #16
 800e12a:	f04f 0400 	mov.w	r4, #0
 800e12e:	461a      	mov	r2, r3
 800e130:	4623      	mov	r3, r4
 800e132:	4608      	mov	r0, r1
 800e134:	f002 fc6c 	bl	8010a10 <SDMMC_CmdSelDesel>
 800e138:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <SD_InitCard+0x174>
  {
    return errorstate;
 800e140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e142:	e00e      	b.n	800e162 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681d      	ldr	r5, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	466c      	mov	r4, sp
 800e14c:	f103 0210 	add.w	r2, r3, #16
 800e150:	ca07      	ldmia	r2, {r0, r1, r2}
 800e152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e156:	3304      	adds	r3, #4
 800e158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e15a:	4628      	mov	r0, r5
 800e15c:	f002 fab0 	bl	80106c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3740      	adds	r7, #64	; 0x40
 800e166:	46bd      	mov	sp, r7
 800e168:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e16c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b086      	sub	sp, #24
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e174:	2300      	movs	r3, #0
 800e176:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	617b      	str	r3, [r7, #20]
 800e17c:	2300      	movs	r3, #0
 800e17e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4618      	mov	r0, r3
 800e186:	f002 fc66 	bl	8010a56 <SDMMC_CmdGoIdleState>
 800e18a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d001      	beq.n	800e196 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	e072      	b.n	800e27c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f002 fc79 	bl	8010a92 <SDMMC_CmdOperCond>
 800e1a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00d      	beq.n	800e1c4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f002 fc4f 	bl	8010a56 <SDMMC_CmdGoIdleState>
 800e1b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d004      	beq.n	800e1ca <SD_PowerON+0x5e>
    {
      return errorstate;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	e05b      	b.n	800e27c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d137      	bne.n	800e242 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2100      	movs	r1, #0
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f002 fc79 	bl	8010ad0 <SDMMC_CmdAppCommand>
 800e1de:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d02d      	beq.n	800e242 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1ea:	e047      	b.n	800e27c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f002 fc6c 	bl	8010ad0 <SDMMC_CmdAppCommand>
 800e1f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <SD_PowerON+0x98>
    {
      return errorstate;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	e03b      	b.n	800e27c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	491e      	ldr	r1, [pc, #120]	; (800e284 <SD_PowerON+0x118>)
 800e20a:	4618      	mov	r0, r3
 800e20c:	f002 fc82 	bl	8010b14 <SDMMC_CmdAppOperCommand>
 800e210:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d002      	beq.n	800e21e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e218:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e21c:	e02e      	b.n	800e27c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2100      	movs	r1, #0
 800e224:	4618      	mov	r0, r3
 800e226:	f002 fae8 	bl	80107fa <SDIO_GetResponse>
 800e22a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	0fdb      	lsrs	r3, r3, #31
 800e230:	2b01      	cmp	r3, #1
 800e232:	d101      	bne.n	800e238 <SD_PowerON+0xcc>
 800e234:	2301      	movs	r3, #1
 800e236:	e000      	b.n	800e23a <SD_PowerON+0xce>
 800e238:	2300      	movs	r3, #0
 800e23a:	613b      	str	r3, [r7, #16]

    count++;
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	3301      	adds	r3, #1
 800e240:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e248:	4293      	cmp	r3, r2
 800e24a:	d802      	bhi.n	800e252 <SD_PowerON+0xe6>
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d0cc      	beq.n	800e1ec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e258:	4293      	cmp	r3, r2
 800e25a:	d902      	bls.n	800e262 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e25c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e260:	e00c      	b.n	800e27c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d003      	beq.n	800e274 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	645a      	str	r2, [r3, #68]	; 0x44
 800e272:	e002      	b.n	800e27a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3718      	adds	r7, #24
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	c1100000 	.word	0xc1100000

0800e288 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d102      	bne.n	800e29e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e298:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e29c:	e018      	b.n	800e2d0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2a6:	041b      	lsls	r3, r3, #16
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	f002 fcf6 	bl	8010c9c <SDMMC_CmdSendStatus>
 800e2b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <SD_SendStatus+0x34>
  {
    return errorstate;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	e009      	b.n	800e2d0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f002 fa99 	bl	80107fa <SDIO_GetResponse>
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b086      	sub	sp, #24
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	60fb      	str	r3, [r7, #12]
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f002 fa83 	bl	80107fa <SDIO_GetResponse>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2fe:	d102      	bne.n	800e306 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e304:	e02f      	b.n	800e366 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e306:	f107 030c 	add.w	r3, r7, #12
 800e30a:	4619      	mov	r1, r3
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 f879 	bl	800e404 <SD_FindSCR>
 800e312:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d001      	beq.n	800e31e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	e023      	b.n	800e366 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e324:	2b00      	cmp	r3, #0
 800e326:	d01c      	beq.n	800e362 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e330:	041b      	lsls	r3, r3, #16
 800e332:	4619      	mov	r1, r3
 800e334:	4610      	mov	r0, r2
 800e336:	f002 fbcb 	bl	8010ad0 <SDMMC_CmdAppCommand>
 800e33a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d001      	beq.n	800e346 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	e00f      	b.n	800e366 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2102      	movs	r1, #2
 800e34c:	4618      	mov	r0, r3
 800e34e:	f002 fc04 	bl	8010b5a <SDMMC_CmdBusWidth>
 800e352:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d001      	beq.n	800e35e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	e003      	b.n	800e366 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e35e:	2300      	movs	r3, #0
 800e360:	e001      	b.n	800e366 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e362:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e366:	4618      	mov	r0, r3
 800e368:	3718      	adds	r7, #24
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b086      	sub	sp, #24
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e376:	2300      	movs	r3, #0
 800e378:	60fb      	str	r3, [r7, #12]
 800e37a:	2300      	movs	r3, #0
 800e37c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2100      	movs	r1, #0
 800e384:	4618      	mov	r0, r3
 800e386:	f002 fa38 	bl	80107fa <SDIO_GetResponse>
 800e38a:	4603      	mov	r3, r0
 800e38c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e390:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e394:	d102      	bne.n	800e39c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e39a:	e02f      	b.n	800e3fc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e39c:	f107 030c 	add.w	r3, r7, #12
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f82e 	bl	800e404 <SD_FindSCR>
 800e3a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	e023      	b.n	800e3fc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d01c      	beq.n	800e3f8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3c6:	041b      	lsls	r3, r3, #16
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	4610      	mov	r0, r2
 800e3cc:	f002 fb80 	bl	8010ad0 <SDMMC_CmdAppCommand>
 800e3d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	e00f      	b.n	800e3fc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2100      	movs	r1, #0
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f002 fbb9 	bl	8010b5a <SDMMC_CmdBusWidth>
 800e3e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	e003      	b.n	800e3fc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	e001      	b.n	800e3fc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e3f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3718      	adds	r7, #24
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e404:	b590      	push	{r4, r7, lr}
 800e406:	b08f      	sub	sp, #60	; 0x3c
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e40e:	f7fb fd7b 	bl	8009f08 <HAL_GetTick>
 800e412:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e414:	2300      	movs	r3, #0
 800e416:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e418:	2300      	movs	r3, #0
 800e41a:	60bb      	str	r3, [r7, #8]
 800e41c:	2300      	movs	r3, #0
 800e41e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2108      	movs	r1, #8
 800e42a:	4618      	mov	r0, r3
 800e42c:	f002 fa24 	bl	8010878 <SDMMC_CmdBlockLength>
 800e430:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43a:	e0a9      	b.n	800e590 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e444:	041b      	lsls	r3, r3, #16
 800e446:	4619      	mov	r1, r3
 800e448:	4610      	mov	r0, r2
 800e44a:	f002 fb41 	bl	8010ad0 <SDMMC_CmdAppCommand>
 800e44e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	e09a      	b.n	800e590 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e45a:	f04f 33ff 	mov.w	r3, #4294967295
 800e45e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e460:	2308      	movs	r3, #8
 800e462:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e464:	2330      	movs	r3, #48	; 0x30
 800e466:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e468:	2302      	movs	r3, #2
 800e46a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e470:	2301      	movs	r3, #1
 800e472:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f107 0210 	add.w	r2, r7, #16
 800e47c:	4611      	mov	r1, r2
 800e47e:	4618      	mov	r0, r3
 800e480:	f002 f9ce 	bl	8010820 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4618      	mov	r0, r3
 800e48a:	f002 fb88 	bl	8010b9e <SDMMC_CmdSendSCR>
 800e48e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	2b00      	cmp	r3, #0
 800e494:	d022      	beq.n	800e4dc <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e498:	e07a      	b.n	800e590 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00e      	beq.n	800e4c6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6819      	ldr	r1, [r3, #0]
 800e4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	f107 0208 	add.w	r2, r7, #8
 800e4b4:	18d4      	adds	r4, r2, r3
 800e4b6:	4608      	mov	r0, r1
 800e4b8:	f002 f92d 	bl	8010716 <SDIO_ReadFIFO>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	6023      	str	r3, [r4, #0]
      index++;
 800e4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4c6:	f7fb fd1f 	bl	8009f08 <HAL_GetTick>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ce:	1ad3      	subs	r3, r2, r3
 800e4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d4:	d102      	bne.n	800e4dc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4da:	e059      	b.n	800e590 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4e2:	f240 432a 	movw	r3, #1066	; 0x42a
 800e4e6:	4013      	ands	r3, r2
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d0d6      	beq.n	800e49a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f2:	f003 0308 	and.w	r3, r3, #8
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d005      	beq.n	800e506 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2208      	movs	r2, #8
 800e500:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e502:	2308      	movs	r3, #8
 800e504:	e044      	b.n	800e590 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e50c:	f003 0302 	and.w	r3, r3, #2
 800e510:	2b00      	cmp	r3, #0
 800e512:	d005      	beq.n	800e520 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2202      	movs	r2, #2
 800e51a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e51c:	2302      	movs	r3, #2
 800e51e:	e037      	b.n	800e590 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e526:	f003 0320 	and.w	r3, r3, #32
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d005      	beq.n	800e53a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	2220      	movs	r2, #32
 800e534:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e536:	2320      	movs	r3, #32
 800e538:	e02a      	b.n	800e590 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f240 523a 	movw	r2, #1338	; 0x53a
 800e542:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	061a      	lsls	r2, r3, #24
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	021b      	lsls	r3, r3, #8
 800e54c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e550:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	0a1b      	lsrs	r3, r3, #8
 800e556:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e55a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	0e1b      	lsrs	r3, r3, #24
 800e560:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e564:	601a      	str	r2, [r3, #0]
    scr++;
 800e566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e568:	3304      	adds	r3, #4
 800e56a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	061a      	lsls	r2, r3, #24
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	021b      	lsls	r3, r3, #8
 800e574:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e578:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	0a1b      	lsrs	r3, r3, #8
 800e57e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e582:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	0e1b      	lsrs	r3, r3, #24
 800e588:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	4618      	mov	r0, r3
 800e592:	373c      	adds	r7, #60	; 0x3c
 800e594:	46bd      	mov	sp, r7
 800e596:	bd90      	pop	{r4, r7, pc}

0800e598 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5aa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d03f      	beq.n	800e632 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	617b      	str	r3, [r7, #20]
 800e5b6:	e033      	b.n	800e620 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f002 f8aa 	bl	8010716 <SDIO_ReadFIFO>
 800e5c2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	0a1b      	lsrs	r3, r3, #8
 800e5dc:	b2da      	uxtb	r2, r3
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	0c1b      	lsrs	r3, r3, #16
 800e5f2:	b2da      	uxtb	r2, r3
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	3b01      	subs	r3, #1
 800e602:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	0e1b      	lsrs	r3, r3, #24
 800e608:	b2da      	uxtb	r2, r3
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	3301      	adds	r3, #1
 800e612:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	3b01      	subs	r3, #1
 800e618:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	3301      	adds	r3, #1
 800e61e:	617b      	str	r3, [r7, #20]
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2b07      	cmp	r3, #7
 800e624:	d9c8      	bls.n	800e5b8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	68fa      	ldr	r2, [r7, #12]
 800e62a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	693a      	ldr	r2, [r7, #16]
 800e630:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e632:	bf00      	nop
 800e634:	3718      	adds	r7, #24
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}

0800e63a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b086      	sub	sp, #24
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6a1b      	ldr	r3, [r3, #32]
 800e646:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d043      	beq.n	800e6dc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e654:	2300      	movs	r3, #0
 800e656:	617b      	str	r3, [r7, #20]
 800e658:	e037      	b.n	800e6ca <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	3301      	adds	r3, #1
 800e664:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	3b01      	subs	r3, #1
 800e66a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	021a      	lsls	r2, r3, #8
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	4313      	orrs	r3, r2
 800e676:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3301      	adds	r3, #1
 800e67c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	3b01      	subs	r3, #1
 800e682:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	041a      	lsls	r2, r3, #16
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	4313      	orrs	r3, r2
 800e68e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	3301      	adds	r3, #1
 800e694:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	3b01      	subs	r3, #1
 800e69a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	061a      	lsls	r2, r3, #24
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f107 0208 	add.w	r2, r7, #8
 800e6bc:	4611      	mov	r1, r2
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f002 f836 	bl	8010730 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	617b      	str	r3, [r7, #20]
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	2b07      	cmp	r3, #7
 800e6ce:	d9c4      	bls.n	800e65a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e6dc:	bf00      	nop
 800e6de:	3718      	adds	r7, #24
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d101      	bne.n	800e6f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	e056      	b.n	800e7a4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e702:	b2db      	uxtb	r3, r3
 800e704:	2b00      	cmp	r3, #0
 800e706:	d106      	bne.n	800e716 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7f8 fe9b 	bl	800744c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2202      	movs	r2, #2
 800e71a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e72c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	685a      	ldr	r2, [r3, #4]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	689b      	ldr	r3, [r3, #8]
 800e736:	431a      	orrs	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	431a      	orrs	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	431a      	orrs	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	695b      	ldr	r3, [r3, #20]
 800e748:	431a      	orrs	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	699b      	ldr	r3, [r3, #24]
 800e74e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e752:	431a      	orrs	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	69db      	ldr	r3, [r3, #28]
 800e758:	431a      	orrs	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6a1b      	ldr	r3, [r3, #32]
 800e75e:	ea42 0103 	orr.w	r1, r2, r3
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	430a      	orrs	r2, r1
 800e76c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	699b      	ldr	r3, [r3, #24]
 800e772:	0c1b      	lsrs	r3, r3, #16
 800e774:	f003 0104 	and.w	r1, r3, #4
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	430a      	orrs	r2, r1
 800e782:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	69da      	ldr	r2, [r3, #28]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e792:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2200      	movs	r2, #0
 800e798:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2201      	movs	r2, #1
 800e79e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3708      	adds	r7, #8
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b088      	sub	sp, #32
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	603b      	str	r3, [r7, #0]
 800e7b8:	4613      	mov	r3, r2
 800e7ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d101      	bne.n	800e7ce <HAL_SPI_Transmit+0x22>
 800e7ca:	2302      	movs	r3, #2
 800e7cc:	e11e      	b.n	800ea0c <HAL_SPI_Transmit+0x260>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e7d6:	f7fb fb97 	bl	8009f08 <HAL_GetTick>
 800e7da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e7dc:	88fb      	ldrh	r3, [r7, #6]
 800e7de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d002      	beq.n	800e7f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e7ec:	2302      	movs	r3, #2
 800e7ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e7f0:	e103      	b.n	800e9fa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <HAL_SPI_Transmit+0x52>
 800e7f8:	88fb      	ldrh	r3, [r7, #6]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d102      	bne.n	800e804 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e802:	e0fa      	b.n	800e9fa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2203      	movs	r2, #3
 800e808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2200      	movs	r2, #0
 800e810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	88fa      	ldrh	r2, [r7, #6]
 800e81c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	88fa      	ldrh	r2, [r7, #6]
 800e822:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2200      	movs	r2, #0
 800e82e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2200      	movs	r2, #0
 800e834:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2200      	movs	r2, #0
 800e83a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2200      	movs	r2, #0
 800e840:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e84a:	d107      	bne.n	800e85c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e85a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e866:	2b40      	cmp	r3, #64	; 0x40
 800e868:	d007      	beq.n	800e87a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e878:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	68db      	ldr	r3, [r3, #12]
 800e87e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e882:	d14b      	bne.n	800e91c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d002      	beq.n	800e892 <HAL_SPI_Transmit+0xe6>
 800e88c:	8afb      	ldrh	r3, [r7, #22]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d13e      	bne.n	800e910 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e896:	881a      	ldrh	r2, [r3, #0]
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a2:	1c9a      	adds	r2, r3, #2
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e8b6:	e02b      	b.n	800e910 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	689b      	ldr	r3, [r3, #8]
 800e8be:	f003 0302 	and.w	r3, r3, #2
 800e8c2:	2b02      	cmp	r3, #2
 800e8c4:	d112      	bne.n	800e8ec <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ca:	881a      	ldrh	r2, [r3, #0]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d6:	1c9a      	adds	r2, r3, #2
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	3b01      	subs	r3, #1
 800e8e4:	b29a      	uxth	r2, r3
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e8ea:	e011      	b.n	800e910 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8ec:	f7fb fb0c 	bl	8009f08 <HAL_GetTick>
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	69bb      	ldr	r3, [r7, #24]
 800e8f4:	1ad3      	subs	r3, r2, r3
 800e8f6:	683a      	ldr	r2, [r7, #0]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d803      	bhi.n	800e904 <HAL_SPI_Transmit+0x158>
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e902:	d102      	bne.n	800e90a <HAL_SPI_Transmit+0x15e>
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d102      	bne.n	800e910 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e90a:	2303      	movs	r3, #3
 800e90c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e90e:	e074      	b.n	800e9fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e914:	b29b      	uxth	r3, r3
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1ce      	bne.n	800e8b8 <HAL_SPI_Transmit+0x10c>
 800e91a:	e04c      	b.n	800e9b6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d002      	beq.n	800e92a <HAL_SPI_Transmit+0x17e>
 800e924:	8afb      	ldrh	r3, [r7, #22]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d140      	bne.n	800e9ac <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	330c      	adds	r3, #12
 800e934:	7812      	ldrb	r2, [r2, #0]
 800e936:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e93c:	1c5a      	adds	r2, r3, #1
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e946:	b29b      	uxth	r3, r3
 800e948:	3b01      	subs	r3, #1
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e950:	e02c      	b.n	800e9ac <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	f003 0302 	and.w	r3, r3, #2
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	d113      	bne.n	800e988 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	330c      	adds	r3, #12
 800e96a:	7812      	ldrb	r2, [r2, #0]
 800e96c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e972:	1c5a      	adds	r2, r3, #1
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	3b01      	subs	r3, #1
 800e980:	b29a      	uxth	r2, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	86da      	strh	r2, [r3, #54]	; 0x36
 800e986:	e011      	b.n	800e9ac <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e988:	f7fb fabe 	bl	8009f08 <HAL_GetTick>
 800e98c:	4602      	mov	r2, r0
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	429a      	cmp	r2, r3
 800e996:	d803      	bhi.n	800e9a0 <HAL_SPI_Transmit+0x1f4>
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e99e:	d102      	bne.n	800e9a6 <HAL_SPI_Transmit+0x1fa>
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d102      	bne.n	800e9ac <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e9a6:	2303      	movs	r3, #3
 800e9a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e9aa:	e026      	b.n	800e9fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1cd      	bne.n	800e952 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e9b6:	69ba      	ldr	r2, [r7, #24]
 800e9b8:	6839      	ldr	r1, [r7, #0]
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	f000 fba4 	bl	800f108 <SPI_EndRxTxTransaction>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d002      	beq.n	800e9cc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	2220      	movs	r2, #32
 800e9ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	689b      	ldr	r3, [r3, #8]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10a      	bne.n	800e9ea <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	613b      	str	r3, [r7, #16]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	613b      	str	r3, [r7, #16]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	613b      	str	r3, [r7, #16]
 800e9e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d002      	beq.n	800e9f8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	77fb      	strb	r3, [r7, #31]
 800e9f6:	e000      	b.n	800e9fa <HAL_SPI_Transmit+0x24e>
  }

error:
 800e9f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ea0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3720      	adds	r7, #32
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b088      	sub	sp, #32
 800ea18:	af02      	add	r7, sp, #8
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	603b      	str	r3, [r7, #0]
 800ea20:	4613      	mov	r3, r2
 800ea22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea30:	d112      	bne.n	800ea58 <HAL_SPI_Receive+0x44>
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10e      	bne.n	800ea58 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2204      	movs	r2, #4
 800ea3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ea42:	88fa      	ldrh	r2, [r7, #6]
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	68ba      	ldr	r2, [r7, #8]
 800ea4c:	68b9      	ldr	r1, [r7, #8]
 800ea4e:	68f8      	ldr	r0, [r7, #12]
 800ea50:	f000 f8e9 	bl	800ec26 <HAL_SPI_TransmitReceive>
 800ea54:	4603      	mov	r3, r0
 800ea56:	e0e2      	b.n	800ec1e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d101      	bne.n	800ea66 <HAL_SPI_Receive+0x52>
 800ea62:	2302      	movs	r3, #2
 800ea64:	e0db      	b.n	800ec1e <HAL_SPI_Receive+0x20a>
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea6e:	f7fb fa4b 	bl	8009f08 <HAL_GetTick>
 800ea72:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d002      	beq.n	800ea86 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ea80:	2302      	movs	r3, #2
 800ea82:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ea84:	e0c2      	b.n	800ec0c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d002      	beq.n	800ea92 <HAL_SPI_Receive+0x7e>
 800ea8c:	88fb      	ldrh	r3, [r7, #6]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d102      	bne.n	800ea98 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ea96:	e0b9      	b.n	800ec0c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2204      	movs	r2, #4
 800ea9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	88fa      	ldrh	r2, [r7, #6]
 800eab0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	88fa      	ldrh	r2, [r7, #6]
 800eab6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2200      	movs	r2, #0
 800eabc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2200      	movs	r2, #0
 800eac2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2200      	movs	r2, #0
 800eac8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2200      	movs	r2, #0
 800eace:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2200      	movs	r2, #0
 800ead4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eade:	d107      	bne.n	800eaf0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eaee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eafa:	2b40      	cmp	r3, #64	; 0x40
 800eafc:	d007      	beq.n	800eb0e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d162      	bne.n	800ebdc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800eb16:	e02e      	b.n	800eb76 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	f003 0301 	and.w	r3, r3, #1
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d115      	bne.n	800eb52 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f103 020c 	add.w	r2, r3, #12
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb32:	7812      	ldrb	r2, [r2, #0]
 800eb34:	b2d2      	uxtb	r2, r2
 800eb36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3c:	1c5a      	adds	r2, r3, #1
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	b29a      	uxth	r2, r3
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb50:	e011      	b.n	800eb76 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb52:	f7fb f9d9 	bl	8009f08 <HAL_GetTick>
 800eb56:	4602      	mov	r2, r0
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	683a      	ldr	r2, [r7, #0]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d803      	bhi.n	800eb6a <HAL_SPI_Receive+0x156>
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb68:	d102      	bne.n	800eb70 <HAL_SPI_Receive+0x15c>
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d102      	bne.n	800eb76 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800eb70:	2303      	movs	r3, #3
 800eb72:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eb74:	e04a      	b.n	800ec0c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d1cb      	bne.n	800eb18 <HAL_SPI_Receive+0x104>
 800eb80:	e031      	b.n	800ebe6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	f003 0301 	and.w	r3, r3, #1
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d113      	bne.n	800ebb8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	68da      	ldr	r2, [r3, #12]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb9a:	b292      	uxth	r2, r2
 800eb9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba2:	1c9a      	adds	r2, r3, #2
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ebb6:	e011      	b.n	800ebdc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebb8:	f7fb f9a6 	bl	8009f08 <HAL_GetTick>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	683a      	ldr	r2, [r7, #0]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d803      	bhi.n	800ebd0 <HAL_SPI_Receive+0x1bc>
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebce:	d102      	bne.n	800ebd6 <HAL_SPI_Receive+0x1c2>
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d102      	bne.n	800ebdc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ebda:	e017      	b.n	800ec0c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d1cd      	bne.n	800eb82 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ebe6:	693a      	ldr	r2, [r7, #16]
 800ebe8:	6839      	ldr	r1, [r7, #0]
 800ebea:	68f8      	ldr	r0, [r7, #12]
 800ebec:	f000 fa27 	bl	800f03e <SPI_EndRxTransaction>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d002      	beq.n	800ebfc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2220      	movs	r2, #32
 800ebfa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d002      	beq.n	800ec0a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ec04:	2301      	movs	r3, #1
 800ec06:	75fb      	strb	r3, [r7, #23]
 800ec08:	e000      	b.n	800ec0c <HAL_SPI_Receive+0x1f8>
  }

error :
 800ec0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2200      	movs	r2, #0
 800ec18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ec1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3718      	adds	r7, #24
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}

0800ec26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b08c      	sub	sp, #48	; 0x30
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	60f8      	str	r0, [r7, #12]
 800ec2e:	60b9      	str	r1, [r7, #8]
 800ec30:	607a      	str	r2, [r7, #4]
 800ec32:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ec34:	2301      	movs	r3, #1
 800ec36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d101      	bne.n	800ec4c <HAL_SPI_TransmitReceive+0x26>
 800ec48:	2302      	movs	r3, #2
 800ec4a:	e18a      	b.n	800ef62 <HAL_SPI_TransmitReceive+0x33c>
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec54:	f7fb f958 	bl	8009f08 <HAL_GetTick>
 800ec58:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ec6a:	887b      	ldrh	r3, [r7, #2]
 800ec6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ec6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d00f      	beq.n	800ec96 <HAL_SPI_TransmitReceive+0x70>
 800ec76:	69fb      	ldr	r3, [r7, #28]
 800ec78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec7c:	d107      	bne.n	800ec8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d103      	bne.n	800ec8e <HAL_SPI_TransmitReceive+0x68>
 800ec86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec8a:	2b04      	cmp	r3, #4
 800ec8c:	d003      	beq.n	800ec96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ec8e:	2302      	movs	r3, #2
 800ec90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ec94:	e15b      	b.n	800ef4e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d005      	beq.n	800eca8 <HAL_SPI_TransmitReceive+0x82>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d002      	beq.n	800eca8 <HAL_SPI_TransmitReceive+0x82>
 800eca2:	887b      	ldrh	r3, [r7, #2]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d103      	bne.n	800ecb0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ecae:	e14e      	b.n	800ef4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	2b04      	cmp	r3, #4
 800ecba:	d003      	beq.n	800ecc4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2205      	movs	r2, #5
 800ecc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	887a      	ldrh	r2, [r7, #2]
 800ecd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	887a      	ldrh	r2, [r7, #2]
 800ecda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	68ba      	ldr	r2, [r7, #8]
 800ece0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	887a      	ldrh	r2, [r7, #2]
 800ece6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	887a      	ldrh	r2, [r7, #2]
 800ecec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed04:	2b40      	cmp	r3, #64	; 0x40
 800ed06:	d007      	beq.n	800ed18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed20:	d178      	bne.n	800ee14 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d002      	beq.n	800ed30 <HAL_SPI_TransmitReceive+0x10a>
 800ed2a:	8b7b      	ldrh	r3, [r7, #26]
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d166      	bne.n	800edfe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed34:	881a      	ldrh	r2, [r3, #0]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed40:	1c9a      	adds	r2, r3, #2
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed54:	e053      	b.n	800edfe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	f003 0302 	and.w	r3, r3, #2
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d11b      	bne.n	800ed9c <HAL_SPI_TransmitReceive+0x176>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d016      	beq.n	800ed9c <HAL_SPI_TransmitReceive+0x176>
 800ed6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d113      	bne.n	800ed9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed78:	881a      	ldrh	r2, [r3, #0]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed84:	1c9a      	adds	r2, r3, #2
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	3b01      	subs	r3, #1
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	689b      	ldr	r3, [r3, #8]
 800eda2:	f003 0301 	and.w	r3, r3, #1
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d119      	bne.n	800edde <HAL_SPI_TransmitReceive+0x1b8>
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edae:	b29b      	uxth	r3, r3
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d014      	beq.n	800edde <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	68da      	ldr	r2, [r3, #12]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edbe:	b292      	uxth	r2, r2
 800edc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edc6:	1c9a      	adds	r2, r3, #2
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	3b01      	subs	r3, #1
 800edd4:	b29a      	uxth	r2, r3
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800edda:	2301      	movs	r3, #1
 800eddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800edde:	f7fb f893 	bl	8009f08 <HAL_GetTick>
 800ede2:	4602      	mov	r2, r0
 800ede4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edea:	429a      	cmp	r2, r3
 800edec:	d807      	bhi.n	800edfe <HAL_SPI_TransmitReceive+0x1d8>
 800edee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf4:	d003      	beq.n	800edfe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800edf6:	2303      	movs	r3, #3
 800edf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800edfc:	e0a7      	b.n	800ef4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1a6      	bne.n	800ed56 <HAL_SPI_TransmitReceive+0x130>
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d1a1      	bne.n	800ed56 <HAL_SPI_TransmitReceive+0x130>
 800ee12:	e07c      	b.n	800ef0e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d002      	beq.n	800ee22 <HAL_SPI_TransmitReceive+0x1fc>
 800ee1c:	8b7b      	ldrh	r3, [r7, #26]
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d16b      	bne.n	800eefa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	330c      	adds	r3, #12
 800ee2c:	7812      	ldrb	r2, [r2, #0]
 800ee2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee34:	1c5a      	adds	r2, r3, #1
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	3b01      	subs	r3, #1
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee48:	e057      	b.n	800eefa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	f003 0302 	and.w	r3, r3, #2
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	d11c      	bne.n	800ee92 <HAL_SPI_TransmitReceive+0x26c>
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d017      	beq.n	800ee92 <HAL_SPI_TransmitReceive+0x26c>
 800ee62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d114      	bne.n	800ee92 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	330c      	adds	r3, #12
 800ee72:	7812      	ldrb	r2, [r2, #0]
 800ee74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	3b01      	subs	r3, #1
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	689b      	ldr	r3, [r3, #8]
 800ee98:	f003 0301 	and.w	r3, r3, #1
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d119      	bne.n	800eed4 <HAL_SPI_TransmitReceive+0x2ae>
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d014      	beq.n	800eed4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	68da      	ldr	r2, [r3, #12]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb4:	b2d2      	uxtb	r2, r2
 800eeb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eebc:	1c5a      	adds	r2, r3, #1
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	3b01      	subs	r3, #1
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eed0:	2301      	movs	r3, #1
 800eed2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eed4:	f7fb f818 	bl	8009f08 <HAL_GetTick>
 800eed8:	4602      	mov	r2, r0
 800eeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eedc:	1ad3      	subs	r3, r2, r3
 800eede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d803      	bhi.n	800eeec <HAL_SPI_TransmitReceive+0x2c6>
 800eee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeea:	d102      	bne.n	800eef2 <HAL_SPI_TransmitReceive+0x2cc>
 800eeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d103      	bne.n	800eefa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800eef2:	2303      	movs	r3, #3
 800eef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eef8:	e029      	b.n	800ef4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d1a2      	bne.n	800ee4a <HAL_SPI_TransmitReceive+0x224>
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d19d      	bne.n	800ee4a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ef0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef12:	68f8      	ldr	r0, [r7, #12]
 800ef14:	f000 f8f8 	bl	800f108 <SPI_EndRxTxTransaction>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d006      	beq.n	800ef2c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2220      	movs	r2, #32
 800ef28:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ef2a:	e010      	b.n	800ef4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	689b      	ldr	r3, [r3, #8]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d10b      	bne.n	800ef4c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef34:	2300      	movs	r3, #0
 800ef36:	617b      	str	r3, [r7, #20]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	617b      	str	r3, [r7, #20]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	617b      	str	r3, [r7, #20]
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	e000      	b.n	800ef4e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ef4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2201      	movs	r2, #1
 800ef52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ef5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3730      	adds	r7, #48	; 0x30
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b084      	sub	sp, #16
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	60f8      	str	r0, [r7, #12]
 800ef72:	60b9      	str	r1, [r7, #8]
 800ef74:	603b      	str	r3, [r7, #0]
 800ef76:	4613      	mov	r3, r2
 800ef78:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef7a:	e04c      	b.n	800f016 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef82:	d048      	beq.n	800f016 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ef84:	f7fa ffc0 	bl	8009f08 <HAL_GetTick>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	1ad3      	subs	r3, r2, r3
 800ef8e:	683a      	ldr	r2, [r7, #0]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d902      	bls.n	800ef9a <SPI_WaitFlagStateUntilTimeout+0x30>
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d13d      	bne.n	800f016 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	685a      	ldr	r2, [r3, #4]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800efa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efb2:	d111      	bne.n	800efd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	689b      	ldr	r3, [r3, #8]
 800efb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efbc:	d004      	beq.n	800efc8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efc6:	d107      	bne.n	800efd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efe0:	d10f      	bne.n	800f002 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eff0:	601a      	str	r2, [r3, #0]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2201      	movs	r2, #1
 800f006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f012:	2303      	movs	r3, #3
 800f014:	e00f      	b.n	800f036 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	689a      	ldr	r2, [r3, #8]
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	4013      	ands	r3, r2
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	429a      	cmp	r2, r3
 800f024:	bf0c      	ite	eq
 800f026:	2301      	moveq	r3, #1
 800f028:	2300      	movne	r3, #0
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	461a      	mov	r2, r3
 800f02e:	79fb      	ldrb	r3, [r7, #7]
 800f030:	429a      	cmp	r2, r3
 800f032:	d1a3      	bne.n	800ef7c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f034:	2300      	movs	r3, #0
}
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f03e:	b580      	push	{r7, lr}
 800f040:	b086      	sub	sp, #24
 800f042:	af02      	add	r7, sp, #8
 800f044:	60f8      	str	r0, [r7, #12]
 800f046:	60b9      	str	r1, [r7, #8]
 800f048:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f052:	d111      	bne.n	800f078 <SPI_EndRxTransaction+0x3a>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f05c:	d004      	beq.n	800f068 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	689b      	ldr	r3, [r3, #8]
 800f062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f066:	d107      	bne.n	800f078 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	681a      	ldr	r2, [r3, #0]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f076:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f080:	d12a      	bne.n	800f0d8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	689b      	ldr	r3, [r3, #8]
 800f086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f08a:	d012      	beq.n	800f0b2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	9300      	str	r3, [sp, #0]
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	2200      	movs	r2, #0
 800f094:	2180      	movs	r1, #128	; 0x80
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f7ff ff67 	bl	800ef6a <SPI_WaitFlagStateUntilTimeout>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d02d      	beq.n	800f0fe <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0a6:	f043 0220 	orr.w	r2, r3, #32
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f0ae:	2303      	movs	r3, #3
 800f0b0:	e026      	b.n	800f100 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	9300      	str	r3, [sp, #0]
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	2101      	movs	r1, #1
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f7ff ff54 	bl	800ef6a <SPI_WaitFlagStateUntilTimeout>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d01a      	beq.n	800f0fe <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0cc:	f043 0220 	orr.w	r2, r3, #32
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f0d4:	2303      	movs	r3, #3
 800f0d6:	e013      	b.n	800f100 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	2101      	movs	r1, #1
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f7ff ff41 	bl	800ef6a <SPI_WaitFlagStateUntilTimeout>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d007      	beq.n	800f0fe <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0f2:	f043 0220 	orr.w	r2, r3, #32
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f0fa:	2303      	movs	r3, #3
 800f0fc:	e000      	b.n	800f100 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f0fe:	2300      	movs	r3, #0
}
 800f100:	4618      	mov	r0, r3
 800f102:	3710      	adds	r7, #16
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b088      	sub	sp, #32
 800f10c:	af02      	add	r7, sp, #8
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f114:	4b1b      	ldr	r3, [pc, #108]	; (800f184 <SPI_EndRxTxTransaction+0x7c>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a1b      	ldr	r2, [pc, #108]	; (800f188 <SPI_EndRxTxTransaction+0x80>)
 800f11a:	fba2 2303 	umull	r2, r3, r2, r3
 800f11e:	0d5b      	lsrs	r3, r3, #21
 800f120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f124:	fb02 f303 	mul.w	r3, r2, r3
 800f128:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f132:	d112      	bne.n	800f15a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	2200      	movs	r2, #0
 800f13c:	2180      	movs	r1, #128	; 0x80
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f7ff ff13 	bl	800ef6a <SPI_WaitFlagStateUntilTimeout>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d016      	beq.n	800f178 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f14e:	f043 0220 	orr.w	r2, r3, #32
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f156:	2303      	movs	r3, #3
 800f158:	e00f      	b.n	800f17a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00a      	beq.n	800f176 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	3b01      	subs	r3, #1
 800f164:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f170:	2b80      	cmp	r3, #128	; 0x80
 800f172:	d0f2      	beq.n	800f15a <SPI_EndRxTxTransaction+0x52>
 800f174:	e000      	b.n	800f178 <SPI_EndRxTxTransaction+0x70>
        break;
 800f176:	bf00      	nop
  }

  return HAL_OK;
 800f178:	2300      	movs	r3, #0
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3718      	adds	r7, #24
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	20000000 	.word	0x20000000
 800f188:	165e9f81 	.word	0x165e9f81

0800f18c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d101      	bne.n	800f19e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f19a:	2301      	movs	r3, #1
 800f19c:	e01d      	b.n	800f1da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d106      	bne.n	800f1b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7f8 fa06 	bl	80075c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2202      	movs	r2, #2
 800f1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	3304      	adds	r3, #4
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	4610      	mov	r0, r2
 800f1cc:	f000 fb56 	bl	800f87c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f1e2:	b480      	push	{r7}
 800f1e4:	b085      	sub	sp, #20
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	68da      	ldr	r2, [r3, #12]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f042 0201 	orr.w	r2, r2, #1
 800f1f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	689b      	ldr	r3, [r3, #8]
 800f200:	f003 0307 	and.w	r3, r3, #7
 800f204:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2b06      	cmp	r3, #6
 800f20a:	d007      	beq.n	800f21c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f042 0201 	orr.w	r2, r2, #1
 800f21a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3714      	adds	r7, #20
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr

0800f22a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b082      	sub	sp, #8
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d101      	bne.n	800f23c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f238:	2301      	movs	r3, #1
 800f23a:	e01d      	b.n	800f278 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f242:	b2db      	uxtb	r3, r3
 800f244:	2b00      	cmp	r3, #0
 800f246:	d106      	bne.n	800f256 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2200      	movs	r2, #0
 800f24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f7f8 f943 	bl	80074dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2202      	movs	r2, #2
 800f25a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	3304      	adds	r3, #4
 800f266:	4619      	mov	r1, r3
 800f268:	4610      	mov	r0, r2
 800f26a:	f000 fb07 	bl	800f87c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2201      	movs	r2, #1
 800f272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	2201      	movs	r2, #1
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	4618      	mov	r0, r3
 800f294:	f000 fd42 	bl	800fd1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4a15      	ldr	r2, [pc, #84]	; (800f2f4 <HAL_TIM_PWM_Start+0x74>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d004      	beq.n	800f2ac <HAL_TIM_PWM_Start+0x2c>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a14      	ldr	r2, [pc, #80]	; (800f2f8 <HAL_TIM_PWM_Start+0x78>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d101      	bne.n	800f2b0 <HAL_TIM_PWM_Start+0x30>
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	e000      	b.n	800f2b2 <HAL_TIM_PWM_Start+0x32>
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d007      	beq.n	800f2c6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f2c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	f003 0307 	and.w	r3, r3, #7
 800f2d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2b06      	cmp	r3, #6
 800f2d6:	d007      	beq.n	800f2e8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f042 0201 	orr.w	r2, r2, #1
 800f2e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2e8:	2300      	movs	r3, #0
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	40010000 	.word	0x40010000
 800f2f8:	40010400 	.word	0x40010400

0800f2fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d101      	bne.n	800f310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f30c:	2301      	movs	r3, #1
 800f30e:	e083      	b.n	800f418 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f316:	b2db      	uxtb	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d106      	bne.n	800f32a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7f8 f9dd 	bl	80076e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2202      	movs	r2, #2
 800f32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	687a      	ldr	r2, [r7, #4]
 800f33a:	6812      	ldr	r2, [r2, #0]
 800f33c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f340:	f023 0307 	bic.w	r3, r3, #7
 800f344:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	3304      	adds	r3, #4
 800f34e:	4619      	mov	r1, r3
 800f350:	4610      	mov	r0, r2
 800f352:	f000 fa93 	bl	800f87c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	699b      	ldr	r3, [r3, #24]
 800f364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	6a1b      	ldr	r3, [r3, #32]
 800f36c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	697a      	ldr	r2, [r7, #20]
 800f374:	4313      	orrs	r3, r2
 800f376:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f37e:	f023 0303 	bic.w	r3, r3, #3
 800f382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	689a      	ldr	r2, [r3, #8]
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	699b      	ldr	r3, [r3, #24]
 800f38c:	021b      	lsls	r3, r3, #8
 800f38e:	4313      	orrs	r3, r2
 800f390:	693a      	ldr	r2, [r7, #16]
 800f392:	4313      	orrs	r3, r2
 800f394:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f39c:	f023 030c 	bic.w	r3, r3, #12
 800f3a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f3a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f3ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	68da      	ldr	r2, [r3, #12]
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	69db      	ldr	r3, [r3, #28]
 800f3b6:	021b      	lsls	r3, r3, #8
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	693a      	ldr	r2, [r7, #16]
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	011a      	lsls	r2, r3, #4
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	6a1b      	ldr	r3, [r3, #32]
 800f3ca:	031b      	lsls	r3, r3, #12
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	693a      	ldr	r2, [r7, #16]
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f3da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f3e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	685a      	ldr	r2, [r3, #4]
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	695b      	ldr	r3, [r3, #20]
 800f3ec:	011b      	lsls	r3, r3, #4
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	697a      	ldr	r2, [r7, #20]
 800f3fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	693a      	ldr	r2, [r7, #16]
 800f404:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	68fa      	ldr	r2, [r7, #12]
 800f40c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2201      	movs	r2, #1
 800f412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f416:	2300      	movs	r3, #0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3718      	adds	r7, #24
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d002      	beq.n	800f436 <HAL_TIM_Encoder_Start+0x16>
 800f430:	2b04      	cmp	r3, #4
 800f432:	d008      	beq.n	800f446 <HAL_TIM_Encoder_Start+0x26>
 800f434:	e00f      	b.n	800f456 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2201      	movs	r2, #1
 800f43c:	2100      	movs	r1, #0
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 fc6c 	bl	800fd1c <TIM_CCxChannelCmd>
      break;
 800f444:	e016      	b.n	800f474 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2201      	movs	r2, #1
 800f44c:	2104      	movs	r1, #4
 800f44e:	4618      	mov	r0, r3
 800f450:	f000 fc64 	bl	800fd1c <TIM_CCxChannelCmd>
      break;
 800f454:	e00e      	b.n	800f474 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2201      	movs	r2, #1
 800f45c:	2100      	movs	r1, #0
 800f45e:	4618      	mov	r0, r3
 800f460:	f000 fc5c 	bl	800fd1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2201      	movs	r2, #1
 800f46a:	2104      	movs	r1, #4
 800f46c:	4618      	mov	r0, r3
 800f46e:	f000 fc55 	bl	800fd1c <TIM_CCxChannelCmd>
      break;
 800f472:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	681a      	ldr	r2, [r3, #0]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f042 0201 	orr.w	r2, r2, #1
 800f482:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b082      	sub	sp, #8
 800f492:	af00      	add	r7, sp, #0
 800f494:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	691b      	ldr	r3, [r3, #16]
 800f49c:	f003 0302 	and.w	r3, r3, #2
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d122      	bne.n	800f4ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	f003 0302 	and.w	r3, r3, #2
 800f4ae:	2b02      	cmp	r3, #2
 800f4b0:	d11b      	bne.n	800f4ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f06f 0202 	mvn.w	r2, #2
 800f4ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	699b      	ldr	r3, [r3, #24]
 800f4c8:	f003 0303 	and.w	r3, r3, #3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d003      	beq.n	800f4d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 f9b5 	bl	800f840 <HAL_TIM_IC_CaptureCallback>
 800f4d6:	e005      	b.n	800f4e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f9a7 	bl	800f82c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 f9b8 	bl	800f854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	691b      	ldr	r3, [r3, #16]
 800f4f0:	f003 0304 	and.w	r3, r3, #4
 800f4f4:	2b04      	cmp	r3, #4
 800f4f6:	d122      	bne.n	800f53e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	f003 0304 	and.w	r3, r3, #4
 800f502:	2b04      	cmp	r3, #4
 800f504:	d11b      	bne.n	800f53e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f06f 0204 	mvn.w	r2, #4
 800f50e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2202      	movs	r2, #2
 800f514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	699b      	ldr	r3, [r3, #24]
 800f51c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f520:	2b00      	cmp	r3, #0
 800f522:	d003      	beq.n	800f52c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 f98b 	bl	800f840 <HAL_TIM_IC_CaptureCallback>
 800f52a:	e005      	b.n	800f538 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 f97d 	bl	800f82c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 f98e 	bl	800f854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	691b      	ldr	r3, [r3, #16]
 800f544:	f003 0308 	and.w	r3, r3, #8
 800f548:	2b08      	cmp	r3, #8
 800f54a:	d122      	bne.n	800f592 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	68db      	ldr	r3, [r3, #12]
 800f552:	f003 0308 	and.w	r3, r3, #8
 800f556:	2b08      	cmp	r3, #8
 800f558:	d11b      	bne.n	800f592 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f06f 0208 	mvn.w	r2, #8
 800f562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2204      	movs	r2, #4
 800f568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	69db      	ldr	r3, [r3, #28]
 800f570:	f003 0303 	and.w	r3, r3, #3
 800f574:	2b00      	cmp	r3, #0
 800f576:	d003      	beq.n	800f580 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 f961 	bl	800f840 <HAL_TIM_IC_CaptureCallback>
 800f57e:	e005      	b.n	800f58c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f953 	bl	800f82c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 f964 	bl	800f854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	f003 0310 	and.w	r3, r3, #16
 800f59c:	2b10      	cmp	r3, #16
 800f59e:	d122      	bne.n	800f5e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	f003 0310 	and.w	r3, r3, #16
 800f5aa:	2b10      	cmp	r3, #16
 800f5ac:	d11b      	bne.n	800f5e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f06f 0210 	mvn.w	r2, #16
 800f5b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2208      	movs	r2, #8
 800f5bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	69db      	ldr	r3, [r3, #28]
 800f5c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d003      	beq.n	800f5d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 f937 	bl	800f840 <HAL_TIM_IC_CaptureCallback>
 800f5d2:	e005      	b.n	800f5e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 f929 	bl	800f82c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f93a 	bl	800f854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	691b      	ldr	r3, [r3, #16]
 800f5ec:	f003 0301 	and.w	r3, r3, #1
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	d10e      	bne.n	800f612 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	f003 0301 	and.w	r3, r3, #1
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d107      	bne.n	800f612 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f06f 0201 	mvn.w	r2, #1
 800f60a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7f6 fd53 	bl	80060b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	691b      	ldr	r3, [r3, #16]
 800f618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f61c:	2b80      	cmp	r3, #128	; 0x80
 800f61e:	d10e      	bne.n	800f63e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f62a:	2b80      	cmp	r3, #128	; 0x80
 800f62c:	d107      	bne.n	800f63e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 fc6d 	bl	800ff18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	691b      	ldr	r3, [r3, #16]
 800f644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f648:	2b40      	cmp	r3, #64	; 0x40
 800f64a:	d10e      	bne.n	800f66a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f656:	2b40      	cmp	r3, #64	; 0x40
 800f658:	d107      	bne.n	800f66a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f000 f8ff 	bl	800f868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	691b      	ldr	r3, [r3, #16]
 800f670:	f003 0320 	and.w	r3, r3, #32
 800f674:	2b20      	cmp	r3, #32
 800f676:	d10e      	bne.n	800f696 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	f003 0320 	and.w	r3, r3, #32
 800f682:	2b20      	cmp	r3, #32
 800f684:	d107      	bne.n	800f696 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f06f 0220 	mvn.w	r2, #32
 800f68e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 fc37 	bl	800ff04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f696:	bf00      	nop
 800f698:	3708      	adds	r7, #8
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
	...

0800f6a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	60f8      	str	r0, [r7, #12]
 800f6a8:	60b9      	str	r1, [r7, #8]
 800f6aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	d101      	bne.n	800f6ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f6b6:	2302      	movs	r3, #2
 800f6b8:	e0b4      	b.n	800f824 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2202      	movs	r2, #2
 800f6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2b0c      	cmp	r3, #12
 800f6ce:	f200 809f 	bhi.w	800f810 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f6d2:	a201      	add	r2, pc, #4	; (adr r2, 800f6d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d8:	0800f70d 	.word	0x0800f70d
 800f6dc:	0800f811 	.word	0x0800f811
 800f6e0:	0800f811 	.word	0x0800f811
 800f6e4:	0800f811 	.word	0x0800f811
 800f6e8:	0800f74d 	.word	0x0800f74d
 800f6ec:	0800f811 	.word	0x0800f811
 800f6f0:	0800f811 	.word	0x0800f811
 800f6f4:	0800f811 	.word	0x0800f811
 800f6f8:	0800f78f 	.word	0x0800f78f
 800f6fc:	0800f811 	.word	0x0800f811
 800f700:	0800f811 	.word	0x0800f811
 800f704:	0800f811 	.word	0x0800f811
 800f708:	0800f7cf 	.word	0x0800f7cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68b9      	ldr	r1, [r7, #8]
 800f712:	4618      	mov	r0, r3
 800f714:	f000 f952 	bl	800f9bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	699a      	ldr	r2, [r3, #24]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f042 0208 	orr.w	r2, r2, #8
 800f726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	699a      	ldr	r2, [r3, #24]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f022 0204 	bic.w	r2, r2, #4
 800f736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	6999      	ldr	r1, [r3, #24]
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	691a      	ldr	r2, [r3, #16]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	430a      	orrs	r2, r1
 800f748:	619a      	str	r2, [r3, #24]
      break;
 800f74a:	e062      	b.n	800f812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68b9      	ldr	r1, [r7, #8]
 800f752:	4618      	mov	r0, r3
 800f754:	f000 f9a2 	bl	800fa9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	699a      	ldr	r2, [r3, #24]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	699a      	ldr	r2, [r3, #24]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6999      	ldr	r1, [r3, #24]
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	691b      	ldr	r3, [r3, #16]
 800f782:	021a      	lsls	r2, r3, #8
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	430a      	orrs	r2, r1
 800f78a:	619a      	str	r2, [r3, #24]
      break;
 800f78c:	e041      	b.n	800f812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	68b9      	ldr	r1, [r7, #8]
 800f794:	4618      	mov	r0, r3
 800f796:	f000 f9f7 	bl	800fb88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	69da      	ldr	r2, [r3, #28]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f042 0208 	orr.w	r2, r2, #8
 800f7a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	69da      	ldr	r2, [r3, #28]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f022 0204 	bic.w	r2, r2, #4
 800f7b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	69d9      	ldr	r1, [r3, #28]
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	691a      	ldr	r2, [r3, #16]
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	430a      	orrs	r2, r1
 800f7ca:	61da      	str	r2, [r3, #28]
      break;
 800f7cc:	e021      	b.n	800f812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	68b9      	ldr	r1, [r7, #8]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f000 fa4b 	bl	800fc70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	69da      	ldr	r2, [r3, #28]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	69da      	ldr	r2, [r3, #28]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	69d9      	ldr	r1, [r3, #28]
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	691b      	ldr	r3, [r3, #16]
 800f804:	021a      	lsls	r2, r3, #8
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	430a      	orrs	r2, r1
 800f80c:	61da      	str	r2, [r3, #28]
      break;
 800f80e:	e000      	b.n	800f812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f810:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2201      	movs	r2, #1
 800f816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2200      	movs	r2, #0
 800f81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f834:	bf00      	nop
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr

0800f840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f848:	bf00      	nop
 800f84a:	370c      	adds	r7, #12
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f870:	bf00      	nop
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr

0800f87c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b085      	sub	sp, #20
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4a40      	ldr	r2, [pc, #256]	; (800f990 <TIM_Base_SetConfig+0x114>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d013      	beq.n	800f8bc <TIM_Base_SetConfig+0x40>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f89a:	d00f      	beq.n	800f8bc <TIM_Base_SetConfig+0x40>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4a3d      	ldr	r2, [pc, #244]	; (800f994 <TIM_Base_SetConfig+0x118>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d00b      	beq.n	800f8bc <TIM_Base_SetConfig+0x40>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4a3c      	ldr	r2, [pc, #240]	; (800f998 <TIM_Base_SetConfig+0x11c>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d007      	beq.n	800f8bc <TIM_Base_SetConfig+0x40>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a3b      	ldr	r2, [pc, #236]	; (800f99c <TIM_Base_SetConfig+0x120>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d003      	beq.n	800f8bc <TIM_Base_SetConfig+0x40>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4a3a      	ldr	r2, [pc, #232]	; (800f9a0 <TIM_Base_SetConfig+0x124>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d108      	bne.n	800f8ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	68fa      	ldr	r2, [r7, #12]
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4a2f      	ldr	r2, [pc, #188]	; (800f990 <TIM_Base_SetConfig+0x114>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d02b      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8dc:	d027      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4a2c      	ldr	r2, [pc, #176]	; (800f994 <TIM_Base_SetConfig+0x118>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d023      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4a2b      	ldr	r2, [pc, #172]	; (800f998 <TIM_Base_SetConfig+0x11c>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d01f      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a2a      	ldr	r2, [pc, #168]	; (800f99c <TIM_Base_SetConfig+0x120>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d01b      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a29      	ldr	r2, [pc, #164]	; (800f9a0 <TIM_Base_SetConfig+0x124>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d017      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a28      	ldr	r2, [pc, #160]	; (800f9a4 <TIM_Base_SetConfig+0x128>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d013      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4a27      	ldr	r2, [pc, #156]	; (800f9a8 <TIM_Base_SetConfig+0x12c>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d00f      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a26      	ldr	r2, [pc, #152]	; (800f9ac <TIM_Base_SetConfig+0x130>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d00b      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a25      	ldr	r2, [pc, #148]	; (800f9b0 <TIM_Base_SetConfig+0x134>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d007      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a24      	ldr	r2, [pc, #144]	; (800f9b4 <TIM_Base_SetConfig+0x138>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d003      	beq.n	800f92e <TIM_Base_SetConfig+0xb2>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a23      	ldr	r2, [pc, #140]	; (800f9b8 <TIM_Base_SetConfig+0x13c>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d108      	bne.n	800f940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	4313      	orrs	r3, r2
 800f93e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	695b      	ldr	r3, [r3, #20]
 800f94a:	4313      	orrs	r3, r2
 800f94c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	689a      	ldr	r2, [r3, #8]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4a0a      	ldr	r2, [pc, #40]	; (800f990 <TIM_Base_SetConfig+0x114>)
 800f968:	4293      	cmp	r3, r2
 800f96a:	d003      	beq.n	800f974 <TIM_Base_SetConfig+0xf8>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4a0c      	ldr	r2, [pc, #48]	; (800f9a0 <TIM_Base_SetConfig+0x124>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d103      	bne.n	800f97c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	691a      	ldr	r2, [r3, #16]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2201      	movs	r2, #1
 800f980:	615a      	str	r2, [r3, #20]
}
 800f982:	bf00      	nop
 800f984:	3714      	adds	r7, #20
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	40010000 	.word	0x40010000
 800f994:	40000400 	.word	0x40000400
 800f998:	40000800 	.word	0x40000800
 800f99c:	40000c00 	.word	0x40000c00
 800f9a0:	40010400 	.word	0x40010400
 800f9a4:	40014000 	.word	0x40014000
 800f9a8:	40014400 	.word	0x40014400
 800f9ac:	40014800 	.word	0x40014800
 800f9b0:	40001800 	.word	0x40001800
 800f9b4:	40001c00 	.word	0x40001c00
 800f9b8:	40002000 	.word	0x40002000

0800f9bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b087      	sub	sp, #28
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6a1b      	ldr	r3, [r3, #32]
 800f9ca:	f023 0201 	bic.w	r2, r3, #1
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6a1b      	ldr	r3, [r3, #32]
 800f9d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	699b      	ldr	r3, [r3, #24]
 800f9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f023 0303 	bic.w	r3, r3, #3
 800f9f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	f023 0302 	bic.w	r3, r3, #2
 800fa04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	689b      	ldr	r3, [r3, #8]
 800fa0a:	697a      	ldr	r2, [r7, #20]
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	4a20      	ldr	r2, [pc, #128]	; (800fa94 <TIM_OC1_SetConfig+0xd8>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d003      	beq.n	800fa20 <TIM_OC1_SetConfig+0x64>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4a1f      	ldr	r2, [pc, #124]	; (800fa98 <TIM_OC1_SetConfig+0xdc>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d10c      	bne.n	800fa3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	f023 0308 	bic.w	r3, r3, #8
 800fa26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	697a      	ldr	r2, [r7, #20]
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	f023 0304 	bic.w	r3, r3, #4
 800fa38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a15      	ldr	r2, [pc, #84]	; (800fa94 <TIM_OC1_SetConfig+0xd8>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d003      	beq.n	800fa4a <TIM_OC1_SetConfig+0x8e>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4a14      	ldr	r2, [pc, #80]	; (800fa98 <TIM_OC1_SetConfig+0xdc>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d111      	bne.n	800fa6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	695b      	ldr	r3, [r3, #20]
 800fa5e:	693a      	ldr	r2, [r7, #16]
 800fa60:	4313      	orrs	r3, r2
 800fa62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	699b      	ldr	r3, [r3, #24]
 800fa68:	693a      	ldr	r2, [r7, #16]
 800fa6a:	4313      	orrs	r3, r2
 800fa6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	693a      	ldr	r2, [r7, #16]
 800fa72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	68fa      	ldr	r2, [r7, #12]
 800fa78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	685a      	ldr	r2, [r3, #4]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	697a      	ldr	r2, [r7, #20]
 800fa86:	621a      	str	r2, [r3, #32]
}
 800fa88:	bf00      	nop
 800fa8a:	371c      	adds	r7, #28
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr
 800fa94:	40010000 	.word	0x40010000
 800fa98:	40010400 	.word	0x40010400

0800fa9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b087      	sub	sp, #28
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6a1b      	ldr	r3, [r3, #32]
 800faaa:	f023 0210 	bic.w	r2, r3, #16
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6a1b      	ldr	r3, [r3, #32]
 800fab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	699b      	ldr	r3, [r3, #24]
 800fac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800faca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	021b      	lsls	r3, r3, #8
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	4313      	orrs	r3, r2
 800fade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	f023 0320 	bic.w	r3, r3, #32
 800fae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	689b      	ldr	r3, [r3, #8]
 800faec:	011b      	lsls	r3, r3, #4
 800faee:	697a      	ldr	r2, [r7, #20]
 800faf0:	4313      	orrs	r3, r2
 800faf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4a22      	ldr	r2, [pc, #136]	; (800fb80 <TIM_OC2_SetConfig+0xe4>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d003      	beq.n	800fb04 <TIM_OC2_SetConfig+0x68>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4a21      	ldr	r2, [pc, #132]	; (800fb84 <TIM_OC2_SetConfig+0xe8>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d10d      	bne.n	800fb20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	011b      	lsls	r3, r3, #4
 800fb12:	697a      	ldr	r2, [r7, #20]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a17      	ldr	r2, [pc, #92]	; (800fb80 <TIM_OC2_SetConfig+0xe4>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d003      	beq.n	800fb30 <TIM_OC2_SetConfig+0x94>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a16      	ldr	r2, [pc, #88]	; (800fb84 <TIM_OC2_SetConfig+0xe8>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d113      	bne.n	800fb58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	695b      	ldr	r3, [r3, #20]
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	693a      	ldr	r2, [r7, #16]
 800fb48:	4313      	orrs	r3, r2
 800fb4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	699b      	ldr	r3, [r3, #24]
 800fb50:	009b      	lsls	r3, r3, #2
 800fb52:	693a      	ldr	r2, [r7, #16]
 800fb54:	4313      	orrs	r3, r2
 800fb56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	693a      	ldr	r2, [r7, #16]
 800fb5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	685a      	ldr	r2, [r3, #4]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	697a      	ldr	r2, [r7, #20]
 800fb70:	621a      	str	r2, [r3, #32]
}
 800fb72:	bf00      	nop
 800fb74:	371c      	adds	r7, #28
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	40010000 	.word	0x40010000
 800fb84:	40010400 	.word	0x40010400

0800fb88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6a1b      	ldr	r3, [r3, #32]
 800fb96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6a1b      	ldr	r3, [r3, #32]
 800fba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	69db      	ldr	r3, [r3, #28]
 800fbae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f023 0303 	bic.w	r3, r3, #3
 800fbbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	68fa      	ldr	r2, [r7, #12]
 800fbc6:	4313      	orrs	r3, r2
 800fbc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fbd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	689b      	ldr	r3, [r3, #8]
 800fbd6:	021b      	lsls	r3, r3, #8
 800fbd8:	697a      	ldr	r2, [r7, #20]
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4a21      	ldr	r2, [pc, #132]	; (800fc68 <TIM_OC3_SetConfig+0xe0>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d003      	beq.n	800fbee <TIM_OC3_SetConfig+0x66>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4a20      	ldr	r2, [pc, #128]	; (800fc6c <TIM_OC3_SetConfig+0xe4>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d10d      	bne.n	800fc0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	021b      	lsls	r3, r3, #8
 800fbfc:	697a      	ldr	r2, [r7, #20]
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4a16      	ldr	r2, [pc, #88]	; (800fc68 <TIM_OC3_SetConfig+0xe0>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d003      	beq.n	800fc1a <TIM_OC3_SetConfig+0x92>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4a15      	ldr	r2, [pc, #84]	; (800fc6c <TIM_OC3_SetConfig+0xe4>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d113      	bne.n	800fc42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	695b      	ldr	r3, [r3, #20]
 800fc2e:	011b      	lsls	r3, r3, #4
 800fc30:	693a      	ldr	r2, [r7, #16]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	699b      	ldr	r3, [r3, #24]
 800fc3a:	011b      	lsls	r3, r3, #4
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	693a      	ldr	r2, [r7, #16]
 800fc46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	68fa      	ldr	r2, [r7, #12]
 800fc4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	685a      	ldr	r2, [r3, #4]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	697a      	ldr	r2, [r7, #20]
 800fc5a:	621a      	str	r2, [r3, #32]
}
 800fc5c:	bf00      	nop
 800fc5e:	371c      	adds	r7, #28
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr
 800fc68:	40010000 	.word	0x40010000
 800fc6c:	40010400 	.word	0x40010400

0800fc70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b087      	sub	sp, #28
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a1b      	ldr	r3, [r3, #32]
 800fc7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6a1b      	ldr	r3, [r3, #32]
 800fc8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	69db      	ldr	r3, [r3, #28]
 800fc96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	021b      	lsls	r3, r3, #8
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fcba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	031b      	lsls	r3, r3, #12
 800fcc2:	693a      	ldr	r2, [r7, #16]
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4a12      	ldr	r2, [pc, #72]	; (800fd14 <TIM_OC4_SetConfig+0xa4>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d003      	beq.n	800fcd8 <TIM_OC4_SetConfig+0x68>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	4a11      	ldr	r2, [pc, #68]	; (800fd18 <TIM_OC4_SetConfig+0xa8>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d109      	bne.n	800fcec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fcde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	695b      	ldr	r3, [r3, #20]
 800fce4:	019b      	lsls	r3, r3, #6
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	4313      	orrs	r3, r2
 800fcea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	68fa      	ldr	r2, [r7, #12]
 800fcf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	685a      	ldr	r2, [r3, #4]
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	693a      	ldr	r2, [r7, #16]
 800fd04:	621a      	str	r2, [r3, #32]
}
 800fd06:	bf00      	nop
 800fd08:	371c      	adds	r7, #28
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd10:	4770      	bx	lr
 800fd12:	bf00      	nop
 800fd14:	40010000 	.word	0x40010000
 800fd18:	40010400 	.word	0x40010400

0800fd1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b087      	sub	sp, #28
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	f003 031f 	and.w	r3, r3, #31
 800fd2e:	2201      	movs	r2, #1
 800fd30:	fa02 f303 	lsl.w	r3, r2, r3
 800fd34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	6a1a      	ldr	r2, [r3, #32]
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	43db      	mvns	r3, r3
 800fd3e:	401a      	ands	r2, r3
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6a1a      	ldr	r2, [r3, #32]
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	f003 031f 	and.w	r3, r3, #31
 800fd4e:	6879      	ldr	r1, [r7, #4]
 800fd50:	fa01 f303 	lsl.w	r3, r1, r3
 800fd54:	431a      	orrs	r2, r3
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	621a      	str	r2, [r3, #32]
}
 800fd5a:	bf00      	nop
 800fd5c:	371c      	adds	r7, #28
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr
	...

0800fd68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b085      	sub	sp, #20
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d101      	bne.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd7c:	2302      	movs	r3, #2
 800fd7e:	e05a      	b.n	800fe36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2201      	movs	r2, #1
 800fd84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2202      	movs	r2, #2
 800fd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fda6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	68fa      	ldr	r2, [r7, #12]
 800fdb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4a21      	ldr	r2, [pc, #132]	; (800fe44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d022      	beq.n	800fe0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdcc:	d01d      	beq.n	800fe0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	4a1d      	ldr	r2, [pc, #116]	; (800fe48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d018      	beq.n	800fe0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	4a1b      	ldr	r2, [pc, #108]	; (800fe4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d013      	beq.n	800fe0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	4a1a      	ldr	r2, [pc, #104]	; (800fe50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d00e      	beq.n	800fe0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4a18      	ldr	r2, [pc, #96]	; (800fe54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d009      	beq.n	800fe0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	4a17      	ldr	r2, [pc, #92]	; (800fe58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d004      	beq.n	800fe0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4a15      	ldr	r2, [pc, #84]	; (800fe5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d10c      	bne.n	800fe24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	68ba      	ldr	r2, [r7, #8]
 800fe18:	4313      	orrs	r3, r2
 800fe1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	68ba      	ldr	r2, [r7, #8]
 800fe22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2201      	movs	r2, #1
 800fe28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe34:	2300      	movs	r3, #0
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3714      	adds	r7, #20
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop
 800fe44:	40010000 	.word	0x40010000
 800fe48:	40000400 	.word	0x40000400
 800fe4c:	40000800 	.word	0x40000800
 800fe50:	40000c00 	.word	0x40000c00
 800fe54:	40010400 	.word	0x40010400
 800fe58:	40014000 	.word	0x40014000
 800fe5c:	40001800 	.word	0x40001800

0800fe60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b085      	sub	sp, #20
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d101      	bne.n	800fe7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe78:	2302      	movs	r3, #2
 800fe7a:	e03d      	b.n	800fef8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2201      	movs	r2, #1
 800fe80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	4313      	orrs	r3, r2
 800fe90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	4313      	orrs	r3, r2
 800fe9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	4313      	orrs	r3, r2
 800feac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4313      	orrs	r3, r2
 800feba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	691b      	ldr	r3, [r3, #16]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	695b      	ldr	r3, [r3, #20]
 800fed4:	4313      	orrs	r3, r2
 800fed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	69db      	ldr	r3, [r3, #28]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	68fa      	ldr	r2, [r7, #12]
 800feec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fef6:	2300      	movs	r3, #0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3714      	adds	r7, #20
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d101      	bne.n	800ff3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	e03f      	b.n	800ffbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d106      	bne.n	800ff58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f7f7 fcf0 	bl	8007938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2224      	movs	r2, #36	; 0x24
 800ff5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	68da      	ldr	r2, [r3, #12]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 f829 	bl	800ffc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	691a      	ldr	r2, [r3, #16]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	695a      	ldr	r2, [r3, #20]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	68da      	ldr	r2, [r3, #12]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ffa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2220      	movs	r2, #32
 800ffb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2220      	movs	r2, #32
 800ffb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ffbc:	2300      	movs	r3, #0
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3708      	adds	r7, #8
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
	...

0800ffc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ffc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffcc:	b085      	sub	sp, #20
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	691b      	ldr	r3, [r3, #16]
 800ffd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	68da      	ldr	r2, [r3, #12]
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	430a      	orrs	r2, r1
 800ffe6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	689a      	ldr	r2, [r3, #8]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	691b      	ldr	r3, [r3, #16]
 800fff0:	431a      	orrs	r2, r3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	695b      	ldr	r3, [r3, #20]
 800fff6:	431a      	orrs	r2, r3
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	69db      	ldr	r3, [r3, #28]
 800fffc:	4313      	orrs	r3, r2
 800fffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801000a:	f023 030c 	bic.w	r3, r3, #12
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	6812      	ldr	r2, [r2, #0]
 8010012:	68f9      	ldr	r1, [r7, #12]
 8010014:	430b      	orrs	r3, r1
 8010016:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	695b      	ldr	r3, [r3, #20]
 801001e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	699a      	ldr	r2, [r3, #24]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	430a      	orrs	r2, r1
 801002c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	69db      	ldr	r3, [r3, #28]
 8010032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010036:	f040 818b 	bne.w	8010350 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4ac1      	ldr	r2, [pc, #772]	; (8010344 <UART_SetConfig+0x37c>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d005      	beq.n	8010050 <UART_SetConfig+0x88>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4abf      	ldr	r2, [pc, #764]	; (8010348 <UART_SetConfig+0x380>)
 801004a:	4293      	cmp	r3, r2
 801004c:	f040 80bd 	bne.w	80101ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010050:	f7fc fbcc 	bl	800c7ec <HAL_RCC_GetPCLK2Freq>
 8010054:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	461d      	mov	r5, r3
 801005a:	f04f 0600 	mov.w	r6, #0
 801005e:	46a8      	mov	r8, r5
 8010060:	46b1      	mov	r9, r6
 8010062:	eb18 0308 	adds.w	r3, r8, r8
 8010066:	eb49 0409 	adc.w	r4, r9, r9
 801006a:	4698      	mov	r8, r3
 801006c:	46a1      	mov	r9, r4
 801006e:	eb18 0805 	adds.w	r8, r8, r5
 8010072:	eb49 0906 	adc.w	r9, r9, r6
 8010076:	f04f 0100 	mov.w	r1, #0
 801007a:	f04f 0200 	mov.w	r2, #0
 801007e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010082:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010086:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801008a:	4688      	mov	r8, r1
 801008c:	4691      	mov	r9, r2
 801008e:	eb18 0005 	adds.w	r0, r8, r5
 8010092:	eb49 0106 	adc.w	r1, r9, r6
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	461d      	mov	r5, r3
 801009c:	f04f 0600 	mov.w	r6, #0
 80100a0:	196b      	adds	r3, r5, r5
 80100a2:	eb46 0406 	adc.w	r4, r6, r6
 80100a6:	461a      	mov	r2, r3
 80100a8:	4623      	mov	r3, r4
 80100aa:	f7f0 fe05 	bl	8000cb8 <__aeabi_uldivmod>
 80100ae:	4603      	mov	r3, r0
 80100b0:	460c      	mov	r4, r1
 80100b2:	461a      	mov	r2, r3
 80100b4:	4ba5      	ldr	r3, [pc, #660]	; (801034c <UART_SetConfig+0x384>)
 80100b6:	fba3 2302 	umull	r2, r3, r3, r2
 80100ba:	095b      	lsrs	r3, r3, #5
 80100bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	461d      	mov	r5, r3
 80100c4:	f04f 0600 	mov.w	r6, #0
 80100c8:	46a9      	mov	r9, r5
 80100ca:	46b2      	mov	sl, r6
 80100cc:	eb19 0309 	adds.w	r3, r9, r9
 80100d0:	eb4a 040a 	adc.w	r4, sl, sl
 80100d4:	4699      	mov	r9, r3
 80100d6:	46a2      	mov	sl, r4
 80100d8:	eb19 0905 	adds.w	r9, r9, r5
 80100dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80100e0:	f04f 0100 	mov.w	r1, #0
 80100e4:	f04f 0200 	mov.w	r2, #0
 80100e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100f4:	4689      	mov	r9, r1
 80100f6:	4692      	mov	sl, r2
 80100f8:	eb19 0005 	adds.w	r0, r9, r5
 80100fc:	eb4a 0106 	adc.w	r1, sl, r6
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	461d      	mov	r5, r3
 8010106:	f04f 0600 	mov.w	r6, #0
 801010a:	196b      	adds	r3, r5, r5
 801010c:	eb46 0406 	adc.w	r4, r6, r6
 8010110:	461a      	mov	r2, r3
 8010112:	4623      	mov	r3, r4
 8010114:	f7f0 fdd0 	bl	8000cb8 <__aeabi_uldivmod>
 8010118:	4603      	mov	r3, r0
 801011a:	460c      	mov	r4, r1
 801011c:	461a      	mov	r2, r3
 801011e:	4b8b      	ldr	r3, [pc, #556]	; (801034c <UART_SetConfig+0x384>)
 8010120:	fba3 1302 	umull	r1, r3, r3, r2
 8010124:	095b      	lsrs	r3, r3, #5
 8010126:	2164      	movs	r1, #100	; 0x64
 8010128:	fb01 f303 	mul.w	r3, r1, r3
 801012c:	1ad3      	subs	r3, r2, r3
 801012e:	00db      	lsls	r3, r3, #3
 8010130:	3332      	adds	r3, #50	; 0x32
 8010132:	4a86      	ldr	r2, [pc, #536]	; (801034c <UART_SetConfig+0x384>)
 8010134:	fba2 2303 	umull	r2, r3, r2, r3
 8010138:	095b      	lsrs	r3, r3, #5
 801013a:	005b      	lsls	r3, r3, #1
 801013c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010140:	4498      	add	r8, r3
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	461d      	mov	r5, r3
 8010146:	f04f 0600 	mov.w	r6, #0
 801014a:	46a9      	mov	r9, r5
 801014c:	46b2      	mov	sl, r6
 801014e:	eb19 0309 	adds.w	r3, r9, r9
 8010152:	eb4a 040a 	adc.w	r4, sl, sl
 8010156:	4699      	mov	r9, r3
 8010158:	46a2      	mov	sl, r4
 801015a:	eb19 0905 	adds.w	r9, r9, r5
 801015e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010162:	f04f 0100 	mov.w	r1, #0
 8010166:	f04f 0200 	mov.w	r2, #0
 801016a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801016e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010172:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010176:	4689      	mov	r9, r1
 8010178:	4692      	mov	sl, r2
 801017a:	eb19 0005 	adds.w	r0, r9, r5
 801017e:	eb4a 0106 	adc.w	r1, sl, r6
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	461d      	mov	r5, r3
 8010188:	f04f 0600 	mov.w	r6, #0
 801018c:	196b      	adds	r3, r5, r5
 801018e:	eb46 0406 	adc.w	r4, r6, r6
 8010192:	461a      	mov	r2, r3
 8010194:	4623      	mov	r3, r4
 8010196:	f7f0 fd8f 	bl	8000cb8 <__aeabi_uldivmod>
 801019a:	4603      	mov	r3, r0
 801019c:	460c      	mov	r4, r1
 801019e:	461a      	mov	r2, r3
 80101a0:	4b6a      	ldr	r3, [pc, #424]	; (801034c <UART_SetConfig+0x384>)
 80101a2:	fba3 1302 	umull	r1, r3, r3, r2
 80101a6:	095b      	lsrs	r3, r3, #5
 80101a8:	2164      	movs	r1, #100	; 0x64
 80101aa:	fb01 f303 	mul.w	r3, r1, r3
 80101ae:	1ad3      	subs	r3, r2, r3
 80101b0:	00db      	lsls	r3, r3, #3
 80101b2:	3332      	adds	r3, #50	; 0x32
 80101b4:	4a65      	ldr	r2, [pc, #404]	; (801034c <UART_SetConfig+0x384>)
 80101b6:	fba2 2303 	umull	r2, r3, r2, r3
 80101ba:	095b      	lsrs	r3, r3, #5
 80101bc:	f003 0207 	and.w	r2, r3, #7
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4442      	add	r2, r8
 80101c6:	609a      	str	r2, [r3, #8]
 80101c8:	e26f      	b.n	80106aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80101ca:	f7fc fafb 	bl	800c7c4 <HAL_RCC_GetPCLK1Freq>
 80101ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	461d      	mov	r5, r3
 80101d4:	f04f 0600 	mov.w	r6, #0
 80101d8:	46a8      	mov	r8, r5
 80101da:	46b1      	mov	r9, r6
 80101dc:	eb18 0308 	adds.w	r3, r8, r8
 80101e0:	eb49 0409 	adc.w	r4, r9, r9
 80101e4:	4698      	mov	r8, r3
 80101e6:	46a1      	mov	r9, r4
 80101e8:	eb18 0805 	adds.w	r8, r8, r5
 80101ec:	eb49 0906 	adc.w	r9, r9, r6
 80101f0:	f04f 0100 	mov.w	r1, #0
 80101f4:	f04f 0200 	mov.w	r2, #0
 80101f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80101fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010200:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010204:	4688      	mov	r8, r1
 8010206:	4691      	mov	r9, r2
 8010208:	eb18 0005 	adds.w	r0, r8, r5
 801020c:	eb49 0106 	adc.w	r1, r9, r6
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	461d      	mov	r5, r3
 8010216:	f04f 0600 	mov.w	r6, #0
 801021a:	196b      	adds	r3, r5, r5
 801021c:	eb46 0406 	adc.w	r4, r6, r6
 8010220:	461a      	mov	r2, r3
 8010222:	4623      	mov	r3, r4
 8010224:	f7f0 fd48 	bl	8000cb8 <__aeabi_uldivmod>
 8010228:	4603      	mov	r3, r0
 801022a:	460c      	mov	r4, r1
 801022c:	461a      	mov	r2, r3
 801022e:	4b47      	ldr	r3, [pc, #284]	; (801034c <UART_SetConfig+0x384>)
 8010230:	fba3 2302 	umull	r2, r3, r3, r2
 8010234:	095b      	lsrs	r3, r3, #5
 8010236:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	461d      	mov	r5, r3
 801023e:	f04f 0600 	mov.w	r6, #0
 8010242:	46a9      	mov	r9, r5
 8010244:	46b2      	mov	sl, r6
 8010246:	eb19 0309 	adds.w	r3, r9, r9
 801024a:	eb4a 040a 	adc.w	r4, sl, sl
 801024e:	4699      	mov	r9, r3
 8010250:	46a2      	mov	sl, r4
 8010252:	eb19 0905 	adds.w	r9, r9, r5
 8010256:	eb4a 0a06 	adc.w	sl, sl, r6
 801025a:	f04f 0100 	mov.w	r1, #0
 801025e:	f04f 0200 	mov.w	r2, #0
 8010262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010266:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801026a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801026e:	4689      	mov	r9, r1
 8010270:	4692      	mov	sl, r2
 8010272:	eb19 0005 	adds.w	r0, r9, r5
 8010276:	eb4a 0106 	adc.w	r1, sl, r6
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	461d      	mov	r5, r3
 8010280:	f04f 0600 	mov.w	r6, #0
 8010284:	196b      	adds	r3, r5, r5
 8010286:	eb46 0406 	adc.w	r4, r6, r6
 801028a:	461a      	mov	r2, r3
 801028c:	4623      	mov	r3, r4
 801028e:	f7f0 fd13 	bl	8000cb8 <__aeabi_uldivmod>
 8010292:	4603      	mov	r3, r0
 8010294:	460c      	mov	r4, r1
 8010296:	461a      	mov	r2, r3
 8010298:	4b2c      	ldr	r3, [pc, #176]	; (801034c <UART_SetConfig+0x384>)
 801029a:	fba3 1302 	umull	r1, r3, r3, r2
 801029e:	095b      	lsrs	r3, r3, #5
 80102a0:	2164      	movs	r1, #100	; 0x64
 80102a2:	fb01 f303 	mul.w	r3, r1, r3
 80102a6:	1ad3      	subs	r3, r2, r3
 80102a8:	00db      	lsls	r3, r3, #3
 80102aa:	3332      	adds	r3, #50	; 0x32
 80102ac:	4a27      	ldr	r2, [pc, #156]	; (801034c <UART_SetConfig+0x384>)
 80102ae:	fba2 2303 	umull	r2, r3, r2, r3
 80102b2:	095b      	lsrs	r3, r3, #5
 80102b4:	005b      	lsls	r3, r3, #1
 80102b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80102ba:	4498      	add	r8, r3
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	461d      	mov	r5, r3
 80102c0:	f04f 0600 	mov.w	r6, #0
 80102c4:	46a9      	mov	r9, r5
 80102c6:	46b2      	mov	sl, r6
 80102c8:	eb19 0309 	adds.w	r3, r9, r9
 80102cc:	eb4a 040a 	adc.w	r4, sl, sl
 80102d0:	4699      	mov	r9, r3
 80102d2:	46a2      	mov	sl, r4
 80102d4:	eb19 0905 	adds.w	r9, r9, r5
 80102d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80102dc:	f04f 0100 	mov.w	r1, #0
 80102e0:	f04f 0200 	mov.w	r2, #0
 80102e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102f0:	4689      	mov	r9, r1
 80102f2:	4692      	mov	sl, r2
 80102f4:	eb19 0005 	adds.w	r0, r9, r5
 80102f8:	eb4a 0106 	adc.w	r1, sl, r6
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	461d      	mov	r5, r3
 8010302:	f04f 0600 	mov.w	r6, #0
 8010306:	196b      	adds	r3, r5, r5
 8010308:	eb46 0406 	adc.w	r4, r6, r6
 801030c:	461a      	mov	r2, r3
 801030e:	4623      	mov	r3, r4
 8010310:	f7f0 fcd2 	bl	8000cb8 <__aeabi_uldivmod>
 8010314:	4603      	mov	r3, r0
 8010316:	460c      	mov	r4, r1
 8010318:	461a      	mov	r2, r3
 801031a:	4b0c      	ldr	r3, [pc, #48]	; (801034c <UART_SetConfig+0x384>)
 801031c:	fba3 1302 	umull	r1, r3, r3, r2
 8010320:	095b      	lsrs	r3, r3, #5
 8010322:	2164      	movs	r1, #100	; 0x64
 8010324:	fb01 f303 	mul.w	r3, r1, r3
 8010328:	1ad3      	subs	r3, r2, r3
 801032a:	00db      	lsls	r3, r3, #3
 801032c:	3332      	adds	r3, #50	; 0x32
 801032e:	4a07      	ldr	r2, [pc, #28]	; (801034c <UART_SetConfig+0x384>)
 8010330:	fba2 2303 	umull	r2, r3, r2, r3
 8010334:	095b      	lsrs	r3, r3, #5
 8010336:	f003 0207 	and.w	r2, r3, #7
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4442      	add	r2, r8
 8010340:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010342:	e1b2      	b.n	80106aa <UART_SetConfig+0x6e2>
 8010344:	40011000 	.word	0x40011000
 8010348:	40011400 	.word	0x40011400
 801034c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4ad7      	ldr	r2, [pc, #860]	; (80106b4 <UART_SetConfig+0x6ec>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d005      	beq.n	8010366 <UART_SetConfig+0x39e>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4ad6      	ldr	r2, [pc, #856]	; (80106b8 <UART_SetConfig+0x6f0>)
 8010360:	4293      	cmp	r3, r2
 8010362:	f040 80d1 	bne.w	8010508 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010366:	f7fc fa41 	bl	800c7ec <HAL_RCC_GetPCLK2Freq>
 801036a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	469a      	mov	sl, r3
 8010370:	f04f 0b00 	mov.w	fp, #0
 8010374:	46d0      	mov	r8, sl
 8010376:	46d9      	mov	r9, fp
 8010378:	eb18 0308 	adds.w	r3, r8, r8
 801037c:	eb49 0409 	adc.w	r4, r9, r9
 8010380:	4698      	mov	r8, r3
 8010382:	46a1      	mov	r9, r4
 8010384:	eb18 080a 	adds.w	r8, r8, sl
 8010388:	eb49 090b 	adc.w	r9, r9, fp
 801038c:	f04f 0100 	mov.w	r1, #0
 8010390:	f04f 0200 	mov.w	r2, #0
 8010394:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010398:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801039c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80103a0:	4688      	mov	r8, r1
 80103a2:	4691      	mov	r9, r2
 80103a4:	eb1a 0508 	adds.w	r5, sl, r8
 80103a8:	eb4b 0609 	adc.w	r6, fp, r9
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	685b      	ldr	r3, [r3, #4]
 80103b0:	4619      	mov	r1, r3
 80103b2:	f04f 0200 	mov.w	r2, #0
 80103b6:	f04f 0300 	mov.w	r3, #0
 80103ba:	f04f 0400 	mov.w	r4, #0
 80103be:	0094      	lsls	r4, r2, #2
 80103c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103c4:	008b      	lsls	r3, r1, #2
 80103c6:	461a      	mov	r2, r3
 80103c8:	4623      	mov	r3, r4
 80103ca:	4628      	mov	r0, r5
 80103cc:	4631      	mov	r1, r6
 80103ce:	f7f0 fc73 	bl	8000cb8 <__aeabi_uldivmod>
 80103d2:	4603      	mov	r3, r0
 80103d4:	460c      	mov	r4, r1
 80103d6:	461a      	mov	r2, r3
 80103d8:	4bb8      	ldr	r3, [pc, #736]	; (80106bc <UART_SetConfig+0x6f4>)
 80103da:	fba3 2302 	umull	r2, r3, r3, r2
 80103de:	095b      	lsrs	r3, r3, #5
 80103e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	469b      	mov	fp, r3
 80103e8:	f04f 0c00 	mov.w	ip, #0
 80103ec:	46d9      	mov	r9, fp
 80103ee:	46e2      	mov	sl, ip
 80103f0:	eb19 0309 	adds.w	r3, r9, r9
 80103f4:	eb4a 040a 	adc.w	r4, sl, sl
 80103f8:	4699      	mov	r9, r3
 80103fa:	46a2      	mov	sl, r4
 80103fc:	eb19 090b 	adds.w	r9, r9, fp
 8010400:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010404:	f04f 0100 	mov.w	r1, #0
 8010408:	f04f 0200 	mov.w	r2, #0
 801040c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010410:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010414:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010418:	4689      	mov	r9, r1
 801041a:	4692      	mov	sl, r2
 801041c:	eb1b 0509 	adds.w	r5, fp, r9
 8010420:	eb4c 060a 	adc.w	r6, ip, sl
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	4619      	mov	r1, r3
 801042a:	f04f 0200 	mov.w	r2, #0
 801042e:	f04f 0300 	mov.w	r3, #0
 8010432:	f04f 0400 	mov.w	r4, #0
 8010436:	0094      	lsls	r4, r2, #2
 8010438:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801043c:	008b      	lsls	r3, r1, #2
 801043e:	461a      	mov	r2, r3
 8010440:	4623      	mov	r3, r4
 8010442:	4628      	mov	r0, r5
 8010444:	4631      	mov	r1, r6
 8010446:	f7f0 fc37 	bl	8000cb8 <__aeabi_uldivmod>
 801044a:	4603      	mov	r3, r0
 801044c:	460c      	mov	r4, r1
 801044e:	461a      	mov	r2, r3
 8010450:	4b9a      	ldr	r3, [pc, #616]	; (80106bc <UART_SetConfig+0x6f4>)
 8010452:	fba3 1302 	umull	r1, r3, r3, r2
 8010456:	095b      	lsrs	r3, r3, #5
 8010458:	2164      	movs	r1, #100	; 0x64
 801045a:	fb01 f303 	mul.w	r3, r1, r3
 801045e:	1ad3      	subs	r3, r2, r3
 8010460:	011b      	lsls	r3, r3, #4
 8010462:	3332      	adds	r3, #50	; 0x32
 8010464:	4a95      	ldr	r2, [pc, #596]	; (80106bc <UART_SetConfig+0x6f4>)
 8010466:	fba2 2303 	umull	r2, r3, r2, r3
 801046a:	095b      	lsrs	r3, r3, #5
 801046c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010470:	4498      	add	r8, r3
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	469b      	mov	fp, r3
 8010476:	f04f 0c00 	mov.w	ip, #0
 801047a:	46d9      	mov	r9, fp
 801047c:	46e2      	mov	sl, ip
 801047e:	eb19 0309 	adds.w	r3, r9, r9
 8010482:	eb4a 040a 	adc.w	r4, sl, sl
 8010486:	4699      	mov	r9, r3
 8010488:	46a2      	mov	sl, r4
 801048a:	eb19 090b 	adds.w	r9, r9, fp
 801048e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010492:	f04f 0100 	mov.w	r1, #0
 8010496:	f04f 0200 	mov.w	r2, #0
 801049a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801049e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80104a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104a6:	4689      	mov	r9, r1
 80104a8:	4692      	mov	sl, r2
 80104aa:	eb1b 0509 	adds.w	r5, fp, r9
 80104ae:	eb4c 060a 	adc.w	r6, ip, sl
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	4619      	mov	r1, r3
 80104b8:	f04f 0200 	mov.w	r2, #0
 80104bc:	f04f 0300 	mov.w	r3, #0
 80104c0:	f04f 0400 	mov.w	r4, #0
 80104c4:	0094      	lsls	r4, r2, #2
 80104c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104ca:	008b      	lsls	r3, r1, #2
 80104cc:	461a      	mov	r2, r3
 80104ce:	4623      	mov	r3, r4
 80104d0:	4628      	mov	r0, r5
 80104d2:	4631      	mov	r1, r6
 80104d4:	f7f0 fbf0 	bl	8000cb8 <__aeabi_uldivmod>
 80104d8:	4603      	mov	r3, r0
 80104da:	460c      	mov	r4, r1
 80104dc:	461a      	mov	r2, r3
 80104de:	4b77      	ldr	r3, [pc, #476]	; (80106bc <UART_SetConfig+0x6f4>)
 80104e0:	fba3 1302 	umull	r1, r3, r3, r2
 80104e4:	095b      	lsrs	r3, r3, #5
 80104e6:	2164      	movs	r1, #100	; 0x64
 80104e8:	fb01 f303 	mul.w	r3, r1, r3
 80104ec:	1ad3      	subs	r3, r2, r3
 80104ee:	011b      	lsls	r3, r3, #4
 80104f0:	3332      	adds	r3, #50	; 0x32
 80104f2:	4a72      	ldr	r2, [pc, #456]	; (80106bc <UART_SetConfig+0x6f4>)
 80104f4:	fba2 2303 	umull	r2, r3, r2, r3
 80104f8:	095b      	lsrs	r3, r3, #5
 80104fa:	f003 020f 	and.w	r2, r3, #15
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	4442      	add	r2, r8
 8010504:	609a      	str	r2, [r3, #8]
 8010506:	e0d0      	b.n	80106aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010508:	f7fc f95c 	bl	800c7c4 <HAL_RCC_GetPCLK1Freq>
 801050c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	469a      	mov	sl, r3
 8010512:	f04f 0b00 	mov.w	fp, #0
 8010516:	46d0      	mov	r8, sl
 8010518:	46d9      	mov	r9, fp
 801051a:	eb18 0308 	adds.w	r3, r8, r8
 801051e:	eb49 0409 	adc.w	r4, r9, r9
 8010522:	4698      	mov	r8, r3
 8010524:	46a1      	mov	r9, r4
 8010526:	eb18 080a 	adds.w	r8, r8, sl
 801052a:	eb49 090b 	adc.w	r9, r9, fp
 801052e:	f04f 0100 	mov.w	r1, #0
 8010532:	f04f 0200 	mov.w	r2, #0
 8010536:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801053a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801053e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010542:	4688      	mov	r8, r1
 8010544:	4691      	mov	r9, r2
 8010546:	eb1a 0508 	adds.w	r5, sl, r8
 801054a:	eb4b 0609 	adc.w	r6, fp, r9
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	4619      	mov	r1, r3
 8010554:	f04f 0200 	mov.w	r2, #0
 8010558:	f04f 0300 	mov.w	r3, #0
 801055c:	f04f 0400 	mov.w	r4, #0
 8010560:	0094      	lsls	r4, r2, #2
 8010562:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010566:	008b      	lsls	r3, r1, #2
 8010568:	461a      	mov	r2, r3
 801056a:	4623      	mov	r3, r4
 801056c:	4628      	mov	r0, r5
 801056e:	4631      	mov	r1, r6
 8010570:	f7f0 fba2 	bl	8000cb8 <__aeabi_uldivmod>
 8010574:	4603      	mov	r3, r0
 8010576:	460c      	mov	r4, r1
 8010578:	461a      	mov	r2, r3
 801057a:	4b50      	ldr	r3, [pc, #320]	; (80106bc <UART_SetConfig+0x6f4>)
 801057c:	fba3 2302 	umull	r2, r3, r3, r2
 8010580:	095b      	lsrs	r3, r3, #5
 8010582:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	469b      	mov	fp, r3
 801058a:	f04f 0c00 	mov.w	ip, #0
 801058e:	46d9      	mov	r9, fp
 8010590:	46e2      	mov	sl, ip
 8010592:	eb19 0309 	adds.w	r3, r9, r9
 8010596:	eb4a 040a 	adc.w	r4, sl, sl
 801059a:	4699      	mov	r9, r3
 801059c:	46a2      	mov	sl, r4
 801059e:	eb19 090b 	adds.w	r9, r9, fp
 80105a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80105a6:	f04f 0100 	mov.w	r1, #0
 80105aa:	f04f 0200 	mov.w	r2, #0
 80105ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80105b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80105b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80105ba:	4689      	mov	r9, r1
 80105bc:	4692      	mov	sl, r2
 80105be:	eb1b 0509 	adds.w	r5, fp, r9
 80105c2:	eb4c 060a 	adc.w	r6, ip, sl
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	4619      	mov	r1, r3
 80105cc:	f04f 0200 	mov.w	r2, #0
 80105d0:	f04f 0300 	mov.w	r3, #0
 80105d4:	f04f 0400 	mov.w	r4, #0
 80105d8:	0094      	lsls	r4, r2, #2
 80105da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80105de:	008b      	lsls	r3, r1, #2
 80105e0:	461a      	mov	r2, r3
 80105e2:	4623      	mov	r3, r4
 80105e4:	4628      	mov	r0, r5
 80105e6:	4631      	mov	r1, r6
 80105e8:	f7f0 fb66 	bl	8000cb8 <__aeabi_uldivmod>
 80105ec:	4603      	mov	r3, r0
 80105ee:	460c      	mov	r4, r1
 80105f0:	461a      	mov	r2, r3
 80105f2:	4b32      	ldr	r3, [pc, #200]	; (80106bc <UART_SetConfig+0x6f4>)
 80105f4:	fba3 1302 	umull	r1, r3, r3, r2
 80105f8:	095b      	lsrs	r3, r3, #5
 80105fa:	2164      	movs	r1, #100	; 0x64
 80105fc:	fb01 f303 	mul.w	r3, r1, r3
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	011b      	lsls	r3, r3, #4
 8010604:	3332      	adds	r3, #50	; 0x32
 8010606:	4a2d      	ldr	r2, [pc, #180]	; (80106bc <UART_SetConfig+0x6f4>)
 8010608:	fba2 2303 	umull	r2, r3, r2, r3
 801060c:	095b      	lsrs	r3, r3, #5
 801060e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010612:	4498      	add	r8, r3
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	469b      	mov	fp, r3
 8010618:	f04f 0c00 	mov.w	ip, #0
 801061c:	46d9      	mov	r9, fp
 801061e:	46e2      	mov	sl, ip
 8010620:	eb19 0309 	adds.w	r3, r9, r9
 8010624:	eb4a 040a 	adc.w	r4, sl, sl
 8010628:	4699      	mov	r9, r3
 801062a:	46a2      	mov	sl, r4
 801062c:	eb19 090b 	adds.w	r9, r9, fp
 8010630:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010634:	f04f 0100 	mov.w	r1, #0
 8010638:	f04f 0200 	mov.w	r2, #0
 801063c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010640:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010644:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010648:	4689      	mov	r9, r1
 801064a:	4692      	mov	sl, r2
 801064c:	eb1b 0509 	adds.w	r5, fp, r9
 8010650:	eb4c 060a 	adc.w	r6, ip, sl
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	685b      	ldr	r3, [r3, #4]
 8010658:	4619      	mov	r1, r3
 801065a:	f04f 0200 	mov.w	r2, #0
 801065e:	f04f 0300 	mov.w	r3, #0
 8010662:	f04f 0400 	mov.w	r4, #0
 8010666:	0094      	lsls	r4, r2, #2
 8010668:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801066c:	008b      	lsls	r3, r1, #2
 801066e:	461a      	mov	r2, r3
 8010670:	4623      	mov	r3, r4
 8010672:	4628      	mov	r0, r5
 8010674:	4631      	mov	r1, r6
 8010676:	f7f0 fb1f 	bl	8000cb8 <__aeabi_uldivmod>
 801067a:	4603      	mov	r3, r0
 801067c:	460c      	mov	r4, r1
 801067e:	461a      	mov	r2, r3
 8010680:	4b0e      	ldr	r3, [pc, #56]	; (80106bc <UART_SetConfig+0x6f4>)
 8010682:	fba3 1302 	umull	r1, r3, r3, r2
 8010686:	095b      	lsrs	r3, r3, #5
 8010688:	2164      	movs	r1, #100	; 0x64
 801068a:	fb01 f303 	mul.w	r3, r1, r3
 801068e:	1ad3      	subs	r3, r2, r3
 8010690:	011b      	lsls	r3, r3, #4
 8010692:	3332      	adds	r3, #50	; 0x32
 8010694:	4a09      	ldr	r2, [pc, #36]	; (80106bc <UART_SetConfig+0x6f4>)
 8010696:	fba2 2303 	umull	r2, r3, r2, r3
 801069a:	095b      	lsrs	r3, r3, #5
 801069c:	f003 020f 	and.w	r2, r3, #15
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4442      	add	r2, r8
 80106a6:	609a      	str	r2, [r3, #8]
}
 80106a8:	e7ff      	b.n	80106aa <UART_SetConfig+0x6e2>
 80106aa:	bf00      	nop
 80106ac:	3714      	adds	r7, #20
 80106ae:	46bd      	mov	sp, r7
 80106b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106b4:	40011000 	.word	0x40011000
 80106b8:	40011400 	.word	0x40011400
 80106bc:	51eb851f 	.word	0x51eb851f

080106c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80106c0:	b084      	sub	sp, #16
 80106c2:	b480      	push	{r7}
 80106c4:	b085      	sub	sp, #20
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
 80106ca:	f107 001c 	add.w	r0, r7, #28
 80106ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80106d2:	2300      	movs	r3, #0
 80106d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80106d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80106d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80106da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80106dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80106de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80106e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80106e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80106e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80106e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80106e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80106ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80106ec:	68fa      	ldr	r2, [r7, #12]
 80106ee:	4313      	orrs	r3, r2
 80106f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80106fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	431a      	orrs	r2, r3
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010706:	2300      	movs	r3, #0
}
 8010708:	4618      	mov	r0, r3
 801070a:	3714      	adds	r7, #20
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	b004      	add	sp, #16
 8010714:	4770      	bx	lr

08010716 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010716:	b480      	push	{r7}
 8010718:	b083      	sub	sp, #12
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010724:	4618      	mov	r0, r3
 8010726:	370c      	adds	r7, #12
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010744:	2300      	movs	r3, #0
}
 8010746:	4618      	mov	r0, r3
 8010748:	370c      	adds	r7, #12
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr

08010752 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010752:	b580      	push	{r7, lr}
 8010754:	b082      	sub	sp, #8
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2203      	movs	r2, #3
 801075e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010760:	2002      	movs	r0, #2
 8010762:	f7f9 fbdd 	bl	8009f20 <HAL_Delay>
  
  return HAL_OK;
 8010766:	2300      	movs	r3, #0
}
 8010768:	4618      	mov	r0, r3
 801076a:	3708      	adds	r7, #8
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f003 0303 	and.w	r3, r3, #3
}
 8010780:	4618      	mov	r0, r3
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801078c:	b480      	push	{r7}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80107aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80107b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80107b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	4313      	orrs	r3, r2
 80107bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	68db      	ldr	r3, [r3, #12]
 80107c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80107c6:	f023 030f 	bic.w	r3, r3, #15
 80107ca:	68fa      	ldr	r2, [r7, #12]
 80107cc:	431a      	orrs	r2, r3
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80107d2:	2300      	movs	r3, #0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b083      	sub	sp, #12
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	691b      	ldr	r3, [r3, #16]
 80107ec:	b2db      	uxtb	r3, r3
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	370c      	adds	r7, #12
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr

080107fa <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80107fa:	b480      	push	{r7}
 80107fc:	b085      	sub	sp, #20
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
 8010802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	3314      	adds	r3, #20
 8010808:	461a      	mov	r2, r3
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	4413      	add	r3, r2
 801080e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
}  
 8010814:	4618      	mov	r0, r3
 8010816:	3714      	adds	r7, #20
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010820:	b480      	push	{r7}
 8010822:	b085      	sub	sp, #20
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801082a:	2300      	movs	r3, #0
 801082c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	685a      	ldr	r2, [r3, #4]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010846:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801084c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010852:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	4313      	orrs	r3, r2
 8010858:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801085e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	431a      	orrs	r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801086a:	2300      	movs	r3, #0

}
 801086c:	4618      	mov	r0, r3
 801086e:	3714      	adds	r7, #20
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b088      	sub	sp, #32
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010886:	2310      	movs	r3, #16
 8010888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801088a:	2340      	movs	r3, #64	; 0x40
 801088c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801088e:	2300      	movs	r3, #0
 8010890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010896:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010898:	f107 0308 	add.w	r3, r7, #8
 801089c:	4619      	mov	r1, r3
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f7ff ff74 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80108a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80108a8:	2110      	movs	r1, #16
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f000 fa40 	bl	8010d30 <SDMMC_GetCmdResp1>
 80108b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108b2:	69fb      	ldr	r3, [r7, #28]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3720      	adds	r7, #32
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b088      	sub	sp, #32
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80108ca:	2311      	movs	r3, #17
 80108cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108ce:	2340      	movs	r3, #64	; 0x40
 80108d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108d2:	2300      	movs	r3, #0
 80108d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108dc:	f107 0308 	add.w	r3, r7, #8
 80108e0:	4619      	mov	r1, r3
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f7ff ff52 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80108e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80108ec:	2111      	movs	r1, #17
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f000 fa1e 	bl	8010d30 <SDMMC_GetCmdResp1>
 80108f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108f6:	69fb      	ldr	r3, [r7, #28]
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3720      	adds	r7, #32
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b088      	sub	sp, #32
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801090e:	2312      	movs	r3, #18
 8010910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010912:	2340      	movs	r3, #64	; 0x40
 8010914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010916:	2300      	movs	r3, #0
 8010918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801091e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010920:	f107 0308 	add.w	r3, r7, #8
 8010924:	4619      	mov	r1, r3
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f7ff ff30 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801092c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010930:	2112      	movs	r1, #18
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 f9fc 	bl	8010d30 <SDMMC_GetCmdResp1>
 8010938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801093a:	69fb      	ldr	r3, [r7, #28]
}
 801093c:	4618      	mov	r0, r3
 801093e:	3720      	adds	r7, #32
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b088      	sub	sp, #32
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010952:	2318      	movs	r3, #24
 8010954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010956:	2340      	movs	r3, #64	; 0x40
 8010958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801095a:	2300      	movs	r3, #0
 801095c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010962:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010964:	f107 0308 	add.w	r3, r7, #8
 8010968:	4619      	mov	r1, r3
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7ff ff0e 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010970:	f241 3288 	movw	r2, #5000	; 0x1388
 8010974:	2118      	movs	r1, #24
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f000 f9da 	bl	8010d30 <SDMMC_GetCmdResp1>
 801097c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801097e:	69fb      	ldr	r3, [r7, #28]
}
 8010980:	4618      	mov	r0, r3
 8010982:	3720      	adds	r7, #32
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b088      	sub	sp, #32
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010996:	2319      	movs	r3, #25
 8010998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801099a:	2340      	movs	r3, #64	; 0x40
 801099c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801099e:	2300      	movs	r3, #0
 80109a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109a8:	f107 0308 	add.w	r3, r7, #8
 80109ac:	4619      	mov	r1, r3
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f7ff feec 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80109b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80109b8:	2119      	movs	r1, #25
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 f9b8 	bl	8010d30 <SDMMC_GetCmdResp1>
 80109c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109c2:	69fb      	ldr	r3, [r7, #28]
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3720      	adds	r7, #32
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b088      	sub	sp, #32
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80109d4:	2300      	movs	r3, #0
 80109d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80109d8:	230c      	movs	r3, #12
 80109da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109dc:	2340      	movs	r3, #64	; 0x40
 80109de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109e0:	2300      	movs	r3, #0
 80109e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109ea:	f107 0308 	add.w	r3, r7, #8
 80109ee:	4619      	mov	r1, r3
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f7ff fecb 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80109f6:	4a05      	ldr	r2, [pc, #20]	; (8010a0c <SDMMC_CmdStopTransfer+0x40>)
 80109f8:	210c      	movs	r1, #12
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f000 f998 	bl	8010d30 <SDMMC_GetCmdResp1>
 8010a00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a02:	69fb      	ldr	r3, [r7, #28]
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3720      	adds	r7, #32
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	05f5e100 	.word	0x05f5e100

08010a10 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b08a      	sub	sp, #40	; 0x28
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010a20:	2307      	movs	r3, #7
 8010a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a24:	2340      	movs	r3, #64	; 0x40
 8010a26:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a30:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a32:	f107 0310 	add.w	r3, r7, #16
 8010a36:	4619      	mov	r1, r3
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f7ff fea7 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a42:	2107      	movs	r1, #7
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f000 f973 	bl	8010d30 <SDMMC_GetCmdResp1>
 8010a4a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3728      	adds	r7, #40	; 0x28
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}

08010a56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010a56:	b580      	push	{r7, lr}
 8010a58:	b088      	sub	sp, #32
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010a62:	2300      	movs	r3, #0
 8010a64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010a66:	2300      	movs	r3, #0
 8010a68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a74:	f107 0308 	add.w	r3, r7, #8
 8010a78:	4619      	mov	r1, r3
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f7ff fe86 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 f92d 	bl	8010ce0 <SDMMC_GetCmdError>
 8010a86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a88:	69fb      	ldr	r3, [r7, #28]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3720      	adds	r7, #32
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b088      	sub	sp, #32
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010a9a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010a9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010aa0:	2308      	movs	r3, #8
 8010aa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010aa4:	2340      	movs	r3, #64	; 0x40
 8010aa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ab0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ab2:	f107 0308 	add.w	r3, r7, #8
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff fe67 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 fb16 	bl	80110f0 <SDMMC_GetCmdResp7>
 8010ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ac6:	69fb      	ldr	r3, [r7, #28]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3720      	adds	r7, #32
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b088      	sub	sp, #32
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010ade:	2337      	movs	r3, #55	; 0x37
 8010ae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ae2:	2340      	movs	r3, #64	; 0x40
 8010ae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010af0:	f107 0308 	add.w	r3, r7, #8
 8010af4:	4619      	mov	r1, r3
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f7ff fe48 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b00:	2137      	movs	r1, #55	; 0x37
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f000 f914 	bl	8010d30 <SDMMC_GetCmdResp1>
 8010b08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b0a:	69fb      	ldr	r3, [r7, #28]
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3720      	adds	r7, #32
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b088      	sub	sp, #32
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010b2a:	2329      	movs	r3, #41	; 0x29
 8010b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b2e:	2340      	movs	r3, #64	; 0x40
 8010b30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b32:	2300      	movs	r3, #0
 8010b34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b3c:	f107 0308 	add.w	r3, r7, #8
 8010b40:	4619      	mov	r1, r3
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f7ff fe22 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f000 fa23 	bl	8010f94 <SDMMC_GetCmdResp3>
 8010b4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b50:	69fb      	ldr	r3, [r7, #28]
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3720      	adds	r7, #32
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}

08010b5a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b088      	sub	sp, #32
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
 8010b62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010b68:	2306      	movs	r3, #6
 8010b6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b6c:	2340      	movs	r3, #64	; 0x40
 8010b6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b70:	2300      	movs	r3, #0
 8010b72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b7a:	f107 0308 	add.w	r3, r7, #8
 8010b7e:	4619      	mov	r1, r3
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7ff fe03 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b8a:	2106      	movs	r1, #6
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f000 f8cf 	bl	8010d30 <SDMMC_GetCmdResp1>
 8010b92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b94:	69fb      	ldr	r3, [r7, #28]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3720      	adds	r7, #32
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b088      	sub	sp, #32
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010baa:	2333      	movs	r3, #51	; 0x33
 8010bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010bae:	2340      	movs	r3, #64	; 0x40
 8010bb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bbc:	f107 0308 	add.w	r3, r7, #8
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f7ff fde2 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bcc:	2133      	movs	r1, #51	; 0x33
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 f8ae 	bl	8010d30 <SDMMC_GetCmdResp1>
 8010bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bd6:	69fb      	ldr	r3, [r7, #28]
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3720      	adds	r7, #32
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b088      	sub	sp, #32
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010be8:	2300      	movs	r3, #0
 8010bea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010bec:	2302      	movs	r3, #2
 8010bee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010bf0:	23c0      	movs	r3, #192	; 0xc0
 8010bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bfe:	f107 0308 	add.w	r3, r7, #8
 8010c02:	4619      	mov	r1, r3
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f7ff fdc1 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f000 f97c 	bl	8010f08 <SDMMC_GetCmdResp2>
 8010c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c12:	69fb      	ldr	r3, [r7, #28]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3720      	adds	r7, #32
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b088      	sub	sp, #32
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010c2a:	2309      	movs	r3, #9
 8010c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010c2e:	23c0      	movs	r3, #192	; 0xc0
 8010c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c32:	2300      	movs	r3, #0
 8010c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c3c:	f107 0308 	add.w	r3, r7, #8
 8010c40:	4619      	mov	r1, r3
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7ff fda2 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 f95d 	bl	8010f08 <SDMMC_GetCmdResp2>
 8010c4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c50:	69fb      	ldr	r3, [r7, #28]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3720      	adds	r7, #32
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b088      	sub	sp, #32
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
 8010c62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c64:	2300      	movs	r3, #0
 8010c66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010c68:	2303      	movs	r3, #3
 8010c6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c6c:	2340      	movs	r3, #64	; 0x40
 8010c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c70:	2300      	movs	r3, #0
 8010c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c7a:	f107 0308 	add.w	r3, r7, #8
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff fd83 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010c86:	683a      	ldr	r2, [r7, #0]
 8010c88:	2103      	movs	r1, #3
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f000 f9bc 	bl	8011008 <SDMMC_GetCmdResp6>
 8010c90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c92:	69fb      	ldr	r3, [r7, #28]
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3720      	adds	r7, #32
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b088      	sub	sp, #32
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010caa:	230d      	movs	r3, #13
 8010cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010cae:	2340      	movs	r3, #64	; 0x40
 8010cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010cbc:	f107 0308 	add.w	r3, r7, #8
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f7ff fd62 	bl	801078c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ccc:	210d      	movs	r1, #13
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f000 f82e 	bl	8010d30 <SDMMC_GetCmdResp1>
 8010cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cd6:	69fb      	ldr	r3, [r7, #28]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3720      	adds	r7, #32
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010ce0:	b490      	push	{r4, r7}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ce8:	4b0f      	ldr	r3, [pc, #60]	; (8010d28 <SDMMC_GetCmdError+0x48>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a0f      	ldr	r2, [pc, #60]	; (8010d2c <SDMMC_GetCmdError+0x4c>)
 8010cee:	fba2 2303 	umull	r2, r3, r2, r3
 8010cf2:	0a5b      	lsrs	r3, r3, #9
 8010cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cf8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010cfc:	4623      	mov	r3, r4
 8010cfe:	1e5c      	subs	r4, r3, #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d102      	bne.n	8010d0a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d08:	e009      	b.n	8010d1e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d0f2      	beq.n	8010cfc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	22c5      	movs	r2, #197	; 0xc5
 8010d1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010d1c:	2300      	movs	r3, #0
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bc90      	pop	{r4, r7}
 8010d26:	4770      	bx	lr
 8010d28:	20000000 	.word	0x20000000
 8010d2c:	10624dd3 	.word	0x10624dd3

08010d30 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010d30:	b590      	push	{r4, r7, lr}
 8010d32:	b087      	sub	sp, #28
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	60f8      	str	r0, [r7, #12]
 8010d38:	460b      	mov	r3, r1
 8010d3a:	607a      	str	r2, [r7, #4]
 8010d3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010d3e:	4b6f      	ldr	r3, [pc, #444]	; (8010efc <SDMMC_GetCmdResp1+0x1cc>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	4a6f      	ldr	r2, [pc, #444]	; (8010f00 <SDMMC_GetCmdResp1+0x1d0>)
 8010d44:	fba2 2303 	umull	r2, r3, r2, r3
 8010d48:	0a5b      	lsrs	r3, r3, #9
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d50:	4623      	mov	r3, r4
 8010d52:	1e5c      	subs	r4, r3, #1
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d102      	bne.n	8010d5e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d5c:	e0c9      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d62:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d0f0      	beq.n	8010d50 <SDMMC_GetCmdResp1+0x20>
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d1eb      	bne.n	8010d50 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d7c:	f003 0304 	and.w	r3, r3, #4
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d004      	beq.n	8010d8e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	2204      	movs	r2, #4
 8010d88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d8a:	2304      	movs	r3, #4
 8010d8c:	e0b1      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d92:	f003 0301 	and.w	r3, r3, #1
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d004      	beq.n	8010da4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010da0:	2301      	movs	r3, #1
 8010da2:	e0a6      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	22c5      	movs	r2, #197	; 0xc5
 8010da8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010daa:	68f8      	ldr	r0, [r7, #12]
 8010dac:	f7ff fd18 	bl	80107e0 <SDIO_GetCommandResponse>
 8010db0:	4603      	mov	r3, r0
 8010db2:	461a      	mov	r2, r3
 8010db4:	7afb      	ldrb	r3, [r7, #11]
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d001      	beq.n	8010dbe <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e099      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010dbe:	2100      	movs	r1, #0
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f7ff fd1a 	bl	80107fa <SDIO_GetResponse>
 8010dc6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010dc8:	693a      	ldr	r2, [r7, #16]
 8010dca:	4b4e      	ldr	r3, [pc, #312]	; (8010f04 <SDMMC_GetCmdResp1+0x1d4>)
 8010dcc:	4013      	ands	r3, r2
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d101      	bne.n	8010dd6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	e08d      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	da02      	bge.n	8010de2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010de0:	e087      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d001      	beq.n	8010df0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010dec:	2340      	movs	r3, #64	; 0x40
 8010dee:	e080      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d001      	beq.n	8010dfe <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010dfa:	2380      	movs	r3, #128	; 0x80
 8010dfc:	e079      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e0c:	e071      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d002      	beq.n	8010e1e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e1c:	e069      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d002      	beq.n	8010e2e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e2c:	e061      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d002      	beq.n	8010e3e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e3c:	e059      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d002      	beq.n	8010e4e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e4c:	e051      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d002      	beq.n	8010e5e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e5c:	e049      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d002      	beq.n	8010e6e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010e6c:	e041      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d002      	beq.n	8010e7e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e7c:	e039      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d002      	beq.n	8010e8e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e8c:	e031      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d002      	beq.n	8010e9e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010e9c:	e029      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d002      	beq.n	8010eae <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010ea8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010eac:	e021      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d002      	beq.n	8010ebe <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010eb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010ebc:	e019      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d002      	beq.n	8010ece <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010ec8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010ecc:	e011      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d002      	beq.n	8010ede <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010ed8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010edc:	e009      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	f003 0308 	and.w	r3, r3, #8
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d002      	beq.n	8010eee <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010ee8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010eec:	e001      	b.n	8010ef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	371c      	adds	r7, #28
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd90      	pop	{r4, r7, pc}
 8010efa:	bf00      	nop
 8010efc:	20000000 	.word	0x20000000
 8010f00:	10624dd3 	.word	0x10624dd3
 8010f04:	fdffe008 	.word	0xfdffe008

08010f08 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010f08:	b490      	push	{r4, r7}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f10:	4b1e      	ldr	r3, [pc, #120]	; (8010f8c <SDMMC_GetCmdResp2+0x84>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	4a1e      	ldr	r2, [pc, #120]	; (8010f90 <SDMMC_GetCmdResp2+0x88>)
 8010f16:	fba2 2303 	umull	r2, r3, r2, r3
 8010f1a:	0a5b      	lsrs	r3, r3, #9
 8010f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f24:	4623      	mov	r3, r4
 8010f26:	1e5c      	subs	r4, r3, #1
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d102      	bne.n	8010f32 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f30:	e026      	b.n	8010f80 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f36:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d0f0      	beq.n	8010f24 <SDMMC_GetCmdResp2+0x1c>
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d1eb      	bne.n	8010f24 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f50:	f003 0304 	and.w	r3, r3, #4
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d004      	beq.n	8010f62 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2204      	movs	r2, #4
 8010f5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f5e:	2304      	movs	r3, #4
 8010f60:	e00e      	b.n	8010f80 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f66:	f003 0301 	and.w	r3, r3, #1
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d004      	beq.n	8010f78 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2201      	movs	r2, #1
 8010f72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f74:	2301      	movs	r3, #1
 8010f76:	e003      	b.n	8010f80 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	22c5      	movs	r2, #197	; 0xc5
 8010f7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f7e:	2300      	movs	r3, #0
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3710      	adds	r7, #16
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bc90      	pop	{r4, r7}
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop
 8010f8c:	20000000 	.word	0x20000000
 8010f90:	10624dd3 	.word	0x10624dd3

08010f94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010f94:	b490      	push	{r4, r7}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f9c:	4b18      	ldr	r3, [pc, #96]	; (8011000 <SDMMC_GetCmdResp3+0x6c>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	4a18      	ldr	r2, [pc, #96]	; (8011004 <SDMMC_GetCmdResp3+0x70>)
 8010fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8010fa6:	0a5b      	lsrs	r3, r3, #9
 8010fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010fb0:	4623      	mov	r3, r4
 8010fb2:	1e5c      	subs	r4, r3, #1
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d102      	bne.n	8010fbe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010fbc:	e01b      	b.n	8010ff6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fc2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d0f0      	beq.n	8010fb0 <SDMMC_GetCmdResp3+0x1c>
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d1eb      	bne.n	8010fb0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fdc:	f003 0304 	and.w	r3, r3, #4
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d004      	beq.n	8010fee <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2204      	movs	r2, #4
 8010fe8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010fea:	2304      	movs	r3, #4
 8010fec:	e003      	b.n	8010ff6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	22c5      	movs	r2, #197	; 0xc5
 8010ff2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010ff4:	2300      	movs	r3, #0
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3710      	adds	r7, #16
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bc90      	pop	{r4, r7}
 8010ffe:	4770      	bx	lr
 8011000:	20000000 	.word	0x20000000
 8011004:	10624dd3 	.word	0x10624dd3

08011008 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011008:	b590      	push	{r4, r7, lr}
 801100a:	b087      	sub	sp, #28
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	460b      	mov	r3, r1
 8011012:	607a      	str	r2, [r7, #4]
 8011014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011016:	4b34      	ldr	r3, [pc, #208]	; (80110e8 <SDMMC_GetCmdResp6+0xe0>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4a34      	ldr	r2, [pc, #208]	; (80110ec <SDMMC_GetCmdResp6+0xe4>)
 801101c:	fba2 2303 	umull	r2, r3, r2, r3
 8011020:	0a5b      	lsrs	r3, r3, #9
 8011022:	f241 3288 	movw	r2, #5000	; 0x1388
 8011026:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801102a:	4623      	mov	r3, r4
 801102c:	1e5c      	subs	r4, r3, #1
 801102e:	2b00      	cmp	r3, #0
 8011030:	d102      	bne.n	8011038 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011032:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011036:	e052      	b.n	80110de <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801103c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011044:	2b00      	cmp	r3, #0
 8011046:	d0f0      	beq.n	801102a <SDMMC_GetCmdResp6+0x22>
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801104e:	2b00      	cmp	r3, #0
 8011050:	d1eb      	bne.n	801102a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011056:	f003 0304 	and.w	r3, r3, #4
 801105a:	2b00      	cmp	r3, #0
 801105c:	d004      	beq.n	8011068 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2204      	movs	r2, #4
 8011062:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011064:	2304      	movs	r3, #4
 8011066:	e03a      	b.n	80110de <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801106c:	f003 0301 	and.w	r3, r3, #1
 8011070:	2b00      	cmp	r3, #0
 8011072:	d004      	beq.n	801107e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2201      	movs	r2, #1
 8011078:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801107a:	2301      	movs	r3, #1
 801107c:	e02f      	b.n	80110de <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801107e:	68f8      	ldr	r0, [r7, #12]
 8011080:	f7ff fbae 	bl	80107e0 <SDIO_GetCommandResponse>
 8011084:	4603      	mov	r3, r0
 8011086:	461a      	mov	r2, r3
 8011088:	7afb      	ldrb	r3, [r7, #11]
 801108a:	4293      	cmp	r3, r2
 801108c:	d001      	beq.n	8011092 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801108e:	2301      	movs	r3, #1
 8011090:	e025      	b.n	80110de <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	22c5      	movs	r2, #197	; 0xc5
 8011096:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8011098:	2100      	movs	r1, #0
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	f7ff fbad 	bl	80107fa <SDIO_GetResponse>
 80110a0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d106      	bne.n	80110ba <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	0c1b      	lsrs	r3, r3, #16
 80110b0:	b29a      	uxth	r2, r3
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80110b6:	2300      	movs	r3, #0
 80110b8:	e011      	b.n	80110de <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d002      	beq.n	80110ca <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80110c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80110c8:	e009      	b.n	80110de <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d002      	beq.n	80110da <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80110d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110d8:	e001      	b.n	80110de <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80110da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80110de:	4618      	mov	r0, r3
 80110e0:	371c      	adds	r7, #28
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd90      	pop	{r4, r7, pc}
 80110e6:	bf00      	nop
 80110e8:	20000000 	.word	0x20000000
 80110ec:	10624dd3 	.word	0x10624dd3

080110f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80110f0:	b490      	push	{r4, r7}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80110f8:	4b21      	ldr	r3, [pc, #132]	; (8011180 <SDMMC_GetCmdResp7+0x90>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	4a21      	ldr	r2, [pc, #132]	; (8011184 <SDMMC_GetCmdResp7+0x94>)
 80110fe:	fba2 2303 	umull	r2, r3, r2, r3
 8011102:	0a5b      	lsrs	r3, r3, #9
 8011104:	f241 3288 	movw	r2, #5000	; 0x1388
 8011108:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801110c:	4623      	mov	r3, r4
 801110e:	1e5c      	subs	r4, r3, #1
 8011110:	2b00      	cmp	r3, #0
 8011112:	d102      	bne.n	801111a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011114:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011118:	e02c      	b.n	8011174 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801111e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011126:	2b00      	cmp	r3, #0
 8011128:	d0f0      	beq.n	801110c <SDMMC_GetCmdResp7+0x1c>
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011130:	2b00      	cmp	r3, #0
 8011132:	d1eb      	bne.n	801110c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011138:	f003 0304 	and.w	r3, r3, #4
 801113c:	2b00      	cmp	r3, #0
 801113e:	d004      	beq.n	801114a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2204      	movs	r2, #4
 8011144:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011146:	2304      	movs	r3, #4
 8011148:	e014      	b.n	8011174 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801114e:	f003 0301 	and.w	r3, r3, #1
 8011152:	2b00      	cmp	r3, #0
 8011154:	d004      	beq.n	8011160 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2201      	movs	r2, #1
 801115a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801115c:	2301      	movs	r3, #1
 801115e:	e009      	b.n	8011174 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011168:	2b00      	cmp	r3, #0
 801116a:	d002      	beq.n	8011172 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2240      	movs	r2, #64	; 0x40
 8011170:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011172:	2300      	movs	r3, #0
  
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bc90      	pop	{r4, r7}
 801117c:	4770      	bx	lr
 801117e:	bf00      	nop
 8011180:	20000000 	.word	0x20000000
 8011184:	10624dd3 	.word	0x10624dd3

08011188 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801118c:	4904      	ldr	r1, [pc, #16]	; (80111a0 <MX_FATFS_Init+0x18>)
 801118e:	4805      	ldr	r0, [pc, #20]	; (80111a4 <MX_FATFS_Init+0x1c>)
 8011190:	f003 fb9c 	bl	80148cc <FATFS_LinkDriver>
 8011194:	4603      	mov	r3, r0
 8011196:	461a      	mov	r2, r3
 8011198:	4b03      	ldr	r3, [pc, #12]	; (80111a8 <MX_FATFS_Init+0x20>)
 801119a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801119c:	bf00      	nop
 801119e:	bd80      	pop	{r7, pc}
 80111a0:	20044dc8 	.word	0x20044dc8
 80111a4:	0801a230 	.word	0x0801a230
 80111a8:	20044dc4 	.word	0x20044dc4

080111ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80111b2:	2300      	movs	r3, #0
 80111b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80111b6:	f000 f896 	bl	80112e6 <BSP_SD_IsDetected>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d001      	beq.n	80111c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80111c0:	2301      	movs	r3, #1
 80111c2:	e012      	b.n	80111ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80111c4:	480b      	ldr	r0, [pc, #44]	; (80111f4 <BSP_SD_Init+0x48>)
 80111c6:	f7fb ffa5 	bl	800d114 <HAL_SD_Init>
 80111ca:	4603      	mov	r3, r0
 80111cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80111ce:	79fb      	ldrb	r3, [r7, #7]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d109      	bne.n	80111e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80111d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80111d8:	4806      	ldr	r0, [pc, #24]	; (80111f4 <BSP_SD_Init+0x48>)
 80111da:	f7fc fd4f 	bl	800dc7c <HAL_SD_ConfigWideBusOperation>
 80111de:	4603      	mov	r3, r0
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d001      	beq.n	80111e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80111e4:	2301      	movs	r3, #1
 80111e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80111e8:	79fb      	ldrb	r3, [r7, #7]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	20044bc4 	.word	0x20044bc4

080111f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b086      	sub	sp, #24
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	60f8      	str	r0, [r7, #12]
 8011200:	60b9      	str	r1, [r7, #8]
 8011202:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011204:	2300      	movs	r3, #0
 8011206:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	68ba      	ldr	r2, [r7, #8]
 801120c:	68f9      	ldr	r1, [r7, #12]
 801120e:	4806      	ldr	r0, [pc, #24]	; (8011228 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011210:	f7fc f810 	bl	800d234 <HAL_SD_ReadBlocks_DMA>
 8011214:	4603      	mov	r3, r0
 8011216:	2b00      	cmp	r3, #0
 8011218:	d001      	beq.n	801121e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801121a:	2301      	movs	r3, #1
 801121c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801121e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011220:	4618      	mov	r0, r3
 8011222:	3718      	adds	r7, #24
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	20044bc4 	.word	0x20044bc4

0801122c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b086      	sub	sp, #24
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011238:	2300      	movs	r3, #0
 801123a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	68ba      	ldr	r2, [r7, #8]
 8011240:	68f9      	ldr	r1, [r7, #12]
 8011242:	4806      	ldr	r0, [pc, #24]	; (801125c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011244:	f7fc f8de 	bl	800d404 <HAL_SD_WriteBlocks_DMA>
 8011248:	4603      	mov	r3, r0
 801124a:	2b00      	cmp	r3, #0
 801124c:	d001      	beq.n	8011252 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801124e:	2301      	movs	r3, #1
 8011250:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011252:	7dfb      	ldrb	r3, [r7, #23]
}
 8011254:	4618      	mov	r0, r3
 8011256:	3718      	adds	r7, #24
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	20044bc4 	.word	0x20044bc4

08011260 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011264:	4805      	ldr	r0, [pc, #20]	; (801127c <BSP_SD_GetCardState+0x1c>)
 8011266:	f7fc fd85 	bl	800dd74 <HAL_SD_GetCardState>
 801126a:	4603      	mov	r3, r0
 801126c:	2b04      	cmp	r3, #4
 801126e:	bf14      	ite	ne
 8011270:	2301      	movne	r3, #1
 8011272:	2300      	moveq	r3, #0
 8011274:	b2db      	uxtb	r3, r3
}
 8011276:	4618      	mov	r0, r3
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	20044bc4 	.word	0x20044bc4

08011280 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011288:	6879      	ldr	r1, [r7, #4]
 801128a:	4803      	ldr	r0, [pc, #12]	; (8011298 <BSP_SD_GetCardInfo+0x18>)
 801128c:	f7fc fcca 	bl	800dc24 <HAL_SD_GetCardInfo>
}
 8011290:	bf00      	nop
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}
 8011298:	20044bc4 	.word	0x20044bc4

0801129c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80112a4:	f000 f818 	bl	80112d8 <BSP_SD_AbortCallback>
}
 80112a8:	bf00      	nop
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80112b8:	f000 f9a8 	bl	801160c <BSP_SD_WriteCpltCallback>
}
 80112bc:	bf00      	nop
 80112be:	3708      	adds	r7, #8
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}

080112c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80112cc:	f000 f9aa 	bl	8011624 <BSP_SD_ReadCpltCallback>
}
 80112d0:	bf00      	nop
 80112d2:	3708      	adds	r7, #8
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80112d8:	b480      	push	{r7}
 80112da:	af00      	add	r7, sp, #0

}
 80112dc:	bf00      	nop
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr

080112e6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80112e6:	b580      	push	{r7, lr}
 80112e8:	b082      	sub	sp, #8
 80112ea:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80112ec:	2301      	movs	r3, #1
 80112ee:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80112f0:	f000 f80c 	bl	801130c <BSP_PlatformIsDetected>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d101      	bne.n	80112fe <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80112fa:	2300      	movs	r3, #0
 80112fc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80112fe:	79fb      	ldrb	r3, [r7, #7]
 8011300:	b2db      	uxtb	r3, r3
}
 8011302:	4618      	mov	r0, r3
 8011304:	3708      	adds	r7, #8
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
	...

0801130c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801130c:	b580      	push	{r7, lr}
 801130e:	b082      	sub	sp, #8
 8011310:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011312:	2301      	movs	r3, #1
 8011314:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801131a:	4806      	ldr	r0, [pc, #24]	; (8011334 <BSP_PlatformIsDetected+0x28>)
 801131c:	f7fa f87e 	bl	800b41c <HAL_GPIO_ReadPin>
 8011320:	4603      	mov	r3, r0
 8011322:	2b00      	cmp	r3, #0
 8011324:	d001      	beq.n	801132a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011326:	2300      	movs	r3, #0
 8011328:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801132a:	79fb      	ldrb	r3, [r7, #7]
}
 801132c:	4618      	mov	r0, r3
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	40020000 	.word	0x40020000

08011338 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011340:	f7f8 fde2 	bl	8009f08 <HAL_GetTick>
 8011344:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011346:	e006      	b.n	8011356 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011348:	f7ff ff8a 	bl	8011260 <BSP_SD_GetCardState>
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	d101      	bne.n	8011356 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011352:	2300      	movs	r3, #0
 8011354:	e009      	b.n	801136a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011356:	f7f8 fdd7 	bl	8009f08 <HAL_GetTick>
 801135a:	4602      	mov	r2, r0
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	1ad3      	subs	r3, r2, r3
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	429a      	cmp	r2, r3
 8011364:	d8f0      	bhi.n	8011348 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011366:	f04f 33ff 	mov.w	r3, #4294967295
}
 801136a:	4618      	mov	r0, r3
 801136c:	3710      	adds	r7, #16
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
	...

08011374 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	4603      	mov	r3, r0
 801137c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801137e:	4b0b      	ldr	r3, [pc, #44]	; (80113ac <SD_CheckStatus+0x38>)
 8011380:	2201      	movs	r2, #1
 8011382:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011384:	f7ff ff6c 	bl	8011260 <BSP_SD_GetCardState>
 8011388:	4603      	mov	r3, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d107      	bne.n	801139e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801138e:	4b07      	ldr	r3, [pc, #28]	; (80113ac <SD_CheckStatus+0x38>)
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	b2db      	uxtb	r3, r3
 8011394:	f023 0301 	bic.w	r3, r3, #1
 8011398:	b2da      	uxtb	r2, r3
 801139a:	4b04      	ldr	r3, [pc, #16]	; (80113ac <SD_CheckStatus+0x38>)
 801139c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801139e:	4b03      	ldr	r3, [pc, #12]	; (80113ac <SD_CheckStatus+0x38>)
 80113a0:	781b      	ldrb	r3, [r3, #0]
 80113a2:	b2db      	uxtb	r3, r3
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	20000009 	.word	0x20000009

080113b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	4603      	mov	r3, r0
 80113b8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80113ba:	f7ff fef7 	bl	80111ac <BSP_SD_Init>
 80113be:	4603      	mov	r3, r0
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d107      	bne.n	80113d4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80113c4:	79fb      	ldrb	r3, [r7, #7]
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7ff ffd4 	bl	8011374 <SD_CheckStatus>
 80113cc:	4603      	mov	r3, r0
 80113ce:	461a      	mov	r2, r3
 80113d0:	4b04      	ldr	r3, [pc, #16]	; (80113e4 <SD_initialize+0x34>)
 80113d2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80113d4:	4b03      	ldr	r3, [pc, #12]	; (80113e4 <SD_initialize+0x34>)
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	b2db      	uxtb	r3, r3
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3708      	adds	r7, #8
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop
 80113e4:	20000009 	.word	0x20000009

080113e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	4603      	mov	r3, r0
 80113f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80113f2:	79fb      	ldrb	r3, [r7, #7]
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7ff ffbd 	bl	8011374 <SD_CheckStatus>
 80113fa:	4603      	mov	r3, r0
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3708      	adds	r7, #8
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b086      	sub	sp, #24
 8011408:	af00      	add	r7, sp, #0
 801140a:	60b9      	str	r1, [r7, #8]
 801140c:	607a      	str	r2, [r7, #4]
 801140e:	603b      	str	r3, [r7, #0]
 8011410:	4603      	mov	r3, r0
 8011412:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011414:	2301      	movs	r3, #1
 8011416:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011418:	f247 5030 	movw	r0, #30000	; 0x7530
 801141c:	f7ff ff8c 	bl	8011338 <SD_CheckStatusWithTimeout>
 8011420:	4603      	mov	r3, r0
 8011422:	2b00      	cmp	r3, #0
 8011424:	da01      	bge.n	801142a <SD_read+0x26>
  {
    return res;
 8011426:	7dfb      	ldrb	r3, [r7, #23]
 8011428:	e03b      	b.n	80114a2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801142a:	683a      	ldr	r2, [r7, #0]
 801142c:	6879      	ldr	r1, [r7, #4]
 801142e:	68b8      	ldr	r0, [r7, #8]
 8011430:	f7ff fee2 	bl	80111f8 <BSP_SD_ReadBlocks_DMA>
 8011434:	4603      	mov	r3, r0
 8011436:	2b00      	cmp	r3, #0
 8011438:	d132      	bne.n	80114a0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801143a:	4b1c      	ldr	r3, [pc, #112]	; (80114ac <SD_read+0xa8>)
 801143c:	2200      	movs	r2, #0
 801143e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011440:	f7f8 fd62 	bl	8009f08 <HAL_GetTick>
 8011444:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011446:	bf00      	nop
 8011448:	4b18      	ldr	r3, [pc, #96]	; (80114ac <SD_read+0xa8>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d108      	bne.n	8011462 <SD_read+0x5e>
 8011450:	f7f8 fd5a 	bl	8009f08 <HAL_GetTick>
 8011454:	4602      	mov	r2, r0
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	1ad3      	subs	r3, r2, r3
 801145a:	f247 522f 	movw	r2, #29999	; 0x752f
 801145e:	4293      	cmp	r3, r2
 8011460:	d9f2      	bls.n	8011448 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011462:	4b12      	ldr	r3, [pc, #72]	; (80114ac <SD_read+0xa8>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d102      	bne.n	8011470 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801146a:	2301      	movs	r3, #1
 801146c:	75fb      	strb	r3, [r7, #23]
 801146e:	e017      	b.n	80114a0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011470:	4b0e      	ldr	r3, [pc, #56]	; (80114ac <SD_read+0xa8>)
 8011472:	2200      	movs	r2, #0
 8011474:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011476:	f7f8 fd47 	bl	8009f08 <HAL_GetTick>
 801147a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801147c:	e007      	b.n	801148e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801147e:	f7ff feef 	bl	8011260 <BSP_SD_GetCardState>
 8011482:	4603      	mov	r3, r0
 8011484:	2b00      	cmp	r3, #0
 8011486:	d102      	bne.n	801148e <SD_read+0x8a>
          {
            res = RES_OK;
 8011488:	2300      	movs	r3, #0
 801148a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801148c:	e008      	b.n	80114a0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801148e:	f7f8 fd3b 	bl	8009f08 <HAL_GetTick>
 8011492:	4602      	mov	r2, r0
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	1ad3      	subs	r3, r2, r3
 8011498:	f247 522f 	movw	r2, #29999	; 0x752f
 801149c:	4293      	cmp	r3, r2
 801149e:	d9ee      	bls.n	801147e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80114a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3718      	adds	r7, #24
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	bf00      	nop
 80114ac:	20042460 	.word	0x20042460

080114b0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b086      	sub	sp, #24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	60b9      	str	r1, [r7, #8]
 80114b8:	607a      	str	r2, [r7, #4]
 80114ba:	603b      	str	r3, [r7, #0]
 80114bc:	4603      	mov	r3, r0
 80114be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80114c0:	2301      	movs	r3, #1
 80114c2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80114c4:	4b24      	ldr	r3, [pc, #144]	; (8011558 <SD_write+0xa8>)
 80114c6:	2200      	movs	r2, #0
 80114c8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80114ca:	f247 5030 	movw	r0, #30000	; 0x7530
 80114ce:	f7ff ff33 	bl	8011338 <SD_CheckStatusWithTimeout>
 80114d2:	4603      	mov	r3, r0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	da01      	bge.n	80114dc <SD_write+0x2c>
  {
    return res;
 80114d8:	7dfb      	ldrb	r3, [r7, #23]
 80114da:	e038      	b.n	801154e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80114dc:	683a      	ldr	r2, [r7, #0]
 80114de:	6879      	ldr	r1, [r7, #4]
 80114e0:	68b8      	ldr	r0, [r7, #8]
 80114e2:	f7ff fea3 	bl	801122c <BSP_SD_WriteBlocks_DMA>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d12f      	bne.n	801154c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80114ec:	f7f8 fd0c 	bl	8009f08 <HAL_GetTick>
 80114f0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80114f2:	bf00      	nop
 80114f4:	4b18      	ldr	r3, [pc, #96]	; (8011558 <SD_write+0xa8>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d108      	bne.n	801150e <SD_write+0x5e>
 80114fc:	f7f8 fd04 	bl	8009f08 <HAL_GetTick>
 8011500:	4602      	mov	r2, r0
 8011502:	693b      	ldr	r3, [r7, #16]
 8011504:	1ad3      	subs	r3, r2, r3
 8011506:	f247 522f 	movw	r2, #29999	; 0x752f
 801150a:	4293      	cmp	r3, r2
 801150c:	d9f2      	bls.n	80114f4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 801150e:	4b12      	ldr	r3, [pc, #72]	; (8011558 <SD_write+0xa8>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d102      	bne.n	801151c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011516:	2301      	movs	r3, #1
 8011518:	75fb      	strb	r3, [r7, #23]
 801151a:	e017      	b.n	801154c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801151c:	4b0e      	ldr	r3, [pc, #56]	; (8011558 <SD_write+0xa8>)
 801151e:	2200      	movs	r2, #0
 8011520:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011522:	f7f8 fcf1 	bl	8009f08 <HAL_GetTick>
 8011526:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011528:	e007      	b.n	801153a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801152a:	f7ff fe99 	bl	8011260 <BSP_SD_GetCardState>
 801152e:	4603      	mov	r3, r0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d102      	bne.n	801153a <SD_write+0x8a>
          {
            res = RES_OK;
 8011534:	2300      	movs	r3, #0
 8011536:	75fb      	strb	r3, [r7, #23]
            break;
 8011538:	e008      	b.n	801154c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801153a:	f7f8 fce5 	bl	8009f08 <HAL_GetTick>
 801153e:	4602      	mov	r2, r0
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	1ad3      	subs	r3, r2, r3
 8011544:	f247 522f 	movw	r2, #29999	; 0x752f
 8011548:	4293      	cmp	r3, r2
 801154a:	d9ee      	bls.n	801152a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801154c:	7dfb      	ldrb	r3, [r7, #23]
}
 801154e:	4618      	mov	r0, r3
 8011550:	3718      	adds	r7, #24
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	2004245c 	.word	0x2004245c

0801155c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b08c      	sub	sp, #48	; 0x30
 8011560:	af00      	add	r7, sp, #0
 8011562:	4603      	mov	r3, r0
 8011564:	603a      	str	r2, [r7, #0]
 8011566:	71fb      	strb	r3, [r7, #7]
 8011568:	460b      	mov	r3, r1
 801156a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801156c:	2301      	movs	r3, #1
 801156e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011572:	4b25      	ldr	r3, [pc, #148]	; (8011608 <SD_ioctl+0xac>)
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	b2db      	uxtb	r3, r3
 8011578:	f003 0301 	and.w	r3, r3, #1
 801157c:	2b00      	cmp	r3, #0
 801157e:	d001      	beq.n	8011584 <SD_ioctl+0x28>
 8011580:	2303      	movs	r3, #3
 8011582:	e03c      	b.n	80115fe <SD_ioctl+0xa2>

  switch (cmd)
 8011584:	79bb      	ldrb	r3, [r7, #6]
 8011586:	2b03      	cmp	r3, #3
 8011588:	d834      	bhi.n	80115f4 <SD_ioctl+0x98>
 801158a:	a201      	add	r2, pc, #4	; (adr r2, 8011590 <SD_ioctl+0x34>)
 801158c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011590:	080115a1 	.word	0x080115a1
 8011594:	080115a9 	.word	0x080115a9
 8011598:	080115c1 	.word	0x080115c1
 801159c:	080115db 	.word	0x080115db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80115a0:	2300      	movs	r3, #0
 80115a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115a6:	e028      	b.n	80115fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80115a8:	f107 030c 	add.w	r3, r7, #12
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7ff fe67 	bl	8011280 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80115b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80115b8:	2300      	movs	r3, #0
 80115ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115be:	e01c      	b.n	80115fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80115c0:	f107 030c 	add.w	r3, r7, #12
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7ff fe5b 	bl	8011280 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80115ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80115d2:	2300      	movs	r3, #0
 80115d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115d8:	e00f      	b.n	80115fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80115da:	f107 030c 	add.w	r3, r7, #12
 80115de:	4618      	mov	r0, r3
 80115e0:	f7ff fe4e 	bl	8011280 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80115e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e6:	0a5a      	lsrs	r2, r3, #9
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80115ec:	2300      	movs	r3, #0
 80115ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115f2:	e002      	b.n	80115fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80115f4:	2304      	movs	r3, #4
 80115f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80115fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3730      	adds	r7, #48	; 0x30
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop
 8011608:	20000009 	.word	0x20000009

0801160c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801160c:	b480      	push	{r7}
 801160e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011610:	4b03      	ldr	r3, [pc, #12]	; (8011620 <BSP_SD_WriteCpltCallback+0x14>)
 8011612:	2201      	movs	r2, #1
 8011614:	601a      	str	r2, [r3, #0]
}
 8011616:	bf00      	nop
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr
 8011620:	2004245c 	.word	0x2004245c

08011624 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011624:	b480      	push	{r7}
 8011626:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011628:	4b03      	ldr	r3, [pc, #12]	; (8011638 <BSP_SD_ReadCpltCallback+0x14>)
 801162a:	2201      	movs	r2, #1
 801162c:	601a      	str	r2, [r3, #0]
}
 801162e:	bf00      	nop
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr
 8011638:	20042460 	.word	0x20042460

0801163c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b084      	sub	sp, #16
 8011640:	af00      	add	r7, sp, #0
 8011642:	4603      	mov	r3, r0
 8011644:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011646:	79fb      	ldrb	r3, [r7, #7]
 8011648:	4a08      	ldr	r2, [pc, #32]	; (801166c <disk_status+0x30>)
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	4413      	add	r3, r2
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	79fa      	ldrb	r2, [r7, #7]
 8011654:	4905      	ldr	r1, [pc, #20]	; (801166c <disk_status+0x30>)
 8011656:	440a      	add	r2, r1
 8011658:	7a12      	ldrb	r2, [r2, #8]
 801165a:	4610      	mov	r0, r2
 801165c:	4798      	blx	r3
 801165e:	4603      	mov	r3, r0
 8011660:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011662:	7bfb      	ldrb	r3, [r7, #15]
}
 8011664:	4618      	mov	r0, r3
 8011666:	3710      	adds	r7, #16
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	2004248c 	.word	0x2004248c

08011670 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
 8011676:	4603      	mov	r3, r0
 8011678:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801167a:	2300      	movs	r3, #0
 801167c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801167e:	79fb      	ldrb	r3, [r7, #7]
 8011680:	4a0d      	ldr	r2, [pc, #52]	; (80116b8 <disk_initialize+0x48>)
 8011682:	5cd3      	ldrb	r3, [r2, r3]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d111      	bne.n	80116ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011688:	79fb      	ldrb	r3, [r7, #7]
 801168a:	4a0b      	ldr	r2, [pc, #44]	; (80116b8 <disk_initialize+0x48>)
 801168c:	2101      	movs	r1, #1
 801168e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011690:	79fb      	ldrb	r3, [r7, #7]
 8011692:	4a09      	ldr	r2, [pc, #36]	; (80116b8 <disk_initialize+0x48>)
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	4413      	add	r3, r2
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	79fa      	ldrb	r2, [r7, #7]
 801169e:	4906      	ldr	r1, [pc, #24]	; (80116b8 <disk_initialize+0x48>)
 80116a0:	440a      	add	r2, r1
 80116a2:	7a12      	ldrb	r2, [r2, #8]
 80116a4:	4610      	mov	r0, r2
 80116a6:	4798      	blx	r3
 80116a8:	4603      	mov	r3, r0
 80116aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80116ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	2004248c 	.word	0x2004248c

080116bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80116bc:	b590      	push	{r4, r7, lr}
 80116be:	b087      	sub	sp, #28
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60b9      	str	r1, [r7, #8]
 80116c4:	607a      	str	r2, [r7, #4]
 80116c6:	603b      	str	r3, [r7, #0]
 80116c8:	4603      	mov	r3, r0
 80116ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80116cc:	7bfb      	ldrb	r3, [r7, #15]
 80116ce:	4a0a      	ldr	r2, [pc, #40]	; (80116f8 <disk_read+0x3c>)
 80116d0:	009b      	lsls	r3, r3, #2
 80116d2:	4413      	add	r3, r2
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	689c      	ldr	r4, [r3, #8]
 80116d8:	7bfb      	ldrb	r3, [r7, #15]
 80116da:	4a07      	ldr	r2, [pc, #28]	; (80116f8 <disk_read+0x3c>)
 80116dc:	4413      	add	r3, r2
 80116de:	7a18      	ldrb	r0, [r3, #8]
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	68b9      	ldr	r1, [r7, #8]
 80116e6:	47a0      	blx	r4
 80116e8:	4603      	mov	r3, r0
 80116ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80116ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	371c      	adds	r7, #28
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd90      	pop	{r4, r7, pc}
 80116f6:	bf00      	nop
 80116f8:	2004248c 	.word	0x2004248c

080116fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80116fc:	b590      	push	{r4, r7, lr}
 80116fe:	b087      	sub	sp, #28
 8011700:	af00      	add	r7, sp, #0
 8011702:	60b9      	str	r1, [r7, #8]
 8011704:	607a      	str	r2, [r7, #4]
 8011706:	603b      	str	r3, [r7, #0]
 8011708:	4603      	mov	r3, r0
 801170a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801170c:	7bfb      	ldrb	r3, [r7, #15]
 801170e:	4a0a      	ldr	r2, [pc, #40]	; (8011738 <disk_write+0x3c>)
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	4413      	add	r3, r2
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	68dc      	ldr	r4, [r3, #12]
 8011718:	7bfb      	ldrb	r3, [r7, #15]
 801171a:	4a07      	ldr	r2, [pc, #28]	; (8011738 <disk_write+0x3c>)
 801171c:	4413      	add	r3, r2
 801171e:	7a18      	ldrb	r0, [r3, #8]
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	687a      	ldr	r2, [r7, #4]
 8011724:	68b9      	ldr	r1, [r7, #8]
 8011726:	47a0      	blx	r4
 8011728:	4603      	mov	r3, r0
 801172a:	75fb      	strb	r3, [r7, #23]
  return res;
 801172c:	7dfb      	ldrb	r3, [r7, #23]
}
 801172e:	4618      	mov	r0, r3
 8011730:	371c      	adds	r7, #28
 8011732:	46bd      	mov	sp, r7
 8011734:	bd90      	pop	{r4, r7, pc}
 8011736:	bf00      	nop
 8011738:	2004248c 	.word	0x2004248c

0801173c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	4603      	mov	r3, r0
 8011744:	603a      	str	r2, [r7, #0]
 8011746:	71fb      	strb	r3, [r7, #7]
 8011748:	460b      	mov	r3, r1
 801174a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801174c:	79fb      	ldrb	r3, [r7, #7]
 801174e:	4a09      	ldr	r2, [pc, #36]	; (8011774 <disk_ioctl+0x38>)
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	4413      	add	r3, r2
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	79fa      	ldrb	r2, [r7, #7]
 801175a:	4906      	ldr	r1, [pc, #24]	; (8011774 <disk_ioctl+0x38>)
 801175c:	440a      	add	r2, r1
 801175e:	7a10      	ldrb	r0, [r2, #8]
 8011760:	79b9      	ldrb	r1, [r7, #6]
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	4798      	blx	r3
 8011766:	4603      	mov	r3, r0
 8011768:	73fb      	strb	r3, [r7, #15]
  return res;
 801176a:	7bfb      	ldrb	r3, [r7, #15]
}
 801176c:	4618      	mov	r0, r3
 801176e:	3710      	adds	r7, #16
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}
 8011774:	2004248c 	.word	0x2004248c

08011778 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011778:	b480      	push	{r7}
 801177a:	b085      	sub	sp, #20
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	3301      	adds	r3, #1
 8011784:	781b      	ldrb	r3, [r3, #0]
 8011786:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011788:	89fb      	ldrh	r3, [r7, #14]
 801178a:	021b      	lsls	r3, r3, #8
 801178c:	b21a      	sxth	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	b21b      	sxth	r3, r3
 8011794:	4313      	orrs	r3, r2
 8011796:	b21b      	sxth	r3, r3
 8011798:	81fb      	strh	r3, [r7, #14]
	return rv;
 801179a:	89fb      	ldrh	r3, [r7, #14]
}
 801179c:	4618      	mov	r0, r3
 801179e:	3714      	adds	r7, #20
 80117a0:	46bd      	mov	sp, r7
 80117a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a6:	4770      	bx	lr

080117a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80117a8:	b480      	push	{r7}
 80117aa:	b085      	sub	sp, #20
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	3303      	adds	r3, #3
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	021b      	lsls	r3, r3, #8
 80117bc:	687a      	ldr	r2, [r7, #4]
 80117be:	3202      	adds	r2, #2
 80117c0:	7812      	ldrb	r2, [r2, #0]
 80117c2:	4313      	orrs	r3, r2
 80117c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	021b      	lsls	r3, r3, #8
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	3201      	adds	r2, #1
 80117ce:	7812      	ldrb	r2, [r2, #0]
 80117d0:	4313      	orrs	r3, r2
 80117d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	021b      	lsls	r3, r3, #8
 80117d8:	687a      	ldr	r2, [r7, #4]
 80117da:	7812      	ldrb	r2, [r2, #0]
 80117dc:	4313      	orrs	r3, r2
 80117de:	60fb      	str	r3, [r7, #12]
	return rv;
 80117e0:	68fb      	ldr	r3, [r7, #12]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3714      	adds	r7, #20
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr

080117ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80117ee:	b480      	push	{r7}
 80117f0:	b083      	sub	sp, #12
 80117f2:	af00      	add	r7, sp, #0
 80117f4:	6078      	str	r0, [r7, #4]
 80117f6:	460b      	mov	r3, r1
 80117f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	1c5a      	adds	r2, r3, #1
 80117fe:	607a      	str	r2, [r7, #4]
 8011800:	887a      	ldrh	r2, [r7, #2]
 8011802:	b2d2      	uxtb	r2, r2
 8011804:	701a      	strb	r2, [r3, #0]
 8011806:	887b      	ldrh	r3, [r7, #2]
 8011808:	0a1b      	lsrs	r3, r3, #8
 801180a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	1c5a      	adds	r2, r3, #1
 8011810:	607a      	str	r2, [r7, #4]
 8011812:	887a      	ldrh	r2, [r7, #2]
 8011814:	b2d2      	uxtb	r2, r2
 8011816:	701a      	strb	r2, [r3, #0]
}
 8011818:	bf00      	nop
 801181a:	370c      	adds	r7, #12
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr

08011824 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011824:	b480      	push	{r7}
 8011826:	b083      	sub	sp, #12
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	1c5a      	adds	r2, r3, #1
 8011832:	607a      	str	r2, [r7, #4]
 8011834:	683a      	ldr	r2, [r7, #0]
 8011836:	b2d2      	uxtb	r2, r2
 8011838:	701a      	strb	r2, [r3, #0]
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	0a1b      	lsrs	r3, r3, #8
 801183e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	1c5a      	adds	r2, r3, #1
 8011844:	607a      	str	r2, [r7, #4]
 8011846:	683a      	ldr	r2, [r7, #0]
 8011848:	b2d2      	uxtb	r2, r2
 801184a:	701a      	strb	r2, [r3, #0]
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	0a1b      	lsrs	r3, r3, #8
 8011850:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	1c5a      	adds	r2, r3, #1
 8011856:	607a      	str	r2, [r7, #4]
 8011858:	683a      	ldr	r2, [r7, #0]
 801185a:	b2d2      	uxtb	r2, r2
 801185c:	701a      	strb	r2, [r3, #0]
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	0a1b      	lsrs	r3, r3, #8
 8011862:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	1c5a      	adds	r2, r3, #1
 8011868:	607a      	str	r2, [r7, #4]
 801186a:	683a      	ldr	r2, [r7, #0]
 801186c:	b2d2      	uxtb	r2, r2
 801186e:	701a      	strb	r2, [r3, #0]
}
 8011870:	bf00      	nop
 8011872:	370c      	adds	r7, #12
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr

0801187c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801187c:	b480      	push	{r7}
 801187e:	b087      	sub	sp, #28
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00d      	beq.n	80118b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011896:	693a      	ldr	r2, [r7, #16]
 8011898:	1c53      	adds	r3, r2, #1
 801189a:	613b      	str	r3, [r7, #16]
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	1c59      	adds	r1, r3, #1
 80118a0:	6179      	str	r1, [r7, #20]
 80118a2:	7812      	ldrb	r2, [r2, #0]
 80118a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	3b01      	subs	r3, #1
 80118aa:	607b      	str	r3, [r7, #4]
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1f1      	bne.n	8011896 <mem_cpy+0x1a>
	}
}
 80118b2:	bf00      	nop
 80118b4:	371c      	adds	r7, #28
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr

080118be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80118be:	b480      	push	{r7}
 80118c0:	b087      	sub	sp, #28
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	60f8      	str	r0, [r7, #12]
 80118c6:	60b9      	str	r1, [r7, #8]
 80118c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	1c5a      	adds	r2, r3, #1
 80118d2:	617a      	str	r2, [r7, #20]
 80118d4:	68ba      	ldr	r2, [r7, #8]
 80118d6:	b2d2      	uxtb	r2, r2
 80118d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	3b01      	subs	r3, #1
 80118de:	607b      	str	r3, [r7, #4]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d1f3      	bne.n	80118ce <mem_set+0x10>
}
 80118e6:	bf00      	nop
 80118e8:	371c      	adds	r7, #28
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr

080118f2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80118f2:	b480      	push	{r7}
 80118f4:	b089      	sub	sp, #36	; 0x24
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	60f8      	str	r0, [r7, #12]
 80118fa:	60b9      	str	r1, [r7, #8]
 80118fc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	61fb      	str	r3, [r7, #28]
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011906:	2300      	movs	r3, #0
 8011908:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	1c5a      	adds	r2, r3, #1
 801190e:	61fa      	str	r2, [r7, #28]
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	4619      	mov	r1, r3
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	1c5a      	adds	r2, r3, #1
 8011918:	61ba      	str	r2, [r7, #24]
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	1acb      	subs	r3, r1, r3
 801191e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	3b01      	subs	r3, #1
 8011924:	607b      	str	r3, [r7, #4]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d002      	beq.n	8011932 <mem_cmp+0x40>
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d0eb      	beq.n	801190a <mem_cmp+0x18>

	return r;
 8011932:	697b      	ldr	r3, [r7, #20]
}
 8011934:	4618      	mov	r0, r3
 8011936:	3724      	adds	r7, #36	; 0x24
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr

08011940 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801194a:	e002      	b.n	8011952 <chk_chr+0x12>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	3301      	adds	r3, #1
 8011950:	607b      	str	r3, [r7, #4]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d005      	beq.n	8011966 <chk_chr+0x26>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	461a      	mov	r2, r3
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	4293      	cmp	r3, r2
 8011964:	d1f2      	bne.n	801194c <chk_chr+0xc>
	return *str;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	781b      	ldrb	r3, [r3, #0]
}
 801196a:	4618      	mov	r0, r3
 801196c:	370c      	adds	r7, #12
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr
	...

08011978 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011978:	b480      	push	{r7}
 801197a:	b085      	sub	sp, #20
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011982:	2300      	movs	r3, #0
 8011984:	60bb      	str	r3, [r7, #8]
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	60fb      	str	r3, [r7, #12]
 801198a:	e029      	b.n	80119e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801198c:	4a27      	ldr	r2, [pc, #156]	; (8011a2c <chk_lock+0xb4>)
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	011b      	lsls	r3, r3, #4
 8011992:	4413      	add	r3, r2
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d01d      	beq.n	80119d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801199a:	4a24      	ldr	r2, [pc, #144]	; (8011a2c <chk_lock+0xb4>)
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	011b      	lsls	r3, r3, #4
 80119a0:	4413      	add	r3, r2
 80119a2:	681a      	ldr	r2, [r3, #0]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d116      	bne.n	80119da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80119ac:	4a1f      	ldr	r2, [pc, #124]	; (8011a2c <chk_lock+0xb4>)
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	011b      	lsls	r3, r3, #4
 80119b2:	4413      	add	r3, r2
 80119b4:	3304      	adds	r3, #4
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80119bc:	429a      	cmp	r2, r3
 80119be:	d10c      	bne.n	80119da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119c0:	4a1a      	ldr	r2, [pc, #104]	; (8011a2c <chk_lock+0xb4>)
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	011b      	lsls	r3, r3, #4
 80119c6:	4413      	add	r3, r2
 80119c8:	3308      	adds	r3, #8
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d102      	bne.n	80119da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119d4:	e007      	b.n	80119e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80119d6:	2301      	movs	r3, #1
 80119d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	3301      	adds	r3, #1
 80119de:	60fb      	str	r3, [r7, #12]
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2b01      	cmp	r3, #1
 80119e4:	d9d2      	bls.n	801198c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	2b02      	cmp	r3, #2
 80119ea:	d109      	bne.n	8011a00 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d102      	bne.n	80119f8 <chk_lock+0x80>
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	2b02      	cmp	r3, #2
 80119f6:	d101      	bne.n	80119fc <chk_lock+0x84>
 80119f8:	2300      	movs	r3, #0
 80119fa:	e010      	b.n	8011a1e <chk_lock+0xa6>
 80119fc:	2312      	movs	r3, #18
 80119fe:	e00e      	b.n	8011a1e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d108      	bne.n	8011a18 <chk_lock+0xa0>
 8011a06:	4a09      	ldr	r2, [pc, #36]	; (8011a2c <chk_lock+0xb4>)
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	011b      	lsls	r3, r3, #4
 8011a0c:	4413      	add	r3, r2
 8011a0e:	330c      	adds	r3, #12
 8011a10:	881b      	ldrh	r3, [r3, #0]
 8011a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a16:	d101      	bne.n	8011a1c <chk_lock+0xa4>
 8011a18:	2310      	movs	r3, #16
 8011a1a:	e000      	b.n	8011a1e <chk_lock+0xa6>
 8011a1c:	2300      	movs	r3, #0
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3714      	adds	r7, #20
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr
 8011a2a:	bf00      	nop
 8011a2c:	2004246c 	.word	0x2004246c

08011a30 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011a30:	b480      	push	{r7}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011a36:	2300      	movs	r3, #0
 8011a38:	607b      	str	r3, [r7, #4]
 8011a3a:	e002      	b.n	8011a42 <enq_lock+0x12>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	607b      	str	r3, [r7, #4]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2b01      	cmp	r3, #1
 8011a46:	d806      	bhi.n	8011a56 <enq_lock+0x26>
 8011a48:	4a09      	ldr	r2, [pc, #36]	; (8011a70 <enq_lock+0x40>)
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	011b      	lsls	r3, r3, #4
 8011a4e:	4413      	add	r3, r2
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d1f2      	bne.n	8011a3c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2b02      	cmp	r3, #2
 8011a5a:	bf14      	ite	ne
 8011a5c:	2301      	movne	r3, #1
 8011a5e:	2300      	moveq	r3, #0
 8011a60:	b2db      	uxtb	r3, r3
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	370c      	adds	r7, #12
 8011a66:	46bd      	mov	sp, r7
 8011a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6c:	4770      	bx	lr
 8011a6e:	bf00      	nop
 8011a70:	2004246c 	.word	0x2004246c

08011a74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a74:	b480      	push	{r7}
 8011a76:	b085      	sub	sp, #20
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a7e:	2300      	movs	r3, #0
 8011a80:	60fb      	str	r3, [r7, #12]
 8011a82:	e01f      	b.n	8011ac4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011a84:	4a41      	ldr	r2, [pc, #260]	; (8011b8c <inc_lock+0x118>)
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	011b      	lsls	r3, r3, #4
 8011a8a:	4413      	add	r3, r2
 8011a8c:	681a      	ldr	r2, [r3, #0]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d113      	bne.n	8011abe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011a96:	4a3d      	ldr	r2, [pc, #244]	; (8011b8c <inc_lock+0x118>)
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	011b      	lsls	r3, r3, #4
 8011a9c:	4413      	add	r3, r2
 8011a9e:	3304      	adds	r3, #4
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d109      	bne.n	8011abe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011aaa:	4a38      	ldr	r2, [pc, #224]	; (8011b8c <inc_lock+0x118>)
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	011b      	lsls	r3, r3, #4
 8011ab0:	4413      	add	r3, r2
 8011ab2:	3308      	adds	r3, #8
 8011ab4:	681a      	ldr	r2, [r3, #0]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d006      	beq.n	8011acc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	60fb      	str	r3, [r7, #12]
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	2b01      	cmp	r3, #1
 8011ac8:	d9dc      	bls.n	8011a84 <inc_lock+0x10>
 8011aca:	e000      	b.n	8011ace <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011acc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2b02      	cmp	r3, #2
 8011ad2:	d132      	bne.n	8011b3a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	60fb      	str	r3, [r7, #12]
 8011ad8:	e002      	b.n	8011ae0 <inc_lock+0x6c>
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	3301      	adds	r3, #1
 8011ade:	60fb      	str	r3, [r7, #12]
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d806      	bhi.n	8011af4 <inc_lock+0x80>
 8011ae6:	4a29      	ldr	r2, [pc, #164]	; (8011b8c <inc_lock+0x118>)
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	011b      	lsls	r3, r3, #4
 8011aec:	4413      	add	r3, r2
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d1f2      	bne.n	8011ada <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2b02      	cmp	r3, #2
 8011af8:	d101      	bne.n	8011afe <inc_lock+0x8a>
 8011afa:	2300      	movs	r3, #0
 8011afc:	e040      	b.n	8011b80 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	4922      	ldr	r1, [pc, #136]	; (8011b8c <inc_lock+0x118>)
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	011b      	lsls	r3, r3, #4
 8011b08:	440b      	add	r3, r1
 8011b0a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	689a      	ldr	r2, [r3, #8]
 8011b10:	491e      	ldr	r1, [pc, #120]	; (8011b8c <inc_lock+0x118>)
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	011b      	lsls	r3, r3, #4
 8011b16:	440b      	add	r3, r1
 8011b18:	3304      	adds	r3, #4
 8011b1a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	695a      	ldr	r2, [r3, #20]
 8011b20:	491a      	ldr	r1, [pc, #104]	; (8011b8c <inc_lock+0x118>)
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	011b      	lsls	r3, r3, #4
 8011b26:	440b      	add	r3, r1
 8011b28:	3308      	adds	r3, #8
 8011b2a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011b2c:	4a17      	ldr	r2, [pc, #92]	; (8011b8c <inc_lock+0x118>)
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	011b      	lsls	r3, r3, #4
 8011b32:	4413      	add	r3, r2
 8011b34:	330c      	adds	r3, #12
 8011b36:	2200      	movs	r2, #0
 8011b38:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d009      	beq.n	8011b54 <inc_lock+0xe0>
 8011b40:	4a12      	ldr	r2, [pc, #72]	; (8011b8c <inc_lock+0x118>)
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	011b      	lsls	r3, r3, #4
 8011b46:	4413      	add	r3, r2
 8011b48:	330c      	adds	r3, #12
 8011b4a:	881b      	ldrh	r3, [r3, #0]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d001      	beq.n	8011b54 <inc_lock+0xe0>
 8011b50:	2300      	movs	r3, #0
 8011b52:	e015      	b.n	8011b80 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d108      	bne.n	8011b6c <inc_lock+0xf8>
 8011b5a:	4a0c      	ldr	r2, [pc, #48]	; (8011b8c <inc_lock+0x118>)
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	011b      	lsls	r3, r3, #4
 8011b60:	4413      	add	r3, r2
 8011b62:	330c      	adds	r3, #12
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	3301      	adds	r3, #1
 8011b68:	b29a      	uxth	r2, r3
 8011b6a:	e001      	b.n	8011b70 <inc_lock+0xfc>
 8011b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b70:	4906      	ldr	r1, [pc, #24]	; (8011b8c <inc_lock+0x118>)
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	011b      	lsls	r3, r3, #4
 8011b76:	440b      	add	r3, r1
 8011b78:	330c      	adds	r3, #12
 8011b7a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	3301      	adds	r3, #1
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3714      	adds	r7, #20
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr
 8011b8c:	2004246c 	.word	0x2004246c

08011b90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011b90:	b480      	push	{r7}
 8011b92:	b085      	sub	sp, #20
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	3b01      	subs	r3, #1
 8011b9c:	607b      	str	r3, [r7, #4]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d825      	bhi.n	8011bf0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011ba4:	4a17      	ldr	r2, [pc, #92]	; (8011c04 <dec_lock+0x74>)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	011b      	lsls	r3, r3, #4
 8011baa:	4413      	add	r3, r2
 8011bac:	330c      	adds	r3, #12
 8011bae:	881b      	ldrh	r3, [r3, #0]
 8011bb0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011bb2:	89fb      	ldrh	r3, [r7, #14]
 8011bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bb8:	d101      	bne.n	8011bbe <dec_lock+0x2e>
 8011bba:	2300      	movs	r3, #0
 8011bbc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011bbe:	89fb      	ldrh	r3, [r7, #14]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d002      	beq.n	8011bca <dec_lock+0x3a>
 8011bc4:	89fb      	ldrh	r3, [r7, #14]
 8011bc6:	3b01      	subs	r3, #1
 8011bc8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011bca:	4a0e      	ldr	r2, [pc, #56]	; (8011c04 <dec_lock+0x74>)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	011b      	lsls	r3, r3, #4
 8011bd0:	4413      	add	r3, r2
 8011bd2:	330c      	adds	r3, #12
 8011bd4:	89fa      	ldrh	r2, [r7, #14]
 8011bd6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011bd8:	89fb      	ldrh	r3, [r7, #14]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d105      	bne.n	8011bea <dec_lock+0x5a>
 8011bde:	4a09      	ldr	r2, [pc, #36]	; (8011c04 <dec_lock+0x74>)
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	011b      	lsls	r3, r3, #4
 8011be4:	4413      	add	r3, r2
 8011be6:	2200      	movs	r2, #0
 8011be8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011bea:	2300      	movs	r3, #0
 8011bec:	737b      	strb	r3, [r7, #13]
 8011bee:	e001      	b.n	8011bf4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011bf0:	2302      	movs	r3, #2
 8011bf2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011bf4:	7b7b      	ldrb	r3, [r7, #13]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3714      	adds	r7, #20
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr
 8011c02:	bf00      	nop
 8011c04:	2004246c 	.word	0x2004246c

08011c08 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011c08:	b480      	push	{r7}
 8011c0a:	b085      	sub	sp, #20
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011c10:	2300      	movs	r3, #0
 8011c12:	60fb      	str	r3, [r7, #12]
 8011c14:	e010      	b.n	8011c38 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011c16:	4a0d      	ldr	r2, [pc, #52]	; (8011c4c <clear_lock+0x44>)
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	011b      	lsls	r3, r3, #4
 8011c1c:	4413      	add	r3, r2
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d105      	bne.n	8011c32 <clear_lock+0x2a>
 8011c26:	4a09      	ldr	r2, [pc, #36]	; (8011c4c <clear_lock+0x44>)
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	011b      	lsls	r3, r3, #4
 8011c2c:	4413      	add	r3, r2
 8011c2e:	2200      	movs	r2, #0
 8011c30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	3301      	adds	r3, #1
 8011c36:	60fb      	str	r3, [r7, #12]
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	d9eb      	bls.n	8011c16 <clear_lock+0xe>
	}
}
 8011c3e:	bf00      	nop
 8011c40:	3714      	adds	r7, #20
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr
 8011c4a:	bf00      	nop
 8011c4c:	2004246c 	.word	0x2004246c

08011c50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b086      	sub	sp, #24
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	78db      	ldrb	r3, [r3, #3]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d034      	beq.n	8011cce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c68:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	7858      	ldrb	r0, [r3, #1]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c74:	2301      	movs	r3, #1
 8011c76:	697a      	ldr	r2, [r7, #20]
 8011c78:	f7ff fd40 	bl	80116fc <disk_write>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d002      	beq.n	8011c88 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011c82:	2301      	movs	r3, #1
 8011c84:	73fb      	strb	r3, [r7, #15]
 8011c86:	e022      	b.n	8011cce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c92:	697a      	ldr	r2, [r7, #20]
 8011c94:	1ad2      	subs	r2, r2, r3
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6a1b      	ldr	r3, [r3, #32]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d217      	bcs.n	8011cce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	789b      	ldrb	r3, [r3, #2]
 8011ca2:	613b      	str	r3, [r7, #16]
 8011ca4:	e010      	b.n	8011cc8 <sync_window+0x78>
					wsect += fs->fsize;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6a1b      	ldr	r3, [r3, #32]
 8011caa:	697a      	ldr	r2, [r7, #20]
 8011cac:	4413      	add	r3, r2
 8011cae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	7858      	ldrb	r0, [r3, #1]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cba:	2301      	movs	r3, #1
 8011cbc:	697a      	ldr	r2, [r7, #20]
 8011cbe:	f7ff fd1d 	bl	80116fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	3b01      	subs	r3, #1
 8011cc6:	613b      	str	r3, [r7, #16]
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d8eb      	bhi.n	8011ca6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3718      	adds	r7, #24
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cea:	683a      	ldr	r2, [r7, #0]
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d01b      	beq.n	8011d28 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f7ff ffad 	bl	8011c50 <sync_window>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011cfa:	7bfb      	ldrb	r3, [r7, #15]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d113      	bne.n	8011d28 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	7858      	ldrb	r0, [r3, #1]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	683a      	ldr	r2, [r7, #0]
 8011d0e:	f7ff fcd5 	bl	80116bc <disk_read>
 8011d12:	4603      	mov	r3, r0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d004      	beq.n	8011d22 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011d18:	f04f 33ff 	mov.w	r3, #4294967295
 8011d1c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011d1e:	2301      	movs	r3, #1
 8011d20:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	683a      	ldr	r2, [r7, #0]
 8011d26:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3710      	adds	r7, #16
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
	...

08011d34 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b084      	sub	sp, #16
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f7ff ff87 	bl	8011c50 <sync_window>
 8011d42:	4603      	mov	r3, r0
 8011d44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011d46:	7bfb      	ldrb	r3, [r7, #15]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d159      	bne.n	8011e00 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	2b03      	cmp	r3, #3
 8011d52:	d149      	bne.n	8011de8 <sync_fs+0xb4>
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	791b      	ldrb	r3, [r3, #4]
 8011d58:	2b01      	cmp	r3, #1
 8011d5a:	d145      	bne.n	8011de8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	899b      	ldrh	r3, [r3, #12]
 8011d66:	461a      	mov	r2, r3
 8011d68:	2100      	movs	r1, #0
 8011d6a:	f7ff fda8 	bl	80118be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	3338      	adds	r3, #56	; 0x38
 8011d72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011d76:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7ff fd37 	bl	80117ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	3338      	adds	r3, #56	; 0x38
 8011d84:	4921      	ldr	r1, [pc, #132]	; (8011e0c <sync_fs+0xd8>)
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7ff fd4c 	bl	8011824 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	3338      	adds	r3, #56	; 0x38
 8011d90:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011d94:	491e      	ldr	r1, [pc, #120]	; (8011e10 <sync_fs+0xdc>)
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7ff fd44 	bl	8011824 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	3338      	adds	r3, #56	; 0x38
 8011da0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	695b      	ldr	r3, [r3, #20]
 8011da8:	4619      	mov	r1, r3
 8011daa:	4610      	mov	r0, r2
 8011dac:	f7ff fd3a 	bl	8011824 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	3338      	adds	r3, #56	; 0x38
 8011db4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	691b      	ldr	r3, [r3, #16]
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	f7ff fd30 	bl	8011824 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc8:	1c5a      	adds	r2, r3, #1
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	7858      	ldrb	r0, [r3, #1]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ddc:	2301      	movs	r3, #1
 8011dde:	f7ff fc8d 	bl	80116fc <disk_write>
			fs->fsi_flag = 0;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2200      	movs	r2, #0
 8011de6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	785b      	ldrb	r3, [r3, #1]
 8011dec:	2200      	movs	r2, #0
 8011dee:	2100      	movs	r1, #0
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7ff fca3 	bl	801173c <disk_ioctl>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d001      	beq.n	8011e00 <sync_fs+0xcc>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3710      	adds	r7, #16
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	41615252 	.word	0x41615252
 8011e10:	61417272 	.word	0x61417272

08011e14 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	3b02      	subs	r3, #2
 8011e22:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	69db      	ldr	r3, [r3, #28]
 8011e28:	3b02      	subs	r3, #2
 8011e2a:	683a      	ldr	r2, [r7, #0]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d301      	bcc.n	8011e34 <clust2sect+0x20>
 8011e30:	2300      	movs	r3, #0
 8011e32:	e008      	b.n	8011e46 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	895b      	ldrh	r3, [r3, #10]
 8011e38:	461a      	mov	r2, r3
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	fb03 f202 	mul.w	r2, r3, r2
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e44:	4413      	add	r3, r2
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	370c      	adds	r7, #12
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e50:	4770      	bx	lr

08011e52 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011e52:	b580      	push	{r7, lr}
 8011e54:	b086      	sub	sp, #24
 8011e56:	af00      	add	r7, sp, #0
 8011e58:	6078      	str	r0, [r7, #4]
 8011e5a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d904      	bls.n	8011e72 <get_fat+0x20>
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	69db      	ldr	r3, [r3, #28]
 8011e6c:	683a      	ldr	r2, [r7, #0]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d302      	bcc.n	8011e78 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011e72:	2301      	movs	r3, #1
 8011e74:	617b      	str	r3, [r7, #20]
 8011e76:	e0b7      	b.n	8011fe8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011e78:	f04f 33ff 	mov.w	r3, #4294967295
 8011e7c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	2b02      	cmp	r3, #2
 8011e84:	d05a      	beq.n	8011f3c <get_fat+0xea>
 8011e86:	2b03      	cmp	r3, #3
 8011e88:	d07d      	beq.n	8011f86 <get_fat+0x134>
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	f040 80a2 	bne.w	8011fd4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	60fb      	str	r3, [r7, #12]
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	085b      	lsrs	r3, r3, #1
 8011e98:	68fa      	ldr	r2, [r7, #12]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	899b      	ldrh	r3, [r3, #12]
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8011eae:	4413      	add	r3, r2
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	6938      	ldr	r0, [r7, #16]
 8011eb4:	f7ff ff10 	bl	8011cd8 <move_window>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	f040 808d 	bne.w	8011fda <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	1c5a      	adds	r2, r3, #1
 8011ec4:	60fa      	str	r2, [r7, #12]
 8011ec6:	693a      	ldr	r2, [r7, #16]
 8011ec8:	8992      	ldrh	r2, [r2, #12]
 8011eca:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ece:	fb02 f201 	mul.w	r2, r2, r1
 8011ed2:	1a9b      	subs	r3, r3, r2
 8011ed4:	693a      	ldr	r2, [r7, #16]
 8011ed6:	4413      	add	r3, r2
 8011ed8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011edc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	899b      	ldrh	r3, [r3, #12]
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8011eee:	4413      	add	r3, r2
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	6938      	ldr	r0, [r7, #16]
 8011ef4:	f7ff fef0 	bl	8011cd8 <move_window>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d16f      	bne.n	8011fde <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	899b      	ldrh	r3, [r3, #12]
 8011f02:	461a      	mov	r2, r3
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f0a:	fb02 f201 	mul.w	r2, r2, r1
 8011f0e:	1a9b      	subs	r3, r3, r2
 8011f10:	693a      	ldr	r2, [r7, #16]
 8011f12:	4413      	add	r3, r2
 8011f14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011f18:	021b      	lsls	r3, r3, #8
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	4313      	orrs	r3, r2
 8011f20:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	f003 0301 	and.w	r3, r3, #1
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d002      	beq.n	8011f32 <get_fat+0xe0>
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	091b      	lsrs	r3, r3, #4
 8011f30:	e002      	b.n	8011f38 <get_fat+0xe6>
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f38:	617b      	str	r3, [r7, #20]
			break;
 8011f3a:	e055      	b.n	8011fe8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	899b      	ldrh	r3, [r3, #12]
 8011f44:	085b      	lsrs	r3, r3, #1
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	4619      	mov	r1, r3
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f50:	4413      	add	r3, r2
 8011f52:	4619      	mov	r1, r3
 8011f54:	6938      	ldr	r0, [r7, #16]
 8011f56:	f7ff febf 	bl	8011cd8 <move_window>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d140      	bne.n	8011fe2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	005b      	lsls	r3, r3, #1
 8011f6a:	693a      	ldr	r2, [r7, #16]
 8011f6c:	8992      	ldrh	r2, [r2, #12]
 8011f6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f72:	fb02 f200 	mul.w	r2, r2, r0
 8011f76:	1a9b      	subs	r3, r3, r2
 8011f78:	440b      	add	r3, r1
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7ff fbfc 	bl	8011778 <ld_word>
 8011f80:	4603      	mov	r3, r0
 8011f82:	617b      	str	r3, [r7, #20]
			break;
 8011f84:	e030      	b.n	8011fe8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	899b      	ldrh	r3, [r3, #12]
 8011f8e:	089b      	lsrs	r3, r3, #2
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	4619      	mov	r1, r3
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f9a:	4413      	add	r3, r2
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	6938      	ldr	r0, [r7, #16]
 8011fa0:	f7ff fe9a 	bl	8011cd8 <move_window>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d11d      	bne.n	8011fe6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	693a      	ldr	r2, [r7, #16]
 8011fb6:	8992      	ldrh	r2, [r2, #12]
 8011fb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fbc:	fb02 f200 	mul.w	r2, r2, r0
 8011fc0:	1a9b      	subs	r3, r3, r2
 8011fc2:	440b      	add	r3, r1
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7ff fbef 	bl	80117a8 <ld_dword>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011fd0:	617b      	str	r3, [r7, #20]
			break;
 8011fd2:	e009      	b.n	8011fe8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	617b      	str	r3, [r7, #20]
 8011fd8:	e006      	b.n	8011fe8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fda:	bf00      	nop
 8011fdc:	e004      	b.n	8011fe8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fde:	bf00      	nop
 8011fe0:	e002      	b.n	8011fe8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011fe2:	bf00      	nop
 8011fe4:	e000      	b.n	8011fe8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011fe6:	bf00      	nop
		}
	}

	return val;
 8011fe8:	697b      	ldr	r3, [r7, #20]
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3718      	adds	r7, #24
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}

08011ff2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011ff2:	b590      	push	{r4, r7, lr}
 8011ff4:	b089      	sub	sp, #36	; 0x24
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	60f8      	str	r0, [r7, #12]
 8011ffa:	60b9      	str	r1, [r7, #8]
 8011ffc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011ffe:	2302      	movs	r3, #2
 8012000:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	2b01      	cmp	r3, #1
 8012006:	f240 8106 	bls.w	8012216 <put_fat+0x224>
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	69db      	ldr	r3, [r3, #28]
 801200e:	68ba      	ldr	r2, [r7, #8]
 8012010:	429a      	cmp	r2, r3
 8012012:	f080 8100 	bcs.w	8012216 <put_fat+0x224>
		switch (fs->fs_type) {
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	2b02      	cmp	r3, #2
 801201c:	f000 8088 	beq.w	8012130 <put_fat+0x13e>
 8012020:	2b03      	cmp	r3, #3
 8012022:	f000 80b0 	beq.w	8012186 <put_fat+0x194>
 8012026:	2b01      	cmp	r3, #1
 8012028:	f040 80f5 	bne.w	8012216 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	61bb      	str	r3, [r7, #24]
 8012030:	69bb      	ldr	r3, [r7, #24]
 8012032:	085b      	lsrs	r3, r3, #1
 8012034:	69ba      	ldr	r2, [r7, #24]
 8012036:	4413      	add	r3, r2
 8012038:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	899b      	ldrh	r3, [r3, #12]
 8012042:	4619      	mov	r1, r3
 8012044:	69bb      	ldr	r3, [r7, #24]
 8012046:	fbb3 f3f1 	udiv	r3, r3, r1
 801204a:	4413      	add	r3, r2
 801204c:	4619      	mov	r1, r3
 801204e:	68f8      	ldr	r0, [r7, #12]
 8012050:	f7ff fe42 	bl	8011cd8 <move_window>
 8012054:	4603      	mov	r3, r0
 8012056:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012058:	7ffb      	ldrb	r3, [r7, #31]
 801205a:	2b00      	cmp	r3, #0
 801205c:	f040 80d4 	bne.w	8012208 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012066:	69bb      	ldr	r3, [r7, #24]
 8012068:	1c5a      	adds	r2, r3, #1
 801206a:	61ba      	str	r2, [r7, #24]
 801206c:	68fa      	ldr	r2, [r7, #12]
 801206e:	8992      	ldrh	r2, [r2, #12]
 8012070:	fbb3 f0f2 	udiv	r0, r3, r2
 8012074:	fb02 f200 	mul.w	r2, r2, r0
 8012078:	1a9b      	subs	r3, r3, r2
 801207a:	440b      	add	r3, r1
 801207c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	f003 0301 	and.w	r3, r3, #1
 8012084:	2b00      	cmp	r3, #0
 8012086:	d00d      	beq.n	80120a4 <put_fat+0xb2>
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	b25b      	sxtb	r3, r3
 801208e:	f003 030f 	and.w	r3, r3, #15
 8012092:	b25a      	sxtb	r2, r3
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	b2db      	uxtb	r3, r3
 8012098:	011b      	lsls	r3, r3, #4
 801209a:	b25b      	sxtb	r3, r3
 801209c:	4313      	orrs	r3, r2
 801209e:	b25b      	sxtb	r3, r3
 80120a0:	b2db      	uxtb	r3, r3
 80120a2:	e001      	b.n	80120a8 <put_fat+0xb6>
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	697a      	ldr	r2, [r7, #20]
 80120aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	2201      	movs	r2, #1
 80120b0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	899b      	ldrh	r3, [r3, #12]
 80120ba:	4619      	mov	r1, r3
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	fbb3 f3f1 	udiv	r3, r3, r1
 80120c2:	4413      	add	r3, r2
 80120c4:	4619      	mov	r1, r3
 80120c6:	68f8      	ldr	r0, [r7, #12]
 80120c8:	f7ff fe06 	bl	8011cd8 <move_window>
 80120cc:	4603      	mov	r3, r0
 80120ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120d0:	7ffb      	ldrb	r3, [r7, #31]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	f040 809a 	bne.w	801220c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	899b      	ldrh	r3, [r3, #12]
 80120e2:	461a      	mov	r2, r3
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80120ea:	fb02 f200 	mul.w	r2, r2, r0
 80120ee:	1a9b      	subs	r3, r3, r2
 80120f0:	440b      	add	r3, r1
 80120f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	f003 0301 	and.w	r3, r3, #1
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d003      	beq.n	8012106 <put_fat+0x114>
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	091b      	lsrs	r3, r3, #4
 8012102:	b2db      	uxtb	r3, r3
 8012104:	e00e      	b.n	8012124 <put_fat+0x132>
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	b25b      	sxtb	r3, r3
 801210c:	f023 030f 	bic.w	r3, r3, #15
 8012110:	b25a      	sxtb	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	0a1b      	lsrs	r3, r3, #8
 8012116:	b25b      	sxtb	r3, r3
 8012118:	f003 030f 	and.w	r3, r3, #15
 801211c:	b25b      	sxtb	r3, r3
 801211e:	4313      	orrs	r3, r2
 8012120:	b25b      	sxtb	r3, r3
 8012122:	b2db      	uxtb	r3, r3
 8012124:	697a      	ldr	r2, [r7, #20]
 8012126:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	2201      	movs	r2, #1
 801212c:	70da      	strb	r2, [r3, #3]
			break;
 801212e:	e072      	b.n	8012216 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	899b      	ldrh	r3, [r3, #12]
 8012138:	085b      	lsrs	r3, r3, #1
 801213a:	b29b      	uxth	r3, r3
 801213c:	4619      	mov	r1, r3
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	fbb3 f3f1 	udiv	r3, r3, r1
 8012144:	4413      	add	r3, r2
 8012146:	4619      	mov	r1, r3
 8012148:	68f8      	ldr	r0, [r7, #12]
 801214a:	f7ff fdc5 	bl	8011cd8 <move_window>
 801214e:	4603      	mov	r3, r0
 8012150:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012152:	7ffb      	ldrb	r3, [r7, #31]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d15b      	bne.n	8012210 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	005b      	lsls	r3, r3, #1
 8012162:	68fa      	ldr	r2, [r7, #12]
 8012164:	8992      	ldrh	r2, [r2, #12]
 8012166:	fbb3 f0f2 	udiv	r0, r3, r2
 801216a:	fb02 f200 	mul.w	r2, r2, r0
 801216e:	1a9b      	subs	r3, r3, r2
 8012170:	440b      	add	r3, r1
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	b292      	uxth	r2, r2
 8012176:	4611      	mov	r1, r2
 8012178:	4618      	mov	r0, r3
 801217a:	f7ff fb38 	bl	80117ee <st_word>
			fs->wflag = 1;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2201      	movs	r2, #1
 8012182:	70da      	strb	r2, [r3, #3]
			break;
 8012184:	e047      	b.n	8012216 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	899b      	ldrh	r3, [r3, #12]
 801218e:	089b      	lsrs	r3, r3, #2
 8012190:	b29b      	uxth	r3, r3
 8012192:	4619      	mov	r1, r3
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	fbb3 f3f1 	udiv	r3, r3, r1
 801219a:	4413      	add	r3, r2
 801219c:	4619      	mov	r1, r3
 801219e:	68f8      	ldr	r0, [r7, #12]
 80121a0:	f7ff fd9a 	bl	8011cd8 <move_window>
 80121a4:	4603      	mov	r3, r0
 80121a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80121a8:	7ffb      	ldrb	r3, [r7, #31]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d132      	bne.n	8012214 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	009b      	lsls	r3, r3, #2
 80121be:	68fa      	ldr	r2, [r7, #12]
 80121c0:	8992      	ldrh	r2, [r2, #12]
 80121c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80121c6:	fb02 f200 	mul.w	r2, r2, r0
 80121ca:	1a9b      	subs	r3, r3, r2
 80121cc:	440b      	add	r3, r1
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7ff faea 	bl	80117a8 <ld_dword>
 80121d4:	4603      	mov	r3, r0
 80121d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80121da:	4323      	orrs	r3, r4
 80121dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	009b      	lsls	r3, r3, #2
 80121e8:	68fa      	ldr	r2, [r7, #12]
 80121ea:	8992      	ldrh	r2, [r2, #12]
 80121ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80121f0:	fb02 f200 	mul.w	r2, r2, r0
 80121f4:	1a9b      	subs	r3, r3, r2
 80121f6:	440b      	add	r3, r1
 80121f8:	6879      	ldr	r1, [r7, #4]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7ff fb12 	bl	8011824 <st_dword>
			fs->wflag = 1;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2201      	movs	r2, #1
 8012204:	70da      	strb	r2, [r3, #3]
			break;
 8012206:	e006      	b.n	8012216 <put_fat+0x224>
			if (res != FR_OK) break;
 8012208:	bf00      	nop
 801220a:	e004      	b.n	8012216 <put_fat+0x224>
			if (res != FR_OK) break;
 801220c:	bf00      	nop
 801220e:	e002      	b.n	8012216 <put_fat+0x224>
			if (res != FR_OK) break;
 8012210:	bf00      	nop
 8012212:	e000      	b.n	8012216 <put_fat+0x224>
			if (res != FR_OK) break;
 8012214:	bf00      	nop
		}
	}
	return res;
 8012216:	7ffb      	ldrb	r3, [r7, #31]
}
 8012218:	4618      	mov	r0, r3
 801221a:	3724      	adds	r7, #36	; 0x24
 801221c:	46bd      	mov	sp, r7
 801221e:	bd90      	pop	{r4, r7, pc}

08012220 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b088      	sub	sp, #32
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801222c:	2300      	movs	r3, #0
 801222e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	2b01      	cmp	r3, #1
 801223a:	d904      	bls.n	8012246 <remove_chain+0x26>
 801223c:	69bb      	ldr	r3, [r7, #24]
 801223e:	69db      	ldr	r3, [r3, #28]
 8012240:	68ba      	ldr	r2, [r7, #8]
 8012242:	429a      	cmp	r2, r3
 8012244:	d301      	bcc.n	801224a <remove_chain+0x2a>
 8012246:	2302      	movs	r3, #2
 8012248:	e04b      	b.n	80122e2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d00c      	beq.n	801226a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012250:	f04f 32ff 	mov.w	r2, #4294967295
 8012254:	6879      	ldr	r1, [r7, #4]
 8012256:	69b8      	ldr	r0, [r7, #24]
 8012258:	f7ff fecb 	bl	8011ff2 <put_fat>
 801225c:	4603      	mov	r3, r0
 801225e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012260:	7ffb      	ldrb	r3, [r7, #31]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d001      	beq.n	801226a <remove_chain+0x4a>
 8012266:	7ffb      	ldrb	r3, [r7, #31]
 8012268:	e03b      	b.n	80122e2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801226a:	68b9      	ldr	r1, [r7, #8]
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f7ff fdf0 	bl	8011e52 <get_fat>
 8012272:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d031      	beq.n	80122de <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	2b01      	cmp	r3, #1
 801227e:	d101      	bne.n	8012284 <remove_chain+0x64>
 8012280:	2302      	movs	r3, #2
 8012282:	e02e      	b.n	80122e2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801228a:	d101      	bne.n	8012290 <remove_chain+0x70>
 801228c:	2301      	movs	r3, #1
 801228e:	e028      	b.n	80122e2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012290:	2200      	movs	r2, #0
 8012292:	68b9      	ldr	r1, [r7, #8]
 8012294:	69b8      	ldr	r0, [r7, #24]
 8012296:	f7ff feac 	bl	8011ff2 <put_fat>
 801229a:	4603      	mov	r3, r0
 801229c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801229e:	7ffb      	ldrb	r3, [r7, #31]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d001      	beq.n	80122a8 <remove_chain+0x88>
 80122a4:	7ffb      	ldrb	r3, [r7, #31]
 80122a6:	e01c      	b.n	80122e2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	695a      	ldr	r2, [r3, #20]
 80122ac:	69bb      	ldr	r3, [r7, #24]
 80122ae:	69db      	ldr	r3, [r3, #28]
 80122b0:	3b02      	subs	r3, #2
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d20b      	bcs.n	80122ce <remove_chain+0xae>
			fs->free_clst++;
 80122b6:	69bb      	ldr	r3, [r7, #24]
 80122b8:	695b      	ldr	r3, [r3, #20]
 80122ba:	1c5a      	adds	r2, r3, #1
 80122bc:	69bb      	ldr	r3, [r7, #24]
 80122be:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	791b      	ldrb	r3, [r3, #4]
 80122c4:	f043 0301 	orr.w	r3, r3, #1
 80122c8:	b2da      	uxtb	r2, r3
 80122ca:	69bb      	ldr	r3, [r7, #24]
 80122cc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80122d2:	69bb      	ldr	r3, [r7, #24]
 80122d4:	69db      	ldr	r3, [r3, #28]
 80122d6:	68ba      	ldr	r2, [r7, #8]
 80122d8:	429a      	cmp	r2, r3
 80122da:	d3c6      	bcc.n	801226a <remove_chain+0x4a>
 80122dc:	e000      	b.n	80122e0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80122de:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80122e0:	2300      	movs	r3, #0
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3720      	adds	r7, #32
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}

080122ea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80122ea:	b580      	push	{r7, lr}
 80122ec:	b088      	sub	sp, #32
 80122ee:	af00      	add	r7, sp, #0
 80122f0:	6078      	str	r0, [r7, #4]
 80122f2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d10d      	bne.n	801231c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	691b      	ldr	r3, [r3, #16]
 8012304:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012306:	69bb      	ldr	r3, [r7, #24]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d004      	beq.n	8012316 <create_chain+0x2c>
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	69db      	ldr	r3, [r3, #28]
 8012310:	69ba      	ldr	r2, [r7, #24]
 8012312:	429a      	cmp	r2, r3
 8012314:	d31b      	bcc.n	801234e <create_chain+0x64>
 8012316:	2301      	movs	r3, #1
 8012318:	61bb      	str	r3, [r7, #24]
 801231a:	e018      	b.n	801234e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801231c:	6839      	ldr	r1, [r7, #0]
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f7ff fd97 	bl	8011e52 <get_fat>
 8012324:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	2b01      	cmp	r3, #1
 801232a:	d801      	bhi.n	8012330 <create_chain+0x46>
 801232c:	2301      	movs	r3, #1
 801232e:	e070      	b.n	8012412 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012336:	d101      	bne.n	801233c <create_chain+0x52>
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	e06a      	b.n	8012412 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801233c:	693b      	ldr	r3, [r7, #16]
 801233e:	69db      	ldr	r3, [r3, #28]
 8012340:	68fa      	ldr	r2, [r7, #12]
 8012342:	429a      	cmp	r2, r3
 8012344:	d201      	bcs.n	801234a <create_chain+0x60>
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	e063      	b.n	8012412 <create_chain+0x128>
		scl = clst;
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	3301      	adds	r3, #1
 8012356:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	69db      	ldr	r3, [r3, #28]
 801235c:	69fa      	ldr	r2, [r7, #28]
 801235e:	429a      	cmp	r2, r3
 8012360:	d307      	bcc.n	8012372 <create_chain+0x88>
				ncl = 2;
 8012362:	2302      	movs	r3, #2
 8012364:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012366:	69fa      	ldr	r2, [r7, #28]
 8012368:	69bb      	ldr	r3, [r7, #24]
 801236a:	429a      	cmp	r2, r3
 801236c:	d901      	bls.n	8012372 <create_chain+0x88>
 801236e:	2300      	movs	r3, #0
 8012370:	e04f      	b.n	8012412 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012372:	69f9      	ldr	r1, [r7, #28]
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f7ff fd6c 	bl	8011e52 <get_fat>
 801237a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d00e      	beq.n	80123a0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	2b01      	cmp	r3, #1
 8012386:	d003      	beq.n	8012390 <create_chain+0xa6>
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801238e:	d101      	bne.n	8012394 <create_chain+0xaa>
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	e03e      	b.n	8012412 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012394:	69fa      	ldr	r2, [r7, #28]
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	429a      	cmp	r2, r3
 801239a:	d1da      	bne.n	8012352 <create_chain+0x68>
 801239c:	2300      	movs	r3, #0
 801239e:	e038      	b.n	8012412 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80123a0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80123a2:	f04f 32ff 	mov.w	r2, #4294967295
 80123a6:	69f9      	ldr	r1, [r7, #28]
 80123a8:	6938      	ldr	r0, [r7, #16]
 80123aa:	f7ff fe22 	bl	8011ff2 <put_fat>
 80123ae:	4603      	mov	r3, r0
 80123b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80123b2:	7dfb      	ldrb	r3, [r7, #23]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d109      	bne.n	80123cc <create_chain+0xe2>
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d006      	beq.n	80123cc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80123be:	69fa      	ldr	r2, [r7, #28]
 80123c0:	6839      	ldr	r1, [r7, #0]
 80123c2:	6938      	ldr	r0, [r7, #16]
 80123c4:	f7ff fe15 	bl	8011ff2 <put_fat>
 80123c8:	4603      	mov	r3, r0
 80123ca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80123cc:	7dfb      	ldrb	r3, [r7, #23]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d116      	bne.n	8012400 <create_chain+0x116>
		fs->last_clst = ncl;
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	69fa      	ldr	r2, [r7, #28]
 80123d6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	695a      	ldr	r2, [r3, #20]
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	69db      	ldr	r3, [r3, #28]
 80123e0:	3b02      	subs	r3, #2
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d804      	bhi.n	80123f0 <create_chain+0x106>
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	695b      	ldr	r3, [r3, #20]
 80123ea:	1e5a      	subs	r2, r3, #1
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	791b      	ldrb	r3, [r3, #4]
 80123f4:	f043 0301 	orr.w	r3, r3, #1
 80123f8:	b2da      	uxtb	r2, r3
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	711a      	strb	r2, [r3, #4]
 80123fe:	e007      	b.n	8012410 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012400:	7dfb      	ldrb	r3, [r7, #23]
 8012402:	2b01      	cmp	r3, #1
 8012404:	d102      	bne.n	801240c <create_chain+0x122>
 8012406:	f04f 33ff 	mov.w	r3, #4294967295
 801240a:	e000      	b.n	801240e <create_chain+0x124>
 801240c:	2301      	movs	r3, #1
 801240e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012410:	69fb      	ldr	r3, [r7, #28]
}
 8012412:	4618      	mov	r0, r3
 8012414:	3720      	adds	r7, #32
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}

0801241a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801241a:	b480      	push	{r7}
 801241c:	b087      	sub	sp, #28
 801241e:	af00      	add	r7, sp, #0
 8012420:	6078      	str	r0, [r7, #4]
 8012422:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801242e:	3304      	adds	r3, #4
 8012430:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	899b      	ldrh	r3, [r3, #12]
 8012436:	461a      	mov	r2, r3
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	fbb3 f3f2 	udiv	r3, r3, r2
 801243e:	68fa      	ldr	r2, [r7, #12]
 8012440:	8952      	ldrh	r2, [r2, #10]
 8012442:	fbb3 f3f2 	udiv	r3, r3, r2
 8012446:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	1d1a      	adds	r2, r3, #4
 801244c:	613a      	str	r2, [r7, #16]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d101      	bne.n	801245c <clmt_clust+0x42>
 8012458:	2300      	movs	r3, #0
 801245a:	e010      	b.n	801247e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801245c:	697a      	ldr	r2, [r7, #20]
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	429a      	cmp	r2, r3
 8012462:	d307      	bcc.n	8012474 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012464:	697a      	ldr	r2, [r7, #20]
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	1ad3      	subs	r3, r2, r3
 801246a:	617b      	str	r3, [r7, #20]
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	3304      	adds	r3, #4
 8012470:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012472:	e7e9      	b.n	8012448 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012474:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	681a      	ldr	r2, [r3, #0]
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	4413      	add	r3, r2
}
 801247e:	4618      	mov	r0, r3
 8012480:	371c      	adds	r7, #28
 8012482:	46bd      	mov	sp, r7
 8012484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012488:	4770      	bx	lr

0801248a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b086      	sub	sp, #24
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
 8012492:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80124a0:	d204      	bcs.n	80124ac <dir_sdi+0x22>
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	f003 031f 	and.w	r3, r3, #31
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d001      	beq.n	80124b0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80124ac:	2302      	movs	r3, #2
 80124ae:	e071      	b.n	8012594 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	683a      	ldr	r2, [r7, #0]
 80124b4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	689b      	ldr	r3, [r3, #8]
 80124ba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <dir_sdi+0x46>
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	2b02      	cmp	r3, #2
 80124c8:	d902      	bls.n	80124d0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d10c      	bne.n	80124f0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	095b      	lsrs	r3, r3, #5
 80124da:	693a      	ldr	r2, [r7, #16]
 80124dc:	8912      	ldrh	r2, [r2, #8]
 80124de:	4293      	cmp	r3, r2
 80124e0:	d301      	bcc.n	80124e6 <dir_sdi+0x5c>
 80124e2:	2302      	movs	r3, #2
 80124e4:	e056      	b.n	8012594 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	61da      	str	r2, [r3, #28]
 80124ee:	e02d      	b.n	801254c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	895b      	ldrh	r3, [r3, #10]
 80124f4:	461a      	mov	r2, r3
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	899b      	ldrh	r3, [r3, #12]
 80124fa:	fb03 f302 	mul.w	r3, r3, r2
 80124fe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012500:	e019      	b.n	8012536 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6979      	ldr	r1, [r7, #20]
 8012506:	4618      	mov	r0, r3
 8012508:	f7ff fca3 	bl	8011e52 <get_fat>
 801250c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012514:	d101      	bne.n	801251a <dir_sdi+0x90>
 8012516:	2301      	movs	r3, #1
 8012518:	e03c      	b.n	8012594 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	2b01      	cmp	r3, #1
 801251e:	d904      	bls.n	801252a <dir_sdi+0xa0>
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	69db      	ldr	r3, [r3, #28]
 8012524:	697a      	ldr	r2, [r7, #20]
 8012526:	429a      	cmp	r2, r3
 8012528:	d301      	bcc.n	801252e <dir_sdi+0xa4>
 801252a:	2302      	movs	r3, #2
 801252c:	e032      	b.n	8012594 <dir_sdi+0x10a>
			ofs -= csz;
 801252e:	683a      	ldr	r2, [r7, #0]
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	1ad3      	subs	r3, r2, r3
 8012534:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012536:	683a      	ldr	r2, [r7, #0]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	429a      	cmp	r2, r3
 801253c:	d2e1      	bcs.n	8012502 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801253e:	6979      	ldr	r1, [r7, #20]
 8012540:	6938      	ldr	r0, [r7, #16]
 8012542:	f7ff fc67 	bl	8011e14 <clust2sect>
 8012546:	4602      	mov	r2, r0
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	697a      	ldr	r2, [r7, #20]
 8012550:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	69db      	ldr	r3, [r3, #28]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d101      	bne.n	801255e <dir_sdi+0xd4>
 801255a:	2302      	movs	r3, #2
 801255c:	e01a      	b.n	8012594 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	69da      	ldr	r2, [r3, #28]
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	899b      	ldrh	r3, [r3, #12]
 8012566:	4619      	mov	r1, r3
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	fbb3 f3f1 	udiv	r3, r3, r1
 801256e:	441a      	add	r2, r3
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	899b      	ldrh	r3, [r3, #12]
 801257e:	461a      	mov	r2, r3
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	fbb3 f0f2 	udiv	r0, r3, r2
 8012586:	fb02 f200 	mul.w	r2, r2, r0
 801258a:	1a9b      	subs	r3, r3, r2
 801258c:	18ca      	adds	r2, r1, r3
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012592:	2300      	movs	r3, #0
}
 8012594:	4618      	mov	r0, r3
 8012596:	3718      	adds	r7, #24
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b086      	sub	sp, #24
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	695b      	ldr	r3, [r3, #20]
 80125b0:	3320      	adds	r3, #32
 80125b2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	69db      	ldr	r3, [r3, #28]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d003      	beq.n	80125c4 <dir_next+0x28>
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80125c2:	d301      	bcc.n	80125c8 <dir_next+0x2c>
 80125c4:	2304      	movs	r3, #4
 80125c6:	e0bb      	b.n	8012740 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	899b      	ldrh	r3, [r3, #12]
 80125cc:	461a      	mov	r2, r3
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80125d4:	fb02 f201 	mul.w	r2, r2, r1
 80125d8:	1a9b      	subs	r3, r3, r2
 80125da:	2b00      	cmp	r3, #0
 80125dc:	f040 809d 	bne.w	801271a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	69db      	ldr	r3, [r3, #28]
 80125e4:	1c5a      	adds	r2, r3, #1
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	699b      	ldr	r3, [r3, #24]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d10b      	bne.n	801260a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	095b      	lsrs	r3, r3, #5
 80125f6:	68fa      	ldr	r2, [r7, #12]
 80125f8:	8912      	ldrh	r2, [r2, #8]
 80125fa:	4293      	cmp	r3, r2
 80125fc:	f0c0 808d 	bcc.w	801271a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2200      	movs	r2, #0
 8012604:	61da      	str	r2, [r3, #28]
 8012606:	2304      	movs	r3, #4
 8012608:	e09a      	b.n	8012740 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	899b      	ldrh	r3, [r3, #12]
 801260e:	461a      	mov	r2, r3
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	fbb3 f3f2 	udiv	r3, r3, r2
 8012616:	68fa      	ldr	r2, [r7, #12]
 8012618:	8952      	ldrh	r2, [r2, #10]
 801261a:	3a01      	subs	r2, #1
 801261c:	4013      	ands	r3, r2
 801261e:	2b00      	cmp	r3, #0
 8012620:	d17b      	bne.n	801271a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	699b      	ldr	r3, [r3, #24]
 8012628:	4619      	mov	r1, r3
 801262a:	4610      	mov	r0, r2
 801262c:	f7ff fc11 	bl	8011e52 <get_fat>
 8012630:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	2b01      	cmp	r3, #1
 8012636:	d801      	bhi.n	801263c <dir_next+0xa0>
 8012638:	2302      	movs	r3, #2
 801263a:	e081      	b.n	8012740 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012642:	d101      	bne.n	8012648 <dir_next+0xac>
 8012644:	2301      	movs	r3, #1
 8012646:	e07b      	b.n	8012740 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	69db      	ldr	r3, [r3, #28]
 801264c:	697a      	ldr	r2, [r7, #20]
 801264e:	429a      	cmp	r2, r3
 8012650:	d359      	bcc.n	8012706 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d104      	bne.n	8012662 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2200      	movs	r2, #0
 801265c:	61da      	str	r2, [r3, #28]
 801265e:	2304      	movs	r3, #4
 8012660:	e06e      	b.n	8012740 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012662:	687a      	ldr	r2, [r7, #4]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	699b      	ldr	r3, [r3, #24]
 8012668:	4619      	mov	r1, r3
 801266a:	4610      	mov	r0, r2
 801266c:	f7ff fe3d 	bl	80122ea <create_chain>
 8012670:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d101      	bne.n	801267c <dir_next+0xe0>
 8012678:	2307      	movs	r3, #7
 801267a:	e061      	b.n	8012740 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	2b01      	cmp	r3, #1
 8012680:	d101      	bne.n	8012686 <dir_next+0xea>
 8012682:	2302      	movs	r3, #2
 8012684:	e05c      	b.n	8012740 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801268c:	d101      	bne.n	8012692 <dir_next+0xf6>
 801268e:	2301      	movs	r3, #1
 8012690:	e056      	b.n	8012740 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012692:	68f8      	ldr	r0, [r7, #12]
 8012694:	f7ff fadc 	bl	8011c50 <sync_window>
 8012698:	4603      	mov	r3, r0
 801269a:	2b00      	cmp	r3, #0
 801269c:	d001      	beq.n	80126a2 <dir_next+0x106>
 801269e:	2301      	movs	r3, #1
 80126a0:	e04e      	b.n	8012740 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	899b      	ldrh	r3, [r3, #12]
 80126ac:	461a      	mov	r2, r3
 80126ae:	2100      	movs	r1, #0
 80126b0:	f7ff f905 	bl	80118be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126b4:	2300      	movs	r3, #0
 80126b6:	613b      	str	r3, [r7, #16]
 80126b8:	6979      	ldr	r1, [r7, #20]
 80126ba:	68f8      	ldr	r0, [r7, #12]
 80126bc:	f7ff fbaa 	bl	8011e14 <clust2sect>
 80126c0:	4602      	mov	r2, r0
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	635a      	str	r2, [r3, #52]	; 0x34
 80126c6:	e012      	b.n	80126ee <dir_next+0x152>
						fs->wflag = 1;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	2201      	movs	r2, #1
 80126cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80126ce:	68f8      	ldr	r0, [r7, #12]
 80126d0:	f7ff fabe 	bl	8011c50 <sync_window>
 80126d4:	4603      	mov	r3, r0
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d001      	beq.n	80126de <dir_next+0x142>
 80126da:	2301      	movs	r3, #1
 80126dc:	e030      	b.n	8012740 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126de:	693b      	ldr	r3, [r7, #16]
 80126e0:	3301      	adds	r3, #1
 80126e2:	613b      	str	r3, [r7, #16]
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126e8:	1c5a      	adds	r2, r3, #1
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	635a      	str	r2, [r3, #52]	; 0x34
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	895b      	ldrh	r3, [r3, #10]
 80126f2:	461a      	mov	r2, r3
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	4293      	cmp	r3, r2
 80126f8:	d3e6      	bcc.n	80126c8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	1ad2      	subs	r2, r2, r3
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	697a      	ldr	r2, [r7, #20]
 801270a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801270c:	6979      	ldr	r1, [r7, #20]
 801270e:	68f8      	ldr	r0, [r7, #12]
 8012710:	f7ff fb80 	bl	8011e14 <clust2sect>
 8012714:	4602      	mov	r2, r0
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	68ba      	ldr	r2, [r7, #8]
 801271e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	899b      	ldrh	r3, [r3, #12]
 801272a:	461a      	mov	r2, r3
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012732:	fb02 f200 	mul.w	r2, r2, r0
 8012736:	1a9b      	subs	r3, r3, r2
 8012738:	18ca      	adds	r2, r1, r3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801273e:	2300      	movs	r3, #0
}
 8012740:	4618      	mov	r0, r3
 8012742:	3718      	adds	r7, #24
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b086      	sub	sp, #24
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012758:	2100      	movs	r1, #0
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f7ff fe95 	bl	801248a <dir_sdi>
 8012760:	4603      	mov	r3, r0
 8012762:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012764:	7dfb      	ldrb	r3, [r7, #23]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d12b      	bne.n	80127c2 <dir_alloc+0x7a>
		n = 0;
 801276a:	2300      	movs	r3, #0
 801276c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	69db      	ldr	r3, [r3, #28]
 8012772:	4619      	mov	r1, r3
 8012774:	68f8      	ldr	r0, [r7, #12]
 8012776:	f7ff faaf 	bl	8011cd8 <move_window>
 801277a:	4603      	mov	r3, r0
 801277c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801277e:	7dfb      	ldrb	r3, [r7, #23]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d11d      	bne.n	80127c0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6a1b      	ldr	r3, [r3, #32]
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	2be5      	cmp	r3, #229	; 0xe5
 801278c:	d004      	beq.n	8012798 <dir_alloc+0x50>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6a1b      	ldr	r3, [r3, #32]
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d107      	bne.n	80127a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	3301      	adds	r3, #1
 801279c:	613b      	str	r3, [r7, #16]
 801279e:	693a      	ldr	r2, [r7, #16]
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d102      	bne.n	80127ac <dir_alloc+0x64>
 80127a6:	e00c      	b.n	80127c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80127a8:	2300      	movs	r3, #0
 80127aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80127ac:	2101      	movs	r1, #1
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f7ff fef4 	bl	801259c <dir_next>
 80127b4:	4603      	mov	r3, r0
 80127b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80127b8:	7dfb      	ldrb	r3, [r7, #23]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d0d7      	beq.n	801276e <dir_alloc+0x26>
 80127be:	e000      	b.n	80127c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80127c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80127c2:	7dfb      	ldrb	r3, [r7, #23]
 80127c4:	2b04      	cmp	r3, #4
 80127c6:	d101      	bne.n	80127cc <dir_alloc+0x84>
 80127c8:	2307      	movs	r3, #7
 80127ca:	75fb      	strb	r3, [r7, #23]
	return res;
 80127cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3718      	adds	r7, #24
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}

080127d6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80127d6:	b580      	push	{r7, lr}
 80127d8:	b084      	sub	sp, #16
 80127da:	af00      	add	r7, sp, #0
 80127dc:	6078      	str	r0, [r7, #4]
 80127de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	331a      	adds	r3, #26
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7fe ffc7 	bl	8011778 <ld_word>
 80127ea:	4603      	mov	r3, r0
 80127ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	2b03      	cmp	r3, #3
 80127f4:	d109      	bne.n	801280a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	3314      	adds	r3, #20
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7fe ffbc 	bl	8011778 <ld_word>
 8012800:	4603      	mov	r3, r0
 8012802:	041b      	lsls	r3, r3, #16
 8012804:	68fa      	ldr	r2, [r7, #12]
 8012806:	4313      	orrs	r3, r2
 8012808:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801280a:	68fb      	ldr	r3, [r7, #12]
}
 801280c:	4618      	mov	r0, r3
 801280e:	3710      	adds	r7, #16
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b084      	sub	sp, #16
 8012818:	af00      	add	r7, sp, #0
 801281a:	60f8      	str	r0, [r7, #12]
 801281c:	60b9      	str	r1, [r7, #8]
 801281e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	331a      	adds	r3, #26
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	b292      	uxth	r2, r2
 8012828:	4611      	mov	r1, r2
 801282a:	4618      	mov	r0, r3
 801282c:	f7fe ffdf 	bl	80117ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	2b03      	cmp	r3, #3
 8012836:	d109      	bne.n	801284c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	f103 0214 	add.w	r2, r3, #20
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	0c1b      	lsrs	r3, r3, #16
 8012842:	b29b      	uxth	r3, r3
 8012844:	4619      	mov	r1, r3
 8012846:	4610      	mov	r0, r2
 8012848:	f7fe ffd1 	bl	80117ee <st_word>
	}
}
 801284c:	bf00      	nop
 801284e:	3710      	adds	r7, #16
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b086      	sub	sp, #24
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801285e:	2304      	movs	r3, #4
 8012860:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012868:	e03c      	b.n	80128e4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	69db      	ldr	r3, [r3, #28]
 801286e:	4619      	mov	r1, r3
 8012870:	6938      	ldr	r0, [r7, #16]
 8012872:	f7ff fa31 	bl	8011cd8 <move_window>
 8012876:	4603      	mov	r3, r0
 8012878:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801287a:	7dfb      	ldrb	r3, [r7, #23]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d136      	bne.n	80128ee <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6a1b      	ldr	r3, [r3, #32]
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012888:	7bfb      	ldrb	r3, [r7, #15]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d102      	bne.n	8012894 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801288e:	2304      	movs	r3, #4
 8012890:	75fb      	strb	r3, [r7, #23]
 8012892:	e031      	b.n	80128f8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6a1b      	ldr	r3, [r3, #32]
 8012898:	330b      	adds	r3, #11
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128a0:	73bb      	strb	r3, [r7, #14]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	7bba      	ldrb	r2, [r7, #14]
 80128a6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80128a8:	7bfb      	ldrb	r3, [r7, #15]
 80128aa:	2be5      	cmp	r3, #229	; 0xe5
 80128ac:	d011      	beq.n	80128d2 <dir_read+0x7e>
 80128ae:	7bfb      	ldrb	r3, [r7, #15]
 80128b0:	2b2e      	cmp	r3, #46	; 0x2e
 80128b2:	d00e      	beq.n	80128d2 <dir_read+0x7e>
 80128b4:	7bbb      	ldrb	r3, [r7, #14]
 80128b6:	2b0f      	cmp	r3, #15
 80128b8:	d00b      	beq.n	80128d2 <dir_read+0x7e>
 80128ba:	7bbb      	ldrb	r3, [r7, #14]
 80128bc:	f023 0320 	bic.w	r3, r3, #32
 80128c0:	2b08      	cmp	r3, #8
 80128c2:	bf0c      	ite	eq
 80128c4:	2301      	moveq	r3, #1
 80128c6:	2300      	movne	r3, #0
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	461a      	mov	r2, r3
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d00f      	beq.n	80128f2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80128d2:	2100      	movs	r1, #0
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f7ff fe61 	bl	801259c <dir_next>
 80128da:	4603      	mov	r3, r0
 80128dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80128de:	7dfb      	ldrb	r3, [r7, #23]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d108      	bne.n	80128f6 <dir_read+0xa2>
	while (dp->sect) {
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	69db      	ldr	r3, [r3, #28]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d1be      	bne.n	801286a <dir_read+0x16>
 80128ec:	e004      	b.n	80128f8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80128ee:	bf00      	nop
 80128f0:	e002      	b.n	80128f8 <dir_read+0xa4>
				break;
 80128f2:	bf00      	nop
 80128f4:	e000      	b.n	80128f8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80128f6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80128f8:	7dfb      	ldrb	r3, [r7, #23]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d002      	beq.n	8012904 <dir_read+0xb0>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2200      	movs	r2, #0
 8012902:	61da      	str	r2, [r3, #28]
	return res;
 8012904:	7dfb      	ldrb	r3, [r7, #23]
}
 8012906:	4618      	mov	r0, r3
 8012908:	3718      	adds	r7, #24
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}

0801290e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801290e:	b580      	push	{r7, lr}
 8012910:	b086      	sub	sp, #24
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801291c:	2100      	movs	r1, #0
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f7ff fdb3 	bl	801248a <dir_sdi>
 8012924:	4603      	mov	r3, r0
 8012926:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012928:	7dfb      	ldrb	r3, [r7, #23]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d001      	beq.n	8012932 <dir_find+0x24>
 801292e:	7dfb      	ldrb	r3, [r7, #23]
 8012930:	e03e      	b.n	80129b0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	69db      	ldr	r3, [r3, #28]
 8012936:	4619      	mov	r1, r3
 8012938:	6938      	ldr	r0, [r7, #16]
 801293a:	f7ff f9cd 	bl	8011cd8 <move_window>
 801293e:	4603      	mov	r3, r0
 8012940:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012942:	7dfb      	ldrb	r3, [r7, #23]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d12f      	bne.n	80129a8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	6a1b      	ldr	r3, [r3, #32]
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012950:	7bfb      	ldrb	r3, [r7, #15]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d102      	bne.n	801295c <dir_find+0x4e>
 8012956:	2304      	movs	r3, #4
 8012958:	75fb      	strb	r3, [r7, #23]
 801295a:	e028      	b.n	80129ae <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6a1b      	ldr	r3, [r3, #32]
 8012960:	330b      	adds	r3, #11
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012968:	b2da      	uxtb	r2, r3
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	6a1b      	ldr	r3, [r3, #32]
 8012972:	330b      	adds	r3, #11
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	f003 0308 	and.w	r3, r3, #8
 801297a:	2b00      	cmp	r3, #0
 801297c:	d10a      	bne.n	8012994 <dir_find+0x86>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6a18      	ldr	r0, [r3, #32]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	3324      	adds	r3, #36	; 0x24
 8012986:	220b      	movs	r2, #11
 8012988:	4619      	mov	r1, r3
 801298a:	f7fe ffb2 	bl	80118f2 <mem_cmp>
 801298e:	4603      	mov	r3, r0
 8012990:	2b00      	cmp	r3, #0
 8012992:	d00b      	beq.n	80129ac <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012994:	2100      	movs	r1, #0
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f7ff fe00 	bl	801259c <dir_next>
 801299c:	4603      	mov	r3, r0
 801299e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80129a0:	7dfb      	ldrb	r3, [r7, #23]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d0c5      	beq.n	8012932 <dir_find+0x24>
 80129a6:	e002      	b.n	80129ae <dir_find+0xa0>
		if (res != FR_OK) break;
 80129a8:	bf00      	nop
 80129aa:	e000      	b.n	80129ae <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80129ac:	bf00      	nop

	return res;
 80129ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	3718      	adds	r7, #24
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b084      	sub	sp, #16
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80129c6:	2101      	movs	r1, #1
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f7ff febd 	bl	8012748 <dir_alloc>
 80129ce:	4603      	mov	r3, r0
 80129d0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80129d2:	7bfb      	ldrb	r3, [r7, #15]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d11c      	bne.n	8012a12 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	69db      	ldr	r3, [r3, #28]
 80129dc:	4619      	mov	r1, r3
 80129de:	68b8      	ldr	r0, [r7, #8]
 80129e0:	f7ff f97a 	bl	8011cd8 <move_window>
 80129e4:	4603      	mov	r3, r0
 80129e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80129e8:	7bfb      	ldrb	r3, [r7, #15]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d111      	bne.n	8012a12 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6a1b      	ldr	r3, [r3, #32]
 80129f2:	2220      	movs	r2, #32
 80129f4:	2100      	movs	r1, #0
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fe ff61 	bl	80118be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6a18      	ldr	r0, [r3, #32]
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	3324      	adds	r3, #36	; 0x24
 8012a04:	220b      	movs	r2, #11
 8012a06:	4619      	mov	r1, r3
 8012a08:	f7fe ff38 	bl	801187c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	2201      	movs	r2, #1
 8012a10:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3710      	adds	r7, #16
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	69db      	ldr	r3, [r3, #28]
 8012a2e:	4619      	mov	r1, r3
 8012a30:	68f8      	ldr	r0, [r7, #12]
 8012a32:	f7ff f951 	bl	8011cd8 <move_window>
 8012a36:	4603      	mov	r3, r0
 8012a38:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012a3a:	7afb      	ldrb	r3, [r7, #11]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d106      	bne.n	8012a4e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6a1b      	ldr	r3, [r3, #32]
 8012a44:	22e5      	movs	r2, #229	; 0xe5
 8012a46:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3710      	adds	r7, #16
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b088      	sub	sp, #32
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	60fb      	str	r3, [r7, #12]
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	3324      	adds	r3, #36	; 0x24
 8012a6c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012a6e:	220b      	movs	r2, #11
 8012a70:	2120      	movs	r1, #32
 8012a72:	68b8      	ldr	r0, [r7, #8]
 8012a74:	f7fe ff23 	bl	80118be <mem_set>
	si = i = 0; ni = 8;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	613b      	str	r3, [r7, #16]
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	617b      	str	r3, [r7, #20]
 8012a80:	2308      	movs	r3, #8
 8012a82:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012a84:	68fa      	ldr	r2, [r7, #12]
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	4413      	add	r3, r2
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8012a8e:	d12f      	bne.n	8012af0 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	1c5a      	adds	r2, r3, #1
 8012a94:	617a      	str	r2, [r7, #20]
 8012a96:	68fa      	ldr	r2, [r7, #12]
 8012a98:	4413      	add	r3, r2
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012a9e:	7ffb      	ldrb	r3, [r7, #31]
 8012aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8012aa2:	d10a      	bne.n	8012aba <create_name+0x62>
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	2b02      	cmp	r3, #2
 8012aa8:	d807      	bhi.n	8012aba <create_name+0x62>
			sfn[i++] = c;
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	613a      	str	r2, [r7, #16]
 8012ab0:	68ba      	ldr	r2, [r7, #8]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	7ffa      	ldrb	r2, [r7, #31]
 8012ab6:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012ab8:	e7ea      	b.n	8012a90 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012aba:	7ffb      	ldrb	r3, [r7, #31]
 8012abc:	2b2f      	cmp	r3, #47	; 0x2f
 8012abe:	d007      	beq.n	8012ad0 <create_name+0x78>
 8012ac0:	7ffb      	ldrb	r3, [r7, #31]
 8012ac2:	2b5c      	cmp	r3, #92	; 0x5c
 8012ac4:	d004      	beq.n	8012ad0 <create_name+0x78>
 8012ac6:	7ffb      	ldrb	r3, [r7, #31]
 8012ac8:	2b20      	cmp	r3, #32
 8012aca:	d901      	bls.n	8012ad0 <create_name+0x78>
 8012acc:	2306      	movs	r3, #6
 8012ace:	e084      	b.n	8012bda <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012ad0:	68fa      	ldr	r2, [r7, #12]
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	441a      	add	r2, r3
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012ada:	7ffb      	ldrb	r3, [r7, #31]
 8012adc:	2b20      	cmp	r3, #32
 8012ade:	d801      	bhi.n	8012ae4 <create_name+0x8c>
 8012ae0:	2224      	movs	r2, #36	; 0x24
 8012ae2:	e000      	b.n	8012ae6 <create_name+0x8e>
 8012ae4:	2220      	movs	r2, #32
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	330b      	adds	r3, #11
 8012aea:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012aec:	2300      	movs	r3, #0
 8012aee:	e074      	b.n	8012bda <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	1c5a      	adds	r2, r3, #1
 8012af4:	617a      	str	r2, [r7, #20]
 8012af6:	68fa      	ldr	r2, [r7, #12]
 8012af8:	4413      	add	r3, r2
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012afe:	7ffb      	ldrb	r3, [r7, #31]
 8012b00:	2b20      	cmp	r3, #32
 8012b02:	d94e      	bls.n	8012ba2 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012b04:	7ffb      	ldrb	r3, [r7, #31]
 8012b06:	2b2f      	cmp	r3, #47	; 0x2f
 8012b08:	d006      	beq.n	8012b18 <create_name+0xc0>
 8012b0a:	7ffb      	ldrb	r3, [r7, #31]
 8012b0c:	2b5c      	cmp	r3, #92	; 0x5c
 8012b0e:	d110      	bne.n	8012b32 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012b10:	e002      	b.n	8012b18 <create_name+0xc0>
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	3301      	adds	r3, #1
 8012b16:	617b      	str	r3, [r7, #20]
 8012b18:	68fa      	ldr	r2, [r7, #12]
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	4413      	add	r3, r2
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	2b2f      	cmp	r3, #47	; 0x2f
 8012b22:	d0f6      	beq.n	8012b12 <create_name+0xba>
 8012b24:	68fa      	ldr	r2, [r7, #12]
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	4413      	add	r3, r2
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	2b5c      	cmp	r3, #92	; 0x5c
 8012b2e:	d0f0      	beq.n	8012b12 <create_name+0xba>
			break;
 8012b30:	e038      	b.n	8012ba4 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012b32:	7ffb      	ldrb	r3, [r7, #31]
 8012b34:	2b2e      	cmp	r3, #46	; 0x2e
 8012b36:	d003      	beq.n	8012b40 <create_name+0xe8>
 8012b38:	693a      	ldr	r2, [r7, #16]
 8012b3a:	69bb      	ldr	r3, [r7, #24]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d30c      	bcc.n	8012b5a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	2b0b      	cmp	r3, #11
 8012b44:	d002      	beq.n	8012b4c <create_name+0xf4>
 8012b46:	7ffb      	ldrb	r3, [r7, #31]
 8012b48:	2b2e      	cmp	r3, #46	; 0x2e
 8012b4a:	d001      	beq.n	8012b50 <create_name+0xf8>
 8012b4c:	2306      	movs	r3, #6
 8012b4e:	e044      	b.n	8012bda <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012b50:	2308      	movs	r3, #8
 8012b52:	613b      	str	r3, [r7, #16]
 8012b54:	230b      	movs	r3, #11
 8012b56:	61bb      	str	r3, [r7, #24]
			continue;
 8012b58:	e022      	b.n	8012ba0 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012b5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	da04      	bge.n	8012b6c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012b62:	7ffb      	ldrb	r3, [r7, #31]
 8012b64:	3b80      	subs	r3, #128	; 0x80
 8012b66:	4a1f      	ldr	r2, [pc, #124]	; (8012be4 <create_name+0x18c>)
 8012b68:	5cd3      	ldrb	r3, [r2, r3]
 8012b6a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012b6c:	7ffb      	ldrb	r3, [r7, #31]
 8012b6e:	4619      	mov	r1, r3
 8012b70:	481d      	ldr	r0, [pc, #116]	; (8012be8 <create_name+0x190>)
 8012b72:	f7fe fee5 	bl	8011940 <chk_chr>
 8012b76:	4603      	mov	r3, r0
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d001      	beq.n	8012b80 <create_name+0x128>
 8012b7c:	2306      	movs	r3, #6
 8012b7e:	e02c      	b.n	8012bda <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012b80:	7ffb      	ldrb	r3, [r7, #31]
 8012b82:	2b60      	cmp	r3, #96	; 0x60
 8012b84:	d905      	bls.n	8012b92 <create_name+0x13a>
 8012b86:	7ffb      	ldrb	r3, [r7, #31]
 8012b88:	2b7a      	cmp	r3, #122	; 0x7a
 8012b8a:	d802      	bhi.n	8012b92 <create_name+0x13a>
 8012b8c:	7ffb      	ldrb	r3, [r7, #31]
 8012b8e:	3b20      	subs	r3, #32
 8012b90:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012b92:	693b      	ldr	r3, [r7, #16]
 8012b94:	1c5a      	adds	r2, r3, #1
 8012b96:	613a      	str	r2, [r7, #16]
 8012b98:	68ba      	ldr	r2, [r7, #8]
 8012b9a:	4413      	add	r3, r2
 8012b9c:	7ffa      	ldrb	r2, [r7, #31]
 8012b9e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012ba0:	e7a6      	b.n	8012af0 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012ba2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012ba4:	68fa      	ldr	r2, [r7, #12]
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	441a      	add	r2, r3
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d101      	bne.n	8012bb8 <create_name+0x160>
 8012bb4:	2306      	movs	r3, #6
 8012bb6:	e010      	b.n	8012bda <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	781b      	ldrb	r3, [r3, #0]
 8012bbc:	2be5      	cmp	r3, #229	; 0xe5
 8012bbe:	d102      	bne.n	8012bc6 <create_name+0x16e>
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	2205      	movs	r2, #5
 8012bc4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012bc6:	7ffb      	ldrb	r3, [r7, #31]
 8012bc8:	2b20      	cmp	r3, #32
 8012bca:	d801      	bhi.n	8012bd0 <create_name+0x178>
 8012bcc:	2204      	movs	r2, #4
 8012bce:	e000      	b.n	8012bd2 <create_name+0x17a>
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	330b      	adds	r3, #11
 8012bd6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012bd8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3720      	adds	r7, #32
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	0801a244 	.word	0x0801a244
 8012be8:	0801a1f4 	.word	0x0801a1f4

08012bec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b086      	sub	sp, #24
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
 8012bf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	2b2f      	cmp	r3, #47	; 0x2f
 8012c06:	d00b      	beq.n	8012c20 <follow_path+0x34>
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b5c      	cmp	r3, #92	; 0x5c
 8012c0e:	d007      	beq.n	8012c20 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	699a      	ldr	r2, [r3, #24]
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	609a      	str	r2, [r3, #8]
 8012c18:	e00d      	b.n	8012c36 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	603b      	str	r3, [r7, #0]
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	2b2f      	cmp	r3, #47	; 0x2f
 8012c26:	d0f8      	beq.n	8012c1a <follow_path+0x2e>
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	2b5c      	cmp	r3, #92	; 0x5c
 8012c2e:	d0f4      	beq.n	8012c1a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	2200      	movs	r2, #0
 8012c34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	2b1f      	cmp	r3, #31
 8012c3c:	d80a      	bhi.n	8012c54 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2280      	movs	r2, #128	; 0x80
 8012c42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012c46:	2100      	movs	r1, #0
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f7ff fc1e 	bl	801248a <dir_sdi>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	75fb      	strb	r3, [r7, #23]
 8012c52:	e05b      	b.n	8012d0c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c54:	463b      	mov	r3, r7
 8012c56:	4619      	mov	r1, r3
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f7ff fefd 	bl	8012a58 <create_name>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c62:	7dfb      	ldrb	r3, [r7, #23]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d14c      	bne.n	8012d02 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f7ff fe50 	bl	801290e <dir_find>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012c7a:	7dfb      	ldrb	r3, [r7, #23]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d01b      	beq.n	8012cb8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012c80:	7dfb      	ldrb	r3, [r7, #23]
 8012c82:	2b04      	cmp	r3, #4
 8012c84:	d13f      	bne.n	8012d06 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012c86:	7afb      	ldrb	r3, [r7, #11]
 8012c88:	f003 0320 	and.w	r3, r3, #32
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d00b      	beq.n	8012ca8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012c90:	7afb      	ldrb	r3, [r7, #11]
 8012c92:	f003 0304 	and.w	r3, r3, #4
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d031      	beq.n	8012cfe <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2280      	movs	r2, #128	; 0x80
 8012c9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012ca6:	e02e      	b.n	8012d06 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012ca8:	7afb      	ldrb	r3, [r7, #11]
 8012caa:	f003 0304 	and.w	r3, r3, #4
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d129      	bne.n	8012d06 <follow_path+0x11a>
 8012cb2:	2305      	movs	r3, #5
 8012cb4:	75fb      	strb	r3, [r7, #23]
				break;
 8012cb6:	e026      	b.n	8012d06 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012cb8:	7afb      	ldrb	r3, [r7, #11]
 8012cba:	f003 0304 	and.w	r3, r3, #4
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d123      	bne.n	8012d0a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012cc2:	693b      	ldr	r3, [r7, #16]
 8012cc4:	799b      	ldrb	r3, [r3, #6]
 8012cc6:	f003 0310 	and.w	r3, r3, #16
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d102      	bne.n	8012cd4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012cce:	2305      	movs	r3, #5
 8012cd0:	75fb      	strb	r3, [r7, #23]
 8012cd2:	e01b      	b.n	8012d0c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	695b      	ldr	r3, [r3, #20]
 8012cde:	68fa      	ldr	r2, [r7, #12]
 8012ce0:	8992      	ldrh	r2, [r2, #12]
 8012ce2:	fbb3 f0f2 	udiv	r0, r3, r2
 8012ce6:	fb02 f200 	mul.w	r2, r2, r0
 8012cea:	1a9b      	subs	r3, r3, r2
 8012cec:	440b      	add	r3, r1
 8012cee:	4619      	mov	r1, r3
 8012cf0:	68f8      	ldr	r0, [r7, #12]
 8012cf2:	f7ff fd70 	bl	80127d6 <ld_clust>
 8012cf6:	4602      	mov	r2, r0
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	609a      	str	r2, [r3, #8]
 8012cfc:	e7aa      	b.n	8012c54 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012cfe:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012d00:	e7a8      	b.n	8012c54 <follow_path+0x68>
			if (res != FR_OK) break;
 8012d02:	bf00      	nop
 8012d04:	e002      	b.n	8012d0c <follow_path+0x120>
				break;
 8012d06:	bf00      	nop
 8012d08:	e000      	b.n	8012d0c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012d0a:	bf00      	nop
			}
		}
	}

	return res;
 8012d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3718      	adds	r7, #24
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}

08012d16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012d16:	b480      	push	{r7}
 8012d18:	b087      	sub	sp, #28
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d031      	beq.n	8012d90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	617b      	str	r3, [r7, #20]
 8012d32:	e002      	b.n	8012d3a <get_ldnumber+0x24>
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	3301      	adds	r3, #1
 8012d38:	617b      	str	r3, [r7, #20]
 8012d3a:	697b      	ldr	r3, [r7, #20]
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	2b20      	cmp	r3, #32
 8012d40:	d903      	bls.n	8012d4a <get_ldnumber+0x34>
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	2b3a      	cmp	r3, #58	; 0x3a
 8012d48:	d1f4      	bne.n	8012d34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	2b3a      	cmp	r3, #58	; 0x3a
 8012d50:	d11c      	bne.n	8012d8c <get_ldnumber+0x76>
			tp = *path;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	1c5a      	adds	r2, r3, #1
 8012d5c:	60fa      	str	r2, [r7, #12]
 8012d5e:	781b      	ldrb	r3, [r3, #0]
 8012d60:	3b30      	subs	r3, #48	; 0x30
 8012d62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	2b09      	cmp	r3, #9
 8012d68:	d80e      	bhi.n	8012d88 <get_ldnumber+0x72>
 8012d6a:	68fa      	ldr	r2, [r7, #12]
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d10a      	bne.n	8012d88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d107      	bne.n	8012d88 <get_ldnumber+0x72>
					vol = (int)i;
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	3301      	adds	r3, #1
 8012d80:	617b      	str	r3, [r7, #20]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	697a      	ldr	r2, [r7, #20]
 8012d86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	e002      	b.n	8012d92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012d90:	693b      	ldr	r3, [r7, #16]
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	371c      	adds	r7, #28
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr
	...

08012da0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2200      	movs	r2, #0
 8012dae:	70da      	strb	r2, [r3, #3]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f04f 32ff 	mov.w	r2, #4294967295
 8012db6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012db8:	6839      	ldr	r1, [r7, #0]
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f7fe ff8c 	bl	8011cd8 <move_window>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d001      	beq.n	8012dca <check_fs+0x2a>
 8012dc6:	2304      	movs	r3, #4
 8012dc8:	e038      	b.n	8012e3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	3338      	adds	r3, #56	; 0x38
 8012dce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fe fcd0 	bl	8011778 <ld_word>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	461a      	mov	r2, r3
 8012ddc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d001      	beq.n	8012de8 <check_fs+0x48>
 8012de4:	2303      	movs	r3, #3
 8012de6:	e029      	b.n	8012e3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012dee:	2be9      	cmp	r3, #233	; 0xe9
 8012df0:	d009      	beq.n	8012e06 <check_fs+0x66>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012df8:	2beb      	cmp	r3, #235	; 0xeb
 8012dfa:	d11e      	bne.n	8012e3a <check_fs+0x9a>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012e02:	2b90      	cmp	r3, #144	; 0x90
 8012e04:	d119      	bne.n	8012e3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	3338      	adds	r3, #56	; 0x38
 8012e0a:	3336      	adds	r3, #54	; 0x36
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7fe fccb 	bl	80117a8 <ld_dword>
 8012e12:	4603      	mov	r3, r0
 8012e14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012e18:	4a0a      	ldr	r2, [pc, #40]	; (8012e44 <check_fs+0xa4>)
 8012e1a:	4293      	cmp	r3, r2
 8012e1c:	d101      	bne.n	8012e22 <check_fs+0x82>
 8012e1e:	2300      	movs	r3, #0
 8012e20:	e00c      	b.n	8012e3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	3338      	adds	r3, #56	; 0x38
 8012e26:	3352      	adds	r3, #82	; 0x52
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7fe fcbd 	bl	80117a8 <ld_dword>
 8012e2e:	4602      	mov	r2, r0
 8012e30:	4b05      	ldr	r3, [pc, #20]	; (8012e48 <check_fs+0xa8>)
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d101      	bne.n	8012e3a <check_fs+0x9a>
 8012e36:	2300      	movs	r3, #0
 8012e38:	e000      	b.n	8012e3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012e3a:	2302      	movs	r3, #2
}
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3708      	adds	r7, #8
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}
 8012e44:	00544146 	.word	0x00544146
 8012e48:	33544146 	.word	0x33544146

08012e4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b096      	sub	sp, #88	; 0x58
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	60f8      	str	r0, [r7, #12]
 8012e54:	60b9      	str	r1, [r7, #8]
 8012e56:	4613      	mov	r3, r2
 8012e58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012e60:	68f8      	ldr	r0, [r7, #12]
 8012e62:	f7ff ff58 	bl	8012d16 <get_ldnumber>
 8012e66:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	da01      	bge.n	8012e72 <find_volume+0x26>
 8012e6e:	230b      	movs	r3, #11
 8012e70:	e268      	b.n	8013344 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012e72:	4ab0      	ldr	r2, [pc, #704]	; (8013134 <find_volume+0x2e8>)
 8012e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d101      	bne.n	8012e86 <find_volume+0x3a>
 8012e82:	230c      	movs	r3, #12
 8012e84:	e25e      	b.n	8013344 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012e8c:	79fb      	ldrb	r3, [r7, #7]
 8012e8e:	f023 0301 	bic.w	r3, r3, #1
 8012e92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d01a      	beq.n	8012ed2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9e:	785b      	ldrb	r3, [r3, #1]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7fe fbcb 	bl	801163c <disk_status>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012eac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eb0:	f003 0301 	and.w	r3, r3, #1
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d10c      	bne.n	8012ed2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012eb8:	79fb      	ldrb	r3, [r7, #7]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d007      	beq.n	8012ece <find_volume+0x82>
 8012ebe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ec2:	f003 0304 	and.w	r3, r3, #4
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d001      	beq.n	8012ece <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012eca:	230a      	movs	r3, #10
 8012ecc:	e23a      	b.n	8013344 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012ece:	2300      	movs	r3, #0
 8012ed0:	e238      	b.n	8013344 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012eda:	b2da      	uxtb	r2, r3
 8012edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ede:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee2:	785b      	ldrb	r3, [r3, #1]
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7fe fbc3 	bl	8011670 <disk_initialize>
 8012eea:	4603      	mov	r3, r0
 8012eec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ef4:	f003 0301 	and.w	r3, r3, #1
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d001      	beq.n	8012f00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012efc:	2303      	movs	r3, #3
 8012efe:	e221      	b.n	8013344 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012f00:	79fb      	ldrb	r3, [r7, #7]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d007      	beq.n	8012f16 <find_volume+0xca>
 8012f06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f0a:	f003 0304 	and.w	r3, r3, #4
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d001      	beq.n	8012f16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012f12:	230a      	movs	r3, #10
 8012f14:	e216      	b.n	8013344 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f18:	7858      	ldrb	r0, [r3, #1]
 8012f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1c:	330c      	adds	r3, #12
 8012f1e:	461a      	mov	r2, r3
 8012f20:	2102      	movs	r1, #2
 8012f22:	f7fe fc0b 	bl	801173c <disk_ioctl>
 8012f26:	4603      	mov	r3, r0
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d001      	beq.n	8012f30 <find_volume+0xe4>
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	e209      	b.n	8013344 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f32:	899b      	ldrh	r3, [r3, #12]
 8012f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f38:	d80d      	bhi.n	8012f56 <find_volume+0x10a>
 8012f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3c:	899b      	ldrh	r3, [r3, #12]
 8012f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f42:	d308      	bcc.n	8012f56 <find_volume+0x10a>
 8012f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f46:	899b      	ldrh	r3, [r3, #12]
 8012f48:	461a      	mov	r2, r3
 8012f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4c:	899b      	ldrh	r3, [r3, #12]
 8012f4e:	3b01      	subs	r3, #1
 8012f50:	4013      	ands	r3, r2
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d001      	beq.n	8012f5a <find_volume+0x10e>
 8012f56:	2301      	movs	r3, #1
 8012f58:	e1f4      	b.n	8013344 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012f5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012f60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f62:	f7ff ff1d 	bl	8012da0 <check_fs>
 8012f66:	4603      	mov	r3, r0
 8012f68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012f6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f70:	2b02      	cmp	r3, #2
 8012f72:	d14b      	bne.n	801300c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f74:	2300      	movs	r3, #0
 8012f76:	643b      	str	r3, [r7, #64]	; 0x40
 8012f78:	e01f      	b.n	8012fba <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f82:	011b      	lsls	r3, r3, #4
 8012f84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012f88:	4413      	add	r3, r2
 8012f8a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8e:	3304      	adds	r3, #4
 8012f90:	781b      	ldrb	r3, [r3, #0]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d006      	beq.n	8012fa4 <find_volume+0x158>
 8012f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f98:	3308      	adds	r3, #8
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fe fc04 	bl	80117a8 <ld_dword>
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	e000      	b.n	8012fa6 <find_volume+0x15a>
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fa8:	009b      	lsls	r3, r3, #2
 8012faa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012fae:	440b      	add	r3, r1
 8012fb0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8012fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fbc:	2b03      	cmp	r3, #3
 8012fbe:	d9dc      	bls.n	8012f7a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d002      	beq.n	8012fd0 <find_volume+0x184>
 8012fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fcc:	3b01      	subs	r3, #1
 8012fce:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fd2:	009b      	lsls	r3, r3, #2
 8012fd4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012fd8:	4413      	add	r3, r2
 8012fda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012fde:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d005      	beq.n	8012ff2 <find_volume+0x1a6>
 8012fe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012fe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012fea:	f7ff fed9 	bl	8012da0 <check_fs>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	e000      	b.n	8012ff4 <find_volume+0x1a8>
 8012ff2:	2303      	movs	r3, #3
 8012ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	d905      	bls.n	801300c <find_volume+0x1c0>
 8013000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013002:	3301      	adds	r3, #1
 8013004:	643b      	str	r3, [r7, #64]	; 0x40
 8013006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013008:	2b03      	cmp	r3, #3
 801300a:	d9e1      	bls.n	8012fd0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801300c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013010:	2b04      	cmp	r3, #4
 8013012:	d101      	bne.n	8013018 <find_volume+0x1cc>
 8013014:	2301      	movs	r3, #1
 8013016:	e195      	b.n	8013344 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801301c:	2b01      	cmp	r3, #1
 801301e:	d901      	bls.n	8013024 <find_volume+0x1d8>
 8013020:	230d      	movs	r3, #13
 8013022:	e18f      	b.n	8013344 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013026:	3338      	adds	r3, #56	; 0x38
 8013028:	330b      	adds	r3, #11
 801302a:	4618      	mov	r0, r3
 801302c:	f7fe fba4 	bl	8011778 <ld_word>
 8013030:	4603      	mov	r3, r0
 8013032:	461a      	mov	r2, r3
 8013034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013036:	899b      	ldrh	r3, [r3, #12]
 8013038:	429a      	cmp	r2, r3
 801303a:	d001      	beq.n	8013040 <find_volume+0x1f4>
 801303c:	230d      	movs	r3, #13
 801303e:	e181      	b.n	8013344 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013042:	3338      	adds	r3, #56	; 0x38
 8013044:	3316      	adds	r3, #22
 8013046:	4618      	mov	r0, r3
 8013048:	f7fe fb96 	bl	8011778 <ld_word>
 801304c:	4603      	mov	r3, r0
 801304e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013052:	2b00      	cmp	r3, #0
 8013054:	d106      	bne.n	8013064 <find_volume+0x218>
 8013056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013058:	3338      	adds	r3, #56	; 0x38
 801305a:	3324      	adds	r3, #36	; 0x24
 801305c:	4618      	mov	r0, r3
 801305e:	f7fe fba3 	bl	80117a8 <ld_dword>
 8013062:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013068:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013072:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013076:	789b      	ldrb	r3, [r3, #2]
 8013078:	2b01      	cmp	r3, #1
 801307a:	d005      	beq.n	8013088 <find_volume+0x23c>
 801307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307e:	789b      	ldrb	r3, [r3, #2]
 8013080:	2b02      	cmp	r3, #2
 8013082:	d001      	beq.n	8013088 <find_volume+0x23c>
 8013084:	230d      	movs	r3, #13
 8013086:	e15d      	b.n	8013344 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801308a:	789b      	ldrb	r3, [r3, #2]
 801308c:	461a      	mov	r2, r3
 801308e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013090:	fb02 f303 	mul.w	r3, r2, r3
 8013094:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801309c:	b29a      	uxth	r2, r3
 801309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80130a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a4:	895b      	ldrh	r3, [r3, #10]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d008      	beq.n	80130bc <find_volume+0x270>
 80130aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ac:	895b      	ldrh	r3, [r3, #10]
 80130ae:	461a      	mov	r2, r3
 80130b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b2:	895b      	ldrh	r3, [r3, #10]
 80130b4:	3b01      	subs	r3, #1
 80130b6:	4013      	ands	r3, r2
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d001      	beq.n	80130c0 <find_volume+0x274>
 80130bc:	230d      	movs	r3, #13
 80130be:	e141      	b.n	8013344 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80130c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c2:	3338      	adds	r3, #56	; 0x38
 80130c4:	3311      	adds	r3, #17
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7fe fb56 	bl	8011778 <ld_word>
 80130cc:	4603      	mov	r3, r0
 80130ce:	461a      	mov	r2, r3
 80130d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80130d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d6:	891b      	ldrh	r3, [r3, #8]
 80130d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130da:	8992      	ldrh	r2, [r2, #12]
 80130dc:	0952      	lsrs	r2, r2, #5
 80130de:	b292      	uxth	r2, r2
 80130e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80130e4:	fb02 f201 	mul.w	r2, r2, r1
 80130e8:	1a9b      	subs	r3, r3, r2
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d001      	beq.n	80130f4 <find_volume+0x2a8>
 80130f0:	230d      	movs	r3, #13
 80130f2:	e127      	b.n	8013344 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80130f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f6:	3338      	adds	r3, #56	; 0x38
 80130f8:	3313      	adds	r3, #19
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7fe fb3c 	bl	8011778 <ld_word>
 8013100:	4603      	mov	r3, r0
 8013102:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013106:	2b00      	cmp	r3, #0
 8013108:	d106      	bne.n	8013118 <find_volume+0x2cc>
 801310a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310c:	3338      	adds	r3, #56	; 0x38
 801310e:	3320      	adds	r3, #32
 8013110:	4618      	mov	r0, r3
 8013112:	f7fe fb49 	bl	80117a8 <ld_dword>
 8013116:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311a:	3338      	adds	r3, #56	; 0x38
 801311c:	330e      	adds	r3, #14
 801311e:	4618      	mov	r0, r3
 8013120:	f7fe fb2a 	bl	8011778 <ld_word>
 8013124:	4603      	mov	r3, r0
 8013126:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013128:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801312a:	2b00      	cmp	r3, #0
 801312c:	d104      	bne.n	8013138 <find_volume+0x2ec>
 801312e:	230d      	movs	r3, #13
 8013130:	e108      	b.n	8013344 <find_volume+0x4f8>
 8013132:	bf00      	nop
 8013134:	20042464 	.word	0x20042464

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013138:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801313a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801313c:	4413      	add	r3, r2
 801313e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013140:	8911      	ldrh	r1, [r2, #8]
 8013142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013144:	8992      	ldrh	r2, [r2, #12]
 8013146:	0952      	lsrs	r2, r2, #5
 8013148:	b292      	uxth	r2, r2
 801314a:	fbb1 f2f2 	udiv	r2, r1, r2
 801314e:	b292      	uxth	r2, r2
 8013150:	4413      	add	r3, r2
 8013152:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013158:	429a      	cmp	r2, r3
 801315a:	d201      	bcs.n	8013160 <find_volume+0x314>
 801315c:	230d      	movs	r3, #13
 801315e:	e0f1      	b.n	8013344 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013164:	1ad3      	subs	r3, r2, r3
 8013166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013168:	8952      	ldrh	r2, [r2, #10]
 801316a:	fbb3 f3f2 	udiv	r3, r3, r2
 801316e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013172:	2b00      	cmp	r3, #0
 8013174:	d101      	bne.n	801317a <find_volume+0x32e>
 8013176:	230d      	movs	r3, #13
 8013178:	e0e4      	b.n	8013344 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801317a:	2303      	movs	r3, #3
 801317c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013182:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013186:	4293      	cmp	r3, r2
 8013188:	d802      	bhi.n	8013190 <find_volume+0x344>
 801318a:	2302      	movs	r3, #2
 801318c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013192:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013196:	4293      	cmp	r3, r2
 8013198:	d802      	bhi.n	80131a0 <find_volume+0x354>
 801319a:	2301      	movs	r3, #1
 801319c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a2:	1c9a      	adds	r2, r3, #2
 80131a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80131a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131ac:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80131ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80131b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131b2:	441a      	add	r2, r3
 80131b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80131b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131bc:	441a      	add	r2, r3
 80131be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80131c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131c6:	2b03      	cmp	r3, #3
 80131c8:	d11e      	bne.n	8013208 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80131ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131cc:	3338      	adds	r3, #56	; 0x38
 80131ce:	332a      	adds	r3, #42	; 0x2a
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fe fad1 	bl	8011778 <ld_word>
 80131d6:	4603      	mov	r3, r0
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d001      	beq.n	80131e0 <find_volume+0x394>
 80131dc:	230d      	movs	r3, #13
 80131de:	e0b1      	b.n	8013344 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80131e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e2:	891b      	ldrh	r3, [r3, #8]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d001      	beq.n	80131ec <find_volume+0x3a0>
 80131e8:	230d      	movs	r3, #13
 80131ea:	e0ab      	b.n	8013344 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80131ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ee:	3338      	adds	r3, #56	; 0x38
 80131f0:	332c      	adds	r3, #44	; 0x2c
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7fe fad8 	bl	80117a8 <ld_dword>
 80131f8:	4602      	mov	r2, r0
 80131fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131fc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80131fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013200:	69db      	ldr	r3, [r3, #28]
 8013202:	009b      	lsls	r3, r3, #2
 8013204:	647b      	str	r3, [r7, #68]	; 0x44
 8013206:	e01f      	b.n	8013248 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801320a:	891b      	ldrh	r3, [r3, #8]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d101      	bne.n	8013214 <find_volume+0x3c8>
 8013210:	230d      	movs	r3, #13
 8013212:	e097      	b.n	8013344 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801321a:	441a      	add	r2, r3
 801321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013224:	2b02      	cmp	r3, #2
 8013226:	d103      	bne.n	8013230 <find_volume+0x3e4>
 8013228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322a:	69db      	ldr	r3, [r3, #28]
 801322c:	005b      	lsls	r3, r3, #1
 801322e:	e00a      	b.n	8013246 <find_volume+0x3fa>
 8013230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013232:	69da      	ldr	r2, [r3, #28]
 8013234:	4613      	mov	r3, r2
 8013236:	005b      	lsls	r3, r3, #1
 8013238:	4413      	add	r3, r2
 801323a:	085a      	lsrs	r2, r3, #1
 801323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323e:	69db      	ldr	r3, [r3, #28]
 8013240:	f003 0301 	and.w	r3, r3, #1
 8013244:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013246:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324a:	6a1a      	ldr	r2, [r3, #32]
 801324c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324e:	899b      	ldrh	r3, [r3, #12]
 8013250:	4619      	mov	r1, r3
 8013252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013254:	440b      	add	r3, r1
 8013256:	3b01      	subs	r3, #1
 8013258:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801325a:	8989      	ldrh	r1, [r1, #12]
 801325c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013260:	429a      	cmp	r2, r3
 8013262:	d201      	bcs.n	8013268 <find_volume+0x41c>
 8013264:	230d      	movs	r3, #13
 8013266:	e06d      	b.n	8013344 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801326a:	f04f 32ff 	mov.w	r2, #4294967295
 801326e:	615a      	str	r2, [r3, #20]
 8013270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013272:	695a      	ldr	r2, [r3, #20]
 8013274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013276:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327a:	2280      	movs	r2, #128	; 0x80
 801327c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801327e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013282:	2b03      	cmp	r3, #3
 8013284:	d149      	bne.n	801331a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013288:	3338      	adds	r3, #56	; 0x38
 801328a:	3330      	adds	r3, #48	; 0x30
 801328c:	4618      	mov	r0, r3
 801328e:	f7fe fa73 	bl	8011778 <ld_word>
 8013292:	4603      	mov	r3, r0
 8013294:	2b01      	cmp	r3, #1
 8013296:	d140      	bne.n	801331a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801329a:	3301      	adds	r3, #1
 801329c:	4619      	mov	r1, r3
 801329e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132a0:	f7fe fd1a 	bl	8011cd8 <move_window>
 80132a4:	4603      	mov	r3, r0
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d137      	bne.n	801331a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80132aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ac:	2200      	movs	r2, #0
 80132ae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80132b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b2:	3338      	adds	r3, #56	; 0x38
 80132b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7fe fa5d 	bl	8011778 <ld_word>
 80132be:	4603      	mov	r3, r0
 80132c0:	461a      	mov	r2, r3
 80132c2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d127      	bne.n	801331a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80132ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132cc:	3338      	adds	r3, #56	; 0x38
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7fe fa6a 	bl	80117a8 <ld_dword>
 80132d4:	4602      	mov	r2, r0
 80132d6:	4b1d      	ldr	r3, [pc, #116]	; (801334c <find_volume+0x500>)
 80132d8:	429a      	cmp	r2, r3
 80132da:	d11e      	bne.n	801331a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80132dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132de:	3338      	adds	r3, #56	; 0x38
 80132e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80132e4:	4618      	mov	r0, r3
 80132e6:	f7fe fa5f 	bl	80117a8 <ld_dword>
 80132ea:	4602      	mov	r2, r0
 80132ec:	4b18      	ldr	r3, [pc, #96]	; (8013350 <find_volume+0x504>)
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d113      	bne.n	801331a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80132f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f4:	3338      	adds	r3, #56	; 0x38
 80132f6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7fe fa54 	bl	80117a8 <ld_dword>
 8013300:	4602      	mov	r2, r0
 8013302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013304:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013308:	3338      	adds	r3, #56	; 0x38
 801330a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801330e:	4618      	mov	r0, r3
 8013310:	f7fe fa4a 	bl	80117a8 <ld_dword>
 8013314:	4602      	mov	r2, r0
 8013316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013318:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013320:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013322:	4b0c      	ldr	r3, [pc, #48]	; (8013354 <find_volume+0x508>)
 8013324:	881b      	ldrh	r3, [r3, #0]
 8013326:	3301      	adds	r3, #1
 8013328:	b29a      	uxth	r2, r3
 801332a:	4b0a      	ldr	r3, [pc, #40]	; (8013354 <find_volume+0x508>)
 801332c:	801a      	strh	r2, [r3, #0]
 801332e:	4b09      	ldr	r3, [pc, #36]	; (8013354 <find_volume+0x508>)
 8013330:	881a      	ldrh	r2, [r3, #0]
 8013332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013334:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013338:	2200      	movs	r2, #0
 801333a:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801333c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801333e:	f7fe fc63 	bl	8011c08 <clear_lock>
#endif
	return FR_OK;
 8013342:	2300      	movs	r3, #0
}
 8013344:	4618      	mov	r0, r3
 8013346:	3758      	adds	r7, #88	; 0x58
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	41615252 	.word	0x41615252
 8013350:	61417272 	.word	0x61417272
 8013354:	20042468 	.word	0x20042468

08013358 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013362:	2309      	movs	r3, #9
 8013364:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d01c      	beq.n	80133a6 <validate+0x4e>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d018      	beq.n	80133a6 <validate+0x4e>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	781b      	ldrb	r3, [r3, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d013      	beq.n	80133a6 <validate+0x4e>
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	889a      	ldrh	r2, [r3, #4]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	88db      	ldrh	r3, [r3, #6]
 8013388:	429a      	cmp	r2, r3
 801338a:	d10c      	bne.n	80133a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	785b      	ldrb	r3, [r3, #1]
 8013392:	4618      	mov	r0, r3
 8013394:	f7fe f952 	bl	801163c <disk_status>
 8013398:	4603      	mov	r3, r0
 801339a:	f003 0301 	and.w	r3, r3, #1
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d101      	bne.n	80133a6 <validate+0x4e>
			res = FR_OK;
 80133a2:	2300      	movs	r3, #0
 80133a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80133a6:	7bfb      	ldrb	r3, [r7, #15]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d102      	bne.n	80133b2 <validate+0x5a>
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	e000      	b.n	80133b4 <validate+0x5c>
 80133b2:	2300      	movs	r3, #0
 80133b4:	683a      	ldr	r2, [r7, #0]
 80133b6:	6013      	str	r3, [r2, #0]
	return res;
 80133b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80133ba:	4618      	mov	r0, r3
 80133bc:	3710      	adds	r7, #16
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
	...

080133c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b088      	sub	sp, #32
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	60f8      	str	r0, [r7, #12]
 80133cc:	60b9      	str	r1, [r7, #8]
 80133ce:	4613      	mov	r3, r2
 80133d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80133d6:	f107 0310 	add.w	r3, r7, #16
 80133da:	4618      	mov	r0, r3
 80133dc:	f7ff fc9b 	bl	8012d16 <get_ldnumber>
 80133e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80133e2:	69fb      	ldr	r3, [r7, #28]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	da01      	bge.n	80133ec <f_mount+0x28>
 80133e8:	230b      	movs	r3, #11
 80133ea:	e02b      	b.n	8013444 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80133ec:	4a17      	ldr	r2, [pc, #92]	; (801344c <f_mount+0x88>)
 80133ee:	69fb      	ldr	r3, [r7, #28]
 80133f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d005      	beq.n	8013408 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80133fc:	69b8      	ldr	r0, [r7, #24]
 80133fe:	f7fe fc03 	bl	8011c08 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	2200      	movs	r2, #0
 8013406:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d002      	beq.n	8013414 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	2200      	movs	r2, #0
 8013412:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013414:	68fa      	ldr	r2, [r7, #12]
 8013416:	490d      	ldr	r1, [pc, #52]	; (801344c <f_mount+0x88>)
 8013418:	69fb      	ldr	r3, [r7, #28]
 801341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d002      	beq.n	801342a <f_mount+0x66>
 8013424:	79fb      	ldrb	r3, [r7, #7]
 8013426:	2b01      	cmp	r3, #1
 8013428:	d001      	beq.n	801342e <f_mount+0x6a>
 801342a:	2300      	movs	r3, #0
 801342c:	e00a      	b.n	8013444 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801342e:	f107 010c 	add.w	r1, r7, #12
 8013432:	f107 0308 	add.w	r3, r7, #8
 8013436:	2200      	movs	r2, #0
 8013438:	4618      	mov	r0, r3
 801343a:	f7ff fd07 	bl	8012e4c <find_volume>
 801343e:	4603      	mov	r3, r0
 8013440:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013442:	7dfb      	ldrb	r3, [r7, #23]
}
 8013444:	4618      	mov	r0, r3
 8013446:	3720      	adds	r7, #32
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}
 801344c:	20042464 	.word	0x20042464

08013450 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b098      	sub	sp, #96	; 0x60
 8013454:	af00      	add	r7, sp, #0
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	4613      	mov	r3, r2
 801345c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d101      	bne.n	8013468 <f_open+0x18>
 8013464:	2309      	movs	r3, #9
 8013466:	e1ba      	b.n	80137de <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013468:	79fb      	ldrb	r3, [r7, #7]
 801346a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801346e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013470:	79fa      	ldrb	r2, [r7, #7]
 8013472:	f107 0110 	add.w	r1, r7, #16
 8013476:	f107 0308 	add.w	r3, r7, #8
 801347a:	4618      	mov	r0, r3
 801347c:	f7ff fce6 	bl	8012e4c <find_volume>
 8013480:	4603      	mov	r3, r0
 8013482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801348a:	2b00      	cmp	r3, #0
 801348c:	f040 819e 	bne.w	80137cc <f_open+0x37c>
		dj.obj.fs = fs;
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013494:	68ba      	ldr	r2, [r7, #8]
 8013496:	f107 0314 	add.w	r3, r7, #20
 801349a:	4611      	mov	r1, r2
 801349c:	4618      	mov	r0, r3
 801349e:	f7ff fba5 	bl	8012bec <follow_path>
 80134a2:	4603      	mov	r3, r0
 80134a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80134a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d11a      	bne.n	80134e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80134b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80134b4:	b25b      	sxtb	r3, r3
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	da03      	bge.n	80134c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80134ba:	2306      	movs	r3, #6
 80134bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80134c0:	e011      	b.n	80134e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80134c2:	79fb      	ldrb	r3, [r7, #7]
 80134c4:	f023 0301 	bic.w	r3, r3, #1
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	bf14      	ite	ne
 80134cc:	2301      	movne	r3, #1
 80134ce:	2300      	moveq	r3, #0
 80134d0:	b2db      	uxtb	r3, r3
 80134d2:	461a      	mov	r2, r3
 80134d4:	f107 0314 	add.w	r3, r7, #20
 80134d8:	4611      	mov	r1, r2
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fe fa4c 	bl	8011978 <chk_lock>
 80134e0:	4603      	mov	r3, r0
 80134e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80134e6:	79fb      	ldrb	r3, [r7, #7]
 80134e8:	f003 031c 	and.w	r3, r3, #28
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d07e      	beq.n	80135ee <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80134f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d017      	beq.n	8013528 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80134f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134fc:	2b04      	cmp	r3, #4
 80134fe:	d10e      	bne.n	801351e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013500:	f7fe fa96 	bl	8011a30 <enq_lock>
 8013504:	4603      	mov	r3, r0
 8013506:	2b00      	cmp	r3, #0
 8013508:	d006      	beq.n	8013518 <f_open+0xc8>
 801350a:	f107 0314 	add.w	r3, r7, #20
 801350e:	4618      	mov	r0, r3
 8013510:	f7ff fa52 	bl	80129b8 <dir_register>
 8013514:	4603      	mov	r3, r0
 8013516:	e000      	b.n	801351a <f_open+0xca>
 8013518:	2312      	movs	r3, #18
 801351a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801351e:	79fb      	ldrb	r3, [r7, #7]
 8013520:	f043 0308 	orr.w	r3, r3, #8
 8013524:	71fb      	strb	r3, [r7, #7]
 8013526:	e010      	b.n	801354a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013528:	7ebb      	ldrb	r3, [r7, #26]
 801352a:	f003 0311 	and.w	r3, r3, #17
 801352e:	2b00      	cmp	r3, #0
 8013530:	d003      	beq.n	801353a <f_open+0xea>
					res = FR_DENIED;
 8013532:	2307      	movs	r3, #7
 8013534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013538:	e007      	b.n	801354a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801353a:	79fb      	ldrb	r3, [r7, #7]
 801353c:	f003 0304 	and.w	r3, r3, #4
 8013540:	2b00      	cmp	r3, #0
 8013542:	d002      	beq.n	801354a <f_open+0xfa>
 8013544:	2308      	movs	r3, #8
 8013546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801354a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801354e:	2b00      	cmp	r3, #0
 8013550:	d167      	bne.n	8013622 <f_open+0x1d2>
 8013552:	79fb      	ldrb	r3, [r7, #7]
 8013554:	f003 0308 	and.w	r3, r3, #8
 8013558:	2b00      	cmp	r3, #0
 801355a:	d062      	beq.n	8013622 <f_open+0x1d2>
				dw = GET_FATTIME();
 801355c:	4ba2      	ldr	r3, [pc, #648]	; (80137e8 <f_open+0x398>)
 801355e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013562:	330e      	adds	r3, #14
 8013564:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013566:	4618      	mov	r0, r3
 8013568:	f7fe f95c 	bl	8011824 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801356e:	3316      	adds	r3, #22
 8013570:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013572:	4618      	mov	r0, r3
 8013574:	f7fe f956 	bl	8011824 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801357a:	330b      	adds	r3, #11
 801357c:	2220      	movs	r2, #32
 801357e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013584:	4611      	mov	r1, r2
 8013586:	4618      	mov	r0, r3
 8013588:	f7ff f925 	bl	80127d6 <ld_clust>
 801358c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013592:	2200      	movs	r2, #0
 8013594:	4618      	mov	r0, r3
 8013596:	f7ff f93d 	bl	8012814 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801359c:	331c      	adds	r3, #28
 801359e:	2100      	movs	r1, #0
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7fe f93f 	bl	8011824 <st_dword>
					fs->wflag = 1;
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	2201      	movs	r2, #1
 80135aa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80135ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d037      	beq.n	8013622 <f_open+0x1d2>
						dw = fs->winsect;
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135b6:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80135b8:	f107 0314 	add.w	r3, r7, #20
 80135bc:	2200      	movs	r2, #0
 80135be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7fe fe2d 	bl	8012220 <remove_chain>
 80135c6:	4603      	mov	r3, r0
 80135c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80135cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d126      	bne.n	8013622 <f_open+0x1d2>
							res = move_window(fs, dw);
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80135d8:	4618      	mov	r0, r3
 80135da:	f7fe fb7d 	bl	8011cd8 <move_window>
 80135de:	4603      	mov	r3, r0
 80135e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135e8:	3a01      	subs	r2, #1
 80135ea:	611a      	str	r2, [r3, #16]
 80135ec:	e019      	b.n	8013622 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80135ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d115      	bne.n	8013622 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80135f6:	7ebb      	ldrb	r3, [r7, #26]
 80135f8:	f003 0310 	and.w	r3, r3, #16
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d003      	beq.n	8013608 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013600:	2304      	movs	r3, #4
 8013602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013606:	e00c      	b.n	8013622 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013608:	79fb      	ldrb	r3, [r7, #7]
 801360a:	f003 0302 	and.w	r3, r3, #2
 801360e:	2b00      	cmp	r3, #0
 8013610:	d007      	beq.n	8013622 <f_open+0x1d2>
 8013612:	7ebb      	ldrb	r3, [r7, #26]
 8013614:	f003 0301 	and.w	r3, r3, #1
 8013618:	2b00      	cmp	r3, #0
 801361a:	d002      	beq.n	8013622 <f_open+0x1d2>
						res = FR_DENIED;
 801361c:	2307      	movs	r3, #7
 801361e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013626:	2b00      	cmp	r3, #0
 8013628:	d128      	bne.n	801367c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801362a:	79fb      	ldrb	r3, [r7, #7]
 801362c:	f003 0308 	and.w	r3, r3, #8
 8013630:	2b00      	cmp	r3, #0
 8013632:	d003      	beq.n	801363c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8013634:	79fb      	ldrb	r3, [r7, #7]
 8013636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801363a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801364a:	79fb      	ldrb	r3, [r7, #7]
 801364c:	f023 0301 	bic.w	r3, r3, #1
 8013650:	2b00      	cmp	r3, #0
 8013652:	bf14      	ite	ne
 8013654:	2301      	movne	r3, #1
 8013656:	2300      	moveq	r3, #0
 8013658:	b2db      	uxtb	r3, r3
 801365a:	461a      	mov	r2, r3
 801365c:	f107 0314 	add.w	r3, r7, #20
 8013660:	4611      	mov	r1, r2
 8013662:	4618      	mov	r0, r3
 8013664:	f7fe fa06 	bl	8011a74 <inc_lock>
 8013668:	4602      	mov	r2, r0
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	691b      	ldr	r3, [r3, #16]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d102      	bne.n	801367c <f_open+0x22c>
 8013676:	2302      	movs	r3, #2
 8013678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801367c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013680:	2b00      	cmp	r3, #0
 8013682:	f040 80a3 	bne.w	80137cc <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801368a:	4611      	mov	r1, r2
 801368c:	4618      	mov	r0, r3
 801368e:	f7ff f8a2 	bl	80127d6 <ld_clust>
 8013692:	4602      	mov	r2, r0
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801369a:	331c      	adds	r3, #28
 801369c:	4618      	mov	r0, r3
 801369e:	f7fe f883 	bl	80117a8 <ld_dword>
 80136a2:	4602      	mov	r2, r0
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	2200      	movs	r2, #0
 80136ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80136ae:	693a      	ldr	r2, [r7, #16]
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	88da      	ldrh	r2, [r3, #6]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	79fa      	ldrb	r2, [r7, #7]
 80136c0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	2200      	movs	r2, #0
 80136c6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	2200      	movs	r2, #0
 80136cc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	2200      	movs	r2, #0
 80136d2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	3330      	adds	r3, #48	; 0x30
 80136d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80136dc:	2100      	movs	r1, #0
 80136de:	4618      	mov	r0, r3
 80136e0:	f7fe f8ed 	bl	80118be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80136e4:	79fb      	ldrb	r3, [r7, #7]
 80136e6:	f003 0320 	and.w	r3, r3, #32
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d06e      	beq.n	80137cc <f_open+0x37c>
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d06a      	beq.n	80137cc <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	68da      	ldr	r2, [r3, #12]
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	895b      	ldrh	r3, [r3, #10]
 8013702:	461a      	mov	r2, r3
 8013704:	693b      	ldr	r3, [r7, #16]
 8013706:	899b      	ldrh	r3, [r3, #12]
 8013708:	fb03 f302 	mul.w	r3, r3, r2
 801370c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	689b      	ldr	r3, [r3, #8]
 8013712:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	68db      	ldr	r3, [r3, #12]
 8013718:	657b      	str	r3, [r7, #84]	; 0x54
 801371a:	e016      	b.n	801374a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013720:	4618      	mov	r0, r3
 8013722:	f7fe fb96 	bl	8011e52 <get_fat>
 8013726:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801372a:	2b01      	cmp	r3, #1
 801372c:	d802      	bhi.n	8013734 <f_open+0x2e4>
 801372e:	2302      	movs	r3, #2
 8013730:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801373a:	d102      	bne.n	8013742 <f_open+0x2f2>
 801373c:	2301      	movs	r3, #1
 801373e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013742:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	657b      	str	r3, [r7, #84]	; 0x54
 801374a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801374e:	2b00      	cmp	r3, #0
 8013750:	d103      	bne.n	801375a <f_open+0x30a>
 8013752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013756:	429a      	cmp	r2, r3
 8013758:	d8e0      	bhi.n	801371c <f_open+0x2cc>
				}
				fp->clust = clst;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801375e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013764:	2b00      	cmp	r3, #0
 8013766:	d131      	bne.n	80137cc <f_open+0x37c>
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	899b      	ldrh	r3, [r3, #12]
 801376c:	461a      	mov	r2, r3
 801376e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013770:	fbb3 f1f2 	udiv	r1, r3, r2
 8013774:	fb02 f201 	mul.w	r2, r2, r1
 8013778:	1a9b      	subs	r3, r3, r2
 801377a:	2b00      	cmp	r3, #0
 801377c:	d026      	beq.n	80137cc <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013782:	4618      	mov	r0, r3
 8013784:	f7fe fb46 	bl	8011e14 <clust2sect>
 8013788:	6478      	str	r0, [r7, #68]	; 0x44
 801378a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801378c:	2b00      	cmp	r3, #0
 801378e:	d103      	bne.n	8013798 <f_open+0x348>
						res = FR_INT_ERR;
 8013790:	2302      	movs	r3, #2
 8013792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013796:	e019      	b.n	80137cc <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	899b      	ldrh	r3, [r3, #12]
 801379c:	461a      	mov	r2, r3
 801379e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80137a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137a6:	441a      	add	r2, r3
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	7858      	ldrb	r0, [r3, #1]
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	6a1a      	ldr	r2, [r3, #32]
 80137ba:	2301      	movs	r3, #1
 80137bc:	f7fd ff7e 	bl	80116bc <disk_read>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d002      	beq.n	80137cc <f_open+0x37c>
 80137c6:	2301      	movs	r3, #1
 80137c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80137cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d002      	beq.n	80137da <f_open+0x38a>
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2200      	movs	r2, #0
 80137d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80137da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3760      	adds	r7, #96	; 0x60
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	bf00      	nop
 80137e8:	274a0000 	.word	0x274a0000

080137ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b08e      	sub	sp, #56	; 0x38
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
 80137f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	2200      	movs	r2, #0
 8013802:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	f107 0214 	add.w	r2, r7, #20
 801380a:	4611      	mov	r1, r2
 801380c:	4618      	mov	r0, r3
 801380e:	f7ff fda3 	bl	8013358 <validate>
 8013812:	4603      	mov	r3, r0
 8013814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801381c:	2b00      	cmp	r3, #0
 801381e:	d107      	bne.n	8013830 <f_read+0x44>
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	7d5b      	ldrb	r3, [r3, #21]
 8013824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013828:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801382c:	2b00      	cmp	r3, #0
 801382e:	d002      	beq.n	8013836 <f_read+0x4a>
 8013830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013834:	e135      	b.n	8013aa2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	7d1b      	ldrb	r3, [r3, #20]
 801383a:	f003 0301 	and.w	r3, r3, #1
 801383e:	2b00      	cmp	r3, #0
 8013840:	d101      	bne.n	8013846 <f_read+0x5a>
 8013842:	2307      	movs	r3, #7
 8013844:	e12d      	b.n	8013aa2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	68da      	ldr	r2, [r3, #12]
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	699b      	ldr	r3, [r3, #24]
 801384e:	1ad3      	subs	r3, r2, r3
 8013850:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	6a3b      	ldr	r3, [r7, #32]
 8013856:	429a      	cmp	r2, r3
 8013858:	f240 811e 	bls.w	8013a98 <f_read+0x2ac>
 801385c:	6a3b      	ldr	r3, [r7, #32]
 801385e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013860:	e11a      	b.n	8013a98 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	699b      	ldr	r3, [r3, #24]
 8013866:	697a      	ldr	r2, [r7, #20]
 8013868:	8992      	ldrh	r2, [r2, #12]
 801386a:	fbb3 f1f2 	udiv	r1, r3, r2
 801386e:	fb02 f201 	mul.w	r2, r2, r1
 8013872:	1a9b      	subs	r3, r3, r2
 8013874:	2b00      	cmp	r3, #0
 8013876:	f040 80d5 	bne.w	8013a24 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	699b      	ldr	r3, [r3, #24]
 801387e:	697a      	ldr	r2, [r7, #20]
 8013880:	8992      	ldrh	r2, [r2, #12]
 8013882:	fbb3 f3f2 	udiv	r3, r3, r2
 8013886:	697a      	ldr	r2, [r7, #20]
 8013888:	8952      	ldrh	r2, [r2, #10]
 801388a:	3a01      	subs	r2, #1
 801388c:	4013      	ands	r3, r2
 801388e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d12f      	bne.n	80138f6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	699b      	ldr	r3, [r3, #24]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d103      	bne.n	80138a6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	689b      	ldr	r3, [r3, #8]
 80138a2:	633b      	str	r3, [r7, #48]	; 0x30
 80138a4:	e013      	b.n	80138ce <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d007      	beq.n	80138be <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	699b      	ldr	r3, [r3, #24]
 80138b2:	4619      	mov	r1, r3
 80138b4:	68f8      	ldr	r0, [r7, #12]
 80138b6:	f7fe fdb0 	bl	801241a <clmt_clust>
 80138ba:	6338      	str	r0, [r7, #48]	; 0x30
 80138bc:	e007      	b.n	80138ce <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80138be:	68fa      	ldr	r2, [r7, #12]
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	69db      	ldr	r3, [r3, #28]
 80138c4:	4619      	mov	r1, r3
 80138c6:	4610      	mov	r0, r2
 80138c8:	f7fe fac3 	bl	8011e52 <get_fat>
 80138cc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80138ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d0:	2b01      	cmp	r3, #1
 80138d2:	d804      	bhi.n	80138de <f_read+0xf2>
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	2202      	movs	r2, #2
 80138d8:	755a      	strb	r2, [r3, #21]
 80138da:	2302      	movs	r3, #2
 80138dc:	e0e1      	b.n	8013aa2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138e4:	d104      	bne.n	80138f0 <f_read+0x104>
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	2201      	movs	r2, #1
 80138ea:	755a      	strb	r2, [r3, #21]
 80138ec:	2301      	movs	r3, #1
 80138ee:	e0d8      	b.n	8013aa2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138f4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80138f6:	697a      	ldr	r2, [r7, #20]
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	69db      	ldr	r3, [r3, #28]
 80138fc:	4619      	mov	r1, r3
 80138fe:	4610      	mov	r0, r2
 8013900:	f7fe fa88 	bl	8011e14 <clust2sect>
 8013904:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d104      	bne.n	8013916 <f_read+0x12a>
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	2202      	movs	r2, #2
 8013910:	755a      	strb	r2, [r3, #21]
 8013912:	2302      	movs	r3, #2
 8013914:	e0c5      	b.n	8013aa2 <f_read+0x2b6>
			sect += csect;
 8013916:	69ba      	ldr	r2, [r7, #24]
 8013918:	69fb      	ldr	r3, [r7, #28]
 801391a:	4413      	add	r3, r2
 801391c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	899b      	ldrh	r3, [r3, #12]
 8013922:	461a      	mov	r2, r3
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	fbb3 f3f2 	udiv	r3, r3, r2
 801392a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392e:	2b00      	cmp	r3, #0
 8013930:	d041      	beq.n	80139b6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013932:	69fa      	ldr	r2, [r7, #28]
 8013934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013936:	4413      	add	r3, r2
 8013938:	697a      	ldr	r2, [r7, #20]
 801393a:	8952      	ldrh	r2, [r2, #10]
 801393c:	4293      	cmp	r3, r2
 801393e:	d905      	bls.n	801394c <f_read+0x160>
					cc = fs->csize - csect;
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	895b      	ldrh	r3, [r3, #10]
 8013944:	461a      	mov	r2, r3
 8013946:	69fb      	ldr	r3, [r7, #28]
 8013948:	1ad3      	subs	r3, r2, r3
 801394a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	7858      	ldrb	r0, [r3, #1]
 8013950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013952:	69ba      	ldr	r2, [r7, #24]
 8013954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013956:	f7fd feb1 	bl	80116bc <disk_read>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d004      	beq.n	801396a <f_read+0x17e>
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	2201      	movs	r2, #1
 8013964:	755a      	strb	r2, [r3, #21]
 8013966:	2301      	movs	r3, #1
 8013968:	e09b      	b.n	8013aa2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	7d1b      	ldrb	r3, [r3, #20]
 801396e:	b25b      	sxtb	r3, r3
 8013970:	2b00      	cmp	r3, #0
 8013972:	da18      	bge.n	80139a6 <f_read+0x1ba>
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	6a1a      	ldr	r2, [r3, #32]
 8013978:	69bb      	ldr	r3, [r7, #24]
 801397a:	1ad3      	subs	r3, r2, r3
 801397c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801397e:	429a      	cmp	r2, r3
 8013980:	d911      	bls.n	80139a6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	6a1a      	ldr	r2, [r3, #32]
 8013986:	69bb      	ldr	r3, [r7, #24]
 8013988:	1ad3      	subs	r3, r2, r3
 801398a:	697a      	ldr	r2, [r7, #20]
 801398c:	8992      	ldrh	r2, [r2, #12]
 801398e:	fb02 f303 	mul.w	r3, r2, r3
 8013992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013994:	18d0      	adds	r0, r2, r3
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	899b      	ldrh	r3, [r3, #12]
 80139a0:	461a      	mov	r2, r3
 80139a2:	f7fd ff6b 	bl	801187c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	899b      	ldrh	r3, [r3, #12]
 80139aa:	461a      	mov	r2, r3
 80139ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ae:	fb02 f303 	mul.w	r3, r2, r3
 80139b2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80139b4:	e05c      	b.n	8013a70 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	6a1b      	ldr	r3, [r3, #32]
 80139ba:	69ba      	ldr	r2, [r7, #24]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d02e      	beq.n	8013a1e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	7d1b      	ldrb	r3, [r3, #20]
 80139c4:	b25b      	sxtb	r3, r3
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	da18      	bge.n	80139fc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	7858      	ldrb	r0, [r3, #1]
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	6a1a      	ldr	r2, [r3, #32]
 80139d8:	2301      	movs	r3, #1
 80139da:	f7fd fe8f 	bl	80116fc <disk_write>
 80139de:	4603      	mov	r3, r0
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d004      	beq.n	80139ee <f_read+0x202>
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2201      	movs	r2, #1
 80139e8:	755a      	strb	r2, [r3, #21]
 80139ea:	2301      	movs	r3, #1
 80139ec:	e059      	b.n	8013aa2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	7d1b      	ldrb	r3, [r3, #20]
 80139f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139f6:	b2da      	uxtb	r2, r3
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	7858      	ldrb	r0, [r3, #1]
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a06:	2301      	movs	r3, #1
 8013a08:	69ba      	ldr	r2, [r7, #24]
 8013a0a:	f7fd fe57 	bl	80116bc <disk_read>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d004      	beq.n	8013a1e <f_read+0x232>
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2201      	movs	r2, #1
 8013a18:	755a      	strb	r2, [r3, #21]
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	e041      	b.n	8013aa2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	69ba      	ldr	r2, [r7, #24]
 8013a22:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	899b      	ldrh	r3, [r3, #12]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	699b      	ldr	r3, [r3, #24]
 8013a2e:	697a      	ldr	r2, [r7, #20]
 8013a30:	8992      	ldrh	r2, [r2, #12]
 8013a32:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a36:	fb02 f201 	mul.w	r2, r2, r1
 8013a3a:	1a9b      	subs	r3, r3, r2
 8013a3c:	1ac3      	subs	r3, r0, r3
 8013a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d901      	bls.n	8013a4c <f_read+0x260>
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	699b      	ldr	r3, [r3, #24]
 8013a56:	697a      	ldr	r2, [r7, #20]
 8013a58:	8992      	ldrh	r2, [r2, #12]
 8013a5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a5e:	fb02 f200 	mul.w	r2, r2, r0
 8013a62:	1a9b      	subs	r3, r3, r2
 8013a64:	440b      	add	r3, r1
 8013a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a68:	4619      	mov	r1, r3
 8013a6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a6c:	f7fd ff06 	bl	801187c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a74:	4413      	add	r3, r2
 8013a76:	627b      	str	r3, [r7, #36]	; 0x24
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	699a      	ldr	r2, [r3, #24]
 8013a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7e:	441a      	add	r2, r3
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	619a      	str	r2, [r3, #24]
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	681a      	ldr	r2, [r3, #0]
 8013a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8a:	441a      	add	r2, r3
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	601a      	str	r2, [r3, #0]
 8013a90:	687a      	ldr	r2, [r7, #4]
 8013a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a94:	1ad3      	subs	r3, r2, r3
 8013a96:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	f47f aee1 	bne.w	8013862 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013aa0:	2300      	movs	r3, #0
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3738      	adds	r7, #56	; 0x38
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}

08013aaa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013aaa:	b580      	push	{r7, lr}
 8013aac:	b08c      	sub	sp, #48	; 0x30
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	60f8      	str	r0, [r7, #12]
 8013ab2:	60b9      	str	r1, [r7, #8]
 8013ab4:	607a      	str	r2, [r7, #4]
 8013ab6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	f107 0210 	add.w	r2, r7, #16
 8013ac8:	4611      	mov	r1, r2
 8013aca:	4618      	mov	r0, r3
 8013acc:	f7ff fc44 	bl	8013358 <validate>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d107      	bne.n	8013aee <f_write+0x44>
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	7d5b      	ldrb	r3, [r3, #21]
 8013ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d002      	beq.n	8013af4 <f_write+0x4a>
 8013aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013af2:	e16a      	b.n	8013dca <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	7d1b      	ldrb	r3, [r3, #20]
 8013af8:	f003 0302 	and.w	r3, r3, #2
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d101      	bne.n	8013b04 <f_write+0x5a>
 8013b00:	2307      	movs	r3, #7
 8013b02:	e162      	b.n	8013dca <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	699a      	ldr	r2, [r3, #24]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	441a      	add	r2, r3
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	699b      	ldr	r3, [r3, #24]
 8013b10:	429a      	cmp	r2, r3
 8013b12:	f080 814c 	bcs.w	8013dae <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	699b      	ldr	r3, [r3, #24]
 8013b1a:	43db      	mvns	r3, r3
 8013b1c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013b1e:	e146      	b.n	8013dae <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	699b      	ldr	r3, [r3, #24]
 8013b24:	693a      	ldr	r2, [r7, #16]
 8013b26:	8992      	ldrh	r2, [r2, #12]
 8013b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b2c:	fb02 f201 	mul.w	r2, r2, r1
 8013b30:	1a9b      	subs	r3, r3, r2
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	f040 80f1 	bne.w	8013d1a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	699b      	ldr	r3, [r3, #24]
 8013b3c:	693a      	ldr	r2, [r7, #16]
 8013b3e:	8992      	ldrh	r2, [r2, #12]
 8013b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b44:	693a      	ldr	r2, [r7, #16]
 8013b46:	8952      	ldrh	r2, [r2, #10]
 8013b48:	3a01      	subs	r2, #1
 8013b4a:	4013      	ands	r3, r2
 8013b4c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013b4e:	69bb      	ldr	r3, [r7, #24]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d143      	bne.n	8013bdc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	699b      	ldr	r3, [r3, #24]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d10c      	bne.n	8013b76 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	689b      	ldr	r3, [r3, #8]
 8013b60:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d11a      	bne.n	8013b9e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	2100      	movs	r1, #0
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7fe fbbc 	bl	80122ea <create_chain>
 8013b72:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b74:	e013      	b.n	8013b9e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d007      	beq.n	8013b8e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	699b      	ldr	r3, [r3, #24]
 8013b82:	4619      	mov	r1, r3
 8013b84:	68f8      	ldr	r0, [r7, #12]
 8013b86:	f7fe fc48 	bl	801241a <clmt_clust>
 8013b8a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b8c:	e007      	b.n	8013b9e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013b8e:	68fa      	ldr	r2, [r7, #12]
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	69db      	ldr	r3, [r3, #28]
 8013b94:	4619      	mov	r1, r3
 8013b96:	4610      	mov	r0, r2
 8013b98:	f7fe fba7 	bl	80122ea <create_chain>
 8013b9c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	f000 8109 	beq.w	8013db8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d104      	bne.n	8013bb6 <f_write+0x10c>
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2202      	movs	r2, #2
 8013bb0:	755a      	strb	r2, [r3, #21]
 8013bb2:	2302      	movs	r3, #2
 8013bb4:	e109      	b.n	8013dca <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bbc:	d104      	bne.n	8013bc8 <f_write+0x11e>
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2201      	movs	r2, #1
 8013bc2:	755a      	strb	r2, [r3, #21]
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	e100      	b.n	8013dca <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bcc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	689b      	ldr	r3, [r3, #8]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d102      	bne.n	8013bdc <f_write+0x132>
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bda:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	7d1b      	ldrb	r3, [r3, #20]
 8013be0:	b25b      	sxtb	r3, r3
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	da18      	bge.n	8013c18 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	7858      	ldrb	r0, [r3, #1]
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	6a1a      	ldr	r2, [r3, #32]
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	f7fd fd81 	bl	80116fc <disk_write>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d004      	beq.n	8013c0a <f_write+0x160>
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2201      	movs	r2, #1
 8013c04:	755a      	strb	r2, [r3, #21]
 8013c06:	2301      	movs	r3, #1
 8013c08:	e0df      	b.n	8013dca <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	7d1b      	ldrb	r3, [r3, #20]
 8013c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c12:	b2da      	uxtb	r2, r3
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013c18:	693a      	ldr	r2, [r7, #16]
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	69db      	ldr	r3, [r3, #28]
 8013c1e:	4619      	mov	r1, r3
 8013c20:	4610      	mov	r0, r2
 8013c22:	f7fe f8f7 	bl	8011e14 <clust2sect>
 8013c26:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d104      	bne.n	8013c38 <f_write+0x18e>
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2202      	movs	r2, #2
 8013c32:	755a      	strb	r2, [r3, #21]
 8013c34:	2302      	movs	r3, #2
 8013c36:	e0c8      	b.n	8013dca <f_write+0x320>
			sect += csect;
 8013c38:	697a      	ldr	r2, [r7, #20]
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	4413      	add	r3, r2
 8013c3e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	899b      	ldrh	r3, [r3, #12]
 8013c44:	461a      	mov	r2, r3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c4c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013c4e:	6a3b      	ldr	r3, [r7, #32]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d043      	beq.n	8013cdc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013c54:	69ba      	ldr	r2, [r7, #24]
 8013c56:	6a3b      	ldr	r3, [r7, #32]
 8013c58:	4413      	add	r3, r2
 8013c5a:	693a      	ldr	r2, [r7, #16]
 8013c5c:	8952      	ldrh	r2, [r2, #10]
 8013c5e:	4293      	cmp	r3, r2
 8013c60:	d905      	bls.n	8013c6e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	895b      	ldrh	r3, [r3, #10]
 8013c66:	461a      	mov	r2, r3
 8013c68:	69bb      	ldr	r3, [r7, #24]
 8013c6a:	1ad3      	subs	r3, r2, r3
 8013c6c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	7858      	ldrb	r0, [r3, #1]
 8013c72:	6a3b      	ldr	r3, [r7, #32]
 8013c74:	697a      	ldr	r2, [r7, #20]
 8013c76:	69f9      	ldr	r1, [r7, #28]
 8013c78:	f7fd fd40 	bl	80116fc <disk_write>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d004      	beq.n	8013c8c <f_write+0x1e2>
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	2201      	movs	r2, #1
 8013c86:	755a      	strb	r2, [r3, #21]
 8013c88:	2301      	movs	r3, #1
 8013c8a:	e09e      	b.n	8013dca <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	6a1a      	ldr	r2, [r3, #32]
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	1ad3      	subs	r3, r2, r3
 8013c94:	6a3a      	ldr	r2, [r7, #32]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d918      	bls.n	8013ccc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	6a1a      	ldr	r2, [r3, #32]
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	1ad3      	subs	r3, r2, r3
 8013ca8:	693a      	ldr	r2, [r7, #16]
 8013caa:	8992      	ldrh	r2, [r2, #12]
 8013cac:	fb02 f303 	mul.w	r3, r2, r3
 8013cb0:	69fa      	ldr	r2, [r7, #28]
 8013cb2:	18d1      	adds	r1, r2, r3
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	899b      	ldrh	r3, [r3, #12]
 8013cb8:	461a      	mov	r2, r3
 8013cba:	f7fd fddf 	bl	801187c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	7d1b      	ldrb	r3, [r3, #20]
 8013cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cc6:	b2da      	uxtb	r2, r3
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013ccc:	693b      	ldr	r3, [r7, #16]
 8013cce:	899b      	ldrh	r3, [r3, #12]
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	6a3b      	ldr	r3, [r7, #32]
 8013cd4:	fb02 f303 	mul.w	r3, r2, r3
 8013cd8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013cda:	e04b      	b.n	8013d74 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	6a1b      	ldr	r3, [r3, #32]
 8013ce0:	697a      	ldr	r2, [r7, #20]
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d016      	beq.n	8013d14 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	699a      	ldr	r2, [r3, #24]
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d210      	bcs.n	8013d14 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	7858      	ldrb	r0, [r3, #1]
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	697a      	ldr	r2, [r7, #20]
 8013d00:	f7fd fcdc 	bl	80116bc <disk_read>
 8013d04:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d004      	beq.n	8013d14 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	755a      	strb	r2, [r3, #21]
 8013d10:	2301      	movs	r3, #1
 8013d12:	e05a      	b.n	8013dca <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	697a      	ldr	r2, [r7, #20]
 8013d18:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013d1a:	693b      	ldr	r3, [r7, #16]
 8013d1c:	899b      	ldrh	r3, [r3, #12]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	699b      	ldr	r3, [r3, #24]
 8013d24:	693a      	ldr	r2, [r7, #16]
 8013d26:	8992      	ldrh	r2, [r2, #12]
 8013d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d2c:	fb02 f201 	mul.w	r2, r2, r1
 8013d30:	1a9b      	subs	r3, r3, r2
 8013d32:	1ac3      	subs	r3, r0, r3
 8013d34:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d901      	bls.n	8013d42 <f_write+0x298>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	699b      	ldr	r3, [r3, #24]
 8013d4c:	693a      	ldr	r2, [r7, #16]
 8013d4e:	8992      	ldrh	r2, [r2, #12]
 8013d50:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d54:	fb02 f200 	mul.w	r2, r2, r0
 8013d58:	1a9b      	subs	r3, r3, r2
 8013d5a:	440b      	add	r3, r1
 8013d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d5e:	69f9      	ldr	r1, [r7, #28]
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7fd fd8b 	bl	801187c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	7d1b      	ldrb	r3, [r3, #20]
 8013d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013d6e:	b2da      	uxtb	r2, r3
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013d74:	69fa      	ldr	r2, [r7, #28]
 8013d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d78:	4413      	add	r3, r2
 8013d7a:	61fb      	str	r3, [r7, #28]
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	699a      	ldr	r2, [r3, #24]
 8013d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d82:	441a      	add	r2, r3
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	619a      	str	r2, [r3, #24]
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	68da      	ldr	r2, [r3, #12]
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	699b      	ldr	r3, [r3, #24]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	bf38      	it	cc
 8013d94:	461a      	movcc	r2, r3
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	60da      	str	r2, [r3, #12]
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	681a      	ldr	r2, [r3, #0]
 8013d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da0:	441a      	add	r2, r3
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	601a      	str	r2, [r3, #0]
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013daa:	1ad3      	subs	r3, r2, r3
 8013dac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	f47f aeb5 	bne.w	8013b20 <f_write+0x76>
 8013db6:	e000      	b.n	8013dba <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013db8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	7d1b      	ldrb	r3, [r3, #20]
 8013dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dc2:	b2da      	uxtb	r2, r3
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013dc8:	2300      	movs	r3, #0
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3730      	adds	r7, #48	; 0x30
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
	...

08013dd4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b086      	sub	sp, #24
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f107 0208 	add.w	r2, r7, #8
 8013de2:	4611      	mov	r1, r2
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7ff fab7 	bl	8013358 <validate>
 8013dea:	4603      	mov	r3, r0
 8013dec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013dee:	7dfb      	ldrb	r3, [r7, #23]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d167      	bne.n	8013ec4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	7d1b      	ldrb	r3, [r3, #20]
 8013df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d061      	beq.n	8013ec4 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	7d1b      	ldrb	r3, [r3, #20]
 8013e04:	b25b      	sxtb	r3, r3
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	da15      	bge.n	8013e36 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	7858      	ldrb	r0, [r3, #1]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	6a1a      	ldr	r2, [r3, #32]
 8013e18:	2301      	movs	r3, #1
 8013e1a:	f7fd fc6f 	bl	80116fc <disk_write>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d001      	beq.n	8013e28 <f_sync+0x54>
 8013e24:	2301      	movs	r3, #1
 8013e26:	e04e      	b.n	8013ec6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	7d1b      	ldrb	r3, [r3, #20]
 8013e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e30:	b2da      	uxtb	r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013e36:	4b26      	ldr	r3, [pc, #152]	; (8013ed0 <f_sync+0xfc>)
 8013e38:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013e3a:	68ba      	ldr	r2, [r7, #8]
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e40:	4619      	mov	r1, r3
 8013e42:	4610      	mov	r0, r2
 8013e44:	f7fd ff48 	bl	8011cd8 <move_window>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013e4c:	7dfb      	ldrb	r3, [r7, #23]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d138      	bne.n	8013ec4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	330b      	adds	r3, #11
 8013e5c:	781a      	ldrb	r2, [r3, #0]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	330b      	adds	r3, #11
 8013e62:	f042 0220 	orr.w	r2, r2, #32
 8013e66:	b2d2      	uxtb	r2, r2
 8013e68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6818      	ldr	r0, [r3, #0]
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	689b      	ldr	r3, [r3, #8]
 8013e72:	461a      	mov	r2, r3
 8013e74:	68f9      	ldr	r1, [r7, #12]
 8013e76:	f7fe fccd 	bl	8012814 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	f103 021c 	add.w	r2, r3, #28
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	68db      	ldr	r3, [r3, #12]
 8013e84:	4619      	mov	r1, r3
 8013e86:	4610      	mov	r0, r2
 8013e88:	f7fd fccc 	bl	8011824 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	3316      	adds	r3, #22
 8013e90:	6939      	ldr	r1, [r7, #16]
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fd fcc6 	bl	8011824 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	3312      	adds	r3, #18
 8013e9c:	2100      	movs	r1, #0
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fd fca5 	bl	80117ee <st_word>
					fs->wflag = 1;
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	2201      	movs	r2, #1
 8013ea8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7fd ff41 	bl	8011d34 <sync_fs>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	7d1b      	ldrb	r3, [r3, #20]
 8013eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013ebe:	b2da      	uxtb	r2, r3
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3718      	adds	r7, #24
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
 8013ece:	bf00      	nop
 8013ed0:	274a0000 	.word	0x274a0000

08013ed4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f7ff ff79 	bl	8013dd4 <f_sync>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013ee6:	7bfb      	ldrb	r3, [r7, #15]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d118      	bne.n	8013f1e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	f107 0208 	add.w	r2, r7, #8
 8013ef2:	4611      	mov	r1, r2
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7ff fa2f 	bl	8013358 <validate>
 8013efa:	4603      	mov	r3, r0
 8013efc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013efe:	7bfb      	ldrb	r3, [r7, #15]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d10c      	bne.n	8013f1e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	691b      	ldr	r3, [r3, #16]
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7fd fe41 	bl	8011b90 <dec_lock>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013f12:	7bfb      	ldrb	r3, [r7, #15]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d102      	bne.n	8013f1e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	3710      	adds	r7, #16
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}

08013f28 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013f28:	b590      	push	{r4, r7, lr}
 8013f2a:	b091      	sub	sp, #68	; 0x44
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013f30:	f107 0108 	add.w	r1, r7, #8
 8013f34:	1d3b      	adds	r3, r7, #4
 8013f36:	2200      	movs	r2, #0
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f7fe ff87 	bl	8012e4c <find_volume>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013f44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d131      	bne.n	8013fb0 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013f50:	687a      	ldr	r2, [r7, #4]
 8013f52:	f107 030c 	add.w	r3, r7, #12
 8013f56:	4611      	mov	r1, r2
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fe fe47 	bl	8012bec <follow_path>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d11a      	bne.n	8013fa2 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013f6c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013f70:	b25b      	sxtb	r3, r3
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	da03      	bge.n	8013f7e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	697a      	ldr	r2, [r7, #20]
 8013f7a:	619a      	str	r2, [r3, #24]
 8013f7c:	e011      	b.n	8013fa2 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013f7e:	7cbb      	ldrb	r3, [r7, #18]
 8013f80:	f003 0310 	and.w	r3, r3, #16
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d009      	beq.n	8013f9c <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f8c:	68bc      	ldr	r4, [r7, #8]
 8013f8e:	4611      	mov	r1, r2
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7fe fc20 	bl	80127d6 <ld_clust>
 8013f96:	4603      	mov	r3, r0
 8013f98:	61a3      	str	r3, [r4, #24]
 8013f9a:	e002      	b.n	8013fa2 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013f9c:	2305      	movs	r3, #5
 8013f9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013fa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fa6:	2b04      	cmp	r3, #4
 8013fa8:	d102      	bne.n	8013fb0 <f_chdir+0x88>
 8013faa:	2305      	movs	r3, #5
 8013fac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013fb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3744      	adds	r7, #68	; 0x44
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd90      	pop	{r4, r7, pc}

08013fbc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b090      	sub	sp, #64	; 0x40
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f107 0208 	add.w	r2, r7, #8
 8013fcc:	4611      	mov	r1, r2
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f7ff f9c2 	bl	8013358 <validate>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013fda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d103      	bne.n	8013fea <f_lseek+0x2e>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	7d5b      	ldrb	r3, [r3, #21]
 8013fe6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013fea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d002      	beq.n	8013ff8 <f_lseek+0x3c>
 8013ff2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ff6:	e201      	b.n	80143fc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	f000 80d9 	beq.w	80141b4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014008:	d15a      	bne.n	80140c0 <f_lseek+0x104>
			tbl = fp->cltbl;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801400e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014012:	1d1a      	adds	r2, r3, #4
 8014014:	627a      	str	r2, [r7, #36]	; 0x24
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	617b      	str	r3, [r7, #20]
 801401a:	2302      	movs	r3, #2
 801401c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	689b      	ldr	r3, [r3, #8]
 8014022:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014026:	2b00      	cmp	r3, #0
 8014028:	d03a      	beq.n	80140a0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801402c:	613b      	str	r3, [r7, #16]
 801402e:	2300      	movs	r3, #0
 8014030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014034:	3302      	adds	r3, #2
 8014036:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801403a:	60fb      	str	r3, [r7, #12]
 801403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801403e:	3301      	adds	r3, #1
 8014040:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014046:	4618      	mov	r0, r3
 8014048:	f7fd ff03 	bl	8011e52 <get_fat>
 801404c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014050:	2b01      	cmp	r3, #1
 8014052:	d804      	bhi.n	801405e <f_lseek+0xa2>
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2202      	movs	r2, #2
 8014058:	755a      	strb	r2, [r3, #21]
 801405a:	2302      	movs	r3, #2
 801405c:	e1ce      	b.n	80143fc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014064:	d104      	bne.n	8014070 <f_lseek+0xb4>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2201      	movs	r2, #1
 801406a:	755a      	strb	r2, [r3, #21]
 801406c:	2301      	movs	r3, #1
 801406e:	e1c5      	b.n	80143fc <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	3301      	adds	r3, #1
 8014074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014076:	429a      	cmp	r2, r3
 8014078:	d0de      	beq.n	8014038 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801407a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	429a      	cmp	r2, r3
 8014080:	d809      	bhi.n	8014096 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014084:	1d1a      	adds	r2, r3, #4
 8014086:	627a      	str	r2, [r7, #36]	; 0x24
 8014088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801408a:	601a      	str	r2, [r3, #0]
 801408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408e:	1d1a      	adds	r2, r3, #4
 8014090:	627a      	str	r2, [r7, #36]	; 0x24
 8014092:	693a      	ldr	r2, [r7, #16]
 8014094:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	69db      	ldr	r3, [r3, #28]
 801409a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801409c:	429a      	cmp	r2, r3
 801409e:	d3c4      	bcc.n	801402a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140a6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80140a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d803      	bhi.n	80140b8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80140b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b2:	2200      	movs	r2, #0
 80140b4:	601a      	str	r2, [r3, #0]
 80140b6:	e19f      	b.n	80143f8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80140b8:	2311      	movs	r3, #17
 80140ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80140be:	e19b      	b.n	80143f8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	683a      	ldr	r2, [r7, #0]
 80140c6:	429a      	cmp	r2, r3
 80140c8:	d902      	bls.n	80140d0 <f_lseek+0x114>
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	68db      	ldr	r3, [r3, #12]
 80140ce:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	683a      	ldr	r2, [r7, #0]
 80140d4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	f000 818d 	beq.w	80143f8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	3b01      	subs	r3, #1
 80140e2:	4619      	mov	r1, r3
 80140e4:	6878      	ldr	r0, [r7, #4]
 80140e6:	f7fe f998 	bl	801241a <clmt_clust>
 80140ea:	4602      	mov	r2, r0
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80140f0:	68ba      	ldr	r2, [r7, #8]
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	69db      	ldr	r3, [r3, #28]
 80140f6:	4619      	mov	r1, r3
 80140f8:	4610      	mov	r0, r2
 80140fa:	f7fd fe8b 	bl	8011e14 <clust2sect>
 80140fe:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014100:	69bb      	ldr	r3, [r7, #24]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d104      	bne.n	8014110 <f_lseek+0x154>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2202      	movs	r2, #2
 801410a:	755a      	strb	r2, [r3, #21]
 801410c:	2302      	movs	r3, #2
 801410e:	e175      	b.n	80143fc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	3b01      	subs	r3, #1
 8014114:	68ba      	ldr	r2, [r7, #8]
 8014116:	8992      	ldrh	r2, [r2, #12]
 8014118:	fbb3 f3f2 	udiv	r3, r3, r2
 801411c:	68ba      	ldr	r2, [r7, #8]
 801411e:	8952      	ldrh	r2, [r2, #10]
 8014120:	3a01      	subs	r2, #1
 8014122:	4013      	ands	r3, r2
 8014124:	69ba      	ldr	r2, [r7, #24]
 8014126:	4413      	add	r3, r2
 8014128:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	699b      	ldr	r3, [r3, #24]
 801412e:	68ba      	ldr	r2, [r7, #8]
 8014130:	8992      	ldrh	r2, [r2, #12]
 8014132:	fbb3 f1f2 	udiv	r1, r3, r2
 8014136:	fb02 f201 	mul.w	r2, r2, r1
 801413a:	1a9b      	subs	r3, r3, r2
 801413c:	2b00      	cmp	r3, #0
 801413e:	f000 815b 	beq.w	80143f8 <f_lseek+0x43c>
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6a1b      	ldr	r3, [r3, #32]
 8014146:	69ba      	ldr	r2, [r7, #24]
 8014148:	429a      	cmp	r2, r3
 801414a:	f000 8155 	beq.w	80143f8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	7d1b      	ldrb	r3, [r3, #20]
 8014152:	b25b      	sxtb	r3, r3
 8014154:	2b00      	cmp	r3, #0
 8014156:	da18      	bge.n	801418a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	7858      	ldrb	r0, [r3, #1]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6a1a      	ldr	r2, [r3, #32]
 8014166:	2301      	movs	r3, #1
 8014168:	f7fd fac8 	bl	80116fc <disk_write>
 801416c:	4603      	mov	r3, r0
 801416e:	2b00      	cmp	r3, #0
 8014170:	d004      	beq.n	801417c <f_lseek+0x1c0>
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2201      	movs	r2, #1
 8014176:	755a      	strb	r2, [r3, #21]
 8014178:	2301      	movs	r3, #1
 801417a:	e13f      	b.n	80143fc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	7d1b      	ldrb	r3, [r3, #20]
 8014180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014184:	b2da      	uxtb	r2, r3
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	7858      	ldrb	r0, [r3, #1]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014194:	2301      	movs	r3, #1
 8014196:	69ba      	ldr	r2, [r7, #24]
 8014198:	f7fd fa90 	bl	80116bc <disk_read>
 801419c:	4603      	mov	r3, r0
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d004      	beq.n	80141ac <f_lseek+0x1f0>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2201      	movs	r2, #1
 80141a6:	755a      	strb	r2, [r3, #21]
 80141a8:	2301      	movs	r3, #1
 80141aa:	e127      	b.n	80143fc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	69ba      	ldr	r2, [r7, #24]
 80141b0:	621a      	str	r2, [r3, #32]
 80141b2:	e121      	b.n	80143f8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	68db      	ldr	r3, [r3, #12]
 80141b8:	683a      	ldr	r2, [r7, #0]
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d908      	bls.n	80141d0 <f_lseek+0x214>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	7d1b      	ldrb	r3, [r3, #20]
 80141c2:	f003 0302 	and.w	r3, r3, #2
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d102      	bne.n	80141d0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	68db      	ldr	r3, [r3, #12]
 80141ce:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	699b      	ldr	r3, [r3, #24]
 80141d4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80141d6:	2300      	movs	r3, #0
 80141d8:	637b      	str	r3, [r7, #52]	; 0x34
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141de:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	f000 80b5 	beq.w	8014352 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	895b      	ldrh	r3, [r3, #10]
 80141ec:	461a      	mov	r2, r3
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	899b      	ldrh	r3, [r3, #12]
 80141f2:	fb03 f302 	mul.w	r3, r3, r2
 80141f6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80141f8:	6a3b      	ldr	r3, [r7, #32]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d01b      	beq.n	8014236 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80141fe:	683b      	ldr	r3, [r7, #0]
 8014200:	1e5a      	subs	r2, r3, #1
 8014202:	69fb      	ldr	r3, [r7, #28]
 8014204:	fbb2 f2f3 	udiv	r2, r2, r3
 8014208:	6a3b      	ldr	r3, [r7, #32]
 801420a:	1e59      	subs	r1, r3, #1
 801420c:	69fb      	ldr	r3, [r7, #28]
 801420e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014212:	429a      	cmp	r2, r3
 8014214:	d30f      	bcc.n	8014236 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014216:	6a3b      	ldr	r3, [r7, #32]
 8014218:	1e5a      	subs	r2, r3, #1
 801421a:	69fb      	ldr	r3, [r7, #28]
 801421c:	425b      	negs	r3, r3
 801421e:	401a      	ands	r2, r3
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	699b      	ldr	r3, [r3, #24]
 8014228:	683a      	ldr	r2, [r7, #0]
 801422a:	1ad3      	subs	r3, r2, r3
 801422c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	69db      	ldr	r3, [r3, #28]
 8014232:	63bb      	str	r3, [r7, #56]	; 0x38
 8014234:	e022      	b.n	801427c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	689b      	ldr	r3, [r3, #8]
 801423a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801423e:	2b00      	cmp	r3, #0
 8014240:	d119      	bne.n	8014276 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	2100      	movs	r1, #0
 8014246:	4618      	mov	r0, r3
 8014248:	f7fe f84f 	bl	80122ea <create_chain>
 801424c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014250:	2b01      	cmp	r3, #1
 8014252:	d104      	bne.n	801425e <f_lseek+0x2a2>
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2202      	movs	r2, #2
 8014258:	755a      	strb	r2, [r3, #21]
 801425a:	2302      	movs	r3, #2
 801425c:	e0ce      	b.n	80143fc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014264:	d104      	bne.n	8014270 <f_lseek+0x2b4>
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	2201      	movs	r2, #1
 801426a:	755a      	strb	r2, [r3, #21]
 801426c:	2301      	movs	r3, #1
 801426e:	e0c5      	b.n	80143fc <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014274:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801427a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801427e:	2b00      	cmp	r3, #0
 8014280:	d067      	beq.n	8014352 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014282:	e03a      	b.n	80142fa <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014284:	683a      	ldr	r2, [r7, #0]
 8014286:	69fb      	ldr	r3, [r7, #28]
 8014288:	1ad3      	subs	r3, r2, r3
 801428a:	603b      	str	r3, [r7, #0]
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	699a      	ldr	r2, [r3, #24]
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	441a      	add	r2, r3
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	7d1b      	ldrb	r3, [r3, #20]
 801429c:	f003 0302 	and.w	r3, r3, #2
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d00b      	beq.n	80142bc <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7fe f81e 	bl	80122ea <create_chain>
 80142ae:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80142b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d108      	bne.n	80142c8 <f_lseek+0x30c>
							ofs = 0; break;
 80142b6:	2300      	movs	r3, #0
 80142b8:	603b      	str	r3, [r7, #0]
 80142ba:	e022      	b.n	8014302 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7fd fdc6 	bl	8011e52 <get_fat>
 80142c6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80142c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ce:	d104      	bne.n	80142da <f_lseek+0x31e>
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2201      	movs	r2, #1
 80142d4:	755a      	strb	r2, [r3, #21]
 80142d6:	2301      	movs	r3, #1
 80142d8:	e090      	b.n	80143fc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80142da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d904      	bls.n	80142ea <f_lseek+0x32e>
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	69db      	ldr	r3, [r3, #28]
 80142e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d304      	bcc.n	80142f4 <f_lseek+0x338>
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2202      	movs	r2, #2
 80142ee:	755a      	strb	r2, [r3, #21]
 80142f0:	2302      	movs	r3, #2
 80142f2:	e083      	b.n	80143fc <f_lseek+0x440>
					fp->clust = clst;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142f8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80142fa:	683a      	ldr	r2, [r7, #0]
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d8c0      	bhi.n	8014284 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	699a      	ldr	r2, [r3, #24]
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	441a      	add	r2, r3
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	899b      	ldrh	r3, [r3, #12]
 8014312:	461a      	mov	r2, r3
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	fbb3 f1f2 	udiv	r1, r3, r2
 801431a:	fb02 f201 	mul.w	r2, r2, r1
 801431e:	1a9b      	subs	r3, r3, r2
 8014320:	2b00      	cmp	r3, #0
 8014322:	d016      	beq.n	8014352 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014328:	4618      	mov	r0, r3
 801432a:	f7fd fd73 	bl	8011e14 <clust2sect>
 801432e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014332:	2b00      	cmp	r3, #0
 8014334:	d104      	bne.n	8014340 <f_lseek+0x384>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2202      	movs	r2, #2
 801433a:	755a      	strb	r2, [r3, #21]
 801433c:	2302      	movs	r3, #2
 801433e:	e05d      	b.n	80143fc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	899b      	ldrh	r3, [r3, #12]
 8014344:	461a      	mov	r2, r3
 8014346:	683b      	ldr	r3, [r7, #0]
 8014348:	fbb3 f3f2 	udiv	r3, r3, r2
 801434c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801434e:	4413      	add	r3, r2
 8014350:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	699a      	ldr	r2, [r3, #24]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	68db      	ldr	r3, [r3, #12]
 801435a:	429a      	cmp	r2, r3
 801435c:	d90a      	bls.n	8014374 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	699a      	ldr	r2, [r3, #24]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	7d1b      	ldrb	r3, [r3, #20]
 801436a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801436e:	b2da      	uxtb	r2, r3
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	699b      	ldr	r3, [r3, #24]
 8014378:	68ba      	ldr	r2, [r7, #8]
 801437a:	8992      	ldrh	r2, [r2, #12]
 801437c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014380:	fb02 f201 	mul.w	r2, r2, r1
 8014384:	1a9b      	subs	r3, r3, r2
 8014386:	2b00      	cmp	r3, #0
 8014388:	d036      	beq.n	80143f8 <f_lseek+0x43c>
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	6a1b      	ldr	r3, [r3, #32]
 801438e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014390:	429a      	cmp	r2, r3
 8014392:	d031      	beq.n	80143f8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	7d1b      	ldrb	r3, [r3, #20]
 8014398:	b25b      	sxtb	r3, r3
 801439a:	2b00      	cmp	r3, #0
 801439c:	da18      	bge.n	80143d0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	7858      	ldrb	r0, [r3, #1]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6a1a      	ldr	r2, [r3, #32]
 80143ac:	2301      	movs	r3, #1
 80143ae:	f7fd f9a5 	bl	80116fc <disk_write>
 80143b2:	4603      	mov	r3, r0
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d004      	beq.n	80143c2 <f_lseek+0x406>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2201      	movs	r2, #1
 80143bc:	755a      	strb	r2, [r3, #21]
 80143be:	2301      	movs	r3, #1
 80143c0:	e01c      	b.n	80143fc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	7d1b      	ldrb	r3, [r3, #20]
 80143c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143ca:	b2da      	uxtb	r2, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	7858      	ldrb	r0, [r3, #1]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143da:	2301      	movs	r3, #1
 80143dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143de:	f7fd f96d 	bl	80116bc <disk_read>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d004      	beq.n	80143f2 <f_lseek+0x436>
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2201      	movs	r2, #1
 80143ec:	755a      	strb	r2, [r3, #21]
 80143ee:	2301      	movs	r3, #1
 80143f0:	e004      	b.n	80143fc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143f6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80143f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80143fc:	4618      	mov	r0, r3
 80143fe:	3740      	adds	r7, #64	; 0x40
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}

08014404 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b09e      	sub	sp, #120	; 0x78
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801440c:	2300      	movs	r3, #0
 801440e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014410:	f107 010c 	add.w	r1, r7, #12
 8014414:	1d3b      	adds	r3, r7, #4
 8014416:	2202      	movs	r2, #2
 8014418:	4618      	mov	r0, r3
 801441a:	f7fe fd17 	bl	8012e4c <find_volume>
 801441e:	4603      	mov	r3, r0
 8014420:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014428:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801442c:	2b00      	cmp	r3, #0
 801442e:	f040 80a4 	bne.w	801457a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014432:	687a      	ldr	r2, [r7, #4]
 8014434:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014438:	4611      	mov	r1, r2
 801443a:	4618      	mov	r0, r3
 801443c:	f7fe fbd6 	bl	8012bec <follow_path>
 8014440:	4603      	mov	r3, r0
 8014442:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014446:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801444a:	2b00      	cmp	r3, #0
 801444c:	d108      	bne.n	8014460 <f_unlink+0x5c>
 801444e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014452:	f003 0320 	and.w	r3, r3, #32
 8014456:	2b00      	cmp	r3, #0
 8014458:	d002      	beq.n	8014460 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801445a:	2306      	movs	r3, #6
 801445c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014460:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014464:	2b00      	cmp	r3, #0
 8014466:	d108      	bne.n	801447a <f_unlink+0x76>
 8014468:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801446c:	2102      	movs	r1, #2
 801446e:	4618      	mov	r0, r3
 8014470:	f7fd fa82 	bl	8011978 <chk_lock>
 8014474:	4603      	mov	r3, r0
 8014476:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801447a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801447e:	2b00      	cmp	r3, #0
 8014480:	d17b      	bne.n	801457a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014482:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014486:	b25b      	sxtb	r3, r3
 8014488:	2b00      	cmp	r3, #0
 801448a:	da03      	bge.n	8014494 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801448c:	2306      	movs	r3, #6
 801448e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014492:	e008      	b.n	80144a6 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014494:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014498:	f003 0301 	and.w	r3, r3, #1
 801449c:	2b00      	cmp	r3, #0
 801449e:	d002      	beq.n	80144a6 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80144a0:	2307      	movs	r3, #7
 80144a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80144a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d13d      	bne.n	801452a <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80144b2:	4611      	mov	r1, r2
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fe f98e 	bl	80127d6 <ld_clust>
 80144ba:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80144bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80144c0:	f003 0310 	and.w	r3, r3, #16
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d030      	beq.n	801452a <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	699b      	ldr	r3, [r3, #24]
 80144cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80144ce:	429a      	cmp	r2, r3
 80144d0:	d103      	bne.n	80144da <f_unlink+0xd6>
						res = FR_DENIED;
 80144d2:	2307      	movs	r3, #7
 80144d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80144d8:	e027      	b.n	801452a <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80144de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80144e0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80144e2:	f107 0310 	add.w	r3, r7, #16
 80144e6:	2100      	movs	r1, #0
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fd ffce 	bl	801248a <dir_sdi>
 80144ee:	4603      	mov	r3, r0
 80144f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80144f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d116      	bne.n	801452a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80144fc:	f107 0310 	add.w	r3, r7, #16
 8014500:	2100      	movs	r1, #0
 8014502:	4618      	mov	r0, r3
 8014504:	f7fe f9a6 	bl	8012854 <dir_read>
 8014508:	4603      	mov	r3, r0
 801450a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801450e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014512:	2b00      	cmp	r3, #0
 8014514:	d102      	bne.n	801451c <f_unlink+0x118>
 8014516:	2307      	movs	r3, #7
 8014518:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801451c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014520:	2b04      	cmp	r3, #4
 8014522:	d102      	bne.n	801452a <f_unlink+0x126>
 8014524:	2300      	movs	r3, #0
 8014526:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801452a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801452e:	2b00      	cmp	r3, #0
 8014530:	d123      	bne.n	801457a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014532:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014536:	4618      	mov	r0, r3
 8014538:	f7fe fa70 	bl	8012a1c <dir_remove>
 801453c:	4603      	mov	r3, r0
 801453e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014542:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014546:	2b00      	cmp	r3, #0
 8014548:	d10c      	bne.n	8014564 <f_unlink+0x160>
 801454a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801454c:	2b00      	cmp	r3, #0
 801454e:	d009      	beq.n	8014564 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014550:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014554:	2200      	movs	r2, #0
 8014556:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014558:	4618      	mov	r0, r3
 801455a:	f7fd fe61 	bl	8012220 <remove_chain>
 801455e:	4603      	mov	r3, r0
 8014560:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014564:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014568:	2b00      	cmp	r3, #0
 801456a:	d106      	bne.n	801457a <f_unlink+0x176>
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	4618      	mov	r0, r3
 8014570:	f7fd fbe0 	bl	8011d34 <sync_fs>
 8014574:	4603      	mov	r3, r0
 8014576:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801457a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801457e:	4618      	mov	r0, r3
 8014580:	3778      	adds	r7, #120	; 0x78
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}
	...

08014588 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b096      	sub	sp, #88	; 0x58
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014590:	f107 0108 	add.w	r1, r7, #8
 8014594:	1d3b      	adds	r3, r7, #4
 8014596:	2202      	movs	r2, #2
 8014598:	4618      	mov	r0, r3
 801459a:	f7fe fc57 	bl	8012e4c <find_volume>
 801459e:	4603      	mov	r3, r0
 80145a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80145a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	f040 80fe 	bne.w	80147ae <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80145b2:	687a      	ldr	r2, [r7, #4]
 80145b4:	f107 030c 	add.w	r3, r7, #12
 80145b8:	4611      	mov	r1, r2
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7fe fb16 	bl	8012bec <follow_path>
 80145c0:	4603      	mov	r3, r0
 80145c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80145c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d102      	bne.n	80145d4 <f_mkdir+0x4c>
 80145ce:	2308      	movs	r3, #8
 80145d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80145d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145d8:	2b04      	cmp	r3, #4
 80145da:	d108      	bne.n	80145ee <f_mkdir+0x66>
 80145dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80145e0:	f003 0320 	and.w	r3, r3, #32
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d002      	beq.n	80145ee <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80145e8:	2306      	movs	r3, #6
 80145ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80145ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145f2:	2b04      	cmp	r3, #4
 80145f4:	f040 80db 	bne.w	80147ae <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80145f8:	f107 030c 	add.w	r3, r7, #12
 80145fc:	2100      	movs	r1, #0
 80145fe:	4618      	mov	r0, r3
 8014600:	f7fd fe73 	bl	80122ea <create_chain>
 8014604:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014606:	68bb      	ldr	r3, [r7, #8]
 8014608:	895b      	ldrh	r3, [r3, #10]
 801460a:	461a      	mov	r2, r3
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	899b      	ldrh	r3, [r3, #12]
 8014610:	fb03 f302 	mul.w	r3, r3, r2
 8014614:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014616:	2300      	movs	r3, #0
 8014618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801461c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801461e:	2b00      	cmp	r3, #0
 8014620:	d102      	bne.n	8014628 <f_mkdir+0xa0>
 8014622:	2307      	movs	r3, #7
 8014624:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801462a:	2b01      	cmp	r3, #1
 801462c:	d102      	bne.n	8014634 <f_mkdir+0xac>
 801462e:	2302      	movs	r3, #2
 8014630:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801463a:	d102      	bne.n	8014642 <f_mkdir+0xba>
 801463c:	2301      	movs	r3, #1
 801463e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014642:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014646:	2b00      	cmp	r3, #0
 8014648:	d106      	bne.n	8014658 <f_mkdir+0xd0>
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	4618      	mov	r0, r3
 801464e:	f7fd faff 	bl	8011c50 <sync_window>
 8014652:	4603      	mov	r3, r0
 8014654:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014658:	4b58      	ldr	r3, [pc, #352]	; (80147bc <f_mkdir+0x234>)
 801465a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801465c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014660:	2b00      	cmp	r3, #0
 8014662:	d16c      	bne.n	801473e <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014668:	4618      	mov	r0, r3
 801466a:	f7fd fbd3 	bl	8011e14 <clust2sect>
 801466e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	3338      	adds	r3, #56	; 0x38
 8014674:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	899b      	ldrh	r3, [r3, #12]
 801467a:	461a      	mov	r2, r3
 801467c:	2100      	movs	r1, #0
 801467e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014680:	f7fd f91d 	bl	80118be <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014684:	220b      	movs	r2, #11
 8014686:	2120      	movs	r1, #32
 8014688:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801468a:	f7fd f918 	bl	80118be <mem_set>
					dir[DIR_Name] = '.';
 801468e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014690:	222e      	movs	r2, #46	; 0x2e
 8014692:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014696:	330b      	adds	r3, #11
 8014698:	2210      	movs	r2, #16
 801469a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801469c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801469e:	3316      	adds	r3, #22
 80146a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7fd f8be 	bl	8011824 <st_dword>
					st_clust(fs, dir, dcl);
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80146ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146ae:	4618      	mov	r0, r3
 80146b0:	f7fe f8b0 	bl	8012814 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80146b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146b6:	3320      	adds	r3, #32
 80146b8:	2220      	movs	r2, #32
 80146ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146bc:	4618      	mov	r0, r3
 80146be:	f7fd f8dd 	bl	801187c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80146c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146c4:	3321      	adds	r3, #33	; 0x21
 80146c6:	222e      	movs	r2, #46	; 0x2e
 80146c8:	701a      	strb	r2, [r3, #0]
 80146ca:	697b      	ldr	r3, [r7, #20]
 80146cc:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	2b03      	cmp	r3, #3
 80146d4:	d106      	bne.n	80146e4 <f_mkdir+0x15c>
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146dc:	429a      	cmp	r2, r3
 80146de:	d101      	bne.n	80146e4 <f_mkdir+0x15c>
 80146e0:	2300      	movs	r3, #0
 80146e2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80146e4:	68b8      	ldr	r0, [r7, #8]
 80146e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146e8:	3320      	adds	r3, #32
 80146ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146ec:	4619      	mov	r1, r3
 80146ee:	f7fe f891 	bl	8012814 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	895b      	ldrh	r3, [r3, #10]
 80146f6:	653b      	str	r3, [r7, #80]	; 0x50
 80146f8:	e01c      	b.n	8014734 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80146fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146fc:	1c5a      	adds	r2, r3, #1
 80146fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014700:	68ba      	ldr	r2, [r7, #8]
 8014702:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	2201      	movs	r2, #1
 8014708:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	4618      	mov	r0, r3
 801470e:	f7fd fa9f 	bl	8011c50 <sync_window>
 8014712:	4603      	mov	r3, r0
 8014714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014718:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801471c:	2b00      	cmp	r3, #0
 801471e:	d10d      	bne.n	801473c <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	899b      	ldrh	r3, [r3, #12]
 8014724:	461a      	mov	r2, r3
 8014726:	2100      	movs	r1, #0
 8014728:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801472a:	f7fd f8c8 	bl	80118be <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801472e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014730:	3b01      	subs	r3, #1
 8014732:	653b      	str	r3, [r7, #80]	; 0x50
 8014734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014736:	2b00      	cmp	r3, #0
 8014738:	d1df      	bne.n	80146fa <f_mkdir+0x172>
 801473a:	e000      	b.n	801473e <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 801473c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801473e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014742:	2b00      	cmp	r3, #0
 8014744:	d107      	bne.n	8014756 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014746:	f107 030c 	add.w	r3, r7, #12
 801474a:	4618      	mov	r0, r3
 801474c:	f7fe f934 	bl	80129b8 <dir_register>
 8014750:	4603      	mov	r3, r0
 8014752:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014756:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801475a:	2b00      	cmp	r3, #0
 801475c:	d120      	bne.n	80147a0 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014760:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014764:	3316      	adds	r3, #22
 8014766:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014768:	4618      	mov	r0, r3
 801476a:	f7fd f85b 	bl	8011824 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014772:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014774:	4618      	mov	r0, r3
 8014776:	f7fe f84d 	bl	8012814 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801477a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801477c:	330b      	adds	r3, #11
 801477e:	2210      	movs	r2, #16
 8014780:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	2201      	movs	r2, #1
 8014786:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801478c:	2b00      	cmp	r3, #0
 801478e:	d10e      	bne.n	80147ae <f_mkdir+0x226>
					res = sync_fs(fs);
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	4618      	mov	r0, r3
 8014794:	f7fd face 	bl	8011d34 <sync_fs>
 8014798:	4603      	mov	r3, r0
 801479a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801479e:	e006      	b.n	80147ae <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80147a0:	f107 030c 	add.w	r3, r7, #12
 80147a4:	2200      	movs	r2, #0
 80147a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7fd fd39 	bl	8012220 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80147ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	3758      	adds	r7, #88	; 0x58
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}
 80147ba:	bf00      	nop
 80147bc:	274a0000 	.word	0x274a0000

080147c0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b088      	sub	sp, #32
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	60f8      	str	r0, [r7, #12]
 80147c8:	60b9      	str	r1, [r7, #8]
 80147ca:	607a      	str	r2, [r7, #4]
	int n = 0;
 80147cc:	2300      	movs	r3, #0
 80147ce:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147d4:	e017      	b.n	8014806 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80147d6:	f107 0310 	add.w	r3, r7, #16
 80147da:	f107 0114 	add.w	r1, r7, #20
 80147de:	2201      	movs	r2, #1
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f7ff f803 	bl	80137ec <f_read>
		if (rc != 1) break;
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d112      	bne.n	8014812 <f_gets+0x52>
		c = s[0];
 80147ec:	7d3b      	ldrb	r3, [r7, #20]
 80147ee:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80147f0:	69bb      	ldr	r3, [r7, #24]
 80147f2:	1c5a      	adds	r2, r3, #1
 80147f4:	61ba      	str	r2, [r7, #24]
 80147f6:	7dfa      	ldrb	r2, [r7, #23]
 80147f8:	701a      	strb	r2, [r3, #0]
		n++;
 80147fa:	69fb      	ldr	r3, [r7, #28]
 80147fc:	3301      	adds	r3, #1
 80147fe:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014800:	7dfb      	ldrb	r3, [r7, #23]
 8014802:	2b0a      	cmp	r3, #10
 8014804:	d007      	beq.n	8014816 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	3b01      	subs	r3, #1
 801480a:	69fa      	ldr	r2, [r7, #28]
 801480c:	429a      	cmp	r2, r3
 801480e:	dbe2      	blt.n	80147d6 <f_gets+0x16>
 8014810:	e002      	b.n	8014818 <f_gets+0x58>
		if (rc != 1) break;
 8014812:	bf00      	nop
 8014814:	e000      	b.n	8014818 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8014816:	bf00      	nop
	}
	*p = 0;
 8014818:	69bb      	ldr	r3, [r7, #24]
 801481a:	2200      	movs	r2, #0
 801481c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801481e:	69fb      	ldr	r3, [r7, #28]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d001      	beq.n	8014828 <f_gets+0x68>
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	e000      	b.n	801482a <f_gets+0x6a>
 8014828:	2300      	movs	r3, #0
}
 801482a:	4618      	mov	r0, r3
 801482c:	3720      	adds	r7, #32
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}
	...

08014834 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014834:	b480      	push	{r7}
 8014836:	b087      	sub	sp, #28
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	4613      	mov	r3, r2
 8014840:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014842:	2301      	movs	r3, #1
 8014844:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014846:	2300      	movs	r3, #0
 8014848:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801484a:	4b1f      	ldr	r3, [pc, #124]	; (80148c8 <FATFS_LinkDriverEx+0x94>)
 801484c:	7a5b      	ldrb	r3, [r3, #9]
 801484e:	b2db      	uxtb	r3, r3
 8014850:	2b00      	cmp	r3, #0
 8014852:	d131      	bne.n	80148b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014854:	4b1c      	ldr	r3, [pc, #112]	; (80148c8 <FATFS_LinkDriverEx+0x94>)
 8014856:	7a5b      	ldrb	r3, [r3, #9]
 8014858:	b2db      	uxtb	r3, r3
 801485a:	461a      	mov	r2, r3
 801485c:	4b1a      	ldr	r3, [pc, #104]	; (80148c8 <FATFS_LinkDriverEx+0x94>)
 801485e:	2100      	movs	r1, #0
 8014860:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014862:	4b19      	ldr	r3, [pc, #100]	; (80148c8 <FATFS_LinkDriverEx+0x94>)
 8014864:	7a5b      	ldrb	r3, [r3, #9]
 8014866:	b2db      	uxtb	r3, r3
 8014868:	4a17      	ldr	r2, [pc, #92]	; (80148c8 <FATFS_LinkDriverEx+0x94>)
 801486a:	009b      	lsls	r3, r3, #2
 801486c:	4413      	add	r3, r2
 801486e:	68fa      	ldr	r2, [r7, #12]
 8014870:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014872:	4b15      	ldr	r3, [pc, #84]	; (80148c8 <FATFS_LinkDriverEx+0x94>)
 8014874:	7a5b      	ldrb	r3, [r3, #9]
 8014876:	b2db      	uxtb	r3, r3
 8014878:	461a      	mov	r2, r3
 801487a:	4b13      	ldr	r3, [pc, #76]	; (80148c8 <FATFS_LinkDriverEx+0x94>)
 801487c:	4413      	add	r3, r2
 801487e:	79fa      	ldrb	r2, [r7, #7]
 8014880:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014882:	4b11      	ldr	r3, [pc, #68]	; (80148c8 <FATFS_LinkDriverEx+0x94>)
 8014884:	7a5b      	ldrb	r3, [r3, #9]
 8014886:	b2db      	uxtb	r3, r3
 8014888:	1c5a      	adds	r2, r3, #1
 801488a:	b2d1      	uxtb	r1, r2
 801488c:	4a0e      	ldr	r2, [pc, #56]	; (80148c8 <FATFS_LinkDriverEx+0x94>)
 801488e:	7251      	strb	r1, [r2, #9]
 8014890:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014892:	7dbb      	ldrb	r3, [r7, #22]
 8014894:	3330      	adds	r3, #48	; 0x30
 8014896:	b2da      	uxtb	r2, r3
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801489c:	68bb      	ldr	r3, [r7, #8]
 801489e:	3301      	adds	r3, #1
 80148a0:	223a      	movs	r2, #58	; 0x3a
 80148a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	3302      	adds	r3, #2
 80148a8:	222f      	movs	r2, #47	; 0x2f
 80148aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	3303      	adds	r3, #3
 80148b0:	2200      	movs	r2, #0
 80148b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148b4:	2300      	movs	r3, #0
 80148b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	371c      	adds	r7, #28
 80148be:	46bd      	mov	sp, r7
 80148c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c4:	4770      	bx	lr
 80148c6:	bf00      	nop
 80148c8:	2004248c 	.word	0x2004248c

080148cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
 80148d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80148d6:	2200      	movs	r2, #0
 80148d8:	6839      	ldr	r1, [r7, #0]
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f7ff ffaa 	bl	8014834 <FATFS_LinkDriverEx>
 80148e0:	4603      	mov	r3, r0
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	3708      	adds	r7, #8
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}

080148ea <__cxa_guard_acquire>:
 80148ea:	6803      	ldr	r3, [r0, #0]
 80148ec:	07db      	lsls	r3, r3, #31
 80148ee:	d406      	bmi.n	80148fe <__cxa_guard_acquire+0x14>
 80148f0:	7843      	ldrb	r3, [r0, #1]
 80148f2:	b103      	cbz	r3, 80148f6 <__cxa_guard_acquire+0xc>
 80148f4:	deff      	udf	#255	; 0xff
 80148f6:	2301      	movs	r3, #1
 80148f8:	7043      	strb	r3, [r0, #1]
 80148fa:	4618      	mov	r0, r3
 80148fc:	4770      	bx	lr
 80148fe:	2000      	movs	r0, #0
 8014900:	4770      	bx	lr

08014902 <__cxa_guard_release>:
 8014902:	2301      	movs	r3, #1
 8014904:	6003      	str	r3, [r0, #0]
 8014906:	4770      	bx	lr

08014908 <cos>:
 8014908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801490a:	ec51 0b10 	vmov	r0, r1, d0
 801490e:	4a1e      	ldr	r2, [pc, #120]	; (8014988 <cos+0x80>)
 8014910:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014914:	4293      	cmp	r3, r2
 8014916:	dc06      	bgt.n	8014926 <cos+0x1e>
 8014918:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014980 <cos+0x78>
 801491c:	f000 fa74 	bl	8014e08 <__kernel_cos>
 8014920:	ec51 0b10 	vmov	r0, r1, d0
 8014924:	e007      	b.n	8014936 <cos+0x2e>
 8014926:	4a19      	ldr	r2, [pc, #100]	; (801498c <cos+0x84>)
 8014928:	4293      	cmp	r3, r2
 801492a:	dd09      	ble.n	8014940 <cos+0x38>
 801492c:	ee10 2a10 	vmov	r2, s0
 8014930:	460b      	mov	r3, r1
 8014932:	f7eb fcc1 	bl	80002b8 <__aeabi_dsub>
 8014936:	ec41 0b10 	vmov	d0, r0, r1
 801493a:	b005      	add	sp, #20
 801493c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014940:	4668      	mov	r0, sp
 8014942:	f000 f86d 	bl	8014a20 <__ieee754_rem_pio2>
 8014946:	f000 0003 	and.w	r0, r0, #3
 801494a:	2801      	cmp	r0, #1
 801494c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014950:	ed9d 0b00 	vldr	d0, [sp]
 8014954:	d007      	beq.n	8014966 <cos+0x5e>
 8014956:	2802      	cmp	r0, #2
 8014958:	d00e      	beq.n	8014978 <cos+0x70>
 801495a:	2800      	cmp	r0, #0
 801495c:	d0de      	beq.n	801491c <cos+0x14>
 801495e:	2001      	movs	r0, #1
 8014960:	f000 fe5a 	bl	8015618 <__kernel_sin>
 8014964:	e7dc      	b.n	8014920 <cos+0x18>
 8014966:	f000 fe57 	bl	8015618 <__kernel_sin>
 801496a:	ec53 2b10 	vmov	r2, r3, d0
 801496e:	ee10 0a10 	vmov	r0, s0
 8014972:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014976:	e7de      	b.n	8014936 <cos+0x2e>
 8014978:	f000 fa46 	bl	8014e08 <__kernel_cos>
 801497c:	e7f5      	b.n	801496a <cos+0x62>
 801497e:	bf00      	nop
	...
 8014988:	3fe921fb 	.word	0x3fe921fb
 801498c:	7fefffff 	.word	0x7fefffff

08014990 <sin>:
 8014990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014992:	ec51 0b10 	vmov	r0, r1, d0
 8014996:	4a20      	ldr	r2, [pc, #128]	; (8014a18 <sin+0x88>)
 8014998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801499c:	4293      	cmp	r3, r2
 801499e:	dc07      	bgt.n	80149b0 <sin+0x20>
 80149a0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014a10 <sin+0x80>
 80149a4:	2000      	movs	r0, #0
 80149a6:	f000 fe37 	bl	8015618 <__kernel_sin>
 80149aa:	ec51 0b10 	vmov	r0, r1, d0
 80149ae:	e007      	b.n	80149c0 <sin+0x30>
 80149b0:	4a1a      	ldr	r2, [pc, #104]	; (8014a1c <sin+0x8c>)
 80149b2:	4293      	cmp	r3, r2
 80149b4:	dd09      	ble.n	80149ca <sin+0x3a>
 80149b6:	ee10 2a10 	vmov	r2, s0
 80149ba:	460b      	mov	r3, r1
 80149bc:	f7eb fc7c 	bl	80002b8 <__aeabi_dsub>
 80149c0:	ec41 0b10 	vmov	d0, r0, r1
 80149c4:	b005      	add	sp, #20
 80149c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80149ca:	4668      	mov	r0, sp
 80149cc:	f000 f828 	bl	8014a20 <__ieee754_rem_pio2>
 80149d0:	f000 0003 	and.w	r0, r0, #3
 80149d4:	2801      	cmp	r0, #1
 80149d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80149da:	ed9d 0b00 	vldr	d0, [sp]
 80149de:	d004      	beq.n	80149ea <sin+0x5a>
 80149e0:	2802      	cmp	r0, #2
 80149e2:	d005      	beq.n	80149f0 <sin+0x60>
 80149e4:	b970      	cbnz	r0, 8014a04 <sin+0x74>
 80149e6:	2001      	movs	r0, #1
 80149e8:	e7dd      	b.n	80149a6 <sin+0x16>
 80149ea:	f000 fa0d 	bl	8014e08 <__kernel_cos>
 80149ee:	e7dc      	b.n	80149aa <sin+0x1a>
 80149f0:	2001      	movs	r0, #1
 80149f2:	f000 fe11 	bl	8015618 <__kernel_sin>
 80149f6:	ec53 2b10 	vmov	r2, r3, d0
 80149fa:	ee10 0a10 	vmov	r0, s0
 80149fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014a02:	e7dd      	b.n	80149c0 <sin+0x30>
 8014a04:	f000 fa00 	bl	8014e08 <__kernel_cos>
 8014a08:	e7f5      	b.n	80149f6 <sin+0x66>
 8014a0a:	bf00      	nop
 8014a0c:	f3af 8000 	nop.w
	...
 8014a18:	3fe921fb 	.word	0x3fe921fb
 8014a1c:	7fefffff 	.word	0x7fefffff

08014a20 <__ieee754_rem_pio2>:
 8014a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a24:	ec57 6b10 	vmov	r6, r7, d0
 8014a28:	4bc3      	ldr	r3, [pc, #780]	; (8014d38 <__ieee754_rem_pio2+0x318>)
 8014a2a:	b08d      	sub	sp, #52	; 0x34
 8014a2c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014a30:	4598      	cmp	r8, r3
 8014a32:	4604      	mov	r4, r0
 8014a34:	9704      	str	r7, [sp, #16]
 8014a36:	dc07      	bgt.n	8014a48 <__ieee754_rem_pio2+0x28>
 8014a38:	2200      	movs	r2, #0
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	ed84 0b00 	vstr	d0, [r4]
 8014a40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014a44:	2500      	movs	r5, #0
 8014a46:	e027      	b.n	8014a98 <__ieee754_rem_pio2+0x78>
 8014a48:	4bbc      	ldr	r3, [pc, #752]	; (8014d3c <__ieee754_rem_pio2+0x31c>)
 8014a4a:	4598      	cmp	r8, r3
 8014a4c:	dc75      	bgt.n	8014b3a <__ieee754_rem_pio2+0x11a>
 8014a4e:	9b04      	ldr	r3, [sp, #16]
 8014a50:	4dbb      	ldr	r5, [pc, #748]	; (8014d40 <__ieee754_rem_pio2+0x320>)
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	ee10 0a10 	vmov	r0, s0
 8014a58:	a3a9      	add	r3, pc, #676	; (adr r3, 8014d00 <__ieee754_rem_pio2+0x2e0>)
 8014a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a5e:	4639      	mov	r1, r7
 8014a60:	dd36      	ble.n	8014ad0 <__ieee754_rem_pio2+0xb0>
 8014a62:	f7eb fc29 	bl	80002b8 <__aeabi_dsub>
 8014a66:	45a8      	cmp	r8, r5
 8014a68:	4606      	mov	r6, r0
 8014a6a:	460f      	mov	r7, r1
 8014a6c:	d018      	beq.n	8014aa0 <__ieee754_rem_pio2+0x80>
 8014a6e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014d08 <__ieee754_rem_pio2+0x2e8>)
 8014a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a74:	f7eb fc20 	bl	80002b8 <__aeabi_dsub>
 8014a78:	4602      	mov	r2, r0
 8014a7a:	460b      	mov	r3, r1
 8014a7c:	e9c4 2300 	strd	r2, r3, [r4]
 8014a80:	4630      	mov	r0, r6
 8014a82:	4639      	mov	r1, r7
 8014a84:	f7eb fc18 	bl	80002b8 <__aeabi_dsub>
 8014a88:	a39f      	add	r3, pc, #636	; (adr r3, 8014d08 <__ieee754_rem_pio2+0x2e8>)
 8014a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8e:	f7eb fc13 	bl	80002b8 <__aeabi_dsub>
 8014a92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a96:	2501      	movs	r5, #1
 8014a98:	4628      	mov	r0, r5
 8014a9a:	b00d      	add	sp, #52	; 0x34
 8014a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa0:	a39b      	add	r3, pc, #620	; (adr r3, 8014d10 <__ieee754_rem_pio2+0x2f0>)
 8014aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa6:	f7eb fc07 	bl	80002b8 <__aeabi_dsub>
 8014aaa:	a39b      	add	r3, pc, #620	; (adr r3, 8014d18 <__ieee754_rem_pio2+0x2f8>)
 8014aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab0:	4606      	mov	r6, r0
 8014ab2:	460f      	mov	r7, r1
 8014ab4:	f7eb fc00 	bl	80002b8 <__aeabi_dsub>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	460b      	mov	r3, r1
 8014abc:	e9c4 2300 	strd	r2, r3, [r4]
 8014ac0:	4630      	mov	r0, r6
 8014ac2:	4639      	mov	r1, r7
 8014ac4:	f7eb fbf8 	bl	80002b8 <__aeabi_dsub>
 8014ac8:	a393      	add	r3, pc, #588	; (adr r3, 8014d18 <__ieee754_rem_pio2+0x2f8>)
 8014aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ace:	e7de      	b.n	8014a8e <__ieee754_rem_pio2+0x6e>
 8014ad0:	f7eb fbf4 	bl	80002bc <__adddf3>
 8014ad4:	45a8      	cmp	r8, r5
 8014ad6:	4606      	mov	r6, r0
 8014ad8:	460f      	mov	r7, r1
 8014ada:	d016      	beq.n	8014b0a <__ieee754_rem_pio2+0xea>
 8014adc:	a38a      	add	r3, pc, #552	; (adr r3, 8014d08 <__ieee754_rem_pio2+0x2e8>)
 8014ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae2:	f7eb fbeb 	bl	80002bc <__adddf3>
 8014ae6:	4602      	mov	r2, r0
 8014ae8:	460b      	mov	r3, r1
 8014aea:	e9c4 2300 	strd	r2, r3, [r4]
 8014aee:	4630      	mov	r0, r6
 8014af0:	4639      	mov	r1, r7
 8014af2:	f7eb fbe1 	bl	80002b8 <__aeabi_dsub>
 8014af6:	a384      	add	r3, pc, #528	; (adr r3, 8014d08 <__ieee754_rem_pio2+0x2e8>)
 8014af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014afc:	f7eb fbde 	bl	80002bc <__adddf3>
 8014b00:	f04f 35ff 	mov.w	r5, #4294967295
 8014b04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b08:	e7c6      	b.n	8014a98 <__ieee754_rem_pio2+0x78>
 8014b0a:	a381      	add	r3, pc, #516	; (adr r3, 8014d10 <__ieee754_rem_pio2+0x2f0>)
 8014b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b10:	f7eb fbd4 	bl	80002bc <__adddf3>
 8014b14:	a380      	add	r3, pc, #512	; (adr r3, 8014d18 <__ieee754_rem_pio2+0x2f8>)
 8014b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1a:	4606      	mov	r6, r0
 8014b1c:	460f      	mov	r7, r1
 8014b1e:	f7eb fbcd 	bl	80002bc <__adddf3>
 8014b22:	4602      	mov	r2, r0
 8014b24:	460b      	mov	r3, r1
 8014b26:	e9c4 2300 	strd	r2, r3, [r4]
 8014b2a:	4630      	mov	r0, r6
 8014b2c:	4639      	mov	r1, r7
 8014b2e:	f7eb fbc3 	bl	80002b8 <__aeabi_dsub>
 8014b32:	a379      	add	r3, pc, #484	; (adr r3, 8014d18 <__ieee754_rem_pio2+0x2f8>)
 8014b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b38:	e7e0      	b.n	8014afc <__ieee754_rem_pio2+0xdc>
 8014b3a:	4b82      	ldr	r3, [pc, #520]	; (8014d44 <__ieee754_rem_pio2+0x324>)
 8014b3c:	4598      	cmp	r8, r3
 8014b3e:	f300 80d0 	bgt.w	8014ce2 <__ieee754_rem_pio2+0x2c2>
 8014b42:	f000 fe23 	bl	801578c <fabs>
 8014b46:	ec57 6b10 	vmov	r6, r7, d0
 8014b4a:	ee10 0a10 	vmov	r0, s0
 8014b4e:	a374      	add	r3, pc, #464	; (adr r3, 8014d20 <__ieee754_rem_pio2+0x300>)
 8014b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b54:	4639      	mov	r1, r7
 8014b56:	f7eb fd67 	bl	8000628 <__aeabi_dmul>
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	4b7a      	ldr	r3, [pc, #488]	; (8014d48 <__ieee754_rem_pio2+0x328>)
 8014b5e:	f7eb fbad 	bl	80002bc <__adddf3>
 8014b62:	f7ec f811 	bl	8000b88 <__aeabi_d2iz>
 8014b66:	4605      	mov	r5, r0
 8014b68:	f7eb fcf4 	bl	8000554 <__aeabi_i2d>
 8014b6c:	a364      	add	r3, pc, #400	; (adr r3, 8014d00 <__ieee754_rem_pio2+0x2e0>)
 8014b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b76:	f7eb fd57 	bl	8000628 <__aeabi_dmul>
 8014b7a:	4602      	mov	r2, r0
 8014b7c:	460b      	mov	r3, r1
 8014b7e:	4630      	mov	r0, r6
 8014b80:	4639      	mov	r1, r7
 8014b82:	f7eb fb99 	bl	80002b8 <__aeabi_dsub>
 8014b86:	a360      	add	r3, pc, #384	; (adr r3, 8014d08 <__ieee754_rem_pio2+0x2e8>)
 8014b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b8c:	4682      	mov	sl, r0
 8014b8e:	468b      	mov	fp, r1
 8014b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b94:	f7eb fd48 	bl	8000628 <__aeabi_dmul>
 8014b98:	2d1f      	cmp	r5, #31
 8014b9a:	4606      	mov	r6, r0
 8014b9c:	460f      	mov	r7, r1
 8014b9e:	dc0c      	bgt.n	8014bba <__ieee754_rem_pio2+0x19a>
 8014ba0:	1e6a      	subs	r2, r5, #1
 8014ba2:	4b6a      	ldr	r3, [pc, #424]	; (8014d4c <__ieee754_rem_pio2+0x32c>)
 8014ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ba8:	4543      	cmp	r3, r8
 8014baa:	d006      	beq.n	8014bba <__ieee754_rem_pio2+0x19a>
 8014bac:	4632      	mov	r2, r6
 8014bae:	463b      	mov	r3, r7
 8014bb0:	4650      	mov	r0, sl
 8014bb2:	4659      	mov	r1, fp
 8014bb4:	f7eb fb80 	bl	80002b8 <__aeabi_dsub>
 8014bb8:	e00e      	b.n	8014bd8 <__ieee754_rem_pio2+0x1b8>
 8014bba:	4632      	mov	r2, r6
 8014bbc:	463b      	mov	r3, r7
 8014bbe:	4650      	mov	r0, sl
 8014bc0:	4659      	mov	r1, fp
 8014bc2:	f7eb fb79 	bl	80002b8 <__aeabi_dsub>
 8014bc6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014bca:	9305      	str	r3, [sp, #20]
 8014bcc:	9a05      	ldr	r2, [sp, #20]
 8014bce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014bd2:	1ad3      	subs	r3, r2, r3
 8014bd4:	2b10      	cmp	r3, #16
 8014bd6:	dc02      	bgt.n	8014bde <__ieee754_rem_pio2+0x1be>
 8014bd8:	e9c4 0100 	strd	r0, r1, [r4]
 8014bdc:	e039      	b.n	8014c52 <__ieee754_rem_pio2+0x232>
 8014bde:	a34c      	add	r3, pc, #304	; (adr r3, 8014d10 <__ieee754_rem_pio2+0x2f0>)
 8014be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014be8:	f7eb fd1e 	bl	8000628 <__aeabi_dmul>
 8014bec:	4606      	mov	r6, r0
 8014bee:	460f      	mov	r7, r1
 8014bf0:	4602      	mov	r2, r0
 8014bf2:	460b      	mov	r3, r1
 8014bf4:	4650      	mov	r0, sl
 8014bf6:	4659      	mov	r1, fp
 8014bf8:	f7eb fb5e 	bl	80002b8 <__aeabi_dsub>
 8014bfc:	4602      	mov	r2, r0
 8014bfe:	460b      	mov	r3, r1
 8014c00:	4680      	mov	r8, r0
 8014c02:	4689      	mov	r9, r1
 8014c04:	4650      	mov	r0, sl
 8014c06:	4659      	mov	r1, fp
 8014c08:	f7eb fb56 	bl	80002b8 <__aeabi_dsub>
 8014c0c:	4632      	mov	r2, r6
 8014c0e:	463b      	mov	r3, r7
 8014c10:	f7eb fb52 	bl	80002b8 <__aeabi_dsub>
 8014c14:	a340      	add	r3, pc, #256	; (adr r3, 8014d18 <__ieee754_rem_pio2+0x2f8>)
 8014c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c1a:	4606      	mov	r6, r0
 8014c1c:	460f      	mov	r7, r1
 8014c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c22:	f7eb fd01 	bl	8000628 <__aeabi_dmul>
 8014c26:	4632      	mov	r2, r6
 8014c28:	463b      	mov	r3, r7
 8014c2a:	f7eb fb45 	bl	80002b8 <__aeabi_dsub>
 8014c2e:	4602      	mov	r2, r0
 8014c30:	460b      	mov	r3, r1
 8014c32:	4606      	mov	r6, r0
 8014c34:	460f      	mov	r7, r1
 8014c36:	4640      	mov	r0, r8
 8014c38:	4649      	mov	r1, r9
 8014c3a:	f7eb fb3d 	bl	80002b8 <__aeabi_dsub>
 8014c3e:	9a05      	ldr	r2, [sp, #20]
 8014c40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014c44:	1ad3      	subs	r3, r2, r3
 8014c46:	2b31      	cmp	r3, #49	; 0x31
 8014c48:	dc20      	bgt.n	8014c8c <__ieee754_rem_pio2+0x26c>
 8014c4a:	e9c4 0100 	strd	r0, r1, [r4]
 8014c4e:	46c2      	mov	sl, r8
 8014c50:	46cb      	mov	fp, r9
 8014c52:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014c56:	4650      	mov	r0, sl
 8014c58:	4642      	mov	r2, r8
 8014c5a:	464b      	mov	r3, r9
 8014c5c:	4659      	mov	r1, fp
 8014c5e:	f7eb fb2b 	bl	80002b8 <__aeabi_dsub>
 8014c62:	463b      	mov	r3, r7
 8014c64:	4632      	mov	r2, r6
 8014c66:	f7eb fb27 	bl	80002b8 <__aeabi_dsub>
 8014c6a:	9b04      	ldr	r3, [sp, #16]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014c72:	f6bf af11 	bge.w	8014a98 <__ieee754_rem_pio2+0x78>
 8014c76:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014c7a:	6063      	str	r3, [r4, #4]
 8014c7c:	f8c4 8000 	str.w	r8, [r4]
 8014c80:	60a0      	str	r0, [r4, #8]
 8014c82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c86:	60e3      	str	r3, [r4, #12]
 8014c88:	426d      	negs	r5, r5
 8014c8a:	e705      	b.n	8014a98 <__ieee754_rem_pio2+0x78>
 8014c8c:	a326      	add	r3, pc, #152	; (adr r3, 8014d28 <__ieee754_rem_pio2+0x308>)
 8014c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c96:	f7eb fcc7 	bl	8000628 <__aeabi_dmul>
 8014c9a:	4606      	mov	r6, r0
 8014c9c:	460f      	mov	r7, r1
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	4640      	mov	r0, r8
 8014ca4:	4649      	mov	r1, r9
 8014ca6:	f7eb fb07 	bl	80002b8 <__aeabi_dsub>
 8014caa:	4602      	mov	r2, r0
 8014cac:	460b      	mov	r3, r1
 8014cae:	4682      	mov	sl, r0
 8014cb0:	468b      	mov	fp, r1
 8014cb2:	4640      	mov	r0, r8
 8014cb4:	4649      	mov	r1, r9
 8014cb6:	f7eb faff 	bl	80002b8 <__aeabi_dsub>
 8014cba:	4632      	mov	r2, r6
 8014cbc:	463b      	mov	r3, r7
 8014cbe:	f7eb fafb 	bl	80002b8 <__aeabi_dsub>
 8014cc2:	a31b      	add	r3, pc, #108	; (adr r3, 8014d30 <__ieee754_rem_pio2+0x310>)
 8014cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc8:	4606      	mov	r6, r0
 8014cca:	460f      	mov	r7, r1
 8014ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cd0:	f7eb fcaa 	bl	8000628 <__aeabi_dmul>
 8014cd4:	4632      	mov	r2, r6
 8014cd6:	463b      	mov	r3, r7
 8014cd8:	f7eb faee 	bl	80002b8 <__aeabi_dsub>
 8014cdc:	4606      	mov	r6, r0
 8014cde:	460f      	mov	r7, r1
 8014ce0:	e764      	b.n	8014bac <__ieee754_rem_pio2+0x18c>
 8014ce2:	4b1b      	ldr	r3, [pc, #108]	; (8014d50 <__ieee754_rem_pio2+0x330>)
 8014ce4:	4598      	cmp	r8, r3
 8014ce6:	dd35      	ble.n	8014d54 <__ieee754_rem_pio2+0x334>
 8014ce8:	ee10 2a10 	vmov	r2, s0
 8014cec:	463b      	mov	r3, r7
 8014cee:	4630      	mov	r0, r6
 8014cf0:	4639      	mov	r1, r7
 8014cf2:	f7eb fae1 	bl	80002b8 <__aeabi_dsub>
 8014cf6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014cfa:	e9c4 0100 	strd	r0, r1, [r4]
 8014cfe:	e6a1      	b.n	8014a44 <__ieee754_rem_pio2+0x24>
 8014d00:	54400000 	.word	0x54400000
 8014d04:	3ff921fb 	.word	0x3ff921fb
 8014d08:	1a626331 	.word	0x1a626331
 8014d0c:	3dd0b461 	.word	0x3dd0b461
 8014d10:	1a600000 	.word	0x1a600000
 8014d14:	3dd0b461 	.word	0x3dd0b461
 8014d18:	2e037073 	.word	0x2e037073
 8014d1c:	3ba3198a 	.word	0x3ba3198a
 8014d20:	6dc9c883 	.word	0x6dc9c883
 8014d24:	3fe45f30 	.word	0x3fe45f30
 8014d28:	2e000000 	.word	0x2e000000
 8014d2c:	3ba3198a 	.word	0x3ba3198a
 8014d30:	252049c1 	.word	0x252049c1
 8014d34:	397b839a 	.word	0x397b839a
 8014d38:	3fe921fb 	.word	0x3fe921fb
 8014d3c:	4002d97b 	.word	0x4002d97b
 8014d40:	3ff921fb 	.word	0x3ff921fb
 8014d44:	413921fb 	.word	0x413921fb
 8014d48:	3fe00000 	.word	0x3fe00000
 8014d4c:	0801a2c4 	.word	0x0801a2c4
 8014d50:	7fefffff 	.word	0x7fefffff
 8014d54:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014d58:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014d5c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014d60:	4630      	mov	r0, r6
 8014d62:	460f      	mov	r7, r1
 8014d64:	f7eb ff10 	bl	8000b88 <__aeabi_d2iz>
 8014d68:	f7eb fbf4 	bl	8000554 <__aeabi_i2d>
 8014d6c:	4602      	mov	r2, r0
 8014d6e:	460b      	mov	r3, r1
 8014d70:	4630      	mov	r0, r6
 8014d72:	4639      	mov	r1, r7
 8014d74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014d78:	f7eb fa9e 	bl	80002b8 <__aeabi_dsub>
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	4b1f      	ldr	r3, [pc, #124]	; (8014dfc <__ieee754_rem_pio2+0x3dc>)
 8014d80:	f7eb fc52 	bl	8000628 <__aeabi_dmul>
 8014d84:	460f      	mov	r7, r1
 8014d86:	4606      	mov	r6, r0
 8014d88:	f7eb fefe 	bl	8000b88 <__aeabi_d2iz>
 8014d8c:	f7eb fbe2 	bl	8000554 <__aeabi_i2d>
 8014d90:	4602      	mov	r2, r0
 8014d92:	460b      	mov	r3, r1
 8014d94:	4630      	mov	r0, r6
 8014d96:	4639      	mov	r1, r7
 8014d98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d9c:	f7eb fa8c 	bl	80002b8 <__aeabi_dsub>
 8014da0:	2200      	movs	r2, #0
 8014da2:	4b16      	ldr	r3, [pc, #88]	; (8014dfc <__ieee754_rem_pio2+0x3dc>)
 8014da4:	f7eb fc40 	bl	8000628 <__aeabi_dmul>
 8014da8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014dac:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014db0:	f04f 0803 	mov.w	r8, #3
 8014db4:	2600      	movs	r6, #0
 8014db6:	2700      	movs	r7, #0
 8014db8:	4632      	mov	r2, r6
 8014dba:	463b      	mov	r3, r7
 8014dbc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8014dc4:	f7eb fe98 	bl	8000af8 <__aeabi_dcmpeq>
 8014dc8:	b9b0      	cbnz	r0, 8014df8 <__ieee754_rem_pio2+0x3d8>
 8014dca:	4b0d      	ldr	r3, [pc, #52]	; (8014e00 <__ieee754_rem_pio2+0x3e0>)
 8014dcc:	9301      	str	r3, [sp, #4]
 8014dce:	2302      	movs	r3, #2
 8014dd0:	9300      	str	r3, [sp, #0]
 8014dd2:	462a      	mov	r2, r5
 8014dd4:	4643      	mov	r3, r8
 8014dd6:	4621      	mov	r1, r4
 8014dd8:	a806      	add	r0, sp, #24
 8014dda:	f000 f8dd 	bl	8014f98 <__kernel_rem_pio2>
 8014dde:	9b04      	ldr	r3, [sp, #16]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	4605      	mov	r5, r0
 8014de4:	f6bf ae58 	bge.w	8014a98 <__ieee754_rem_pio2+0x78>
 8014de8:	6863      	ldr	r3, [r4, #4]
 8014dea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014dee:	6063      	str	r3, [r4, #4]
 8014df0:	68e3      	ldr	r3, [r4, #12]
 8014df2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014df6:	e746      	b.n	8014c86 <__ieee754_rem_pio2+0x266>
 8014df8:	46d0      	mov	r8, sl
 8014dfa:	e7dd      	b.n	8014db8 <__ieee754_rem_pio2+0x398>
 8014dfc:	41700000 	.word	0x41700000
 8014e00:	0801a344 	.word	0x0801a344
 8014e04:	00000000 	.word	0x00000000

08014e08 <__kernel_cos>:
 8014e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e0c:	ec59 8b10 	vmov	r8, r9, d0
 8014e10:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014e14:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014e18:	ed2d 8b02 	vpush	{d8}
 8014e1c:	eeb0 8a41 	vmov.f32	s16, s2
 8014e20:	eef0 8a61 	vmov.f32	s17, s3
 8014e24:	da07      	bge.n	8014e36 <__kernel_cos+0x2e>
 8014e26:	ee10 0a10 	vmov	r0, s0
 8014e2a:	4649      	mov	r1, r9
 8014e2c:	f7eb feac 	bl	8000b88 <__aeabi_d2iz>
 8014e30:	2800      	cmp	r0, #0
 8014e32:	f000 8089 	beq.w	8014f48 <__kernel_cos+0x140>
 8014e36:	4642      	mov	r2, r8
 8014e38:	464b      	mov	r3, r9
 8014e3a:	4640      	mov	r0, r8
 8014e3c:	4649      	mov	r1, r9
 8014e3e:	f7eb fbf3 	bl	8000628 <__aeabi_dmul>
 8014e42:	2200      	movs	r2, #0
 8014e44:	4b4e      	ldr	r3, [pc, #312]	; (8014f80 <__kernel_cos+0x178>)
 8014e46:	4604      	mov	r4, r0
 8014e48:	460d      	mov	r5, r1
 8014e4a:	f7eb fbed 	bl	8000628 <__aeabi_dmul>
 8014e4e:	a340      	add	r3, pc, #256	; (adr r3, 8014f50 <__kernel_cos+0x148>)
 8014e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e54:	4682      	mov	sl, r0
 8014e56:	468b      	mov	fp, r1
 8014e58:	4620      	mov	r0, r4
 8014e5a:	4629      	mov	r1, r5
 8014e5c:	f7eb fbe4 	bl	8000628 <__aeabi_dmul>
 8014e60:	a33d      	add	r3, pc, #244	; (adr r3, 8014f58 <__kernel_cos+0x150>)
 8014e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e66:	f7eb fa29 	bl	80002bc <__adddf3>
 8014e6a:	4622      	mov	r2, r4
 8014e6c:	462b      	mov	r3, r5
 8014e6e:	f7eb fbdb 	bl	8000628 <__aeabi_dmul>
 8014e72:	a33b      	add	r3, pc, #236	; (adr r3, 8014f60 <__kernel_cos+0x158>)
 8014e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e78:	f7eb fa1e 	bl	80002b8 <__aeabi_dsub>
 8014e7c:	4622      	mov	r2, r4
 8014e7e:	462b      	mov	r3, r5
 8014e80:	f7eb fbd2 	bl	8000628 <__aeabi_dmul>
 8014e84:	a338      	add	r3, pc, #224	; (adr r3, 8014f68 <__kernel_cos+0x160>)
 8014e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8a:	f7eb fa17 	bl	80002bc <__adddf3>
 8014e8e:	4622      	mov	r2, r4
 8014e90:	462b      	mov	r3, r5
 8014e92:	f7eb fbc9 	bl	8000628 <__aeabi_dmul>
 8014e96:	a336      	add	r3, pc, #216	; (adr r3, 8014f70 <__kernel_cos+0x168>)
 8014e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9c:	f7eb fa0c 	bl	80002b8 <__aeabi_dsub>
 8014ea0:	4622      	mov	r2, r4
 8014ea2:	462b      	mov	r3, r5
 8014ea4:	f7eb fbc0 	bl	8000628 <__aeabi_dmul>
 8014ea8:	a333      	add	r3, pc, #204	; (adr r3, 8014f78 <__kernel_cos+0x170>)
 8014eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eae:	f7eb fa05 	bl	80002bc <__adddf3>
 8014eb2:	4622      	mov	r2, r4
 8014eb4:	462b      	mov	r3, r5
 8014eb6:	f7eb fbb7 	bl	8000628 <__aeabi_dmul>
 8014eba:	4622      	mov	r2, r4
 8014ebc:	462b      	mov	r3, r5
 8014ebe:	f7eb fbb3 	bl	8000628 <__aeabi_dmul>
 8014ec2:	ec53 2b18 	vmov	r2, r3, d8
 8014ec6:	4604      	mov	r4, r0
 8014ec8:	460d      	mov	r5, r1
 8014eca:	4640      	mov	r0, r8
 8014ecc:	4649      	mov	r1, r9
 8014ece:	f7eb fbab 	bl	8000628 <__aeabi_dmul>
 8014ed2:	460b      	mov	r3, r1
 8014ed4:	4602      	mov	r2, r0
 8014ed6:	4629      	mov	r1, r5
 8014ed8:	4620      	mov	r0, r4
 8014eda:	f7eb f9ed 	bl	80002b8 <__aeabi_dsub>
 8014ede:	4b29      	ldr	r3, [pc, #164]	; (8014f84 <__kernel_cos+0x17c>)
 8014ee0:	429e      	cmp	r6, r3
 8014ee2:	4680      	mov	r8, r0
 8014ee4:	4689      	mov	r9, r1
 8014ee6:	dc11      	bgt.n	8014f0c <__kernel_cos+0x104>
 8014ee8:	4602      	mov	r2, r0
 8014eea:	460b      	mov	r3, r1
 8014eec:	4650      	mov	r0, sl
 8014eee:	4659      	mov	r1, fp
 8014ef0:	f7eb f9e2 	bl	80002b8 <__aeabi_dsub>
 8014ef4:	460b      	mov	r3, r1
 8014ef6:	4924      	ldr	r1, [pc, #144]	; (8014f88 <__kernel_cos+0x180>)
 8014ef8:	4602      	mov	r2, r0
 8014efa:	2000      	movs	r0, #0
 8014efc:	f7eb f9dc 	bl	80002b8 <__aeabi_dsub>
 8014f00:	ecbd 8b02 	vpop	{d8}
 8014f04:	ec41 0b10 	vmov	d0, r0, r1
 8014f08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f0c:	4b1f      	ldr	r3, [pc, #124]	; (8014f8c <__kernel_cos+0x184>)
 8014f0e:	491e      	ldr	r1, [pc, #120]	; (8014f88 <__kernel_cos+0x180>)
 8014f10:	429e      	cmp	r6, r3
 8014f12:	bfcc      	ite	gt
 8014f14:	4d1e      	ldrgt	r5, [pc, #120]	; (8014f90 <__kernel_cos+0x188>)
 8014f16:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014f1a:	2400      	movs	r4, #0
 8014f1c:	4622      	mov	r2, r4
 8014f1e:	462b      	mov	r3, r5
 8014f20:	2000      	movs	r0, #0
 8014f22:	f7eb f9c9 	bl	80002b8 <__aeabi_dsub>
 8014f26:	4622      	mov	r2, r4
 8014f28:	4606      	mov	r6, r0
 8014f2a:	460f      	mov	r7, r1
 8014f2c:	462b      	mov	r3, r5
 8014f2e:	4650      	mov	r0, sl
 8014f30:	4659      	mov	r1, fp
 8014f32:	f7eb f9c1 	bl	80002b8 <__aeabi_dsub>
 8014f36:	4642      	mov	r2, r8
 8014f38:	464b      	mov	r3, r9
 8014f3a:	f7eb f9bd 	bl	80002b8 <__aeabi_dsub>
 8014f3e:	4602      	mov	r2, r0
 8014f40:	460b      	mov	r3, r1
 8014f42:	4630      	mov	r0, r6
 8014f44:	4639      	mov	r1, r7
 8014f46:	e7d9      	b.n	8014efc <__kernel_cos+0xf4>
 8014f48:	2000      	movs	r0, #0
 8014f4a:	490f      	ldr	r1, [pc, #60]	; (8014f88 <__kernel_cos+0x180>)
 8014f4c:	e7d8      	b.n	8014f00 <__kernel_cos+0xf8>
 8014f4e:	bf00      	nop
 8014f50:	be8838d4 	.word	0xbe8838d4
 8014f54:	bda8fae9 	.word	0xbda8fae9
 8014f58:	bdb4b1c4 	.word	0xbdb4b1c4
 8014f5c:	3e21ee9e 	.word	0x3e21ee9e
 8014f60:	809c52ad 	.word	0x809c52ad
 8014f64:	3e927e4f 	.word	0x3e927e4f
 8014f68:	19cb1590 	.word	0x19cb1590
 8014f6c:	3efa01a0 	.word	0x3efa01a0
 8014f70:	16c15177 	.word	0x16c15177
 8014f74:	3f56c16c 	.word	0x3f56c16c
 8014f78:	5555554c 	.word	0x5555554c
 8014f7c:	3fa55555 	.word	0x3fa55555
 8014f80:	3fe00000 	.word	0x3fe00000
 8014f84:	3fd33332 	.word	0x3fd33332
 8014f88:	3ff00000 	.word	0x3ff00000
 8014f8c:	3fe90000 	.word	0x3fe90000
 8014f90:	3fd20000 	.word	0x3fd20000
 8014f94:	00000000 	.word	0x00000000

08014f98 <__kernel_rem_pio2>:
 8014f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f9c:	ed2d 8b02 	vpush	{d8}
 8014fa0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014fa4:	1ed4      	subs	r4, r2, #3
 8014fa6:	9308      	str	r3, [sp, #32]
 8014fa8:	9101      	str	r1, [sp, #4]
 8014faa:	4bc5      	ldr	r3, [pc, #788]	; (80152c0 <__kernel_rem_pio2+0x328>)
 8014fac:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014fae:	9009      	str	r0, [sp, #36]	; 0x24
 8014fb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014fb4:	9304      	str	r3, [sp, #16]
 8014fb6:	9b08      	ldr	r3, [sp, #32]
 8014fb8:	3b01      	subs	r3, #1
 8014fba:	9307      	str	r3, [sp, #28]
 8014fbc:	2318      	movs	r3, #24
 8014fbe:	fb94 f4f3 	sdiv	r4, r4, r3
 8014fc2:	f06f 0317 	mvn.w	r3, #23
 8014fc6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014fca:	fb04 3303 	mla	r3, r4, r3, r3
 8014fce:	eb03 0a02 	add.w	sl, r3, r2
 8014fd2:	9b04      	ldr	r3, [sp, #16]
 8014fd4:	9a07      	ldr	r2, [sp, #28]
 8014fd6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80152b0 <__kernel_rem_pio2+0x318>
 8014fda:	eb03 0802 	add.w	r8, r3, r2
 8014fde:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014fe0:	1aa7      	subs	r7, r4, r2
 8014fe2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014fe6:	ae22      	add	r6, sp, #136	; 0x88
 8014fe8:	2500      	movs	r5, #0
 8014fea:	4545      	cmp	r5, r8
 8014fec:	dd13      	ble.n	8015016 <__kernel_rem_pio2+0x7e>
 8014fee:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80152b0 <__kernel_rem_pio2+0x318>
 8014ff2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014ff6:	2600      	movs	r6, #0
 8014ff8:	9b04      	ldr	r3, [sp, #16]
 8014ffa:	429e      	cmp	r6, r3
 8014ffc:	dc32      	bgt.n	8015064 <__kernel_rem_pio2+0xcc>
 8014ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015000:	9302      	str	r3, [sp, #8]
 8015002:	9b08      	ldr	r3, [sp, #32]
 8015004:	199d      	adds	r5, r3, r6
 8015006:	ab22      	add	r3, sp, #136	; 0x88
 8015008:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801500c:	9306      	str	r3, [sp, #24]
 801500e:	ec59 8b18 	vmov	r8, r9, d8
 8015012:	2700      	movs	r7, #0
 8015014:	e01f      	b.n	8015056 <__kernel_rem_pio2+0xbe>
 8015016:	42ef      	cmn	r7, r5
 8015018:	d407      	bmi.n	801502a <__kernel_rem_pio2+0x92>
 801501a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801501e:	f7eb fa99 	bl	8000554 <__aeabi_i2d>
 8015022:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015026:	3501      	adds	r5, #1
 8015028:	e7df      	b.n	8014fea <__kernel_rem_pio2+0x52>
 801502a:	ec51 0b18 	vmov	r0, r1, d8
 801502e:	e7f8      	b.n	8015022 <__kernel_rem_pio2+0x8a>
 8015030:	9906      	ldr	r1, [sp, #24]
 8015032:	9d02      	ldr	r5, [sp, #8]
 8015034:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8015038:	9106      	str	r1, [sp, #24]
 801503a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801503e:	9502      	str	r5, [sp, #8]
 8015040:	f7eb faf2 	bl	8000628 <__aeabi_dmul>
 8015044:	4602      	mov	r2, r0
 8015046:	460b      	mov	r3, r1
 8015048:	4640      	mov	r0, r8
 801504a:	4649      	mov	r1, r9
 801504c:	f7eb f936 	bl	80002bc <__adddf3>
 8015050:	3701      	adds	r7, #1
 8015052:	4680      	mov	r8, r0
 8015054:	4689      	mov	r9, r1
 8015056:	9b07      	ldr	r3, [sp, #28]
 8015058:	429f      	cmp	r7, r3
 801505a:	dde9      	ble.n	8015030 <__kernel_rem_pio2+0x98>
 801505c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8015060:	3601      	adds	r6, #1
 8015062:	e7c9      	b.n	8014ff8 <__kernel_rem_pio2+0x60>
 8015064:	9b04      	ldr	r3, [sp, #16]
 8015066:	aa0e      	add	r2, sp, #56	; 0x38
 8015068:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801506c:	930c      	str	r3, [sp, #48]	; 0x30
 801506e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8015070:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015074:	9c04      	ldr	r4, [sp, #16]
 8015076:	930b      	str	r3, [sp, #44]	; 0x2c
 8015078:	ab9a      	add	r3, sp, #616	; 0x268
 801507a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801507e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015082:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015086:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801508a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801508e:	ab9a      	add	r3, sp, #616	; 0x268
 8015090:	445b      	add	r3, fp
 8015092:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8015096:	2500      	movs	r5, #0
 8015098:	1b63      	subs	r3, r4, r5
 801509a:	2b00      	cmp	r3, #0
 801509c:	dc78      	bgt.n	8015190 <__kernel_rem_pio2+0x1f8>
 801509e:	4650      	mov	r0, sl
 80150a0:	ec49 8b10 	vmov	d0, r8, r9
 80150a4:	f000 fc00 	bl	80158a8 <scalbn>
 80150a8:	ec57 6b10 	vmov	r6, r7, d0
 80150ac:	2200      	movs	r2, #0
 80150ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80150b2:	ee10 0a10 	vmov	r0, s0
 80150b6:	4639      	mov	r1, r7
 80150b8:	f7eb fab6 	bl	8000628 <__aeabi_dmul>
 80150bc:	ec41 0b10 	vmov	d0, r0, r1
 80150c0:	f000 fb6e 	bl	80157a0 <floor>
 80150c4:	2200      	movs	r2, #0
 80150c6:	ec51 0b10 	vmov	r0, r1, d0
 80150ca:	4b7e      	ldr	r3, [pc, #504]	; (80152c4 <__kernel_rem_pio2+0x32c>)
 80150cc:	f7eb faac 	bl	8000628 <__aeabi_dmul>
 80150d0:	4602      	mov	r2, r0
 80150d2:	460b      	mov	r3, r1
 80150d4:	4630      	mov	r0, r6
 80150d6:	4639      	mov	r1, r7
 80150d8:	f7eb f8ee 	bl	80002b8 <__aeabi_dsub>
 80150dc:	460f      	mov	r7, r1
 80150de:	4606      	mov	r6, r0
 80150e0:	f7eb fd52 	bl	8000b88 <__aeabi_d2iz>
 80150e4:	9006      	str	r0, [sp, #24]
 80150e6:	f7eb fa35 	bl	8000554 <__aeabi_i2d>
 80150ea:	4602      	mov	r2, r0
 80150ec:	460b      	mov	r3, r1
 80150ee:	4630      	mov	r0, r6
 80150f0:	4639      	mov	r1, r7
 80150f2:	f7eb f8e1 	bl	80002b8 <__aeabi_dsub>
 80150f6:	f1ba 0f00 	cmp.w	sl, #0
 80150fa:	4606      	mov	r6, r0
 80150fc:	460f      	mov	r7, r1
 80150fe:	dd6c      	ble.n	80151da <__kernel_rem_pio2+0x242>
 8015100:	1e62      	subs	r2, r4, #1
 8015102:	ab0e      	add	r3, sp, #56	; 0x38
 8015104:	f1ca 0118 	rsb	r1, sl, #24
 8015108:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801510c:	9d06      	ldr	r5, [sp, #24]
 801510e:	fa40 f301 	asr.w	r3, r0, r1
 8015112:	441d      	add	r5, r3
 8015114:	408b      	lsls	r3, r1
 8015116:	1ac0      	subs	r0, r0, r3
 8015118:	ab0e      	add	r3, sp, #56	; 0x38
 801511a:	9506      	str	r5, [sp, #24]
 801511c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8015120:	f1ca 0317 	rsb	r3, sl, #23
 8015124:	fa40 f303 	asr.w	r3, r0, r3
 8015128:	9302      	str	r3, [sp, #8]
 801512a:	9b02      	ldr	r3, [sp, #8]
 801512c:	2b00      	cmp	r3, #0
 801512e:	dd62      	ble.n	80151f6 <__kernel_rem_pio2+0x25e>
 8015130:	9b06      	ldr	r3, [sp, #24]
 8015132:	2200      	movs	r2, #0
 8015134:	3301      	adds	r3, #1
 8015136:	9306      	str	r3, [sp, #24]
 8015138:	4615      	mov	r5, r2
 801513a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801513e:	4294      	cmp	r4, r2
 8015140:	f300 8095 	bgt.w	801526e <__kernel_rem_pio2+0x2d6>
 8015144:	f1ba 0f00 	cmp.w	sl, #0
 8015148:	dd07      	ble.n	801515a <__kernel_rem_pio2+0x1c2>
 801514a:	f1ba 0f01 	cmp.w	sl, #1
 801514e:	f000 80a2 	beq.w	8015296 <__kernel_rem_pio2+0x2fe>
 8015152:	f1ba 0f02 	cmp.w	sl, #2
 8015156:	f000 80c1 	beq.w	80152dc <__kernel_rem_pio2+0x344>
 801515a:	9b02      	ldr	r3, [sp, #8]
 801515c:	2b02      	cmp	r3, #2
 801515e:	d14a      	bne.n	80151f6 <__kernel_rem_pio2+0x25e>
 8015160:	4632      	mov	r2, r6
 8015162:	463b      	mov	r3, r7
 8015164:	2000      	movs	r0, #0
 8015166:	4958      	ldr	r1, [pc, #352]	; (80152c8 <__kernel_rem_pio2+0x330>)
 8015168:	f7eb f8a6 	bl	80002b8 <__aeabi_dsub>
 801516c:	4606      	mov	r6, r0
 801516e:	460f      	mov	r7, r1
 8015170:	2d00      	cmp	r5, #0
 8015172:	d040      	beq.n	80151f6 <__kernel_rem_pio2+0x25e>
 8015174:	4650      	mov	r0, sl
 8015176:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80152b8 <__kernel_rem_pio2+0x320>
 801517a:	f000 fb95 	bl	80158a8 <scalbn>
 801517e:	4630      	mov	r0, r6
 8015180:	4639      	mov	r1, r7
 8015182:	ec53 2b10 	vmov	r2, r3, d0
 8015186:	f7eb f897 	bl	80002b8 <__aeabi_dsub>
 801518a:	4606      	mov	r6, r0
 801518c:	460f      	mov	r7, r1
 801518e:	e032      	b.n	80151f6 <__kernel_rem_pio2+0x25e>
 8015190:	2200      	movs	r2, #0
 8015192:	4b4e      	ldr	r3, [pc, #312]	; (80152cc <__kernel_rem_pio2+0x334>)
 8015194:	4640      	mov	r0, r8
 8015196:	4649      	mov	r1, r9
 8015198:	f7eb fa46 	bl	8000628 <__aeabi_dmul>
 801519c:	f7eb fcf4 	bl	8000b88 <__aeabi_d2iz>
 80151a0:	f7eb f9d8 	bl	8000554 <__aeabi_i2d>
 80151a4:	2200      	movs	r2, #0
 80151a6:	4b4a      	ldr	r3, [pc, #296]	; (80152d0 <__kernel_rem_pio2+0x338>)
 80151a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151ac:	f7eb fa3c 	bl	8000628 <__aeabi_dmul>
 80151b0:	4602      	mov	r2, r0
 80151b2:	460b      	mov	r3, r1
 80151b4:	4640      	mov	r0, r8
 80151b6:	4649      	mov	r1, r9
 80151b8:	f7eb f87e 	bl	80002b8 <__aeabi_dsub>
 80151bc:	f7eb fce4 	bl	8000b88 <__aeabi_d2iz>
 80151c0:	ab0e      	add	r3, sp, #56	; 0x38
 80151c2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80151c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80151ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151ce:	f7eb f875 	bl	80002bc <__adddf3>
 80151d2:	3501      	adds	r5, #1
 80151d4:	4680      	mov	r8, r0
 80151d6:	4689      	mov	r9, r1
 80151d8:	e75e      	b.n	8015098 <__kernel_rem_pio2+0x100>
 80151da:	d105      	bne.n	80151e8 <__kernel_rem_pio2+0x250>
 80151dc:	1e63      	subs	r3, r4, #1
 80151de:	aa0e      	add	r2, sp, #56	; 0x38
 80151e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80151e4:	15c3      	asrs	r3, r0, #23
 80151e6:	e79f      	b.n	8015128 <__kernel_rem_pio2+0x190>
 80151e8:	2200      	movs	r2, #0
 80151ea:	4b3a      	ldr	r3, [pc, #232]	; (80152d4 <__kernel_rem_pio2+0x33c>)
 80151ec:	f7eb fca2 	bl	8000b34 <__aeabi_dcmpge>
 80151f0:	2800      	cmp	r0, #0
 80151f2:	d139      	bne.n	8015268 <__kernel_rem_pio2+0x2d0>
 80151f4:	9002      	str	r0, [sp, #8]
 80151f6:	2200      	movs	r2, #0
 80151f8:	2300      	movs	r3, #0
 80151fa:	4630      	mov	r0, r6
 80151fc:	4639      	mov	r1, r7
 80151fe:	f7eb fc7b 	bl	8000af8 <__aeabi_dcmpeq>
 8015202:	2800      	cmp	r0, #0
 8015204:	f000 80c7 	beq.w	8015396 <__kernel_rem_pio2+0x3fe>
 8015208:	1e65      	subs	r5, r4, #1
 801520a:	462b      	mov	r3, r5
 801520c:	2200      	movs	r2, #0
 801520e:	9904      	ldr	r1, [sp, #16]
 8015210:	428b      	cmp	r3, r1
 8015212:	da6a      	bge.n	80152ea <__kernel_rem_pio2+0x352>
 8015214:	2a00      	cmp	r2, #0
 8015216:	f000 8088 	beq.w	801532a <__kernel_rem_pio2+0x392>
 801521a:	ab0e      	add	r3, sp, #56	; 0x38
 801521c:	f1aa 0a18 	sub.w	sl, sl, #24
 8015220:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015224:	2b00      	cmp	r3, #0
 8015226:	f000 80b4 	beq.w	8015392 <__kernel_rem_pio2+0x3fa>
 801522a:	4650      	mov	r0, sl
 801522c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80152b8 <__kernel_rem_pio2+0x320>
 8015230:	f000 fb3a 	bl	80158a8 <scalbn>
 8015234:	00ec      	lsls	r4, r5, #3
 8015236:	ab72      	add	r3, sp, #456	; 0x1c8
 8015238:	191e      	adds	r6, r3, r4
 801523a:	ec59 8b10 	vmov	r8, r9, d0
 801523e:	f106 0a08 	add.w	sl, r6, #8
 8015242:	462f      	mov	r7, r5
 8015244:	2f00      	cmp	r7, #0
 8015246:	f280 80df 	bge.w	8015408 <__kernel_rem_pio2+0x470>
 801524a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80152b0 <__kernel_rem_pio2+0x318>
 801524e:	f04f 0a00 	mov.w	sl, #0
 8015252:	eba5 030a 	sub.w	r3, r5, sl
 8015256:	2b00      	cmp	r3, #0
 8015258:	f2c0 810a 	blt.w	8015470 <__kernel_rem_pio2+0x4d8>
 801525c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80152d8 <__kernel_rem_pio2+0x340>
 8015260:	ec59 8b18 	vmov	r8, r9, d8
 8015264:	2700      	movs	r7, #0
 8015266:	e0f5      	b.n	8015454 <__kernel_rem_pio2+0x4bc>
 8015268:	2302      	movs	r3, #2
 801526a:	9302      	str	r3, [sp, #8]
 801526c:	e760      	b.n	8015130 <__kernel_rem_pio2+0x198>
 801526e:	ab0e      	add	r3, sp, #56	; 0x38
 8015270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015274:	b94d      	cbnz	r5, 801528a <__kernel_rem_pio2+0x2f2>
 8015276:	b12b      	cbz	r3, 8015284 <__kernel_rem_pio2+0x2ec>
 8015278:	a80e      	add	r0, sp, #56	; 0x38
 801527a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801527e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015282:	2301      	movs	r3, #1
 8015284:	3201      	adds	r2, #1
 8015286:	461d      	mov	r5, r3
 8015288:	e759      	b.n	801513e <__kernel_rem_pio2+0x1a6>
 801528a:	a80e      	add	r0, sp, #56	; 0x38
 801528c:	1acb      	subs	r3, r1, r3
 801528e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015292:	462b      	mov	r3, r5
 8015294:	e7f6      	b.n	8015284 <__kernel_rem_pio2+0x2ec>
 8015296:	1e62      	subs	r2, r4, #1
 8015298:	ab0e      	add	r3, sp, #56	; 0x38
 801529a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801529e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80152a2:	a90e      	add	r1, sp, #56	; 0x38
 80152a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80152a8:	e757      	b.n	801515a <__kernel_rem_pio2+0x1c2>
 80152aa:	bf00      	nop
 80152ac:	f3af 8000 	nop.w
	...
 80152bc:	3ff00000 	.word	0x3ff00000
 80152c0:	0801a490 	.word	0x0801a490
 80152c4:	40200000 	.word	0x40200000
 80152c8:	3ff00000 	.word	0x3ff00000
 80152cc:	3e700000 	.word	0x3e700000
 80152d0:	41700000 	.word	0x41700000
 80152d4:	3fe00000 	.word	0x3fe00000
 80152d8:	0801a450 	.word	0x0801a450
 80152dc:	1e62      	subs	r2, r4, #1
 80152de:	ab0e      	add	r3, sp, #56	; 0x38
 80152e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80152e8:	e7db      	b.n	80152a2 <__kernel_rem_pio2+0x30a>
 80152ea:	a90e      	add	r1, sp, #56	; 0x38
 80152ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80152f0:	3b01      	subs	r3, #1
 80152f2:	430a      	orrs	r2, r1
 80152f4:	e78b      	b.n	801520e <__kernel_rem_pio2+0x276>
 80152f6:	3301      	adds	r3, #1
 80152f8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80152fc:	2900      	cmp	r1, #0
 80152fe:	d0fa      	beq.n	80152f6 <__kernel_rem_pio2+0x35e>
 8015300:	9a08      	ldr	r2, [sp, #32]
 8015302:	4422      	add	r2, r4
 8015304:	00d2      	lsls	r2, r2, #3
 8015306:	a922      	add	r1, sp, #136	; 0x88
 8015308:	18e3      	adds	r3, r4, r3
 801530a:	9206      	str	r2, [sp, #24]
 801530c:	440a      	add	r2, r1
 801530e:	9302      	str	r3, [sp, #8]
 8015310:	f10b 0108 	add.w	r1, fp, #8
 8015314:	f102 0308 	add.w	r3, r2, #8
 8015318:	1c66      	adds	r6, r4, #1
 801531a:	910a      	str	r1, [sp, #40]	; 0x28
 801531c:	2500      	movs	r5, #0
 801531e:	930d      	str	r3, [sp, #52]	; 0x34
 8015320:	9b02      	ldr	r3, [sp, #8]
 8015322:	42b3      	cmp	r3, r6
 8015324:	da04      	bge.n	8015330 <__kernel_rem_pio2+0x398>
 8015326:	461c      	mov	r4, r3
 8015328:	e6a6      	b.n	8015078 <__kernel_rem_pio2+0xe0>
 801532a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801532c:	2301      	movs	r3, #1
 801532e:	e7e3      	b.n	80152f8 <__kernel_rem_pio2+0x360>
 8015330:	9b06      	ldr	r3, [sp, #24]
 8015332:	18ef      	adds	r7, r5, r3
 8015334:	ab22      	add	r3, sp, #136	; 0x88
 8015336:	441f      	add	r7, r3
 8015338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801533a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801533e:	f7eb f909 	bl	8000554 <__aeabi_i2d>
 8015342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015344:	461c      	mov	r4, r3
 8015346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015348:	e9c7 0100 	strd	r0, r1, [r7]
 801534c:	eb03 0b05 	add.w	fp, r3, r5
 8015350:	2700      	movs	r7, #0
 8015352:	f04f 0800 	mov.w	r8, #0
 8015356:	f04f 0900 	mov.w	r9, #0
 801535a:	9b07      	ldr	r3, [sp, #28]
 801535c:	429f      	cmp	r7, r3
 801535e:	dd08      	ble.n	8015372 <__kernel_rem_pio2+0x3da>
 8015360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015362:	aa72      	add	r2, sp, #456	; 0x1c8
 8015364:	18eb      	adds	r3, r5, r3
 8015366:	4413      	add	r3, r2
 8015368:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801536c:	3601      	adds	r6, #1
 801536e:	3508      	adds	r5, #8
 8015370:	e7d6      	b.n	8015320 <__kernel_rem_pio2+0x388>
 8015372:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015376:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801537a:	f7eb f955 	bl	8000628 <__aeabi_dmul>
 801537e:	4602      	mov	r2, r0
 8015380:	460b      	mov	r3, r1
 8015382:	4640      	mov	r0, r8
 8015384:	4649      	mov	r1, r9
 8015386:	f7ea ff99 	bl	80002bc <__adddf3>
 801538a:	3701      	adds	r7, #1
 801538c:	4680      	mov	r8, r0
 801538e:	4689      	mov	r9, r1
 8015390:	e7e3      	b.n	801535a <__kernel_rem_pio2+0x3c2>
 8015392:	3d01      	subs	r5, #1
 8015394:	e741      	b.n	801521a <__kernel_rem_pio2+0x282>
 8015396:	f1ca 0000 	rsb	r0, sl, #0
 801539a:	ec47 6b10 	vmov	d0, r6, r7
 801539e:	f000 fa83 	bl	80158a8 <scalbn>
 80153a2:	ec57 6b10 	vmov	r6, r7, d0
 80153a6:	2200      	movs	r2, #0
 80153a8:	4b99      	ldr	r3, [pc, #612]	; (8015610 <__kernel_rem_pio2+0x678>)
 80153aa:	ee10 0a10 	vmov	r0, s0
 80153ae:	4639      	mov	r1, r7
 80153b0:	f7eb fbc0 	bl	8000b34 <__aeabi_dcmpge>
 80153b4:	b1f8      	cbz	r0, 80153f6 <__kernel_rem_pio2+0x45e>
 80153b6:	2200      	movs	r2, #0
 80153b8:	4b96      	ldr	r3, [pc, #600]	; (8015614 <__kernel_rem_pio2+0x67c>)
 80153ba:	4630      	mov	r0, r6
 80153bc:	4639      	mov	r1, r7
 80153be:	f7eb f933 	bl	8000628 <__aeabi_dmul>
 80153c2:	f7eb fbe1 	bl	8000b88 <__aeabi_d2iz>
 80153c6:	4680      	mov	r8, r0
 80153c8:	f7eb f8c4 	bl	8000554 <__aeabi_i2d>
 80153cc:	2200      	movs	r2, #0
 80153ce:	4b90      	ldr	r3, [pc, #576]	; (8015610 <__kernel_rem_pio2+0x678>)
 80153d0:	f7eb f92a 	bl	8000628 <__aeabi_dmul>
 80153d4:	460b      	mov	r3, r1
 80153d6:	4602      	mov	r2, r0
 80153d8:	4639      	mov	r1, r7
 80153da:	4630      	mov	r0, r6
 80153dc:	f7ea ff6c 	bl	80002b8 <__aeabi_dsub>
 80153e0:	f7eb fbd2 	bl	8000b88 <__aeabi_d2iz>
 80153e4:	1c65      	adds	r5, r4, #1
 80153e6:	ab0e      	add	r3, sp, #56	; 0x38
 80153e8:	f10a 0a18 	add.w	sl, sl, #24
 80153ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80153f0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80153f4:	e719      	b.n	801522a <__kernel_rem_pio2+0x292>
 80153f6:	4630      	mov	r0, r6
 80153f8:	4639      	mov	r1, r7
 80153fa:	f7eb fbc5 	bl	8000b88 <__aeabi_d2iz>
 80153fe:	ab0e      	add	r3, sp, #56	; 0x38
 8015400:	4625      	mov	r5, r4
 8015402:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015406:	e710      	b.n	801522a <__kernel_rem_pio2+0x292>
 8015408:	ab0e      	add	r3, sp, #56	; 0x38
 801540a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801540e:	f7eb f8a1 	bl	8000554 <__aeabi_i2d>
 8015412:	4642      	mov	r2, r8
 8015414:	464b      	mov	r3, r9
 8015416:	f7eb f907 	bl	8000628 <__aeabi_dmul>
 801541a:	2200      	movs	r2, #0
 801541c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8015420:	4b7c      	ldr	r3, [pc, #496]	; (8015614 <__kernel_rem_pio2+0x67c>)
 8015422:	4640      	mov	r0, r8
 8015424:	4649      	mov	r1, r9
 8015426:	f7eb f8ff 	bl	8000628 <__aeabi_dmul>
 801542a:	3f01      	subs	r7, #1
 801542c:	4680      	mov	r8, r0
 801542e:	4689      	mov	r9, r1
 8015430:	e708      	b.n	8015244 <__kernel_rem_pio2+0x2ac>
 8015432:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8015436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801543a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801543e:	f7eb f8f3 	bl	8000628 <__aeabi_dmul>
 8015442:	4602      	mov	r2, r0
 8015444:	460b      	mov	r3, r1
 8015446:	4640      	mov	r0, r8
 8015448:	4649      	mov	r1, r9
 801544a:	f7ea ff37 	bl	80002bc <__adddf3>
 801544e:	3701      	adds	r7, #1
 8015450:	4680      	mov	r8, r0
 8015452:	4689      	mov	r9, r1
 8015454:	9b04      	ldr	r3, [sp, #16]
 8015456:	429f      	cmp	r7, r3
 8015458:	dc01      	bgt.n	801545e <__kernel_rem_pio2+0x4c6>
 801545a:	45ba      	cmp	sl, r7
 801545c:	dae9      	bge.n	8015432 <__kernel_rem_pio2+0x49a>
 801545e:	ab4a      	add	r3, sp, #296	; 0x128
 8015460:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015464:	e9c3 8900 	strd	r8, r9, [r3]
 8015468:	f10a 0a01 	add.w	sl, sl, #1
 801546c:	3e08      	subs	r6, #8
 801546e:	e6f0      	b.n	8015252 <__kernel_rem_pio2+0x2ba>
 8015470:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8015472:	2b03      	cmp	r3, #3
 8015474:	d85b      	bhi.n	801552e <__kernel_rem_pio2+0x596>
 8015476:	e8df f003 	tbb	[pc, r3]
 801547a:	264a      	.short	0x264a
 801547c:	0226      	.short	0x0226
 801547e:	ab9a      	add	r3, sp, #616	; 0x268
 8015480:	441c      	add	r4, r3
 8015482:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015486:	46a2      	mov	sl, r4
 8015488:	46ab      	mov	fp, r5
 801548a:	f1bb 0f00 	cmp.w	fp, #0
 801548e:	dc6c      	bgt.n	801556a <__kernel_rem_pio2+0x5d2>
 8015490:	46a2      	mov	sl, r4
 8015492:	46ab      	mov	fp, r5
 8015494:	f1bb 0f01 	cmp.w	fp, #1
 8015498:	f300 8086 	bgt.w	80155a8 <__kernel_rem_pio2+0x610>
 801549c:	2000      	movs	r0, #0
 801549e:	2100      	movs	r1, #0
 80154a0:	2d01      	cmp	r5, #1
 80154a2:	f300 80a0 	bgt.w	80155e6 <__kernel_rem_pio2+0x64e>
 80154a6:	9b02      	ldr	r3, [sp, #8]
 80154a8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80154ac:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	f040 809e 	bne.w	80155f2 <__kernel_rem_pio2+0x65a>
 80154b6:	9b01      	ldr	r3, [sp, #4]
 80154b8:	e9c3 7800 	strd	r7, r8, [r3]
 80154bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80154c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80154c4:	e033      	b.n	801552e <__kernel_rem_pio2+0x596>
 80154c6:	3408      	adds	r4, #8
 80154c8:	ab4a      	add	r3, sp, #296	; 0x128
 80154ca:	441c      	add	r4, r3
 80154cc:	462e      	mov	r6, r5
 80154ce:	2000      	movs	r0, #0
 80154d0:	2100      	movs	r1, #0
 80154d2:	2e00      	cmp	r6, #0
 80154d4:	da3a      	bge.n	801554c <__kernel_rem_pio2+0x5b4>
 80154d6:	9b02      	ldr	r3, [sp, #8]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d03d      	beq.n	8015558 <__kernel_rem_pio2+0x5c0>
 80154dc:	4602      	mov	r2, r0
 80154de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154e2:	9c01      	ldr	r4, [sp, #4]
 80154e4:	e9c4 2300 	strd	r2, r3, [r4]
 80154e8:	4602      	mov	r2, r0
 80154ea:	460b      	mov	r3, r1
 80154ec:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80154f0:	f7ea fee2 	bl	80002b8 <__aeabi_dsub>
 80154f4:	ae4c      	add	r6, sp, #304	; 0x130
 80154f6:	2401      	movs	r4, #1
 80154f8:	42a5      	cmp	r5, r4
 80154fa:	da30      	bge.n	801555e <__kernel_rem_pio2+0x5c6>
 80154fc:	9b02      	ldr	r3, [sp, #8]
 80154fe:	b113      	cbz	r3, 8015506 <__kernel_rem_pio2+0x56e>
 8015500:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015504:	4619      	mov	r1, r3
 8015506:	9b01      	ldr	r3, [sp, #4]
 8015508:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801550c:	e00f      	b.n	801552e <__kernel_rem_pio2+0x596>
 801550e:	ab9a      	add	r3, sp, #616	; 0x268
 8015510:	441c      	add	r4, r3
 8015512:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015516:	2000      	movs	r0, #0
 8015518:	2100      	movs	r1, #0
 801551a:	2d00      	cmp	r5, #0
 801551c:	da10      	bge.n	8015540 <__kernel_rem_pio2+0x5a8>
 801551e:	9b02      	ldr	r3, [sp, #8]
 8015520:	b113      	cbz	r3, 8015528 <__kernel_rem_pio2+0x590>
 8015522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015526:	4619      	mov	r1, r3
 8015528:	9b01      	ldr	r3, [sp, #4]
 801552a:	e9c3 0100 	strd	r0, r1, [r3]
 801552e:	9b06      	ldr	r3, [sp, #24]
 8015530:	f003 0007 	and.w	r0, r3, #7
 8015534:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015538:	ecbd 8b02 	vpop	{d8}
 801553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015540:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015544:	f7ea feba 	bl	80002bc <__adddf3>
 8015548:	3d01      	subs	r5, #1
 801554a:	e7e6      	b.n	801551a <__kernel_rem_pio2+0x582>
 801554c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015550:	f7ea feb4 	bl	80002bc <__adddf3>
 8015554:	3e01      	subs	r6, #1
 8015556:	e7bc      	b.n	80154d2 <__kernel_rem_pio2+0x53a>
 8015558:	4602      	mov	r2, r0
 801555a:	460b      	mov	r3, r1
 801555c:	e7c1      	b.n	80154e2 <__kernel_rem_pio2+0x54a>
 801555e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8015562:	f7ea feab 	bl	80002bc <__adddf3>
 8015566:	3401      	adds	r4, #1
 8015568:	e7c6      	b.n	80154f8 <__kernel_rem_pio2+0x560>
 801556a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801556e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015572:	4640      	mov	r0, r8
 8015574:	ec53 2b17 	vmov	r2, r3, d7
 8015578:	4649      	mov	r1, r9
 801557a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801557e:	f7ea fe9d 	bl	80002bc <__adddf3>
 8015582:	4602      	mov	r2, r0
 8015584:	460b      	mov	r3, r1
 8015586:	4606      	mov	r6, r0
 8015588:	460f      	mov	r7, r1
 801558a:	4640      	mov	r0, r8
 801558c:	4649      	mov	r1, r9
 801558e:	f7ea fe93 	bl	80002b8 <__aeabi_dsub>
 8015592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015596:	f7ea fe91 	bl	80002bc <__adddf3>
 801559a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801559e:	e9ca 0100 	strd	r0, r1, [sl]
 80155a2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80155a6:	e770      	b.n	801548a <__kernel_rem_pio2+0x4f2>
 80155a8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80155ac:	ed3a 7b02 	vldmdb	sl!, {d7}
 80155b0:	4630      	mov	r0, r6
 80155b2:	ec53 2b17 	vmov	r2, r3, d7
 80155b6:	4639      	mov	r1, r7
 80155b8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80155bc:	f7ea fe7e 	bl	80002bc <__adddf3>
 80155c0:	4602      	mov	r2, r0
 80155c2:	460b      	mov	r3, r1
 80155c4:	4680      	mov	r8, r0
 80155c6:	4689      	mov	r9, r1
 80155c8:	4630      	mov	r0, r6
 80155ca:	4639      	mov	r1, r7
 80155cc:	f7ea fe74 	bl	80002b8 <__aeabi_dsub>
 80155d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155d4:	f7ea fe72 	bl	80002bc <__adddf3>
 80155d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80155dc:	e9ca 0100 	strd	r0, r1, [sl]
 80155e0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80155e4:	e756      	b.n	8015494 <__kernel_rem_pio2+0x4fc>
 80155e6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80155ea:	f7ea fe67 	bl	80002bc <__adddf3>
 80155ee:	3d01      	subs	r5, #1
 80155f0:	e756      	b.n	80154a0 <__kernel_rem_pio2+0x508>
 80155f2:	9b01      	ldr	r3, [sp, #4]
 80155f4:	9a01      	ldr	r2, [sp, #4]
 80155f6:	601f      	str	r7, [r3, #0]
 80155f8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80155fc:	605c      	str	r4, [r3, #4]
 80155fe:	609d      	str	r5, [r3, #8]
 8015600:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015604:	60d3      	str	r3, [r2, #12]
 8015606:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801560a:	6110      	str	r0, [r2, #16]
 801560c:	6153      	str	r3, [r2, #20]
 801560e:	e78e      	b.n	801552e <__kernel_rem_pio2+0x596>
 8015610:	41700000 	.word	0x41700000
 8015614:	3e700000 	.word	0x3e700000

08015618 <__kernel_sin>:
 8015618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801561c:	ec55 4b10 	vmov	r4, r5, d0
 8015620:	b085      	sub	sp, #20
 8015622:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015626:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801562a:	ed8d 1b00 	vstr	d1, [sp]
 801562e:	9002      	str	r0, [sp, #8]
 8015630:	da06      	bge.n	8015640 <__kernel_sin+0x28>
 8015632:	ee10 0a10 	vmov	r0, s0
 8015636:	4629      	mov	r1, r5
 8015638:	f7eb faa6 	bl	8000b88 <__aeabi_d2iz>
 801563c:	2800      	cmp	r0, #0
 801563e:	d051      	beq.n	80156e4 <__kernel_sin+0xcc>
 8015640:	4622      	mov	r2, r4
 8015642:	462b      	mov	r3, r5
 8015644:	4620      	mov	r0, r4
 8015646:	4629      	mov	r1, r5
 8015648:	f7ea ffee 	bl	8000628 <__aeabi_dmul>
 801564c:	4682      	mov	sl, r0
 801564e:	468b      	mov	fp, r1
 8015650:	4602      	mov	r2, r0
 8015652:	460b      	mov	r3, r1
 8015654:	4620      	mov	r0, r4
 8015656:	4629      	mov	r1, r5
 8015658:	f7ea ffe6 	bl	8000628 <__aeabi_dmul>
 801565c:	a341      	add	r3, pc, #260	; (adr r3, 8015764 <__kernel_sin+0x14c>)
 801565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015662:	4680      	mov	r8, r0
 8015664:	4689      	mov	r9, r1
 8015666:	4650      	mov	r0, sl
 8015668:	4659      	mov	r1, fp
 801566a:	f7ea ffdd 	bl	8000628 <__aeabi_dmul>
 801566e:	a33f      	add	r3, pc, #252	; (adr r3, 801576c <__kernel_sin+0x154>)
 8015670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015674:	f7ea fe20 	bl	80002b8 <__aeabi_dsub>
 8015678:	4652      	mov	r2, sl
 801567a:	465b      	mov	r3, fp
 801567c:	f7ea ffd4 	bl	8000628 <__aeabi_dmul>
 8015680:	a33c      	add	r3, pc, #240	; (adr r3, 8015774 <__kernel_sin+0x15c>)
 8015682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015686:	f7ea fe19 	bl	80002bc <__adddf3>
 801568a:	4652      	mov	r2, sl
 801568c:	465b      	mov	r3, fp
 801568e:	f7ea ffcb 	bl	8000628 <__aeabi_dmul>
 8015692:	a33a      	add	r3, pc, #232	; (adr r3, 801577c <__kernel_sin+0x164>)
 8015694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015698:	f7ea fe0e 	bl	80002b8 <__aeabi_dsub>
 801569c:	4652      	mov	r2, sl
 801569e:	465b      	mov	r3, fp
 80156a0:	f7ea ffc2 	bl	8000628 <__aeabi_dmul>
 80156a4:	a337      	add	r3, pc, #220	; (adr r3, 8015784 <__kernel_sin+0x16c>)
 80156a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156aa:	f7ea fe07 	bl	80002bc <__adddf3>
 80156ae:	9b02      	ldr	r3, [sp, #8]
 80156b0:	4606      	mov	r6, r0
 80156b2:	460f      	mov	r7, r1
 80156b4:	b9db      	cbnz	r3, 80156ee <__kernel_sin+0xd6>
 80156b6:	4602      	mov	r2, r0
 80156b8:	460b      	mov	r3, r1
 80156ba:	4650      	mov	r0, sl
 80156bc:	4659      	mov	r1, fp
 80156be:	f7ea ffb3 	bl	8000628 <__aeabi_dmul>
 80156c2:	a325      	add	r3, pc, #148	; (adr r3, 8015758 <__kernel_sin+0x140>)
 80156c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c8:	f7ea fdf6 	bl	80002b8 <__aeabi_dsub>
 80156cc:	4642      	mov	r2, r8
 80156ce:	464b      	mov	r3, r9
 80156d0:	f7ea ffaa 	bl	8000628 <__aeabi_dmul>
 80156d4:	4602      	mov	r2, r0
 80156d6:	460b      	mov	r3, r1
 80156d8:	4620      	mov	r0, r4
 80156da:	4629      	mov	r1, r5
 80156dc:	f7ea fdee 	bl	80002bc <__adddf3>
 80156e0:	4604      	mov	r4, r0
 80156e2:	460d      	mov	r5, r1
 80156e4:	ec45 4b10 	vmov	d0, r4, r5
 80156e8:	b005      	add	sp, #20
 80156ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ee:	2200      	movs	r2, #0
 80156f0:	4b1b      	ldr	r3, [pc, #108]	; (8015760 <__kernel_sin+0x148>)
 80156f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156f6:	f7ea ff97 	bl	8000628 <__aeabi_dmul>
 80156fa:	4632      	mov	r2, r6
 80156fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015700:	463b      	mov	r3, r7
 8015702:	4640      	mov	r0, r8
 8015704:	4649      	mov	r1, r9
 8015706:	f7ea ff8f 	bl	8000628 <__aeabi_dmul>
 801570a:	4602      	mov	r2, r0
 801570c:	460b      	mov	r3, r1
 801570e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015712:	f7ea fdd1 	bl	80002b8 <__aeabi_dsub>
 8015716:	4652      	mov	r2, sl
 8015718:	465b      	mov	r3, fp
 801571a:	f7ea ff85 	bl	8000628 <__aeabi_dmul>
 801571e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015722:	f7ea fdc9 	bl	80002b8 <__aeabi_dsub>
 8015726:	a30c      	add	r3, pc, #48	; (adr r3, 8015758 <__kernel_sin+0x140>)
 8015728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801572c:	4606      	mov	r6, r0
 801572e:	460f      	mov	r7, r1
 8015730:	4640      	mov	r0, r8
 8015732:	4649      	mov	r1, r9
 8015734:	f7ea ff78 	bl	8000628 <__aeabi_dmul>
 8015738:	4602      	mov	r2, r0
 801573a:	460b      	mov	r3, r1
 801573c:	4630      	mov	r0, r6
 801573e:	4639      	mov	r1, r7
 8015740:	f7ea fdbc 	bl	80002bc <__adddf3>
 8015744:	4602      	mov	r2, r0
 8015746:	460b      	mov	r3, r1
 8015748:	4620      	mov	r0, r4
 801574a:	4629      	mov	r1, r5
 801574c:	f7ea fdb4 	bl	80002b8 <__aeabi_dsub>
 8015750:	e7c6      	b.n	80156e0 <__kernel_sin+0xc8>
 8015752:	bf00      	nop
 8015754:	f3af 8000 	nop.w
 8015758:	55555549 	.word	0x55555549
 801575c:	3fc55555 	.word	0x3fc55555
 8015760:	3fe00000 	.word	0x3fe00000
 8015764:	5acfd57c 	.word	0x5acfd57c
 8015768:	3de5d93a 	.word	0x3de5d93a
 801576c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015770:	3e5ae5e6 	.word	0x3e5ae5e6
 8015774:	57b1fe7d 	.word	0x57b1fe7d
 8015778:	3ec71de3 	.word	0x3ec71de3
 801577c:	19c161d5 	.word	0x19c161d5
 8015780:	3f2a01a0 	.word	0x3f2a01a0
 8015784:	1110f8a6 	.word	0x1110f8a6
 8015788:	3f811111 	.word	0x3f811111

0801578c <fabs>:
 801578c:	ec51 0b10 	vmov	r0, r1, d0
 8015790:	ee10 2a10 	vmov	r2, s0
 8015794:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015798:	ec43 2b10 	vmov	d0, r2, r3
 801579c:	4770      	bx	lr
	...

080157a0 <floor>:
 80157a0:	ec51 0b10 	vmov	r0, r1, d0
 80157a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80157ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80157b0:	2e13      	cmp	r6, #19
 80157b2:	460c      	mov	r4, r1
 80157b4:	ee10 5a10 	vmov	r5, s0
 80157b8:	4680      	mov	r8, r0
 80157ba:	dc34      	bgt.n	8015826 <floor+0x86>
 80157bc:	2e00      	cmp	r6, #0
 80157be:	da16      	bge.n	80157ee <floor+0x4e>
 80157c0:	a335      	add	r3, pc, #212	; (adr r3, 8015898 <floor+0xf8>)
 80157c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c6:	f7ea fd79 	bl	80002bc <__adddf3>
 80157ca:	2200      	movs	r2, #0
 80157cc:	2300      	movs	r3, #0
 80157ce:	f7eb f9bb 	bl	8000b48 <__aeabi_dcmpgt>
 80157d2:	b148      	cbz	r0, 80157e8 <floor+0x48>
 80157d4:	2c00      	cmp	r4, #0
 80157d6:	da59      	bge.n	801588c <floor+0xec>
 80157d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80157dc:	4a30      	ldr	r2, [pc, #192]	; (80158a0 <floor+0x100>)
 80157de:	432b      	orrs	r3, r5
 80157e0:	2500      	movs	r5, #0
 80157e2:	42ab      	cmp	r3, r5
 80157e4:	bf18      	it	ne
 80157e6:	4614      	movne	r4, r2
 80157e8:	4621      	mov	r1, r4
 80157ea:	4628      	mov	r0, r5
 80157ec:	e025      	b.n	801583a <floor+0x9a>
 80157ee:	4f2d      	ldr	r7, [pc, #180]	; (80158a4 <floor+0x104>)
 80157f0:	4137      	asrs	r7, r6
 80157f2:	ea01 0307 	and.w	r3, r1, r7
 80157f6:	4303      	orrs	r3, r0
 80157f8:	d01f      	beq.n	801583a <floor+0x9a>
 80157fa:	a327      	add	r3, pc, #156	; (adr r3, 8015898 <floor+0xf8>)
 80157fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015800:	f7ea fd5c 	bl	80002bc <__adddf3>
 8015804:	2200      	movs	r2, #0
 8015806:	2300      	movs	r3, #0
 8015808:	f7eb f99e 	bl	8000b48 <__aeabi_dcmpgt>
 801580c:	2800      	cmp	r0, #0
 801580e:	d0eb      	beq.n	80157e8 <floor+0x48>
 8015810:	2c00      	cmp	r4, #0
 8015812:	bfbe      	ittt	lt
 8015814:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015818:	fa43 f606 	asrlt.w	r6, r3, r6
 801581c:	19a4      	addlt	r4, r4, r6
 801581e:	ea24 0407 	bic.w	r4, r4, r7
 8015822:	2500      	movs	r5, #0
 8015824:	e7e0      	b.n	80157e8 <floor+0x48>
 8015826:	2e33      	cmp	r6, #51	; 0x33
 8015828:	dd0b      	ble.n	8015842 <floor+0xa2>
 801582a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801582e:	d104      	bne.n	801583a <floor+0x9a>
 8015830:	ee10 2a10 	vmov	r2, s0
 8015834:	460b      	mov	r3, r1
 8015836:	f7ea fd41 	bl	80002bc <__adddf3>
 801583a:	ec41 0b10 	vmov	d0, r0, r1
 801583e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015842:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015846:	f04f 33ff 	mov.w	r3, #4294967295
 801584a:	fa23 f707 	lsr.w	r7, r3, r7
 801584e:	4207      	tst	r7, r0
 8015850:	d0f3      	beq.n	801583a <floor+0x9a>
 8015852:	a311      	add	r3, pc, #68	; (adr r3, 8015898 <floor+0xf8>)
 8015854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015858:	f7ea fd30 	bl	80002bc <__adddf3>
 801585c:	2200      	movs	r2, #0
 801585e:	2300      	movs	r3, #0
 8015860:	f7eb f972 	bl	8000b48 <__aeabi_dcmpgt>
 8015864:	2800      	cmp	r0, #0
 8015866:	d0bf      	beq.n	80157e8 <floor+0x48>
 8015868:	2c00      	cmp	r4, #0
 801586a:	da02      	bge.n	8015872 <floor+0xd2>
 801586c:	2e14      	cmp	r6, #20
 801586e:	d103      	bne.n	8015878 <floor+0xd8>
 8015870:	3401      	adds	r4, #1
 8015872:	ea25 0507 	bic.w	r5, r5, r7
 8015876:	e7b7      	b.n	80157e8 <floor+0x48>
 8015878:	2301      	movs	r3, #1
 801587a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801587e:	fa03 f606 	lsl.w	r6, r3, r6
 8015882:	4435      	add	r5, r6
 8015884:	4545      	cmp	r5, r8
 8015886:	bf38      	it	cc
 8015888:	18e4      	addcc	r4, r4, r3
 801588a:	e7f2      	b.n	8015872 <floor+0xd2>
 801588c:	2500      	movs	r5, #0
 801588e:	462c      	mov	r4, r5
 8015890:	e7aa      	b.n	80157e8 <floor+0x48>
 8015892:	bf00      	nop
 8015894:	f3af 8000 	nop.w
 8015898:	8800759c 	.word	0x8800759c
 801589c:	7e37e43c 	.word	0x7e37e43c
 80158a0:	bff00000 	.word	0xbff00000
 80158a4:	000fffff 	.word	0x000fffff

080158a8 <scalbn>:
 80158a8:	b570      	push	{r4, r5, r6, lr}
 80158aa:	ec55 4b10 	vmov	r4, r5, d0
 80158ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80158b2:	4606      	mov	r6, r0
 80158b4:	462b      	mov	r3, r5
 80158b6:	b9aa      	cbnz	r2, 80158e4 <scalbn+0x3c>
 80158b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80158bc:	4323      	orrs	r3, r4
 80158be:	d03b      	beq.n	8015938 <scalbn+0x90>
 80158c0:	4b31      	ldr	r3, [pc, #196]	; (8015988 <scalbn+0xe0>)
 80158c2:	4629      	mov	r1, r5
 80158c4:	2200      	movs	r2, #0
 80158c6:	ee10 0a10 	vmov	r0, s0
 80158ca:	f7ea fead 	bl	8000628 <__aeabi_dmul>
 80158ce:	4b2f      	ldr	r3, [pc, #188]	; (801598c <scalbn+0xe4>)
 80158d0:	429e      	cmp	r6, r3
 80158d2:	4604      	mov	r4, r0
 80158d4:	460d      	mov	r5, r1
 80158d6:	da12      	bge.n	80158fe <scalbn+0x56>
 80158d8:	a327      	add	r3, pc, #156	; (adr r3, 8015978 <scalbn+0xd0>)
 80158da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158de:	f7ea fea3 	bl	8000628 <__aeabi_dmul>
 80158e2:	e009      	b.n	80158f8 <scalbn+0x50>
 80158e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80158e8:	428a      	cmp	r2, r1
 80158ea:	d10c      	bne.n	8015906 <scalbn+0x5e>
 80158ec:	ee10 2a10 	vmov	r2, s0
 80158f0:	4620      	mov	r0, r4
 80158f2:	4629      	mov	r1, r5
 80158f4:	f7ea fce2 	bl	80002bc <__adddf3>
 80158f8:	4604      	mov	r4, r0
 80158fa:	460d      	mov	r5, r1
 80158fc:	e01c      	b.n	8015938 <scalbn+0x90>
 80158fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015902:	460b      	mov	r3, r1
 8015904:	3a36      	subs	r2, #54	; 0x36
 8015906:	4432      	add	r2, r6
 8015908:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801590c:	428a      	cmp	r2, r1
 801590e:	dd0b      	ble.n	8015928 <scalbn+0x80>
 8015910:	ec45 4b11 	vmov	d1, r4, r5
 8015914:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015980 <scalbn+0xd8>
 8015918:	f000 f83c 	bl	8015994 <copysign>
 801591c:	a318      	add	r3, pc, #96	; (adr r3, 8015980 <scalbn+0xd8>)
 801591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015922:	ec51 0b10 	vmov	r0, r1, d0
 8015926:	e7da      	b.n	80158de <scalbn+0x36>
 8015928:	2a00      	cmp	r2, #0
 801592a:	dd08      	ble.n	801593e <scalbn+0x96>
 801592c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015930:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015934:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015938:	ec45 4b10 	vmov	d0, r4, r5
 801593c:	bd70      	pop	{r4, r5, r6, pc}
 801593e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015942:	da0d      	bge.n	8015960 <scalbn+0xb8>
 8015944:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015948:	429e      	cmp	r6, r3
 801594a:	ec45 4b11 	vmov	d1, r4, r5
 801594e:	dce1      	bgt.n	8015914 <scalbn+0x6c>
 8015950:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015978 <scalbn+0xd0>
 8015954:	f000 f81e 	bl	8015994 <copysign>
 8015958:	a307      	add	r3, pc, #28	; (adr r3, 8015978 <scalbn+0xd0>)
 801595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801595e:	e7e0      	b.n	8015922 <scalbn+0x7a>
 8015960:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015964:	3236      	adds	r2, #54	; 0x36
 8015966:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801596a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801596e:	4620      	mov	r0, r4
 8015970:	4629      	mov	r1, r5
 8015972:	2200      	movs	r2, #0
 8015974:	4b06      	ldr	r3, [pc, #24]	; (8015990 <scalbn+0xe8>)
 8015976:	e7b2      	b.n	80158de <scalbn+0x36>
 8015978:	c2f8f359 	.word	0xc2f8f359
 801597c:	01a56e1f 	.word	0x01a56e1f
 8015980:	8800759c 	.word	0x8800759c
 8015984:	7e37e43c 	.word	0x7e37e43c
 8015988:	43500000 	.word	0x43500000
 801598c:	ffff3cb0 	.word	0xffff3cb0
 8015990:	3c900000 	.word	0x3c900000

08015994 <copysign>:
 8015994:	ec51 0b10 	vmov	r0, r1, d0
 8015998:	ee11 0a90 	vmov	r0, s3
 801599c:	ee10 2a10 	vmov	r2, s0
 80159a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80159a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80159a8:	ea41 0300 	orr.w	r3, r1, r0
 80159ac:	ec43 2b10 	vmov	d0, r2, r3
 80159b0:	4770      	bx	lr
	...

080159b4 <__errno>:
 80159b4:	4b01      	ldr	r3, [pc, #4]	; (80159bc <__errno+0x8>)
 80159b6:	6818      	ldr	r0, [r3, #0]
 80159b8:	4770      	bx	lr
 80159ba:	bf00      	nop
 80159bc:	2000000c 	.word	0x2000000c

080159c0 <__libc_init_array>:
 80159c0:	b570      	push	{r4, r5, r6, lr}
 80159c2:	4e0d      	ldr	r6, [pc, #52]	; (80159f8 <__libc_init_array+0x38>)
 80159c4:	4c0d      	ldr	r4, [pc, #52]	; (80159fc <__libc_init_array+0x3c>)
 80159c6:	1ba4      	subs	r4, r4, r6
 80159c8:	10a4      	asrs	r4, r4, #2
 80159ca:	2500      	movs	r5, #0
 80159cc:	42a5      	cmp	r5, r4
 80159ce:	d109      	bne.n	80159e4 <__libc_init_array+0x24>
 80159d0:	4e0b      	ldr	r6, [pc, #44]	; (8015a00 <__libc_init_array+0x40>)
 80159d2:	4c0c      	ldr	r4, [pc, #48]	; (8015a04 <__libc_init_array+0x44>)
 80159d4:	f004 f9e6 	bl	8019da4 <_init>
 80159d8:	1ba4      	subs	r4, r4, r6
 80159da:	10a4      	asrs	r4, r4, #2
 80159dc:	2500      	movs	r5, #0
 80159de:	42a5      	cmp	r5, r4
 80159e0:	d105      	bne.n	80159ee <__libc_init_array+0x2e>
 80159e2:	bd70      	pop	{r4, r5, r6, pc}
 80159e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80159e8:	4798      	blx	r3
 80159ea:	3501      	adds	r5, #1
 80159ec:	e7ee      	b.n	80159cc <__libc_init_array+0xc>
 80159ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80159f2:	4798      	blx	r3
 80159f4:	3501      	adds	r5, #1
 80159f6:	e7f2      	b.n	80159de <__libc_init_array+0x1e>
 80159f8:	0801a7d4 	.word	0x0801a7d4
 80159fc:	0801a7d4 	.word	0x0801a7d4
 8015a00:	0801a7d4 	.word	0x0801a7d4
 8015a04:	0801a7dc 	.word	0x0801a7dc

08015a08 <memset>:
 8015a08:	4402      	add	r2, r0
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	4293      	cmp	r3, r2
 8015a0e:	d100      	bne.n	8015a12 <memset+0xa>
 8015a10:	4770      	bx	lr
 8015a12:	f803 1b01 	strb.w	r1, [r3], #1
 8015a16:	e7f9      	b.n	8015a0c <memset+0x4>

08015a18 <__cvt>:
 8015a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015a1c:	ec55 4b10 	vmov	r4, r5, d0
 8015a20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015a22:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015a26:	2d00      	cmp	r5, #0
 8015a28:	460e      	mov	r6, r1
 8015a2a:	4691      	mov	r9, r2
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	bfb8      	it	lt
 8015a30:	4622      	movlt	r2, r4
 8015a32:	462b      	mov	r3, r5
 8015a34:	f027 0720 	bic.w	r7, r7, #32
 8015a38:	bfbb      	ittet	lt
 8015a3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015a3e:	461d      	movlt	r5, r3
 8015a40:	2300      	movge	r3, #0
 8015a42:	232d      	movlt	r3, #45	; 0x2d
 8015a44:	bfb8      	it	lt
 8015a46:	4614      	movlt	r4, r2
 8015a48:	2f46      	cmp	r7, #70	; 0x46
 8015a4a:	700b      	strb	r3, [r1, #0]
 8015a4c:	d004      	beq.n	8015a58 <__cvt+0x40>
 8015a4e:	2f45      	cmp	r7, #69	; 0x45
 8015a50:	d100      	bne.n	8015a54 <__cvt+0x3c>
 8015a52:	3601      	adds	r6, #1
 8015a54:	2102      	movs	r1, #2
 8015a56:	e000      	b.n	8015a5a <__cvt+0x42>
 8015a58:	2103      	movs	r1, #3
 8015a5a:	ab03      	add	r3, sp, #12
 8015a5c:	9301      	str	r3, [sp, #4]
 8015a5e:	ab02      	add	r3, sp, #8
 8015a60:	9300      	str	r3, [sp, #0]
 8015a62:	4632      	mov	r2, r6
 8015a64:	4653      	mov	r3, sl
 8015a66:	ec45 4b10 	vmov	d0, r4, r5
 8015a6a:	f001 fdfd 	bl	8017668 <_dtoa_r>
 8015a6e:	2f47      	cmp	r7, #71	; 0x47
 8015a70:	4680      	mov	r8, r0
 8015a72:	d102      	bne.n	8015a7a <__cvt+0x62>
 8015a74:	f019 0f01 	tst.w	r9, #1
 8015a78:	d026      	beq.n	8015ac8 <__cvt+0xb0>
 8015a7a:	2f46      	cmp	r7, #70	; 0x46
 8015a7c:	eb08 0906 	add.w	r9, r8, r6
 8015a80:	d111      	bne.n	8015aa6 <__cvt+0x8e>
 8015a82:	f898 3000 	ldrb.w	r3, [r8]
 8015a86:	2b30      	cmp	r3, #48	; 0x30
 8015a88:	d10a      	bne.n	8015aa0 <__cvt+0x88>
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	4620      	mov	r0, r4
 8015a90:	4629      	mov	r1, r5
 8015a92:	f7eb f831 	bl	8000af8 <__aeabi_dcmpeq>
 8015a96:	b918      	cbnz	r0, 8015aa0 <__cvt+0x88>
 8015a98:	f1c6 0601 	rsb	r6, r6, #1
 8015a9c:	f8ca 6000 	str.w	r6, [sl]
 8015aa0:	f8da 3000 	ldr.w	r3, [sl]
 8015aa4:	4499      	add	r9, r3
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	4620      	mov	r0, r4
 8015aac:	4629      	mov	r1, r5
 8015aae:	f7eb f823 	bl	8000af8 <__aeabi_dcmpeq>
 8015ab2:	b938      	cbnz	r0, 8015ac4 <__cvt+0xac>
 8015ab4:	2230      	movs	r2, #48	; 0x30
 8015ab6:	9b03      	ldr	r3, [sp, #12]
 8015ab8:	454b      	cmp	r3, r9
 8015aba:	d205      	bcs.n	8015ac8 <__cvt+0xb0>
 8015abc:	1c59      	adds	r1, r3, #1
 8015abe:	9103      	str	r1, [sp, #12]
 8015ac0:	701a      	strb	r2, [r3, #0]
 8015ac2:	e7f8      	b.n	8015ab6 <__cvt+0x9e>
 8015ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8015ac8:	9b03      	ldr	r3, [sp, #12]
 8015aca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015acc:	eba3 0308 	sub.w	r3, r3, r8
 8015ad0:	4640      	mov	r0, r8
 8015ad2:	6013      	str	r3, [r2, #0]
 8015ad4:	b004      	add	sp, #16
 8015ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015ada <__exponent>:
 8015ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015adc:	2900      	cmp	r1, #0
 8015ade:	4604      	mov	r4, r0
 8015ae0:	bfba      	itte	lt
 8015ae2:	4249      	neglt	r1, r1
 8015ae4:	232d      	movlt	r3, #45	; 0x2d
 8015ae6:	232b      	movge	r3, #43	; 0x2b
 8015ae8:	2909      	cmp	r1, #9
 8015aea:	f804 2b02 	strb.w	r2, [r4], #2
 8015aee:	7043      	strb	r3, [r0, #1]
 8015af0:	dd20      	ble.n	8015b34 <__exponent+0x5a>
 8015af2:	f10d 0307 	add.w	r3, sp, #7
 8015af6:	461f      	mov	r7, r3
 8015af8:	260a      	movs	r6, #10
 8015afa:	fb91 f5f6 	sdiv	r5, r1, r6
 8015afe:	fb06 1115 	mls	r1, r6, r5, r1
 8015b02:	3130      	adds	r1, #48	; 0x30
 8015b04:	2d09      	cmp	r5, #9
 8015b06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015b0a:	f103 32ff 	add.w	r2, r3, #4294967295
 8015b0e:	4629      	mov	r1, r5
 8015b10:	dc09      	bgt.n	8015b26 <__exponent+0x4c>
 8015b12:	3130      	adds	r1, #48	; 0x30
 8015b14:	3b02      	subs	r3, #2
 8015b16:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015b1a:	42bb      	cmp	r3, r7
 8015b1c:	4622      	mov	r2, r4
 8015b1e:	d304      	bcc.n	8015b2a <__exponent+0x50>
 8015b20:	1a10      	subs	r0, r2, r0
 8015b22:	b003      	add	sp, #12
 8015b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b26:	4613      	mov	r3, r2
 8015b28:	e7e7      	b.n	8015afa <__exponent+0x20>
 8015b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b2e:	f804 2b01 	strb.w	r2, [r4], #1
 8015b32:	e7f2      	b.n	8015b1a <__exponent+0x40>
 8015b34:	2330      	movs	r3, #48	; 0x30
 8015b36:	4419      	add	r1, r3
 8015b38:	7083      	strb	r3, [r0, #2]
 8015b3a:	1d02      	adds	r2, r0, #4
 8015b3c:	70c1      	strb	r1, [r0, #3]
 8015b3e:	e7ef      	b.n	8015b20 <__exponent+0x46>

08015b40 <_printf_float>:
 8015b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b44:	b08d      	sub	sp, #52	; 0x34
 8015b46:	460c      	mov	r4, r1
 8015b48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015b4c:	4616      	mov	r6, r2
 8015b4e:	461f      	mov	r7, r3
 8015b50:	4605      	mov	r5, r0
 8015b52:	f002 fe7b 	bl	801884c <_localeconv_r>
 8015b56:	6803      	ldr	r3, [r0, #0]
 8015b58:	9304      	str	r3, [sp, #16]
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f7ea fb50 	bl	8000200 <strlen>
 8015b60:	2300      	movs	r3, #0
 8015b62:	930a      	str	r3, [sp, #40]	; 0x28
 8015b64:	f8d8 3000 	ldr.w	r3, [r8]
 8015b68:	9005      	str	r0, [sp, #20]
 8015b6a:	3307      	adds	r3, #7
 8015b6c:	f023 0307 	bic.w	r3, r3, #7
 8015b70:	f103 0208 	add.w	r2, r3, #8
 8015b74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015b78:	f8d4 b000 	ldr.w	fp, [r4]
 8015b7c:	f8c8 2000 	str.w	r2, [r8]
 8015b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015b88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015b8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015b90:	9307      	str	r3, [sp, #28]
 8015b92:	f8cd 8018 	str.w	r8, [sp, #24]
 8015b96:	f04f 32ff 	mov.w	r2, #4294967295
 8015b9a:	4ba7      	ldr	r3, [pc, #668]	; (8015e38 <_printf_float+0x2f8>)
 8015b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ba0:	f7ea ffdc 	bl	8000b5c <__aeabi_dcmpun>
 8015ba4:	bb70      	cbnz	r0, 8015c04 <_printf_float+0xc4>
 8015ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8015baa:	4ba3      	ldr	r3, [pc, #652]	; (8015e38 <_printf_float+0x2f8>)
 8015bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015bb0:	f7ea ffb6 	bl	8000b20 <__aeabi_dcmple>
 8015bb4:	bb30      	cbnz	r0, 8015c04 <_printf_float+0xc4>
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	2300      	movs	r3, #0
 8015bba:	4640      	mov	r0, r8
 8015bbc:	4649      	mov	r1, r9
 8015bbe:	f7ea ffa5 	bl	8000b0c <__aeabi_dcmplt>
 8015bc2:	b110      	cbz	r0, 8015bca <_printf_float+0x8a>
 8015bc4:	232d      	movs	r3, #45	; 0x2d
 8015bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bca:	4a9c      	ldr	r2, [pc, #624]	; (8015e3c <_printf_float+0x2fc>)
 8015bcc:	4b9c      	ldr	r3, [pc, #624]	; (8015e40 <_printf_float+0x300>)
 8015bce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015bd2:	bf8c      	ite	hi
 8015bd4:	4690      	movhi	r8, r2
 8015bd6:	4698      	movls	r8, r3
 8015bd8:	2303      	movs	r3, #3
 8015bda:	f02b 0204 	bic.w	r2, fp, #4
 8015bde:	6123      	str	r3, [r4, #16]
 8015be0:	6022      	str	r2, [r4, #0]
 8015be2:	f04f 0900 	mov.w	r9, #0
 8015be6:	9700      	str	r7, [sp, #0]
 8015be8:	4633      	mov	r3, r6
 8015bea:	aa0b      	add	r2, sp, #44	; 0x2c
 8015bec:	4621      	mov	r1, r4
 8015bee:	4628      	mov	r0, r5
 8015bf0:	f000 f9e6 	bl	8015fc0 <_printf_common>
 8015bf4:	3001      	adds	r0, #1
 8015bf6:	f040 808d 	bne.w	8015d14 <_printf_float+0x1d4>
 8015bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8015bfe:	b00d      	add	sp, #52	; 0x34
 8015c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c04:	4642      	mov	r2, r8
 8015c06:	464b      	mov	r3, r9
 8015c08:	4640      	mov	r0, r8
 8015c0a:	4649      	mov	r1, r9
 8015c0c:	f7ea ffa6 	bl	8000b5c <__aeabi_dcmpun>
 8015c10:	b110      	cbz	r0, 8015c18 <_printf_float+0xd8>
 8015c12:	4a8c      	ldr	r2, [pc, #560]	; (8015e44 <_printf_float+0x304>)
 8015c14:	4b8c      	ldr	r3, [pc, #560]	; (8015e48 <_printf_float+0x308>)
 8015c16:	e7da      	b.n	8015bce <_printf_float+0x8e>
 8015c18:	6861      	ldr	r1, [r4, #4]
 8015c1a:	1c4b      	adds	r3, r1, #1
 8015c1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015c20:	a80a      	add	r0, sp, #40	; 0x28
 8015c22:	d13e      	bne.n	8015ca2 <_printf_float+0x162>
 8015c24:	2306      	movs	r3, #6
 8015c26:	6063      	str	r3, [r4, #4]
 8015c28:	2300      	movs	r3, #0
 8015c2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015c2e:	ab09      	add	r3, sp, #36	; 0x24
 8015c30:	9300      	str	r3, [sp, #0]
 8015c32:	ec49 8b10 	vmov	d0, r8, r9
 8015c36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015c3a:	6022      	str	r2, [r4, #0]
 8015c3c:	f8cd a004 	str.w	sl, [sp, #4]
 8015c40:	6861      	ldr	r1, [r4, #4]
 8015c42:	4628      	mov	r0, r5
 8015c44:	f7ff fee8 	bl	8015a18 <__cvt>
 8015c48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015c4c:	2b47      	cmp	r3, #71	; 0x47
 8015c4e:	4680      	mov	r8, r0
 8015c50:	d109      	bne.n	8015c66 <_printf_float+0x126>
 8015c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c54:	1cd8      	adds	r0, r3, #3
 8015c56:	db02      	blt.n	8015c5e <_printf_float+0x11e>
 8015c58:	6862      	ldr	r2, [r4, #4]
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	dd47      	ble.n	8015cee <_printf_float+0x1ae>
 8015c5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015c62:	fa5f fa8a 	uxtb.w	sl, sl
 8015c66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c6c:	d824      	bhi.n	8015cb8 <_printf_float+0x178>
 8015c6e:	3901      	subs	r1, #1
 8015c70:	4652      	mov	r2, sl
 8015c72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015c76:	9109      	str	r1, [sp, #36]	; 0x24
 8015c78:	f7ff ff2f 	bl	8015ada <__exponent>
 8015c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c7e:	1813      	adds	r3, r2, r0
 8015c80:	2a01      	cmp	r2, #1
 8015c82:	4681      	mov	r9, r0
 8015c84:	6123      	str	r3, [r4, #16]
 8015c86:	dc02      	bgt.n	8015c8e <_printf_float+0x14e>
 8015c88:	6822      	ldr	r2, [r4, #0]
 8015c8a:	07d1      	lsls	r1, r2, #31
 8015c8c:	d501      	bpl.n	8015c92 <_printf_float+0x152>
 8015c8e:	3301      	adds	r3, #1
 8015c90:	6123      	str	r3, [r4, #16]
 8015c92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d0a5      	beq.n	8015be6 <_printf_float+0xa6>
 8015c9a:	232d      	movs	r3, #45	; 0x2d
 8015c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ca0:	e7a1      	b.n	8015be6 <_printf_float+0xa6>
 8015ca2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015ca6:	f000 8177 	beq.w	8015f98 <_printf_float+0x458>
 8015caa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015cae:	d1bb      	bne.n	8015c28 <_printf_float+0xe8>
 8015cb0:	2900      	cmp	r1, #0
 8015cb2:	d1b9      	bne.n	8015c28 <_printf_float+0xe8>
 8015cb4:	2301      	movs	r3, #1
 8015cb6:	e7b6      	b.n	8015c26 <_printf_float+0xe6>
 8015cb8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015cbc:	d119      	bne.n	8015cf2 <_printf_float+0x1b2>
 8015cbe:	2900      	cmp	r1, #0
 8015cc0:	6863      	ldr	r3, [r4, #4]
 8015cc2:	dd0c      	ble.n	8015cde <_printf_float+0x19e>
 8015cc4:	6121      	str	r1, [r4, #16]
 8015cc6:	b913      	cbnz	r3, 8015cce <_printf_float+0x18e>
 8015cc8:	6822      	ldr	r2, [r4, #0]
 8015cca:	07d2      	lsls	r2, r2, #31
 8015ccc:	d502      	bpl.n	8015cd4 <_printf_float+0x194>
 8015cce:	3301      	adds	r3, #1
 8015cd0:	440b      	add	r3, r1
 8015cd2:	6123      	str	r3, [r4, #16]
 8015cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015cd8:	f04f 0900 	mov.w	r9, #0
 8015cdc:	e7d9      	b.n	8015c92 <_printf_float+0x152>
 8015cde:	b913      	cbnz	r3, 8015ce6 <_printf_float+0x1a6>
 8015ce0:	6822      	ldr	r2, [r4, #0]
 8015ce2:	07d0      	lsls	r0, r2, #31
 8015ce4:	d501      	bpl.n	8015cea <_printf_float+0x1aa>
 8015ce6:	3302      	adds	r3, #2
 8015ce8:	e7f3      	b.n	8015cd2 <_printf_float+0x192>
 8015cea:	2301      	movs	r3, #1
 8015cec:	e7f1      	b.n	8015cd2 <_printf_float+0x192>
 8015cee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015cf2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015cf6:	4293      	cmp	r3, r2
 8015cf8:	db05      	blt.n	8015d06 <_printf_float+0x1c6>
 8015cfa:	6822      	ldr	r2, [r4, #0]
 8015cfc:	6123      	str	r3, [r4, #16]
 8015cfe:	07d1      	lsls	r1, r2, #31
 8015d00:	d5e8      	bpl.n	8015cd4 <_printf_float+0x194>
 8015d02:	3301      	adds	r3, #1
 8015d04:	e7e5      	b.n	8015cd2 <_printf_float+0x192>
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	bfd4      	ite	le
 8015d0a:	f1c3 0302 	rsble	r3, r3, #2
 8015d0e:	2301      	movgt	r3, #1
 8015d10:	4413      	add	r3, r2
 8015d12:	e7de      	b.n	8015cd2 <_printf_float+0x192>
 8015d14:	6823      	ldr	r3, [r4, #0]
 8015d16:	055a      	lsls	r2, r3, #21
 8015d18:	d407      	bmi.n	8015d2a <_printf_float+0x1ea>
 8015d1a:	6923      	ldr	r3, [r4, #16]
 8015d1c:	4642      	mov	r2, r8
 8015d1e:	4631      	mov	r1, r6
 8015d20:	4628      	mov	r0, r5
 8015d22:	47b8      	blx	r7
 8015d24:	3001      	adds	r0, #1
 8015d26:	d12b      	bne.n	8015d80 <_printf_float+0x240>
 8015d28:	e767      	b.n	8015bfa <_printf_float+0xba>
 8015d2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015d2e:	f240 80dc 	bls.w	8015eea <_printf_float+0x3aa>
 8015d32:	2200      	movs	r2, #0
 8015d34:	2300      	movs	r3, #0
 8015d36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d3a:	f7ea fedd 	bl	8000af8 <__aeabi_dcmpeq>
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	d033      	beq.n	8015daa <_printf_float+0x26a>
 8015d42:	2301      	movs	r3, #1
 8015d44:	4a41      	ldr	r2, [pc, #260]	; (8015e4c <_printf_float+0x30c>)
 8015d46:	4631      	mov	r1, r6
 8015d48:	4628      	mov	r0, r5
 8015d4a:	47b8      	blx	r7
 8015d4c:	3001      	adds	r0, #1
 8015d4e:	f43f af54 	beq.w	8015bfa <_printf_float+0xba>
 8015d52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d56:	429a      	cmp	r2, r3
 8015d58:	db02      	blt.n	8015d60 <_printf_float+0x220>
 8015d5a:	6823      	ldr	r3, [r4, #0]
 8015d5c:	07d8      	lsls	r0, r3, #31
 8015d5e:	d50f      	bpl.n	8015d80 <_printf_float+0x240>
 8015d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d64:	4631      	mov	r1, r6
 8015d66:	4628      	mov	r0, r5
 8015d68:	47b8      	blx	r7
 8015d6a:	3001      	adds	r0, #1
 8015d6c:	f43f af45 	beq.w	8015bfa <_printf_float+0xba>
 8015d70:	f04f 0800 	mov.w	r8, #0
 8015d74:	f104 091a 	add.w	r9, r4, #26
 8015d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d7a:	3b01      	subs	r3, #1
 8015d7c:	4543      	cmp	r3, r8
 8015d7e:	dc09      	bgt.n	8015d94 <_printf_float+0x254>
 8015d80:	6823      	ldr	r3, [r4, #0]
 8015d82:	079b      	lsls	r3, r3, #30
 8015d84:	f100 8103 	bmi.w	8015f8e <_printf_float+0x44e>
 8015d88:	68e0      	ldr	r0, [r4, #12]
 8015d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d8c:	4298      	cmp	r0, r3
 8015d8e:	bfb8      	it	lt
 8015d90:	4618      	movlt	r0, r3
 8015d92:	e734      	b.n	8015bfe <_printf_float+0xbe>
 8015d94:	2301      	movs	r3, #1
 8015d96:	464a      	mov	r2, r9
 8015d98:	4631      	mov	r1, r6
 8015d9a:	4628      	mov	r0, r5
 8015d9c:	47b8      	blx	r7
 8015d9e:	3001      	adds	r0, #1
 8015da0:	f43f af2b 	beq.w	8015bfa <_printf_float+0xba>
 8015da4:	f108 0801 	add.w	r8, r8, #1
 8015da8:	e7e6      	b.n	8015d78 <_printf_float+0x238>
 8015daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	dc2b      	bgt.n	8015e08 <_printf_float+0x2c8>
 8015db0:	2301      	movs	r3, #1
 8015db2:	4a26      	ldr	r2, [pc, #152]	; (8015e4c <_printf_float+0x30c>)
 8015db4:	4631      	mov	r1, r6
 8015db6:	4628      	mov	r0, r5
 8015db8:	47b8      	blx	r7
 8015dba:	3001      	adds	r0, #1
 8015dbc:	f43f af1d 	beq.w	8015bfa <_printf_float+0xba>
 8015dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dc2:	b923      	cbnz	r3, 8015dce <_printf_float+0x28e>
 8015dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dc6:	b913      	cbnz	r3, 8015dce <_printf_float+0x28e>
 8015dc8:	6823      	ldr	r3, [r4, #0]
 8015dca:	07d9      	lsls	r1, r3, #31
 8015dcc:	d5d8      	bpl.n	8015d80 <_printf_float+0x240>
 8015dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015dd2:	4631      	mov	r1, r6
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	47b8      	blx	r7
 8015dd8:	3001      	adds	r0, #1
 8015dda:	f43f af0e 	beq.w	8015bfa <_printf_float+0xba>
 8015dde:	f04f 0900 	mov.w	r9, #0
 8015de2:	f104 0a1a 	add.w	sl, r4, #26
 8015de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015de8:	425b      	negs	r3, r3
 8015dea:	454b      	cmp	r3, r9
 8015dec:	dc01      	bgt.n	8015df2 <_printf_float+0x2b2>
 8015dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015df0:	e794      	b.n	8015d1c <_printf_float+0x1dc>
 8015df2:	2301      	movs	r3, #1
 8015df4:	4652      	mov	r2, sl
 8015df6:	4631      	mov	r1, r6
 8015df8:	4628      	mov	r0, r5
 8015dfa:	47b8      	blx	r7
 8015dfc:	3001      	adds	r0, #1
 8015dfe:	f43f aefc 	beq.w	8015bfa <_printf_float+0xba>
 8015e02:	f109 0901 	add.w	r9, r9, #1
 8015e06:	e7ee      	b.n	8015de6 <_printf_float+0x2a6>
 8015e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	bfa8      	it	ge
 8015e10:	461a      	movge	r2, r3
 8015e12:	2a00      	cmp	r2, #0
 8015e14:	4691      	mov	r9, r2
 8015e16:	dd07      	ble.n	8015e28 <_printf_float+0x2e8>
 8015e18:	4613      	mov	r3, r2
 8015e1a:	4631      	mov	r1, r6
 8015e1c:	4642      	mov	r2, r8
 8015e1e:	4628      	mov	r0, r5
 8015e20:	47b8      	blx	r7
 8015e22:	3001      	adds	r0, #1
 8015e24:	f43f aee9 	beq.w	8015bfa <_printf_float+0xba>
 8015e28:	f104 031a 	add.w	r3, r4, #26
 8015e2c:	f04f 0b00 	mov.w	fp, #0
 8015e30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015e34:	9306      	str	r3, [sp, #24]
 8015e36:	e015      	b.n	8015e64 <_printf_float+0x324>
 8015e38:	7fefffff 	.word	0x7fefffff
 8015e3c:	0801a4a4 	.word	0x0801a4a4
 8015e40:	0801a4a0 	.word	0x0801a4a0
 8015e44:	0801a4ac 	.word	0x0801a4ac
 8015e48:	0801a4a8 	.word	0x0801a4a8
 8015e4c:	0801a663 	.word	0x0801a663
 8015e50:	2301      	movs	r3, #1
 8015e52:	9a06      	ldr	r2, [sp, #24]
 8015e54:	4631      	mov	r1, r6
 8015e56:	4628      	mov	r0, r5
 8015e58:	47b8      	blx	r7
 8015e5a:	3001      	adds	r0, #1
 8015e5c:	f43f aecd 	beq.w	8015bfa <_printf_float+0xba>
 8015e60:	f10b 0b01 	add.w	fp, fp, #1
 8015e64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015e68:	ebaa 0309 	sub.w	r3, sl, r9
 8015e6c:	455b      	cmp	r3, fp
 8015e6e:	dcef      	bgt.n	8015e50 <_printf_float+0x310>
 8015e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e74:	429a      	cmp	r2, r3
 8015e76:	44d0      	add	r8, sl
 8015e78:	db15      	blt.n	8015ea6 <_printf_float+0x366>
 8015e7a:	6823      	ldr	r3, [r4, #0]
 8015e7c:	07da      	lsls	r2, r3, #31
 8015e7e:	d412      	bmi.n	8015ea6 <_printf_float+0x366>
 8015e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e84:	eba3 020a 	sub.w	r2, r3, sl
 8015e88:	eba3 0a01 	sub.w	sl, r3, r1
 8015e8c:	4592      	cmp	sl, r2
 8015e8e:	bfa8      	it	ge
 8015e90:	4692      	movge	sl, r2
 8015e92:	f1ba 0f00 	cmp.w	sl, #0
 8015e96:	dc0e      	bgt.n	8015eb6 <_printf_float+0x376>
 8015e98:	f04f 0800 	mov.w	r8, #0
 8015e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015ea0:	f104 091a 	add.w	r9, r4, #26
 8015ea4:	e019      	b.n	8015eda <_printf_float+0x39a>
 8015ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015eaa:	4631      	mov	r1, r6
 8015eac:	4628      	mov	r0, r5
 8015eae:	47b8      	blx	r7
 8015eb0:	3001      	adds	r0, #1
 8015eb2:	d1e5      	bne.n	8015e80 <_printf_float+0x340>
 8015eb4:	e6a1      	b.n	8015bfa <_printf_float+0xba>
 8015eb6:	4653      	mov	r3, sl
 8015eb8:	4642      	mov	r2, r8
 8015eba:	4631      	mov	r1, r6
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	47b8      	blx	r7
 8015ec0:	3001      	adds	r0, #1
 8015ec2:	d1e9      	bne.n	8015e98 <_printf_float+0x358>
 8015ec4:	e699      	b.n	8015bfa <_printf_float+0xba>
 8015ec6:	2301      	movs	r3, #1
 8015ec8:	464a      	mov	r2, r9
 8015eca:	4631      	mov	r1, r6
 8015ecc:	4628      	mov	r0, r5
 8015ece:	47b8      	blx	r7
 8015ed0:	3001      	adds	r0, #1
 8015ed2:	f43f ae92 	beq.w	8015bfa <_printf_float+0xba>
 8015ed6:	f108 0801 	add.w	r8, r8, #1
 8015eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ede:	1a9b      	subs	r3, r3, r2
 8015ee0:	eba3 030a 	sub.w	r3, r3, sl
 8015ee4:	4543      	cmp	r3, r8
 8015ee6:	dcee      	bgt.n	8015ec6 <_printf_float+0x386>
 8015ee8:	e74a      	b.n	8015d80 <_printf_float+0x240>
 8015eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015eec:	2a01      	cmp	r2, #1
 8015eee:	dc01      	bgt.n	8015ef4 <_printf_float+0x3b4>
 8015ef0:	07db      	lsls	r3, r3, #31
 8015ef2:	d53a      	bpl.n	8015f6a <_printf_float+0x42a>
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	4642      	mov	r2, r8
 8015ef8:	4631      	mov	r1, r6
 8015efa:	4628      	mov	r0, r5
 8015efc:	47b8      	blx	r7
 8015efe:	3001      	adds	r0, #1
 8015f00:	f43f ae7b 	beq.w	8015bfa <_printf_float+0xba>
 8015f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f08:	4631      	mov	r1, r6
 8015f0a:	4628      	mov	r0, r5
 8015f0c:	47b8      	blx	r7
 8015f0e:	3001      	adds	r0, #1
 8015f10:	f108 0801 	add.w	r8, r8, #1
 8015f14:	f43f ae71 	beq.w	8015bfa <_printf_float+0xba>
 8015f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015f24:	2300      	movs	r3, #0
 8015f26:	f7ea fde7 	bl	8000af8 <__aeabi_dcmpeq>
 8015f2a:	b9c8      	cbnz	r0, 8015f60 <_printf_float+0x420>
 8015f2c:	4653      	mov	r3, sl
 8015f2e:	4642      	mov	r2, r8
 8015f30:	4631      	mov	r1, r6
 8015f32:	4628      	mov	r0, r5
 8015f34:	47b8      	blx	r7
 8015f36:	3001      	adds	r0, #1
 8015f38:	d10e      	bne.n	8015f58 <_printf_float+0x418>
 8015f3a:	e65e      	b.n	8015bfa <_printf_float+0xba>
 8015f3c:	2301      	movs	r3, #1
 8015f3e:	4652      	mov	r2, sl
 8015f40:	4631      	mov	r1, r6
 8015f42:	4628      	mov	r0, r5
 8015f44:	47b8      	blx	r7
 8015f46:	3001      	adds	r0, #1
 8015f48:	f43f ae57 	beq.w	8015bfa <_printf_float+0xba>
 8015f4c:	f108 0801 	add.w	r8, r8, #1
 8015f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f52:	3b01      	subs	r3, #1
 8015f54:	4543      	cmp	r3, r8
 8015f56:	dcf1      	bgt.n	8015f3c <_printf_float+0x3fc>
 8015f58:	464b      	mov	r3, r9
 8015f5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015f5e:	e6de      	b.n	8015d1e <_printf_float+0x1de>
 8015f60:	f04f 0800 	mov.w	r8, #0
 8015f64:	f104 0a1a 	add.w	sl, r4, #26
 8015f68:	e7f2      	b.n	8015f50 <_printf_float+0x410>
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	e7df      	b.n	8015f2e <_printf_float+0x3ee>
 8015f6e:	2301      	movs	r3, #1
 8015f70:	464a      	mov	r2, r9
 8015f72:	4631      	mov	r1, r6
 8015f74:	4628      	mov	r0, r5
 8015f76:	47b8      	blx	r7
 8015f78:	3001      	adds	r0, #1
 8015f7a:	f43f ae3e 	beq.w	8015bfa <_printf_float+0xba>
 8015f7e:	f108 0801 	add.w	r8, r8, #1
 8015f82:	68e3      	ldr	r3, [r4, #12]
 8015f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015f86:	1a9b      	subs	r3, r3, r2
 8015f88:	4543      	cmp	r3, r8
 8015f8a:	dcf0      	bgt.n	8015f6e <_printf_float+0x42e>
 8015f8c:	e6fc      	b.n	8015d88 <_printf_float+0x248>
 8015f8e:	f04f 0800 	mov.w	r8, #0
 8015f92:	f104 0919 	add.w	r9, r4, #25
 8015f96:	e7f4      	b.n	8015f82 <_printf_float+0x442>
 8015f98:	2900      	cmp	r1, #0
 8015f9a:	f43f ae8b 	beq.w	8015cb4 <_printf_float+0x174>
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015fa4:	ab09      	add	r3, sp, #36	; 0x24
 8015fa6:	9300      	str	r3, [sp, #0]
 8015fa8:	ec49 8b10 	vmov	d0, r8, r9
 8015fac:	6022      	str	r2, [r4, #0]
 8015fae:	f8cd a004 	str.w	sl, [sp, #4]
 8015fb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015fb6:	4628      	mov	r0, r5
 8015fb8:	f7ff fd2e 	bl	8015a18 <__cvt>
 8015fbc:	4680      	mov	r8, r0
 8015fbe:	e648      	b.n	8015c52 <_printf_float+0x112>

08015fc0 <_printf_common>:
 8015fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fc4:	4691      	mov	r9, r2
 8015fc6:	461f      	mov	r7, r3
 8015fc8:	688a      	ldr	r2, [r1, #8]
 8015fca:	690b      	ldr	r3, [r1, #16]
 8015fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015fd0:	4293      	cmp	r3, r2
 8015fd2:	bfb8      	it	lt
 8015fd4:	4613      	movlt	r3, r2
 8015fd6:	f8c9 3000 	str.w	r3, [r9]
 8015fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015fde:	4606      	mov	r6, r0
 8015fe0:	460c      	mov	r4, r1
 8015fe2:	b112      	cbz	r2, 8015fea <_printf_common+0x2a>
 8015fe4:	3301      	adds	r3, #1
 8015fe6:	f8c9 3000 	str.w	r3, [r9]
 8015fea:	6823      	ldr	r3, [r4, #0]
 8015fec:	0699      	lsls	r1, r3, #26
 8015fee:	bf42      	ittt	mi
 8015ff0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015ff4:	3302      	addmi	r3, #2
 8015ff6:	f8c9 3000 	strmi.w	r3, [r9]
 8015ffa:	6825      	ldr	r5, [r4, #0]
 8015ffc:	f015 0506 	ands.w	r5, r5, #6
 8016000:	d107      	bne.n	8016012 <_printf_common+0x52>
 8016002:	f104 0a19 	add.w	sl, r4, #25
 8016006:	68e3      	ldr	r3, [r4, #12]
 8016008:	f8d9 2000 	ldr.w	r2, [r9]
 801600c:	1a9b      	subs	r3, r3, r2
 801600e:	42ab      	cmp	r3, r5
 8016010:	dc28      	bgt.n	8016064 <_printf_common+0xa4>
 8016012:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016016:	6822      	ldr	r2, [r4, #0]
 8016018:	3300      	adds	r3, #0
 801601a:	bf18      	it	ne
 801601c:	2301      	movne	r3, #1
 801601e:	0692      	lsls	r2, r2, #26
 8016020:	d42d      	bmi.n	801607e <_printf_common+0xbe>
 8016022:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016026:	4639      	mov	r1, r7
 8016028:	4630      	mov	r0, r6
 801602a:	47c0      	blx	r8
 801602c:	3001      	adds	r0, #1
 801602e:	d020      	beq.n	8016072 <_printf_common+0xb2>
 8016030:	6823      	ldr	r3, [r4, #0]
 8016032:	68e5      	ldr	r5, [r4, #12]
 8016034:	f8d9 2000 	ldr.w	r2, [r9]
 8016038:	f003 0306 	and.w	r3, r3, #6
 801603c:	2b04      	cmp	r3, #4
 801603e:	bf08      	it	eq
 8016040:	1aad      	subeq	r5, r5, r2
 8016042:	68a3      	ldr	r3, [r4, #8]
 8016044:	6922      	ldr	r2, [r4, #16]
 8016046:	bf0c      	ite	eq
 8016048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801604c:	2500      	movne	r5, #0
 801604e:	4293      	cmp	r3, r2
 8016050:	bfc4      	itt	gt
 8016052:	1a9b      	subgt	r3, r3, r2
 8016054:	18ed      	addgt	r5, r5, r3
 8016056:	f04f 0900 	mov.w	r9, #0
 801605a:	341a      	adds	r4, #26
 801605c:	454d      	cmp	r5, r9
 801605e:	d11a      	bne.n	8016096 <_printf_common+0xd6>
 8016060:	2000      	movs	r0, #0
 8016062:	e008      	b.n	8016076 <_printf_common+0xb6>
 8016064:	2301      	movs	r3, #1
 8016066:	4652      	mov	r2, sl
 8016068:	4639      	mov	r1, r7
 801606a:	4630      	mov	r0, r6
 801606c:	47c0      	blx	r8
 801606e:	3001      	adds	r0, #1
 8016070:	d103      	bne.n	801607a <_printf_common+0xba>
 8016072:	f04f 30ff 	mov.w	r0, #4294967295
 8016076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801607a:	3501      	adds	r5, #1
 801607c:	e7c3      	b.n	8016006 <_printf_common+0x46>
 801607e:	18e1      	adds	r1, r4, r3
 8016080:	1c5a      	adds	r2, r3, #1
 8016082:	2030      	movs	r0, #48	; 0x30
 8016084:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016088:	4422      	add	r2, r4
 801608a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801608e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016092:	3302      	adds	r3, #2
 8016094:	e7c5      	b.n	8016022 <_printf_common+0x62>
 8016096:	2301      	movs	r3, #1
 8016098:	4622      	mov	r2, r4
 801609a:	4639      	mov	r1, r7
 801609c:	4630      	mov	r0, r6
 801609e:	47c0      	blx	r8
 80160a0:	3001      	adds	r0, #1
 80160a2:	d0e6      	beq.n	8016072 <_printf_common+0xb2>
 80160a4:	f109 0901 	add.w	r9, r9, #1
 80160a8:	e7d8      	b.n	801605c <_printf_common+0x9c>
	...

080160ac <_printf_i>:
 80160ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80160b4:	460c      	mov	r4, r1
 80160b6:	7e09      	ldrb	r1, [r1, #24]
 80160b8:	b085      	sub	sp, #20
 80160ba:	296e      	cmp	r1, #110	; 0x6e
 80160bc:	4617      	mov	r7, r2
 80160be:	4606      	mov	r6, r0
 80160c0:	4698      	mov	r8, r3
 80160c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80160c4:	f000 80b3 	beq.w	801622e <_printf_i+0x182>
 80160c8:	d822      	bhi.n	8016110 <_printf_i+0x64>
 80160ca:	2963      	cmp	r1, #99	; 0x63
 80160cc:	d036      	beq.n	801613c <_printf_i+0x90>
 80160ce:	d80a      	bhi.n	80160e6 <_printf_i+0x3a>
 80160d0:	2900      	cmp	r1, #0
 80160d2:	f000 80b9 	beq.w	8016248 <_printf_i+0x19c>
 80160d6:	2958      	cmp	r1, #88	; 0x58
 80160d8:	f000 8083 	beq.w	80161e2 <_printf_i+0x136>
 80160dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80160e4:	e032      	b.n	801614c <_printf_i+0xa0>
 80160e6:	2964      	cmp	r1, #100	; 0x64
 80160e8:	d001      	beq.n	80160ee <_printf_i+0x42>
 80160ea:	2969      	cmp	r1, #105	; 0x69
 80160ec:	d1f6      	bne.n	80160dc <_printf_i+0x30>
 80160ee:	6820      	ldr	r0, [r4, #0]
 80160f0:	6813      	ldr	r3, [r2, #0]
 80160f2:	0605      	lsls	r5, r0, #24
 80160f4:	f103 0104 	add.w	r1, r3, #4
 80160f8:	d52a      	bpl.n	8016150 <_printf_i+0xa4>
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	6011      	str	r1, [r2, #0]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	da03      	bge.n	801610a <_printf_i+0x5e>
 8016102:	222d      	movs	r2, #45	; 0x2d
 8016104:	425b      	negs	r3, r3
 8016106:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801610a:	486f      	ldr	r0, [pc, #444]	; (80162c8 <_printf_i+0x21c>)
 801610c:	220a      	movs	r2, #10
 801610e:	e039      	b.n	8016184 <_printf_i+0xd8>
 8016110:	2973      	cmp	r1, #115	; 0x73
 8016112:	f000 809d 	beq.w	8016250 <_printf_i+0x1a4>
 8016116:	d808      	bhi.n	801612a <_printf_i+0x7e>
 8016118:	296f      	cmp	r1, #111	; 0x6f
 801611a:	d020      	beq.n	801615e <_printf_i+0xb2>
 801611c:	2970      	cmp	r1, #112	; 0x70
 801611e:	d1dd      	bne.n	80160dc <_printf_i+0x30>
 8016120:	6823      	ldr	r3, [r4, #0]
 8016122:	f043 0320 	orr.w	r3, r3, #32
 8016126:	6023      	str	r3, [r4, #0]
 8016128:	e003      	b.n	8016132 <_printf_i+0x86>
 801612a:	2975      	cmp	r1, #117	; 0x75
 801612c:	d017      	beq.n	801615e <_printf_i+0xb2>
 801612e:	2978      	cmp	r1, #120	; 0x78
 8016130:	d1d4      	bne.n	80160dc <_printf_i+0x30>
 8016132:	2378      	movs	r3, #120	; 0x78
 8016134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016138:	4864      	ldr	r0, [pc, #400]	; (80162cc <_printf_i+0x220>)
 801613a:	e055      	b.n	80161e8 <_printf_i+0x13c>
 801613c:	6813      	ldr	r3, [r2, #0]
 801613e:	1d19      	adds	r1, r3, #4
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	6011      	str	r1, [r2, #0]
 8016144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801614c:	2301      	movs	r3, #1
 801614e:	e08c      	b.n	801626a <_printf_i+0x1be>
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	6011      	str	r1, [r2, #0]
 8016154:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016158:	bf18      	it	ne
 801615a:	b21b      	sxthne	r3, r3
 801615c:	e7cf      	b.n	80160fe <_printf_i+0x52>
 801615e:	6813      	ldr	r3, [r2, #0]
 8016160:	6825      	ldr	r5, [r4, #0]
 8016162:	1d18      	adds	r0, r3, #4
 8016164:	6010      	str	r0, [r2, #0]
 8016166:	0628      	lsls	r0, r5, #24
 8016168:	d501      	bpl.n	801616e <_printf_i+0xc2>
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	e002      	b.n	8016174 <_printf_i+0xc8>
 801616e:	0668      	lsls	r0, r5, #25
 8016170:	d5fb      	bpl.n	801616a <_printf_i+0xbe>
 8016172:	881b      	ldrh	r3, [r3, #0]
 8016174:	4854      	ldr	r0, [pc, #336]	; (80162c8 <_printf_i+0x21c>)
 8016176:	296f      	cmp	r1, #111	; 0x6f
 8016178:	bf14      	ite	ne
 801617a:	220a      	movne	r2, #10
 801617c:	2208      	moveq	r2, #8
 801617e:	2100      	movs	r1, #0
 8016180:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016184:	6865      	ldr	r5, [r4, #4]
 8016186:	60a5      	str	r5, [r4, #8]
 8016188:	2d00      	cmp	r5, #0
 801618a:	f2c0 8095 	blt.w	80162b8 <_printf_i+0x20c>
 801618e:	6821      	ldr	r1, [r4, #0]
 8016190:	f021 0104 	bic.w	r1, r1, #4
 8016194:	6021      	str	r1, [r4, #0]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d13d      	bne.n	8016216 <_printf_i+0x16a>
 801619a:	2d00      	cmp	r5, #0
 801619c:	f040 808e 	bne.w	80162bc <_printf_i+0x210>
 80161a0:	4665      	mov	r5, ip
 80161a2:	2a08      	cmp	r2, #8
 80161a4:	d10b      	bne.n	80161be <_printf_i+0x112>
 80161a6:	6823      	ldr	r3, [r4, #0]
 80161a8:	07db      	lsls	r3, r3, #31
 80161aa:	d508      	bpl.n	80161be <_printf_i+0x112>
 80161ac:	6923      	ldr	r3, [r4, #16]
 80161ae:	6862      	ldr	r2, [r4, #4]
 80161b0:	429a      	cmp	r2, r3
 80161b2:	bfde      	ittt	le
 80161b4:	2330      	movle	r3, #48	; 0x30
 80161b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80161ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80161be:	ebac 0305 	sub.w	r3, ip, r5
 80161c2:	6123      	str	r3, [r4, #16]
 80161c4:	f8cd 8000 	str.w	r8, [sp]
 80161c8:	463b      	mov	r3, r7
 80161ca:	aa03      	add	r2, sp, #12
 80161cc:	4621      	mov	r1, r4
 80161ce:	4630      	mov	r0, r6
 80161d0:	f7ff fef6 	bl	8015fc0 <_printf_common>
 80161d4:	3001      	adds	r0, #1
 80161d6:	d14d      	bne.n	8016274 <_printf_i+0x1c8>
 80161d8:	f04f 30ff 	mov.w	r0, #4294967295
 80161dc:	b005      	add	sp, #20
 80161de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161e2:	4839      	ldr	r0, [pc, #228]	; (80162c8 <_printf_i+0x21c>)
 80161e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80161e8:	6813      	ldr	r3, [r2, #0]
 80161ea:	6821      	ldr	r1, [r4, #0]
 80161ec:	1d1d      	adds	r5, r3, #4
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	6015      	str	r5, [r2, #0]
 80161f2:	060a      	lsls	r2, r1, #24
 80161f4:	d50b      	bpl.n	801620e <_printf_i+0x162>
 80161f6:	07ca      	lsls	r2, r1, #31
 80161f8:	bf44      	itt	mi
 80161fa:	f041 0120 	orrmi.w	r1, r1, #32
 80161fe:	6021      	strmi	r1, [r4, #0]
 8016200:	b91b      	cbnz	r3, 801620a <_printf_i+0x15e>
 8016202:	6822      	ldr	r2, [r4, #0]
 8016204:	f022 0220 	bic.w	r2, r2, #32
 8016208:	6022      	str	r2, [r4, #0]
 801620a:	2210      	movs	r2, #16
 801620c:	e7b7      	b.n	801617e <_printf_i+0xd2>
 801620e:	064d      	lsls	r5, r1, #25
 8016210:	bf48      	it	mi
 8016212:	b29b      	uxthmi	r3, r3
 8016214:	e7ef      	b.n	80161f6 <_printf_i+0x14a>
 8016216:	4665      	mov	r5, ip
 8016218:	fbb3 f1f2 	udiv	r1, r3, r2
 801621c:	fb02 3311 	mls	r3, r2, r1, r3
 8016220:	5cc3      	ldrb	r3, [r0, r3]
 8016222:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016226:	460b      	mov	r3, r1
 8016228:	2900      	cmp	r1, #0
 801622a:	d1f5      	bne.n	8016218 <_printf_i+0x16c>
 801622c:	e7b9      	b.n	80161a2 <_printf_i+0xf6>
 801622e:	6813      	ldr	r3, [r2, #0]
 8016230:	6825      	ldr	r5, [r4, #0]
 8016232:	6961      	ldr	r1, [r4, #20]
 8016234:	1d18      	adds	r0, r3, #4
 8016236:	6010      	str	r0, [r2, #0]
 8016238:	0628      	lsls	r0, r5, #24
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	d501      	bpl.n	8016242 <_printf_i+0x196>
 801623e:	6019      	str	r1, [r3, #0]
 8016240:	e002      	b.n	8016248 <_printf_i+0x19c>
 8016242:	066a      	lsls	r2, r5, #25
 8016244:	d5fb      	bpl.n	801623e <_printf_i+0x192>
 8016246:	8019      	strh	r1, [r3, #0]
 8016248:	2300      	movs	r3, #0
 801624a:	6123      	str	r3, [r4, #16]
 801624c:	4665      	mov	r5, ip
 801624e:	e7b9      	b.n	80161c4 <_printf_i+0x118>
 8016250:	6813      	ldr	r3, [r2, #0]
 8016252:	1d19      	adds	r1, r3, #4
 8016254:	6011      	str	r1, [r2, #0]
 8016256:	681d      	ldr	r5, [r3, #0]
 8016258:	6862      	ldr	r2, [r4, #4]
 801625a:	2100      	movs	r1, #0
 801625c:	4628      	mov	r0, r5
 801625e:	f7e9 ffd7 	bl	8000210 <memchr>
 8016262:	b108      	cbz	r0, 8016268 <_printf_i+0x1bc>
 8016264:	1b40      	subs	r0, r0, r5
 8016266:	6060      	str	r0, [r4, #4]
 8016268:	6863      	ldr	r3, [r4, #4]
 801626a:	6123      	str	r3, [r4, #16]
 801626c:	2300      	movs	r3, #0
 801626e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016272:	e7a7      	b.n	80161c4 <_printf_i+0x118>
 8016274:	6923      	ldr	r3, [r4, #16]
 8016276:	462a      	mov	r2, r5
 8016278:	4639      	mov	r1, r7
 801627a:	4630      	mov	r0, r6
 801627c:	47c0      	blx	r8
 801627e:	3001      	adds	r0, #1
 8016280:	d0aa      	beq.n	80161d8 <_printf_i+0x12c>
 8016282:	6823      	ldr	r3, [r4, #0]
 8016284:	079b      	lsls	r3, r3, #30
 8016286:	d413      	bmi.n	80162b0 <_printf_i+0x204>
 8016288:	68e0      	ldr	r0, [r4, #12]
 801628a:	9b03      	ldr	r3, [sp, #12]
 801628c:	4298      	cmp	r0, r3
 801628e:	bfb8      	it	lt
 8016290:	4618      	movlt	r0, r3
 8016292:	e7a3      	b.n	80161dc <_printf_i+0x130>
 8016294:	2301      	movs	r3, #1
 8016296:	464a      	mov	r2, r9
 8016298:	4639      	mov	r1, r7
 801629a:	4630      	mov	r0, r6
 801629c:	47c0      	blx	r8
 801629e:	3001      	adds	r0, #1
 80162a0:	d09a      	beq.n	80161d8 <_printf_i+0x12c>
 80162a2:	3501      	adds	r5, #1
 80162a4:	68e3      	ldr	r3, [r4, #12]
 80162a6:	9a03      	ldr	r2, [sp, #12]
 80162a8:	1a9b      	subs	r3, r3, r2
 80162aa:	42ab      	cmp	r3, r5
 80162ac:	dcf2      	bgt.n	8016294 <_printf_i+0x1e8>
 80162ae:	e7eb      	b.n	8016288 <_printf_i+0x1dc>
 80162b0:	2500      	movs	r5, #0
 80162b2:	f104 0919 	add.w	r9, r4, #25
 80162b6:	e7f5      	b.n	80162a4 <_printf_i+0x1f8>
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d1ac      	bne.n	8016216 <_printf_i+0x16a>
 80162bc:	7803      	ldrb	r3, [r0, #0]
 80162be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80162c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80162c6:	e76c      	b.n	80161a2 <_printf_i+0xf6>
 80162c8:	0801a4b0 	.word	0x0801a4b0
 80162cc:	0801a4c1 	.word	0x0801a4c1

080162d0 <_scanf_float>:
 80162d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162d4:	469a      	mov	sl, r3
 80162d6:	688b      	ldr	r3, [r1, #8]
 80162d8:	4616      	mov	r6, r2
 80162da:	1e5a      	subs	r2, r3, #1
 80162dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80162e0:	b087      	sub	sp, #28
 80162e2:	bf83      	ittte	hi
 80162e4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80162e8:	189b      	addhi	r3, r3, r2
 80162ea:	9301      	strhi	r3, [sp, #4]
 80162ec:	2300      	movls	r3, #0
 80162ee:	bf86      	itte	hi
 80162f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80162f4:	608b      	strhi	r3, [r1, #8]
 80162f6:	9301      	strls	r3, [sp, #4]
 80162f8:	680b      	ldr	r3, [r1, #0]
 80162fa:	4688      	mov	r8, r1
 80162fc:	f04f 0b00 	mov.w	fp, #0
 8016300:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016304:	f848 3b1c 	str.w	r3, [r8], #28
 8016308:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801630c:	4607      	mov	r7, r0
 801630e:	460c      	mov	r4, r1
 8016310:	4645      	mov	r5, r8
 8016312:	465a      	mov	r2, fp
 8016314:	46d9      	mov	r9, fp
 8016316:	f8cd b008 	str.w	fp, [sp, #8]
 801631a:	68a1      	ldr	r1, [r4, #8]
 801631c:	b181      	cbz	r1, 8016340 <_scanf_float+0x70>
 801631e:	6833      	ldr	r3, [r6, #0]
 8016320:	781b      	ldrb	r3, [r3, #0]
 8016322:	2b49      	cmp	r3, #73	; 0x49
 8016324:	d071      	beq.n	801640a <_scanf_float+0x13a>
 8016326:	d84d      	bhi.n	80163c4 <_scanf_float+0xf4>
 8016328:	2b39      	cmp	r3, #57	; 0x39
 801632a:	d840      	bhi.n	80163ae <_scanf_float+0xde>
 801632c:	2b31      	cmp	r3, #49	; 0x31
 801632e:	f080 8088 	bcs.w	8016442 <_scanf_float+0x172>
 8016332:	2b2d      	cmp	r3, #45	; 0x2d
 8016334:	f000 8090 	beq.w	8016458 <_scanf_float+0x188>
 8016338:	d815      	bhi.n	8016366 <_scanf_float+0x96>
 801633a:	2b2b      	cmp	r3, #43	; 0x2b
 801633c:	f000 808c 	beq.w	8016458 <_scanf_float+0x188>
 8016340:	f1b9 0f00 	cmp.w	r9, #0
 8016344:	d003      	beq.n	801634e <_scanf_float+0x7e>
 8016346:	6823      	ldr	r3, [r4, #0]
 8016348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801634c:	6023      	str	r3, [r4, #0]
 801634e:	3a01      	subs	r2, #1
 8016350:	2a01      	cmp	r2, #1
 8016352:	f200 80ea 	bhi.w	801652a <_scanf_float+0x25a>
 8016356:	4545      	cmp	r5, r8
 8016358:	f200 80dc 	bhi.w	8016514 <_scanf_float+0x244>
 801635c:	2601      	movs	r6, #1
 801635e:	4630      	mov	r0, r6
 8016360:	b007      	add	sp, #28
 8016362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016366:	2b2e      	cmp	r3, #46	; 0x2e
 8016368:	f000 809f 	beq.w	80164aa <_scanf_float+0x1da>
 801636c:	2b30      	cmp	r3, #48	; 0x30
 801636e:	d1e7      	bne.n	8016340 <_scanf_float+0x70>
 8016370:	6820      	ldr	r0, [r4, #0]
 8016372:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016376:	d064      	beq.n	8016442 <_scanf_float+0x172>
 8016378:	9b01      	ldr	r3, [sp, #4]
 801637a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801637e:	6020      	str	r0, [r4, #0]
 8016380:	f109 0901 	add.w	r9, r9, #1
 8016384:	b11b      	cbz	r3, 801638e <_scanf_float+0xbe>
 8016386:	3b01      	subs	r3, #1
 8016388:	3101      	adds	r1, #1
 801638a:	9301      	str	r3, [sp, #4]
 801638c:	60a1      	str	r1, [r4, #8]
 801638e:	68a3      	ldr	r3, [r4, #8]
 8016390:	3b01      	subs	r3, #1
 8016392:	60a3      	str	r3, [r4, #8]
 8016394:	6923      	ldr	r3, [r4, #16]
 8016396:	3301      	adds	r3, #1
 8016398:	6123      	str	r3, [r4, #16]
 801639a:	6873      	ldr	r3, [r6, #4]
 801639c:	3b01      	subs	r3, #1
 801639e:	2b00      	cmp	r3, #0
 80163a0:	6073      	str	r3, [r6, #4]
 80163a2:	f340 80ac 	ble.w	80164fe <_scanf_float+0x22e>
 80163a6:	6833      	ldr	r3, [r6, #0]
 80163a8:	3301      	adds	r3, #1
 80163aa:	6033      	str	r3, [r6, #0]
 80163ac:	e7b5      	b.n	801631a <_scanf_float+0x4a>
 80163ae:	2b45      	cmp	r3, #69	; 0x45
 80163b0:	f000 8085 	beq.w	80164be <_scanf_float+0x1ee>
 80163b4:	2b46      	cmp	r3, #70	; 0x46
 80163b6:	d06a      	beq.n	801648e <_scanf_float+0x1be>
 80163b8:	2b41      	cmp	r3, #65	; 0x41
 80163ba:	d1c1      	bne.n	8016340 <_scanf_float+0x70>
 80163bc:	2a01      	cmp	r2, #1
 80163be:	d1bf      	bne.n	8016340 <_scanf_float+0x70>
 80163c0:	2202      	movs	r2, #2
 80163c2:	e046      	b.n	8016452 <_scanf_float+0x182>
 80163c4:	2b65      	cmp	r3, #101	; 0x65
 80163c6:	d07a      	beq.n	80164be <_scanf_float+0x1ee>
 80163c8:	d818      	bhi.n	80163fc <_scanf_float+0x12c>
 80163ca:	2b54      	cmp	r3, #84	; 0x54
 80163cc:	d066      	beq.n	801649c <_scanf_float+0x1cc>
 80163ce:	d811      	bhi.n	80163f4 <_scanf_float+0x124>
 80163d0:	2b4e      	cmp	r3, #78	; 0x4e
 80163d2:	d1b5      	bne.n	8016340 <_scanf_float+0x70>
 80163d4:	2a00      	cmp	r2, #0
 80163d6:	d146      	bne.n	8016466 <_scanf_float+0x196>
 80163d8:	f1b9 0f00 	cmp.w	r9, #0
 80163dc:	d145      	bne.n	801646a <_scanf_float+0x19a>
 80163de:	6821      	ldr	r1, [r4, #0]
 80163e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80163e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80163e8:	d13f      	bne.n	801646a <_scanf_float+0x19a>
 80163ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80163ee:	6021      	str	r1, [r4, #0]
 80163f0:	2201      	movs	r2, #1
 80163f2:	e02e      	b.n	8016452 <_scanf_float+0x182>
 80163f4:	2b59      	cmp	r3, #89	; 0x59
 80163f6:	d01e      	beq.n	8016436 <_scanf_float+0x166>
 80163f8:	2b61      	cmp	r3, #97	; 0x61
 80163fa:	e7de      	b.n	80163ba <_scanf_float+0xea>
 80163fc:	2b6e      	cmp	r3, #110	; 0x6e
 80163fe:	d0e9      	beq.n	80163d4 <_scanf_float+0x104>
 8016400:	d815      	bhi.n	801642e <_scanf_float+0x15e>
 8016402:	2b66      	cmp	r3, #102	; 0x66
 8016404:	d043      	beq.n	801648e <_scanf_float+0x1be>
 8016406:	2b69      	cmp	r3, #105	; 0x69
 8016408:	d19a      	bne.n	8016340 <_scanf_float+0x70>
 801640a:	f1bb 0f00 	cmp.w	fp, #0
 801640e:	d138      	bne.n	8016482 <_scanf_float+0x1b2>
 8016410:	f1b9 0f00 	cmp.w	r9, #0
 8016414:	d197      	bne.n	8016346 <_scanf_float+0x76>
 8016416:	6821      	ldr	r1, [r4, #0]
 8016418:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801641c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016420:	d195      	bne.n	801634e <_scanf_float+0x7e>
 8016422:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016426:	6021      	str	r1, [r4, #0]
 8016428:	f04f 0b01 	mov.w	fp, #1
 801642c:	e011      	b.n	8016452 <_scanf_float+0x182>
 801642e:	2b74      	cmp	r3, #116	; 0x74
 8016430:	d034      	beq.n	801649c <_scanf_float+0x1cc>
 8016432:	2b79      	cmp	r3, #121	; 0x79
 8016434:	d184      	bne.n	8016340 <_scanf_float+0x70>
 8016436:	f1bb 0f07 	cmp.w	fp, #7
 801643a:	d181      	bne.n	8016340 <_scanf_float+0x70>
 801643c:	f04f 0b08 	mov.w	fp, #8
 8016440:	e007      	b.n	8016452 <_scanf_float+0x182>
 8016442:	eb12 0f0b 	cmn.w	r2, fp
 8016446:	f47f af7b 	bne.w	8016340 <_scanf_float+0x70>
 801644a:	6821      	ldr	r1, [r4, #0]
 801644c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016450:	6021      	str	r1, [r4, #0]
 8016452:	702b      	strb	r3, [r5, #0]
 8016454:	3501      	adds	r5, #1
 8016456:	e79a      	b.n	801638e <_scanf_float+0xbe>
 8016458:	6821      	ldr	r1, [r4, #0]
 801645a:	0608      	lsls	r0, r1, #24
 801645c:	f57f af70 	bpl.w	8016340 <_scanf_float+0x70>
 8016460:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016464:	e7f4      	b.n	8016450 <_scanf_float+0x180>
 8016466:	2a02      	cmp	r2, #2
 8016468:	d047      	beq.n	80164fa <_scanf_float+0x22a>
 801646a:	f1bb 0f01 	cmp.w	fp, #1
 801646e:	d003      	beq.n	8016478 <_scanf_float+0x1a8>
 8016470:	f1bb 0f04 	cmp.w	fp, #4
 8016474:	f47f af64 	bne.w	8016340 <_scanf_float+0x70>
 8016478:	f10b 0b01 	add.w	fp, fp, #1
 801647c:	fa5f fb8b 	uxtb.w	fp, fp
 8016480:	e7e7      	b.n	8016452 <_scanf_float+0x182>
 8016482:	f1bb 0f03 	cmp.w	fp, #3
 8016486:	d0f7      	beq.n	8016478 <_scanf_float+0x1a8>
 8016488:	f1bb 0f05 	cmp.w	fp, #5
 801648c:	e7f2      	b.n	8016474 <_scanf_float+0x1a4>
 801648e:	f1bb 0f02 	cmp.w	fp, #2
 8016492:	f47f af55 	bne.w	8016340 <_scanf_float+0x70>
 8016496:	f04f 0b03 	mov.w	fp, #3
 801649a:	e7da      	b.n	8016452 <_scanf_float+0x182>
 801649c:	f1bb 0f06 	cmp.w	fp, #6
 80164a0:	f47f af4e 	bne.w	8016340 <_scanf_float+0x70>
 80164a4:	f04f 0b07 	mov.w	fp, #7
 80164a8:	e7d3      	b.n	8016452 <_scanf_float+0x182>
 80164aa:	6821      	ldr	r1, [r4, #0]
 80164ac:	0588      	lsls	r0, r1, #22
 80164ae:	f57f af47 	bpl.w	8016340 <_scanf_float+0x70>
 80164b2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80164b6:	6021      	str	r1, [r4, #0]
 80164b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80164bc:	e7c9      	b.n	8016452 <_scanf_float+0x182>
 80164be:	6821      	ldr	r1, [r4, #0]
 80164c0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80164c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80164c8:	d006      	beq.n	80164d8 <_scanf_float+0x208>
 80164ca:	0548      	lsls	r0, r1, #21
 80164cc:	f57f af38 	bpl.w	8016340 <_scanf_float+0x70>
 80164d0:	f1b9 0f00 	cmp.w	r9, #0
 80164d4:	f43f af3b 	beq.w	801634e <_scanf_float+0x7e>
 80164d8:	0588      	lsls	r0, r1, #22
 80164da:	bf58      	it	pl
 80164dc:	9802      	ldrpl	r0, [sp, #8]
 80164de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80164e2:	bf58      	it	pl
 80164e4:	eba9 0000 	subpl.w	r0, r9, r0
 80164e8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80164ec:	bf58      	it	pl
 80164ee:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80164f2:	6021      	str	r1, [r4, #0]
 80164f4:	f04f 0900 	mov.w	r9, #0
 80164f8:	e7ab      	b.n	8016452 <_scanf_float+0x182>
 80164fa:	2203      	movs	r2, #3
 80164fc:	e7a9      	b.n	8016452 <_scanf_float+0x182>
 80164fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016502:	9205      	str	r2, [sp, #20]
 8016504:	4631      	mov	r1, r6
 8016506:	4638      	mov	r0, r7
 8016508:	4798      	blx	r3
 801650a:	9a05      	ldr	r2, [sp, #20]
 801650c:	2800      	cmp	r0, #0
 801650e:	f43f af04 	beq.w	801631a <_scanf_float+0x4a>
 8016512:	e715      	b.n	8016340 <_scanf_float+0x70>
 8016514:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016518:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801651c:	4632      	mov	r2, r6
 801651e:	4638      	mov	r0, r7
 8016520:	4798      	blx	r3
 8016522:	6923      	ldr	r3, [r4, #16]
 8016524:	3b01      	subs	r3, #1
 8016526:	6123      	str	r3, [r4, #16]
 8016528:	e715      	b.n	8016356 <_scanf_float+0x86>
 801652a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801652e:	2b06      	cmp	r3, #6
 8016530:	d80a      	bhi.n	8016548 <_scanf_float+0x278>
 8016532:	f1bb 0f02 	cmp.w	fp, #2
 8016536:	d968      	bls.n	801660a <_scanf_float+0x33a>
 8016538:	f1ab 0b03 	sub.w	fp, fp, #3
 801653c:	fa5f fb8b 	uxtb.w	fp, fp
 8016540:	eba5 0b0b 	sub.w	fp, r5, fp
 8016544:	455d      	cmp	r5, fp
 8016546:	d14b      	bne.n	80165e0 <_scanf_float+0x310>
 8016548:	6823      	ldr	r3, [r4, #0]
 801654a:	05da      	lsls	r2, r3, #23
 801654c:	d51f      	bpl.n	801658e <_scanf_float+0x2be>
 801654e:	055b      	lsls	r3, r3, #21
 8016550:	d468      	bmi.n	8016624 <_scanf_float+0x354>
 8016552:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016556:	6923      	ldr	r3, [r4, #16]
 8016558:	2965      	cmp	r1, #101	; 0x65
 801655a:	f103 33ff 	add.w	r3, r3, #4294967295
 801655e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016562:	6123      	str	r3, [r4, #16]
 8016564:	d00d      	beq.n	8016582 <_scanf_float+0x2b2>
 8016566:	2945      	cmp	r1, #69	; 0x45
 8016568:	d00b      	beq.n	8016582 <_scanf_float+0x2b2>
 801656a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801656e:	4632      	mov	r2, r6
 8016570:	4638      	mov	r0, r7
 8016572:	4798      	blx	r3
 8016574:	6923      	ldr	r3, [r4, #16]
 8016576:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801657a:	3b01      	subs	r3, #1
 801657c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016580:	6123      	str	r3, [r4, #16]
 8016582:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016586:	4632      	mov	r2, r6
 8016588:	4638      	mov	r0, r7
 801658a:	4798      	blx	r3
 801658c:	465d      	mov	r5, fp
 801658e:	6826      	ldr	r6, [r4, #0]
 8016590:	f016 0610 	ands.w	r6, r6, #16
 8016594:	d17a      	bne.n	801668c <_scanf_float+0x3bc>
 8016596:	702e      	strb	r6, [r5, #0]
 8016598:	6823      	ldr	r3, [r4, #0]
 801659a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801659e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80165a2:	d142      	bne.n	801662a <_scanf_float+0x35a>
 80165a4:	9b02      	ldr	r3, [sp, #8]
 80165a6:	eba9 0303 	sub.w	r3, r9, r3
 80165aa:	425a      	negs	r2, r3
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d149      	bne.n	8016644 <_scanf_float+0x374>
 80165b0:	2200      	movs	r2, #0
 80165b2:	4641      	mov	r1, r8
 80165b4:	4638      	mov	r0, r7
 80165b6:	f000 ff0b 	bl	80173d0 <_strtod_r>
 80165ba:	6825      	ldr	r5, [r4, #0]
 80165bc:	f8da 3000 	ldr.w	r3, [sl]
 80165c0:	f015 0f02 	tst.w	r5, #2
 80165c4:	f103 0204 	add.w	r2, r3, #4
 80165c8:	ec59 8b10 	vmov	r8, r9, d0
 80165cc:	f8ca 2000 	str.w	r2, [sl]
 80165d0:	d043      	beq.n	801665a <_scanf_float+0x38a>
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	e9c3 8900 	strd	r8, r9, [r3]
 80165d8:	68e3      	ldr	r3, [r4, #12]
 80165da:	3301      	adds	r3, #1
 80165dc:	60e3      	str	r3, [r4, #12]
 80165de:	e6be      	b.n	801635e <_scanf_float+0x8e>
 80165e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165e8:	4632      	mov	r2, r6
 80165ea:	4638      	mov	r0, r7
 80165ec:	4798      	blx	r3
 80165ee:	6923      	ldr	r3, [r4, #16]
 80165f0:	3b01      	subs	r3, #1
 80165f2:	6123      	str	r3, [r4, #16]
 80165f4:	e7a6      	b.n	8016544 <_scanf_float+0x274>
 80165f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165fa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165fe:	4632      	mov	r2, r6
 8016600:	4638      	mov	r0, r7
 8016602:	4798      	blx	r3
 8016604:	6923      	ldr	r3, [r4, #16]
 8016606:	3b01      	subs	r3, #1
 8016608:	6123      	str	r3, [r4, #16]
 801660a:	4545      	cmp	r5, r8
 801660c:	d8f3      	bhi.n	80165f6 <_scanf_float+0x326>
 801660e:	e6a5      	b.n	801635c <_scanf_float+0x8c>
 8016610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016614:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016618:	4632      	mov	r2, r6
 801661a:	4638      	mov	r0, r7
 801661c:	4798      	blx	r3
 801661e:	6923      	ldr	r3, [r4, #16]
 8016620:	3b01      	subs	r3, #1
 8016622:	6123      	str	r3, [r4, #16]
 8016624:	4545      	cmp	r5, r8
 8016626:	d8f3      	bhi.n	8016610 <_scanf_float+0x340>
 8016628:	e698      	b.n	801635c <_scanf_float+0x8c>
 801662a:	9b03      	ldr	r3, [sp, #12]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d0bf      	beq.n	80165b0 <_scanf_float+0x2e0>
 8016630:	9904      	ldr	r1, [sp, #16]
 8016632:	230a      	movs	r3, #10
 8016634:	4632      	mov	r2, r6
 8016636:	3101      	adds	r1, #1
 8016638:	4638      	mov	r0, r7
 801663a:	f000 ff55 	bl	80174e8 <_strtol_r>
 801663e:	9b03      	ldr	r3, [sp, #12]
 8016640:	9d04      	ldr	r5, [sp, #16]
 8016642:	1ac2      	subs	r2, r0, r3
 8016644:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016648:	429d      	cmp	r5, r3
 801664a:	bf28      	it	cs
 801664c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016650:	490f      	ldr	r1, [pc, #60]	; (8016690 <_scanf_float+0x3c0>)
 8016652:	4628      	mov	r0, r5
 8016654:	f000 f858 	bl	8016708 <siprintf>
 8016658:	e7aa      	b.n	80165b0 <_scanf_float+0x2e0>
 801665a:	f015 0504 	ands.w	r5, r5, #4
 801665e:	d1b8      	bne.n	80165d2 <_scanf_float+0x302>
 8016660:	681f      	ldr	r7, [r3, #0]
 8016662:	ee10 2a10 	vmov	r2, s0
 8016666:	464b      	mov	r3, r9
 8016668:	ee10 0a10 	vmov	r0, s0
 801666c:	4649      	mov	r1, r9
 801666e:	f7ea fa75 	bl	8000b5c <__aeabi_dcmpun>
 8016672:	b128      	cbz	r0, 8016680 <_scanf_float+0x3b0>
 8016674:	4628      	mov	r0, r5
 8016676:	f000 f80d 	bl	8016694 <nanf>
 801667a:	ed87 0a00 	vstr	s0, [r7]
 801667e:	e7ab      	b.n	80165d8 <_scanf_float+0x308>
 8016680:	4640      	mov	r0, r8
 8016682:	4649      	mov	r1, r9
 8016684:	f7ea fac8 	bl	8000c18 <__aeabi_d2f>
 8016688:	6038      	str	r0, [r7, #0]
 801668a:	e7a5      	b.n	80165d8 <_scanf_float+0x308>
 801668c:	2600      	movs	r6, #0
 801668e:	e666      	b.n	801635e <_scanf_float+0x8e>
 8016690:	0801a4d2 	.word	0x0801a4d2

08016694 <nanf>:
 8016694:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801669c <nanf+0x8>
 8016698:	4770      	bx	lr
 801669a:	bf00      	nop
 801669c:	7fc00000 	.word	0x7fc00000

080166a0 <sniprintf>:
 80166a0:	b40c      	push	{r2, r3}
 80166a2:	b530      	push	{r4, r5, lr}
 80166a4:	4b17      	ldr	r3, [pc, #92]	; (8016704 <sniprintf+0x64>)
 80166a6:	1e0c      	subs	r4, r1, #0
 80166a8:	b09d      	sub	sp, #116	; 0x74
 80166aa:	681d      	ldr	r5, [r3, #0]
 80166ac:	da08      	bge.n	80166c0 <sniprintf+0x20>
 80166ae:	238b      	movs	r3, #139	; 0x8b
 80166b0:	602b      	str	r3, [r5, #0]
 80166b2:	f04f 30ff 	mov.w	r0, #4294967295
 80166b6:	b01d      	add	sp, #116	; 0x74
 80166b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166bc:	b002      	add	sp, #8
 80166be:	4770      	bx	lr
 80166c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80166c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80166c8:	bf14      	ite	ne
 80166ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80166ce:	4623      	moveq	r3, r4
 80166d0:	9304      	str	r3, [sp, #16]
 80166d2:	9307      	str	r3, [sp, #28]
 80166d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166d8:	9002      	str	r0, [sp, #8]
 80166da:	9006      	str	r0, [sp, #24]
 80166dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80166e2:	ab21      	add	r3, sp, #132	; 0x84
 80166e4:	a902      	add	r1, sp, #8
 80166e6:	4628      	mov	r0, r5
 80166e8:	9301      	str	r3, [sp, #4]
 80166ea:	f002 fdf1 	bl	80192d0 <_svfiprintf_r>
 80166ee:	1c43      	adds	r3, r0, #1
 80166f0:	bfbc      	itt	lt
 80166f2:	238b      	movlt	r3, #139	; 0x8b
 80166f4:	602b      	strlt	r3, [r5, #0]
 80166f6:	2c00      	cmp	r4, #0
 80166f8:	d0dd      	beq.n	80166b6 <sniprintf+0x16>
 80166fa:	9b02      	ldr	r3, [sp, #8]
 80166fc:	2200      	movs	r2, #0
 80166fe:	701a      	strb	r2, [r3, #0]
 8016700:	e7d9      	b.n	80166b6 <sniprintf+0x16>
 8016702:	bf00      	nop
 8016704:	2000000c 	.word	0x2000000c

08016708 <siprintf>:
 8016708:	b40e      	push	{r1, r2, r3}
 801670a:	b500      	push	{lr}
 801670c:	b09c      	sub	sp, #112	; 0x70
 801670e:	ab1d      	add	r3, sp, #116	; 0x74
 8016710:	9002      	str	r0, [sp, #8]
 8016712:	9006      	str	r0, [sp, #24]
 8016714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016718:	4809      	ldr	r0, [pc, #36]	; (8016740 <siprintf+0x38>)
 801671a:	9107      	str	r1, [sp, #28]
 801671c:	9104      	str	r1, [sp, #16]
 801671e:	4909      	ldr	r1, [pc, #36]	; (8016744 <siprintf+0x3c>)
 8016720:	f853 2b04 	ldr.w	r2, [r3], #4
 8016724:	9105      	str	r1, [sp, #20]
 8016726:	6800      	ldr	r0, [r0, #0]
 8016728:	9301      	str	r3, [sp, #4]
 801672a:	a902      	add	r1, sp, #8
 801672c:	f002 fdd0 	bl	80192d0 <_svfiprintf_r>
 8016730:	9b02      	ldr	r3, [sp, #8]
 8016732:	2200      	movs	r2, #0
 8016734:	701a      	strb	r2, [r3, #0]
 8016736:	b01c      	add	sp, #112	; 0x70
 8016738:	f85d eb04 	ldr.w	lr, [sp], #4
 801673c:	b003      	add	sp, #12
 801673e:	4770      	bx	lr
 8016740:	2000000c 	.word	0x2000000c
 8016744:	ffff0208 	.word	0xffff0208

08016748 <siscanf>:
 8016748:	b40e      	push	{r1, r2, r3}
 801674a:	b530      	push	{r4, r5, lr}
 801674c:	b09c      	sub	sp, #112	; 0x70
 801674e:	ac1f      	add	r4, sp, #124	; 0x7c
 8016750:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016754:	f854 5b04 	ldr.w	r5, [r4], #4
 8016758:	f8ad 2014 	strh.w	r2, [sp, #20]
 801675c:	9002      	str	r0, [sp, #8]
 801675e:	9006      	str	r0, [sp, #24]
 8016760:	f7e9 fd4e 	bl	8000200 <strlen>
 8016764:	4b0b      	ldr	r3, [pc, #44]	; (8016794 <siscanf+0x4c>)
 8016766:	9003      	str	r0, [sp, #12]
 8016768:	9007      	str	r0, [sp, #28]
 801676a:	930b      	str	r3, [sp, #44]	; 0x2c
 801676c:	480a      	ldr	r0, [pc, #40]	; (8016798 <siscanf+0x50>)
 801676e:	9401      	str	r4, [sp, #4]
 8016770:	2300      	movs	r3, #0
 8016772:	930f      	str	r3, [sp, #60]	; 0x3c
 8016774:	9314      	str	r3, [sp, #80]	; 0x50
 8016776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801677a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801677e:	462a      	mov	r2, r5
 8016780:	4623      	mov	r3, r4
 8016782:	a902      	add	r1, sp, #8
 8016784:	6800      	ldr	r0, [r0, #0]
 8016786:	f002 fef5 	bl	8019574 <__ssvfiscanf_r>
 801678a:	b01c      	add	sp, #112	; 0x70
 801678c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016790:	b003      	add	sp, #12
 8016792:	4770      	bx	lr
 8016794:	0801679d 	.word	0x0801679d
 8016798:	2000000c 	.word	0x2000000c

0801679c <__seofread>:
 801679c:	2000      	movs	r0, #0
 801679e:	4770      	bx	lr

080167a0 <strcpy>:
 80167a0:	4603      	mov	r3, r0
 80167a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80167a6:	f803 2b01 	strb.w	r2, [r3], #1
 80167aa:	2a00      	cmp	r2, #0
 80167ac:	d1f9      	bne.n	80167a2 <strcpy+0x2>
 80167ae:	4770      	bx	lr

080167b0 <sulp>:
 80167b0:	b570      	push	{r4, r5, r6, lr}
 80167b2:	4604      	mov	r4, r0
 80167b4:	460d      	mov	r5, r1
 80167b6:	ec45 4b10 	vmov	d0, r4, r5
 80167ba:	4616      	mov	r6, r2
 80167bc:	f002 fb44 	bl	8018e48 <__ulp>
 80167c0:	ec51 0b10 	vmov	r0, r1, d0
 80167c4:	b17e      	cbz	r6, 80167e6 <sulp+0x36>
 80167c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80167ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	dd09      	ble.n	80167e6 <sulp+0x36>
 80167d2:	051b      	lsls	r3, r3, #20
 80167d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80167d8:	2400      	movs	r4, #0
 80167da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80167de:	4622      	mov	r2, r4
 80167e0:	462b      	mov	r3, r5
 80167e2:	f7e9 ff21 	bl	8000628 <__aeabi_dmul>
 80167e6:	bd70      	pop	{r4, r5, r6, pc}

080167e8 <_strtod_l>:
 80167e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ec:	461f      	mov	r7, r3
 80167ee:	b0a1      	sub	sp, #132	; 0x84
 80167f0:	2300      	movs	r3, #0
 80167f2:	4681      	mov	r9, r0
 80167f4:	4638      	mov	r0, r7
 80167f6:	460e      	mov	r6, r1
 80167f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80167fa:	931c      	str	r3, [sp, #112]	; 0x70
 80167fc:	f002 f824 	bl	8018848 <__localeconv_l>
 8016800:	4680      	mov	r8, r0
 8016802:	6800      	ldr	r0, [r0, #0]
 8016804:	f7e9 fcfc 	bl	8000200 <strlen>
 8016808:	f04f 0a00 	mov.w	sl, #0
 801680c:	4604      	mov	r4, r0
 801680e:	f04f 0b00 	mov.w	fp, #0
 8016812:	961b      	str	r6, [sp, #108]	; 0x6c
 8016814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016816:	781a      	ldrb	r2, [r3, #0]
 8016818:	2a0d      	cmp	r2, #13
 801681a:	d832      	bhi.n	8016882 <_strtod_l+0x9a>
 801681c:	2a09      	cmp	r2, #9
 801681e:	d236      	bcs.n	801688e <_strtod_l+0xa6>
 8016820:	2a00      	cmp	r2, #0
 8016822:	d03e      	beq.n	80168a2 <_strtod_l+0xba>
 8016824:	2300      	movs	r3, #0
 8016826:	930d      	str	r3, [sp, #52]	; 0x34
 8016828:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801682a:	782b      	ldrb	r3, [r5, #0]
 801682c:	2b30      	cmp	r3, #48	; 0x30
 801682e:	f040 80ac 	bne.w	801698a <_strtod_l+0x1a2>
 8016832:	786b      	ldrb	r3, [r5, #1]
 8016834:	2b58      	cmp	r3, #88	; 0x58
 8016836:	d001      	beq.n	801683c <_strtod_l+0x54>
 8016838:	2b78      	cmp	r3, #120	; 0x78
 801683a:	d167      	bne.n	801690c <_strtod_l+0x124>
 801683c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801683e:	9301      	str	r3, [sp, #4]
 8016840:	ab1c      	add	r3, sp, #112	; 0x70
 8016842:	9300      	str	r3, [sp, #0]
 8016844:	9702      	str	r7, [sp, #8]
 8016846:	ab1d      	add	r3, sp, #116	; 0x74
 8016848:	4a88      	ldr	r2, [pc, #544]	; (8016a6c <_strtod_l+0x284>)
 801684a:	a91b      	add	r1, sp, #108	; 0x6c
 801684c:	4648      	mov	r0, r9
 801684e:	f001 fd12 	bl	8018276 <__gethex>
 8016852:	f010 0407 	ands.w	r4, r0, #7
 8016856:	4606      	mov	r6, r0
 8016858:	d005      	beq.n	8016866 <_strtod_l+0x7e>
 801685a:	2c06      	cmp	r4, #6
 801685c:	d12b      	bne.n	80168b6 <_strtod_l+0xce>
 801685e:	3501      	adds	r5, #1
 8016860:	2300      	movs	r3, #0
 8016862:	951b      	str	r5, [sp, #108]	; 0x6c
 8016864:	930d      	str	r3, [sp, #52]	; 0x34
 8016866:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016868:	2b00      	cmp	r3, #0
 801686a:	f040 859a 	bne.w	80173a2 <_strtod_l+0xbba>
 801686e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016870:	b1e3      	cbz	r3, 80168ac <_strtod_l+0xc4>
 8016872:	4652      	mov	r2, sl
 8016874:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016878:	ec43 2b10 	vmov	d0, r2, r3
 801687c:	b021      	add	sp, #132	; 0x84
 801687e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016882:	2a2b      	cmp	r2, #43	; 0x2b
 8016884:	d015      	beq.n	80168b2 <_strtod_l+0xca>
 8016886:	2a2d      	cmp	r2, #45	; 0x2d
 8016888:	d004      	beq.n	8016894 <_strtod_l+0xac>
 801688a:	2a20      	cmp	r2, #32
 801688c:	d1ca      	bne.n	8016824 <_strtod_l+0x3c>
 801688e:	3301      	adds	r3, #1
 8016890:	931b      	str	r3, [sp, #108]	; 0x6c
 8016892:	e7bf      	b.n	8016814 <_strtod_l+0x2c>
 8016894:	2201      	movs	r2, #1
 8016896:	920d      	str	r2, [sp, #52]	; 0x34
 8016898:	1c5a      	adds	r2, r3, #1
 801689a:	921b      	str	r2, [sp, #108]	; 0x6c
 801689c:	785b      	ldrb	r3, [r3, #1]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d1c2      	bne.n	8016828 <_strtod_l+0x40>
 80168a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80168a4:	961b      	str	r6, [sp, #108]	; 0x6c
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	f040 8579 	bne.w	801739e <_strtod_l+0xbb6>
 80168ac:	4652      	mov	r2, sl
 80168ae:	465b      	mov	r3, fp
 80168b0:	e7e2      	b.n	8016878 <_strtod_l+0x90>
 80168b2:	2200      	movs	r2, #0
 80168b4:	e7ef      	b.n	8016896 <_strtod_l+0xae>
 80168b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80168b8:	b13a      	cbz	r2, 80168ca <_strtod_l+0xe2>
 80168ba:	2135      	movs	r1, #53	; 0x35
 80168bc:	a81e      	add	r0, sp, #120	; 0x78
 80168be:	f002 fbbb 	bl	8019038 <__copybits>
 80168c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80168c4:	4648      	mov	r0, r9
 80168c6:	f002 f828 	bl	801891a <_Bfree>
 80168ca:	3c01      	subs	r4, #1
 80168cc:	2c04      	cmp	r4, #4
 80168ce:	d806      	bhi.n	80168de <_strtod_l+0xf6>
 80168d0:	e8df f004 	tbb	[pc, r4]
 80168d4:	1714030a 	.word	0x1714030a
 80168d8:	0a          	.byte	0x0a
 80168d9:	00          	.byte	0x00
 80168da:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80168de:	0730      	lsls	r0, r6, #28
 80168e0:	d5c1      	bpl.n	8016866 <_strtod_l+0x7e>
 80168e2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80168e6:	e7be      	b.n	8016866 <_strtod_l+0x7e>
 80168e8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80168ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80168ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80168f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80168f6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80168fa:	e7f0      	b.n	80168de <_strtod_l+0xf6>
 80168fc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016a70 <_strtod_l+0x288>
 8016900:	e7ed      	b.n	80168de <_strtod_l+0xf6>
 8016902:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016906:	f04f 3aff 	mov.w	sl, #4294967295
 801690a:	e7e8      	b.n	80168de <_strtod_l+0xf6>
 801690c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801690e:	1c5a      	adds	r2, r3, #1
 8016910:	921b      	str	r2, [sp, #108]	; 0x6c
 8016912:	785b      	ldrb	r3, [r3, #1]
 8016914:	2b30      	cmp	r3, #48	; 0x30
 8016916:	d0f9      	beq.n	801690c <_strtod_l+0x124>
 8016918:	2b00      	cmp	r3, #0
 801691a:	d0a4      	beq.n	8016866 <_strtod_l+0x7e>
 801691c:	2301      	movs	r3, #1
 801691e:	2500      	movs	r5, #0
 8016920:	9306      	str	r3, [sp, #24]
 8016922:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016924:	9308      	str	r3, [sp, #32]
 8016926:	9507      	str	r5, [sp, #28]
 8016928:	9505      	str	r5, [sp, #20]
 801692a:	220a      	movs	r2, #10
 801692c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801692e:	7807      	ldrb	r7, [r0, #0]
 8016930:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016934:	b2d9      	uxtb	r1, r3
 8016936:	2909      	cmp	r1, #9
 8016938:	d929      	bls.n	801698e <_strtod_l+0x1a6>
 801693a:	4622      	mov	r2, r4
 801693c:	f8d8 1000 	ldr.w	r1, [r8]
 8016940:	f003 f902 	bl	8019b48 <strncmp>
 8016944:	2800      	cmp	r0, #0
 8016946:	d031      	beq.n	80169ac <_strtod_l+0x1c4>
 8016948:	2000      	movs	r0, #0
 801694a:	9c05      	ldr	r4, [sp, #20]
 801694c:	9004      	str	r0, [sp, #16]
 801694e:	463b      	mov	r3, r7
 8016950:	4602      	mov	r2, r0
 8016952:	2b65      	cmp	r3, #101	; 0x65
 8016954:	d001      	beq.n	801695a <_strtod_l+0x172>
 8016956:	2b45      	cmp	r3, #69	; 0x45
 8016958:	d114      	bne.n	8016984 <_strtod_l+0x19c>
 801695a:	b924      	cbnz	r4, 8016966 <_strtod_l+0x17e>
 801695c:	b910      	cbnz	r0, 8016964 <_strtod_l+0x17c>
 801695e:	9b06      	ldr	r3, [sp, #24]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d09e      	beq.n	80168a2 <_strtod_l+0xba>
 8016964:	2400      	movs	r4, #0
 8016966:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016968:	1c73      	adds	r3, r6, #1
 801696a:	931b      	str	r3, [sp, #108]	; 0x6c
 801696c:	7873      	ldrb	r3, [r6, #1]
 801696e:	2b2b      	cmp	r3, #43	; 0x2b
 8016970:	d078      	beq.n	8016a64 <_strtod_l+0x27c>
 8016972:	2b2d      	cmp	r3, #45	; 0x2d
 8016974:	d070      	beq.n	8016a58 <_strtod_l+0x270>
 8016976:	f04f 0c00 	mov.w	ip, #0
 801697a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801697e:	2f09      	cmp	r7, #9
 8016980:	d97c      	bls.n	8016a7c <_strtod_l+0x294>
 8016982:	961b      	str	r6, [sp, #108]	; 0x6c
 8016984:	f04f 0e00 	mov.w	lr, #0
 8016988:	e09a      	b.n	8016ac0 <_strtod_l+0x2d8>
 801698a:	2300      	movs	r3, #0
 801698c:	e7c7      	b.n	801691e <_strtod_l+0x136>
 801698e:	9905      	ldr	r1, [sp, #20]
 8016990:	2908      	cmp	r1, #8
 8016992:	bfdd      	ittte	le
 8016994:	9907      	ldrle	r1, [sp, #28]
 8016996:	fb02 3301 	mlale	r3, r2, r1, r3
 801699a:	9307      	strle	r3, [sp, #28]
 801699c:	fb02 3505 	mlagt	r5, r2, r5, r3
 80169a0:	9b05      	ldr	r3, [sp, #20]
 80169a2:	3001      	adds	r0, #1
 80169a4:	3301      	adds	r3, #1
 80169a6:	9305      	str	r3, [sp, #20]
 80169a8:	901b      	str	r0, [sp, #108]	; 0x6c
 80169aa:	e7bf      	b.n	801692c <_strtod_l+0x144>
 80169ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169ae:	191a      	adds	r2, r3, r4
 80169b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80169b2:	9a05      	ldr	r2, [sp, #20]
 80169b4:	5d1b      	ldrb	r3, [r3, r4]
 80169b6:	2a00      	cmp	r2, #0
 80169b8:	d037      	beq.n	8016a2a <_strtod_l+0x242>
 80169ba:	9c05      	ldr	r4, [sp, #20]
 80169bc:	4602      	mov	r2, r0
 80169be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80169c2:	2909      	cmp	r1, #9
 80169c4:	d913      	bls.n	80169ee <_strtod_l+0x206>
 80169c6:	2101      	movs	r1, #1
 80169c8:	9104      	str	r1, [sp, #16]
 80169ca:	e7c2      	b.n	8016952 <_strtod_l+0x16a>
 80169cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169ce:	1c5a      	adds	r2, r3, #1
 80169d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80169d2:	785b      	ldrb	r3, [r3, #1]
 80169d4:	3001      	adds	r0, #1
 80169d6:	2b30      	cmp	r3, #48	; 0x30
 80169d8:	d0f8      	beq.n	80169cc <_strtod_l+0x1e4>
 80169da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80169de:	2a08      	cmp	r2, #8
 80169e0:	f200 84e4 	bhi.w	80173ac <_strtod_l+0xbc4>
 80169e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80169e6:	9208      	str	r2, [sp, #32]
 80169e8:	4602      	mov	r2, r0
 80169ea:	2000      	movs	r0, #0
 80169ec:	4604      	mov	r4, r0
 80169ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80169f2:	f100 0101 	add.w	r1, r0, #1
 80169f6:	d012      	beq.n	8016a1e <_strtod_l+0x236>
 80169f8:	440a      	add	r2, r1
 80169fa:	eb00 0c04 	add.w	ip, r0, r4
 80169fe:	4621      	mov	r1, r4
 8016a00:	270a      	movs	r7, #10
 8016a02:	458c      	cmp	ip, r1
 8016a04:	d113      	bne.n	8016a2e <_strtod_l+0x246>
 8016a06:	1821      	adds	r1, r4, r0
 8016a08:	2908      	cmp	r1, #8
 8016a0a:	f104 0401 	add.w	r4, r4, #1
 8016a0e:	4404      	add	r4, r0
 8016a10:	dc19      	bgt.n	8016a46 <_strtod_l+0x25e>
 8016a12:	9b07      	ldr	r3, [sp, #28]
 8016a14:	210a      	movs	r1, #10
 8016a16:	fb01 e303 	mla	r3, r1, r3, lr
 8016a1a:	9307      	str	r3, [sp, #28]
 8016a1c:	2100      	movs	r1, #0
 8016a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a20:	1c58      	adds	r0, r3, #1
 8016a22:	901b      	str	r0, [sp, #108]	; 0x6c
 8016a24:	785b      	ldrb	r3, [r3, #1]
 8016a26:	4608      	mov	r0, r1
 8016a28:	e7c9      	b.n	80169be <_strtod_l+0x1d6>
 8016a2a:	9805      	ldr	r0, [sp, #20]
 8016a2c:	e7d3      	b.n	80169d6 <_strtod_l+0x1ee>
 8016a2e:	2908      	cmp	r1, #8
 8016a30:	f101 0101 	add.w	r1, r1, #1
 8016a34:	dc03      	bgt.n	8016a3e <_strtod_l+0x256>
 8016a36:	9b07      	ldr	r3, [sp, #28]
 8016a38:	437b      	muls	r3, r7
 8016a3a:	9307      	str	r3, [sp, #28]
 8016a3c:	e7e1      	b.n	8016a02 <_strtod_l+0x21a>
 8016a3e:	2910      	cmp	r1, #16
 8016a40:	bfd8      	it	le
 8016a42:	437d      	mulle	r5, r7
 8016a44:	e7dd      	b.n	8016a02 <_strtod_l+0x21a>
 8016a46:	2c10      	cmp	r4, #16
 8016a48:	bfdc      	itt	le
 8016a4a:	210a      	movle	r1, #10
 8016a4c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016a50:	e7e4      	b.n	8016a1c <_strtod_l+0x234>
 8016a52:	2301      	movs	r3, #1
 8016a54:	9304      	str	r3, [sp, #16]
 8016a56:	e781      	b.n	801695c <_strtod_l+0x174>
 8016a58:	f04f 0c01 	mov.w	ip, #1
 8016a5c:	1cb3      	adds	r3, r6, #2
 8016a5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a60:	78b3      	ldrb	r3, [r6, #2]
 8016a62:	e78a      	b.n	801697a <_strtod_l+0x192>
 8016a64:	f04f 0c00 	mov.w	ip, #0
 8016a68:	e7f8      	b.n	8016a5c <_strtod_l+0x274>
 8016a6a:	bf00      	nop
 8016a6c:	0801a4d8 	.word	0x0801a4d8
 8016a70:	7ff00000 	.word	0x7ff00000
 8016a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a76:	1c5f      	adds	r7, r3, #1
 8016a78:	971b      	str	r7, [sp, #108]	; 0x6c
 8016a7a:	785b      	ldrb	r3, [r3, #1]
 8016a7c:	2b30      	cmp	r3, #48	; 0x30
 8016a7e:	d0f9      	beq.n	8016a74 <_strtod_l+0x28c>
 8016a80:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016a84:	2f08      	cmp	r7, #8
 8016a86:	f63f af7d 	bhi.w	8016984 <_strtod_l+0x19c>
 8016a8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016a8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a90:	930a      	str	r3, [sp, #40]	; 0x28
 8016a92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a94:	1c5f      	adds	r7, r3, #1
 8016a96:	971b      	str	r7, [sp, #108]	; 0x6c
 8016a98:	785b      	ldrb	r3, [r3, #1]
 8016a9a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016a9e:	f1b8 0f09 	cmp.w	r8, #9
 8016aa2:	d937      	bls.n	8016b14 <_strtod_l+0x32c>
 8016aa4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016aa6:	1a7f      	subs	r7, r7, r1
 8016aa8:	2f08      	cmp	r7, #8
 8016aaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016aae:	dc37      	bgt.n	8016b20 <_strtod_l+0x338>
 8016ab0:	45be      	cmp	lr, r7
 8016ab2:	bfa8      	it	ge
 8016ab4:	46be      	movge	lr, r7
 8016ab6:	f1bc 0f00 	cmp.w	ip, #0
 8016aba:	d001      	beq.n	8016ac0 <_strtod_l+0x2d8>
 8016abc:	f1ce 0e00 	rsb	lr, lr, #0
 8016ac0:	2c00      	cmp	r4, #0
 8016ac2:	d151      	bne.n	8016b68 <_strtod_l+0x380>
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	f47f aece 	bne.w	8016866 <_strtod_l+0x7e>
 8016aca:	9a06      	ldr	r2, [sp, #24]
 8016acc:	2a00      	cmp	r2, #0
 8016ace:	f47f aeca 	bne.w	8016866 <_strtod_l+0x7e>
 8016ad2:	9a04      	ldr	r2, [sp, #16]
 8016ad4:	2a00      	cmp	r2, #0
 8016ad6:	f47f aee4 	bne.w	80168a2 <_strtod_l+0xba>
 8016ada:	2b4e      	cmp	r3, #78	; 0x4e
 8016adc:	d027      	beq.n	8016b2e <_strtod_l+0x346>
 8016ade:	dc21      	bgt.n	8016b24 <_strtod_l+0x33c>
 8016ae0:	2b49      	cmp	r3, #73	; 0x49
 8016ae2:	f47f aede 	bne.w	80168a2 <_strtod_l+0xba>
 8016ae6:	49a0      	ldr	r1, [pc, #640]	; (8016d68 <_strtod_l+0x580>)
 8016ae8:	a81b      	add	r0, sp, #108	; 0x6c
 8016aea:	f001 fdf7 	bl	80186dc <__match>
 8016aee:	2800      	cmp	r0, #0
 8016af0:	f43f aed7 	beq.w	80168a2 <_strtod_l+0xba>
 8016af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016af6:	499d      	ldr	r1, [pc, #628]	; (8016d6c <_strtod_l+0x584>)
 8016af8:	3b01      	subs	r3, #1
 8016afa:	a81b      	add	r0, sp, #108	; 0x6c
 8016afc:	931b      	str	r3, [sp, #108]	; 0x6c
 8016afe:	f001 fded 	bl	80186dc <__match>
 8016b02:	b910      	cbnz	r0, 8016b0a <_strtod_l+0x322>
 8016b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b06:	3301      	adds	r3, #1
 8016b08:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b0a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016d80 <_strtod_l+0x598>
 8016b0e:	f04f 0a00 	mov.w	sl, #0
 8016b12:	e6a8      	b.n	8016866 <_strtod_l+0x7e>
 8016b14:	210a      	movs	r1, #10
 8016b16:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016b1a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016b1e:	e7b8      	b.n	8016a92 <_strtod_l+0x2aa>
 8016b20:	46be      	mov	lr, r7
 8016b22:	e7c8      	b.n	8016ab6 <_strtod_l+0x2ce>
 8016b24:	2b69      	cmp	r3, #105	; 0x69
 8016b26:	d0de      	beq.n	8016ae6 <_strtod_l+0x2fe>
 8016b28:	2b6e      	cmp	r3, #110	; 0x6e
 8016b2a:	f47f aeba 	bne.w	80168a2 <_strtod_l+0xba>
 8016b2e:	4990      	ldr	r1, [pc, #576]	; (8016d70 <_strtod_l+0x588>)
 8016b30:	a81b      	add	r0, sp, #108	; 0x6c
 8016b32:	f001 fdd3 	bl	80186dc <__match>
 8016b36:	2800      	cmp	r0, #0
 8016b38:	f43f aeb3 	beq.w	80168a2 <_strtod_l+0xba>
 8016b3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	2b28      	cmp	r3, #40	; 0x28
 8016b42:	d10e      	bne.n	8016b62 <_strtod_l+0x37a>
 8016b44:	aa1e      	add	r2, sp, #120	; 0x78
 8016b46:	498b      	ldr	r1, [pc, #556]	; (8016d74 <_strtod_l+0x58c>)
 8016b48:	a81b      	add	r0, sp, #108	; 0x6c
 8016b4a:	f001 fddb 	bl	8018704 <__hexnan>
 8016b4e:	2805      	cmp	r0, #5
 8016b50:	d107      	bne.n	8016b62 <_strtod_l+0x37a>
 8016b52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016b54:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016b58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016b5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016b60:	e681      	b.n	8016866 <_strtod_l+0x7e>
 8016b62:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016d88 <_strtod_l+0x5a0>
 8016b66:	e7d2      	b.n	8016b0e <_strtod_l+0x326>
 8016b68:	ebae 0302 	sub.w	r3, lr, r2
 8016b6c:	9306      	str	r3, [sp, #24]
 8016b6e:	9b05      	ldr	r3, [sp, #20]
 8016b70:	9807      	ldr	r0, [sp, #28]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	bf08      	it	eq
 8016b76:	4623      	moveq	r3, r4
 8016b78:	2c10      	cmp	r4, #16
 8016b7a:	9305      	str	r3, [sp, #20]
 8016b7c:	46a0      	mov	r8, r4
 8016b7e:	bfa8      	it	ge
 8016b80:	f04f 0810 	movge.w	r8, #16
 8016b84:	f7e9 fcd6 	bl	8000534 <__aeabi_ui2d>
 8016b88:	2c09      	cmp	r4, #9
 8016b8a:	4682      	mov	sl, r0
 8016b8c:	468b      	mov	fp, r1
 8016b8e:	dc13      	bgt.n	8016bb8 <_strtod_l+0x3d0>
 8016b90:	9b06      	ldr	r3, [sp, #24]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	f43f ae67 	beq.w	8016866 <_strtod_l+0x7e>
 8016b98:	9b06      	ldr	r3, [sp, #24]
 8016b9a:	dd7a      	ble.n	8016c92 <_strtod_l+0x4aa>
 8016b9c:	2b16      	cmp	r3, #22
 8016b9e:	dc61      	bgt.n	8016c64 <_strtod_l+0x47c>
 8016ba0:	4a75      	ldr	r2, [pc, #468]	; (8016d78 <_strtod_l+0x590>)
 8016ba2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016ba6:	e9de 0100 	ldrd	r0, r1, [lr]
 8016baa:	4652      	mov	r2, sl
 8016bac:	465b      	mov	r3, fp
 8016bae:	f7e9 fd3b 	bl	8000628 <__aeabi_dmul>
 8016bb2:	4682      	mov	sl, r0
 8016bb4:	468b      	mov	fp, r1
 8016bb6:	e656      	b.n	8016866 <_strtod_l+0x7e>
 8016bb8:	4b6f      	ldr	r3, [pc, #444]	; (8016d78 <_strtod_l+0x590>)
 8016bba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016bbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016bc2:	f7e9 fd31 	bl	8000628 <__aeabi_dmul>
 8016bc6:	4606      	mov	r6, r0
 8016bc8:	4628      	mov	r0, r5
 8016bca:	460f      	mov	r7, r1
 8016bcc:	f7e9 fcb2 	bl	8000534 <__aeabi_ui2d>
 8016bd0:	4602      	mov	r2, r0
 8016bd2:	460b      	mov	r3, r1
 8016bd4:	4630      	mov	r0, r6
 8016bd6:	4639      	mov	r1, r7
 8016bd8:	f7e9 fb70 	bl	80002bc <__adddf3>
 8016bdc:	2c0f      	cmp	r4, #15
 8016bde:	4682      	mov	sl, r0
 8016be0:	468b      	mov	fp, r1
 8016be2:	ddd5      	ble.n	8016b90 <_strtod_l+0x3a8>
 8016be4:	9b06      	ldr	r3, [sp, #24]
 8016be6:	eba4 0808 	sub.w	r8, r4, r8
 8016bea:	4498      	add	r8, r3
 8016bec:	f1b8 0f00 	cmp.w	r8, #0
 8016bf0:	f340 8096 	ble.w	8016d20 <_strtod_l+0x538>
 8016bf4:	f018 030f 	ands.w	r3, r8, #15
 8016bf8:	d00a      	beq.n	8016c10 <_strtod_l+0x428>
 8016bfa:	495f      	ldr	r1, [pc, #380]	; (8016d78 <_strtod_l+0x590>)
 8016bfc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016c00:	4652      	mov	r2, sl
 8016c02:	465b      	mov	r3, fp
 8016c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c08:	f7e9 fd0e 	bl	8000628 <__aeabi_dmul>
 8016c0c:	4682      	mov	sl, r0
 8016c0e:	468b      	mov	fp, r1
 8016c10:	f038 080f 	bics.w	r8, r8, #15
 8016c14:	d073      	beq.n	8016cfe <_strtod_l+0x516>
 8016c16:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016c1a:	dd47      	ble.n	8016cac <_strtod_l+0x4c4>
 8016c1c:	2400      	movs	r4, #0
 8016c1e:	46a0      	mov	r8, r4
 8016c20:	9407      	str	r4, [sp, #28]
 8016c22:	9405      	str	r4, [sp, #20]
 8016c24:	2322      	movs	r3, #34	; 0x22
 8016c26:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016d80 <_strtod_l+0x598>
 8016c2a:	f8c9 3000 	str.w	r3, [r9]
 8016c2e:	f04f 0a00 	mov.w	sl, #0
 8016c32:	9b07      	ldr	r3, [sp, #28]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	f43f ae16 	beq.w	8016866 <_strtod_l+0x7e>
 8016c3a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016c3c:	4648      	mov	r0, r9
 8016c3e:	f001 fe6c 	bl	801891a <_Bfree>
 8016c42:	9905      	ldr	r1, [sp, #20]
 8016c44:	4648      	mov	r0, r9
 8016c46:	f001 fe68 	bl	801891a <_Bfree>
 8016c4a:	4641      	mov	r1, r8
 8016c4c:	4648      	mov	r0, r9
 8016c4e:	f001 fe64 	bl	801891a <_Bfree>
 8016c52:	9907      	ldr	r1, [sp, #28]
 8016c54:	4648      	mov	r0, r9
 8016c56:	f001 fe60 	bl	801891a <_Bfree>
 8016c5a:	4621      	mov	r1, r4
 8016c5c:	4648      	mov	r0, r9
 8016c5e:	f001 fe5c 	bl	801891a <_Bfree>
 8016c62:	e600      	b.n	8016866 <_strtod_l+0x7e>
 8016c64:	9a06      	ldr	r2, [sp, #24]
 8016c66:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016c6a:	4293      	cmp	r3, r2
 8016c6c:	dbba      	blt.n	8016be4 <_strtod_l+0x3fc>
 8016c6e:	4d42      	ldr	r5, [pc, #264]	; (8016d78 <_strtod_l+0x590>)
 8016c70:	f1c4 040f 	rsb	r4, r4, #15
 8016c74:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016c78:	4652      	mov	r2, sl
 8016c7a:	465b      	mov	r3, fp
 8016c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c80:	f7e9 fcd2 	bl	8000628 <__aeabi_dmul>
 8016c84:	9b06      	ldr	r3, [sp, #24]
 8016c86:	1b1c      	subs	r4, r3, r4
 8016c88:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016c8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016c90:	e78d      	b.n	8016bae <_strtod_l+0x3c6>
 8016c92:	f113 0f16 	cmn.w	r3, #22
 8016c96:	dba5      	blt.n	8016be4 <_strtod_l+0x3fc>
 8016c98:	4a37      	ldr	r2, [pc, #220]	; (8016d78 <_strtod_l+0x590>)
 8016c9a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016c9e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016ca2:	4650      	mov	r0, sl
 8016ca4:	4659      	mov	r1, fp
 8016ca6:	f7e9 fde9 	bl	800087c <__aeabi_ddiv>
 8016caa:	e782      	b.n	8016bb2 <_strtod_l+0x3ca>
 8016cac:	2300      	movs	r3, #0
 8016cae:	4e33      	ldr	r6, [pc, #204]	; (8016d7c <_strtod_l+0x594>)
 8016cb0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016cb4:	4650      	mov	r0, sl
 8016cb6:	4659      	mov	r1, fp
 8016cb8:	461d      	mov	r5, r3
 8016cba:	f1b8 0f01 	cmp.w	r8, #1
 8016cbe:	dc21      	bgt.n	8016d04 <_strtod_l+0x51c>
 8016cc0:	b10b      	cbz	r3, 8016cc6 <_strtod_l+0x4de>
 8016cc2:	4682      	mov	sl, r0
 8016cc4:	468b      	mov	fp, r1
 8016cc6:	4b2d      	ldr	r3, [pc, #180]	; (8016d7c <_strtod_l+0x594>)
 8016cc8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016ccc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016cd0:	4652      	mov	r2, sl
 8016cd2:	465b      	mov	r3, fp
 8016cd4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016cd8:	f7e9 fca6 	bl	8000628 <__aeabi_dmul>
 8016cdc:	4b28      	ldr	r3, [pc, #160]	; (8016d80 <_strtod_l+0x598>)
 8016cde:	460a      	mov	r2, r1
 8016ce0:	400b      	ands	r3, r1
 8016ce2:	4928      	ldr	r1, [pc, #160]	; (8016d84 <_strtod_l+0x59c>)
 8016ce4:	428b      	cmp	r3, r1
 8016ce6:	4682      	mov	sl, r0
 8016ce8:	d898      	bhi.n	8016c1c <_strtod_l+0x434>
 8016cea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016cee:	428b      	cmp	r3, r1
 8016cf0:	bf86      	itte	hi
 8016cf2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016d8c <_strtod_l+0x5a4>
 8016cf6:	f04f 3aff 	movhi.w	sl, #4294967295
 8016cfa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016cfe:	2300      	movs	r3, #0
 8016d00:	9304      	str	r3, [sp, #16]
 8016d02:	e077      	b.n	8016df4 <_strtod_l+0x60c>
 8016d04:	f018 0f01 	tst.w	r8, #1
 8016d08:	d006      	beq.n	8016d18 <_strtod_l+0x530>
 8016d0a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d12:	f7e9 fc89 	bl	8000628 <__aeabi_dmul>
 8016d16:	2301      	movs	r3, #1
 8016d18:	3501      	adds	r5, #1
 8016d1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016d1e:	e7cc      	b.n	8016cba <_strtod_l+0x4d2>
 8016d20:	d0ed      	beq.n	8016cfe <_strtod_l+0x516>
 8016d22:	f1c8 0800 	rsb	r8, r8, #0
 8016d26:	f018 020f 	ands.w	r2, r8, #15
 8016d2a:	d00a      	beq.n	8016d42 <_strtod_l+0x55a>
 8016d2c:	4b12      	ldr	r3, [pc, #72]	; (8016d78 <_strtod_l+0x590>)
 8016d2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d32:	4650      	mov	r0, sl
 8016d34:	4659      	mov	r1, fp
 8016d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d3a:	f7e9 fd9f 	bl	800087c <__aeabi_ddiv>
 8016d3e:	4682      	mov	sl, r0
 8016d40:	468b      	mov	fp, r1
 8016d42:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016d46:	d0da      	beq.n	8016cfe <_strtod_l+0x516>
 8016d48:	f1b8 0f1f 	cmp.w	r8, #31
 8016d4c:	dd20      	ble.n	8016d90 <_strtod_l+0x5a8>
 8016d4e:	2400      	movs	r4, #0
 8016d50:	46a0      	mov	r8, r4
 8016d52:	9407      	str	r4, [sp, #28]
 8016d54:	9405      	str	r4, [sp, #20]
 8016d56:	2322      	movs	r3, #34	; 0x22
 8016d58:	f04f 0a00 	mov.w	sl, #0
 8016d5c:	f04f 0b00 	mov.w	fp, #0
 8016d60:	f8c9 3000 	str.w	r3, [r9]
 8016d64:	e765      	b.n	8016c32 <_strtod_l+0x44a>
 8016d66:	bf00      	nop
 8016d68:	0801a4a5 	.word	0x0801a4a5
 8016d6c:	0801a52b 	.word	0x0801a52b
 8016d70:	0801a4ad 	.word	0x0801a4ad
 8016d74:	0801a4ec 	.word	0x0801a4ec
 8016d78:	0801a568 	.word	0x0801a568
 8016d7c:	0801a540 	.word	0x0801a540
 8016d80:	7ff00000 	.word	0x7ff00000
 8016d84:	7ca00000 	.word	0x7ca00000
 8016d88:	fff80000 	.word	0xfff80000
 8016d8c:	7fefffff 	.word	0x7fefffff
 8016d90:	f018 0310 	ands.w	r3, r8, #16
 8016d94:	bf18      	it	ne
 8016d96:	236a      	movne	r3, #106	; 0x6a
 8016d98:	4da0      	ldr	r5, [pc, #640]	; (801701c <_strtod_l+0x834>)
 8016d9a:	9304      	str	r3, [sp, #16]
 8016d9c:	4650      	mov	r0, sl
 8016d9e:	4659      	mov	r1, fp
 8016da0:	2300      	movs	r3, #0
 8016da2:	f1b8 0f00 	cmp.w	r8, #0
 8016da6:	f300 810a 	bgt.w	8016fbe <_strtod_l+0x7d6>
 8016daa:	b10b      	cbz	r3, 8016db0 <_strtod_l+0x5c8>
 8016dac:	4682      	mov	sl, r0
 8016dae:	468b      	mov	fp, r1
 8016db0:	9b04      	ldr	r3, [sp, #16]
 8016db2:	b1bb      	cbz	r3, 8016de4 <_strtod_l+0x5fc>
 8016db4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016db8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	4659      	mov	r1, fp
 8016dc0:	dd10      	ble.n	8016de4 <_strtod_l+0x5fc>
 8016dc2:	2b1f      	cmp	r3, #31
 8016dc4:	f340 8107 	ble.w	8016fd6 <_strtod_l+0x7ee>
 8016dc8:	2b34      	cmp	r3, #52	; 0x34
 8016dca:	bfde      	ittt	le
 8016dcc:	3b20      	suble	r3, #32
 8016dce:	f04f 32ff 	movle.w	r2, #4294967295
 8016dd2:	fa02 f303 	lslle.w	r3, r2, r3
 8016dd6:	f04f 0a00 	mov.w	sl, #0
 8016dda:	bfcc      	ite	gt
 8016ddc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016de0:	ea03 0b01 	andle.w	fp, r3, r1
 8016de4:	2200      	movs	r2, #0
 8016de6:	2300      	movs	r3, #0
 8016de8:	4650      	mov	r0, sl
 8016dea:	4659      	mov	r1, fp
 8016dec:	f7e9 fe84 	bl	8000af8 <__aeabi_dcmpeq>
 8016df0:	2800      	cmp	r0, #0
 8016df2:	d1ac      	bne.n	8016d4e <_strtod_l+0x566>
 8016df4:	9b07      	ldr	r3, [sp, #28]
 8016df6:	9300      	str	r3, [sp, #0]
 8016df8:	9a05      	ldr	r2, [sp, #20]
 8016dfa:	9908      	ldr	r1, [sp, #32]
 8016dfc:	4623      	mov	r3, r4
 8016dfe:	4648      	mov	r0, r9
 8016e00:	f001 fddd 	bl	80189be <__s2b>
 8016e04:	9007      	str	r0, [sp, #28]
 8016e06:	2800      	cmp	r0, #0
 8016e08:	f43f af08 	beq.w	8016c1c <_strtod_l+0x434>
 8016e0c:	9a06      	ldr	r2, [sp, #24]
 8016e0e:	9b06      	ldr	r3, [sp, #24]
 8016e10:	2a00      	cmp	r2, #0
 8016e12:	f1c3 0300 	rsb	r3, r3, #0
 8016e16:	bfa8      	it	ge
 8016e18:	2300      	movge	r3, #0
 8016e1a:	930e      	str	r3, [sp, #56]	; 0x38
 8016e1c:	2400      	movs	r4, #0
 8016e1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016e22:	9316      	str	r3, [sp, #88]	; 0x58
 8016e24:	46a0      	mov	r8, r4
 8016e26:	9b07      	ldr	r3, [sp, #28]
 8016e28:	4648      	mov	r0, r9
 8016e2a:	6859      	ldr	r1, [r3, #4]
 8016e2c:	f001 fd41 	bl	80188b2 <_Balloc>
 8016e30:	9005      	str	r0, [sp, #20]
 8016e32:	2800      	cmp	r0, #0
 8016e34:	f43f aef6 	beq.w	8016c24 <_strtod_l+0x43c>
 8016e38:	9b07      	ldr	r3, [sp, #28]
 8016e3a:	691a      	ldr	r2, [r3, #16]
 8016e3c:	3202      	adds	r2, #2
 8016e3e:	f103 010c 	add.w	r1, r3, #12
 8016e42:	0092      	lsls	r2, r2, #2
 8016e44:	300c      	adds	r0, #12
 8016e46:	f001 fd29 	bl	801889c <memcpy>
 8016e4a:	aa1e      	add	r2, sp, #120	; 0x78
 8016e4c:	a91d      	add	r1, sp, #116	; 0x74
 8016e4e:	ec4b ab10 	vmov	d0, sl, fp
 8016e52:	4648      	mov	r0, r9
 8016e54:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016e58:	f002 f86c 	bl	8018f34 <__d2b>
 8016e5c:	901c      	str	r0, [sp, #112]	; 0x70
 8016e5e:	2800      	cmp	r0, #0
 8016e60:	f43f aee0 	beq.w	8016c24 <_strtod_l+0x43c>
 8016e64:	2101      	movs	r1, #1
 8016e66:	4648      	mov	r0, r9
 8016e68:	f001 fe35 	bl	8018ad6 <__i2b>
 8016e6c:	4680      	mov	r8, r0
 8016e6e:	2800      	cmp	r0, #0
 8016e70:	f43f aed8 	beq.w	8016c24 <_strtod_l+0x43c>
 8016e74:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016e76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016e78:	2e00      	cmp	r6, #0
 8016e7a:	bfab      	itete	ge
 8016e7c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016e7e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016e80:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016e82:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016e84:	bfac      	ite	ge
 8016e86:	18f7      	addge	r7, r6, r3
 8016e88:	1b9d      	sublt	r5, r3, r6
 8016e8a:	9b04      	ldr	r3, [sp, #16]
 8016e8c:	1af6      	subs	r6, r6, r3
 8016e8e:	4416      	add	r6, r2
 8016e90:	4b63      	ldr	r3, [pc, #396]	; (8017020 <_strtod_l+0x838>)
 8016e92:	3e01      	subs	r6, #1
 8016e94:	429e      	cmp	r6, r3
 8016e96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016e9a:	f280 80af 	bge.w	8016ffc <_strtod_l+0x814>
 8016e9e:	1b9b      	subs	r3, r3, r6
 8016ea0:	2b1f      	cmp	r3, #31
 8016ea2:	eba2 0203 	sub.w	r2, r2, r3
 8016ea6:	f04f 0101 	mov.w	r1, #1
 8016eaa:	f300 809b 	bgt.w	8016fe4 <_strtod_l+0x7fc>
 8016eae:	fa01 f303 	lsl.w	r3, r1, r3
 8016eb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8016eb8:	18be      	adds	r6, r7, r2
 8016eba:	9b04      	ldr	r3, [sp, #16]
 8016ebc:	42b7      	cmp	r7, r6
 8016ebe:	4415      	add	r5, r2
 8016ec0:	441d      	add	r5, r3
 8016ec2:	463b      	mov	r3, r7
 8016ec4:	bfa8      	it	ge
 8016ec6:	4633      	movge	r3, r6
 8016ec8:	42ab      	cmp	r3, r5
 8016eca:	bfa8      	it	ge
 8016ecc:	462b      	movge	r3, r5
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	bfc2      	ittt	gt
 8016ed2:	1af6      	subgt	r6, r6, r3
 8016ed4:	1aed      	subgt	r5, r5, r3
 8016ed6:	1aff      	subgt	r7, r7, r3
 8016ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016eda:	b1bb      	cbz	r3, 8016f0c <_strtod_l+0x724>
 8016edc:	4641      	mov	r1, r8
 8016ede:	461a      	mov	r2, r3
 8016ee0:	4648      	mov	r0, r9
 8016ee2:	f001 fe97 	bl	8018c14 <__pow5mult>
 8016ee6:	4680      	mov	r8, r0
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	f43f ae9b 	beq.w	8016c24 <_strtod_l+0x43c>
 8016eee:	4601      	mov	r1, r0
 8016ef0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016ef2:	4648      	mov	r0, r9
 8016ef4:	f001 fdf8 	bl	8018ae8 <__multiply>
 8016ef8:	900c      	str	r0, [sp, #48]	; 0x30
 8016efa:	2800      	cmp	r0, #0
 8016efc:	f43f ae92 	beq.w	8016c24 <_strtod_l+0x43c>
 8016f00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f02:	4648      	mov	r0, r9
 8016f04:	f001 fd09 	bl	801891a <_Bfree>
 8016f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f0a:	931c      	str	r3, [sp, #112]	; 0x70
 8016f0c:	2e00      	cmp	r6, #0
 8016f0e:	dc7a      	bgt.n	8017006 <_strtod_l+0x81e>
 8016f10:	9b06      	ldr	r3, [sp, #24]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	dd08      	ble.n	8016f28 <_strtod_l+0x740>
 8016f16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016f18:	9905      	ldr	r1, [sp, #20]
 8016f1a:	4648      	mov	r0, r9
 8016f1c:	f001 fe7a 	bl	8018c14 <__pow5mult>
 8016f20:	9005      	str	r0, [sp, #20]
 8016f22:	2800      	cmp	r0, #0
 8016f24:	f43f ae7e 	beq.w	8016c24 <_strtod_l+0x43c>
 8016f28:	2d00      	cmp	r5, #0
 8016f2a:	dd08      	ble.n	8016f3e <_strtod_l+0x756>
 8016f2c:	462a      	mov	r2, r5
 8016f2e:	9905      	ldr	r1, [sp, #20]
 8016f30:	4648      	mov	r0, r9
 8016f32:	f001 febd 	bl	8018cb0 <__lshift>
 8016f36:	9005      	str	r0, [sp, #20]
 8016f38:	2800      	cmp	r0, #0
 8016f3a:	f43f ae73 	beq.w	8016c24 <_strtod_l+0x43c>
 8016f3e:	2f00      	cmp	r7, #0
 8016f40:	dd08      	ble.n	8016f54 <_strtod_l+0x76c>
 8016f42:	4641      	mov	r1, r8
 8016f44:	463a      	mov	r2, r7
 8016f46:	4648      	mov	r0, r9
 8016f48:	f001 feb2 	bl	8018cb0 <__lshift>
 8016f4c:	4680      	mov	r8, r0
 8016f4e:	2800      	cmp	r0, #0
 8016f50:	f43f ae68 	beq.w	8016c24 <_strtod_l+0x43c>
 8016f54:	9a05      	ldr	r2, [sp, #20]
 8016f56:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f58:	4648      	mov	r0, r9
 8016f5a:	f001 ff17 	bl	8018d8c <__mdiff>
 8016f5e:	4604      	mov	r4, r0
 8016f60:	2800      	cmp	r0, #0
 8016f62:	f43f ae5f 	beq.w	8016c24 <_strtod_l+0x43c>
 8016f66:	68c3      	ldr	r3, [r0, #12]
 8016f68:	930c      	str	r3, [sp, #48]	; 0x30
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	60c3      	str	r3, [r0, #12]
 8016f6e:	4641      	mov	r1, r8
 8016f70:	f001 fef2 	bl	8018d58 <__mcmp>
 8016f74:	2800      	cmp	r0, #0
 8016f76:	da55      	bge.n	8017024 <_strtod_l+0x83c>
 8016f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f7a:	b9e3      	cbnz	r3, 8016fb6 <_strtod_l+0x7ce>
 8016f7c:	f1ba 0f00 	cmp.w	sl, #0
 8016f80:	d119      	bne.n	8016fb6 <_strtod_l+0x7ce>
 8016f82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f86:	b9b3      	cbnz	r3, 8016fb6 <_strtod_l+0x7ce>
 8016f88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016f8c:	0d1b      	lsrs	r3, r3, #20
 8016f8e:	051b      	lsls	r3, r3, #20
 8016f90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016f94:	d90f      	bls.n	8016fb6 <_strtod_l+0x7ce>
 8016f96:	6963      	ldr	r3, [r4, #20]
 8016f98:	b913      	cbnz	r3, 8016fa0 <_strtod_l+0x7b8>
 8016f9a:	6923      	ldr	r3, [r4, #16]
 8016f9c:	2b01      	cmp	r3, #1
 8016f9e:	dd0a      	ble.n	8016fb6 <_strtod_l+0x7ce>
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	2201      	movs	r2, #1
 8016fa4:	4648      	mov	r0, r9
 8016fa6:	f001 fe83 	bl	8018cb0 <__lshift>
 8016faa:	4641      	mov	r1, r8
 8016fac:	4604      	mov	r4, r0
 8016fae:	f001 fed3 	bl	8018d58 <__mcmp>
 8016fb2:	2800      	cmp	r0, #0
 8016fb4:	dc67      	bgt.n	8017086 <_strtod_l+0x89e>
 8016fb6:	9b04      	ldr	r3, [sp, #16]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d171      	bne.n	80170a0 <_strtod_l+0x8b8>
 8016fbc:	e63d      	b.n	8016c3a <_strtod_l+0x452>
 8016fbe:	f018 0f01 	tst.w	r8, #1
 8016fc2:	d004      	beq.n	8016fce <_strtod_l+0x7e6>
 8016fc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016fc8:	f7e9 fb2e 	bl	8000628 <__aeabi_dmul>
 8016fcc:	2301      	movs	r3, #1
 8016fce:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016fd2:	3508      	adds	r5, #8
 8016fd4:	e6e5      	b.n	8016da2 <_strtod_l+0x5ba>
 8016fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8016fda:	fa02 f303 	lsl.w	r3, r2, r3
 8016fde:	ea03 0a0a 	and.w	sl, r3, sl
 8016fe2:	e6ff      	b.n	8016de4 <_strtod_l+0x5fc>
 8016fe4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016fe8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016fec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016ff0:	36e2      	adds	r6, #226	; 0xe2
 8016ff2:	fa01 f306 	lsl.w	r3, r1, r6
 8016ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8016ff8:	910f      	str	r1, [sp, #60]	; 0x3c
 8016ffa:	e75d      	b.n	8016eb8 <_strtod_l+0x6d0>
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8017000:	2301      	movs	r3, #1
 8017002:	930f      	str	r3, [sp, #60]	; 0x3c
 8017004:	e758      	b.n	8016eb8 <_strtod_l+0x6d0>
 8017006:	4632      	mov	r2, r6
 8017008:	991c      	ldr	r1, [sp, #112]	; 0x70
 801700a:	4648      	mov	r0, r9
 801700c:	f001 fe50 	bl	8018cb0 <__lshift>
 8017010:	901c      	str	r0, [sp, #112]	; 0x70
 8017012:	2800      	cmp	r0, #0
 8017014:	f47f af7c 	bne.w	8016f10 <_strtod_l+0x728>
 8017018:	e604      	b.n	8016c24 <_strtod_l+0x43c>
 801701a:	bf00      	nop
 801701c:	0801a500 	.word	0x0801a500
 8017020:	fffffc02 	.word	0xfffffc02
 8017024:	465d      	mov	r5, fp
 8017026:	f040 8086 	bne.w	8017136 <_strtod_l+0x94e>
 801702a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801702c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017030:	b32a      	cbz	r2, 801707e <_strtod_l+0x896>
 8017032:	4aaf      	ldr	r2, [pc, #700]	; (80172f0 <_strtod_l+0xb08>)
 8017034:	4293      	cmp	r3, r2
 8017036:	d153      	bne.n	80170e0 <_strtod_l+0x8f8>
 8017038:	9b04      	ldr	r3, [sp, #16]
 801703a:	4650      	mov	r0, sl
 801703c:	b1d3      	cbz	r3, 8017074 <_strtod_l+0x88c>
 801703e:	4aad      	ldr	r2, [pc, #692]	; (80172f4 <_strtod_l+0xb0c>)
 8017040:	402a      	ands	r2, r5
 8017042:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017046:	f04f 31ff 	mov.w	r1, #4294967295
 801704a:	d816      	bhi.n	801707a <_strtod_l+0x892>
 801704c:	0d12      	lsrs	r2, r2, #20
 801704e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017052:	fa01 f303 	lsl.w	r3, r1, r3
 8017056:	4298      	cmp	r0, r3
 8017058:	d142      	bne.n	80170e0 <_strtod_l+0x8f8>
 801705a:	4ba7      	ldr	r3, [pc, #668]	; (80172f8 <_strtod_l+0xb10>)
 801705c:	429d      	cmp	r5, r3
 801705e:	d102      	bne.n	8017066 <_strtod_l+0x87e>
 8017060:	3001      	adds	r0, #1
 8017062:	f43f addf 	beq.w	8016c24 <_strtod_l+0x43c>
 8017066:	4ba3      	ldr	r3, [pc, #652]	; (80172f4 <_strtod_l+0xb0c>)
 8017068:	402b      	ands	r3, r5
 801706a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801706e:	f04f 0a00 	mov.w	sl, #0
 8017072:	e7a0      	b.n	8016fb6 <_strtod_l+0x7ce>
 8017074:	f04f 33ff 	mov.w	r3, #4294967295
 8017078:	e7ed      	b.n	8017056 <_strtod_l+0x86e>
 801707a:	460b      	mov	r3, r1
 801707c:	e7eb      	b.n	8017056 <_strtod_l+0x86e>
 801707e:	bb7b      	cbnz	r3, 80170e0 <_strtod_l+0x8f8>
 8017080:	f1ba 0f00 	cmp.w	sl, #0
 8017084:	d12c      	bne.n	80170e0 <_strtod_l+0x8f8>
 8017086:	9904      	ldr	r1, [sp, #16]
 8017088:	4a9a      	ldr	r2, [pc, #616]	; (80172f4 <_strtod_l+0xb0c>)
 801708a:	465b      	mov	r3, fp
 801708c:	b1f1      	cbz	r1, 80170cc <_strtod_l+0x8e4>
 801708e:	ea02 010b 	and.w	r1, r2, fp
 8017092:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017096:	dc19      	bgt.n	80170cc <_strtod_l+0x8e4>
 8017098:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801709c:	f77f ae5b 	ble.w	8016d56 <_strtod_l+0x56e>
 80170a0:	4a96      	ldr	r2, [pc, #600]	; (80172fc <_strtod_l+0xb14>)
 80170a2:	2300      	movs	r3, #0
 80170a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80170a8:	4650      	mov	r0, sl
 80170aa:	4659      	mov	r1, fp
 80170ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80170b0:	f7e9 faba 	bl	8000628 <__aeabi_dmul>
 80170b4:	4682      	mov	sl, r0
 80170b6:	468b      	mov	fp, r1
 80170b8:	2900      	cmp	r1, #0
 80170ba:	f47f adbe 	bne.w	8016c3a <_strtod_l+0x452>
 80170be:	2800      	cmp	r0, #0
 80170c0:	f47f adbb 	bne.w	8016c3a <_strtod_l+0x452>
 80170c4:	2322      	movs	r3, #34	; 0x22
 80170c6:	f8c9 3000 	str.w	r3, [r9]
 80170ca:	e5b6      	b.n	8016c3a <_strtod_l+0x452>
 80170cc:	4013      	ands	r3, r2
 80170ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80170d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80170d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80170da:	f04f 3aff 	mov.w	sl, #4294967295
 80170de:	e76a      	b.n	8016fb6 <_strtod_l+0x7ce>
 80170e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170e2:	b193      	cbz	r3, 801710a <_strtod_l+0x922>
 80170e4:	422b      	tst	r3, r5
 80170e6:	f43f af66 	beq.w	8016fb6 <_strtod_l+0x7ce>
 80170ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170ec:	9a04      	ldr	r2, [sp, #16]
 80170ee:	4650      	mov	r0, sl
 80170f0:	4659      	mov	r1, fp
 80170f2:	b173      	cbz	r3, 8017112 <_strtod_l+0x92a>
 80170f4:	f7ff fb5c 	bl	80167b0 <sulp>
 80170f8:	4602      	mov	r2, r0
 80170fa:	460b      	mov	r3, r1
 80170fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017100:	f7e9 f8dc 	bl	80002bc <__adddf3>
 8017104:	4682      	mov	sl, r0
 8017106:	468b      	mov	fp, r1
 8017108:	e755      	b.n	8016fb6 <_strtod_l+0x7ce>
 801710a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801710c:	ea13 0f0a 	tst.w	r3, sl
 8017110:	e7e9      	b.n	80170e6 <_strtod_l+0x8fe>
 8017112:	f7ff fb4d 	bl	80167b0 <sulp>
 8017116:	4602      	mov	r2, r0
 8017118:	460b      	mov	r3, r1
 801711a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801711e:	f7e9 f8cb 	bl	80002b8 <__aeabi_dsub>
 8017122:	2200      	movs	r2, #0
 8017124:	2300      	movs	r3, #0
 8017126:	4682      	mov	sl, r0
 8017128:	468b      	mov	fp, r1
 801712a:	f7e9 fce5 	bl	8000af8 <__aeabi_dcmpeq>
 801712e:	2800      	cmp	r0, #0
 8017130:	f47f ae11 	bne.w	8016d56 <_strtod_l+0x56e>
 8017134:	e73f      	b.n	8016fb6 <_strtod_l+0x7ce>
 8017136:	4641      	mov	r1, r8
 8017138:	4620      	mov	r0, r4
 801713a:	f001 ff4a 	bl	8018fd2 <__ratio>
 801713e:	ec57 6b10 	vmov	r6, r7, d0
 8017142:	2200      	movs	r2, #0
 8017144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017148:	ee10 0a10 	vmov	r0, s0
 801714c:	4639      	mov	r1, r7
 801714e:	f7e9 fce7 	bl	8000b20 <__aeabi_dcmple>
 8017152:	2800      	cmp	r0, #0
 8017154:	d077      	beq.n	8017246 <_strtod_l+0xa5e>
 8017156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017158:	2b00      	cmp	r3, #0
 801715a:	d04a      	beq.n	80171f2 <_strtod_l+0xa0a>
 801715c:	4b68      	ldr	r3, [pc, #416]	; (8017300 <_strtod_l+0xb18>)
 801715e:	2200      	movs	r2, #0
 8017160:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017164:	4f66      	ldr	r7, [pc, #408]	; (8017300 <_strtod_l+0xb18>)
 8017166:	2600      	movs	r6, #0
 8017168:	4b62      	ldr	r3, [pc, #392]	; (80172f4 <_strtod_l+0xb0c>)
 801716a:	402b      	ands	r3, r5
 801716c:	930f      	str	r3, [sp, #60]	; 0x3c
 801716e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017170:	4b64      	ldr	r3, [pc, #400]	; (8017304 <_strtod_l+0xb1c>)
 8017172:	429a      	cmp	r2, r3
 8017174:	f040 80ce 	bne.w	8017314 <_strtod_l+0xb2c>
 8017178:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801717c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017180:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017184:	ec4b ab10 	vmov	d0, sl, fp
 8017188:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801718c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017190:	f001 fe5a 	bl	8018e48 <__ulp>
 8017194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017198:	ec53 2b10 	vmov	r2, r3, d0
 801719c:	f7e9 fa44 	bl	8000628 <__aeabi_dmul>
 80171a0:	4652      	mov	r2, sl
 80171a2:	465b      	mov	r3, fp
 80171a4:	f7e9 f88a 	bl	80002bc <__adddf3>
 80171a8:	460b      	mov	r3, r1
 80171aa:	4952      	ldr	r1, [pc, #328]	; (80172f4 <_strtod_l+0xb0c>)
 80171ac:	4a56      	ldr	r2, [pc, #344]	; (8017308 <_strtod_l+0xb20>)
 80171ae:	4019      	ands	r1, r3
 80171b0:	4291      	cmp	r1, r2
 80171b2:	4682      	mov	sl, r0
 80171b4:	d95b      	bls.n	801726e <_strtod_l+0xa86>
 80171b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80171bc:	4293      	cmp	r3, r2
 80171be:	d103      	bne.n	80171c8 <_strtod_l+0x9e0>
 80171c0:	9b08      	ldr	r3, [sp, #32]
 80171c2:	3301      	adds	r3, #1
 80171c4:	f43f ad2e 	beq.w	8016c24 <_strtod_l+0x43c>
 80171c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80172f8 <_strtod_l+0xb10>
 80171cc:	f04f 3aff 	mov.w	sl, #4294967295
 80171d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171d2:	4648      	mov	r0, r9
 80171d4:	f001 fba1 	bl	801891a <_Bfree>
 80171d8:	9905      	ldr	r1, [sp, #20]
 80171da:	4648      	mov	r0, r9
 80171dc:	f001 fb9d 	bl	801891a <_Bfree>
 80171e0:	4641      	mov	r1, r8
 80171e2:	4648      	mov	r0, r9
 80171e4:	f001 fb99 	bl	801891a <_Bfree>
 80171e8:	4621      	mov	r1, r4
 80171ea:	4648      	mov	r0, r9
 80171ec:	f001 fb95 	bl	801891a <_Bfree>
 80171f0:	e619      	b.n	8016e26 <_strtod_l+0x63e>
 80171f2:	f1ba 0f00 	cmp.w	sl, #0
 80171f6:	d11a      	bne.n	801722e <_strtod_l+0xa46>
 80171f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171fc:	b9eb      	cbnz	r3, 801723a <_strtod_l+0xa52>
 80171fe:	2200      	movs	r2, #0
 8017200:	4b3f      	ldr	r3, [pc, #252]	; (8017300 <_strtod_l+0xb18>)
 8017202:	4630      	mov	r0, r6
 8017204:	4639      	mov	r1, r7
 8017206:	f7e9 fc81 	bl	8000b0c <__aeabi_dcmplt>
 801720a:	b9c8      	cbnz	r0, 8017240 <_strtod_l+0xa58>
 801720c:	4630      	mov	r0, r6
 801720e:	4639      	mov	r1, r7
 8017210:	2200      	movs	r2, #0
 8017212:	4b3e      	ldr	r3, [pc, #248]	; (801730c <_strtod_l+0xb24>)
 8017214:	f7e9 fa08 	bl	8000628 <__aeabi_dmul>
 8017218:	4606      	mov	r6, r0
 801721a:	460f      	mov	r7, r1
 801721c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017220:	9618      	str	r6, [sp, #96]	; 0x60
 8017222:	9319      	str	r3, [sp, #100]	; 0x64
 8017224:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017228:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801722c:	e79c      	b.n	8017168 <_strtod_l+0x980>
 801722e:	f1ba 0f01 	cmp.w	sl, #1
 8017232:	d102      	bne.n	801723a <_strtod_l+0xa52>
 8017234:	2d00      	cmp	r5, #0
 8017236:	f43f ad8e 	beq.w	8016d56 <_strtod_l+0x56e>
 801723a:	2200      	movs	r2, #0
 801723c:	4b34      	ldr	r3, [pc, #208]	; (8017310 <_strtod_l+0xb28>)
 801723e:	e78f      	b.n	8017160 <_strtod_l+0x978>
 8017240:	2600      	movs	r6, #0
 8017242:	4f32      	ldr	r7, [pc, #200]	; (801730c <_strtod_l+0xb24>)
 8017244:	e7ea      	b.n	801721c <_strtod_l+0xa34>
 8017246:	4b31      	ldr	r3, [pc, #196]	; (801730c <_strtod_l+0xb24>)
 8017248:	4630      	mov	r0, r6
 801724a:	4639      	mov	r1, r7
 801724c:	2200      	movs	r2, #0
 801724e:	f7e9 f9eb 	bl	8000628 <__aeabi_dmul>
 8017252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017254:	4606      	mov	r6, r0
 8017256:	460f      	mov	r7, r1
 8017258:	b933      	cbnz	r3, 8017268 <_strtod_l+0xa80>
 801725a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801725e:	9010      	str	r0, [sp, #64]	; 0x40
 8017260:	9311      	str	r3, [sp, #68]	; 0x44
 8017262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017266:	e7df      	b.n	8017228 <_strtod_l+0xa40>
 8017268:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801726c:	e7f9      	b.n	8017262 <_strtod_l+0xa7a>
 801726e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017272:	9b04      	ldr	r3, [sp, #16]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d1ab      	bne.n	80171d0 <_strtod_l+0x9e8>
 8017278:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801727c:	0d1b      	lsrs	r3, r3, #20
 801727e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017280:	051b      	lsls	r3, r3, #20
 8017282:	429a      	cmp	r2, r3
 8017284:	465d      	mov	r5, fp
 8017286:	d1a3      	bne.n	80171d0 <_strtod_l+0x9e8>
 8017288:	4639      	mov	r1, r7
 801728a:	4630      	mov	r0, r6
 801728c:	f7e9 fc7c 	bl	8000b88 <__aeabi_d2iz>
 8017290:	f7e9 f960 	bl	8000554 <__aeabi_i2d>
 8017294:	460b      	mov	r3, r1
 8017296:	4602      	mov	r2, r0
 8017298:	4639      	mov	r1, r7
 801729a:	4630      	mov	r0, r6
 801729c:	f7e9 f80c 	bl	80002b8 <__aeabi_dsub>
 80172a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172a2:	4606      	mov	r6, r0
 80172a4:	460f      	mov	r7, r1
 80172a6:	b933      	cbnz	r3, 80172b6 <_strtod_l+0xace>
 80172a8:	f1ba 0f00 	cmp.w	sl, #0
 80172ac:	d103      	bne.n	80172b6 <_strtod_l+0xace>
 80172ae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80172b2:	2d00      	cmp	r5, #0
 80172b4:	d06d      	beq.n	8017392 <_strtod_l+0xbaa>
 80172b6:	a30a      	add	r3, pc, #40	; (adr r3, 80172e0 <_strtod_l+0xaf8>)
 80172b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172bc:	4630      	mov	r0, r6
 80172be:	4639      	mov	r1, r7
 80172c0:	f7e9 fc24 	bl	8000b0c <__aeabi_dcmplt>
 80172c4:	2800      	cmp	r0, #0
 80172c6:	f47f acb8 	bne.w	8016c3a <_strtod_l+0x452>
 80172ca:	a307      	add	r3, pc, #28	; (adr r3, 80172e8 <_strtod_l+0xb00>)
 80172cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d0:	4630      	mov	r0, r6
 80172d2:	4639      	mov	r1, r7
 80172d4:	f7e9 fc38 	bl	8000b48 <__aeabi_dcmpgt>
 80172d8:	2800      	cmp	r0, #0
 80172da:	f43f af79 	beq.w	80171d0 <_strtod_l+0x9e8>
 80172de:	e4ac      	b.n	8016c3a <_strtod_l+0x452>
 80172e0:	94a03595 	.word	0x94a03595
 80172e4:	3fdfffff 	.word	0x3fdfffff
 80172e8:	35afe535 	.word	0x35afe535
 80172ec:	3fe00000 	.word	0x3fe00000
 80172f0:	000fffff 	.word	0x000fffff
 80172f4:	7ff00000 	.word	0x7ff00000
 80172f8:	7fefffff 	.word	0x7fefffff
 80172fc:	39500000 	.word	0x39500000
 8017300:	3ff00000 	.word	0x3ff00000
 8017304:	7fe00000 	.word	0x7fe00000
 8017308:	7c9fffff 	.word	0x7c9fffff
 801730c:	3fe00000 	.word	0x3fe00000
 8017310:	bff00000 	.word	0xbff00000
 8017314:	9b04      	ldr	r3, [sp, #16]
 8017316:	b333      	cbz	r3, 8017366 <_strtod_l+0xb7e>
 8017318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801731a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801731e:	d822      	bhi.n	8017366 <_strtod_l+0xb7e>
 8017320:	a327      	add	r3, pc, #156	; (adr r3, 80173c0 <_strtod_l+0xbd8>)
 8017322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017326:	4630      	mov	r0, r6
 8017328:	4639      	mov	r1, r7
 801732a:	f7e9 fbf9 	bl	8000b20 <__aeabi_dcmple>
 801732e:	b1a0      	cbz	r0, 801735a <_strtod_l+0xb72>
 8017330:	4639      	mov	r1, r7
 8017332:	4630      	mov	r0, r6
 8017334:	f7e9 fc50 	bl	8000bd8 <__aeabi_d2uiz>
 8017338:	2800      	cmp	r0, #0
 801733a:	bf08      	it	eq
 801733c:	2001      	moveq	r0, #1
 801733e:	f7e9 f8f9 	bl	8000534 <__aeabi_ui2d>
 8017342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017344:	4606      	mov	r6, r0
 8017346:	460f      	mov	r7, r1
 8017348:	bb03      	cbnz	r3, 801738c <_strtod_l+0xba4>
 801734a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801734e:	9012      	str	r0, [sp, #72]	; 0x48
 8017350:	9313      	str	r3, [sp, #76]	; 0x4c
 8017352:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017356:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801735a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801735c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801735e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017362:	1a9b      	subs	r3, r3, r2
 8017364:	930b      	str	r3, [sp, #44]	; 0x2c
 8017366:	ed9d 0b08 	vldr	d0, [sp, #32]
 801736a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801736e:	f001 fd6b 	bl	8018e48 <__ulp>
 8017372:	4650      	mov	r0, sl
 8017374:	ec53 2b10 	vmov	r2, r3, d0
 8017378:	4659      	mov	r1, fp
 801737a:	f7e9 f955 	bl	8000628 <__aeabi_dmul>
 801737e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017382:	f7e8 ff9b 	bl	80002bc <__adddf3>
 8017386:	4682      	mov	sl, r0
 8017388:	468b      	mov	fp, r1
 801738a:	e772      	b.n	8017272 <_strtod_l+0xa8a>
 801738c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017390:	e7df      	b.n	8017352 <_strtod_l+0xb6a>
 8017392:	a30d      	add	r3, pc, #52	; (adr r3, 80173c8 <_strtod_l+0xbe0>)
 8017394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017398:	f7e9 fbb8 	bl	8000b0c <__aeabi_dcmplt>
 801739c:	e79c      	b.n	80172d8 <_strtod_l+0xaf0>
 801739e:	2300      	movs	r3, #0
 80173a0:	930d      	str	r3, [sp, #52]	; 0x34
 80173a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80173a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80173a6:	6013      	str	r3, [r2, #0]
 80173a8:	f7ff ba61 	b.w	801686e <_strtod_l+0x86>
 80173ac:	2b65      	cmp	r3, #101	; 0x65
 80173ae:	f04f 0200 	mov.w	r2, #0
 80173b2:	f43f ab4e 	beq.w	8016a52 <_strtod_l+0x26a>
 80173b6:	2101      	movs	r1, #1
 80173b8:	4614      	mov	r4, r2
 80173ba:	9104      	str	r1, [sp, #16]
 80173bc:	f7ff bacb 	b.w	8016956 <_strtod_l+0x16e>
 80173c0:	ffc00000 	.word	0xffc00000
 80173c4:	41dfffff 	.word	0x41dfffff
 80173c8:	94a03595 	.word	0x94a03595
 80173cc:	3fcfffff 	.word	0x3fcfffff

080173d0 <_strtod_r>:
 80173d0:	4b05      	ldr	r3, [pc, #20]	; (80173e8 <_strtod_r+0x18>)
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	b410      	push	{r4}
 80173d6:	6a1b      	ldr	r3, [r3, #32]
 80173d8:	4c04      	ldr	r4, [pc, #16]	; (80173ec <_strtod_r+0x1c>)
 80173da:	2b00      	cmp	r3, #0
 80173dc:	bf08      	it	eq
 80173de:	4623      	moveq	r3, r4
 80173e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173e4:	f7ff ba00 	b.w	80167e8 <_strtod_l>
 80173e8:	2000000c 	.word	0x2000000c
 80173ec:	20000070 	.word	0x20000070

080173f0 <_strtol_l.isra.0>:
 80173f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173f4:	4680      	mov	r8, r0
 80173f6:	4689      	mov	r9, r1
 80173f8:	4692      	mov	sl, r2
 80173fa:	461e      	mov	r6, r3
 80173fc:	460f      	mov	r7, r1
 80173fe:	463d      	mov	r5, r7
 8017400:	9808      	ldr	r0, [sp, #32]
 8017402:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017406:	f001 fa0d 	bl	8018824 <__locale_ctype_ptr_l>
 801740a:	4420      	add	r0, r4
 801740c:	7843      	ldrb	r3, [r0, #1]
 801740e:	f013 0308 	ands.w	r3, r3, #8
 8017412:	d132      	bne.n	801747a <_strtol_l.isra.0+0x8a>
 8017414:	2c2d      	cmp	r4, #45	; 0x2d
 8017416:	d132      	bne.n	801747e <_strtol_l.isra.0+0x8e>
 8017418:	787c      	ldrb	r4, [r7, #1]
 801741a:	1cbd      	adds	r5, r7, #2
 801741c:	2201      	movs	r2, #1
 801741e:	2e00      	cmp	r6, #0
 8017420:	d05d      	beq.n	80174de <_strtol_l.isra.0+0xee>
 8017422:	2e10      	cmp	r6, #16
 8017424:	d109      	bne.n	801743a <_strtol_l.isra.0+0x4a>
 8017426:	2c30      	cmp	r4, #48	; 0x30
 8017428:	d107      	bne.n	801743a <_strtol_l.isra.0+0x4a>
 801742a:	782b      	ldrb	r3, [r5, #0]
 801742c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017430:	2b58      	cmp	r3, #88	; 0x58
 8017432:	d14f      	bne.n	80174d4 <_strtol_l.isra.0+0xe4>
 8017434:	786c      	ldrb	r4, [r5, #1]
 8017436:	2610      	movs	r6, #16
 8017438:	3502      	adds	r5, #2
 801743a:	2a00      	cmp	r2, #0
 801743c:	bf14      	ite	ne
 801743e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017442:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017446:	2700      	movs	r7, #0
 8017448:	fbb1 fcf6 	udiv	ip, r1, r6
 801744c:	4638      	mov	r0, r7
 801744e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017452:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017456:	2b09      	cmp	r3, #9
 8017458:	d817      	bhi.n	801748a <_strtol_l.isra.0+0x9a>
 801745a:	461c      	mov	r4, r3
 801745c:	42a6      	cmp	r6, r4
 801745e:	dd23      	ble.n	80174a8 <_strtol_l.isra.0+0xb8>
 8017460:	1c7b      	adds	r3, r7, #1
 8017462:	d007      	beq.n	8017474 <_strtol_l.isra.0+0x84>
 8017464:	4584      	cmp	ip, r0
 8017466:	d31c      	bcc.n	80174a2 <_strtol_l.isra.0+0xb2>
 8017468:	d101      	bne.n	801746e <_strtol_l.isra.0+0x7e>
 801746a:	45a6      	cmp	lr, r4
 801746c:	db19      	blt.n	80174a2 <_strtol_l.isra.0+0xb2>
 801746e:	fb00 4006 	mla	r0, r0, r6, r4
 8017472:	2701      	movs	r7, #1
 8017474:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017478:	e7eb      	b.n	8017452 <_strtol_l.isra.0+0x62>
 801747a:	462f      	mov	r7, r5
 801747c:	e7bf      	b.n	80173fe <_strtol_l.isra.0+0xe>
 801747e:	2c2b      	cmp	r4, #43	; 0x2b
 8017480:	bf04      	itt	eq
 8017482:	1cbd      	addeq	r5, r7, #2
 8017484:	787c      	ldrbeq	r4, [r7, #1]
 8017486:	461a      	mov	r2, r3
 8017488:	e7c9      	b.n	801741e <_strtol_l.isra.0+0x2e>
 801748a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801748e:	2b19      	cmp	r3, #25
 8017490:	d801      	bhi.n	8017496 <_strtol_l.isra.0+0xa6>
 8017492:	3c37      	subs	r4, #55	; 0x37
 8017494:	e7e2      	b.n	801745c <_strtol_l.isra.0+0x6c>
 8017496:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801749a:	2b19      	cmp	r3, #25
 801749c:	d804      	bhi.n	80174a8 <_strtol_l.isra.0+0xb8>
 801749e:	3c57      	subs	r4, #87	; 0x57
 80174a0:	e7dc      	b.n	801745c <_strtol_l.isra.0+0x6c>
 80174a2:	f04f 37ff 	mov.w	r7, #4294967295
 80174a6:	e7e5      	b.n	8017474 <_strtol_l.isra.0+0x84>
 80174a8:	1c7b      	adds	r3, r7, #1
 80174aa:	d108      	bne.n	80174be <_strtol_l.isra.0+0xce>
 80174ac:	2322      	movs	r3, #34	; 0x22
 80174ae:	f8c8 3000 	str.w	r3, [r8]
 80174b2:	4608      	mov	r0, r1
 80174b4:	f1ba 0f00 	cmp.w	sl, #0
 80174b8:	d107      	bne.n	80174ca <_strtol_l.isra.0+0xda>
 80174ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174be:	b102      	cbz	r2, 80174c2 <_strtol_l.isra.0+0xd2>
 80174c0:	4240      	negs	r0, r0
 80174c2:	f1ba 0f00 	cmp.w	sl, #0
 80174c6:	d0f8      	beq.n	80174ba <_strtol_l.isra.0+0xca>
 80174c8:	b10f      	cbz	r7, 80174ce <_strtol_l.isra.0+0xde>
 80174ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80174ce:	f8ca 9000 	str.w	r9, [sl]
 80174d2:	e7f2      	b.n	80174ba <_strtol_l.isra.0+0xca>
 80174d4:	2430      	movs	r4, #48	; 0x30
 80174d6:	2e00      	cmp	r6, #0
 80174d8:	d1af      	bne.n	801743a <_strtol_l.isra.0+0x4a>
 80174da:	2608      	movs	r6, #8
 80174dc:	e7ad      	b.n	801743a <_strtol_l.isra.0+0x4a>
 80174de:	2c30      	cmp	r4, #48	; 0x30
 80174e0:	d0a3      	beq.n	801742a <_strtol_l.isra.0+0x3a>
 80174e2:	260a      	movs	r6, #10
 80174e4:	e7a9      	b.n	801743a <_strtol_l.isra.0+0x4a>
	...

080174e8 <_strtol_r>:
 80174e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174ea:	4c06      	ldr	r4, [pc, #24]	; (8017504 <_strtol_r+0x1c>)
 80174ec:	4d06      	ldr	r5, [pc, #24]	; (8017508 <_strtol_r+0x20>)
 80174ee:	6824      	ldr	r4, [r4, #0]
 80174f0:	6a24      	ldr	r4, [r4, #32]
 80174f2:	2c00      	cmp	r4, #0
 80174f4:	bf08      	it	eq
 80174f6:	462c      	moveq	r4, r5
 80174f8:	9400      	str	r4, [sp, #0]
 80174fa:	f7ff ff79 	bl	80173f0 <_strtol_l.isra.0>
 80174fe:	b003      	add	sp, #12
 8017500:	bd30      	pop	{r4, r5, pc}
 8017502:	bf00      	nop
 8017504:	2000000c 	.word	0x2000000c
 8017508:	20000070 	.word	0x20000070

0801750c <_vsiprintf_r>:
 801750c:	b500      	push	{lr}
 801750e:	b09b      	sub	sp, #108	; 0x6c
 8017510:	9100      	str	r1, [sp, #0]
 8017512:	9104      	str	r1, [sp, #16]
 8017514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017518:	9105      	str	r1, [sp, #20]
 801751a:	9102      	str	r1, [sp, #8]
 801751c:	4905      	ldr	r1, [pc, #20]	; (8017534 <_vsiprintf_r+0x28>)
 801751e:	9103      	str	r1, [sp, #12]
 8017520:	4669      	mov	r1, sp
 8017522:	f001 fed5 	bl	80192d0 <_svfiprintf_r>
 8017526:	9b00      	ldr	r3, [sp, #0]
 8017528:	2200      	movs	r2, #0
 801752a:	701a      	strb	r2, [r3, #0]
 801752c:	b01b      	add	sp, #108	; 0x6c
 801752e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017532:	bf00      	nop
 8017534:	ffff0208 	.word	0xffff0208

08017538 <vsiprintf>:
 8017538:	4613      	mov	r3, r2
 801753a:	460a      	mov	r2, r1
 801753c:	4601      	mov	r1, r0
 801753e:	4802      	ldr	r0, [pc, #8]	; (8017548 <vsiprintf+0x10>)
 8017540:	6800      	ldr	r0, [r0, #0]
 8017542:	f7ff bfe3 	b.w	801750c <_vsiprintf_r>
 8017546:	bf00      	nop
 8017548:	2000000c 	.word	0x2000000c

0801754c <quorem>:
 801754c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017550:	6903      	ldr	r3, [r0, #16]
 8017552:	690c      	ldr	r4, [r1, #16]
 8017554:	42a3      	cmp	r3, r4
 8017556:	4680      	mov	r8, r0
 8017558:	f2c0 8082 	blt.w	8017660 <quorem+0x114>
 801755c:	3c01      	subs	r4, #1
 801755e:	f101 0714 	add.w	r7, r1, #20
 8017562:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017566:	f100 0614 	add.w	r6, r0, #20
 801756a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801756e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017572:	eb06 030c 	add.w	r3, r6, ip
 8017576:	3501      	adds	r5, #1
 8017578:	eb07 090c 	add.w	r9, r7, ip
 801757c:	9301      	str	r3, [sp, #4]
 801757e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017582:	b395      	cbz	r5, 80175ea <quorem+0x9e>
 8017584:	f04f 0a00 	mov.w	sl, #0
 8017588:	4638      	mov	r0, r7
 801758a:	46b6      	mov	lr, r6
 801758c:	46d3      	mov	fp, sl
 801758e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017592:	b293      	uxth	r3, r2
 8017594:	fb05 a303 	mla	r3, r5, r3, sl
 8017598:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801759c:	b29b      	uxth	r3, r3
 801759e:	ebab 0303 	sub.w	r3, fp, r3
 80175a2:	0c12      	lsrs	r2, r2, #16
 80175a4:	f8de b000 	ldr.w	fp, [lr]
 80175a8:	fb05 a202 	mla	r2, r5, r2, sl
 80175ac:	fa13 f38b 	uxtah	r3, r3, fp
 80175b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80175b4:	fa1f fb82 	uxth.w	fp, r2
 80175b8:	f8de 2000 	ldr.w	r2, [lr]
 80175bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80175c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80175c4:	b29b      	uxth	r3, r3
 80175c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80175ca:	4581      	cmp	r9, r0
 80175cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80175d0:	f84e 3b04 	str.w	r3, [lr], #4
 80175d4:	d2db      	bcs.n	801758e <quorem+0x42>
 80175d6:	f856 300c 	ldr.w	r3, [r6, ip]
 80175da:	b933      	cbnz	r3, 80175ea <quorem+0x9e>
 80175dc:	9b01      	ldr	r3, [sp, #4]
 80175de:	3b04      	subs	r3, #4
 80175e0:	429e      	cmp	r6, r3
 80175e2:	461a      	mov	r2, r3
 80175e4:	d330      	bcc.n	8017648 <quorem+0xfc>
 80175e6:	f8c8 4010 	str.w	r4, [r8, #16]
 80175ea:	4640      	mov	r0, r8
 80175ec:	f001 fbb4 	bl	8018d58 <__mcmp>
 80175f0:	2800      	cmp	r0, #0
 80175f2:	db25      	blt.n	8017640 <quorem+0xf4>
 80175f4:	3501      	adds	r5, #1
 80175f6:	4630      	mov	r0, r6
 80175f8:	f04f 0c00 	mov.w	ip, #0
 80175fc:	f857 2b04 	ldr.w	r2, [r7], #4
 8017600:	f8d0 e000 	ldr.w	lr, [r0]
 8017604:	b293      	uxth	r3, r2
 8017606:	ebac 0303 	sub.w	r3, ip, r3
 801760a:	0c12      	lsrs	r2, r2, #16
 801760c:	fa13 f38e 	uxtah	r3, r3, lr
 8017610:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017614:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017618:	b29b      	uxth	r3, r3
 801761a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801761e:	45b9      	cmp	r9, r7
 8017620:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017624:	f840 3b04 	str.w	r3, [r0], #4
 8017628:	d2e8      	bcs.n	80175fc <quorem+0xb0>
 801762a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801762e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017632:	b92a      	cbnz	r2, 8017640 <quorem+0xf4>
 8017634:	3b04      	subs	r3, #4
 8017636:	429e      	cmp	r6, r3
 8017638:	461a      	mov	r2, r3
 801763a:	d30b      	bcc.n	8017654 <quorem+0x108>
 801763c:	f8c8 4010 	str.w	r4, [r8, #16]
 8017640:	4628      	mov	r0, r5
 8017642:	b003      	add	sp, #12
 8017644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017648:	6812      	ldr	r2, [r2, #0]
 801764a:	3b04      	subs	r3, #4
 801764c:	2a00      	cmp	r2, #0
 801764e:	d1ca      	bne.n	80175e6 <quorem+0x9a>
 8017650:	3c01      	subs	r4, #1
 8017652:	e7c5      	b.n	80175e0 <quorem+0x94>
 8017654:	6812      	ldr	r2, [r2, #0]
 8017656:	3b04      	subs	r3, #4
 8017658:	2a00      	cmp	r2, #0
 801765a:	d1ef      	bne.n	801763c <quorem+0xf0>
 801765c:	3c01      	subs	r4, #1
 801765e:	e7ea      	b.n	8017636 <quorem+0xea>
 8017660:	2000      	movs	r0, #0
 8017662:	e7ee      	b.n	8017642 <quorem+0xf6>
 8017664:	0000      	movs	r0, r0
	...

08017668 <_dtoa_r>:
 8017668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801766c:	ec57 6b10 	vmov	r6, r7, d0
 8017670:	b097      	sub	sp, #92	; 0x5c
 8017672:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017674:	9106      	str	r1, [sp, #24]
 8017676:	4604      	mov	r4, r0
 8017678:	920b      	str	r2, [sp, #44]	; 0x2c
 801767a:	9312      	str	r3, [sp, #72]	; 0x48
 801767c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017680:	e9cd 6700 	strd	r6, r7, [sp]
 8017684:	b93d      	cbnz	r5, 8017696 <_dtoa_r+0x2e>
 8017686:	2010      	movs	r0, #16
 8017688:	f001 f8ee 	bl	8018868 <malloc>
 801768c:	6260      	str	r0, [r4, #36]	; 0x24
 801768e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017692:	6005      	str	r5, [r0, #0]
 8017694:	60c5      	str	r5, [r0, #12]
 8017696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017698:	6819      	ldr	r1, [r3, #0]
 801769a:	b151      	cbz	r1, 80176b2 <_dtoa_r+0x4a>
 801769c:	685a      	ldr	r2, [r3, #4]
 801769e:	604a      	str	r2, [r1, #4]
 80176a0:	2301      	movs	r3, #1
 80176a2:	4093      	lsls	r3, r2
 80176a4:	608b      	str	r3, [r1, #8]
 80176a6:	4620      	mov	r0, r4
 80176a8:	f001 f937 	bl	801891a <_Bfree>
 80176ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176ae:	2200      	movs	r2, #0
 80176b0:	601a      	str	r2, [r3, #0]
 80176b2:	1e3b      	subs	r3, r7, #0
 80176b4:	bfbb      	ittet	lt
 80176b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80176ba:	9301      	strlt	r3, [sp, #4]
 80176bc:	2300      	movge	r3, #0
 80176be:	2201      	movlt	r2, #1
 80176c0:	bfac      	ite	ge
 80176c2:	f8c8 3000 	strge.w	r3, [r8]
 80176c6:	f8c8 2000 	strlt.w	r2, [r8]
 80176ca:	4baf      	ldr	r3, [pc, #700]	; (8017988 <_dtoa_r+0x320>)
 80176cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80176d0:	ea33 0308 	bics.w	r3, r3, r8
 80176d4:	d114      	bne.n	8017700 <_dtoa_r+0x98>
 80176d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80176d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80176dc:	6013      	str	r3, [r2, #0]
 80176de:	9b00      	ldr	r3, [sp, #0]
 80176e0:	b923      	cbnz	r3, 80176ec <_dtoa_r+0x84>
 80176e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80176e6:	2800      	cmp	r0, #0
 80176e8:	f000 8542 	beq.w	8018170 <_dtoa_r+0xb08>
 80176ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80176ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801799c <_dtoa_r+0x334>
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	f000 8544 	beq.w	8018180 <_dtoa_r+0xb18>
 80176f8:	f10b 0303 	add.w	r3, fp, #3
 80176fc:	f000 bd3e 	b.w	801817c <_dtoa_r+0xb14>
 8017700:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017704:	2200      	movs	r2, #0
 8017706:	2300      	movs	r3, #0
 8017708:	4630      	mov	r0, r6
 801770a:	4639      	mov	r1, r7
 801770c:	f7e9 f9f4 	bl	8000af8 <__aeabi_dcmpeq>
 8017710:	4681      	mov	r9, r0
 8017712:	b168      	cbz	r0, 8017730 <_dtoa_r+0xc8>
 8017714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017716:	2301      	movs	r3, #1
 8017718:	6013      	str	r3, [r2, #0]
 801771a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801771c:	2b00      	cmp	r3, #0
 801771e:	f000 8524 	beq.w	801816a <_dtoa_r+0xb02>
 8017722:	4b9a      	ldr	r3, [pc, #616]	; (801798c <_dtoa_r+0x324>)
 8017724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017726:	f103 3bff 	add.w	fp, r3, #4294967295
 801772a:	6013      	str	r3, [r2, #0]
 801772c:	f000 bd28 	b.w	8018180 <_dtoa_r+0xb18>
 8017730:	aa14      	add	r2, sp, #80	; 0x50
 8017732:	a915      	add	r1, sp, #84	; 0x54
 8017734:	ec47 6b10 	vmov	d0, r6, r7
 8017738:	4620      	mov	r0, r4
 801773a:	f001 fbfb 	bl	8018f34 <__d2b>
 801773e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017742:	9004      	str	r0, [sp, #16]
 8017744:	2d00      	cmp	r5, #0
 8017746:	d07c      	beq.n	8017842 <_dtoa_r+0x1da>
 8017748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801774c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017750:	46b2      	mov	sl, r6
 8017752:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017756:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801775a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801775e:	2200      	movs	r2, #0
 8017760:	4b8b      	ldr	r3, [pc, #556]	; (8017990 <_dtoa_r+0x328>)
 8017762:	4650      	mov	r0, sl
 8017764:	4659      	mov	r1, fp
 8017766:	f7e8 fda7 	bl	80002b8 <__aeabi_dsub>
 801776a:	a381      	add	r3, pc, #516	; (adr r3, 8017970 <_dtoa_r+0x308>)
 801776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017770:	f7e8 ff5a 	bl	8000628 <__aeabi_dmul>
 8017774:	a380      	add	r3, pc, #512	; (adr r3, 8017978 <_dtoa_r+0x310>)
 8017776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801777a:	f7e8 fd9f 	bl	80002bc <__adddf3>
 801777e:	4606      	mov	r6, r0
 8017780:	4628      	mov	r0, r5
 8017782:	460f      	mov	r7, r1
 8017784:	f7e8 fee6 	bl	8000554 <__aeabi_i2d>
 8017788:	a37d      	add	r3, pc, #500	; (adr r3, 8017980 <_dtoa_r+0x318>)
 801778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801778e:	f7e8 ff4b 	bl	8000628 <__aeabi_dmul>
 8017792:	4602      	mov	r2, r0
 8017794:	460b      	mov	r3, r1
 8017796:	4630      	mov	r0, r6
 8017798:	4639      	mov	r1, r7
 801779a:	f7e8 fd8f 	bl	80002bc <__adddf3>
 801779e:	4606      	mov	r6, r0
 80177a0:	460f      	mov	r7, r1
 80177a2:	f7e9 f9f1 	bl	8000b88 <__aeabi_d2iz>
 80177a6:	2200      	movs	r2, #0
 80177a8:	4682      	mov	sl, r0
 80177aa:	2300      	movs	r3, #0
 80177ac:	4630      	mov	r0, r6
 80177ae:	4639      	mov	r1, r7
 80177b0:	f7e9 f9ac 	bl	8000b0c <__aeabi_dcmplt>
 80177b4:	b148      	cbz	r0, 80177ca <_dtoa_r+0x162>
 80177b6:	4650      	mov	r0, sl
 80177b8:	f7e8 fecc 	bl	8000554 <__aeabi_i2d>
 80177bc:	4632      	mov	r2, r6
 80177be:	463b      	mov	r3, r7
 80177c0:	f7e9 f99a 	bl	8000af8 <__aeabi_dcmpeq>
 80177c4:	b908      	cbnz	r0, 80177ca <_dtoa_r+0x162>
 80177c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177ca:	f1ba 0f16 	cmp.w	sl, #22
 80177ce:	d859      	bhi.n	8017884 <_dtoa_r+0x21c>
 80177d0:	4970      	ldr	r1, [pc, #448]	; (8017994 <_dtoa_r+0x32c>)
 80177d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80177d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80177de:	f7e9 f9b3 	bl	8000b48 <__aeabi_dcmpgt>
 80177e2:	2800      	cmp	r0, #0
 80177e4:	d050      	beq.n	8017888 <_dtoa_r+0x220>
 80177e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80177ea:	2300      	movs	r3, #0
 80177ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80177ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80177f0:	1b5d      	subs	r5, r3, r5
 80177f2:	f1b5 0801 	subs.w	r8, r5, #1
 80177f6:	bf49      	itett	mi
 80177f8:	f1c5 0301 	rsbmi	r3, r5, #1
 80177fc:	2300      	movpl	r3, #0
 80177fe:	9305      	strmi	r3, [sp, #20]
 8017800:	f04f 0800 	movmi.w	r8, #0
 8017804:	bf58      	it	pl
 8017806:	9305      	strpl	r3, [sp, #20]
 8017808:	f1ba 0f00 	cmp.w	sl, #0
 801780c:	db3e      	blt.n	801788c <_dtoa_r+0x224>
 801780e:	2300      	movs	r3, #0
 8017810:	44d0      	add	r8, sl
 8017812:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017816:	9307      	str	r3, [sp, #28]
 8017818:	9b06      	ldr	r3, [sp, #24]
 801781a:	2b09      	cmp	r3, #9
 801781c:	f200 8090 	bhi.w	8017940 <_dtoa_r+0x2d8>
 8017820:	2b05      	cmp	r3, #5
 8017822:	bfc4      	itt	gt
 8017824:	3b04      	subgt	r3, #4
 8017826:	9306      	strgt	r3, [sp, #24]
 8017828:	9b06      	ldr	r3, [sp, #24]
 801782a:	f1a3 0302 	sub.w	r3, r3, #2
 801782e:	bfcc      	ite	gt
 8017830:	2500      	movgt	r5, #0
 8017832:	2501      	movle	r5, #1
 8017834:	2b03      	cmp	r3, #3
 8017836:	f200 808f 	bhi.w	8017958 <_dtoa_r+0x2f0>
 801783a:	e8df f003 	tbb	[pc, r3]
 801783e:	7f7d      	.short	0x7f7d
 8017840:	7131      	.short	0x7131
 8017842:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017846:	441d      	add	r5, r3
 8017848:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801784c:	2820      	cmp	r0, #32
 801784e:	dd13      	ble.n	8017878 <_dtoa_r+0x210>
 8017850:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017854:	9b00      	ldr	r3, [sp, #0]
 8017856:	fa08 f800 	lsl.w	r8, r8, r0
 801785a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801785e:	fa23 f000 	lsr.w	r0, r3, r0
 8017862:	ea48 0000 	orr.w	r0, r8, r0
 8017866:	f7e8 fe65 	bl	8000534 <__aeabi_ui2d>
 801786a:	2301      	movs	r3, #1
 801786c:	4682      	mov	sl, r0
 801786e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017872:	3d01      	subs	r5, #1
 8017874:	9313      	str	r3, [sp, #76]	; 0x4c
 8017876:	e772      	b.n	801775e <_dtoa_r+0xf6>
 8017878:	9b00      	ldr	r3, [sp, #0]
 801787a:	f1c0 0020 	rsb	r0, r0, #32
 801787e:	fa03 f000 	lsl.w	r0, r3, r0
 8017882:	e7f0      	b.n	8017866 <_dtoa_r+0x1fe>
 8017884:	2301      	movs	r3, #1
 8017886:	e7b1      	b.n	80177ec <_dtoa_r+0x184>
 8017888:	900f      	str	r0, [sp, #60]	; 0x3c
 801788a:	e7b0      	b.n	80177ee <_dtoa_r+0x186>
 801788c:	9b05      	ldr	r3, [sp, #20]
 801788e:	eba3 030a 	sub.w	r3, r3, sl
 8017892:	9305      	str	r3, [sp, #20]
 8017894:	f1ca 0300 	rsb	r3, sl, #0
 8017898:	9307      	str	r3, [sp, #28]
 801789a:	2300      	movs	r3, #0
 801789c:	930e      	str	r3, [sp, #56]	; 0x38
 801789e:	e7bb      	b.n	8017818 <_dtoa_r+0x1b0>
 80178a0:	2301      	movs	r3, #1
 80178a2:	930a      	str	r3, [sp, #40]	; 0x28
 80178a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	dd59      	ble.n	801795e <_dtoa_r+0x2f6>
 80178aa:	9302      	str	r3, [sp, #8]
 80178ac:	4699      	mov	r9, r3
 80178ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80178b0:	2200      	movs	r2, #0
 80178b2:	6072      	str	r2, [r6, #4]
 80178b4:	2204      	movs	r2, #4
 80178b6:	f102 0014 	add.w	r0, r2, #20
 80178ba:	4298      	cmp	r0, r3
 80178bc:	6871      	ldr	r1, [r6, #4]
 80178be:	d953      	bls.n	8017968 <_dtoa_r+0x300>
 80178c0:	4620      	mov	r0, r4
 80178c2:	f000 fff6 	bl	80188b2 <_Balloc>
 80178c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80178c8:	6030      	str	r0, [r6, #0]
 80178ca:	f1b9 0f0e 	cmp.w	r9, #14
 80178ce:	f8d3 b000 	ldr.w	fp, [r3]
 80178d2:	f200 80e6 	bhi.w	8017aa2 <_dtoa_r+0x43a>
 80178d6:	2d00      	cmp	r5, #0
 80178d8:	f000 80e3 	beq.w	8017aa2 <_dtoa_r+0x43a>
 80178dc:	ed9d 7b00 	vldr	d7, [sp]
 80178e0:	f1ba 0f00 	cmp.w	sl, #0
 80178e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80178e8:	dd74      	ble.n	80179d4 <_dtoa_r+0x36c>
 80178ea:	4a2a      	ldr	r2, [pc, #168]	; (8017994 <_dtoa_r+0x32c>)
 80178ec:	f00a 030f 	and.w	r3, sl, #15
 80178f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80178f4:	ed93 7b00 	vldr	d7, [r3]
 80178f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80178fc:	06f0      	lsls	r0, r6, #27
 80178fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017902:	d565      	bpl.n	80179d0 <_dtoa_r+0x368>
 8017904:	4b24      	ldr	r3, [pc, #144]	; (8017998 <_dtoa_r+0x330>)
 8017906:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801790a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801790e:	f7e8 ffb5 	bl	800087c <__aeabi_ddiv>
 8017912:	e9cd 0100 	strd	r0, r1, [sp]
 8017916:	f006 060f 	and.w	r6, r6, #15
 801791a:	2503      	movs	r5, #3
 801791c:	4f1e      	ldr	r7, [pc, #120]	; (8017998 <_dtoa_r+0x330>)
 801791e:	e04c      	b.n	80179ba <_dtoa_r+0x352>
 8017920:	2301      	movs	r3, #1
 8017922:	930a      	str	r3, [sp, #40]	; 0x28
 8017924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017926:	4453      	add	r3, sl
 8017928:	f103 0901 	add.w	r9, r3, #1
 801792c:	9302      	str	r3, [sp, #8]
 801792e:	464b      	mov	r3, r9
 8017930:	2b01      	cmp	r3, #1
 8017932:	bfb8      	it	lt
 8017934:	2301      	movlt	r3, #1
 8017936:	e7ba      	b.n	80178ae <_dtoa_r+0x246>
 8017938:	2300      	movs	r3, #0
 801793a:	e7b2      	b.n	80178a2 <_dtoa_r+0x23a>
 801793c:	2300      	movs	r3, #0
 801793e:	e7f0      	b.n	8017922 <_dtoa_r+0x2ba>
 8017940:	2501      	movs	r5, #1
 8017942:	2300      	movs	r3, #0
 8017944:	9306      	str	r3, [sp, #24]
 8017946:	950a      	str	r5, [sp, #40]	; 0x28
 8017948:	f04f 33ff 	mov.w	r3, #4294967295
 801794c:	9302      	str	r3, [sp, #8]
 801794e:	4699      	mov	r9, r3
 8017950:	2200      	movs	r2, #0
 8017952:	2312      	movs	r3, #18
 8017954:	920b      	str	r2, [sp, #44]	; 0x2c
 8017956:	e7aa      	b.n	80178ae <_dtoa_r+0x246>
 8017958:	2301      	movs	r3, #1
 801795a:	930a      	str	r3, [sp, #40]	; 0x28
 801795c:	e7f4      	b.n	8017948 <_dtoa_r+0x2e0>
 801795e:	2301      	movs	r3, #1
 8017960:	9302      	str	r3, [sp, #8]
 8017962:	4699      	mov	r9, r3
 8017964:	461a      	mov	r2, r3
 8017966:	e7f5      	b.n	8017954 <_dtoa_r+0x2ec>
 8017968:	3101      	adds	r1, #1
 801796a:	6071      	str	r1, [r6, #4]
 801796c:	0052      	lsls	r2, r2, #1
 801796e:	e7a2      	b.n	80178b6 <_dtoa_r+0x24e>
 8017970:	636f4361 	.word	0x636f4361
 8017974:	3fd287a7 	.word	0x3fd287a7
 8017978:	8b60c8b3 	.word	0x8b60c8b3
 801797c:	3fc68a28 	.word	0x3fc68a28
 8017980:	509f79fb 	.word	0x509f79fb
 8017984:	3fd34413 	.word	0x3fd34413
 8017988:	7ff00000 	.word	0x7ff00000
 801798c:	0801a664 	.word	0x0801a664
 8017990:	3ff80000 	.word	0x3ff80000
 8017994:	0801a568 	.word	0x0801a568
 8017998:	0801a540 	.word	0x0801a540
 801799c:	0801a531 	.word	0x0801a531
 80179a0:	07f1      	lsls	r1, r6, #31
 80179a2:	d508      	bpl.n	80179b6 <_dtoa_r+0x34e>
 80179a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80179a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80179ac:	f7e8 fe3c 	bl	8000628 <__aeabi_dmul>
 80179b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80179b4:	3501      	adds	r5, #1
 80179b6:	1076      	asrs	r6, r6, #1
 80179b8:	3708      	adds	r7, #8
 80179ba:	2e00      	cmp	r6, #0
 80179bc:	d1f0      	bne.n	80179a0 <_dtoa_r+0x338>
 80179be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80179c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179c6:	f7e8 ff59 	bl	800087c <__aeabi_ddiv>
 80179ca:	e9cd 0100 	strd	r0, r1, [sp]
 80179ce:	e01a      	b.n	8017a06 <_dtoa_r+0x39e>
 80179d0:	2502      	movs	r5, #2
 80179d2:	e7a3      	b.n	801791c <_dtoa_r+0x2b4>
 80179d4:	f000 80a0 	beq.w	8017b18 <_dtoa_r+0x4b0>
 80179d8:	f1ca 0600 	rsb	r6, sl, #0
 80179dc:	4b9f      	ldr	r3, [pc, #636]	; (8017c5c <_dtoa_r+0x5f4>)
 80179de:	4fa0      	ldr	r7, [pc, #640]	; (8017c60 <_dtoa_r+0x5f8>)
 80179e0:	f006 020f 	and.w	r2, r6, #15
 80179e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80179e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80179f0:	f7e8 fe1a 	bl	8000628 <__aeabi_dmul>
 80179f4:	e9cd 0100 	strd	r0, r1, [sp]
 80179f8:	1136      	asrs	r6, r6, #4
 80179fa:	2300      	movs	r3, #0
 80179fc:	2502      	movs	r5, #2
 80179fe:	2e00      	cmp	r6, #0
 8017a00:	d17f      	bne.n	8017b02 <_dtoa_r+0x49a>
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d1e1      	bne.n	80179ca <_dtoa_r+0x362>
 8017a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	f000 8087 	beq.w	8017b1c <_dtoa_r+0x4b4>
 8017a0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017a12:	2200      	movs	r2, #0
 8017a14:	4b93      	ldr	r3, [pc, #588]	; (8017c64 <_dtoa_r+0x5fc>)
 8017a16:	4630      	mov	r0, r6
 8017a18:	4639      	mov	r1, r7
 8017a1a:	f7e9 f877 	bl	8000b0c <__aeabi_dcmplt>
 8017a1e:	2800      	cmp	r0, #0
 8017a20:	d07c      	beq.n	8017b1c <_dtoa_r+0x4b4>
 8017a22:	f1b9 0f00 	cmp.w	r9, #0
 8017a26:	d079      	beq.n	8017b1c <_dtoa_r+0x4b4>
 8017a28:	9b02      	ldr	r3, [sp, #8]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	dd35      	ble.n	8017a9a <_dtoa_r+0x432>
 8017a2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017a32:	9308      	str	r3, [sp, #32]
 8017a34:	4639      	mov	r1, r7
 8017a36:	2200      	movs	r2, #0
 8017a38:	4b8b      	ldr	r3, [pc, #556]	; (8017c68 <_dtoa_r+0x600>)
 8017a3a:	4630      	mov	r0, r6
 8017a3c:	f7e8 fdf4 	bl	8000628 <__aeabi_dmul>
 8017a40:	e9cd 0100 	strd	r0, r1, [sp]
 8017a44:	9f02      	ldr	r7, [sp, #8]
 8017a46:	3501      	adds	r5, #1
 8017a48:	4628      	mov	r0, r5
 8017a4a:	f7e8 fd83 	bl	8000554 <__aeabi_i2d>
 8017a4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a52:	f7e8 fde9 	bl	8000628 <__aeabi_dmul>
 8017a56:	2200      	movs	r2, #0
 8017a58:	4b84      	ldr	r3, [pc, #528]	; (8017c6c <_dtoa_r+0x604>)
 8017a5a:	f7e8 fc2f 	bl	80002bc <__adddf3>
 8017a5e:	4605      	mov	r5, r0
 8017a60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017a64:	2f00      	cmp	r7, #0
 8017a66:	d15d      	bne.n	8017b24 <_dtoa_r+0x4bc>
 8017a68:	2200      	movs	r2, #0
 8017a6a:	4b81      	ldr	r3, [pc, #516]	; (8017c70 <_dtoa_r+0x608>)
 8017a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a70:	f7e8 fc22 	bl	80002b8 <__aeabi_dsub>
 8017a74:	462a      	mov	r2, r5
 8017a76:	4633      	mov	r3, r6
 8017a78:	e9cd 0100 	strd	r0, r1, [sp]
 8017a7c:	f7e9 f864 	bl	8000b48 <__aeabi_dcmpgt>
 8017a80:	2800      	cmp	r0, #0
 8017a82:	f040 8288 	bne.w	8017f96 <_dtoa_r+0x92e>
 8017a86:	462a      	mov	r2, r5
 8017a88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017a8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a90:	f7e9 f83c 	bl	8000b0c <__aeabi_dcmplt>
 8017a94:	2800      	cmp	r0, #0
 8017a96:	f040 827c 	bne.w	8017f92 <_dtoa_r+0x92a>
 8017a9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017a9e:	e9cd 2300 	strd	r2, r3, [sp]
 8017aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	f2c0 8150 	blt.w	8017d4a <_dtoa_r+0x6e2>
 8017aaa:	f1ba 0f0e 	cmp.w	sl, #14
 8017aae:	f300 814c 	bgt.w	8017d4a <_dtoa_r+0x6e2>
 8017ab2:	4b6a      	ldr	r3, [pc, #424]	; (8017c5c <_dtoa_r+0x5f4>)
 8017ab4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017ab8:	ed93 7b00 	vldr	d7, [r3]
 8017abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017ac4:	f280 80d8 	bge.w	8017c78 <_dtoa_r+0x610>
 8017ac8:	f1b9 0f00 	cmp.w	r9, #0
 8017acc:	f300 80d4 	bgt.w	8017c78 <_dtoa_r+0x610>
 8017ad0:	f040 825e 	bne.w	8017f90 <_dtoa_r+0x928>
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	4b66      	ldr	r3, [pc, #408]	; (8017c70 <_dtoa_r+0x608>)
 8017ad8:	ec51 0b17 	vmov	r0, r1, d7
 8017adc:	f7e8 fda4 	bl	8000628 <__aeabi_dmul>
 8017ae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ae4:	f7e9 f826 	bl	8000b34 <__aeabi_dcmpge>
 8017ae8:	464f      	mov	r7, r9
 8017aea:	464e      	mov	r6, r9
 8017aec:	2800      	cmp	r0, #0
 8017aee:	f040 8234 	bne.w	8017f5a <_dtoa_r+0x8f2>
 8017af2:	2331      	movs	r3, #49	; 0x31
 8017af4:	f10b 0501 	add.w	r5, fp, #1
 8017af8:	f88b 3000 	strb.w	r3, [fp]
 8017afc:	f10a 0a01 	add.w	sl, sl, #1
 8017b00:	e22f      	b.n	8017f62 <_dtoa_r+0x8fa>
 8017b02:	07f2      	lsls	r2, r6, #31
 8017b04:	d505      	bpl.n	8017b12 <_dtoa_r+0x4aa>
 8017b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b0a:	f7e8 fd8d 	bl	8000628 <__aeabi_dmul>
 8017b0e:	3501      	adds	r5, #1
 8017b10:	2301      	movs	r3, #1
 8017b12:	1076      	asrs	r6, r6, #1
 8017b14:	3708      	adds	r7, #8
 8017b16:	e772      	b.n	80179fe <_dtoa_r+0x396>
 8017b18:	2502      	movs	r5, #2
 8017b1a:	e774      	b.n	8017a06 <_dtoa_r+0x39e>
 8017b1c:	f8cd a020 	str.w	sl, [sp, #32]
 8017b20:	464f      	mov	r7, r9
 8017b22:	e791      	b.n	8017a48 <_dtoa_r+0x3e0>
 8017b24:	4b4d      	ldr	r3, [pc, #308]	; (8017c5c <_dtoa_r+0x5f4>)
 8017b26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017b2a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d047      	beq.n	8017bc4 <_dtoa_r+0x55c>
 8017b34:	4602      	mov	r2, r0
 8017b36:	460b      	mov	r3, r1
 8017b38:	2000      	movs	r0, #0
 8017b3a:	494e      	ldr	r1, [pc, #312]	; (8017c74 <_dtoa_r+0x60c>)
 8017b3c:	f7e8 fe9e 	bl	800087c <__aeabi_ddiv>
 8017b40:	462a      	mov	r2, r5
 8017b42:	4633      	mov	r3, r6
 8017b44:	f7e8 fbb8 	bl	80002b8 <__aeabi_dsub>
 8017b48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b4c:	465d      	mov	r5, fp
 8017b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b52:	f7e9 f819 	bl	8000b88 <__aeabi_d2iz>
 8017b56:	4606      	mov	r6, r0
 8017b58:	f7e8 fcfc 	bl	8000554 <__aeabi_i2d>
 8017b5c:	4602      	mov	r2, r0
 8017b5e:	460b      	mov	r3, r1
 8017b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b64:	f7e8 fba8 	bl	80002b8 <__aeabi_dsub>
 8017b68:	3630      	adds	r6, #48	; 0x30
 8017b6a:	f805 6b01 	strb.w	r6, [r5], #1
 8017b6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b72:	e9cd 0100 	strd	r0, r1, [sp]
 8017b76:	f7e8 ffc9 	bl	8000b0c <__aeabi_dcmplt>
 8017b7a:	2800      	cmp	r0, #0
 8017b7c:	d163      	bne.n	8017c46 <_dtoa_r+0x5de>
 8017b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b82:	2000      	movs	r0, #0
 8017b84:	4937      	ldr	r1, [pc, #220]	; (8017c64 <_dtoa_r+0x5fc>)
 8017b86:	f7e8 fb97 	bl	80002b8 <__aeabi_dsub>
 8017b8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b8e:	f7e8 ffbd 	bl	8000b0c <__aeabi_dcmplt>
 8017b92:	2800      	cmp	r0, #0
 8017b94:	f040 80b7 	bne.w	8017d06 <_dtoa_r+0x69e>
 8017b98:	eba5 030b 	sub.w	r3, r5, fp
 8017b9c:	429f      	cmp	r7, r3
 8017b9e:	f77f af7c 	ble.w	8017a9a <_dtoa_r+0x432>
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	4b30      	ldr	r3, [pc, #192]	; (8017c68 <_dtoa_r+0x600>)
 8017ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017baa:	f7e8 fd3d 	bl	8000628 <__aeabi_dmul>
 8017bae:	2200      	movs	r2, #0
 8017bb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017bb4:	4b2c      	ldr	r3, [pc, #176]	; (8017c68 <_dtoa_r+0x600>)
 8017bb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bba:	f7e8 fd35 	bl	8000628 <__aeabi_dmul>
 8017bbe:	e9cd 0100 	strd	r0, r1, [sp]
 8017bc2:	e7c4      	b.n	8017b4e <_dtoa_r+0x4e6>
 8017bc4:	462a      	mov	r2, r5
 8017bc6:	4633      	mov	r3, r6
 8017bc8:	f7e8 fd2e 	bl	8000628 <__aeabi_dmul>
 8017bcc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017bd0:	eb0b 0507 	add.w	r5, fp, r7
 8017bd4:	465e      	mov	r6, fp
 8017bd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bda:	f7e8 ffd5 	bl	8000b88 <__aeabi_d2iz>
 8017bde:	4607      	mov	r7, r0
 8017be0:	f7e8 fcb8 	bl	8000554 <__aeabi_i2d>
 8017be4:	3730      	adds	r7, #48	; 0x30
 8017be6:	4602      	mov	r2, r0
 8017be8:	460b      	mov	r3, r1
 8017bea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bee:	f7e8 fb63 	bl	80002b8 <__aeabi_dsub>
 8017bf2:	f806 7b01 	strb.w	r7, [r6], #1
 8017bf6:	42ae      	cmp	r6, r5
 8017bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8017bfc:	f04f 0200 	mov.w	r2, #0
 8017c00:	d126      	bne.n	8017c50 <_dtoa_r+0x5e8>
 8017c02:	4b1c      	ldr	r3, [pc, #112]	; (8017c74 <_dtoa_r+0x60c>)
 8017c04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017c08:	f7e8 fb58 	bl	80002bc <__adddf3>
 8017c0c:	4602      	mov	r2, r0
 8017c0e:	460b      	mov	r3, r1
 8017c10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c14:	f7e8 ff98 	bl	8000b48 <__aeabi_dcmpgt>
 8017c18:	2800      	cmp	r0, #0
 8017c1a:	d174      	bne.n	8017d06 <_dtoa_r+0x69e>
 8017c1c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017c20:	2000      	movs	r0, #0
 8017c22:	4914      	ldr	r1, [pc, #80]	; (8017c74 <_dtoa_r+0x60c>)
 8017c24:	f7e8 fb48 	bl	80002b8 <__aeabi_dsub>
 8017c28:	4602      	mov	r2, r0
 8017c2a:	460b      	mov	r3, r1
 8017c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c30:	f7e8 ff6c 	bl	8000b0c <__aeabi_dcmplt>
 8017c34:	2800      	cmp	r0, #0
 8017c36:	f43f af30 	beq.w	8017a9a <_dtoa_r+0x432>
 8017c3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017c3e:	2b30      	cmp	r3, #48	; 0x30
 8017c40:	f105 32ff 	add.w	r2, r5, #4294967295
 8017c44:	d002      	beq.n	8017c4c <_dtoa_r+0x5e4>
 8017c46:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017c4a:	e04a      	b.n	8017ce2 <_dtoa_r+0x67a>
 8017c4c:	4615      	mov	r5, r2
 8017c4e:	e7f4      	b.n	8017c3a <_dtoa_r+0x5d2>
 8017c50:	4b05      	ldr	r3, [pc, #20]	; (8017c68 <_dtoa_r+0x600>)
 8017c52:	f7e8 fce9 	bl	8000628 <__aeabi_dmul>
 8017c56:	e9cd 0100 	strd	r0, r1, [sp]
 8017c5a:	e7bc      	b.n	8017bd6 <_dtoa_r+0x56e>
 8017c5c:	0801a568 	.word	0x0801a568
 8017c60:	0801a540 	.word	0x0801a540
 8017c64:	3ff00000 	.word	0x3ff00000
 8017c68:	40240000 	.word	0x40240000
 8017c6c:	401c0000 	.word	0x401c0000
 8017c70:	40140000 	.word	0x40140000
 8017c74:	3fe00000 	.word	0x3fe00000
 8017c78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017c7c:	465d      	mov	r5, fp
 8017c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c82:	4630      	mov	r0, r6
 8017c84:	4639      	mov	r1, r7
 8017c86:	f7e8 fdf9 	bl	800087c <__aeabi_ddiv>
 8017c8a:	f7e8 ff7d 	bl	8000b88 <__aeabi_d2iz>
 8017c8e:	4680      	mov	r8, r0
 8017c90:	f7e8 fc60 	bl	8000554 <__aeabi_i2d>
 8017c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c98:	f7e8 fcc6 	bl	8000628 <__aeabi_dmul>
 8017c9c:	4602      	mov	r2, r0
 8017c9e:	460b      	mov	r3, r1
 8017ca0:	4630      	mov	r0, r6
 8017ca2:	4639      	mov	r1, r7
 8017ca4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017ca8:	f7e8 fb06 	bl	80002b8 <__aeabi_dsub>
 8017cac:	f805 6b01 	strb.w	r6, [r5], #1
 8017cb0:	eba5 060b 	sub.w	r6, r5, fp
 8017cb4:	45b1      	cmp	r9, r6
 8017cb6:	4602      	mov	r2, r0
 8017cb8:	460b      	mov	r3, r1
 8017cba:	d139      	bne.n	8017d30 <_dtoa_r+0x6c8>
 8017cbc:	f7e8 fafe 	bl	80002bc <__adddf3>
 8017cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017cc4:	4606      	mov	r6, r0
 8017cc6:	460f      	mov	r7, r1
 8017cc8:	f7e8 ff3e 	bl	8000b48 <__aeabi_dcmpgt>
 8017ccc:	b9c8      	cbnz	r0, 8017d02 <_dtoa_r+0x69a>
 8017cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017cd2:	4630      	mov	r0, r6
 8017cd4:	4639      	mov	r1, r7
 8017cd6:	f7e8 ff0f 	bl	8000af8 <__aeabi_dcmpeq>
 8017cda:	b110      	cbz	r0, 8017ce2 <_dtoa_r+0x67a>
 8017cdc:	f018 0f01 	tst.w	r8, #1
 8017ce0:	d10f      	bne.n	8017d02 <_dtoa_r+0x69a>
 8017ce2:	9904      	ldr	r1, [sp, #16]
 8017ce4:	4620      	mov	r0, r4
 8017ce6:	f000 fe18 	bl	801891a <_Bfree>
 8017cea:	2300      	movs	r3, #0
 8017cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017cee:	702b      	strb	r3, [r5, #0]
 8017cf0:	f10a 0301 	add.w	r3, sl, #1
 8017cf4:	6013      	str	r3, [r2, #0]
 8017cf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	f000 8241 	beq.w	8018180 <_dtoa_r+0xb18>
 8017cfe:	601d      	str	r5, [r3, #0]
 8017d00:	e23e      	b.n	8018180 <_dtoa_r+0xb18>
 8017d02:	f8cd a020 	str.w	sl, [sp, #32]
 8017d06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017d0a:	2a39      	cmp	r2, #57	; 0x39
 8017d0c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017d10:	d108      	bne.n	8017d24 <_dtoa_r+0x6bc>
 8017d12:	459b      	cmp	fp, r3
 8017d14:	d10a      	bne.n	8017d2c <_dtoa_r+0x6c4>
 8017d16:	9b08      	ldr	r3, [sp, #32]
 8017d18:	3301      	adds	r3, #1
 8017d1a:	9308      	str	r3, [sp, #32]
 8017d1c:	2330      	movs	r3, #48	; 0x30
 8017d1e:	f88b 3000 	strb.w	r3, [fp]
 8017d22:	465b      	mov	r3, fp
 8017d24:	781a      	ldrb	r2, [r3, #0]
 8017d26:	3201      	adds	r2, #1
 8017d28:	701a      	strb	r2, [r3, #0]
 8017d2a:	e78c      	b.n	8017c46 <_dtoa_r+0x5de>
 8017d2c:	461d      	mov	r5, r3
 8017d2e:	e7ea      	b.n	8017d06 <_dtoa_r+0x69e>
 8017d30:	2200      	movs	r2, #0
 8017d32:	4b9b      	ldr	r3, [pc, #620]	; (8017fa0 <_dtoa_r+0x938>)
 8017d34:	f7e8 fc78 	bl	8000628 <__aeabi_dmul>
 8017d38:	2200      	movs	r2, #0
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	4606      	mov	r6, r0
 8017d3e:	460f      	mov	r7, r1
 8017d40:	f7e8 feda 	bl	8000af8 <__aeabi_dcmpeq>
 8017d44:	2800      	cmp	r0, #0
 8017d46:	d09a      	beq.n	8017c7e <_dtoa_r+0x616>
 8017d48:	e7cb      	b.n	8017ce2 <_dtoa_r+0x67a>
 8017d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d4c:	2a00      	cmp	r2, #0
 8017d4e:	f000 808b 	beq.w	8017e68 <_dtoa_r+0x800>
 8017d52:	9a06      	ldr	r2, [sp, #24]
 8017d54:	2a01      	cmp	r2, #1
 8017d56:	dc6e      	bgt.n	8017e36 <_dtoa_r+0x7ce>
 8017d58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017d5a:	2a00      	cmp	r2, #0
 8017d5c:	d067      	beq.n	8017e2e <_dtoa_r+0x7c6>
 8017d5e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017d62:	9f07      	ldr	r7, [sp, #28]
 8017d64:	9d05      	ldr	r5, [sp, #20]
 8017d66:	9a05      	ldr	r2, [sp, #20]
 8017d68:	2101      	movs	r1, #1
 8017d6a:	441a      	add	r2, r3
 8017d6c:	4620      	mov	r0, r4
 8017d6e:	9205      	str	r2, [sp, #20]
 8017d70:	4498      	add	r8, r3
 8017d72:	f000 feb0 	bl	8018ad6 <__i2b>
 8017d76:	4606      	mov	r6, r0
 8017d78:	2d00      	cmp	r5, #0
 8017d7a:	dd0c      	ble.n	8017d96 <_dtoa_r+0x72e>
 8017d7c:	f1b8 0f00 	cmp.w	r8, #0
 8017d80:	dd09      	ble.n	8017d96 <_dtoa_r+0x72e>
 8017d82:	4545      	cmp	r5, r8
 8017d84:	9a05      	ldr	r2, [sp, #20]
 8017d86:	462b      	mov	r3, r5
 8017d88:	bfa8      	it	ge
 8017d8a:	4643      	movge	r3, r8
 8017d8c:	1ad2      	subs	r2, r2, r3
 8017d8e:	9205      	str	r2, [sp, #20]
 8017d90:	1aed      	subs	r5, r5, r3
 8017d92:	eba8 0803 	sub.w	r8, r8, r3
 8017d96:	9b07      	ldr	r3, [sp, #28]
 8017d98:	b1eb      	cbz	r3, 8017dd6 <_dtoa_r+0x76e>
 8017d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d067      	beq.n	8017e70 <_dtoa_r+0x808>
 8017da0:	b18f      	cbz	r7, 8017dc6 <_dtoa_r+0x75e>
 8017da2:	4631      	mov	r1, r6
 8017da4:	463a      	mov	r2, r7
 8017da6:	4620      	mov	r0, r4
 8017da8:	f000 ff34 	bl	8018c14 <__pow5mult>
 8017dac:	9a04      	ldr	r2, [sp, #16]
 8017dae:	4601      	mov	r1, r0
 8017db0:	4606      	mov	r6, r0
 8017db2:	4620      	mov	r0, r4
 8017db4:	f000 fe98 	bl	8018ae8 <__multiply>
 8017db8:	9904      	ldr	r1, [sp, #16]
 8017dba:	9008      	str	r0, [sp, #32]
 8017dbc:	4620      	mov	r0, r4
 8017dbe:	f000 fdac 	bl	801891a <_Bfree>
 8017dc2:	9b08      	ldr	r3, [sp, #32]
 8017dc4:	9304      	str	r3, [sp, #16]
 8017dc6:	9b07      	ldr	r3, [sp, #28]
 8017dc8:	1bda      	subs	r2, r3, r7
 8017dca:	d004      	beq.n	8017dd6 <_dtoa_r+0x76e>
 8017dcc:	9904      	ldr	r1, [sp, #16]
 8017dce:	4620      	mov	r0, r4
 8017dd0:	f000 ff20 	bl	8018c14 <__pow5mult>
 8017dd4:	9004      	str	r0, [sp, #16]
 8017dd6:	2101      	movs	r1, #1
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f000 fe7c 	bl	8018ad6 <__i2b>
 8017dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017de0:	4607      	mov	r7, r0
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	f000 81d0 	beq.w	8018188 <_dtoa_r+0xb20>
 8017de8:	461a      	mov	r2, r3
 8017dea:	4601      	mov	r1, r0
 8017dec:	4620      	mov	r0, r4
 8017dee:	f000 ff11 	bl	8018c14 <__pow5mult>
 8017df2:	9b06      	ldr	r3, [sp, #24]
 8017df4:	2b01      	cmp	r3, #1
 8017df6:	4607      	mov	r7, r0
 8017df8:	dc40      	bgt.n	8017e7c <_dtoa_r+0x814>
 8017dfa:	9b00      	ldr	r3, [sp, #0]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d139      	bne.n	8017e74 <_dtoa_r+0x80c>
 8017e00:	9b01      	ldr	r3, [sp, #4]
 8017e02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d136      	bne.n	8017e78 <_dtoa_r+0x810>
 8017e0a:	9b01      	ldr	r3, [sp, #4]
 8017e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017e10:	0d1b      	lsrs	r3, r3, #20
 8017e12:	051b      	lsls	r3, r3, #20
 8017e14:	b12b      	cbz	r3, 8017e22 <_dtoa_r+0x7ba>
 8017e16:	9b05      	ldr	r3, [sp, #20]
 8017e18:	3301      	adds	r3, #1
 8017e1a:	9305      	str	r3, [sp, #20]
 8017e1c:	f108 0801 	add.w	r8, r8, #1
 8017e20:	2301      	movs	r3, #1
 8017e22:	9307      	str	r3, [sp, #28]
 8017e24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d12a      	bne.n	8017e80 <_dtoa_r+0x818>
 8017e2a:	2001      	movs	r0, #1
 8017e2c:	e030      	b.n	8017e90 <_dtoa_r+0x828>
 8017e2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017e34:	e795      	b.n	8017d62 <_dtoa_r+0x6fa>
 8017e36:	9b07      	ldr	r3, [sp, #28]
 8017e38:	f109 37ff 	add.w	r7, r9, #4294967295
 8017e3c:	42bb      	cmp	r3, r7
 8017e3e:	bfbf      	itttt	lt
 8017e40:	9b07      	ldrlt	r3, [sp, #28]
 8017e42:	9707      	strlt	r7, [sp, #28]
 8017e44:	1afa      	sublt	r2, r7, r3
 8017e46:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017e48:	bfbb      	ittet	lt
 8017e4a:	189b      	addlt	r3, r3, r2
 8017e4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017e4e:	1bdf      	subge	r7, r3, r7
 8017e50:	2700      	movlt	r7, #0
 8017e52:	f1b9 0f00 	cmp.w	r9, #0
 8017e56:	bfb5      	itete	lt
 8017e58:	9b05      	ldrlt	r3, [sp, #20]
 8017e5a:	9d05      	ldrge	r5, [sp, #20]
 8017e5c:	eba3 0509 	sublt.w	r5, r3, r9
 8017e60:	464b      	movge	r3, r9
 8017e62:	bfb8      	it	lt
 8017e64:	2300      	movlt	r3, #0
 8017e66:	e77e      	b.n	8017d66 <_dtoa_r+0x6fe>
 8017e68:	9f07      	ldr	r7, [sp, #28]
 8017e6a:	9d05      	ldr	r5, [sp, #20]
 8017e6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017e6e:	e783      	b.n	8017d78 <_dtoa_r+0x710>
 8017e70:	9a07      	ldr	r2, [sp, #28]
 8017e72:	e7ab      	b.n	8017dcc <_dtoa_r+0x764>
 8017e74:	2300      	movs	r3, #0
 8017e76:	e7d4      	b.n	8017e22 <_dtoa_r+0x7ba>
 8017e78:	9b00      	ldr	r3, [sp, #0]
 8017e7a:	e7d2      	b.n	8017e22 <_dtoa_r+0x7ba>
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	9307      	str	r3, [sp, #28]
 8017e80:	693b      	ldr	r3, [r7, #16]
 8017e82:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017e86:	6918      	ldr	r0, [r3, #16]
 8017e88:	f000 fdd7 	bl	8018a3a <__hi0bits>
 8017e8c:	f1c0 0020 	rsb	r0, r0, #32
 8017e90:	4440      	add	r0, r8
 8017e92:	f010 001f 	ands.w	r0, r0, #31
 8017e96:	d047      	beq.n	8017f28 <_dtoa_r+0x8c0>
 8017e98:	f1c0 0320 	rsb	r3, r0, #32
 8017e9c:	2b04      	cmp	r3, #4
 8017e9e:	dd3b      	ble.n	8017f18 <_dtoa_r+0x8b0>
 8017ea0:	9b05      	ldr	r3, [sp, #20]
 8017ea2:	f1c0 001c 	rsb	r0, r0, #28
 8017ea6:	4403      	add	r3, r0
 8017ea8:	9305      	str	r3, [sp, #20]
 8017eaa:	4405      	add	r5, r0
 8017eac:	4480      	add	r8, r0
 8017eae:	9b05      	ldr	r3, [sp, #20]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	dd05      	ble.n	8017ec0 <_dtoa_r+0x858>
 8017eb4:	461a      	mov	r2, r3
 8017eb6:	9904      	ldr	r1, [sp, #16]
 8017eb8:	4620      	mov	r0, r4
 8017eba:	f000 fef9 	bl	8018cb0 <__lshift>
 8017ebe:	9004      	str	r0, [sp, #16]
 8017ec0:	f1b8 0f00 	cmp.w	r8, #0
 8017ec4:	dd05      	ble.n	8017ed2 <_dtoa_r+0x86a>
 8017ec6:	4639      	mov	r1, r7
 8017ec8:	4642      	mov	r2, r8
 8017eca:	4620      	mov	r0, r4
 8017ecc:	f000 fef0 	bl	8018cb0 <__lshift>
 8017ed0:	4607      	mov	r7, r0
 8017ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ed4:	b353      	cbz	r3, 8017f2c <_dtoa_r+0x8c4>
 8017ed6:	4639      	mov	r1, r7
 8017ed8:	9804      	ldr	r0, [sp, #16]
 8017eda:	f000 ff3d 	bl	8018d58 <__mcmp>
 8017ede:	2800      	cmp	r0, #0
 8017ee0:	da24      	bge.n	8017f2c <_dtoa_r+0x8c4>
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	220a      	movs	r2, #10
 8017ee6:	9904      	ldr	r1, [sp, #16]
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f000 fd2d 	bl	8018948 <__multadd>
 8017eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ef0:	9004      	str	r0, [sp, #16]
 8017ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	f000 814d 	beq.w	8018196 <_dtoa_r+0xb2e>
 8017efc:	2300      	movs	r3, #0
 8017efe:	4631      	mov	r1, r6
 8017f00:	220a      	movs	r2, #10
 8017f02:	4620      	mov	r0, r4
 8017f04:	f000 fd20 	bl	8018948 <__multadd>
 8017f08:	9b02      	ldr	r3, [sp, #8]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	4606      	mov	r6, r0
 8017f0e:	dc4f      	bgt.n	8017fb0 <_dtoa_r+0x948>
 8017f10:	9b06      	ldr	r3, [sp, #24]
 8017f12:	2b02      	cmp	r3, #2
 8017f14:	dd4c      	ble.n	8017fb0 <_dtoa_r+0x948>
 8017f16:	e011      	b.n	8017f3c <_dtoa_r+0x8d4>
 8017f18:	d0c9      	beq.n	8017eae <_dtoa_r+0x846>
 8017f1a:	9a05      	ldr	r2, [sp, #20]
 8017f1c:	331c      	adds	r3, #28
 8017f1e:	441a      	add	r2, r3
 8017f20:	9205      	str	r2, [sp, #20]
 8017f22:	441d      	add	r5, r3
 8017f24:	4498      	add	r8, r3
 8017f26:	e7c2      	b.n	8017eae <_dtoa_r+0x846>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	e7f6      	b.n	8017f1a <_dtoa_r+0x8b2>
 8017f2c:	f1b9 0f00 	cmp.w	r9, #0
 8017f30:	dc38      	bgt.n	8017fa4 <_dtoa_r+0x93c>
 8017f32:	9b06      	ldr	r3, [sp, #24]
 8017f34:	2b02      	cmp	r3, #2
 8017f36:	dd35      	ble.n	8017fa4 <_dtoa_r+0x93c>
 8017f38:	f8cd 9008 	str.w	r9, [sp, #8]
 8017f3c:	9b02      	ldr	r3, [sp, #8]
 8017f3e:	b963      	cbnz	r3, 8017f5a <_dtoa_r+0x8f2>
 8017f40:	4639      	mov	r1, r7
 8017f42:	2205      	movs	r2, #5
 8017f44:	4620      	mov	r0, r4
 8017f46:	f000 fcff 	bl	8018948 <__multadd>
 8017f4a:	4601      	mov	r1, r0
 8017f4c:	4607      	mov	r7, r0
 8017f4e:	9804      	ldr	r0, [sp, #16]
 8017f50:	f000 ff02 	bl	8018d58 <__mcmp>
 8017f54:	2800      	cmp	r0, #0
 8017f56:	f73f adcc 	bgt.w	8017af2 <_dtoa_r+0x48a>
 8017f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f5c:	465d      	mov	r5, fp
 8017f5e:	ea6f 0a03 	mvn.w	sl, r3
 8017f62:	f04f 0900 	mov.w	r9, #0
 8017f66:	4639      	mov	r1, r7
 8017f68:	4620      	mov	r0, r4
 8017f6a:	f000 fcd6 	bl	801891a <_Bfree>
 8017f6e:	2e00      	cmp	r6, #0
 8017f70:	f43f aeb7 	beq.w	8017ce2 <_dtoa_r+0x67a>
 8017f74:	f1b9 0f00 	cmp.w	r9, #0
 8017f78:	d005      	beq.n	8017f86 <_dtoa_r+0x91e>
 8017f7a:	45b1      	cmp	r9, r6
 8017f7c:	d003      	beq.n	8017f86 <_dtoa_r+0x91e>
 8017f7e:	4649      	mov	r1, r9
 8017f80:	4620      	mov	r0, r4
 8017f82:	f000 fcca 	bl	801891a <_Bfree>
 8017f86:	4631      	mov	r1, r6
 8017f88:	4620      	mov	r0, r4
 8017f8a:	f000 fcc6 	bl	801891a <_Bfree>
 8017f8e:	e6a8      	b.n	8017ce2 <_dtoa_r+0x67a>
 8017f90:	2700      	movs	r7, #0
 8017f92:	463e      	mov	r6, r7
 8017f94:	e7e1      	b.n	8017f5a <_dtoa_r+0x8f2>
 8017f96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017f9a:	463e      	mov	r6, r7
 8017f9c:	e5a9      	b.n	8017af2 <_dtoa_r+0x48a>
 8017f9e:	bf00      	nop
 8017fa0:	40240000 	.word	0x40240000
 8017fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fa6:	f8cd 9008 	str.w	r9, [sp, #8]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	f000 80fa 	beq.w	80181a4 <_dtoa_r+0xb3c>
 8017fb0:	2d00      	cmp	r5, #0
 8017fb2:	dd05      	ble.n	8017fc0 <_dtoa_r+0x958>
 8017fb4:	4631      	mov	r1, r6
 8017fb6:	462a      	mov	r2, r5
 8017fb8:	4620      	mov	r0, r4
 8017fba:	f000 fe79 	bl	8018cb0 <__lshift>
 8017fbe:	4606      	mov	r6, r0
 8017fc0:	9b07      	ldr	r3, [sp, #28]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d04c      	beq.n	8018060 <_dtoa_r+0x9f8>
 8017fc6:	6871      	ldr	r1, [r6, #4]
 8017fc8:	4620      	mov	r0, r4
 8017fca:	f000 fc72 	bl	80188b2 <_Balloc>
 8017fce:	6932      	ldr	r2, [r6, #16]
 8017fd0:	3202      	adds	r2, #2
 8017fd2:	4605      	mov	r5, r0
 8017fd4:	0092      	lsls	r2, r2, #2
 8017fd6:	f106 010c 	add.w	r1, r6, #12
 8017fda:	300c      	adds	r0, #12
 8017fdc:	f000 fc5e 	bl	801889c <memcpy>
 8017fe0:	2201      	movs	r2, #1
 8017fe2:	4629      	mov	r1, r5
 8017fe4:	4620      	mov	r0, r4
 8017fe6:	f000 fe63 	bl	8018cb0 <__lshift>
 8017fea:	9b00      	ldr	r3, [sp, #0]
 8017fec:	f8cd b014 	str.w	fp, [sp, #20]
 8017ff0:	f003 0301 	and.w	r3, r3, #1
 8017ff4:	46b1      	mov	r9, r6
 8017ff6:	9307      	str	r3, [sp, #28]
 8017ff8:	4606      	mov	r6, r0
 8017ffa:	4639      	mov	r1, r7
 8017ffc:	9804      	ldr	r0, [sp, #16]
 8017ffe:	f7ff faa5 	bl	801754c <quorem>
 8018002:	4649      	mov	r1, r9
 8018004:	4605      	mov	r5, r0
 8018006:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801800a:	9804      	ldr	r0, [sp, #16]
 801800c:	f000 fea4 	bl	8018d58 <__mcmp>
 8018010:	4632      	mov	r2, r6
 8018012:	9000      	str	r0, [sp, #0]
 8018014:	4639      	mov	r1, r7
 8018016:	4620      	mov	r0, r4
 8018018:	f000 feb8 	bl	8018d8c <__mdiff>
 801801c:	68c3      	ldr	r3, [r0, #12]
 801801e:	4602      	mov	r2, r0
 8018020:	bb03      	cbnz	r3, 8018064 <_dtoa_r+0x9fc>
 8018022:	4601      	mov	r1, r0
 8018024:	9008      	str	r0, [sp, #32]
 8018026:	9804      	ldr	r0, [sp, #16]
 8018028:	f000 fe96 	bl	8018d58 <__mcmp>
 801802c:	9a08      	ldr	r2, [sp, #32]
 801802e:	4603      	mov	r3, r0
 8018030:	4611      	mov	r1, r2
 8018032:	4620      	mov	r0, r4
 8018034:	9308      	str	r3, [sp, #32]
 8018036:	f000 fc70 	bl	801891a <_Bfree>
 801803a:	9b08      	ldr	r3, [sp, #32]
 801803c:	b9a3      	cbnz	r3, 8018068 <_dtoa_r+0xa00>
 801803e:	9a06      	ldr	r2, [sp, #24]
 8018040:	b992      	cbnz	r2, 8018068 <_dtoa_r+0xa00>
 8018042:	9a07      	ldr	r2, [sp, #28]
 8018044:	b982      	cbnz	r2, 8018068 <_dtoa_r+0xa00>
 8018046:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801804a:	d029      	beq.n	80180a0 <_dtoa_r+0xa38>
 801804c:	9b00      	ldr	r3, [sp, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	dd01      	ble.n	8018056 <_dtoa_r+0x9ee>
 8018052:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8018056:	9b05      	ldr	r3, [sp, #20]
 8018058:	1c5d      	adds	r5, r3, #1
 801805a:	f883 8000 	strb.w	r8, [r3]
 801805e:	e782      	b.n	8017f66 <_dtoa_r+0x8fe>
 8018060:	4630      	mov	r0, r6
 8018062:	e7c2      	b.n	8017fea <_dtoa_r+0x982>
 8018064:	2301      	movs	r3, #1
 8018066:	e7e3      	b.n	8018030 <_dtoa_r+0x9c8>
 8018068:	9a00      	ldr	r2, [sp, #0]
 801806a:	2a00      	cmp	r2, #0
 801806c:	db04      	blt.n	8018078 <_dtoa_r+0xa10>
 801806e:	d125      	bne.n	80180bc <_dtoa_r+0xa54>
 8018070:	9a06      	ldr	r2, [sp, #24]
 8018072:	bb1a      	cbnz	r2, 80180bc <_dtoa_r+0xa54>
 8018074:	9a07      	ldr	r2, [sp, #28]
 8018076:	bb0a      	cbnz	r2, 80180bc <_dtoa_r+0xa54>
 8018078:	2b00      	cmp	r3, #0
 801807a:	ddec      	ble.n	8018056 <_dtoa_r+0x9ee>
 801807c:	2201      	movs	r2, #1
 801807e:	9904      	ldr	r1, [sp, #16]
 8018080:	4620      	mov	r0, r4
 8018082:	f000 fe15 	bl	8018cb0 <__lshift>
 8018086:	4639      	mov	r1, r7
 8018088:	9004      	str	r0, [sp, #16]
 801808a:	f000 fe65 	bl	8018d58 <__mcmp>
 801808e:	2800      	cmp	r0, #0
 8018090:	dc03      	bgt.n	801809a <_dtoa_r+0xa32>
 8018092:	d1e0      	bne.n	8018056 <_dtoa_r+0x9ee>
 8018094:	f018 0f01 	tst.w	r8, #1
 8018098:	d0dd      	beq.n	8018056 <_dtoa_r+0x9ee>
 801809a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801809e:	d1d8      	bne.n	8018052 <_dtoa_r+0x9ea>
 80180a0:	9b05      	ldr	r3, [sp, #20]
 80180a2:	9a05      	ldr	r2, [sp, #20]
 80180a4:	1c5d      	adds	r5, r3, #1
 80180a6:	2339      	movs	r3, #57	; 0x39
 80180a8:	7013      	strb	r3, [r2, #0]
 80180aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80180ae:	2b39      	cmp	r3, #57	; 0x39
 80180b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80180b4:	d04f      	beq.n	8018156 <_dtoa_r+0xaee>
 80180b6:	3301      	adds	r3, #1
 80180b8:	7013      	strb	r3, [r2, #0]
 80180ba:	e754      	b.n	8017f66 <_dtoa_r+0x8fe>
 80180bc:	9a05      	ldr	r2, [sp, #20]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	f102 0501 	add.w	r5, r2, #1
 80180c4:	dd06      	ble.n	80180d4 <_dtoa_r+0xa6c>
 80180c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80180ca:	d0e9      	beq.n	80180a0 <_dtoa_r+0xa38>
 80180cc:	f108 0801 	add.w	r8, r8, #1
 80180d0:	9b05      	ldr	r3, [sp, #20]
 80180d2:	e7c2      	b.n	801805a <_dtoa_r+0x9f2>
 80180d4:	9a02      	ldr	r2, [sp, #8]
 80180d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80180da:	eba5 030b 	sub.w	r3, r5, fp
 80180de:	4293      	cmp	r3, r2
 80180e0:	d021      	beq.n	8018126 <_dtoa_r+0xabe>
 80180e2:	2300      	movs	r3, #0
 80180e4:	220a      	movs	r2, #10
 80180e6:	9904      	ldr	r1, [sp, #16]
 80180e8:	4620      	mov	r0, r4
 80180ea:	f000 fc2d 	bl	8018948 <__multadd>
 80180ee:	45b1      	cmp	r9, r6
 80180f0:	9004      	str	r0, [sp, #16]
 80180f2:	f04f 0300 	mov.w	r3, #0
 80180f6:	f04f 020a 	mov.w	r2, #10
 80180fa:	4649      	mov	r1, r9
 80180fc:	4620      	mov	r0, r4
 80180fe:	d105      	bne.n	801810c <_dtoa_r+0xaa4>
 8018100:	f000 fc22 	bl	8018948 <__multadd>
 8018104:	4681      	mov	r9, r0
 8018106:	4606      	mov	r6, r0
 8018108:	9505      	str	r5, [sp, #20]
 801810a:	e776      	b.n	8017ffa <_dtoa_r+0x992>
 801810c:	f000 fc1c 	bl	8018948 <__multadd>
 8018110:	4631      	mov	r1, r6
 8018112:	4681      	mov	r9, r0
 8018114:	2300      	movs	r3, #0
 8018116:	220a      	movs	r2, #10
 8018118:	4620      	mov	r0, r4
 801811a:	f000 fc15 	bl	8018948 <__multadd>
 801811e:	4606      	mov	r6, r0
 8018120:	e7f2      	b.n	8018108 <_dtoa_r+0xaa0>
 8018122:	f04f 0900 	mov.w	r9, #0
 8018126:	2201      	movs	r2, #1
 8018128:	9904      	ldr	r1, [sp, #16]
 801812a:	4620      	mov	r0, r4
 801812c:	f000 fdc0 	bl	8018cb0 <__lshift>
 8018130:	4639      	mov	r1, r7
 8018132:	9004      	str	r0, [sp, #16]
 8018134:	f000 fe10 	bl	8018d58 <__mcmp>
 8018138:	2800      	cmp	r0, #0
 801813a:	dcb6      	bgt.n	80180aa <_dtoa_r+0xa42>
 801813c:	d102      	bne.n	8018144 <_dtoa_r+0xadc>
 801813e:	f018 0f01 	tst.w	r8, #1
 8018142:	d1b2      	bne.n	80180aa <_dtoa_r+0xa42>
 8018144:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018148:	2b30      	cmp	r3, #48	; 0x30
 801814a:	f105 32ff 	add.w	r2, r5, #4294967295
 801814e:	f47f af0a 	bne.w	8017f66 <_dtoa_r+0x8fe>
 8018152:	4615      	mov	r5, r2
 8018154:	e7f6      	b.n	8018144 <_dtoa_r+0xadc>
 8018156:	4593      	cmp	fp, r2
 8018158:	d105      	bne.n	8018166 <_dtoa_r+0xafe>
 801815a:	2331      	movs	r3, #49	; 0x31
 801815c:	f10a 0a01 	add.w	sl, sl, #1
 8018160:	f88b 3000 	strb.w	r3, [fp]
 8018164:	e6ff      	b.n	8017f66 <_dtoa_r+0x8fe>
 8018166:	4615      	mov	r5, r2
 8018168:	e79f      	b.n	80180aa <_dtoa_r+0xa42>
 801816a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80181d0 <_dtoa_r+0xb68>
 801816e:	e007      	b.n	8018180 <_dtoa_r+0xb18>
 8018170:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018172:	f8df b060 	ldr.w	fp, [pc, #96]	; 80181d4 <_dtoa_r+0xb6c>
 8018176:	b11b      	cbz	r3, 8018180 <_dtoa_r+0xb18>
 8018178:	f10b 0308 	add.w	r3, fp, #8
 801817c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801817e:	6013      	str	r3, [r2, #0]
 8018180:	4658      	mov	r0, fp
 8018182:	b017      	add	sp, #92	; 0x5c
 8018184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018188:	9b06      	ldr	r3, [sp, #24]
 801818a:	2b01      	cmp	r3, #1
 801818c:	f77f ae35 	ble.w	8017dfa <_dtoa_r+0x792>
 8018190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018192:	9307      	str	r3, [sp, #28]
 8018194:	e649      	b.n	8017e2a <_dtoa_r+0x7c2>
 8018196:	9b02      	ldr	r3, [sp, #8]
 8018198:	2b00      	cmp	r3, #0
 801819a:	dc03      	bgt.n	80181a4 <_dtoa_r+0xb3c>
 801819c:	9b06      	ldr	r3, [sp, #24]
 801819e:	2b02      	cmp	r3, #2
 80181a0:	f73f aecc 	bgt.w	8017f3c <_dtoa_r+0x8d4>
 80181a4:	465d      	mov	r5, fp
 80181a6:	4639      	mov	r1, r7
 80181a8:	9804      	ldr	r0, [sp, #16]
 80181aa:	f7ff f9cf 	bl	801754c <quorem>
 80181ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80181b2:	f805 8b01 	strb.w	r8, [r5], #1
 80181b6:	9a02      	ldr	r2, [sp, #8]
 80181b8:	eba5 030b 	sub.w	r3, r5, fp
 80181bc:	429a      	cmp	r2, r3
 80181be:	ddb0      	ble.n	8018122 <_dtoa_r+0xaba>
 80181c0:	2300      	movs	r3, #0
 80181c2:	220a      	movs	r2, #10
 80181c4:	9904      	ldr	r1, [sp, #16]
 80181c6:	4620      	mov	r0, r4
 80181c8:	f000 fbbe 	bl	8018948 <__multadd>
 80181cc:	9004      	str	r0, [sp, #16]
 80181ce:	e7ea      	b.n	80181a6 <_dtoa_r+0xb3e>
 80181d0:	0801a663 	.word	0x0801a663
 80181d4:	0801a528 	.word	0x0801a528

080181d8 <rshift>:
 80181d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181da:	6906      	ldr	r6, [r0, #16]
 80181dc:	114b      	asrs	r3, r1, #5
 80181de:	429e      	cmp	r6, r3
 80181e0:	f100 0414 	add.w	r4, r0, #20
 80181e4:	dd30      	ble.n	8018248 <rshift+0x70>
 80181e6:	f011 011f 	ands.w	r1, r1, #31
 80181ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80181ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80181f2:	d108      	bne.n	8018206 <rshift+0x2e>
 80181f4:	4621      	mov	r1, r4
 80181f6:	42b2      	cmp	r2, r6
 80181f8:	460b      	mov	r3, r1
 80181fa:	d211      	bcs.n	8018220 <rshift+0x48>
 80181fc:	f852 3b04 	ldr.w	r3, [r2], #4
 8018200:	f841 3b04 	str.w	r3, [r1], #4
 8018204:	e7f7      	b.n	80181f6 <rshift+0x1e>
 8018206:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801820a:	f1c1 0c20 	rsb	ip, r1, #32
 801820e:	40cd      	lsrs	r5, r1
 8018210:	3204      	adds	r2, #4
 8018212:	4623      	mov	r3, r4
 8018214:	42b2      	cmp	r2, r6
 8018216:	4617      	mov	r7, r2
 8018218:	d30c      	bcc.n	8018234 <rshift+0x5c>
 801821a:	601d      	str	r5, [r3, #0]
 801821c:	b105      	cbz	r5, 8018220 <rshift+0x48>
 801821e:	3304      	adds	r3, #4
 8018220:	1b1a      	subs	r2, r3, r4
 8018222:	42a3      	cmp	r3, r4
 8018224:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018228:	bf08      	it	eq
 801822a:	2300      	moveq	r3, #0
 801822c:	6102      	str	r2, [r0, #16]
 801822e:	bf08      	it	eq
 8018230:	6143      	streq	r3, [r0, #20]
 8018232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018234:	683f      	ldr	r7, [r7, #0]
 8018236:	fa07 f70c 	lsl.w	r7, r7, ip
 801823a:	433d      	orrs	r5, r7
 801823c:	f843 5b04 	str.w	r5, [r3], #4
 8018240:	f852 5b04 	ldr.w	r5, [r2], #4
 8018244:	40cd      	lsrs	r5, r1
 8018246:	e7e5      	b.n	8018214 <rshift+0x3c>
 8018248:	4623      	mov	r3, r4
 801824a:	e7e9      	b.n	8018220 <rshift+0x48>

0801824c <__hexdig_fun>:
 801824c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018250:	2b09      	cmp	r3, #9
 8018252:	d802      	bhi.n	801825a <__hexdig_fun+0xe>
 8018254:	3820      	subs	r0, #32
 8018256:	b2c0      	uxtb	r0, r0
 8018258:	4770      	bx	lr
 801825a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801825e:	2b05      	cmp	r3, #5
 8018260:	d801      	bhi.n	8018266 <__hexdig_fun+0x1a>
 8018262:	3847      	subs	r0, #71	; 0x47
 8018264:	e7f7      	b.n	8018256 <__hexdig_fun+0xa>
 8018266:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801826a:	2b05      	cmp	r3, #5
 801826c:	d801      	bhi.n	8018272 <__hexdig_fun+0x26>
 801826e:	3827      	subs	r0, #39	; 0x27
 8018270:	e7f1      	b.n	8018256 <__hexdig_fun+0xa>
 8018272:	2000      	movs	r0, #0
 8018274:	4770      	bx	lr

08018276 <__gethex>:
 8018276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801827a:	b08b      	sub	sp, #44	; 0x2c
 801827c:	468a      	mov	sl, r1
 801827e:	9002      	str	r0, [sp, #8]
 8018280:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018282:	9306      	str	r3, [sp, #24]
 8018284:	4690      	mov	r8, r2
 8018286:	f000 fadf 	bl	8018848 <__localeconv_l>
 801828a:	6803      	ldr	r3, [r0, #0]
 801828c:	9303      	str	r3, [sp, #12]
 801828e:	4618      	mov	r0, r3
 8018290:	f7e7 ffb6 	bl	8000200 <strlen>
 8018294:	9b03      	ldr	r3, [sp, #12]
 8018296:	9001      	str	r0, [sp, #4]
 8018298:	4403      	add	r3, r0
 801829a:	f04f 0b00 	mov.w	fp, #0
 801829e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80182a2:	9307      	str	r3, [sp, #28]
 80182a4:	f8da 3000 	ldr.w	r3, [sl]
 80182a8:	3302      	adds	r3, #2
 80182aa:	461f      	mov	r7, r3
 80182ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80182b0:	2830      	cmp	r0, #48	; 0x30
 80182b2:	d06c      	beq.n	801838e <__gethex+0x118>
 80182b4:	f7ff ffca 	bl	801824c <__hexdig_fun>
 80182b8:	4604      	mov	r4, r0
 80182ba:	2800      	cmp	r0, #0
 80182bc:	d16a      	bne.n	8018394 <__gethex+0x11e>
 80182be:	9a01      	ldr	r2, [sp, #4]
 80182c0:	9903      	ldr	r1, [sp, #12]
 80182c2:	4638      	mov	r0, r7
 80182c4:	f001 fc40 	bl	8019b48 <strncmp>
 80182c8:	2800      	cmp	r0, #0
 80182ca:	d166      	bne.n	801839a <__gethex+0x124>
 80182cc:	9b01      	ldr	r3, [sp, #4]
 80182ce:	5cf8      	ldrb	r0, [r7, r3]
 80182d0:	18fe      	adds	r6, r7, r3
 80182d2:	f7ff ffbb 	bl	801824c <__hexdig_fun>
 80182d6:	2800      	cmp	r0, #0
 80182d8:	d062      	beq.n	80183a0 <__gethex+0x12a>
 80182da:	4633      	mov	r3, r6
 80182dc:	7818      	ldrb	r0, [r3, #0]
 80182de:	2830      	cmp	r0, #48	; 0x30
 80182e0:	461f      	mov	r7, r3
 80182e2:	f103 0301 	add.w	r3, r3, #1
 80182e6:	d0f9      	beq.n	80182dc <__gethex+0x66>
 80182e8:	f7ff ffb0 	bl	801824c <__hexdig_fun>
 80182ec:	fab0 f580 	clz	r5, r0
 80182f0:	096d      	lsrs	r5, r5, #5
 80182f2:	4634      	mov	r4, r6
 80182f4:	f04f 0b01 	mov.w	fp, #1
 80182f8:	463a      	mov	r2, r7
 80182fa:	4616      	mov	r6, r2
 80182fc:	3201      	adds	r2, #1
 80182fe:	7830      	ldrb	r0, [r6, #0]
 8018300:	f7ff ffa4 	bl	801824c <__hexdig_fun>
 8018304:	2800      	cmp	r0, #0
 8018306:	d1f8      	bne.n	80182fa <__gethex+0x84>
 8018308:	9a01      	ldr	r2, [sp, #4]
 801830a:	9903      	ldr	r1, [sp, #12]
 801830c:	4630      	mov	r0, r6
 801830e:	f001 fc1b 	bl	8019b48 <strncmp>
 8018312:	b950      	cbnz	r0, 801832a <__gethex+0xb4>
 8018314:	b954      	cbnz	r4, 801832c <__gethex+0xb6>
 8018316:	9b01      	ldr	r3, [sp, #4]
 8018318:	18f4      	adds	r4, r6, r3
 801831a:	4622      	mov	r2, r4
 801831c:	4616      	mov	r6, r2
 801831e:	3201      	adds	r2, #1
 8018320:	7830      	ldrb	r0, [r6, #0]
 8018322:	f7ff ff93 	bl	801824c <__hexdig_fun>
 8018326:	2800      	cmp	r0, #0
 8018328:	d1f8      	bne.n	801831c <__gethex+0xa6>
 801832a:	b10c      	cbz	r4, 8018330 <__gethex+0xba>
 801832c:	1ba4      	subs	r4, r4, r6
 801832e:	00a4      	lsls	r4, r4, #2
 8018330:	7833      	ldrb	r3, [r6, #0]
 8018332:	2b50      	cmp	r3, #80	; 0x50
 8018334:	d001      	beq.n	801833a <__gethex+0xc4>
 8018336:	2b70      	cmp	r3, #112	; 0x70
 8018338:	d140      	bne.n	80183bc <__gethex+0x146>
 801833a:	7873      	ldrb	r3, [r6, #1]
 801833c:	2b2b      	cmp	r3, #43	; 0x2b
 801833e:	d031      	beq.n	80183a4 <__gethex+0x12e>
 8018340:	2b2d      	cmp	r3, #45	; 0x2d
 8018342:	d033      	beq.n	80183ac <__gethex+0x136>
 8018344:	1c71      	adds	r1, r6, #1
 8018346:	f04f 0900 	mov.w	r9, #0
 801834a:	7808      	ldrb	r0, [r1, #0]
 801834c:	f7ff ff7e 	bl	801824c <__hexdig_fun>
 8018350:	1e43      	subs	r3, r0, #1
 8018352:	b2db      	uxtb	r3, r3
 8018354:	2b18      	cmp	r3, #24
 8018356:	d831      	bhi.n	80183bc <__gethex+0x146>
 8018358:	f1a0 0210 	sub.w	r2, r0, #16
 801835c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018360:	f7ff ff74 	bl	801824c <__hexdig_fun>
 8018364:	1e43      	subs	r3, r0, #1
 8018366:	b2db      	uxtb	r3, r3
 8018368:	2b18      	cmp	r3, #24
 801836a:	d922      	bls.n	80183b2 <__gethex+0x13c>
 801836c:	f1b9 0f00 	cmp.w	r9, #0
 8018370:	d000      	beq.n	8018374 <__gethex+0xfe>
 8018372:	4252      	negs	r2, r2
 8018374:	4414      	add	r4, r2
 8018376:	f8ca 1000 	str.w	r1, [sl]
 801837a:	b30d      	cbz	r5, 80183c0 <__gethex+0x14a>
 801837c:	f1bb 0f00 	cmp.w	fp, #0
 8018380:	bf0c      	ite	eq
 8018382:	2706      	moveq	r7, #6
 8018384:	2700      	movne	r7, #0
 8018386:	4638      	mov	r0, r7
 8018388:	b00b      	add	sp, #44	; 0x2c
 801838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801838e:	f10b 0b01 	add.w	fp, fp, #1
 8018392:	e78a      	b.n	80182aa <__gethex+0x34>
 8018394:	2500      	movs	r5, #0
 8018396:	462c      	mov	r4, r5
 8018398:	e7ae      	b.n	80182f8 <__gethex+0x82>
 801839a:	463e      	mov	r6, r7
 801839c:	2501      	movs	r5, #1
 801839e:	e7c7      	b.n	8018330 <__gethex+0xba>
 80183a0:	4604      	mov	r4, r0
 80183a2:	e7fb      	b.n	801839c <__gethex+0x126>
 80183a4:	f04f 0900 	mov.w	r9, #0
 80183a8:	1cb1      	adds	r1, r6, #2
 80183aa:	e7ce      	b.n	801834a <__gethex+0xd4>
 80183ac:	f04f 0901 	mov.w	r9, #1
 80183b0:	e7fa      	b.n	80183a8 <__gethex+0x132>
 80183b2:	230a      	movs	r3, #10
 80183b4:	fb03 0202 	mla	r2, r3, r2, r0
 80183b8:	3a10      	subs	r2, #16
 80183ba:	e7cf      	b.n	801835c <__gethex+0xe6>
 80183bc:	4631      	mov	r1, r6
 80183be:	e7da      	b.n	8018376 <__gethex+0x100>
 80183c0:	1bf3      	subs	r3, r6, r7
 80183c2:	3b01      	subs	r3, #1
 80183c4:	4629      	mov	r1, r5
 80183c6:	2b07      	cmp	r3, #7
 80183c8:	dc49      	bgt.n	801845e <__gethex+0x1e8>
 80183ca:	9802      	ldr	r0, [sp, #8]
 80183cc:	f000 fa71 	bl	80188b2 <_Balloc>
 80183d0:	9b01      	ldr	r3, [sp, #4]
 80183d2:	f100 0914 	add.w	r9, r0, #20
 80183d6:	f04f 0b00 	mov.w	fp, #0
 80183da:	f1c3 0301 	rsb	r3, r3, #1
 80183de:	4605      	mov	r5, r0
 80183e0:	f8cd 9010 	str.w	r9, [sp, #16]
 80183e4:	46da      	mov	sl, fp
 80183e6:	9308      	str	r3, [sp, #32]
 80183e8:	42b7      	cmp	r7, r6
 80183ea:	d33b      	bcc.n	8018464 <__gethex+0x1ee>
 80183ec:	9804      	ldr	r0, [sp, #16]
 80183ee:	f840 ab04 	str.w	sl, [r0], #4
 80183f2:	eba0 0009 	sub.w	r0, r0, r9
 80183f6:	1080      	asrs	r0, r0, #2
 80183f8:	6128      	str	r0, [r5, #16]
 80183fa:	0147      	lsls	r7, r0, #5
 80183fc:	4650      	mov	r0, sl
 80183fe:	f000 fb1c 	bl	8018a3a <__hi0bits>
 8018402:	f8d8 6000 	ldr.w	r6, [r8]
 8018406:	1a3f      	subs	r7, r7, r0
 8018408:	42b7      	cmp	r7, r6
 801840a:	dd64      	ble.n	80184d6 <__gethex+0x260>
 801840c:	1bbf      	subs	r7, r7, r6
 801840e:	4639      	mov	r1, r7
 8018410:	4628      	mov	r0, r5
 8018412:	f000 fe2b 	bl	801906c <__any_on>
 8018416:	4682      	mov	sl, r0
 8018418:	b178      	cbz	r0, 801843a <__gethex+0x1c4>
 801841a:	1e7b      	subs	r3, r7, #1
 801841c:	1159      	asrs	r1, r3, #5
 801841e:	f003 021f 	and.w	r2, r3, #31
 8018422:	f04f 0a01 	mov.w	sl, #1
 8018426:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801842a:	fa0a f202 	lsl.w	r2, sl, r2
 801842e:	420a      	tst	r2, r1
 8018430:	d003      	beq.n	801843a <__gethex+0x1c4>
 8018432:	4553      	cmp	r3, sl
 8018434:	dc46      	bgt.n	80184c4 <__gethex+0x24e>
 8018436:	f04f 0a02 	mov.w	sl, #2
 801843a:	4639      	mov	r1, r7
 801843c:	4628      	mov	r0, r5
 801843e:	f7ff fecb 	bl	80181d8 <rshift>
 8018442:	443c      	add	r4, r7
 8018444:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018448:	42a3      	cmp	r3, r4
 801844a:	da52      	bge.n	80184f2 <__gethex+0x27c>
 801844c:	4629      	mov	r1, r5
 801844e:	9802      	ldr	r0, [sp, #8]
 8018450:	f000 fa63 	bl	801891a <_Bfree>
 8018454:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018456:	2300      	movs	r3, #0
 8018458:	6013      	str	r3, [r2, #0]
 801845a:	27a3      	movs	r7, #163	; 0xa3
 801845c:	e793      	b.n	8018386 <__gethex+0x110>
 801845e:	3101      	adds	r1, #1
 8018460:	105b      	asrs	r3, r3, #1
 8018462:	e7b0      	b.n	80183c6 <__gethex+0x150>
 8018464:	1e73      	subs	r3, r6, #1
 8018466:	9305      	str	r3, [sp, #20]
 8018468:	9a07      	ldr	r2, [sp, #28]
 801846a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801846e:	4293      	cmp	r3, r2
 8018470:	d018      	beq.n	80184a4 <__gethex+0x22e>
 8018472:	f1bb 0f20 	cmp.w	fp, #32
 8018476:	d107      	bne.n	8018488 <__gethex+0x212>
 8018478:	9b04      	ldr	r3, [sp, #16]
 801847a:	f8c3 a000 	str.w	sl, [r3]
 801847e:	3304      	adds	r3, #4
 8018480:	f04f 0a00 	mov.w	sl, #0
 8018484:	9304      	str	r3, [sp, #16]
 8018486:	46d3      	mov	fp, sl
 8018488:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801848c:	f7ff fede 	bl	801824c <__hexdig_fun>
 8018490:	f000 000f 	and.w	r0, r0, #15
 8018494:	fa00 f00b 	lsl.w	r0, r0, fp
 8018498:	ea4a 0a00 	orr.w	sl, sl, r0
 801849c:	f10b 0b04 	add.w	fp, fp, #4
 80184a0:	9b05      	ldr	r3, [sp, #20]
 80184a2:	e00d      	b.n	80184c0 <__gethex+0x24a>
 80184a4:	9b05      	ldr	r3, [sp, #20]
 80184a6:	9a08      	ldr	r2, [sp, #32]
 80184a8:	4413      	add	r3, r2
 80184aa:	42bb      	cmp	r3, r7
 80184ac:	d3e1      	bcc.n	8018472 <__gethex+0x1fc>
 80184ae:	4618      	mov	r0, r3
 80184b0:	9a01      	ldr	r2, [sp, #4]
 80184b2:	9903      	ldr	r1, [sp, #12]
 80184b4:	9309      	str	r3, [sp, #36]	; 0x24
 80184b6:	f001 fb47 	bl	8019b48 <strncmp>
 80184ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184bc:	2800      	cmp	r0, #0
 80184be:	d1d8      	bne.n	8018472 <__gethex+0x1fc>
 80184c0:	461e      	mov	r6, r3
 80184c2:	e791      	b.n	80183e8 <__gethex+0x172>
 80184c4:	1eb9      	subs	r1, r7, #2
 80184c6:	4628      	mov	r0, r5
 80184c8:	f000 fdd0 	bl	801906c <__any_on>
 80184cc:	2800      	cmp	r0, #0
 80184ce:	d0b2      	beq.n	8018436 <__gethex+0x1c0>
 80184d0:	f04f 0a03 	mov.w	sl, #3
 80184d4:	e7b1      	b.n	801843a <__gethex+0x1c4>
 80184d6:	da09      	bge.n	80184ec <__gethex+0x276>
 80184d8:	1bf7      	subs	r7, r6, r7
 80184da:	4629      	mov	r1, r5
 80184dc:	463a      	mov	r2, r7
 80184de:	9802      	ldr	r0, [sp, #8]
 80184e0:	f000 fbe6 	bl	8018cb0 <__lshift>
 80184e4:	1be4      	subs	r4, r4, r7
 80184e6:	4605      	mov	r5, r0
 80184e8:	f100 0914 	add.w	r9, r0, #20
 80184ec:	f04f 0a00 	mov.w	sl, #0
 80184f0:	e7a8      	b.n	8018444 <__gethex+0x1ce>
 80184f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80184f6:	42a0      	cmp	r0, r4
 80184f8:	dd6a      	ble.n	80185d0 <__gethex+0x35a>
 80184fa:	1b04      	subs	r4, r0, r4
 80184fc:	42a6      	cmp	r6, r4
 80184fe:	dc2e      	bgt.n	801855e <__gethex+0x2e8>
 8018500:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018504:	2b02      	cmp	r3, #2
 8018506:	d022      	beq.n	801854e <__gethex+0x2d8>
 8018508:	2b03      	cmp	r3, #3
 801850a:	d024      	beq.n	8018556 <__gethex+0x2e0>
 801850c:	2b01      	cmp	r3, #1
 801850e:	d115      	bne.n	801853c <__gethex+0x2c6>
 8018510:	42a6      	cmp	r6, r4
 8018512:	d113      	bne.n	801853c <__gethex+0x2c6>
 8018514:	2e01      	cmp	r6, #1
 8018516:	dc0b      	bgt.n	8018530 <__gethex+0x2ba>
 8018518:	9a06      	ldr	r2, [sp, #24]
 801851a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801851e:	6013      	str	r3, [r2, #0]
 8018520:	2301      	movs	r3, #1
 8018522:	612b      	str	r3, [r5, #16]
 8018524:	f8c9 3000 	str.w	r3, [r9]
 8018528:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801852a:	2762      	movs	r7, #98	; 0x62
 801852c:	601d      	str	r5, [r3, #0]
 801852e:	e72a      	b.n	8018386 <__gethex+0x110>
 8018530:	1e71      	subs	r1, r6, #1
 8018532:	4628      	mov	r0, r5
 8018534:	f000 fd9a 	bl	801906c <__any_on>
 8018538:	2800      	cmp	r0, #0
 801853a:	d1ed      	bne.n	8018518 <__gethex+0x2a2>
 801853c:	4629      	mov	r1, r5
 801853e:	9802      	ldr	r0, [sp, #8]
 8018540:	f000 f9eb 	bl	801891a <_Bfree>
 8018544:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018546:	2300      	movs	r3, #0
 8018548:	6013      	str	r3, [r2, #0]
 801854a:	2750      	movs	r7, #80	; 0x50
 801854c:	e71b      	b.n	8018386 <__gethex+0x110>
 801854e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018550:	2b00      	cmp	r3, #0
 8018552:	d0e1      	beq.n	8018518 <__gethex+0x2a2>
 8018554:	e7f2      	b.n	801853c <__gethex+0x2c6>
 8018556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018558:	2b00      	cmp	r3, #0
 801855a:	d1dd      	bne.n	8018518 <__gethex+0x2a2>
 801855c:	e7ee      	b.n	801853c <__gethex+0x2c6>
 801855e:	1e67      	subs	r7, r4, #1
 8018560:	f1ba 0f00 	cmp.w	sl, #0
 8018564:	d131      	bne.n	80185ca <__gethex+0x354>
 8018566:	b127      	cbz	r7, 8018572 <__gethex+0x2fc>
 8018568:	4639      	mov	r1, r7
 801856a:	4628      	mov	r0, r5
 801856c:	f000 fd7e 	bl	801906c <__any_on>
 8018570:	4682      	mov	sl, r0
 8018572:	117a      	asrs	r2, r7, #5
 8018574:	2301      	movs	r3, #1
 8018576:	f007 071f 	and.w	r7, r7, #31
 801857a:	fa03 f707 	lsl.w	r7, r3, r7
 801857e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018582:	4621      	mov	r1, r4
 8018584:	421f      	tst	r7, r3
 8018586:	4628      	mov	r0, r5
 8018588:	bf18      	it	ne
 801858a:	f04a 0a02 	orrne.w	sl, sl, #2
 801858e:	1b36      	subs	r6, r6, r4
 8018590:	f7ff fe22 	bl	80181d8 <rshift>
 8018594:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018598:	2702      	movs	r7, #2
 801859a:	f1ba 0f00 	cmp.w	sl, #0
 801859e:	d048      	beq.n	8018632 <__gethex+0x3bc>
 80185a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80185a4:	2b02      	cmp	r3, #2
 80185a6:	d015      	beq.n	80185d4 <__gethex+0x35e>
 80185a8:	2b03      	cmp	r3, #3
 80185aa:	d017      	beq.n	80185dc <__gethex+0x366>
 80185ac:	2b01      	cmp	r3, #1
 80185ae:	d109      	bne.n	80185c4 <__gethex+0x34e>
 80185b0:	f01a 0f02 	tst.w	sl, #2
 80185b4:	d006      	beq.n	80185c4 <__gethex+0x34e>
 80185b6:	f8d9 3000 	ldr.w	r3, [r9]
 80185ba:	ea4a 0a03 	orr.w	sl, sl, r3
 80185be:	f01a 0f01 	tst.w	sl, #1
 80185c2:	d10e      	bne.n	80185e2 <__gethex+0x36c>
 80185c4:	f047 0710 	orr.w	r7, r7, #16
 80185c8:	e033      	b.n	8018632 <__gethex+0x3bc>
 80185ca:	f04f 0a01 	mov.w	sl, #1
 80185ce:	e7d0      	b.n	8018572 <__gethex+0x2fc>
 80185d0:	2701      	movs	r7, #1
 80185d2:	e7e2      	b.n	801859a <__gethex+0x324>
 80185d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185d6:	f1c3 0301 	rsb	r3, r3, #1
 80185da:	9315      	str	r3, [sp, #84]	; 0x54
 80185dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d0f0      	beq.n	80185c4 <__gethex+0x34e>
 80185e2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80185e6:	f105 0314 	add.w	r3, r5, #20
 80185ea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80185ee:	eb03 010a 	add.w	r1, r3, sl
 80185f2:	f04f 0c00 	mov.w	ip, #0
 80185f6:	4618      	mov	r0, r3
 80185f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80185fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018600:	d01c      	beq.n	801863c <__gethex+0x3c6>
 8018602:	3201      	adds	r2, #1
 8018604:	6002      	str	r2, [r0, #0]
 8018606:	2f02      	cmp	r7, #2
 8018608:	f105 0314 	add.w	r3, r5, #20
 801860c:	d138      	bne.n	8018680 <__gethex+0x40a>
 801860e:	f8d8 2000 	ldr.w	r2, [r8]
 8018612:	3a01      	subs	r2, #1
 8018614:	42b2      	cmp	r2, r6
 8018616:	d10a      	bne.n	801862e <__gethex+0x3b8>
 8018618:	1171      	asrs	r1, r6, #5
 801861a:	2201      	movs	r2, #1
 801861c:	f006 061f 	and.w	r6, r6, #31
 8018620:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018624:	fa02 f606 	lsl.w	r6, r2, r6
 8018628:	421e      	tst	r6, r3
 801862a:	bf18      	it	ne
 801862c:	4617      	movne	r7, r2
 801862e:	f047 0720 	orr.w	r7, r7, #32
 8018632:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018634:	601d      	str	r5, [r3, #0]
 8018636:	9b06      	ldr	r3, [sp, #24]
 8018638:	601c      	str	r4, [r3, #0]
 801863a:	e6a4      	b.n	8018386 <__gethex+0x110>
 801863c:	4299      	cmp	r1, r3
 801863e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018642:	d8d8      	bhi.n	80185f6 <__gethex+0x380>
 8018644:	68ab      	ldr	r3, [r5, #8]
 8018646:	4599      	cmp	r9, r3
 8018648:	db12      	blt.n	8018670 <__gethex+0x3fa>
 801864a:	6869      	ldr	r1, [r5, #4]
 801864c:	9802      	ldr	r0, [sp, #8]
 801864e:	3101      	adds	r1, #1
 8018650:	f000 f92f 	bl	80188b2 <_Balloc>
 8018654:	692a      	ldr	r2, [r5, #16]
 8018656:	3202      	adds	r2, #2
 8018658:	f105 010c 	add.w	r1, r5, #12
 801865c:	4683      	mov	fp, r0
 801865e:	0092      	lsls	r2, r2, #2
 8018660:	300c      	adds	r0, #12
 8018662:	f000 f91b 	bl	801889c <memcpy>
 8018666:	4629      	mov	r1, r5
 8018668:	9802      	ldr	r0, [sp, #8]
 801866a:	f000 f956 	bl	801891a <_Bfree>
 801866e:	465d      	mov	r5, fp
 8018670:	692b      	ldr	r3, [r5, #16]
 8018672:	1c5a      	adds	r2, r3, #1
 8018674:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018678:	612a      	str	r2, [r5, #16]
 801867a:	2201      	movs	r2, #1
 801867c:	615a      	str	r2, [r3, #20]
 801867e:	e7c2      	b.n	8018606 <__gethex+0x390>
 8018680:	692a      	ldr	r2, [r5, #16]
 8018682:	454a      	cmp	r2, r9
 8018684:	dd0b      	ble.n	801869e <__gethex+0x428>
 8018686:	2101      	movs	r1, #1
 8018688:	4628      	mov	r0, r5
 801868a:	f7ff fda5 	bl	80181d8 <rshift>
 801868e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018692:	3401      	adds	r4, #1
 8018694:	42a3      	cmp	r3, r4
 8018696:	f6ff aed9 	blt.w	801844c <__gethex+0x1d6>
 801869a:	2701      	movs	r7, #1
 801869c:	e7c7      	b.n	801862e <__gethex+0x3b8>
 801869e:	f016 061f 	ands.w	r6, r6, #31
 80186a2:	d0fa      	beq.n	801869a <__gethex+0x424>
 80186a4:	449a      	add	sl, r3
 80186a6:	f1c6 0620 	rsb	r6, r6, #32
 80186aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80186ae:	f000 f9c4 	bl	8018a3a <__hi0bits>
 80186b2:	42b0      	cmp	r0, r6
 80186b4:	dbe7      	blt.n	8018686 <__gethex+0x410>
 80186b6:	e7f0      	b.n	801869a <__gethex+0x424>

080186b8 <L_shift>:
 80186b8:	f1c2 0208 	rsb	r2, r2, #8
 80186bc:	0092      	lsls	r2, r2, #2
 80186be:	b570      	push	{r4, r5, r6, lr}
 80186c0:	f1c2 0620 	rsb	r6, r2, #32
 80186c4:	6843      	ldr	r3, [r0, #4]
 80186c6:	6804      	ldr	r4, [r0, #0]
 80186c8:	fa03 f506 	lsl.w	r5, r3, r6
 80186cc:	432c      	orrs	r4, r5
 80186ce:	40d3      	lsrs	r3, r2
 80186d0:	6004      	str	r4, [r0, #0]
 80186d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80186d6:	4288      	cmp	r0, r1
 80186d8:	d3f4      	bcc.n	80186c4 <L_shift+0xc>
 80186da:	bd70      	pop	{r4, r5, r6, pc}

080186dc <__match>:
 80186dc:	b530      	push	{r4, r5, lr}
 80186de:	6803      	ldr	r3, [r0, #0]
 80186e0:	3301      	adds	r3, #1
 80186e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186e6:	b914      	cbnz	r4, 80186ee <__match+0x12>
 80186e8:	6003      	str	r3, [r0, #0]
 80186ea:	2001      	movs	r0, #1
 80186ec:	bd30      	pop	{r4, r5, pc}
 80186ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80186f6:	2d19      	cmp	r5, #25
 80186f8:	bf98      	it	ls
 80186fa:	3220      	addls	r2, #32
 80186fc:	42a2      	cmp	r2, r4
 80186fe:	d0f0      	beq.n	80186e2 <__match+0x6>
 8018700:	2000      	movs	r0, #0
 8018702:	e7f3      	b.n	80186ec <__match+0x10>

08018704 <__hexnan>:
 8018704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018708:	680b      	ldr	r3, [r1, #0]
 801870a:	6801      	ldr	r1, [r0, #0]
 801870c:	115f      	asrs	r7, r3, #5
 801870e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018712:	f013 031f 	ands.w	r3, r3, #31
 8018716:	b087      	sub	sp, #28
 8018718:	bf18      	it	ne
 801871a:	3704      	addne	r7, #4
 801871c:	2500      	movs	r5, #0
 801871e:	1f3e      	subs	r6, r7, #4
 8018720:	4682      	mov	sl, r0
 8018722:	4690      	mov	r8, r2
 8018724:	9301      	str	r3, [sp, #4]
 8018726:	f847 5c04 	str.w	r5, [r7, #-4]
 801872a:	46b1      	mov	r9, r6
 801872c:	4634      	mov	r4, r6
 801872e:	9502      	str	r5, [sp, #8]
 8018730:	46ab      	mov	fp, r5
 8018732:	784a      	ldrb	r2, [r1, #1]
 8018734:	1c4b      	adds	r3, r1, #1
 8018736:	9303      	str	r3, [sp, #12]
 8018738:	b342      	cbz	r2, 801878c <__hexnan+0x88>
 801873a:	4610      	mov	r0, r2
 801873c:	9105      	str	r1, [sp, #20]
 801873e:	9204      	str	r2, [sp, #16]
 8018740:	f7ff fd84 	bl	801824c <__hexdig_fun>
 8018744:	2800      	cmp	r0, #0
 8018746:	d143      	bne.n	80187d0 <__hexnan+0xcc>
 8018748:	9a04      	ldr	r2, [sp, #16]
 801874a:	9905      	ldr	r1, [sp, #20]
 801874c:	2a20      	cmp	r2, #32
 801874e:	d818      	bhi.n	8018782 <__hexnan+0x7e>
 8018750:	9b02      	ldr	r3, [sp, #8]
 8018752:	459b      	cmp	fp, r3
 8018754:	dd13      	ble.n	801877e <__hexnan+0x7a>
 8018756:	454c      	cmp	r4, r9
 8018758:	d206      	bcs.n	8018768 <__hexnan+0x64>
 801875a:	2d07      	cmp	r5, #7
 801875c:	dc04      	bgt.n	8018768 <__hexnan+0x64>
 801875e:	462a      	mov	r2, r5
 8018760:	4649      	mov	r1, r9
 8018762:	4620      	mov	r0, r4
 8018764:	f7ff ffa8 	bl	80186b8 <L_shift>
 8018768:	4544      	cmp	r4, r8
 801876a:	d944      	bls.n	80187f6 <__hexnan+0xf2>
 801876c:	2300      	movs	r3, #0
 801876e:	f1a4 0904 	sub.w	r9, r4, #4
 8018772:	f844 3c04 	str.w	r3, [r4, #-4]
 8018776:	f8cd b008 	str.w	fp, [sp, #8]
 801877a:	464c      	mov	r4, r9
 801877c:	461d      	mov	r5, r3
 801877e:	9903      	ldr	r1, [sp, #12]
 8018780:	e7d7      	b.n	8018732 <__hexnan+0x2e>
 8018782:	2a29      	cmp	r2, #41	; 0x29
 8018784:	d14a      	bne.n	801881c <__hexnan+0x118>
 8018786:	3102      	adds	r1, #2
 8018788:	f8ca 1000 	str.w	r1, [sl]
 801878c:	f1bb 0f00 	cmp.w	fp, #0
 8018790:	d044      	beq.n	801881c <__hexnan+0x118>
 8018792:	454c      	cmp	r4, r9
 8018794:	d206      	bcs.n	80187a4 <__hexnan+0xa0>
 8018796:	2d07      	cmp	r5, #7
 8018798:	dc04      	bgt.n	80187a4 <__hexnan+0xa0>
 801879a:	462a      	mov	r2, r5
 801879c:	4649      	mov	r1, r9
 801879e:	4620      	mov	r0, r4
 80187a0:	f7ff ff8a 	bl	80186b8 <L_shift>
 80187a4:	4544      	cmp	r4, r8
 80187a6:	d928      	bls.n	80187fa <__hexnan+0xf6>
 80187a8:	4643      	mov	r3, r8
 80187aa:	f854 2b04 	ldr.w	r2, [r4], #4
 80187ae:	f843 2b04 	str.w	r2, [r3], #4
 80187b2:	42a6      	cmp	r6, r4
 80187b4:	d2f9      	bcs.n	80187aa <__hexnan+0xa6>
 80187b6:	2200      	movs	r2, #0
 80187b8:	f843 2b04 	str.w	r2, [r3], #4
 80187bc:	429e      	cmp	r6, r3
 80187be:	d2fb      	bcs.n	80187b8 <__hexnan+0xb4>
 80187c0:	6833      	ldr	r3, [r6, #0]
 80187c2:	b91b      	cbnz	r3, 80187cc <__hexnan+0xc8>
 80187c4:	4546      	cmp	r6, r8
 80187c6:	d127      	bne.n	8018818 <__hexnan+0x114>
 80187c8:	2301      	movs	r3, #1
 80187ca:	6033      	str	r3, [r6, #0]
 80187cc:	2005      	movs	r0, #5
 80187ce:	e026      	b.n	801881e <__hexnan+0x11a>
 80187d0:	3501      	adds	r5, #1
 80187d2:	2d08      	cmp	r5, #8
 80187d4:	f10b 0b01 	add.w	fp, fp, #1
 80187d8:	dd06      	ble.n	80187e8 <__hexnan+0xe4>
 80187da:	4544      	cmp	r4, r8
 80187dc:	d9cf      	bls.n	801877e <__hexnan+0x7a>
 80187de:	2300      	movs	r3, #0
 80187e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80187e4:	2501      	movs	r5, #1
 80187e6:	3c04      	subs	r4, #4
 80187e8:	6822      	ldr	r2, [r4, #0]
 80187ea:	f000 000f 	and.w	r0, r0, #15
 80187ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80187f2:	6020      	str	r0, [r4, #0]
 80187f4:	e7c3      	b.n	801877e <__hexnan+0x7a>
 80187f6:	2508      	movs	r5, #8
 80187f8:	e7c1      	b.n	801877e <__hexnan+0x7a>
 80187fa:	9b01      	ldr	r3, [sp, #4]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d0df      	beq.n	80187c0 <__hexnan+0xbc>
 8018800:	f04f 32ff 	mov.w	r2, #4294967295
 8018804:	f1c3 0320 	rsb	r3, r3, #32
 8018808:	fa22 f303 	lsr.w	r3, r2, r3
 801880c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018810:	401a      	ands	r2, r3
 8018812:	f847 2c04 	str.w	r2, [r7, #-4]
 8018816:	e7d3      	b.n	80187c0 <__hexnan+0xbc>
 8018818:	3e04      	subs	r6, #4
 801881a:	e7d1      	b.n	80187c0 <__hexnan+0xbc>
 801881c:	2004      	movs	r0, #4
 801881e:	b007      	add	sp, #28
 8018820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018824 <__locale_ctype_ptr_l>:
 8018824:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018828:	4770      	bx	lr
	...

0801882c <__locale_ctype_ptr>:
 801882c:	4b04      	ldr	r3, [pc, #16]	; (8018840 <__locale_ctype_ptr+0x14>)
 801882e:	4a05      	ldr	r2, [pc, #20]	; (8018844 <__locale_ctype_ptr+0x18>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	6a1b      	ldr	r3, [r3, #32]
 8018834:	2b00      	cmp	r3, #0
 8018836:	bf08      	it	eq
 8018838:	4613      	moveq	r3, r2
 801883a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801883e:	4770      	bx	lr
 8018840:	2000000c 	.word	0x2000000c
 8018844:	20000070 	.word	0x20000070

08018848 <__localeconv_l>:
 8018848:	30f0      	adds	r0, #240	; 0xf0
 801884a:	4770      	bx	lr

0801884c <_localeconv_r>:
 801884c:	4b04      	ldr	r3, [pc, #16]	; (8018860 <_localeconv_r+0x14>)
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	6a18      	ldr	r0, [r3, #32]
 8018852:	4b04      	ldr	r3, [pc, #16]	; (8018864 <_localeconv_r+0x18>)
 8018854:	2800      	cmp	r0, #0
 8018856:	bf08      	it	eq
 8018858:	4618      	moveq	r0, r3
 801885a:	30f0      	adds	r0, #240	; 0xf0
 801885c:	4770      	bx	lr
 801885e:	bf00      	nop
 8018860:	2000000c 	.word	0x2000000c
 8018864:	20000070 	.word	0x20000070

08018868 <malloc>:
 8018868:	4b02      	ldr	r3, [pc, #8]	; (8018874 <malloc+0xc>)
 801886a:	4601      	mov	r1, r0
 801886c:	6818      	ldr	r0, [r3, #0]
 801886e:	f000 bc7b 	b.w	8019168 <_malloc_r>
 8018872:	bf00      	nop
 8018874:	2000000c 	.word	0x2000000c

08018878 <__ascii_mbtowc>:
 8018878:	b082      	sub	sp, #8
 801887a:	b901      	cbnz	r1, 801887e <__ascii_mbtowc+0x6>
 801887c:	a901      	add	r1, sp, #4
 801887e:	b142      	cbz	r2, 8018892 <__ascii_mbtowc+0x1a>
 8018880:	b14b      	cbz	r3, 8018896 <__ascii_mbtowc+0x1e>
 8018882:	7813      	ldrb	r3, [r2, #0]
 8018884:	600b      	str	r3, [r1, #0]
 8018886:	7812      	ldrb	r2, [r2, #0]
 8018888:	1c10      	adds	r0, r2, #0
 801888a:	bf18      	it	ne
 801888c:	2001      	movne	r0, #1
 801888e:	b002      	add	sp, #8
 8018890:	4770      	bx	lr
 8018892:	4610      	mov	r0, r2
 8018894:	e7fb      	b.n	801888e <__ascii_mbtowc+0x16>
 8018896:	f06f 0001 	mvn.w	r0, #1
 801889a:	e7f8      	b.n	801888e <__ascii_mbtowc+0x16>

0801889c <memcpy>:
 801889c:	b510      	push	{r4, lr}
 801889e:	1e43      	subs	r3, r0, #1
 80188a0:	440a      	add	r2, r1
 80188a2:	4291      	cmp	r1, r2
 80188a4:	d100      	bne.n	80188a8 <memcpy+0xc>
 80188a6:	bd10      	pop	{r4, pc}
 80188a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80188b0:	e7f7      	b.n	80188a2 <memcpy+0x6>

080188b2 <_Balloc>:
 80188b2:	b570      	push	{r4, r5, r6, lr}
 80188b4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80188b6:	4604      	mov	r4, r0
 80188b8:	460e      	mov	r6, r1
 80188ba:	b93d      	cbnz	r5, 80188cc <_Balloc+0x1a>
 80188bc:	2010      	movs	r0, #16
 80188be:	f7ff ffd3 	bl	8018868 <malloc>
 80188c2:	6260      	str	r0, [r4, #36]	; 0x24
 80188c4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80188c8:	6005      	str	r5, [r0, #0]
 80188ca:	60c5      	str	r5, [r0, #12]
 80188cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80188ce:	68eb      	ldr	r3, [r5, #12]
 80188d0:	b183      	cbz	r3, 80188f4 <_Balloc+0x42>
 80188d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188d4:	68db      	ldr	r3, [r3, #12]
 80188d6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80188da:	b9b8      	cbnz	r0, 801890c <_Balloc+0x5a>
 80188dc:	2101      	movs	r1, #1
 80188de:	fa01 f506 	lsl.w	r5, r1, r6
 80188e2:	1d6a      	adds	r2, r5, #5
 80188e4:	0092      	lsls	r2, r2, #2
 80188e6:	4620      	mov	r0, r4
 80188e8:	f000 fbe1 	bl	80190ae <_calloc_r>
 80188ec:	b160      	cbz	r0, 8018908 <_Balloc+0x56>
 80188ee:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80188f2:	e00e      	b.n	8018912 <_Balloc+0x60>
 80188f4:	2221      	movs	r2, #33	; 0x21
 80188f6:	2104      	movs	r1, #4
 80188f8:	4620      	mov	r0, r4
 80188fa:	f000 fbd8 	bl	80190ae <_calloc_r>
 80188fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018900:	60e8      	str	r0, [r5, #12]
 8018902:	68db      	ldr	r3, [r3, #12]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d1e4      	bne.n	80188d2 <_Balloc+0x20>
 8018908:	2000      	movs	r0, #0
 801890a:	bd70      	pop	{r4, r5, r6, pc}
 801890c:	6802      	ldr	r2, [r0, #0]
 801890e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018912:	2300      	movs	r3, #0
 8018914:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018918:	e7f7      	b.n	801890a <_Balloc+0x58>

0801891a <_Bfree>:
 801891a:	b570      	push	{r4, r5, r6, lr}
 801891c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801891e:	4606      	mov	r6, r0
 8018920:	460d      	mov	r5, r1
 8018922:	b93c      	cbnz	r4, 8018934 <_Bfree+0x1a>
 8018924:	2010      	movs	r0, #16
 8018926:	f7ff ff9f 	bl	8018868 <malloc>
 801892a:	6270      	str	r0, [r6, #36]	; 0x24
 801892c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018930:	6004      	str	r4, [r0, #0]
 8018932:	60c4      	str	r4, [r0, #12]
 8018934:	b13d      	cbz	r5, 8018946 <_Bfree+0x2c>
 8018936:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018938:	686a      	ldr	r2, [r5, #4]
 801893a:	68db      	ldr	r3, [r3, #12]
 801893c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018940:	6029      	str	r1, [r5, #0]
 8018942:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018946:	bd70      	pop	{r4, r5, r6, pc}

08018948 <__multadd>:
 8018948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801894c:	690d      	ldr	r5, [r1, #16]
 801894e:	461f      	mov	r7, r3
 8018950:	4606      	mov	r6, r0
 8018952:	460c      	mov	r4, r1
 8018954:	f101 0c14 	add.w	ip, r1, #20
 8018958:	2300      	movs	r3, #0
 801895a:	f8dc 0000 	ldr.w	r0, [ip]
 801895e:	b281      	uxth	r1, r0
 8018960:	fb02 7101 	mla	r1, r2, r1, r7
 8018964:	0c0f      	lsrs	r7, r1, #16
 8018966:	0c00      	lsrs	r0, r0, #16
 8018968:	fb02 7000 	mla	r0, r2, r0, r7
 801896c:	b289      	uxth	r1, r1
 801896e:	3301      	adds	r3, #1
 8018970:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018974:	429d      	cmp	r5, r3
 8018976:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801897a:	f84c 1b04 	str.w	r1, [ip], #4
 801897e:	dcec      	bgt.n	801895a <__multadd+0x12>
 8018980:	b1d7      	cbz	r7, 80189b8 <__multadd+0x70>
 8018982:	68a3      	ldr	r3, [r4, #8]
 8018984:	42ab      	cmp	r3, r5
 8018986:	dc12      	bgt.n	80189ae <__multadd+0x66>
 8018988:	6861      	ldr	r1, [r4, #4]
 801898a:	4630      	mov	r0, r6
 801898c:	3101      	adds	r1, #1
 801898e:	f7ff ff90 	bl	80188b2 <_Balloc>
 8018992:	6922      	ldr	r2, [r4, #16]
 8018994:	3202      	adds	r2, #2
 8018996:	f104 010c 	add.w	r1, r4, #12
 801899a:	4680      	mov	r8, r0
 801899c:	0092      	lsls	r2, r2, #2
 801899e:	300c      	adds	r0, #12
 80189a0:	f7ff ff7c 	bl	801889c <memcpy>
 80189a4:	4621      	mov	r1, r4
 80189a6:	4630      	mov	r0, r6
 80189a8:	f7ff ffb7 	bl	801891a <_Bfree>
 80189ac:	4644      	mov	r4, r8
 80189ae:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80189b2:	3501      	adds	r5, #1
 80189b4:	615f      	str	r7, [r3, #20]
 80189b6:	6125      	str	r5, [r4, #16]
 80189b8:	4620      	mov	r0, r4
 80189ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080189be <__s2b>:
 80189be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189c2:	460c      	mov	r4, r1
 80189c4:	4615      	mov	r5, r2
 80189c6:	461f      	mov	r7, r3
 80189c8:	2209      	movs	r2, #9
 80189ca:	3308      	adds	r3, #8
 80189cc:	4606      	mov	r6, r0
 80189ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80189d2:	2100      	movs	r1, #0
 80189d4:	2201      	movs	r2, #1
 80189d6:	429a      	cmp	r2, r3
 80189d8:	db20      	blt.n	8018a1c <__s2b+0x5e>
 80189da:	4630      	mov	r0, r6
 80189dc:	f7ff ff69 	bl	80188b2 <_Balloc>
 80189e0:	9b08      	ldr	r3, [sp, #32]
 80189e2:	6143      	str	r3, [r0, #20]
 80189e4:	2d09      	cmp	r5, #9
 80189e6:	f04f 0301 	mov.w	r3, #1
 80189ea:	6103      	str	r3, [r0, #16]
 80189ec:	dd19      	ble.n	8018a22 <__s2b+0x64>
 80189ee:	f104 0809 	add.w	r8, r4, #9
 80189f2:	46c1      	mov	r9, r8
 80189f4:	442c      	add	r4, r5
 80189f6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80189fa:	4601      	mov	r1, r0
 80189fc:	3b30      	subs	r3, #48	; 0x30
 80189fe:	220a      	movs	r2, #10
 8018a00:	4630      	mov	r0, r6
 8018a02:	f7ff ffa1 	bl	8018948 <__multadd>
 8018a06:	45a1      	cmp	r9, r4
 8018a08:	d1f5      	bne.n	80189f6 <__s2b+0x38>
 8018a0a:	eb08 0405 	add.w	r4, r8, r5
 8018a0e:	3c08      	subs	r4, #8
 8018a10:	1b2d      	subs	r5, r5, r4
 8018a12:	1963      	adds	r3, r4, r5
 8018a14:	42bb      	cmp	r3, r7
 8018a16:	db07      	blt.n	8018a28 <__s2b+0x6a>
 8018a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a1c:	0052      	lsls	r2, r2, #1
 8018a1e:	3101      	adds	r1, #1
 8018a20:	e7d9      	b.n	80189d6 <__s2b+0x18>
 8018a22:	340a      	adds	r4, #10
 8018a24:	2509      	movs	r5, #9
 8018a26:	e7f3      	b.n	8018a10 <__s2b+0x52>
 8018a28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018a2c:	4601      	mov	r1, r0
 8018a2e:	3b30      	subs	r3, #48	; 0x30
 8018a30:	220a      	movs	r2, #10
 8018a32:	4630      	mov	r0, r6
 8018a34:	f7ff ff88 	bl	8018948 <__multadd>
 8018a38:	e7eb      	b.n	8018a12 <__s2b+0x54>

08018a3a <__hi0bits>:
 8018a3a:	0c02      	lsrs	r2, r0, #16
 8018a3c:	0412      	lsls	r2, r2, #16
 8018a3e:	4603      	mov	r3, r0
 8018a40:	b9b2      	cbnz	r2, 8018a70 <__hi0bits+0x36>
 8018a42:	0403      	lsls	r3, r0, #16
 8018a44:	2010      	movs	r0, #16
 8018a46:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018a4a:	bf04      	itt	eq
 8018a4c:	021b      	lsleq	r3, r3, #8
 8018a4e:	3008      	addeq	r0, #8
 8018a50:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018a54:	bf04      	itt	eq
 8018a56:	011b      	lsleq	r3, r3, #4
 8018a58:	3004      	addeq	r0, #4
 8018a5a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018a5e:	bf04      	itt	eq
 8018a60:	009b      	lsleq	r3, r3, #2
 8018a62:	3002      	addeq	r0, #2
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	db06      	blt.n	8018a76 <__hi0bits+0x3c>
 8018a68:	005b      	lsls	r3, r3, #1
 8018a6a:	d503      	bpl.n	8018a74 <__hi0bits+0x3a>
 8018a6c:	3001      	adds	r0, #1
 8018a6e:	4770      	bx	lr
 8018a70:	2000      	movs	r0, #0
 8018a72:	e7e8      	b.n	8018a46 <__hi0bits+0xc>
 8018a74:	2020      	movs	r0, #32
 8018a76:	4770      	bx	lr

08018a78 <__lo0bits>:
 8018a78:	6803      	ldr	r3, [r0, #0]
 8018a7a:	f013 0207 	ands.w	r2, r3, #7
 8018a7e:	4601      	mov	r1, r0
 8018a80:	d00b      	beq.n	8018a9a <__lo0bits+0x22>
 8018a82:	07da      	lsls	r2, r3, #31
 8018a84:	d423      	bmi.n	8018ace <__lo0bits+0x56>
 8018a86:	0798      	lsls	r0, r3, #30
 8018a88:	bf49      	itett	mi
 8018a8a:	085b      	lsrmi	r3, r3, #1
 8018a8c:	089b      	lsrpl	r3, r3, #2
 8018a8e:	2001      	movmi	r0, #1
 8018a90:	600b      	strmi	r3, [r1, #0]
 8018a92:	bf5c      	itt	pl
 8018a94:	600b      	strpl	r3, [r1, #0]
 8018a96:	2002      	movpl	r0, #2
 8018a98:	4770      	bx	lr
 8018a9a:	b298      	uxth	r0, r3
 8018a9c:	b9a8      	cbnz	r0, 8018aca <__lo0bits+0x52>
 8018a9e:	0c1b      	lsrs	r3, r3, #16
 8018aa0:	2010      	movs	r0, #16
 8018aa2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018aa6:	bf04      	itt	eq
 8018aa8:	0a1b      	lsreq	r3, r3, #8
 8018aaa:	3008      	addeq	r0, #8
 8018aac:	071a      	lsls	r2, r3, #28
 8018aae:	bf04      	itt	eq
 8018ab0:	091b      	lsreq	r3, r3, #4
 8018ab2:	3004      	addeq	r0, #4
 8018ab4:	079a      	lsls	r2, r3, #30
 8018ab6:	bf04      	itt	eq
 8018ab8:	089b      	lsreq	r3, r3, #2
 8018aba:	3002      	addeq	r0, #2
 8018abc:	07da      	lsls	r2, r3, #31
 8018abe:	d402      	bmi.n	8018ac6 <__lo0bits+0x4e>
 8018ac0:	085b      	lsrs	r3, r3, #1
 8018ac2:	d006      	beq.n	8018ad2 <__lo0bits+0x5a>
 8018ac4:	3001      	adds	r0, #1
 8018ac6:	600b      	str	r3, [r1, #0]
 8018ac8:	4770      	bx	lr
 8018aca:	4610      	mov	r0, r2
 8018acc:	e7e9      	b.n	8018aa2 <__lo0bits+0x2a>
 8018ace:	2000      	movs	r0, #0
 8018ad0:	4770      	bx	lr
 8018ad2:	2020      	movs	r0, #32
 8018ad4:	4770      	bx	lr

08018ad6 <__i2b>:
 8018ad6:	b510      	push	{r4, lr}
 8018ad8:	460c      	mov	r4, r1
 8018ada:	2101      	movs	r1, #1
 8018adc:	f7ff fee9 	bl	80188b2 <_Balloc>
 8018ae0:	2201      	movs	r2, #1
 8018ae2:	6144      	str	r4, [r0, #20]
 8018ae4:	6102      	str	r2, [r0, #16]
 8018ae6:	bd10      	pop	{r4, pc}

08018ae8 <__multiply>:
 8018ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aec:	4614      	mov	r4, r2
 8018aee:	690a      	ldr	r2, [r1, #16]
 8018af0:	6923      	ldr	r3, [r4, #16]
 8018af2:	429a      	cmp	r2, r3
 8018af4:	bfb8      	it	lt
 8018af6:	460b      	movlt	r3, r1
 8018af8:	4688      	mov	r8, r1
 8018afa:	bfbc      	itt	lt
 8018afc:	46a0      	movlt	r8, r4
 8018afe:	461c      	movlt	r4, r3
 8018b00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018b04:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018b08:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018b0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018b10:	eb07 0609 	add.w	r6, r7, r9
 8018b14:	42b3      	cmp	r3, r6
 8018b16:	bfb8      	it	lt
 8018b18:	3101      	addlt	r1, #1
 8018b1a:	f7ff feca 	bl	80188b2 <_Balloc>
 8018b1e:	f100 0514 	add.w	r5, r0, #20
 8018b22:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018b26:	462b      	mov	r3, r5
 8018b28:	2200      	movs	r2, #0
 8018b2a:	4573      	cmp	r3, lr
 8018b2c:	d316      	bcc.n	8018b5c <__multiply+0x74>
 8018b2e:	f104 0214 	add.w	r2, r4, #20
 8018b32:	f108 0114 	add.w	r1, r8, #20
 8018b36:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018b3a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018b3e:	9300      	str	r3, [sp, #0]
 8018b40:	9b00      	ldr	r3, [sp, #0]
 8018b42:	9201      	str	r2, [sp, #4]
 8018b44:	4293      	cmp	r3, r2
 8018b46:	d80c      	bhi.n	8018b62 <__multiply+0x7a>
 8018b48:	2e00      	cmp	r6, #0
 8018b4a:	dd03      	ble.n	8018b54 <__multiply+0x6c>
 8018b4c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d05d      	beq.n	8018c10 <__multiply+0x128>
 8018b54:	6106      	str	r6, [r0, #16]
 8018b56:	b003      	add	sp, #12
 8018b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b5c:	f843 2b04 	str.w	r2, [r3], #4
 8018b60:	e7e3      	b.n	8018b2a <__multiply+0x42>
 8018b62:	f8b2 b000 	ldrh.w	fp, [r2]
 8018b66:	f1bb 0f00 	cmp.w	fp, #0
 8018b6a:	d023      	beq.n	8018bb4 <__multiply+0xcc>
 8018b6c:	4689      	mov	r9, r1
 8018b6e:	46ac      	mov	ip, r5
 8018b70:	f04f 0800 	mov.w	r8, #0
 8018b74:	f859 4b04 	ldr.w	r4, [r9], #4
 8018b78:	f8dc a000 	ldr.w	sl, [ip]
 8018b7c:	b2a3      	uxth	r3, r4
 8018b7e:	fa1f fa8a 	uxth.w	sl, sl
 8018b82:	fb0b a303 	mla	r3, fp, r3, sl
 8018b86:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018b8a:	f8dc 4000 	ldr.w	r4, [ip]
 8018b8e:	4443      	add	r3, r8
 8018b90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b94:	fb0b 840a 	mla	r4, fp, sl, r8
 8018b98:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018b9c:	46e2      	mov	sl, ip
 8018b9e:	b29b      	uxth	r3, r3
 8018ba0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018ba4:	454f      	cmp	r7, r9
 8018ba6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018baa:	f84a 3b04 	str.w	r3, [sl], #4
 8018bae:	d82b      	bhi.n	8018c08 <__multiply+0x120>
 8018bb0:	f8cc 8004 	str.w	r8, [ip, #4]
 8018bb4:	9b01      	ldr	r3, [sp, #4]
 8018bb6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018bba:	3204      	adds	r2, #4
 8018bbc:	f1ba 0f00 	cmp.w	sl, #0
 8018bc0:	d020      	beq.n	8018c04 <__multiply+0x11c>
 8018bc2:	682b      	ldr	r3, [r5, #0]
 8018bc4:	4689      	mov	r9, r1
 8018bc6:	46a8      	mov	r8, r5
 8018bc8:	f04f 0b00 	mov.w	fp, #0
 8018bcc:	f8b9 c000 	ldrh.w	ip, [r9]
 8018bd0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018bd4:	fb0a 440c 	mla	r4, sl, ip, r4
 8018bd8:	445c      	add	r4, fp
 8018bda:	46c4      	mov	ip, r8
 8018bdc:	b29b      	uxth	r3, r3
 8018bde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018be2:	f84c 3b04 	str.w	r3, [ip], #4
 8018be6:	f859 3b04 	ldr.w	r3, [r9], #4
 8018bea:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018bee:	0c1b      	lsrs	r3, r3, #16
 8018bf0:	fb0a b303 	mla	r3, sl, r3, fp
 8018bf4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018bf8:	454f      	cmp	r7, r9
 8018bfa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018bfe:	d805      	bhi.n	8018c0c <__multiply+0x124>
 8018c00:	f8c8 3004 	str.w	r3, [r8, #4]
 8018c04:	3504      	adds	r5, #4
 8018c06:	e79b      	b.n	8018b40 <__multiply+0x58>
 8018c08:	46d4      	mov	ip, sl
 8018c0a:	e7b3      	b.n	8018b74 <__multiply+0x8c>
 8018c0c:	46e0      	mov	r8, ip
 8018c0e:	e7dd      	b.n	8018bcc <__multiply+0xe4>
 8018c10:	3e01      	subs	r6, #1
 8018c12:	e799      	b.n	8018b48 <__multiply+0x60>

08018c14 <__pow5mult>:
 8018c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c18:	4615      	mov	r5, r2
 8018c1a:	f012 0203 	ands.w	r2, r2, #3
 8018c1e:	4606      	mov	r6, r0
 8018c20:	460f      	mov	r7, r1
 8018c22:	d007      	beq.n	8018c34 <__pow5mult+0x20>
 8018c24:	3a01      	subs	r2, #1
 8018c26:	4c21      	ldr	r4, [pc, #132]	; (8018cac <__pow5mult+0x98>)
 8018c28:	2300      	movs	r3, #0
 8018c2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c2e:	f7ff fe8b 	bl	8018948 <__multadd>
 8018c32:	4607      	mov	r7, r0
 8018c34:	10ad      	asrs	r5, r5, #2
 8018c36:	d035      	beq.n	8018ca4 <__pow5mult+0x90>
 8018c38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018c3a:	b93c      	cbnz	r4, 8018c4c <__pow5mult+0x38>
 8018c3c:	2010      	movs	r0, #16
 8018c3e:	f7ff fe13 	bl	8018868 <malloc>
 8018c42:	6270      	str	r0, [r6, #36]	; 0x24
 8018c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c48:	6004      	str	r4, [r0, #0]
 8018c4a:	60c4      	str	r4, [r0, #12]
 8018c4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c54:	b94c      	cbnz	r4, 8018c6a <__pow5mult+0x56>
 8018c56:	f240 2171 	movw	r1, #625	; 0x271
 8018c5a:	4630      	mov	r0, r6
 8018c5c:	f7ff ff3b 	bl	8018ad6 <__i2b>
 8018c60:	2300      	movs	r3, #0
 8018c62:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c66:	4604      	mov	r4, r0
 8018c68:	6003      	str	r3, [r0, #0]
 8018c6a:	f04f 0800 	mov.w	r8, #0
 8018c6e:	07eb      	lsls	r3, r5, #31
 8018c70:	d50a      	bpl.n	8018c88 <__pow5mult+0x74>
 8018c72:	4639      	mov	r1, r7
 8018c74:	4622      	mov	r2, r4
 8018c76:	4630      	mov	r0, r6
 8018c78:	f7ff ff36 	bl	8018ae8 <__multiply>
 8018c7c:	4639      	mov	r1, r7
 8018c7e:	4681      	mov	r9, r0
 8018c80:	4630      	mov	r0, r6
 8018c82:	f7ff fe4a 	bl	801891a <_Bfree>
 8018c86:	464f      	mov	r7, r9
 8018c88:	106d      	asrs	r5, r5, #1
 8018c8a:	d00b      	beq.n	8018ca4 <__pow5mult+0x90>
 8018c8c:	6820      	ldr	r0, [r4, #0]
 8018c8e:	b938      	cbnz	r0, 8018ca0 <__pow5mult+0x8c>
 8018c90:	4622      	mov	r2, r4
 8018c92:	4621      	mov	r1, r4
 8018c94:	4630      	mov	r0, r6
 8018c96:	f7ff ff27 	bl	8018ae8 <__multiply>
 8018c9a:	6020      	str	r0, [r4, #0]
 8018c9c:	f8c0 8000 	str.w	r8, [r0]
 8018ca0:	4604      	mov	r4, r0
 8018ca2:	e7e4      	b.n	8018c6e <__pow5mult+0x5a>
 8018ca4:	4638      	mov	r0, r7
 8018ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018caa:	bf00      	nop
 8018cac:	0801a630 	.word	0x0801a630

08018cb0 <__lshift>:
 8018cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cb4:	460c      	mov	r4, r1
 8018cb6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018cba:	6923      	ldr	r3, [r4, #16]
 8018cbc:	6849      	ldr	r1, [r1, #4]
 8018cbe:	eb0a 0903 	add.w	r9, sl, r3
 8018cc2:	68a3      	ldr	r3, [r4, #8]
 8018cc4:	4607      	mov	r7, r0
 8018cc6:	4616      	mov	r6, r2
 8018cc8:	f109 0501 	add.w	r5, r9, #1
 8018ccc:	42ab      	cmp	r3, r5
 8018cce:	db32      	blt.n	8018d36 <__lshift+0x86>
 8018cd0:	4638      	mov	r0, r7
 8018cd2:	f7ff fdee 	bl	80188b2 <_Balloc>
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	4680      	mov	r8, r0
 8018cda:	f100 0114 	add.w	r1, r0, #20
 8018cde:	461a      	mov	r2, r3
 8018ce0:	4553      	cmp	r3, sl
 8018ce2:	db2b      	blt.n	8018d3c <__lshift+0x8c>
 8018ce4:	6920      	ldr	r0, [r4, #16]
 8018ce6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018cea:	f104 0314 	add.w	r3, r4, #20
 8018cee:	f016 021f 	ands.w	r2, r6, #31
 8018cf2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018cf6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018cfa:	d025      	beq.n	8018d48 <__lshift+0x98>
 8018cfc:	f1c2 0e20 	rsb	lr, r2, #32
 8018d00:	2000      	movs	r0, #0
 8018d02:	681e      	ldr	r6, [r3, #0]
 8018d04:	468a      	mov	sl, r1
 8018d06:	4096      	lsls	r6, r2
 8018d08:	4330      	orrs	r0, r6
 8018d0a:	f84a 0b04 	str.w	r0, [sl], #4
 8018d0e:	f853 0b04 	ldr.w	r0, [r3], #4
 8018d12:	459c      	cmp	ip, r3
 8018d14:	fa20 f00e 	lsr.w	r0, r0, lr
 8018d18:	d814      	bhi.n	8018d44 <__lshift+0x94>
 8018d1a:	6048      	str	r0, [r1, #4]
 8018d1c:	b108      	cbz	r0, 8018d22 <__lshift+0x72>
 8018d1e:	f109 0502 	add.w	r5, r9, #2
 8018d22:	3d01      	subs	r5, #1
 8018d24:	4638      	mov	r0, r7
 8018d26:	f8c8 5010 	str.w	r5, [r8, #16]
 8018d2a:	4621      	mov	r1, r4
 8018d2c:	f7ff fdf5 	bl	801891a <_Bfree>
 8018d30:	4640      	mov	r0, r8
 8018d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d36:	3101      	adds	r1, #1
 8018d38:	005b      	lsls	r3, r3, #1
 8018d3a:	e7c7      	b.n	8018ccc <__lshift+0x1c>
 8018d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018d40:	3301      	adds	r3, #1
 8018d42:	e7cd      	b.n	8018ce0 <__lshift+0x30>
 8018d44:	4651      	mov	r1, sl
 8018d46:	e7dc      	b.n	8018d02 <__lshift+0x52>
 8018d48:	3904      	subs	r1, #4
 8018d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d4e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d52:	459c      	cmp	ip, r3
 8018d54:	d8f9      	bhi.n	8018d4a <__lshift+0x9a>
 8018d56:	e7e4      	b.n	8018d22 <__lshift+0x72>

08018d58 <__mcmp>:
 8018d58:	6903      	ldr	r3, [r0, #16]
 8018d5a:	690a      	ldr	r2, [r1, #16]
 8018d5c:	1a9b      	subs	r3, r3, r2
 8018d5e:	b530      	push	{r4, r5, lr}
 8018d60:	d10c      	bne.n	8018d7c <__mcmp+0x24>
 8018d62:	0092      	lsls	r2, r2, #2
 8018d64:	3014      	adds	r0, #20
 8018d66:	3114      	adds	r1, #20
 8018d68:	1884      	adds	r4, r0, r2
 8018d6a:	4411      	add	r1, r2
 8018d6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018d70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018d74:	4295      	cmp	r5, r2
 8018d76:	d003      	beq.n	8018d80 <__mcmp+0x28>
 8018d78:	d305      	bcc.n	8018d86 <__mcmp+0x2e>
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	bd30      	pop	{r4, r5, pc}
 8018d80:	42a0      	cmp	r0, r4
 8018d82:	d3f3      	bcc.n	8018d6c <__mcmp+0x14>
 8018d84:	e7fa      	b.n	8018d7c <__mcmp+0x24>
 8018d86:	f04f 33ff 	mov.w	r3, #4294967295
 8018d8a:	e7f7      	b.n	8018d7c <__mcmp+0x24>

08018d8c <__mdiff>:
 8018d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d90:	460d      	mov	r5, r1
 8018d92:	4607      	mov	r7, r0
 8018d94:	4611      	mov	r1, r2
 8018d96:	4628      	mov	r0, r5
 8018d98:	4614      	mov	r4, r2
 8018d9a:	f7ff ffdd 	bl	8018d58 <__mcmp>
 8018d9e:	1e06      	subs	r6, r0, #0
 8018da0:	d108      	bne.n	8018db4 <__mdiff+0x28>
 8018da2:	4631      	mov	r1, r6
 8018da4:	4638      	mov	r0, r7
 8018da6:	f7ff fd84 	bl	80188b2 <_Balloc>
 8018daa:	2301      	movs	r3, #1
 8018dac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018db4:	bfa4      	itt	ge
 8018db6:	4623      	movge	r3, r4
 8018db8:	462c      	movge	r4, r5
 8018dba:	4638      	mov	r0, r7
 8018dbc:	6861      	ldr	r1, [r4, #4]
 8018dbe:	bfa6      	itte	ge
 8018dc0:	461d      	movge	r5, r3
 8018dc2:	2600      	movge	r6, #0
 8018dc4:	2601      	movlt	r6, #1
 8018dc6:	f7ff fd74 	bl	80188b2 <_Balloc>
 8018dca:	692b      	ldr	r3, [r5, #16]
 8018dcc:	60c6      	str	r6, [r0, #12]
 8018dce:	6926      	ldr	r6, [r4, #16]
 8018dd0:	f105 0914 	add.w	r9, r5, #20
 8018dd4:	f104 0214 	add.w	r2, r4, #20
 8018dd8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018ddc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018de0:	f100 0514 	add.w	r5, r0, #20
 8018de4:	f04f 0e00 	mov.w	lr, #0
 8018de8:	f852 ab04 	ldr.w	sl, [r2], #4
 8018dec:	f859 4b04 	ldr.w	r4, [r9], #4
 8018df0:	fa1e f18a 	uxtah	r1, lr, sl
 8018df4:	b2a3      	uxth	r3, r4
 8018df6:	1ac9      	subs	r1, r1, r3
 8018df8:	0c23      	lsrs	r3, r4, #16
 8018dfa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018dfe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018e02:	b289      	uxth	r1, r1
 8018e04:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018e08:	45c8      	cmp	r8, r9
 8018e0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018e0e:	4694      	mov	ip, r2
 8018e10:	f845 3b04 	str.w	r3, [r5], #4
 8018e14:	d8e8      	bhi.n	8018de8 <__mdiff+0x5c>
 8018e16:	45bc      	cmp	ip, r7
 8018e18:	d304      	bcc.n	8018e24 <__mdiff+0x98>
 8018e1a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018e1e:	b183      	cbz	r3, 8018e42 <__mdiff+0xb6>
 8018e20:	6106      	str	r6, [r0, #16]
 8018e22:	e7c5      	b.n	8018db0 <__mdiff+0x24>
 8018e24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018e28:	fa1e f381 	uxtah	r3, lr, r1
 8018e2c:	141a      	asrs	r2, r3, #16
 8018e2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018e32:	b29b      	uxth	r3, r3
 8018e34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018e38:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018e3c:	f845 3b04 	str.w	r3, [r5], #4
 8018e40:	e7e9      	b.n	8018e16 <__mdiff+0x8a>
 8018e42:	3e01      	subs	r6, #1
 8018e44:	e7e9      	b.n	8018e1a <__mdiff+0x8e>
	...

08018e48 <__ulp>:
 8018e48:	4b12      	ldr	r3, [pc, #72]	; (8018e94 <__ulp+0x4c>)
 8018e4a:	ee10 2a90 	vmov	r2, s1
 8018e4e:	401a      	ands	r2, r3
 8018e50:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	dd04      	ble.n	8018e62 <__ulp+0x1a>
 8018e58:	2000      	movs	r0, #0
 8018e5a:	4619      	mov	r1, r3
 8018e5c:	ec41 0b10 	vmov	d0, r0, r1
 8018e60:	4770      	bx	lr
 8018e62:	425b      	negs	r3, r3
 8018e64:	151b      	asrs	r3, r3, #20
 8018e66:	2b13      	cmp	r3, #19
 8018e68:	f04f 0000 	mov.w	r0, #0
 8018e6c:	f04f 0100 	mov.w	r1, #0
 8018e70:	dc04      	bgt.n	8018e7c <__ulp+0x34>
 8018e72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018e76:	fa42 f103 	asr.w	r1, r2, r3
 8018e7a:	e7ef      	b.n	8018e5c <__ulp+0x14>
 8018e7c:	3b14      	subs	r3, #20
 8018e7e:	2b1e      	cmp	r3, #30
 8018e80:	f04f 0201 	mov.w	r2, #1
 8018e84:	bfda      	itte	le
 8018e86:	f1c3 031f 	rsble	r3, r3, #31
 8018e8a:	fa02 f303 	lslle.w	r3, r2, r3
 8018e8e:	4613      	movgt	r3, r2
 8018e90:	4618      	mov	r0, r3
 8018e92:	e7e3      	b.n	8018e5c <__ulp+0x14>
 8018e94:	7ff00000 	.word	0x7ff00000

08018e98 <__b2d>:
 8018e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e9a:	6905      	ldr	r5, [r0, #16]
 8018e9c:	f100 0714 	add.w	r7, r0, #20
 8018ea0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018ea4:	1f2e      	subs	r6, r5, #4
 8018ea6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018eaa:	4620      	mov	r0, r4
 8018eac:	f7ff fdc5 	bl	8018a3a <__hi0bits>
 8018eb0:	f1c0 0320 	rsb	r3, r0, #32
 8018eb4:	280a      	cmp	r0, #10
 8018eb6:	600b      	str	r3, [r1, #0]
 8018eb8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018f30 <__b2d+0x98>
 8018ebc:	dc14      	bgt.n	8018ee8 <__b2d+0x50>
 8018ebe:	f1c0 0e0b 	rsb	lr, r0, #11
 8018ec2:	fa24 f10e 	lsr.w	r1, r4, lr
 8018ec6:	42b7      	cmp	r7, r6
 8018ec8:	ea41 030c 	orr.w	r3, r1, ip
 8018ecc:	bf34      	ite	cc
 8018ece:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018ed2:	2100      	movcs	r1, #0
 8018ed4:	3015      	adds	r0, #21
 8018ed6:	fa04 f000 	lsl.w	r0, r4, r0
 8018eda:	fa21 f10e 	lsr.w	r1, r1, lr
 8018ede:	ea40 0201 	orr.w	r2, r0, r1
 8018ee2:	ec43 2b10 	vmov	d0, r2, r3
 8018ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ee8:	42b7      	cmp	r7, r6
 8018eea:	bf3a      	itte	cc
 8018eec:	f1a5 0608 	subcc.w	r6, r5, #8
 8018ef0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018ef4:	2100      	movcs	r1, #0
 8018ef6:	380b      	subs	r0, #11
 8018ef8:	d015      	beq.n	8018f26 <__b2d+0x8e>
 8018efa:	4084      	lsls	r4, r0
 8018efc:	f1c0 0520 	rsb	r5, r0, #32
 8018f00:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018f04:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018f08:	42be      	cmp	r6, r7
 8018f0a:	fa21 fc05 	lsr.w	ip, r1, r5
 8018f0e:	ea44 030c 	orr.w	r3, r4, ip
 8018f12:	bf8c      	ite	hi
 8018f14:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018f18:	2400      	movls	r4, #0
 8018f1a:	fa01 f000 	lsl.w	r0, r1, r0
 8018f1e:	40ec      	lsrs	r4, r5
 8018f20:	ea40 0204 	orr.w	r2, r0, r4
 8018f24:	e7dd      	b.n	8018ee2 <__b2d+0x4a>
 8018f26:	ea44 030c 	orr.w	r3, r4, ip
 8018f2a:	460a      	mov	r2, r1
 8018f2c:	e7d9      	b.n	8018ee2 <__b2d+0x4a>
 8018f2e:	bf00      	nop
 8018f30:	3ff00000 	.word	0x3ff00000

08018f34 <__d2b>:
 8018f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f38:	460e      	mov	r6, r1
 8018f3a:	2101      	movs	r1, #1
 8018f3c:	ec59 8b10 	vmov	r8, r9, d0
 8018f40:	4615      	mov	r5, r2
 8018f42:	f7ff fcb6 	bl	80188b2 <_Balloc>
 8018f46:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018f4a:	4607      	mov	r7, r0
 8018f4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f50:	bb34      	cbnz	r4, 8018fa0 <__d2b+0x6c>
 8018f52:	9301      	str	r3, [sp, #4]
 8018f54:	f1b8 0300 	subs.w	r3, r8, #0
 8018f58:	d027      	beq.n	8018faa <__d2b+0x76>
 8018f5a:	a802      	add	r0, sp, #8
 8018f5c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018f60:	f7ff fd8a 	bl	8018a78 <__lo0bits>
 8018f64:	9900      	ldr	r1, [sp, #0]
 8018f66:	b1f0      	cbz	r0, 8018fa6 <__d2b+0x72>
 8018f68:	9a01      	ldr	r2, [sp, #4]
 8018f6a:	f1c0 0320 	rsb	r3, r0, #32
 8018f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8018f72:	430b      	orrs	r3, r1
 8018f74:	40c2      	lsrs	r2, r0
 8018f76:	617b      	str	r3, [r7, #20]
 8018f78:	9201      	str	r2, [sp, #4]
 8018f7a:	9b01      	ldr	r3, [sp, #4]
 8018f7c:	61bb      	str	r3, [r7, #24]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	bf14      	ite	ne
 8018f82:	2102      	movne	r1, #2
 8018f84:	2101      	moveq	r1, #1
 8018f86:	6139      	str	r1, [r7, #16]
 8018f88:	b1c4      	cbz	r4, 8018fbc <__d2b+0x88>
 8018f8a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018f8e:	4404      	add	r4, r0
 8018f90:	6034      	str	r4, [r6, #0]
 8018f92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018f96:	6028      	str	r0, [r5, #0]
 8018f98:	4638      	mov	r0, r7
 8018f9a:	b003      	add	sp, #12
 8018f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018fa4:	e7d5      	b.n	8018f52 <__d2b+0x1e>
 8018fa6:	6179      	str	r1, [r7, #20]
 8018fa8:	e7e7      	b.n	8018f7a <__d2b+0x46>
 8018faa:	a801      	add	r0, sp, #4
 8018fac:	f7ff fd64 	bl	8018a78 <__lo0bits>
 8018fb0:	9b01      	ldr	r3, [sp, #4]
 8018fb2:	617b      	str	r3, [r7, #20]
 8018fb4:	2101      	movs	r1, #1
 8018fb6:	6139      	str	r1, [r7, #16]
 8018fb8:	3020      	adds	r0, #32
 8018fba:	e7e5      	b.n	8018f88 <__d2b+0x54>
 8018fbc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018fc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018fc4:	6030      	str	r0, [r6, #0]
 8018fc6:	6918      	ldr	r0, [r3, #16]
 8018fc8:	f7ff fd37 	bl	8018a3a <__hi0bits>
 8018fcc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018fd0:	e7e1      	b.n	8018f96 <__d2b+0x62>

08018fd2 <__ratio>:
 8018fd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fd6:	4688      	mov	r8, r1
 8018fd8:	4669      	mov	r1, sp
 8018fda:	4681      	mov	r9, r0
 8018fdc:	f7ff ff5c 	bl	8018e98 <__b2d>
 8018fe0:	a901      	add	r1, sp, #4
 8018fe2:	4640      	mov	r0, r8
 8018fe4:	ec57 6b10 	vmov	r6, r7, d0
 8018fe8:	f7ff ff56 	bl	8018e98 <__b2d>
 8018fec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018ff0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018ff4:	eba3 0c02 	sub.w	ip, r3, r2
 8018ff8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018ffc:	1a9b      	subs	r3, r3, r2
 8018ffe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019002:	ec5b ab10 	vmov	sl, fp, d0
 8019006:	2b00      	cmp	r3, #0
 8019008:	bfce      	itee	gt
 801900a:	463a      	movgt	r2, r7
 801900c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019010:	465a      	movle	r2, fp
 8019012:	4659      	mov	r1, fp
 8019014:	463d      	mov	r5, r7
 8019016:	bfd4      	ite	le
 8019018:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801901c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019020:	4630      	mov	r0, r6
 8019022:	ee10 2a10 	vmov	r2, s0
 8019026:	460b      	mov	r3, r1
 8019028:	4629      	mov	r1, r5
 801902a:	f7e7 fc27 	bl	800087c <__aeabi_ddiv>
 801902e:	ec41 0b10 	vmov	d0, r0, r1
 8019032:	b003      	add	sp, #12
 8019034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019038 <__copybits>:
 8019038:	3901      	subs	r1, #1
 801903a:	b510      	push	{r4, lr}
 801903c:	1149      	asrs	r1, r1, #5
 801903e:	6914      	ldr	r4, [r2, #16]
 8019040:	3101      	adds	r1, #1
 8019042:	f102 0314 	add.w	r3, r2, #20
 8019046:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801904a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801904e:	42a3      	cmp	r3, r4
 8019050:	4602      	mov	r2, r0
 8019052:	d303      	bcc.n	801905c <__copybits+0x24>
 8019054:	2300      	movs	r3, #0
 8019056:	428a      	cmp	r2, r1
 8019058:	d305      	bcc.n	8019066 <__copybits+0x2e>
 801905a:	bd10      	pop	{r4, pc}
 801905c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019060:	f840 2b04 	str.w	r2, [r0], #4
 8019064:	e7f3      	b.n	801904e <__copybits+0x16>
 8019066:	f842 3b04 	str.w	r3, [r2], #4
 801906a:	e7f4      	b.n	8019056 <__copybits+0x1e>

0801906c <__any_on>:
 801906c:	f100 0214 	add.w	r2, r0, #20
 8019070:	6900      	ldr	r0, [r0, #16]
 8019072:	114b      	asrs	r3, r1, #5
 8019074:	4298      	cmp	r0, r3
 8019076:	b510      	push	{r4, lr}
 8019078:	db11      	blt.n	801909e <__any_on+0x32>
 801907a:	dd0a      	ble.n	8019092 <__any_on+0x26>
 801907c:	f011 011f 	ands.w	r1, r1, #31
 8019080:	d007      	beq.n	8019092 <__any_on+0x26>
 8019082:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019086:	fa24 f001 	lsr.w	r0, r4, r1
 801908a:	fa00 f101 	lsl.w	r1, r0, r1
 801908e:	428c      	cmp	r4, r1
 8019090:	d10b      	bne.n	80190aa <__any_on+0x3e>
 8019092:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019096:	4293      	cmp	r3, r2
 8019098:	d803      	bhi.n	80190a2 <__any_on+0x36>
 801909a:	2000      	movs	r0, #0
 801909c:	bd10      	pop	{r4, pc}
 801909e:	4603      	mov	r3, r0
 80190a0:	e7f7      	b.n	8019092 <__any_on+0x26>
 80190a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80190a6:	2900      	cmp	r1, #0
 80190a8:	d0f5      	beq.n	8019096 <__any_on+0x2a>
 80190aa:	2001      	movs	r0, #1
 80190ac:	e7f6      	b.n	801909c <__any_on+0x30>

080190ae <_calloc_r>:
 80190ae:	b538      	push	{r3, r4, r5, lr}
 80190b0:	fb02 f401 	mul.w	r4, r2, r1
 80190b4:	4621      	mov	r1, r4
 80190b6:	f000 f857 	bl	8019168 <_malloc_r>
 80190ba:	4605      	mov	r5, r0
 80190bc:	b118      	cbz	r0, 80190c6 <_calloc_r+0x18>
 80190be:	4622      	mov	r2, r4
 80190c0:	2100      	movs	r1, #0
 80190c2:	f7fc fca1 	bl	8015a08 <memset>
 80190c6:	4628      	mov	r0, r5
 80190c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080190cc <_free_r>:
 80190cc:	b538      	push	{r3, r4, r5, lr}
 80190ce:	4605      	mov	r5, r0
 80190d0:	2900      	cmp	r1, #0
 80190d2:	d045      	beq.n	8019160 <_free_r+0x94>
 80190d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80190d8:	1f0c      	subs	r4, r1, #4
 80190da:	2b00      	cmp	r3, #0
 80190dc:	bfb8      	it	lt
 80190de:	18e4      	addlt	r4, r4, r3
 80190e0:	f000 fe30 	bl	8019d44 <__malloc_lock>
 80190e4:	4a1f      	ldr	r2, [pc, #124]	; (8019164 <_free_r+0x98>)
 80190e6:	6813      	ldr	r3, [r2, #0]
 80190e8:	4610      	mov	r0, r2
 80190ea:	b933      	cbnz	r3, 80190fa <_free_r+0x2e>
 80190ec:	6063      	str	r3, [r4, #4]
 80190ee:	6014      	str	r4, [r2, #0]
 80190f0:	4628      	mov	r0, r5
 80190f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80190f6:	f000 be26 	b.w	8019d46 <__malloc_unlock>
 80190fa:	42a3      	cmp	r3, r4
 80190fc:	d90c      	bls.n	8019118 <_free_r+0x4c>
 80190fe:	6821      	ldr	r1, [r4, #0]
 8019100:	1862      	adds	r2, r4, r1
 8019102:	4293      	cmp	r3, r2
 8019104:	bf04      	itt	eq
 8019106:	681a      	ldreq	r2, [r3, #0]
 8019108:	685b      	ldreq	r3, [r3, #4]
 801910a:	6063      	str	r3, [r4, #4]
 801910c:	bf04      	itt	eq
 801910e:	1852      	addeq	r2, r2, r1
 8019110:	6022      	streq	r2, [r4, #0]
 8019112:	6004      	str	r4, [r0, #0]
 8019114:	e7ec      	b.n	80190f0 <_free_r+0x24>
 8019116:	4613      	mov	r3, r2
 8019118:	685a      	ldr	r2, [r3, #4]
 801911a:	b10a      	cbz	r2, 8019120 <_free_r+0x54>
 801911c:	42a2      	cmp	r2, r4
 801911e:	d9fa      	bls.n	8019116 <_free_r+0x4a>
 8019120:	6819      	ldr	r1, [r3, #0]
 8019122:	1858      	adds	r0, r3, r1
 8019124:	42a0      	cmp	r0, r4
 8019126:	d10b      	bne.n	8019140 <_free_r+0x74>
 8019128:	6820      	ldr	r0, [r4, #0]
 801912a:	4401      	add	r1, r0
 801912c:	1858      	adds	r0, r3, r1
 801912e:	4282      	cmp	r2, r0
 8019130:	6019      	str	r1, [r3, #0]
 8019132:	d1dd      	bne.n	80190f0 <_free_r+0x24>
 8019134:	6810      	ldr	r0, [r2, #0]
 8019136:	6852      	ldr	r2, [r2, #4]
 8019138:	605a      	str	r2, [r3, #4]
 801913a:	4401      	add	r1, r0
 801913c:	6019      	str	r1, [r3, #0]
 801913e:	e7d7      	b.n	80190f0 <_free_r+0x24>
 8019140:	d902      	bls.n	8019148 <_free_r+0x7c>
 8019142:	230c      	movs	r3, #12
 8019144:	602b      	str	r3, [r5, #0]
 8019146:	e7d3      	b.n	80190f0 <_free_r+0x24>
 8019148:	6820      	ldr	r0, [r4, #0]
 801914a:	1821      	adds	r1, r4, r0
 801914c:	428a      	cmp	r2, r1
 801914e:	bf04      	itt	eq
 8019150:	6811      	ldreq	r1, [r2, #0]
 8019152:	6852      	ldreq	r2, [r2, #4]
 8019154:	6062      	str	r2, [r4, #4]
 8019156:	bf04      	itt	eq
 8019158:	1809      	addeq	r1, r1, r0
 801915a:	6021      	streq	r1, [r4, #0]
 801915c:	605c      	str	r4, [r3, #4]
 801915e:	e7c7      	b.n	80190f0 <_free_r+0x24>
 8019160:	bd38      	pop	{r3, r4, r5, pc}
 8019162:	bf00      	nop
 8019164:	20042498 	.word	0x20042498

08019168 <_malloc_r>:
 8019168:	b570      	push	{r4, r5, r6, lr}
 801916a:	1ccd      	adds	r5, r1, #3
 801916c:	f025 0503 	bic.w	r5, r5, #3
 8019170:	3508      	adds	r5, #8
 8019172:	2d0c      	cmp	r5, #12
 8019174:	bf38      	it	cc
 8019176:	250c      	movcc	r5, #12
 8019178:	2d00      	cmp	r5, #0
 801917a:	4606      	mov	r6, r0
 801917c:	db01      	blt.n	8019182 <_malloc_r+0x1a>
 801917e:	42a9      	cmp	r1, r5
 8019180:	d903      	bls.n	801918a <_malloc_r+0x22>
 8019182:	230c      	movs	r3, #12
 8019184:	6033      	str	r3, [r6, #0]
 8019186:	2000      	movs	r0, #0
 8019188:	bd70      	pop	{r4, r5, r6, pc}
 801918a:	f000 fddb 	bl	8019d44 <__malloc_lock>
 801918e:	4a21      	ldr	r2, [pc, #132]	; (8019214 <_malloc_r+0xac>)
 8019190:	6814      	ldr	r4, [r2, #0]
 8019192:	4621      	mov	r1, r4
 8019194:	b991      	cbnz	r1, 80191bc <_malloc_r+0x54>
 8019196:	4c20      	ldr	r4, [pc, #128]	; (8019218 <_malloc_r+0xb0>)
 8019198:	6823      	ldr	r3, [r4, #0]
 801919a:	b91b      	cbnz	r3, 80191a4 <_malloc_r+0x3c>
 801919c:	4630      	mov	r0, r6
 801919e:	f000 fc91 	bl	8019ac4 <_sbrk_r>
 80191a2:	6020      	str	r0, [r4, #0]
 80191a4:	4629      	mov	r1, r5
 80191a6:	4630      	mov	r0, r6
 80191a8:	f000 fc8c 	bl	8019ac4 <_sbrk_r>
 80191ac:	1c43      	adds	r3, r0, #1
 80191ae:	d124      	bne.n	80191fa <_malloc_r+0x92>
 80191b0:	230c      	movs	r3, #12
 80191b2:	6033      	str	r3, [r6, #0]
 80191b4:	4630      	mov	r0, r6
 80191b6:	f000 fdc6 	bl	8019d46 <__malloc_unlock>
 80191ba:	e7e4      	b.n	8019186 <_malloc_r+0x1e>
 80191bc:	680b      	ldr	r3, [r1, #0]
 80191be:	1b5b      	subs	r3, r3, r5
 80191c0:	d418      	bmi.n	80191f4 <_malloc_r+0x8c>
 80191c2:	2b0b      	cmp	r3, #11
 80191c4:	d90f      	bls.n	80191e6 <_malloc_r+0x7e>
 80191c6:	600b      	str	r3, [r1, #0]
 80191c8:	50cd      	str	r5, [r1, r3]
 80191ca:	18cc      	adds	r4, r1, r3
 80191cc:	4630      	mov	r0, r6
 80191ce:	f000 fdba 	bl	8019d46 <__malloc_unlock>
 80191d2:	f104 000b 	add.w	r0, r4, #11
 80191d6:	1d23      	adds	r3, r4, #4
 80191d8:	f020 0007 	bic.w	r0, r0, #7
 80191dc:	1ac3      	subs	r3, r0, r3
 80191de:	d0d3      	beq.n	8019188 <_malloc_r+0x20>
 80191e0:	425a      	negs	r2, r3
 80191e2:	50e2      	str	r2, [r4, r3]
 80191e4:	e7d0      	b.n	8019188 <_malloc_r+0x20>
 80191e6:	428c      	cmp	r4, r1
 80191e8:	684b      	ldr	r3, [r1, #4]
 80191ea:	bf16      	itet	ne
 80191ec:	6063      	strne	r3, [r4, #4]
 80191ee:	6013      	streq	r3, [r2, #0]
 80191f0:	460c      	movne	r4, r1
 80191f2:	e7eb      	b.n	80191cc <_malloc_r+0x64>
 80191f4:	460c      	mov	r4, r1
 80191f6:	6849      	ldr	r1, [r1, #4]
 80191f8:	e7cc      	b.n	8019194 <_malloc_r+0x2c>
 80191fa:	1cc4      	adds	r4, r0, #3
 80191fc:	f024 0403 	bic.w	r4, r4, #3
 8019200:	42a0      	cmp	r0, r4
 8019202:	d005      	beq.n	8019210 <_malloc_r+0xa8>
 8019204:	1a21      	subs	r1, r4, r0
 8019206:	4630      	mov	r0, r6
 8019208:	f000 fc5c 	bl	8019ac4 <_sbrk_r>
 801920c:	3001      	adds	r0, #1
 801920e:	d0cf      	beq.n	80191b0 <_malloc_r+0x48>
 8019210:	6025      	str	r5, [r4, #0]
 8019212:	e7db      	b.n	80191cc <_malloc_r+0x64>
 8019214:	20042498 	.word	0x20042498
 8019218:	2004249c 	.word	0x2004249c

0801921c <__ssputs_r>:
 801921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019220:	688e      	ldr	r6, [r1, #8]
 8019222:	429e      	cmp	r6, r3
 8019224:	4682      	mov	sl, r0
 8019226:	460c      	mov	r4, r1
 8019228:	4690      	mov	r8, r2
 801922a:	4699      	mov	r9, r3
 801922c:	d837      	bhi.n	801929e <__ssputs_r+0x82>
 801922e:	898a      	ldrh	r2, [r1, #12]
 8019230:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019234:	d031      	beq.n	801929a <__ssputs_r+0x7e>
 8019236:	6825      	ldr	r5, [r4, #0]
 8019238:	6909      	ldr	r1, [r1, #16]
 801923a:	1a6f      	subs	r7, r5, r1
 801923c:	6965      	ldr	r5, [r4, #20]
 801923e:	2302      	movs	r3, #2
 8019240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019244:	fb95 f5f3 	sdiv	r5, r5, r3
 8019248:	f109 0301 	add.w	r3, r9, #1
 801924c:	443b      	add	r3, r7
 801924e:	429d      	cmp	r5, r3
 8019250:	bf38      	it	cc
 8019252:	461d      	movcc	r5, r3
 8019254:	0553      	lsls	r3, r2, #21
 8019256:	d530      	bpl.n	80192ba <__ssputs_r+0x9e>
 8019258:	4629      	mov	r1, r5
 801925a:	f7ff ff85 	bl	8019168 <_malloc_r>
 801925e:	4606      	mov	r6, r0
 8019260:	b950      	cbnz	r0, 8019278 <__ssputs_r+0x5c>
 8019262:	230c      	movs	r3, #12
 8019264:	f8ca 3000 	str.w	r3, [sl]
 8019268:	89a3      	ldrh	r3, [r4, #12]
 801926a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801926e:	81a3      	strh	r3, [r4, #12]
 8019270:	f04f 30ff 	mov.w	r0, #4294967295
 8019274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019278:	463a      	mov	r2, r7
 801927a:	6921      	ldr	r1, [r4, #16]
 801927c:	f7ff fb0e 	bl	801889c <memcpy>
 8019280:	89a3      	ldrh	r3, [r4, #12]
 8019282:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801928a:	81a3      	strh	r3, [r4, #12]
 801928c:	6126      	str	r6, [r4, #16]
 801928e:	6165      	str	r5, [r4, #20]
 8019290:	443e      	add	r6, r7
 8019292:	1bed      	subs	r5, r5, r7
 8019294:	6026      	str	r6, [r4, #0]
 8019296:	60a5      	str	r5, [r4, #8]
 8019298:	464e      	mov	r6, r9
 801929a:	454e      	cmp	r6, r9
 801929c:	d900      	bls.n	80192a0 <__ssputs_r+0x84>
 801929e:	464e      	mov	r6, r9
 80192a0:	4632      	mov	r2, r6
 80192a2:	4641      	mov	r1, r8
 80192a4:	6820      	ldr	r0, [r4, #0]
 80192a6:	f000 fd34 	bl	8019d12 <memmove>
 80192aa:	68a3      	ldr	r3, [r4, #8]
 80192ac:	1b9b      	subs	r3, r3, r6
 80192ae:	60a3      	str	r3, [r4, #8]
 80192b0:	6823      	ldr	r3, [r4, #0]
 80192b2:	441e      	add	r6, r3
 80192b4:	6026      	str	r6, [r4, #0]
 80192b6:	2000      	movs	r0, #0
 80192b8:	e7dc      	b.n	8019274 <__ssputs_r+0x58>
 80192ba:	462a      	mov	r2, r5
 80192bc:	f000 fd44 	bl	8019d48 <_realloc_r>
 80192c0:	4606      	mov	r6, r0
 80192c2:	2800      	cmp	r0, #0
 80192c4:	d1e2      	bne.n	801928c <__ssputs_r+0x70>
 80192c6:	6921      	ldr	r1, [r4, #16]
 80192c8:	4650      	mov	r0, sl
 80192ca:	f7ff feff 	bl	80190cc <_free_r>
 80192ce:	e7c8      	b.n	8019262 <__ssputs_r+0x46>

080192d0 <_svfiprintf_r>:
 80192d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192d4:	461d      	mov	r5, r3
 80192d6:	898b      	ldrh	r3, [r1, #12]
 80192d8:	061f      	lsls	r7, r3, #24
 80192da:	b09d      	sub	sp, #116	; 0x74
 80192dc:	4680      	mov	r8, r0
 80192de:	460c      	mov	r4, r1
 80192e0:	4616      	mov	r6, r2
 80192e2:	d50f      	bpl.n	8019304 <_svfiprintf_r+0x34>
 80192e4:	690b      	ldr	r3, [r1, #16]
 80192e6:	b96b      	cbnz	r3, 8019304 <_svfiprintf_r+0x34>
 80192e8:	2140      	movs	r1, #64	; 0x40
 80192ea:	f7ff ff3d 	bl	8019168 <_malloc_r>
 80192ee:	6020      	str	r0, [r4, #0]
 80192f0:	6120      	str	r0, [r4, #16]
 80192f2:	b928      	cbnz	r0, 8019300 <_svfiprintf_r+0x30>
 80192f4:	230c      	movs	r3, #12
 80192f6:	f8c8 3000 	str.w	r3, [r8]
 80192fa:	f04f 30ff 	mov.w	r0, #4294967295
 80192fe:	e0c8      	b.n	8019492 <_svfiprintf_r+0x1c2>
 8019300:	2340      	movs	r3, #64	; 0x40
 8019302:	6163      	str	r3, [r4, #20]
 8019304:	2300      	movs	r3, #0
 8019306:	9309      	str	r3, [sp, #36]	; 0x24
 8019308:	2320      	movs	r3, #32
 801930a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801930e:	2330      	movs	r3, #48	; 0x30
 8019310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019314:	9503      	str	r5, [sp, #12]
 8019316:	f04f 0b01 	mov.w	fp, #1
 801931a:	4637      	mov	r7, r6
 801931c:	463d      	mov	r5, r7
 801931e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019322:	b10b      	cbz	r3, 8019328 <_svfiprintf_r+0x58>
 8019324:	2b25      	cmp	r3, #37	; 0x25
 8019326:	d13e      	bne.n	80193a6 <_svfiprintf_r+0xd6>
 8019328:	ebb7 0a06 	subs.w	sl, r7, r6
 801932c:	d00b      	beq.n	8019346 <_svfiprintf_r+0x76>
 801932e:	4653      	mov	r3, sl
 8019330:	4632      	mov	r2, r6
 8019332:	4621      	mov	r1, r4
 8019334:	4640      	mov	r0, r8
 8019336:	f7ff ff71 	bl	801921c <__ssputs_r>
 801933a:	3001      	adds	r0, #1
 801933c:	f000 80a4 	beq.w	8019488 <_svfiprintf_r+0x1b8>
 8019340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019342:	4453      	add	r3, sl
 8019344:	9309      	str	r3, [sp, #36]	; 0x24
 8019346:	783b      	ldrb	r3, [r7, #0]
 8019348:	2b00      	cmp	r3, #0
 801934a:	f000 809d 	beq.w	8019488 <_svfiprintf_r+0x1b8>
 801934e:	2300      	movs	r3, #0
 8019350:	f04f 32ff 	mov.w	r2, #4294967295
 8019354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019358:	9304      	str	r3, [sp, #16]
 801935a:	9307      	str	r3, [sp, #28]
 801935c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019360:	931a      	str	r3, [sp, #104]	; 0x68
 8019362:	462f      	mov	r7, r5
 8019364:	2205      	movs	r2, #5
 8019366:	f817 1b01 	ldrb.w	r1, [r7], #1
 801936a:	4850      	ldr	r0, [pc, #320]	; (80194ac <_svfiprintf_r+0x1dc>)
 801936c:	f7e6 ff50 	bl	8000210 <memchr>
 8019370:	9b04      	ldr	r3, [sp, #16]
 8019372:	b9d0      	cbnz	r0, 80193aa <_svfiprintf_r+0xda>
 8019374:	06d9      	lsls	r1, r3, #27
 8019376:	bf44      	itt	mi
 8019378:	2220      	movmi	r2, #32
 801937a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801937e:	071a      	lsls	r2, r3, #28
 8019380:	bf44      	itt	mi
 8019382:	222b      	movmi	r2, #43	; 0x2b
 8019384:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019388:	782a      	ldrb	r2, [r5, #0]
 801938a:	2a2a      	cmp	r2, #42	; 0x2a
 801938c:	d015      	beq.n	80193ba <_svfiprintf_r+0xea>
 801938e:	9a07      	ldr	r2, [sp, #28]
 8019390:	462f      	mov	r7, r5
 8019392:	2000      	movs	r0, #0
 8019394:	250a      	movs	r5, #10
 8019396:	4639      	mov	r1, r7
 8019398:	f811 3b01 	ldrb.w	r3, [r1], #1
 801939c:	3b30      	subs	r3, #48	; 0x30
 801939e:	2b09      	cmp	r3, #9
 80193a0:	d94d      	bls.n	801943e <_svfiprintf_r+0x16e>
 80193a2:	b1b8      	cbz	r0, 80193d4 <_svfiprintf_r+0x104>
 80193a4:	e00f      	b.n	80193c6 <_svfiprintf_r+0xf6>
 80193a6:	462f      	mov	r7, r5
 80193a8:	e7b8      	b.n	801931c <_svfiprintf_r+0x4c>
 80193aa:	4a40      	ldr	r2, [pc, #256]	; (80194ac <_svfiprintf_r+0x1dc>)
 80193ac:	1a80      	subs	r0, r0, r2
 80193ae:	fa0b f000 	lsl.w	r0, fp, r0
 80193b2:	4318      	orrs	r0, r3
 80193b4:	9004      	str	r0, [sp, #16]
 80193b6:	463d      	mov	r5, r7
 80193b8:	e7d3      	b.n	8019362 <_svfiprintf_r+0x92>
 80193ba:	9a03      	ldr	r2, [sp, #12]
 80193bc:	1d11      	adds	r1, r2, #4
 80193be:	6812      	ldr	r2, [r2, #0]
 80193c0:	9103      	str	r1, [sp, #12]
 80193c2:	2a00      	cmp	r2, #0
 80193c4:	db01      	blt.n	80193ca <_svfiprintf_r+0xfa>
 80193c6:	9207      	str	r2, [sp, #28]
 80193c8:	e004      	b.n	80193d4 <_svfiprintf_r+0x104>
 80193ca:	4252      	negs	r2, r2
 80193cc:	f043 0302 	orr.w	r3, r3, #2
 80193d0:	9207      	str	r2, [sp, #28]
 80193d2:	9304      	str	r3, [sp, #16]
 80193d4:	783b      	ldrb	r3, [r7, #0]
 80193d6:	2b2e      	cmp	r3, #46	; 0x2e
 80193d8:	d10c      	bne.n	80193f4 <_svfiprintf_r+0x124>
 80193da:	787b      	ldrb	r3, [r7, #1]
 80193dc:	2b2a      	cmp	r3, #42	; 0x2a
 80193de:	d133      	bne.n	8019448 <_svfiprintf_r+0x178>
 80193e0:	9b03      	ldr	r3, [sp, #12]
 80193e2:	1d1a      	adds	r2, r3, #4
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	9203      	str	r2, [sp, #12]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	bfb8      	it	lt
 80193ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80193f0:	3702      	adds	r7, #2
 80193f2:	9305      	str	r3, [sp, #20]
 80193f4:	4d2e      	ldr	r5, [pc, #184]	; (80194b0 <_svfiprintf_r+0x1e0>)
 80193f6:	7839      	ldrb	r1, [r7, #0]
 80193f8:	2203      	movs	r2, #3
 80193fa:	4628      	mov	r0, r5
 80193fc:	f7e6 ff08 	bl	8000210 <memchr>
 8019400:	b138      	cbz	r0, 8019412 <_svfiprintf_r+0x142>
 8019402:	2340      	movs	r3, #64	; 0x40
 8019404:	1b40      	subs	r0, r0, r5
 8019406:	fa03 f000 	lsl.w	r0, r3, r0
 801940a:	9b04      	ldr	r3, [sp, #16]
 801940c:	4303      	orrs	r3, r0
 801940e:	3701      	adds	r7, #1
 8019410:	9304      	str	r3, [sp, #16]
 8019412:	7839      	ldrb	r1, [r7, #0]
 8019414:	4827      	ldr	r0, [pc, #156]	; (80194b4 <_svfiprintf_r+0x1e4>)
 8019416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801941a:	2206      	movs	r2, #6
 801941c:	1c7e      	adds	r6, r7, #1
 801941e:	f7e6 fef7 	bl	8000210 <memchr>
 8019422:	2800      	cmp	r0, #0
 8019424:	d038      	beq.n	8019498 <_svfiprintf_r+0x1c8>
 8019426:	4b24      	ldr	r3, [pc, #144]	; (80194b8 <_svfiprintf_r+0x1e8>)
 8019428:	bb13      	cbnz	r3, 8019470 <_svfiprintf_r+0x1a0>
 801942a:	9b03      	ldr	r3, [sp, #12]
 801942c:	3307      	adds	r3, #7
 801942e:	f023 0307 	bic.w	r3, r3, #7
 8019432:	3308      	adds	r3, #8
 8019434:	9303      	str	r3, [sp, #12]
 8019436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019438:	444b      	add	r3, r9
 801943a:	9309      	str	r3, [sp, #36]	; 0x24
 801943c:	e76d      	b.n	801931a <_svfiprintf_r+0x4a>
 801943e:	fb05 3202 	mla	r2, r5, r2, r3
 8019442:	2001      	movs	r0, #1
 8019444:	460f      	mov	r7, r1
 8019446:	e7a6      	b.n	8019396 <_svfiprintf_r+0xc6>
 8019448:	2300      	movs	r3, #0
 801944a:	3701      	adds	r7, #1
 801944c:	9305      	str	r3, [sp, #20]
 801944e:	4619      	mov	r1, r3
 8019450:	250a      	movs	r5, #10
 8019452:	4638      	mov	r0, r7
 8019454:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019458:	3a30      	subs	r2, #48	; 0x30
 801945a:	2a09      	cmp	r2, #9
 801945c:	d903      	bls.n	8019466 <_svfiprintf_r+0x196>
 801945e:	2b00      	cmp	r3, #0
 8019460:	d0c8      	beq.n	80193f4 <_svfiprintf_r+0x124>
 8019462:	9105      	str	r1, [sp, #20]
 8019464:	e7c6      	b.n	80193f4 <_svfiprintf_r+0x124>
 8019466:	fb05 2101 	mla	r1, r5, r1, r2
 801946a:	2301      	movs	r3, #1
 801946c:	4607      	mov	r7, r0
 801946e:	e7f0      	b.n	8019452 <_svfiprintf_r+0x182>
 8019470:	ab03      	add	r3, sp, #12
 8019472:	9300      	str	r3, [sp, #0]
 8019474:	4622      	mov	r2, r4
 8019476:	4b11      	ldr	r3, [pc, #68]	; (80194bc <_svfiprintf_r+0x1ec>)
 8019478:	a904      	add	r1, sp, #16
 801947a:	4640      	mov	r0, r8
 801947c:	f7fc fb60 	bl	8015b40 <_printf_float>
 8019480:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019484:	4681      	mov	r9, r0
 8019486:	d1d6      	bne.n	8019436 <_svfiprintf_r+0x166>
 8019488:	89a3      	ldrh	r3, [r4, #12]
 801948a:	065b      	lsls	r3, r3, #25
 801948c:	f53f af35 	bmi.w	80192fa <_svfiprintf_r+0x2a>
 8019490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019492:	b01d      	add	sp, #116	; 0x74
 8019494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019498:	ab03      	add	r3, sp, #12
 801949a:	9300      	str	r3, [sp, #0]
 801949c:	4622      	mov	r2, r4
 801949e:	4b07      	ldr	r3, [pc, #28]	; (80194bc <_svfiprintf_r+0x1ec>)
 80194a0:	a904      	add	r1, sp, #16
 80194a2:	4640      	mov	r0, r8
 80194a4:	f7fc fe02 	bl	80160ac <_printf_i>
 80194a8:	e7ea      	b.n	8019480 <_svfiprintf_r+0x1b0>
 80194aa:	bf00      	nop
 80194ac:	0801a63c 	.word	0x0801a63c
 80194b0:	0801a642 	.word	0x0801a642
 80194b4:	0801a646 	.word	0x0801a646
 80194b8:	08015b41 	.word	0x08015b41
 80194bc:	0801921d 	.word	0x0801921d

080194c0 <_sungetc_r>:
 80194c0:	b538      	push	{r3, r4, r5, lr}
 80194c2:	1c4b      	adds	r3, r1, #1
 80194c4:	4614      	mov	r4, r2
 80194c6:	d103      	bne.n	80194d0 <_sungetc_r+0x10>
 80194c8:	f04f 35ff 	mov.w	r5, #4294967295
 80194cc:	4628      	mov	r0, r5
 80194ce:	bd38      	pop	{r3, r4, r5, pc}
 80194d0:	8993      	ldrh	r3, [r2, #12]
 80194d2:	f023 0320 	bic.w	r3, r3, #32
 80194d6:	8193      	strh	r3, [r2, #12]
 80194d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80194da:	6852      	ldr	r2, [r2, #4]
 80194dc:	b2cd      	uxtb	r5, r1
 80194de:	b18b      	cbz	r3, 8019504 <_sungetc_r+0x44>
 80194e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80194e2:	4293      	cmp	r3, r2
 80194e4:	dd08      	ble.n	80194f8 <_sungetc_r+0x38>
 80194e6:	6823      	ldr	r3, [r4, #0]
 80194e8:	1e5a      	subs	r2, r3, #1
 80194ea:	6022      	str	r2, [r4, #0]
 80194ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 80194f0:	6863      	ldr	r3, [r4, #4]
 80194f2:	3301      	adds	r3, #1
 80194f4:	6063      	str	r3, [r4, #4]
 80194f6:	e7e9      	b.n	80194cc <_sungetc_r+0xc>
 80194f8:	4621      	mov	r1, r4
 80194fa:	f000 fbc3 	bl	8019c84 <__submore>
 80194fe:	2800      	cmp	r0, #0
 8019500:	d0f1      	beq.n	80194e6 <_sungetc_r+0x26>
 8019502:	e7e1      	b.n	80194c8 <_sungetc_r+0x8>
 8019504:	6921      	ldr	r1, [r4, #16]
 8019506:	6823      	ldr	r3, [r4, #0]
 8019508:	b151      	cbz	r1, 8019520 <_sungetc_r+0x60>
 801950a:	4299      	cmp	r1, r3
 801950c:	d208      	bcs.n	8019520 <_sungetc_r+0x60>
 801950e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019512:	42a9      	cmp	r1, r5
 8019514:	d104      	bne.n	8019520 <_sungetc_r+0x60>
 8019516:	3b01      	subs	r3, #1
 8019518:	3201      	adds	r2, #1
 801951a:	6023      	str	r3, [r4, #0]
 801951c:	6062      	str	r2, [r4, #4]
 801951e:	e7d5      	b.n	80194cc <_sungetc_r+0xc>
 8019520:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019528:	6363      	str	r3, [r4, #52]	; 0x34
 801952a:	2303      	movs	r3, #3
 801952c:	63a3      	str	r3, [r4, #56]	; 0x38
 801952e:	4623      	mov	r3, r4
 8019530:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019534:	6023      	str	r3, [r4, #0]
 8019536:	2301      	movs	r3, #1
 8019538:	e7dc      	b.n	80194f4 <_sungetc_r+0x34>

0801953a <__ssrefill_r>:
 801953a:	b510      	push	{r4, lr}
 801953c:	460c      	mov	r4, r1
 801953e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019540:	b169      	cbz	r1, 801955e <__ssrefill_r+0x24>
 8019542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019546:	4299      	cmp	r1, r3
 8019548:	d001      	beq.n	801954e <__ssrefill_r+0x14>
 801954a:	f7ff fdbf 	bl	80190cc <_free_r>
 801954e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019550:	6063      	str	r3, [r4, #4]
 8019552:	2000      	movs	r0, #0
 8019554:	6360      	str	r0, [r4, #52]	; 0x34
 8019556:	b113      	cbz	r3, 801955e <__ssrefill_r+0x24>
 8019558:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801955a:	6023      	str	r3, [r4, #0]
 801955c:	bd10      	pop	{r4, pc}
 801955e:	6923      	ldr	r3, [r4, #16]
 8019560:	6023      	str	r3, [r4, #0]
 8019562:	2300      	movs	r3, #0
 8019564:	6063      	str	r3, [r4, #4]
 8019566:	89a3      	ldrh	r3, [r4, #12]
 8019568:	f043 0320 	orr.w	r3, r3, #32
 801956c:	81a3      	strh	r3, [r4, #12]
 801956e:	f04f 30ff 	mov.w	r0, #4294967295
 8019572:	e7f3      	b.n	801955c <__ssrefill_r+0x22>

08019574 <__ssvfiscanf_r>:
 8019574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019578:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801957c:	460c      	mov	r4, r1
 801957e:	2100      	movs	r1, #0
 8019580:	9144      	str	r1, [sp, #272]	; 0x110
 8019582:	9145      	str	r1, [sp, #276]	; 0x114
 8019584:	499f      	ldr	r1, [pc, #636]	; (8019804 <__ssvfiscanf_r+0x290>)
 8019586:	91a0      	str	r1, [sp, #640]	; 0x280
 8019588:	f10d 0804 	add.w	r8, sp, #4
 801958c:	499e      	ldr	r1, [pc, #632]	; (8019808 <__ssvfiscanf_r+0x294>)
 801958e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801980c <__ssvfiscanf_r+0x298>
 8019592:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019596:	4606      	mov	r6, r0
 8019598:	4692      	mov	sl, r2
 801959a:	91a1      	str	r1, [sp, #644]	; 0x284
 801959c:	9300      	str	r3, [sp, #0]
 801959e:	270a      	movs	r7, #10
 80195a0:	f89a 3000 	ldrb.w	r3, [sl]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	f000 812a 	beq.w	80197fe <__ssvfiscanf_r+0x28a>
 80195aa:	4655      	mov	r5, sl
 80195ac:	f7ff f93e 	bl	801882c <__locale_ctype_ptr>
 80195b0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80195b4:	4458      	add	r0, fp
 80195b6:	7843      	ldrb	r3, [r0, #1]
 80195b8:	f013 0308 	ands.w	r3, r3, #8
 80195bc:	d01c      	beq.n	80195f8 <__ssvfiscanf_r+0x84>
 80195be:	6863      	ldr	r3, [r4, #4]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	dd12      	ble.n	80195ea <__ssvfiscanf_r+0x76>
 80195c4:	f7ff f932 	bl	801882c <__locale_ctype_ptr>
 80195c8:	6823      	ldr	r3, [r4, #0]
 80195ca:	781a      	ldrb	r2, [r3, #0]
 80195cc:	4410      	add	r0, r2
 80195ce:	7842      	ldrb	r2, [r0, #1]
 80195d0:	0712      	lsls	r2, r2, #28
 80195d2:	d401      	bmi.n	80195d8 <__ssvfiscanf_r+0x64>
 80195d4:	46aa      	mov	sl, r5
 80195d6:	e7e3      	b.n	80195a0 <__ssvfiscanf_r+0x2c>
 80195d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80195da:	3201      	adds	r2, #1
 80195dc:	9245      	str	r2, [sp, #276]	; 0x114
 80195de:	6862      	ldr	r2, [r4, #4]
 80195e0:	3301      	adds	r3, #1
 80195e2:	3a01      	subs	r2, #1
 80195e4:	6062      	str	r2, [r4, #4]
 80195e6:	6023      	str	r3, [r4, #0]
 80195e8:	e7e9      	b.n	80195be <__ssvfiscanf_r+0x4a>
 80195ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195ec:	4621      	mov	r1, r4
 80195ee:	4630      	mov	r0, r6
 80195f0:	4798      	blx	r3
 80195f2:	2800      	cmp	r0, #0
 80195f4:	d0e6      	beq.n	80195c4 <__ssvfiscanf_r+0x50>
 80195f6:	e7ed      	b.n	80195d4 <__ssvfiscanf_r+0x60>
 80195f8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80195fc:	f040 8082 	bne.w	8019704 <__ssvfiscanf_r+0x190>
 8019600:	9343      	str	r3, [sp, #268]	; 0x10c
 8019602:	9341      	str	r3, [sp, #260]	; 0x104
 8019604:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019608:	2b2a      	cmp	r3, #42	; 0x2a
 801960a:	d103      	bne.n	8019614 <__ssvfiscanf_r+0xa0>
 801960c:	2310      	movs	r3, #16
 801960e:	9341      	str	r3, [sp, #260]	; 0x104
 8019610:	f10a 0502 	add.w	r5, sl, #2
 8019614:	46aa      	mov	sl, r5
 8019616:	f815 1b01 	ldrb.w	r1, [r5], #1
 801961a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801961e:	2a09      	cmp	r2, #9
 8019620:	d922      	bls.n	8019668 <__ssvfiscanf_r+0xf4>
 8019622:	2203      	movs	r2, #3
 8019624:	4879      	ldr	r0, [pc, #484]	; (801980c <__ssvfiscanf_r+0x298>)
 8019626:	f7e6 fdf3 	bl	8000210 <memchr>
 801962a:	b138      	cbz	r0, 801963c <__ssvfiscanf_r+0xc8>
 801962c:	eba0 0309 	sub.w	r3, r0, r9
 8019630:	2001      	movs	r0, #1
 8019632:	4098      	lsls	r0, r3
 8019634:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019636:	4318      	orrs	r0, r3
 8019638:	9041      	str	r0, [sp, #260]	; 0x104
 801963a:	46aa      	mov	sl, r5
 801963c:	f89a 3000 	ldrb.w	r3, [sl]
 8019640:	2b67      	cmp	r3, #103	; 0x67
 8019642:	f10a 0501 	add.w	r5, sl, #1
 8019646:	d82b      	bhi.n	80196a0 <__ssvfiscanf_r+0x12c>
 8019648:	2b65      	cmp	r3, #101	; 0x65
 801964a:	f080 809f 	bcs.w	801978c <__ssvfiscanf_r+0x218>
 801964e:	2b47      	cmp	r3, #71	; 0x47
 8019650:	d810      	bhi.n	8019674 <__ssvfiscanf_r+0x100>
 8019652:	2b45      	cmp	r3, #69	; 0x45
 8019654:	f080 809a 	bcs.w	801978c <__ssvfiscanf_r+0x218>
 8019658:	2b00      	cmp	r3, #0
 801965a:	d06c      	beq.n	8019736 <__ssvfiscanf_r+0x1c2>
 801965c:	2b25      	cmp	r3, #37	; 0x25
 801965e:	d051      	beq.n	8019704 <__ssvfiscanf_r+0x190>
 8019660:	2303      	movs	r3, #3
 8019662:	9347      	str	r3, [sp, #284]	; 0x11c
 8019664:	9742      	str	r7, [sp, #264]	; 0x108
 8019666:	e027      	b.n	80196b8 <__ssvfiscanf_r+0x144>
 8019668:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801966a:	fb07 1303 	mla	r3, r7, r3, r1
 801966e:	3b30      	subs	r3, #48	; 0x30
 8019670:	9343      	str	r3, [sp, #268]	; 0x10c
 8019672:	e7cf      	b.n	8019614 <__ssvfiscanf_r+0xa0>
 8019674:	2b5b      	cmp	r3, #91	; 0x5b
 8019676:	d06a      	beq.n	801974e <__ssvfiscanf_r+0x1da>
 8019678:	d80c      	bhi.n	8019694 <__ssvfiscanf_r+0x120>
 801967a:	2b58      	cmp	r3, #88	; 0x58
 801967c:	d1f0      	bne.n	8019660 <__ssvfiscanf_r+0xec>
 801967e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019684:	9241      	str	r2, [sp, #260]	; 0x104
 8019686:	2210      	movs	r2, #16
 8019688:	9242      	str	r2, [sp, #264]	; 0x108
 801968a:	2b6e      	cmp	r3, #110	; 0x6e
 801968c:	bf8c      	ite	hi
 801968e:	2304      	movhi	r3, #4
 8019690:	2303      	movls	r3, #3
 8019692:	e010      	b.n	80196b6 <__ssvfiscanf_r+0x142>
 8019694:	2b63      	cmp	r3, #99	; 0x63
 8019696:	d065      	beq.n	8019764 <__ssvfiscanf_r+0x1f0>
 8019698:	2b64      	cmp	r3, #100	; 0x64
 801969a:	d1e1      	bne.n	8019660 <__ssvfiscanf_r+0xec>
 801969c:	9742      	str	r7, [sp, #264]	; 0x108
 801969e:	e7f4      	b.n	801968a <__ssvfiscanf_r+0x116>
 80196a0:	2b70      	cmp	r3, #112	; 0x70
 80196a2:	d04b      	beq.n	801973c <__ssvfiscanf_r+0x1c8>
 80196a4:	d826      	bhi.n	80196f4 <__ssvfiscanf_r+0x180>
 80196a6:	2b6e      	cmp	r3, #110	; 0x6e
 80196a8:	d062      	beq.n	8019770 <__ssvfiscanf_r+0x1fc>
 80196aa:	d84c      	bhi.n	8019746 <__ssvfiscanf_r+0x1d2>
 80196ac:	2b69      	cmp	r3, #105	; 0x69
 80196ae:	d1d7      	bne.n	8019660 <__ssvfiscanf_r+0xec>
 80196b0:	2300      	movs	r3, #0
 80196b2:	9342      	str	r3, [sp, #264]	; 0x108
 80196b4:	2303      	movs	r3, #3
 80196b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80196b8:	6863      	ldr	r3, [r4, #4]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	dd68      	ble.n	8019790 <__ssvfiscanf_r+0x21c>
 80196be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80196c0:	0659      	lsls	r1, r3, #25
 80196c2:	d407      	bmi.n	80196d4 <__ssvfiscanf_r+0x160>
 80196c4:	f7ff f8b2 	bl	801882c <__locale_ctype_ptr>
 80196c8:	6823      	ldr	r3, [r4, #0]
 80196ca:	781a      	ldrb	r2, [r3, #0]
 80196cc:	4410      	add	r0, r2
 80196ce:	7842      	ldrb	r2, [r0, #1]
 80196d0:	0712      	lsls	r2, r2, #28
 80196d2:	d464      	bmi.n	801979e <__ssvfiscanf_r+0x22a>
 80196d4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80196d6:	2b02      	cmp	r3, #2
 80196d8:	dc73      	bgt.n	80197c2 <__ssvfiscanf_r+0x24e>
 80196da:	466b      	mov	r3, sp
 80196dc:	4622      	mov	r2, r4
 80196de:	a941      	add	r1, sp, #260	; 0x104
 80196e0:	4630      	mov	r0, r6
 80196e2:	f000 f897 	bl	8019814 <_scanf_chars>
 80196e6:	2801      	cmp	r0, #1
 80196e8:	f000 8089 	beq.w	80197fe <__ssvfiscanf_r+0x28a>
 80196ec:	2802      	cmp	r0, #2
 80196ee:	f47f af71 	bne.w	80195d4 <__ssvfiscanf_r+0x60>
 80196f2:	e01d      	b.n	8019730 <__ssvfiscanf_r+0x1bc>
 80196f4:	2b75      	cmp	r3, #117	; 0x75
 80196f6:	d0d1      	beq.n	801969c <__ssvfiscanf_r+0x128>
 80196f8:	2b78      	cmp	r3, #120	; 0x78
 80196fa:	d0c0      	beq.n	801967e <__ssvfiscanf_r+0x10a>
 80196fc:	2b73      	cmp	r3, #115	; 0x73
 80196fe:	d1af      	bne.n	8019660 <__ssvfiscanf_r+0xec>
 8019700:	2302      	movs	r3, #2
 8019702:	e7d8      	b.n	80196b6 <__ssvfiscanf_r+0x142>
 8019704:	6863      	ldr	r3, [r4, #4]
 8019706:	2b00      	cmp	r3, #0
 8019708:	dd0c      	ble.n	8019724 <__ssvfiscanf_r+0x1b0>
 801970a:	6823      	ldr	r3, [r4, #0]
 801970c:	781a      	ldrb	r2, [r3, #0]
 801970e:	455a      	cmp	r2, fp
 8019710:	d175      	bne.n	80197fe <__ssvfiscanf_r+0x28a>
 8019712:	3301      	adds	r3, #1
 8019714:	6862      	ldr	r2, [r4, #4]
 8019716:	6023      	str	r3, [r4, #0]
 8019718:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801971a:	3a01      	subs	r2, #1
 801971c:	3301      	adds	r3, #1
 801971e:	6062      	str	r2, [r4, #4]
 8019720:	9345      	str	r3, [sp, #276]	; 0x114
 8019722:	e757      	b.n	80195d4 <__ssvfiscanf_r+0x60>
 8019724:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019726:	4621      	mov	r1, r4
 8019728:	4630      	mov	r0, r6
 801972a:	4798      	blx	r3
 801972c:	2800      	cmp	r0, #0
 801972e:	d0ec      	beq.n	801970a <__ssvfiscanf_r+0x196>
 8019730:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019732:	2800      	cmp	r0, #0
 8019734:	d159      	bne.n	80197ea <__ssvfiscanf_r+0x276>
 8019736:	f04f 30ff 	mov.w	r0, #4294967295
 801973a:	e05c      	b.n	80197f6 <__ssvfiscanf_r+0x282>
 801973c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801973e:	f042 0220 	orr.w	r2, r2, #32
 8019742:	9241      	str	r2, [sp, #260]	; 0x104
 8019744:	e79b      	b.n	801967e <__ssvfiscanf_r+0x10a>
 8019746:	2308      	movs	r3, #8
 8019748:	9342      	str	r3, [sp, #264]	; 0x108
 801974a:	2304      	movs	r3, #4
 801974c:	e7b3      	b.n	80196b6 <__ssvfiscanf_r+0x142>
 801974e:	4629      	mov	r1, r5
 8019750:	4640      	mov	r0, r8
 8019752:	f000 f9c7 	bl	8019ae4 <__sccl>
 8019756:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801975c:	9341      	str	r3, [sp, #260]	; 0x104
 801975e:	4605      	mov	r5, r0
 8019760:	2301      	movs	r3, #1
 8019762:	e7a8      	b.n	80196b6 <__ssvfiscanf_r+0x142>
 8019764:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801976a:	9341      	str	r3, [sp, #260]	; 0x104
 801976c:	2300      	movs	r3, #0
 801976e:	e7a2      	b.n	80196b6 <__ssvfiscanf_r+0x142>
 8019770:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019772:	06c3      	lsls	r3, r0, #27
 8019774:	f53f af2e 	bmi.w	80195d4 <__ssvfiscanf_r+0x60>
 8019778:	9b00      	ldr	r3, [sp, #0]
 801977a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801977c:	1d19      	adds	r1, r3, #4
 801977e:	9100      	str	r1, [sp, #0]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	07c0      	lsls	r0, r0, #31
 8019784:	bf4c      	ite	mi
 8019786:	801a      	strhmi	r2, [r3, #0]
 8019788:	601a      	strpl	r2, [r3, #0]
 801978a:	e723      	b.n	80195d4 <__ssvfiscanf_r+0x60>
 801978c:	2305      	movs	r3, #5
 801978e:	e792      	b.n	80196b6 <__ssvfiscanf_r+0x142>
 8019790:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019792:	4621      	mov	r1, r4
 8019794:	4630      	mov	r0, r6
 8019796:	4798      	blx	r3
 8019798:	2800      	cmp	r0, #0
 801979a:	d090      	beq.n	80196be <__ssvfiscanf_r+0x14a>
 801979c:	e7c8      	b.n	8019730 <__ssvfiscanf_r+0x1bc>
 801979e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80197a0:	3201      	adds	r2, #1
 80197a2:	9245      	str	r2, [sp, #276]	; 0x114
 80197a4:	6862      	ldr	r2, [r4, #4]
 80197a6:	3a01      	subs	r2, #1
 80197a8:	2a00      	cmp	r2, #0
 80197aa:	6062      	str	r2, [r4, #4]
 80197ac:	dd02      	ble.n	80197b4 <__ssvfiscanf_r+0x240>
 80197ae:	3301      	adds	r3, #1
 80197b0:	6023      	str	r3, [r4, #0]
 80197b2:	e787      	b.n	80196c4 <__ssvfiscanf_r+0x150>
 80197b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80197b6:	4621      	mov	r1, r4
 80197b8:	4630      	mov	r0, r6
 80197ba:	4798      	blx	r3
 80197bc:	2800      	cmp	r0, #0
 80197be:	d081      	beq.n	80196c4 <__ssvfiscanf_r+0x150>
 80197c0:	e7b6      	b.n	8019730 <__ssvfiscanf_r+0x1bc>
 80197c2:	2b04      	cmp	r3, #4
 80197c4:	dc06      	bgt.n	80197d4 <__ssvfiscanf_r+0x260>
 80197c6:	466b      	mov	r3, sp
 80197c8:	4622      	mov	r2, r4
 80197ca:	a941      	add	r1, sp, #260	; 0x104
 80197cc:	4630      	mov	r0, r6
 80197ce:	f000 f885 	bl	80198dc <_scanf_i>
 80197d2:	e788      	b.n	80196e6 <__ssvfiscanf_r+0x172>
 80197d4:	4b0e      	ldr	r3, [pc, #56]	; (8019810 <__ssvfiscanf_r+0x29c>)
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	f43f aefc 	beq.w	80195d4 <__ssvfiscanf_r+0x60>
 80197dc:	466b      	mov	r3, sp
 80197de:	4622      	mov	r2, r4
 80197e0:	a941      	add	r1, sp, #260	; 0x104
 80197e2:	4630      	mov	r0, r6
 80197e4:	f7fc fd74 	bl	80162d0 <_scanf_float>
 80197e8:	e77d      	b.n	80196e6 <__ssvfiscanf_r+0x172>
 80197ea:	89a3      	ldrh	r3, [r4, #12]
 80197ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80197f0:	bf18      	it	ne
 80197f2:	f04f 30ff 	movne.w	r0, #4294967295
 80197f6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80197fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019800:	e7f9      	b.n	80197f6 <__ssvfiscanf_r+0x282>
 8019802:	bf00      	nop
 8019804:	080194c1 	.word	0x080194c1
 8019808:	0801953b 	.word	0x0801953b
 801980c:	0801a642 	.word	0x0801a642
 8019810:	080162d1 	.word	0x080162d1

08019814 <_scanf_chars>:
 8019814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019818:	4615      	mov	r5, r2
 801981a:	688a      	ldr	r2, [r1, #8]
 801981c:	4680      	mov	r8, r0
 801981e:	460c      	mov	r4, r1
 8019820:	b932      	cbnz	r2, 8019830 <_scanf_chars+0x1c>
 8019822:	698a      	ldr	r2, [r1, #24]
 8019824:	2a00      	cmp	r2, #0
 8019826:	bf14      	ite	ne
 8019828:	f04f 32ff 	movne.w	r2, #4294967295
 801982c:	2201      	moveq	r2, #1
 801982e:	608a      	str	r2, [r1, #8]
 8019830:	6822      	ldr	r2, [r4, #0]
 8019832:	06d1      	lsls	r1, r2, #27
 8019834:	bf5f      	itttt	pl
 8019836:	681a      	ldrpl	r2, [r3, #0]
 8019838:	1d11      	addpl	r1, r2, #4
 801983a:	6019      	strpl	r1, [r3, #0]
 801983c:	6817      	ldrpl	r7, [r2, #0]
 801983e:	2600      	movs	r6, #0
 8019840:	69a3      	ldr	r3, [r4, #24]
 8019842:	b1db      	cbz	r3, 801987c <_scanf_chars+0x68>
 8019844:	2b01      	cmp	r3, #1
 8019846:	d107      	bne.n	8019858 <_scanf_chars+0x44>
 8019848:	682b      	ldr	r3, [r5, #0]
 801984a:	6962      	ldr	r2, [r4, #20]
 801984c:	781b      	ldrb	r3, [r3, #0]
 801984e:	5cd3      	ldrb	r3, [r2, r3]
 8019850:	b9a3      	cbnz	r3, 801987c <_scanf_chars+0x68>
 8019852:	2e00      	cmp	r6, #0
 8019854:	d132      	bne.n	80198bc <_scanf_chars+0xa8>
 8019856:	e006      	b.n	8019866 <_scanf_chars+0x52>
 8019858:	2b02      	cmp	r3, #2
 801985a:	d007      	beq.n	801986c <_scanf_chars+0x58>
 801985c:	2e00      	cmp	r6, #0
 801985e:	d12d      	bne.n	80198bc <_scanf_chars+0xa8>
 8019860:	69a3      	ldr	r3, [r4, #24]
 8019862:	2b01      	cmp	r3, #1
 8019864:	d12a      	bne.n	80198bc <_scanf_chars+0xa8>
 8019866:	2001      	movs	r0, #1
 8019868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801986c:	f7fe ffde 	bl	801882c <__locale_ctype_ptr>
 8019870:	682b      	ldr	r3, [r5, #0]
 8019872:	781b      	ldrb	r3, [r3, #0]
 8019874:	4418      	add	r0, r3
 8019876:	7843      	ldrb	r3, [r0, #1]
 8019878:	071b      	lsls	r3, r3, #28
 801987a:	d4ef      	bmi.n	801985c <_scanf_chars+0x48>
 801987c:	6823      	ldr	r3, [r4, #0]
 801987e:	06da      	lsls	r2, r3, #27
 8019880:	bf5e      	ittt	pl
 8019882:	682b      	ldrpl	r3, [r5, #0]
 8019884:	781b      	ldrbpl	r3, [r3, #0]
 8019886:	703b      	strbpl	r3, [r7, #0]
 8019888:	682a      	ldr	r2, [r5, #0]
 801988a:	686b      	ldr	r3, [r5, #4]
 801988c:	f102 0201 	add.w	r2, r2, #1
 8019890:	602a      	str	r2, [r5, #0]
 8019892:	68a2      	ldr	r2, [r4, #8]
 8019894:	f103 33ff 	add.w	r3, r3, #4294967295
 8019898:	f102 32ff 	add.w	r2, r2, #4294967295
 801989c:	606b      	str	r3, [r5, #4]
 801989e:	f106 0601 	add.w	r6, r6, #1
 80198a2:	bf58      	it	pl
 80198a4:	3701      	addpl	r7, #1
 80198a6:	60a2      	str	r2, [r4, #8]
 80198a8:	b142      	cbz	r2, 80198bc <_scanf_chars+0xa8>
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	dcc8      	bgt.n	8019840 <_scanf_chars+0x2c>
 80198ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80198b2:	4629      	mov	r1, r5
 80198b4:	4640      	mov	r0, r8
 80198b6:	4798      	blx	r3
 80198b8:	2800      	cmp	r0, #0
 80198ba:	d0c1      	beq.n	8019840 <_scanf_chars+0x2c>
 80198bc:	6823      	ldr	r3, [r4, #0]
 80198be:	f013 0310 	ands.w	r3, r3, #16
 80198c2:	d105      	bne.n	80198d0 <_scanf_chars+0xbc>
 80198c4:	68e2      	ldr	r2, [r4, #12]
 80198c6:	3201      	adds	r2, #1
 80198c8:	60e2      	str	r2, [r4, #12]
 80198ca:	69a2      	ldr	r2, [r4, #24]
 80198cc:	b102      	cbz	r2, 80198d0 <_scanf_chars+0xbc>
 80198ce:	703b      	strb	r3, [r7, #0]
 80198d0:	6923      	ldr	r3, [r4, #16]
 80198d2:	441e      	add	r6, r3
 80198d4:	6126      	str	r6, [r4, #16]
 80198d6:	2000      	movs	r0, #0
 80198d8:	e7c6      	b.n	8019868 <_scanf_chars+0x54>
	...

080198dc <_scanf_i>:
 80198dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198e0:	469a      	mov	sl, r3
 80198e2:	4b74      	ldr	r3, [pc, #464]	; (8019ab4 <_scanf_i+0x1d8>)
 80198e4:	460c      	mov	r4, r1
 80198e6:	4683      	mov	fp, r0
 80198e8:	4616      	mov	r6, r2
 80198ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80198ee:	b087      	sub	sp, #28
 80198f0:	ab03      	add	r3, sp, #12
 80198f2:	68a7      	ldr	r7, [r4, #8]
 80198f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80198f8:	4b6f      	ldr	r3, [pc, #444]	; (8019ab8 <_scanf_i+0x1dc>)
 80198fa:	69a1      	ldr	r1, [r4, #24]
 80198fc:	4a6f      	ldr	r2, [pc, #444]	; (8019abc <_scanf_i+0x1e0>)
 80198fe:	2903      	cmp	r1, #3
 8019900:	bf08      	it	eq
 8019902:	461a      	moveq	r2, r3
 8019904:	1e7b      	subs	r3, r7, #1
 8019906:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801990a:	bf84      	itt	hi
 801990c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019910:	60a3      	strhi	r3, [r4, #8]
 8019912:	6823      	ldr	r3, [r4, #0]
 8019914:	9200      	str	r2, [sp, #0]
 8019916:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801991a:	bf88      	it	hi
 801991c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019920:	f104 091c 	add.w	r9, r4, #28
 8019924:	6023      	str	r3, [r4, #0]
 8019926:	bf8c      	ite	hi
 8019928:	197f      	addhi	r7, r7, r5
 801992a:	2700      	movls	r7, #0
 801992c:	464b      	mov	r3, r9
 801992e:	f04f 0800 	mov.w	r8, #0
 8019932:	9301      	str	r3, [sp, #4]
 8019934:	6831      	ldr	r1, [r6, #0]
 8019936:	ab03      	add	r3, sp, #12
 8019938:	2202      	movs	r2, #2
 801993a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801993e:	7809      	ldrb	r1, [r1, #0]
 8019940:	f7e6 fc66 	bl	8000210 <memchr>
 8019944:	9b01      	ldr	r3, [sp, #4]
 8019946:	b330      	cbz	r0, 8019996 <_scanf_i+0xba>
 8019948:	f1b8 0f01 	cmp.w	r8, #1
 801994c:	d15a      	bne.n	8019a04 <_scanf_i+0x128>
 801994e:	6862      	ldr	r2, [r4, #4]
 8019950:	b92a      	cbnz	r2, 801995e <_scanf_i+0x82>
 8019952:	6822      	ldr	r2, [r4, #0]
 8019954:	2108      	movs	r1, #8
 8019956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801995a:	6061      	str	r1, [r4, #4]
 801995c:	6022      	str	r2, [r4, #0]
 801995e:	6822      	ldr	r2, [r4, #0]
 8019960:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019964:	6022      	str	r2, [r4, #0]
 8019966:	68a2      	ldr	r2, [r4, #8]
 8019968:	1e51      	subs	r1, r2, #1
 801996a:	60a1      	str	r1, [r4, #8]
 801996c:	b19a      	cbz	r2, 8019996 <_scanf_i+0xba>
 801996e:	6832      	ldr	r2, [r6, #0]
 8019970:	1c51      	adds	r1, r2, #1
 8019972:	6031      	str	r1, [r6, #0]
 8019974:	7812      	ldrb	r2, [r2, #0]
 8019976:	701a      	strb	r2, [r3, #0]
 8019978:	1c5d      	adds	r5, r3, #1
 801997a:	6873      	ldr	r3, [r6, #4]
 801997c:	3b01      	subs	r3, #1
 801997e:	2b00      	cmp	r3, #0
 8019980:	6073      	str	r3, [r6, #4]
 8019982:	dc07      	bgt.n	8019994 <_scanf_i+0xb8>
 8019984:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019988:	4631      	mov	r1, r6
 801998a:	4658      	mov	r0, fp
 801998c:	4798      	blx	r3
 801998e:	2800      	cmp	r0, #0
 8019990:	f040 8086 	bne.w	8019aa0 <_scanf_i+0x1c4>
 8019994:	462b      	mov	r3, r5
 8019996:	f108 0801 	add.w	r8, r8, #1
 801999a:	f1b8 0f03 	cmp.w	r8, #3
 801999e:	d1c8      	bne.n	8019932 <_scanf_i+0x56>
 80199a0:	6862      	ldr	r2, [r4, #4]
 80199a2:	b90a      	cbnz	r2, 80199a8 <_scanf_i+0xcc>
 80199a4:	220a      	movs	r2, #10
 80199a6:	6062      	str	r2, [r4, #4]
 80199a8:	6862      	ldr	r2, [r4, #4]
 80199aa:	4945      	ldr	r1, [pc, #276]	; (8019ac0 <_scanf_i+0x1e4>)
 80199ac:	6960      	ldr	r0, [r4, #20]
 80199ae:	9301      	str	r3, [sp, #4]
 80199b0:	1a89      	subs	r1, r1, r2
 80199b2:	f000 f897 	bl	8019ae4 <__sccl>
 80199b6:	9b01      	ldr	r3, [sp, #4]
 80199b8:	f04f 0800 	mov.w	r8, #0
 80199bc:	461d      	mov	r5, r3
 80199be:	68a3      	ldr	r3, [r4, #8]
 80199c0:	6822      	ldr	r2, [r4, #0]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d03a      	beq.n	8019a3c <_scanf_i+0x160>
 80199c6:	6831      	ldr	r1, [r6, #0]
 80199c8:	6960      	ldr	r0, [r4, #20]
 80199ca:	f891 c000 	ldrb.w	ip, [r1]
 80199ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80199d2:	2800      	cmp	r0, #0
 80199d4:	d032      	beq.n	8019a3c <_scanf_i+0x160>
 80199d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80199da:	d121      	bne.n	8019a20 <_scanf_i+0x144>
 80199dc:	0510      	lsls	r0, r2, #20
 80199de:	d51f      	bpl.n	8019a20 <_scanf_i+0x144>
 80199e0:	f108 0801 	add.w	r8, r8, #1
 80199e4:	b117      	cbz	r7, 80199ec <_scanf_i+0x110>
 80199e6:	3301      	adds	r3, #1
 80199e8:	3f01      	subs	r7, #1
 80199ea:	60a3      	str	r3, [r4, #8]
 80199ec:	6873      	ldr	r3, [r6, #4]
 80199ee:	3b01      	subs	r3, #1
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	6073      	str	r3, [r6, #4]
 80199f4:	dd1b      	ble.n	8019a2e <_scanf_i+0x152>
 80199f6:	6833      	ldr	r3, [r6, #0]
 80199f8:	3301      	adds	r3, #1
 80199fa:	6033      	str	r3, [r6, #0]
 80199fc:	68a3      	ldr	r3, [r4, #8]
 80199fe:	3b01      	subs	r3, #1
 8019a00:	60a3      	str	r3, [r4, #8]
 8019a02:	e7dc      	b.n	80199be <_scanf_i+0xe2>
 8019a04:	f1b8 0f02 	cmp.w	r8, #2
 8019a08:	d1ad      	bne.n	8019966 <_scanf_i+0x8a>
 8019a0a:	6822      	ldr	r2, [r4, #0]
 8019a0c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019a10:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019a14:	d1bf      	bne.n	8019996 <_scanf_i+0xba>
 8019a16:	2110      	movs	r1, #16
 8019a18:	6061      	str	r1, [r4, #4]
 8019a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019a1e:	e7a1      	b.n	8019964 <_scanf_i+0x88>
 8019a20:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019a24:	6022      	str	r2, [r4, #0]
 8019a26:	780b      	ldrb	r3, [r1, #0]
 8019a28:	702b      	strb	r3, [r5, #0]
 8019a2a:	3501      	adds	r5, #1
 8019a2c:	e7de      	b.n	80199ec <_scanf_i+0x110>
 8019a2e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019a32:	4631      	mov	r1, r6
 8019a34:	4658      	mov	r0, fp
 8019a36:	4798      	blx	r3
 8019a38:	2800      	cmp	r0, #0
 8019a3a:	d0df      	beq.n	80199fc <_scanf_i+0x120>
 8019a3c:	6823      	ldr	r3, [r4, #0]
 8019a3e:	05d9      	lsls	r1, r3, #23
 8019a40:	d50c      	bpl.n	8019a5c <_scanf_i+0x180>
 8019a42:	454d      	cmp	r5, r9
 8019a44:	d908      	bls.n	8019a58 <_scanf_i+0x17c>
 8019a46:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019a4e:	4632      	mov	r2, r6
 8019a50:	4658      	mov	r0, fp
 8019a52:	4798      	blx	r3
 8019a54:	1e6f      	subs	r7, r5, #1
 8019a56:	463d      	mov	r5, r7
 8019a58:	454d      	cmp	r5, r9
 8019a5a:	d029      	beq.n	8019ab0 <_scanf_i+0x1d4>
 8019a5c:	6822      	ldr	r2, [r4, #0]
 8019a5e:	f012 0210 	ands.w	r2, r2, #16
 8019a62:	d113      	bne.n	8019a8c <_scanf_i+0x1b0>
 8019a64:	702a      	strb	r2, [r5, #0]
 8019a66:	6863      	ldr	r3, [r4, #4]
 8019a68:	9e00      	ldr	r6, [sp, #0]
 8019a6a:	4649      	mov	r1, r9
 8019a6c:	4658      	mov	r0, fp
 8019a6e:	47b0      	blx	r6
 8019a70:	f8da 3000 	ldr.w	r3, [sl]
 8019a74:	6821      	ldr	r1, [r4, #0]
 8019a76:	1d1a      	adds	r2, r3, #4
 8019a78:	f8ca 2000 	str.w	r2, [sl]
 8019a7c:	f011 0f20 	tst.w	r1, #32
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	d010      	beq.n	8019aa6 <_scanf_i+0x1ca>
 8019a84:	6018      	str	r0, [r3, #0]
 8019a86:	68e3      	ldr	r3, [r4, #12]
 8019a88:	3301      	adds	r3, #1
 8019a8a:	60e3      	str	r3, [r4, #12]
 8019a8c:	eba5 0509 	sub.w	r5, r5, r9
 8019a90:	44a8      	add	r8, r5
 8019a92:	6925      	ldr	r5, [r4, #16]
 8019a94:	4445      	add	r5, r8
 8019a96:	6125      	str	r5, [r4, #16]
 8019a98:	2000      	movs	r0, #0
 8019a9a:	b007      	add	sp, #28
 8019a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aa0:	f04f 0800 	mov.w	r8, #0
 8019aa4:	e7ca      	b.n	8019a3c <_scanf_i+0x160>
 8019aa6:	07ca      	lsls	r2, r1, #31
 8019aa8:	bf4c      	ite	mi
 8019aaa:	8018      	strhmi	r0, [r3, #0]
 8019aac:	6018      	strpl	r0, [r3, #0]
 8019aae:	e7ea      	b.n	8019a86 <_scanf_i+0x1aa>
 8019ab0:	2001      	movs	r0, #1
 8019ab2:	e7f2      	b.n	8019a9a <_scanf_i+0x1be>
 8019ab4:	0801a204 	.word	0x0801a204
 8019ab8:	080174e9 	.word	0x080174e9
 8019abc:	08019c61 	.word	0x08019c61
 8019ac0:	0801a65d 	.word	0x0801a65d

08019ac4 <_sbrk_r>:
 8019ac4:	b538      	push	{r3, r4, r5, lr}
 8019ac6:	4c06      	ldr	r4, [pc, #24]	; (8019ae0 <_sbrk_r+0x1c>)
 8019ac8:	2300      	movs	r3, #0
 8019aca:	4605      	mov	r5, r0
 8019acc:	4608      	mov	r0, r1
 8019ace:	6023      	str	r3, [r4, #0]
 8019ad0:	f7ed ffee 	bl	8007ab0 <_sbrk>
 8019ad4:	1c43      	adds	r3, r0, #1
 8019ad6:	d102      	bne.n	8019ade <_sbrk_r+0x1a>
 8019ad8:	6823      	ldr	r3, [r4, #0]
 8019ada:	b103      	cbz	r3, 8019ade <_sbrk_r+0x1a>
 8019adc:	602b      	str	r3, [r5, #0]
 8019ade:	bd38      	pop	{r3, r4, r5, pc}
 8019ae0:	20046e34 	.word	0x20046e34

08019ae4 <__sccl>:
 8019ae4:	b570      	push	{r4, r5, r6, lr}
 8019ae6:	780b      	ldrb	r3, [r1, #0]
 8019ae8:	2b5e      	cmp	r3, #94	; 0x5e
 8019aea:	bf13      	iteet	ne
 8019aec:	1c4a      	addne	r2, r1, #1
 8019aee:	1c8a      	addeq	r2, r1, #2
 8019af0:	784b      	ldrbeq	r3, [r1, #1]
 8019af2:	2100      	movne	r1, #0
 8019af4:	bf08      	it	eq
 8019af6:	2101      	moveq	r1, #1
 8019af8:	1e44      	subs	r4, r0, #1
 8019afa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019afe:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019b02:	42ac      	cmp	r4, r5
 8019b04:	d1fb      	bne.n	8019afe <__sccl+0x1a>
 8019b06:	b913      	cbnz	r3, 8019b0e <__sccl+0x2a>
 8019b08:	3a01      	subs	r2, #1
 8019b0a:	4610      	mov	r0, r2
 8019b0c:	bd70      	pop	{r4, r5, r6, pc}
 8019b0e:	f081 0401 	eor.w	r4, r1, #1
 8019b12:	54c4      	strb	r4, [r0, r3]
 8019b14:	1c51      	adds	r1, r2, #1
 8019b16:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019b1a:	2d2d      	cmp	r5, #45	; 0x2d
 8019b1c:	f101 36ff 	add.w	r6, r1, #4294967295
 8019b20:	460a      	mov	r2, r1
 8019b22:	d006      	beq.n	8019b32 <__sccl+0x4e>
 8019b24:	2d5d      	cmp	r5, #93	; 0x5d
 8019b26:	d0f0      	beq.n	8019b0a <__sccl+0x26>
 8019b28:	b90d      	cbnz	r5, 8019b2e <__sccl+0x4a>
 8019b2a:	4632      	mov	r2, r6
 8019b2c:	e7ed      	b.n	8019b0a <__sccl+0x26>
 8019b2e:	462b      	mov	r3, r5
 8019b30:	e7ef      	b.n	8019b12 <__sccl+0x2e>
 8019b32:	780e      	ldrb	r6, [r1, #0]
 8019b34:	2e5d      	cmp	r6, #93	; 0x5d
 8019b36:	d0fa      	beq.n	8019b2e <__sccl+0x4a>
 8019b38:	42b3      	cmp	r3, r6
 8019b3a:	dcf8      	bgt.n	8019b2e <__sccl+0x4a>
 8019b3c:	3301      	adds	r3, #1
 8019b3e:	429e      	cmp	r6, r3
 8019b40:	54c4      	strb	r4, [r0, r3]
 8019b42:	dcfb      	bgt.n	8019b3c <__sccl+0x58>
 8019b44:	3102      	adds	r1, #2
 8019b46:	e7e6      	b.n	8019b16 <__sccl+0x32>

08019b48 <strncmp>:
 8019b48:	b510      	push	{r4, lr}
 8019b4a:	b16a      	cbz	r2, 8019b68 <strncmp+0x20>
 8019b4c:	3901      	subs	r1, #1
 8019b4e:	1884      	adds	r4, r0, r2
 8019b50:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019b54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019b58:	4293      	cmp	r3, r2
 8019b5a:	d103      	bne.n	8019b64 <strncmp+0x1c>
 8019b5c:	42a0      	cmp	r0, r4
 8019b5e:	d001      	beq.n	8019b64 <strncmp+0x1c>
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d1f5      	bne.n	8019b50 <strncmp+0x8>
 8019b64:	1a98      	subs	r0, r3, r2
 8019b66:	bd10      	pop	{r4, pc}
 8019b68:	4610      	mov	r0, r2
 8019b6a:	e7fc      	b.n	8019b66 <strncmp+0x1e>

08019b6c <_strtoul_l.isra.0>:
 8019b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b70:	4680      	mov	r8, r0
 8019b72:	4689      	mov	r9, r1
 8019b74:	4692      	mov	sl, r2
 8019b76:	461e      	mov	r6, r3
 8019b78:	460f      	mov	r7, r1
 8019b7a:	463d      	mov	r5, r7
 8019b7c:	9808      	ldr	r0, [sp, #32]
 8019b7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b82:	f7fe fe4f 	bl	8018824 <__locale_ctype_ptr_l>
 8019b86:	4420      	add	r0, r4
 8019b88:	7843      	ldrb	r3, [r0, #1]
 8019b8a:	f013 0308 	ands.w	r3, r3, #8
 8019b8e:	d130      	bne.n	8019bf2 <_strtoul_l.isra.0+0x86>
 8019b90:	2c2d      	cmp	r4, #45	; 0x2d
 8019b92:	d130      	bne.n	8019bf6 <_strtoul_l.isra.0+0x8a>
 8019b94:	787c      	ldrb	r4, [r7, #1]
 8019b96:	1cbd      	adds	r5, r7, #2
 8019b98:	2101      	movs	r1, #1
 8019b9a:	2e00      	cmp	r6, #0
 8019b9c:	d05c      	beq.n	8019c58 <_strtoul_l.isra.0+0xec>
 8019b9e:	2e10      	cmp	r6, #16
 8019ba0:	d109      	bne.n	8019bb6 <_strtoul_l.isra.0+0x4a>
 8019ba2:	2c30      	cmp	r4, #48	; 0x30
 8019ba4:	d107      	bne.n	8019bb6 <_strtoul_l.isra.0+0x4a>
 8019ba6:	782b      	ldrb	r3, [r5, #0]
 8019ba8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019bac:	2b58      	cmp	r3, #88	; 0x58
 8019bae:	d14e      	bne.n	8019c4e <_strtoul_l.isra.0+0xe2>
 8019bb0:	786c      	ldrb	r4, [r5, #1]
 8019bb2:	2610      	movs	r6, #16
 8019bb4:	3502      	adds	r5, #2
 8019bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8019bba:	2300      	movs	r3, #0
 8019bbc:	fbb2 f2f6 	udiv	r2, r2, r6
 8019bc0:	fb06 fc02 	mul.w	ip, r6, r2
 8019bc4:	ea6f 0c0c 	mvn.w	ip, ip
 8019bc8:	4618      	mov	r0, r3
 8019bca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019bce:	2f09      	cmp	r7, #9
 8019bd0:	d817      	bhi.n	8019c02 <_strtoul_l.isra.0+0x96>
 8019bd2:	463c      	mov	r4, r7
 8019bd4:	42a6      	cmp	r6, r4
 8019bd6:	dd23      	ble.n	8019c20 <_strtoul_l.isra.0+0xb4>
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	db1e      	blt.n	8019c1a <_strtoul_l.isra.0+0xae>
 8019bdc:	4282      	cmp	r2, r0
 8019bde:	d31c      	bcc.n	8019c1a <_strtoul_l.isra.0+0xae>
 8019be0:	d101      	bne.n	8019be6 <_strtoul_l.isra.0+0x7a>
 8019be2:	45a4      	cmp	ip, r4
 8019be4:	db19      	blt.n	8019c1a <_strtoul_l.isra.0+0xae>
 8019be6:	fb00 4006 	mla	r0, r0, r6, r4
 8019bea:	2301      	movs	r3, #1
 8019bec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019bf0:	e7eb      	b.n	8019bca <_strtoul_l.isra.0+0x5e>
 8019bf2:	462f      	mov	r7, r5
 8019bf4:	e7c1      	b.n	8019b7a <_strtoul_l.isra.0+0xe>
 8019bf6:	2c2b      	cmp	r4, #43	; 0x2b
 8019bf8:	bf04      	itt	eq
 8019bfa:	1cbd      	addeq	r5, r7, #2
 8019bfc:	787c      	ldrbeq	r4, [r7, #1]
 8019bfe:	4619      	mov	r1, r3
 8019c00:	e7cb      	b.n	8019b9a <_strtoul_l.isra.0+0x2e>
 8019c02:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019c06:	2f19      	cmp	r7, #25
 8019c08:	d801      	bhi.n	8019c0e <_strtoul_l.isra.0+0xa2>
 8019c0a:	3c37      	subs	r4, #55	; 0x37
 8019c0c:	e7e2      	b.n	8019bd4 <_strtoul_l.isra.0+0x68>
 8019c0e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019c12:	2f19      	cmp	r7, #25
 8019c14:	d804      	bhi.n	8019c20 <_strtoul_l.isra.0+0xb4>
 8019c16:	3c57      	subs	r4, #87	; 0x57
 8019c18:	e7dc      	b.n	8019bd4 <_strtoul_l.isra.0+0x68>
 8019c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8019c1e:	e7e5      	b.n	8019bec <_strtoul_l.isra.0+0x80>
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	da09      	bge.n	8019c38 <_strtoul_l.isra.0+0xcc>
 8019c24:	2322      	movs	r3, #34	; 0x22
 8019c26:	f8c8 3000 	str.w	r3, [r8]
 8019c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8019c2e:	f1ba 0f00 	cmp.w	sl, #0
 8019c32:	d107      	bne.n	8019c44 <_strtoul_l.isra.0+0xd8>
 8019c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c38:	b101      	cbz	r1, 8019c3c <_strtoul_l.isra.0+0xd0>
 8019c3a:	4240      	negs	r0, r0
 8019c3c:	f1ba 0f00 	cmp.w	sl, #0
 8019c40:	d0f8      	beq.n	8019c34 <_strtoul_l.isra.0+0xc8>
 8019c42:	b10b      	cbz	r3, 8019c48 <_strtoul_l.isra.0+0xdc>
 8019c44:	f105 39ff 	add.w	r9, r5, #4294967295
 8019c48:	f8ca 9000 	str.w	r9, [sl]
 8019c4c:	e7f2      	b.n	8019c34 <_strtoul_l.isra.0+0xc8>
 8019c4e:	2430      	movs	r4, #48	; 0x30
 8019c50:	2e00      	cmp	r6, #0
 8019c52:	d1b0      	bne.n	8019bb6 <_strtoul_l.isra.0+0x4a>
 8019c54:	2608      	movs	r6, #8
 8019c56:	e7ae      	b.n	8019bb6 <_strtoul_l.isra.0+0x4a>
 8019c58:	2c30      	cmp	r4, #48	; 0x30
 8019c5a:	d0a4      	beq.n	8019ba6 <_strtoul_l.isra.0+0x3a>
 8019c5c:	260a      	movs	r6, #10
 8019c5e:	e7aa      	b.n	8019bb6 <_strtoul_l.isra.0+0x4a>

08019c60 <_strtoul_r>:
 8019c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c62:	4c06      	ldr	r4, [pc, #24]	; (8019c7c <_strtoul_r+0x1c>)
 8019c64:	4d06      	ldr	r5, [pc, #24]	; (8019c80 <_strtoul_r+0x20>)
 8019c66:	6824      	ldr	r4, [r4, #0]
 8019c68:	6a24      	ldr	r4, [r4, #32]
 8019c6a:	2c00      	cmp	r4, #0
 8019c6c:	bf08      	it	eq
 8019c6e:	462c      	moveq	r4, r5
 8019c70:	9400      	str	r4, [sp, #0]
 8019c72:	f7ff ff7b 	bl	8019b6c <_strtoul_l.isra.0>
 8019c76:	b003      	add	sp, #12
 8019c78:	bd30      	pop	{r4, r5, pc}
 8019c7a:	bf00      	nop
 8019c7c:	2000000c 	.word	0x2000000c
 8019c80:	20000070 	.word	0x20000070

08019c84 <__submore>:
 8019c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c88:	460c      	mov	r4, r1
 8019c8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c90:	4299      	cmp	r1, r3
 8019c92:	d11d      	bne.n	8019cd0 <__submore+0x4c>
 8019c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019c98:	f7ff fa66 	bl	8019168 <_malloc_r>
 8019c9c:	b918      	cbnz	r0, 8019ca6 <__submore+0x22>
 8019c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8019ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019caa:	63a3      	str	r3, [r4, #56]	; 0x38
 8019cac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019cb0:	6360      	str	r0, [r4, #52]	; 0x34
 8019cb2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019cb6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019cba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019cbe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019cc2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019cc6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019cca:	6020      	str	r0, [r4, #0]
 8019ccc:	2000      	movs	r0, #0
 8019cce:	e7e8      	b.n	8019ca2 <__submore+0x1e>
 8019cd0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019cd2:	0077      	lsls	r7, r6, #1
 8019cd4:	463a      	mov	r2, r7
 8019cd6:	f000 f837 	bl	8019d48 <_realloc_r>
 8019cda:	4605      	mov	r5, r0
 8019cdc:	2800      	cmp	r0, #0
 8019cde:	d0de      	beq.n	8019c9e <__submore+0x1a>
 8019ce0:	eb00 0806 	add.w	r8, r0, r6
 8019ce4:	4601      	mov	r1, r0
 8019ce6:	4632      	mov	r2, r6
 8019ce8:	4640      	mov	r0, r8
 8019cea:	f7fe fdd7 	bl	801889c <memcpy>
 8019cee:	f8c4 8000 	str.w	r8, [r4]
 8019cf2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019cf6:	e7e9      	b.n	8019ccc <__submore+0x48>

08019cf8 <__ascii_wctomb>:
 8019cf8:	b149      	cbz	r1, 8019d0e <__ascii_wctomb+0x16>
 8019cfa:	2aff      	cmp	r2, #255	; 0xff
 8019cfc:	bf85      	ittet	hi
 8019cfe:	238a      	movhi	r3, #138	; 0x8a
 8019d00:	6003      	strhi	r3, [r0, #0]
 8019d02:	700a      	strbls	r2, [r1, #0]
 8019d04:	f04f 30ff 	movhi.w	r0, #4294967295
 8019d08:	bf98      	it	ls
 8019d0a:	2001      	movls	r0, #1
 8019d0c:	4770      	bx	lr
 8019d0e:	4608      	mov	r0, r1
 8019d10:	4770      	bx	lr

08019d12 <memmove>:
 8019d12:	4288      	cmp	r0, r1
 8019d14:	b510      	push	{r4, lr}
 8019d16:	eb01 0302 	add.w	r3, r1, r2
 8019d1a:	d807      	bhi.n	8019d2c <memmove+0x1a>
 8019d1c:	1e42      	subs	r2, r0, #1
 8019d1e:	4299      	cmp	r1, r3
 8019d20:	d00a      	beq.n	8019d38 <memmove+0x26>
 8019d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d26:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019d2a:	e7f8      	b.n	8019d1e <memmove+0xc>
 8019d2c:	4283      	cmp	r3, r0
 8019d2e:	d9f5      	bls.n	8019d1c <memmove+0xa>
 8019d30:	1881      	adds	r1, r0, r2
 8019d32:	1ad2      	subs	r2, r2, r3
 8019d34:	42d3      	cmn	r3, r2
 8019d36:	d100      	bne.n	8019d3a <memmove+0x28>
 8019d38:	bd10      	pop	{r4, pc}
 8019d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019d42:	e7f7      	b.n	8019d34 <memmove+0x22>

08019d44 <__malloc_lock>:
 8019d44:	4770      	bx	lr

08019d46 <__malloc_unlock>:
 8019d46:	4770      	bx	lr

08019d48 <_realloc_r>:
 8019d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d4a:	4607      	mov	r7, r0
 8019d4c:	4614      	mov	r4, r2
 8019d4e:	460e      	mov	r6, r1
 8019d50:	b921      	cbnz	r1, 8019d5c <_realloc_r+0x14>
 8019d52:	4611      	mov	r1, r2
 8019d54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019d58:	f7ff ba06 	b.w	8019168 <_malloc_r>
 8019d5c:	b922      	cbnz	r2, 8019d68 <_realloc_r+0x20>
 8019d5e:	f7ff f9b5 	bl	80190cc <_free_r>
 8019d62:	4625      	mov	r5, r4
 8019d64:	4628      	mov	r0, r5
 8019d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d68:	f000 f814 	bl	8019d94 <_malloc_usable_size_r>
 8019d6c:	42a0      	cmp	r0, r4
 8019d6e:	d20f      	bcs.n	8019d90 <_realloc_r+0x48>
 8019d70:	4621      	mov	r1, r4
 8019d72:	4638      	mov	r0, r7
 8019d74:	f7ff f9f8 	bl	8019168 <_malloc_r>
 8019d78:	4605      	mov	r5, r0
 8019d7a:	2800      	cmp	r0, #0
 8019d7c:	d0f2      	beq.n	8019d64 <_realloc_r+0x1c>
 8019d7e:	4631      	mov	r1, r6
 8019d80:	4622      	mov	r2, r4
 8019d82:	f7fe fd8b 	bl	801889c <memcpy>
 8019d86:	4631      	mov	r1, r6
 8019d88:	4638      	mov	r0, r7
 8019d8a:	f7ff f99f 	bl	80190cc <_free_r>
 8019d8e:	e7e9      	b.n	8019d64 <_realloc_r+0x1c>
 8019d90:	4635      	mov	r5, r6
 8019d92:	e7e7      	b.n	8019d64 <_realloc_r+0x1c>

08019d94 <_malloc_usable_size_r>:
 8019d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d98:	1f18      	subs	r0, r3, #4
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	bfbc      	itt	lt
 8019d9e:	580b      	ldrlt	r3, [r1, r0]
 8019da0:	18c0      	addlt	r0, r0, r3
 8019da2:	4770      	bx	lr

08019da4 <_init>:
 8019da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019da6:	bf00      	nop
 8019da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019daa:	bc08      	pop	{r3}
 8019dac:	469e      	mov	lr, r3
 8019dae:	4770      	bx	lr

08019db0 <_fini>:
 8019db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019db2:	bf00      	nop
 8019db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019db6:	bc08      	pop	{r3}
 8019db8:	469e      	mov	lr, r3
 8019dba:	4770      	bx	lr
