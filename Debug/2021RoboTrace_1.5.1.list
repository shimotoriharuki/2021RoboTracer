
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a15c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  0801a320  0801a320  0002a320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac4c  0801ac4c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac4c  0801ac4c  0002ac4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac54  0801ac54  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ac54  0801ac54  0002ac54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ac5c  0801ac5c  0002ac5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801ac60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00049b28  200001e0  0801ae3c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20049d08  0801ae3c  00039d08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c32f  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c40  00000000  00000000  0006c53b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00074180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002150  00000000  00000000  000765a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354c0  00000000  00000000  000786f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026b3f  00000000  00000000  000adbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011185a  00000000  00000000  000d46ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e5f49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a98c  00000000  00000000  001e5fc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801a304 	.word	0x0801a304

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801a304 	.word	0x0801a304

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00b fe8e 	bl	800ccf8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200477fc 	.word	0x200477fc

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00b fe76 	bl	800ccf8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200477fc 	.word	0x200477fc

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00b fcff 	bl	800ca24 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f00a fa66 	bl	800b4f8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f00a fa60 	bl	800b4f8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f00a fa5a 	bl	800b4f8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f00a fa54 	bl	800b4f8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f00a fa4e 	bl	800b4f8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f00a fa48 	bl	800b4f8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f00a fa42 	bl	800b4f8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f00a fa3c 	bl	800b4f8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f00a fa36 	bl	800b4f8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f00a fa30 	bl	800b4f8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f00a fa24 	bl	800b4f8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00a fa1e 	bl	800b4f8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 fcb5 	bl	8017a98 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00f fb46 	bl	8010888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00f fb42 	bl	8010888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00f fb3e 	bl	8010888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00f fb3a 	bl	8010888 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200478e8 	.word	0x200478e8
 8001248:	20047850 	.word	0x20047850
 800124c:	20047970 	.word	0x20047970

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200478e8 	.word	0x200478e8
 800137c:	20047970 	.word	0x20047970
 8001380:	20047850 	.word	0x20047850

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200478e8 	.word	0x200478e8
 80013c4:	20047850 	.word	0x20047850
 80013c8:	20047970 	.word	0x20047970

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		side_line_ignore_distance_(), cross_line_ignore_distance_(0), goal_judge_distance_(0){}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <_ZN7Encoder4initEv+0x30>)
 8001440:	f00f faf2 	bl	8010a28 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001444:	213c      	movs	r1, #60	; 0x3c
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <_ZN7Encoder4initEv+0x34>)
 8001448:	f00f faee 	bl	8010a28 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <_ZN7Encoder4initEv+0x38>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <_ZN7Encoder4initEv+0x3c>)
 8001456:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20047a50 	.word	0x20047a50
 8001468:	20047734 	.word	0x20047734
 800146c:	40010000 	.word	0x40010000
 8001470:	40010400 	.word	0x40010400
 8001474:	00000000 	.word	0x00000000

08001478 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <_ZN7Encoder6updateEv+0x120>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800159c <_ZN7Encoder6updateEv+0x124>
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <_ZN7Encoder6updateEv+0x12c>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800159c <_ZN7Encoder6updateEv+0x124>
 80014b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	ee17 0a90 	vmov	r0, s15
 80014e0:	f7ff f84a 	bl	8000578 <__aeabi_f2d>
 80014e4:	a32a      	add	r3, pc, #168	; (adr r3, 8001590 <_ZN7Encoder6updateEv+0x118>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f89d 	bl	8000628 <__aeabi_dmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4618      	mov	r0, r3
 80014f4:	4621      	mov	r1, r4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fe:	f7ff f9bd 	bl	800087c <__aeabi_ddiv>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fb85 	bl	8000c18 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a05 	vldr	s14, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a02 	vldr	s15, [r3, #8]
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edc3 7a06 	vstr	s15, [r3, #24]
	side_line_ignore_distance_ += distance_;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ed93 7a07 	vldr	s14, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edd3 7a02 	vldr	s15, [r3, #8]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edc3 7a07 	vstr	s15, [r3, #28]
	cross_line_ignore_distance_ += distance_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	ed93 7a08 	vldr	s14, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edc3 7a08 	vstr	s15, [r3, #32]
	goal_judge_distance_ += distance_;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a02 	vldr	s15, [r3, #8]
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//monitor_distance = distance_10mm_;
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	ce73a049 	.word	0xce73a049
 8001594:	3f77a3f6 	.word	0x3f77a3f6
 8001598:	40010000 	.word	0x40010000
 800159c:	47000000 	.word	0x47000000
 80015a0:	3f912547 	.word	0x3f912547
 80015a4:	40010400 	.word	0x40010400

080015a8 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_ZN7Encoder5clearEv+0x3c>)
 80015c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_ZN7Encoder5clearEv+0x40>)
 80015ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40010400 	.word	0x40010400

080015ec <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return distance_;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	ee07 3a90 	vmov	s15, r3
}
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	ee07 3a90 	vmov	s15, r3
}
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	619a      	str	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_ZN7Encoder25getSideLineIgnoreDistanceEv>:

float Encoder::getSideLineIgnoreDistance()
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	return side_line_ignore_distance_;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	ee07 3a90 	vmov	s15, r3
}
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>:

void Encoder::clearSideLineIgnoreDistance()
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	side_line_ignore_distance_ = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:
float Encoder::getCrossLineIgnoreDistance()
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	ee07 3a90 	vmov	s15, r3
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_ZN7Encoder20getGoalJudgeDistanceEv>:

float Encoder::getGoalJudgeDistance()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	return goal_judge_distance_;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	ee07 3a90 	vmov	s15, r3
}
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>:

void Encoder::clearGoalJudgeDistance()
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	goal_judge_distance_= 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f978 	bl	8001a78 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001788:	f000 f98c 	bl	8001aa4 <fopen_folder_and_file>

	return ret;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <user_fclose+0x1c>)
 80017a4:	f013 fe9a 	bl	80154dc <f_close>

	return ret;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20046640 	.word	0x20046640

080017b8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	4613      	mov	r3, r2
 80017c6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017cc:	2300      	movs	r3, #0
 80017ce:	81fb      	strh	r3, [r7, #14]
 80017d0:	e030      	b.n	8001834 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feca 	bl	8000578 <__aeabi_f2d>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	e9cd 3400 	strd	r3, r4, [sp]
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <sd_write_float+0x94>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	4817      	ldr	r0, [pc, #92]	; (8001850 <sd_write_float+0x98>)
 80017f2:	f015 fa03 	bl	8016bfc <sniprintf>

		if(state == ADD_WRITE){
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <sd_write_float+0x9c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4619      	mov	r1, r3
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <sd_write_float+0x9c>)
 8001804:	f013 fede 	bl	80155c4 <f_lseek>
 8001808:	e003      	b.n	8001812 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800180a:	2100      	movs	r1, #0
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <sd_write_float+0x9c>)
 800180e:	f013 fed9 	bl	80155c4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <sd_write_float+0x98>)
 8001814:	f7fe fcf4 	bl	8000200 <strlen>
 8001818:	4602      	mov	r2, r0
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <sd_write_float+0xa0>)
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <sd_write_float+0x98>)
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <sd_write_float+0x9c>)
 8001820:	f013 fc47 	bl	80150b2 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001824:	f000 f958 	bl	8001ad8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800182c:	b29b      	uxth	r3, r3
 800182e:	3301      	adds	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	81fb      	strh	r3, [r7, #14]
 8001834:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbc8      	blt.n	80017d2 <sd_write_float+0x1a>
	}
	return ret;
 8001840:	7b7b      	ldrb	r3, [r7, #13]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	0801a320 	.word	0x0801a320
 8001850:	200465b0 	.word	0x200465b0
 8001854:	20046640 	.word	0x20046640
 8001858:	20046630 	.word	0x20046630

0800185c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f900 	bl	8001a78 <create_path>

	if(state == OVER_WRITE){
 8001878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d108      	bne.n	8001892 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001880:	4822      	ldr	r0, [pc, #136]	; (800190c <sd_write_array_float+0xb0>)
 8001882:	f013 fe55 	bl	8015530 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001886:	4822      	ldr	r0, [pc, #136]	; (8001910 <sd_write_array_float+0xb4>)
 8001888:	f014 f8c0 	bl	8015a0c <f_unlink>
		f_chdir("..");
 800188c:	4821      	ldr	r0, [pc, #132]	; (8001914 <sd_write_array_float+0xb8>)
 800188e:	f013 fe4f 	bl	8015530 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001892:	f000 f907 	bl	8001aa4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001896:	2300      	movs	r3, #0
 8001898:	82fb      	strh	r3, [r7, #22]
 800189a:	e028      	b.n	80018ee <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800189c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe65 	bl	8000578 <__aeabi_f2d>
 80018ae:	4603      	mov	r3, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	e9cd 3400 	strd	r3, r4, [sp]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <sd_write_array_float+0xbc>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	4818      	ldr	r0, [pc, #96]	; (800191c <sd_write_array_float+0xc0>)
 80018bc:	f015 f99e 	bl	8016bfc <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <sd_write_array_float+0xc4>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <sd_write_array_float+0xc4>)
 80018c8:	f013 fe7c 	bl	80155c4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <sd_write_array_float+0xc0>)
 80018ce:	f7fe fc97 	bl	8000200 <strlen>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <sd_write_array_float+0xc8>)
 80018d6:	4911      	ldr	r1, [pc, #68]	; (800191c <sd_write_array_float+0xc0>)
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <sd_write_array_float+0xc4>)
 80018da:	f013 fbea 	bl	80150b2 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018de:	f000 f8fb 	bl	8001ad8 <bufclear>
	for(short i = 0 ; i < size; i++){
 80018e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	82fb      	strh	r3, [r7, #22]
 80018ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbd0      	blt.n	800189c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <sd_write_array_float+0xc4>)
 80018fc:	f013 fdee 	bl	80154dc <f_close>

	return ret;
 8001900:	7d7b      	ldrb	r3, [r7, #21]
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	200464b0 	.word	0x200464b0
 8001910:	20045370 	.word	0x20045370
 8001914:	0801a33c 	.word	0x0801a33c
 8001918:	0801a320 	.word	0x0801a320
 800191c:	200465b0 	.word	0x200465b0
 8001920:	20046640 	.word	0x20046640
 8001924:	20046630 	.word	0x20046630

08001928 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f898 	bl	8001a78 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001948:	f000 f8ac 	bl	8001aa4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800194c:	e019      	b.n	8001982 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800194e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4913      	ldr	r1, [pc, #76]	; (80019a8 <sd_read_array_float+0x80>)
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <sd_read_array_float+0x84>)
 800195e:	f015 f9a1 	bl	8016ca4 <siscanf>
		i++;
 8001962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001966:	b29b      	uxth	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800196e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	429a      	cmp	r2, r3
 8001978:	db03      	blt.n	8001982 <sd_read_array_float+0x5a>
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	3b01      	subs	r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <sd_read_array_float+0x88>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <sd_read_array_float+0x84>)
 8001988:	f014 fa1e 	bl	8015dc8 <f_gets>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1dd      	bne.n	800194e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001992:	f000 f8a1 	bl	8001ad8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <sd_read_array_float+0x88>)
 8001998:	f013 fda0 	bl	80154dc <f_close>

	return ret;
 800199c:	7d7b      	ldrb	r3, [r7, #21]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	0801a32c 	.word	0x0801a32c
 80019ac:	200465b0 	.word	0x200465b0
 80019b0:	20046640 	.word	0x20046640

080019b4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f852 	bl	8001a78 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019d4:	f000 f866 	bl	8001aa4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019d8:	e019      	b.n	8001a0e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4913      	ldr	r1, [pc, #76]	; (8001a34 <sd_read_array_double+0x80>)
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <sd_read_array_double+0x84>)
 80019ea:	f015 f95b 	bl	8016ca4 <siscanf>
		i++;
 80019ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80019fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	db03      	blt.n	8001a0e <sd_read_array_double+0x5a>
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <sd_read_array_double+0x88>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <sd_read_array_double+0x84>)
 8001a14:	f014 f9d8 	bl	8015dc8 <f_gets>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1dd      	bne.n	80019da <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a1e:	f000 f85b 	bl	8001ad8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <sd_read_array_double+0x88>)
 8001a24:	f013 fd5a 	bl	80154dc <f_close>

	return ret;
 8001a28:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	0801a338 	.word	0x0801a338
 8001a38:	200465b0 	.word	0x200465b0
 8001a3c:	20046640 	.word	0x20046640

08001a40 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4908      	ldr	r1, [pc, #32]	; (8001a70 <sd_mount+0x30>)
 8001a4e:	4809      	ldr	r0, [pc, #36]	; (8001a74 <sd_mount+0x34>)
 8001a50:	f012 ffbc 	bl	80149cc <f_mount>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <sd_mount+0x20>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	e001      	b.n	8001a64 <sd_mount+0x24>
	else ret = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	0801a348 	.word	0x0801a348
 8001a74:	20045470 	.word	0x20045470

08001a78 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <create_path+0x24>)
 8001a86:	f015 f939 	bl	8016cfc <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <create_path+0x28>)
 8001a8e:	f015 f935 	bl	8016cfc <strcpy>

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200464b0 	.word	0x200464b0
 8001aa0:	20045370 	.word	0x20045370

08001aa4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <fopen_folder_and_file+0x24>)
 8001aaa:	f014 f871 	bl	8015b90 <f_mkdir>

	f_chdir(dirpath);
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <fopen_folder_and_file+0x24>)
 8001ab0:	f013 fd3e 	bl	8015530 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ab4:	2213      	movs	r2, #19
 8001ab6:	4905      	ldr	r1, [pc, #20]	; (8001acc <fopen_folder_and_file+0x28>)
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <fopen_folder_and_file+0x2c>)
 8001aba:	f012 ffcd 	bl	8014a58 <f_open>

	f_chdir("..");
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <fopen_folder_and_file+0x30>)
 8001ac0:	f013 fd36 	bl	8015530 <f_chdir>


}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200464b0 	.word	0x200464b0
 8001acc:	20045370 	.word	0x20045370
 8001ad0:	20046640 	.word	0x20046640
 8001ad4:	0801a33c 	.word	0x0801a33c

08001ad8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	e007      	b.n	8001af4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001ae4:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <bufclear+0x30>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3301      	adds	r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b7f      	cmp	r3, #127	; 0x7f
 8001af8:	ddf4      	ble.n	8001ae4 <bufclear+0xc>
	}
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200465b0 	.word	0x200465b0

08001b0c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <read_byte+0x54>)
 8001b28:	f00a ff7c 	bl	800ca24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b2c:	f107 010f 	add.w	r1, r7, #15
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	2201      	movs	r2, #1
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <read_byte+0x58>)
 8001b36:	f00e f93d 	bl	800fdb4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b3a:	f107 010e 	add.w	r1, r7, #14
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	2201      	movs	r2, #1
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <read_byte+0x58>)
 8001b44:	f00e fa6a 	bl	801001c <HAL_SPI_Receive>
	CS_SET;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <read_byte+0x54>)
 8001b50:	f00a ff68 	bl	800ca24 <HAL_GPIO_WritePin>

	return val;
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020400 	.word	0x40020400
 8001b64:	200476dc 	.word	0x200476dc

08001b68 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <write_byte+0x54>)
 8001b8a:	f00a ff4b 	bl	800ca24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b8e:	f107 010f 	add.w	r1, r7, #15
 8001b92:	2364      	movs	r3, #100	; 0x64
 8001b94:	2201      	movs	r2, #1
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <write_byte+0x58>)
 8001b98:	f00e f90c 	bl	800fdb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001b9c:	1db9      	adds	r1, r7, #6
 8001b9e:	2364      	movs	r3, #100	; 0x64
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <write_byte+0x58>)
 8001ba4:	f00e f906 	bl	800fdb4 <HAL_SPI_Transmit>
	CS_SET;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bae:	4803      	ldr	r0, [pc, #12]	; (8001bbc <write_byte+0x54>)
 8001bb0:	f00a ff38 	bl	800ca24 <HAL_GPIO_WritePin>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	200476dc 	.word	0x200476dc

08001bc4 <IMU_init>:

uint16_t IMU_init() {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff ff9c 	bl	8001b0c <read_byte>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	2be0      	cmp	r3, #224	; 0xe0
 8001bdc:	d119      	bne.n	8001c12 <IMU_init+0x4e>
		ret = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001be2:	2101      	movs	r1, #1
 8001be4:	2006      	movs	r0, #6
 8001be6:	f7ff ffbf 	bl	8001b68 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001bea:	2110      	movs	r1, #16
 8001bec:	2003      	movs	r0, #3
 8001bee:	f7ff ffbb 	bl	8001b68 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	207f      	movs	r0, #127	; 0x7f
 8001bf6:	f7ff ffb7 	bl	8001b68 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001bfa:	2106      	movs	r1, #6
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff ffb3 	bl	8001b68 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c02:	2106      	movs	r1, #6
 8001c04:	2014      	movs	r0, #20
 8001c06:	f7ff ffaf 	bl	8001b68 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	207f      	movs	r0, #127	; 0x7f
 8001c0e:	f7ff ffab 	bl	8001b68 <write_byte>
	}
	return ret;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <read_gyro_data>:

void read_gyro_data() {
 8001c1c:	b598      	push	{r3, r4, r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c20:	2033      	movs	r0, #51	; 0x33
 8001c22:	f7ff ff73 	bl	8001b0c <read_byte>
 8001c26:	4603      	mov	r3, r0
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b21c      	sxth	r4, r3
 8001c2c:	2034      	movs	r0, #52	; 0x34
 8001c2e:	f7ff ff6d 	bl	8001b0c <read_byte>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4323      	orrs	r3, r4
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <read_gyro_data+0x64>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c3e:	2035      	movs	r0, #53	; 0x35
 8001c40:	f7ff ff64 	bl	8001b0c <read_byte>
 8001c44:	4603      	mov	r3, r0
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b21c      	sxth	r4, r3
 8001c4a:	2036      	movs	r0, #54	; 0x36
 8001c4c:	f7ff ff5e 	bl	8001b0c <read_byte>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	4323      	orrs	r3, r4
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <read_gyro_data+0x68>)
 8001c5a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c5c:	2037      	movs	r0, #55	; 0x37
 8001c5e:	f7ff ff55 	bl	8001b0c <read_byte>
 8001c62:	4603      	mov	r3, r0
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21c      	sxth	r4, r3
 8001c68:	2038      	movs	r0, #56	; 0x38
 8001c6a:	f7ff ff4f 	bl	8001b0c <read_byte>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4323      	orrs	r3, r4
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <read_gyro_data+0x6c>)
 8001c78:	801a      	strh	r2, [r3, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	bd98      	pop	{r3, r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20047678 	.word	0x20047678
 8001c84:	20047676 	.word	0x20047676
 8001c88:	20047670 	.word	0x20047670

08001c8c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	805a      	strh	r2, [r3, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	809a      	strh	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	80da      	strh	r2, [r3, #6]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	811a      	strh	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	815a      	strh	r2, [r3, #10]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
{

}
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cd8:	f7ff ff74 	bl	8001bc4 <IMU_init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001ce0:	f7ff f9de 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff f9ea 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <_ZN3IMU4initEv+0x44>)
 8001cee:	f7ff fa11 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff f9e3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001cfa:	89fb      	ldrh	r3, [r7, #14]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <_ZN3IMU4initEv+0x48>)
 8001d00:	f7ff fa08 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d08:	f009 fbf6 	bl	800b4f8 <HAL_Delay>

}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	0801a34c 	.word	0x0801a34c
 8001d18:	0801a358 	.word	0x0801a358
 8001d1c:	00000000 	.word	0x00000000

08001d20 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d28:	f7ff ff78 	bl	8001c1c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbff 	bl	8000554 <__aeabi_i2d>
 8001d56:	a316      	add	r3, pc, #88	; (adr r3, 8001db0 <_ZN3IMU12updateValuesEv+0x90>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fc64 	bl	8000628 <__aeabi_dmul>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	4625      	mov	r5, r4
 8001d66:	461c      	mov	r4, r3
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <_ZN3IMU12updateValuesEv+0xac>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbf0 	bl	8000554 <__aeabi_i2d>
 8001d74:	a310      	add	r3, pc, #64	; (adr r3, 8001db8 <_ZN3IMU12updateValuesEv+0x98>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fc55 	bl	8000628 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe fa99 	bl	80002bc <__adddf3>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4621      	mov	r1, r4
 8001d92:	f7fe fef9 	bl	8000b88 <__aeabi_d2iz>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <_ZN3IMU12updateValuesEv+0xac>)
 8001da6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bdb0      	pop	{r4, r5, r7, pc}
 8001db0:	47ae147b 	.word	0x47ae147b
 8001db4:	3f847ae1 	.word	0x3f847ae1
 8001db8:	7ae147ae 	.word	0x7ae147ae
 8001dbc:	3fefae14 	.word	0x3fefae14
 8001dc0:	20047678 	.word	0x20047678
 8001dc4:	20047676 	.word	0x20047676
 8001dc8:	20047670 	.word	0x20047670
 8001dcc:	200001fc 	.word	0x200001fc

08001dd0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7fe fbbf 	bl	8000578 <__aeabi_f2d>
 8001dfa:	a316      	add	r3, pc, #88	; (adr r3, 8001e54 <_ZN3IMU8getOmegaEv+0x84>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fd3c 	bl	800087c <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4614      	mov	r4, r2
 8001e0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e0e:	a313      	add	r3, pc, #76	; (adr r3, 8001e5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fc06 	bl	8000628 <__aeabi_dmul>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	4618      	mov	r0, r3
 8001e22:	4621      	mov	r1, r4
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <_ZN3IMU8getOmegaEv+0x80>)
 8001e2a:	f7fe fd27 	bl	800087c <__aeabi_ddiv>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	4618      	mov	r0, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7fe feef 	bl	8000c18 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	ee07 3a90 	vmov	s15, r3
}
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40668000 	.word	0x40668000
 8001e54:	66666666 	.word	0x66666666
 8001e58:	40306666 	.word	0x40306666
 8001e5c:	54411744 	.word	0x54411744
 8001e60:	400921fb 	.word	0x400921fb

08001e64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e6c:	466b      	mov	r3, sp
 8001e6e:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001e70:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e74:	f009 fb40 	bl	800b4f8 <HAL_Delay>
	lcd_clear();
 8001e78:	f7ff f912 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff f91e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001e84:	4840      	ldr	r0, [pc, #256]	; (8001f88 <_ZN3IMU11calibrationEv+0x124>)
 8001e86:	f7ff f945 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff f917 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001e92:	483e      	ldr	r0, [pc, #248]	; (8001f8c <_ZN3IMU11calibrationEv+0x128>)
 8001e94:	f7ff f93e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001e98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001e9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ea2:	1e5d      	subs	r5, r3, #1
 8001ea4:	61bd      	str	r5, [r7, #24]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	f04f 0400 	mov.w	r4, #0
 8001eb8:	0154      	lsls	r4, r2, #5
 8001eba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ebe:	014b      	lsls	r3, r1, #5
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	f04f 0400 	mov.w	r4, #0
 8001ed2:	0154      	lsls	r4, r2, #5
 8001ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ed8:	014b      	lsls	r3, r1, #5
 8001eda:	462b      	mov	r3, r5
 8001edc:	3301      	adds	r3, #1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3303      	adds	r3, #3
 8001ee2:	3307      	adds	r3, #7
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8001eec:	466b      	mov	r3, sp
 8001eee:	3303      	adds	r3, #3
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	83fb      	strh	r3, [r7, #30]
 8001efa:	8bfa      	ldrh	r2, [r7, #30]
 8001efc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	da13      	bge.n	8001f2c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f0a:	8bfb      	ldrh	r3, [r7, #30]
 8001f0c:	ee07 2a90 	vmov	s15, r2
 8001f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f009 faea 	bl	800b4f8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f24:	8bfb      	ldrh	r3, [r7, #30]
 8001f26:	3301      	adds	r3, #1
 8001f28:	83fb      	strh	r3, [r7, #30]
 8001f2a:	e7e6      	b.n	8001efa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	462b      	mov	r3, r5
 8001f34:	3301      	adds	r3, #1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d00e      	beq.n	8001f62 <_ZN3IMU11calibrationEv+0xfe>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e7ec      	b.n	8001f3c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f7c:	46b5      	mov	sp, r6
}
 8001f7e:	bf00      	nop
 8001f80:	372c      	adds	r7, #44	; 0x2c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0801a35c 	.word	0x0801a35c
 8001f8c:	0801a368 	.word	0x0801a368

08001f90 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fa0:	79bb      	ldrb	r3, [r7, #6]
 8001fa2:	b299      	uxth	r1, r3
 8001fa4:	1dfa      	adds	r2, r7, #7
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <INA260_read+0x50>)
 8001fae:	f00a fea3 	bl	800ccf8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	f107 020c 	add.w	r2, r7, #12
 8001fba:	2364      	movs	r3, #100	; 0x64
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <INA260_read+0x50>)
 8001fc2:	f00a ff97 	bl	800cef4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001fc6:	7b3b      	ldrb	r3, [r7, #12]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	7b7b      	ldrb	r3, [r7, #13]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20047890 	.word	0x20047890

08001fe4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	4604      	mov	r4, r0
 8001fec:	4608      	mov	r0, r1
 8001fee:	4611      	mov	r1, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71bb      	strb	r3, [r7, #6]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	717b      	strb	r3, [r7, #5]
 8001ffe:	4613      	mov	r3, r2
 8002000:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	733b      	strb	r3, [r7, #12]
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	737b      	strb	r3, [r7, #13]
 800200a:	797b      	ldrb	r3, [r7, #5]
 800200c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800200e:	793b      	ldrb	r3, [r7, #4]
 8002010:	b299      	uxth	r1, r3
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	2364      	movs	r3, #100	; 0x64
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2303      	movs	r3, #3
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <INA260_write+0x48>)
 800201e:	f00a fe6b 	bl	800ccf8 <HAL_I2C_Master_Transmit>
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	20047890 	.word	0x20047890

08002030 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	460b      	mov	r3, r1
 800203c:	71bb      	strb	r3, [r7, #6]
 800203e:	4613      	mov	r3, r2
 8002040:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002042:	797b      	ldrb	r3, [r7, #5]
 8002044:	79ba      	ldrb	r2, [r7, #6]
 8002046:	79f9      	ldrb	r1, [r7, #7]
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff ffcb 	bl	8001fe4 <INA260_write>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	461a      	mov	r2, r3
 8002064:	21df      	movs	r1, #223	; 0xdf
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff ffe2 	bl	8002030 <setConfig>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
{

}
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209c:	482a      	ldr	r0, [pc, #168]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 800209e:	f00a fca9 	bl	800c9f4 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <_ZN8JoyStick8getValueEv+0x2e>
 80020b2:	89fb      	ldrh	r3, [r7, #14]
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020ba:	2101      	movs	r1, #1
 80020bc:	4823      	ldr	r0, [pc, #140]	; (800214c <_ZN8JoyStick8getValueEv+0xc0>)
 80020be:	f00a fc99 	bl	800c9f4 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <_ZN8JoyStick8getValueEv+0x4e>
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80020da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020de:	481a      	ldr	r0, [pc, #104]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 80020e0:	f00a fc88 	bl	800c9f4 <HAL_GPIO_ReadPin>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <_ZN8JoyStick8getValueEv+0x70>
 80020f4:	89fb      	ldrh	r3, [r7, #14]
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80020fc:	2104      	movs	r1, #4
 80020fe:	4814      	ldr	r0, [pc, #80]	; (8002150 <_ZN8JoyStick8getValueEv+0xc4>)
 8002100:	f00a fc78 	bl	800c9f4 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <_ZN8JoyStick8getValueEv+0x90>
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	480a      	ldr	r0, [pc, #40]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 8002120:	f00a fc68 	bl	800c9f4 <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0xb0>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0310 	orr.w	r3, r3, #16
 800213a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800213c:	89fb      	ldrh	r3, [r7, #14]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40020400 	.word	0x40020400

08002154 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	2b52      	cmp	r3, #82	; 0x52
 8002164:	d112      	bne.n	800218c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216c:	4856      	ldr	r0, [pc, #344]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800216e:	f00a fc59 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002178:	4853      	ldr	r0, [pc, #332]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800217a:	f00a fc53 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002184:	4850      	ldr	r0, [pc, #320]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002186:	f00a fc4d 	bl	800ca24 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800218a:	e098      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b47      	cmp	r3, #71	; 0x47
 8002190:	d112      	bne.n	80021b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002198:	484b      	ldr	r0, [pc, #300]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800219a:	f00a fc43 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a4:	4848      	ldr	r0, [pc, #288]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021a6:	f00a fc3d 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b0:	4845      	ldr	r0, [pc, #276]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021b2:	f00a fc37 	bl	800ca24 <HAL_GPIO_WritePin>
}
 80021b6:	e082      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	2b42      	cmp	r3, #66	; 0x42
 80021bc:	d112      	bne.n	80021e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c4:	4840      	ldr	r0, [pc, #256]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f00a fc2d 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021d0:	483d      	ldr	r0, [pc, #244]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021d2:	f00a fc27 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021dc:	483a      	ldr	r0, [pc, #232]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021de:	f00a fc21 	bl	800ca24 <HAL_GPIO_WritePin>
}
 80021e2:	e06c      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	2b43      	cmp	r3, #67	; 0x43
 80021e8:	d112      	bne.n	8002210 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f0:	4835      	ldr	r0, [pc, #212]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f00a fc17 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021fc:	4832      	ldr	r0, [pc, #200]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021fe:	f00a fc11 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002208:	482f      	ldr	r0, [pc, #188]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800220a:	f00a fc0b 	bl	800ca24 <HAL_GPIO_WritePin>
}
 800220e:	e056      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b4d      	cmp	r3, #77	; 0x4d
 8002214:	d112      	bne.n	800223c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800221c:	482a      	ldr	r0, [pc, #168]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f00a fc01 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002228:	4827      	ldr	r0, [pc, #156]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800222a:	f00a fbfb 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002234:	4824      	ldr	r0, [pc, #144]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002236:	f00a fbf5 	bl	800ca24 <HAL_GPIO_WritePin>
}
 800223a:	e040      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b59      	cmp	r3, #89	; 0x59
 8002240:	d112      	bne.n	8002268 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002248:	481f      	ldr	r0, [pc, #124]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f00a fbeb 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002254:	481c      	ldr	r0, [pc, #112]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002256:	f00a fbe5 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002260:	4819      	ldr	r0, [pc, #100]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002262:	f00a fbdf 	bl	800ca24 <HAL_GPIO_WritePin>
}
 8002266:	e02a      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b57      	cmp	r3, #87	; 0x57
 800226c:	d112      	bne.n	8002294 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002274:	4814      	ldr	r0, [pc, #80]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f00a fbd5 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002280:	4811      	ldr	r0, [pc, #68]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002282:	f00a fbcf 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228c:	480e      	ldr	r0, [pc, #56]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800228e:	f00a fbc9 	bl	800ca24 <HAL_GPIO_WritePin>
}
 8002292:	e014      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	2b7e      	cmp	r3, #126	; 0x7e
 8002298:	d111      	bne.n	80022be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a0:	4809      	ldr	r0, [pc, #36]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f00a fbbf 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ac:	4806      	ldr	r0, [pc, #24]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022ae:	f00a fbb9 	bl	800ca24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022ba:	f00a fbb3 	bl	800ca24 <HAL_GPIO_WritePin>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40020000 	.word	0x40020000

080022cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
 80022d8:	4613      	mov	r3, r2
 80022da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80022dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ea:	4813      	ldr	r0, [pc, #76]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 80022ec:	f00a fb9a 	bl	800ca24 <HAL_GPIO_WritePin>
 80022f0:	e009      	b.n	8002306 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80022f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 8002302:	f00a fb8f 	bl	800ca24 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002306:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002314:	4808      	ldr	r0, [pc, #32]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 8002316:	f00a fb85 	bl	800ca24 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800231a:	e009      	b.n	8002330 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800231c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232a:	4803      	ldr	r0, [pc, #12]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 800232c:	f00a fb7a 	bl	800ca24 <HAL_GPIO_WritePin>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40020000 	.word	0x40020000

0800233c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800233c:	b580      	push	{r7, lr}
 800233e:	b092      	sub	sp, #72	; 0x48
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fe92 	bl	8002074 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	647b      	str	r3, [r7, #68]	; 0x44
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	331c      	adds	r3, #28
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
 800235e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	429a      	cmp	r2, r3
 8002364:	d008      	beq.n	8002378 <_ZN10LineSensorC1Ev+0x3c>
 8002366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	2200      	movs	r2, #0
 800236e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002372:	3302      	adds	r3, #2
 8002374:	647b      	str	r3, [r7, #68]	; 0x44
 8002376:	e7f2      	b.n	800235e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	643b      	str	r3, [r7, #64]	; 0x40
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	3338      	adds	r3, #56	; 0x38
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	429a      	cmp	r2, r3
 8002390:	d009      	beq.n	80023a6 <_ZN10LineSensorC1Ev+0x6a>
 8002392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002394:	623b      	str	r3, [r7, #32]
		s = 0;
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800239e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a0:	3304      	adds	r3, #4
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
 80023a4:	e7f1      	b.n	800238a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3338      	adds	r3, #56	; 0x38
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d009      	beq.n	80023d4 <_ZN10LineSensorC1Ev+0x98>
 80023c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80023cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ce:	3304      	adds	r3, #4
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	e7f1      	b.n	80023b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	3338      	adds	r3, #56	; 0x38
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d009      	beq.n	8002402 <_ZN10LineSensorC1Ev+0xc6>
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	3304      	adds	r3, #4
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002400:	e7f1      	b.n	80023e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	3748      	adds	r7, #72	; 0x48
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	220e      	movs	r2, #14
 8002418:	4619      	mov	r1, r3
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800241c:	f009 f8d2 	bl	800b5c4 <HAL_ADC_Start_DMA>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200477b4 	.word	0x200477b4

0800242c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b0d      	cmp	r3, #13
 800243c:	dc2f      	bgt.n	800249e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3392      	adds	r3, #146	; 0x92
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	ed93 7a00 	vldr	s14, [r3]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	33a0      	adds	r3, #160	; 0xa0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a5b      	subs	r3, r3, r1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	440b      	add	r3, r1
 800248a:	3306      	adds	r3, #6
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e7cc      	b.n	8002438 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b09      	cmp	r3, #9
 80024b0:	d902      	bls.n	80024b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]


}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	200001fe 	.word	0x200001fe

080024c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80024c8:	b490      	push	{r4, r7}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024da:	2b0d      	cmp	r3, #13
 80024dc:	f200 8087 	bhi.w	80025ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80024e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d81c      	bhi.n	8002528 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80024ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80024f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80024f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4423      	add	r3, r4
 8002506:	3306      	adds	r3, #6
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4403      	add	r3, r0
 800250c:	3304      	adds	r3, #4
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	008b      	lsls	r3, r1, #2
 8002512:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002516:	440b      	add	r3, r1
 8002518:	3b30      	subs	r3, #48	; 0x30
 800251a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800251c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002520:	3301      	adds	r3, #1
 8002522:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002526:	e7de      	b.n	80024e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800252e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002532:	2b09      	cmp	r3, #9
 8002534:	d84d      	bhi.n	80025d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002536:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800253a:	3301      	adds	r3, #1
 800253c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002540:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002544:	2b09      	cmp	r3, #9
 8002546:	d83e      	bhi.n	80025c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002548:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002552:	4413      	add	r3, r2
 8002554:	3b30      	subs	r3, #48	; 0x30
 8002556:	ed93 7a00 	vldr	s14, [r3]
 800255a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002564:	4413      	add	r3, r2
 8002566:	3b30      	subs	r3, #48	; 0x30
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d521      	bpl.n	80025ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002576:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002580:	4413      	add	r3, r2
 8002582:	3b30      	subs	r3, #48	; 0x30
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002588:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800258c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002596:	440a      	add	r2, r1
 8002598:	3a30      	subs	r2, #48	; 0x30
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025a2:	440b      	add	r3, r1
 80025a4:	3b30      	subs	r3, #48	; 0x30
 80025a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025b2:	4413      	add	r3, r2
 80025b4:	3b30      	subs	r3, #48	; 0x30
 80025b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025be:	3301      	adds	r3, #1
 80025c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025c4:	e7bc      	b.n	8002540 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80025c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ca:	3301      	adds	r3, #1
 80025cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025d0:	e7ad      	b.n	800252e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 80025d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	33b0      	adds	r3, #176	; 0xb0
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025e6:	3301      	adds	r3, #1
 80025e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025ec:	e773      	b.n	80024d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 80025ee:	bf00      	nop
 80025f0:	3738      	adds	r7, #56	; 0x38
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc90      	pop	{r4, r7}
 80025f6:	4770      	bx	lr

080025f8 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0a0      	sub	sp, #128	; 0x80
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002600:	2064      	movs	r0, #100	; 0x64
 8002602:	f008 ff79 	bl	800b4f8 <HAL_Delay>

	lcd_clear();
 8002606:	f7fe fd4b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800260a:	2100      	movs	r1, #0
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe fd57 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002612:	4886      	ldr	r0, [pc, #536]	; (800282c <_ZN10LineSensor11calibrationEv+0x234>)
 8002614:	f7fe fd7e 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002618:	2101      	movs	r1, #1
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fd50 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002620:	4883      	ldr	r0, [pc, #524]	; (8002830 <_ZN10LineSensor11calibrationEv+0x238>)
 8002622:	f7fe fd77 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002626:	2300      	movs	r3, #0
 8002628:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800262c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002630:	2b0d      	cmp	r3, #13
 8002632:	d823      	bhi.n	800267c <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002634:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002638:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	32b0      	adds	r2, #176	; 0xb0
 8002640:	0092      	lsls	r2, r2, #2
 8002642:	440a      	add	r2, r1
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800264c:	440b      	add	r3, r1
 800264e:	3b40      	subs	r3, #64	; 0x40
 8002650:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002652:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002656:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	32b0      	adds	r2, #176	; 0xb0
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	440a      	add	r2, r1
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800266a:	440b      	add	r3, r1
 800266c:	3b78      	subs	r3, #120	; 0x78
 800266e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002670:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002674:	3301      	adds	r3, #1
 8002676:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800267a:	e7d7      	b.n	800262c <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd02 	bl	800208c <_ZN8JoyStick8getValueEv>
 8002688:	4603      	mov	r3, r0
 800268a:	2b02      	cmp	r3, #2
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d079      	beq.n	800278c <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002698:	2300      	movs	r3, #0
 800269a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800269e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026a2:	2b0d      	cmp	r3, #13
 80026a4:	d850      	bhi.n	8002748 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80026a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026b0:	4413      	add	r3, r2
 80026b2:	3b40      	subs	r3, #64	; 0x40
 80026b4:	ed93 7a00 	vldr	s14, [r3]
 80026b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	33b0      	adds	r3, #176	; 0xb0
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d50f      	bpl.n	80026f2 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80026d2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80026d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	32b0      	adds	r2, #176	; 0xb0
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	440a      	add	r2, r1
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026ea:	440b      	add	r3, r1
 80026ec:	3b40      	subs	r3, #64	; 0x40
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e024      	b.n	800273c <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80026f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026fc:	4413      	add	r3, r2
 80026fe:	3b78      	subs	r3, #120	; 0x78
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	33b0      	adds	r3, #176	; 0xb0
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	dd0e      	ble.n	800273c <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800271e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002722:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	32b0      	adds	r2, #176	; 0xb0
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	440a      	add	r2, r1
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002736:	440b      	add	r3, r1
 8002738:	3b78      	subs	r3, #120	; 0x78
 800273a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800273c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002740:	3301      	adds	r3, #1
 8002742:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002746:	e7aa      	b.n	800269e <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800274e:	4618      	mov	r0, r3
 8002750:	f003 f9b8 	bl	8005ac4 <_ZN12RotarySwitch8getValueEv>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800276a:	2201      	movs	r2, #1
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fdab 	bl	80022cc <_ZN3LED2LREaa>
 8002776:	e781      	b.n	800267c <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800277e:	2200      	movs	r2, #0
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fda1 	bl	80022cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800278a:	e777      	b.n	800267c <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800278c:	2300      	movs	r3, #0
 800278e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002792:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002796:	2b0d      	cmp	r3, #13
 8002798:	d826      	bhi.n	80027e8 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800279a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027a4:	4413      	add	r3, r2
 80027a6:	3b40      	subs	r3, #64	; 0x40
 80027a8:	ed93 7a00 	vldr	s14, [r3]
 80027ac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027b6:	4413      	add	r3, r2
 80027b8:	3b78      	subs	r3, #120	; 0x78
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027c6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002834 <_ZN10LineSensor11calibrationEv+0x23c>
 80027ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	3392      	adds	r3, #146	; 0x92
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	3304      	adds	r3, #4
 80027d8:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027dc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027e0:	3301      	adds	r3, #1
 80027e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80027e6:	e7d4      	b.n	8002792 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80027ee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027f2:	2b0d      	cmp	r3, #13
 80027f4:	d815      	bhi.n	8002822 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80027f6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80027fa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002804:	440a      	add	r2, r1
 8002806:	3a78      	subs	r2, #120	; 0x78
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	33a0      	adds	r3, #160	; 0xa0
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3304      	adds	r3, #4
 8002814:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002816:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800281a:	3301      	adds	r3, #1
 800281c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002820:	e7e5      	b.n	80027ee <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002822:	bf00      	nop
 8002824:	3780      	adds	r7, #128	; 0x80
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	0801a374 	.word	0x0801a374
 8002830:	0801a380 	.word	0x0801a380
 8002834:	447a0000 	.word	0x447a0000

08002838 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002844:	2303      	movs	r3, #3
 8002846:	81bb      	strh	r3, [r7, #12]
 8002848:	89bb      	ldrh	r3, [r7, #12]
 800284a:	2b0a      	cmp	r3, #10
 800284c:	d814      	bhi.n	8002878 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 800284e:	89bb      	ldrh	r3, [r7, #12]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	33b0      	adds	r3, #176	; 0xb0
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80028cc <_ZN10LineSensor13emergencyStopEv+0x94>
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	db02      	blt.n	8002870 <_ZN10LineSensor13emergencyStopEv+0x38>
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	3301      	adds	r3, #1
 800286e:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002870:	89bb      	ldrh	r3, [r7, #12]
 8002872:	3301      	adds	r3, #1
 8002874:	81bb      	strh	r3, [r7, #12]
 8002876:	e7e7      	b.n	8002848 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	2b07      	cmp	r3, #7
 800287c:	d906      	bls.n	800288c <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	e002      	b.n	8002892 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800288e:	2200      	movs	r2, #0
 8002890:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	2b63      	cmp	r3, #99	; 0x63
 8002898:	d903      	bls.n	80028a2 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e002      	b.n	80028a8 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d903      	bls.n	80028bc <_ZN10LineSensor13emergencyStopEv+0x84>
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80028b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80028ba:	801a      	strh	r2, [r3, #0]

	return flag;
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80028be:	781b      	ldrb	r3, [r3, #0]

}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	44098000 	.word	0x44098000
 80028d0:	20000200 	.word	0x20000200
 80028d4:	20000202 	.word	0x20000202

080028d8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	ed87 0a01 	vstr	s0, [r7, #4]
 80028e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e6:	eef0 7ae7 	vabs.f32	s15, s15
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
				target_velocity_(0), max_velocity_(0), min_velocity_(0), max_velocity2_(0),  min_velocity2_(0), max_velocity3_(0),  min_velocity3_(0), max_velocity4_(0),  min_velocity4_(0),
				logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_flag_force_(false), stable_cnt_reset_flag_(false),
				max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), max_acc3_(0), max_dec3_(0), max_acc4_(0), max_dec4_(0),
				correction_check_cnt_(0), store_check_cnt_(0), ignore_check_cnt_(0), all_sideline_flag_(false)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800299e:	331c      	adds	r3, #28
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80029ac:	3360      	adds	r3, #96	; 0x60
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80029b8:	3362      	adds	r3, #98	; 0x62
 80029ba:	2200      	movs	r2, #0
 80029bc:	801a      	strh	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80029c4:	3364      	adds	r3, #100	; 0x64
 80029c6:	2200      	movs	r2, #0
 80029c8:	801a      	strh	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029d0:	3328      	adds	r3, #40	; 0x28
 80029d2:	2200      	movs	r2, #0
 80029d4:	801a      	strh	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029dc:	332c      	adds	r3, #44	; 0x2c
 80029de:	2200      	movs	r2, #0
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029e8:	332e      	adds	r3, #46	; 0x2e
 80029ea:	2200      	movs	r2, #0
 80029ec:	801a      	strh	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029f4:	3330      	adds	r3, #48	; 0x30
 80029f6:	2200      	movs	r2, #0
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a00:	3332      	adds	r3, #50	; 0x32
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a0c:	3333      	adds	r3, #51	; 0x33
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a18:	3334      	adds	r3, #52	; 0x34
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a24:	3335      	adds	r3, #53	; 0x35
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a30:	3338      	adds	r3, #56	; 0x38
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a3e:	333c      	adds	r3, #60	; 0x3c
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a4c:	3340      	adds	r3, #64	; 0x40
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a5a:	3344      	adds	r3, #68	; 0x44
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a68:	3348      	adds	r3, #72	; 0x48
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a76:	334c      	adds	r3, #76	; 0x4c
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a84:	3350      	adds	r3, #80	; 0x50
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a92:	3354      	adds	r3, #84	; 0x54
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002aa0:	3358      	adds	r3, #88	; 0x58
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002aac:	335a      	adds	r3, #90	; 0x5a
 8002aae:	2200      	movs	r2, #0
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	2200      	movs	r2, #0
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ac4:	335e      	adds	r3, #94	; 0x5e
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae0:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae6:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aec:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af2:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af8:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b00:	2300      	movs	r3, #0
 8002b02:	83fb      	strh	r3, [r7, #30]
 8002b04:	8bfb      	ldrh	r3, [r7, #30]
 8002b06:	f241 726f 	movw	r2, #5999	; 0x176f
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d80d      	bhi.n	8002b2a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
		velocity_table_[i] = 0;
 8002b0e:	8bfb      	ldrh	r3, [r7, #30]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002b16:	3308      	adds	r3, #8
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b22:	8bfb      	ldrh	r3, [r7, #30]
 8002b24:	3301      	adds	r3, #1
 8002b26:	83fb      	strh	r3, [r7, #30]
 8002b28:	e7ec      	b.n	8002b04 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	83bb      	strh	r3, [r7, #28]
 8002b2e:	8bbb      	ldrh	r3, [r7, #28]
 8002b30:	2b63      	cmp	r3, #99	; 0x63
 8002b32:	d80d      	bhi.n	8002b50 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x258>
		crossline_distance_[i] = 0;
 8002b34:	8bbb      	ldrh	r3, [r7, #28]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002b3c:	331a      	adds	r3, #26
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b48:	8bbb      	ldrh	r3, [r7, #28]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	83bb      	strh	r3, [r7, #28]
 8002b4e:	e7ee      	b.n	8002b2e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x236>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b50:	2300      	movs	r3, #0
 8002b52:	837b      	strh	r3, [r7, #26]
 8002b54:	8b7b      	ldrh	r3, [r7, #26]
 8002b56:	2b63      	cmp	r3, #99	; 0x63
 8002b58:	d80d      	bhi.n	8002b76 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x27e>
		crossline_distance2_[i] = 0;
 8002b5a:	8b7b      	ldrh	r3, [r7, #26]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002b62:	333e      	adds	r3, #62	; 0x3e
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b6e:	8b7b      	ldrh	r3, [r7, #26]
 8002b70:	3301      	adds	r3, #1
 8002b72:	837b      	strh	r3, [r7, #26]
 8002b74:	e7ee      	b.n	8002b54 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x25c>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b76:	2300      	movs	r3, #0
 8002b78:	833b      	strh	r3, [r7, #24]
 8002b7a:	8b3b      	ldrh	r3, [r7, #24]
 8002b7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b80:	d20d      	bcs.n	8002b9e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2a6>
		sideline_distance_[i] = 0;
 8002b82:	8b3b      	ldrh	r3, [r7, #24]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002b8a:	3322      	adds	r3, #34	; 0x22
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b96:	8b3b      	ldrh	r3, [r7, #24]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	833b      	strh	r3, [r7, #24]
 8002b9c:	e7ed      	b.n	8002b7a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x282>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	82fb      	strh	r3, [r7, #22]
 8002ba2:	8afb      	ldrh	r3, [r7, #22]
 8002ba4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ba8:	d20d      	bcs.n	8002bc6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2ce>
		sideline_distance2_[i] = 0;
 8002baa:	8afb      	ldrh	r3, [r7, #22]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002bb2:	3316      	adds	r3, #22
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002bbe:	8afb      	ldrh	r3, [r7, #22]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	82fb      	strh	r3, [r7, #22]
 8002bc4:	e7ed      	b.n	8002ba2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x2aa>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3724      	adds	r7, #36	; 0x24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002bec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002c0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002c18:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c20:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	ee07 3a90 	vmov	s15, r3

}
 8002c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ffc7 	bl	8002bd4 <_ZN9LineTrace9calcErrorEv>
 8002c46:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002c54:	4b6a      	ldr	r3, [pc, #424]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c6a:	3364      	adds	r3, #100	; 0x64
 8002c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d150      	bne.n	8002d16 <_ZN9LineTrace8pidTraceEv+0xde>
		p = kp_slow_ * diff;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002c7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c82:	edc7 7a05 	vstr	s15, [r7, #20]
		d = (kd_slow_ / 10) * (diff - pre_diff) / DELTA_T;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002c8c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002c90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c94:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca6:	ee17 0a90 	vmov	r0, s15
 8002caa:	f7fd fc65 	bl	8000578 <__aeabi_f2d>
 8002cae:	a352      	add	r3, pc, #328	; (adr r3, 8002df8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd fde2 	bl	800087c <__aeabi_ddiv>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	f7fd ffaa 	bl	8000c18 <__aeabi_d2f>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002cc8:	4b4d      	ldr	r3, [pc, #308]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fc53 	bl	8000578 <__aeabi_f2d>
 8002cd2:	4604      	mov	r4, r0
 8002cd4:	460d      	mov	r5, r1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce4:	ee17 0a90 	vmov	r0, s15
 8002ce8:	f7fd fc46 	bl	8000578 <__aeabi_f2d>
 8002cec:	a342      	add	r3, pc, #264	; (adr r3, 8002df8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fc99 	bl	8000628 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f7fd fadd 	bl	80002bc <__adddf3>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	4618      	mov	r0, r3
 8002d08:	4621      	mov	r1, r4
 8002d0a:	f7fd ff85 	bl	8000c18 <__aeabi_d2f>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e04f      	b.n	8002db6 <_ZN9LineTrace8pidTraceEv+0x17e>
	}
	else{
		p = kp_ * diff;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d24:	edc7 7a05 	vstr	s15, [r7, #20]
		d = (kd_ / 10) * (diff - pre_diff) / DELTA_T;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d2e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002d32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d36:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d48:	ee17 0a90 	vmov	r0, s15
 8002d4c:	f7fd fc14 	bl	8000578 <__aeabi_f2d>
 8002d50:	a329      	add	r3, pc, #164	; (adr r3, 8002df8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fd91 	bl	800087c <__aeabi_ddiv>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	4621      	mov	r1, r4
 8002d62:	f7fd ff59 	bl	8000c18 <__aeabi_d2f>
 8002d66:	4603      	mov	r3, r0
 8002d68:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002d6a:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fc02 	bl	8000578 <__aeabi_f2d>
 8002d74:	4604      	mov	r4, r0
 8002d76:	460d      	mov	r5, r1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d86:	ee17 0a90 	vmov	r0, s15
 8002d8a:	f7fd fbf5 	bl	8000578 <__aeabi_f2d>
 8002d8e:	a31a      	add	r3, pc, #104	; (adr r3, 8002df8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fc48 	bl	8000628 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd fa8c 	bl	80002bc <__adddf3>
 8002da4:	4603      	mov	r3, r0
 8002da6:	460c      	mov	r4, r1
 8002da8:	4618      	mov	r0, r3
 8002daa:	4621      	mov	r1, r4
 8002dac:	f7fd ff34 	bl	8000c18 <__aeabi_d2f>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002db4:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002db6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dba:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <_ZN9LineTrace8pidTraceEv+0x1c8>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002dda:	edd7 0a02 	vldr	s1, [r7, #8]
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	4610      	mov	r0, r2
 8002de4:	f003 fb00 	bl	80063e8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002de8:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <_ZN9LineTrace8pidTraceEv+0x1cc>)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6013      	str	r3, [r2, #0]

}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bdb0      	pop	{r4, r5, r7, pc}
 8002df6:	bf00      	nop
 8002df8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002dfc:	3f50624d 	.word	0x3f50624d
 8002e00:	20000214 	.word	0x20000214
 8002e04:	20000210 	.word	0x20000210

08002e08 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe fc39 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 fd0f 	bl	8005842 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogsDis2();
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fa9e 	bl	800536a <_ZN6Logger13resetLogsDis2Ev>

	logging_flag_ = true;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 fb64 	bl	8005518 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e72:	3328      	adds	r3, #40	; 0x28
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	461c      	mov	r4, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7fe fbe9 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002e7e:	eef0 7a40 	vmov.f32	s15, s0
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002e88:	331a      	adds	r3, #26
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e98:	3328      	adds	r3, #40	; 0x28
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea6:	3328      	adds	r3, #40	; 0x28
 8002ea8:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eb0:	3328      	adds	r3, #40	; 0x28
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	2b63      	cmp	r3, #99	; 0x63
 8002eb6:	d905      	bls.n	8002ec4 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ebe:	3328      	adds	r3, #40	; 0x28
 8002ec0:	2263      	movs	r2, #99	; 0x63
 8002ec2:	801a      	strh	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd90      	pop	{r4, r7, pc}

08002ecc <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ede:	332a      	adds	r3, #42	; 0x2a
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	461c      	mov	r4, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f7fe fbb3 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002eea:	eef0 7a40 	vmov.f32	s15, s0
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002ef4:	333e      	adds	r3, #62	; 0x3e
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f04:	332a      	adds	r3, #42	; 0x2a
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f12:	332a      	adds	r3, #42	; 0x2a
 8002f14:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f1c:	332a      	adds	r3, #42	; 0x2a
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	2b63      	cmp	r3, #99	; 0x63
 8002f22:	d905      	bls.n	8002f30 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f2a:	332a      	adds	r3, #42	; 0x2a
 8002f2c:	2263      	movs	r2, #99	; 0x63
 8002f2e:	801a      	strh	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}

08002f38 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f4a:	332c      	adds	r3, #44	; 0x2c
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	461c      	mov	r4, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f7fe fb7d 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002f56:	eef0 7a40 	vmov.f32	s15, s0
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002f60:	3322      	adds	r3, #34	; 0x22
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f70:	332c      	adds	r3, #44	; 0x2c
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f7e:	332c      	adds	r3, #44	; 0x2c
 8002f80:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f88:	332c      	adds	r3, #44	; 0x2c
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f90:	d306      	bcc.n	8002fa0 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f98:	332c      	adds	r3, #44	; 0x2c
 8002f9a:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f9e:	801a      	strh	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd90      	pop	{r4, r7, pc}

08002fa8 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fba:	332e      	adds	r3, #46	; 0x2e
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	461c      	mov	r4, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f7fe fb45 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002fc6:	eef0 7a40 	vmov.f32	s15, s0
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002fd0:	3316      	adds	r3, #22
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fe0:	332e      	adds	r3, #46	; 0x2e
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fee:	332e      	adds	r3, #46	; 0x2e
 8002ff0:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ff8:	332e      	adds	r3, #46	; 0x2e
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003000:	d306      	bcc.n	8003010 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003008:	332e      	adds	r3, #46	; 0x2e
 800300a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800300e:	801a      	strh	r2, [r3, #0]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}

08003018 <_ZN9LineTrace23clearCrossLineDistance2Ev>:
		c = 0;
	}
}

void LineTrace::clearCrossLineDistance2()
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	for(auto &c : crossline_distance2_){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003026:	33f8      	adds	r3, #248	; 0xf8
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	429a      	cmp	r2, r3
 800303c:	d009      	beq.n	8003052 <_ZN9LineTrace23clearCrossLineDistance2Ev+0x3a>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	60bb      	str	r3, [r7, #8]
		c = 0;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
	for(auto &c : crossline_distance2_){
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3304      	adds	r3, #4
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e7f1      	b.n	8003036 <_ZN9LineTrace23clearCrossLineDistance2Ev+0x1e>
	}

}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <_ZN9LineTrace22clearSideLineDistance2Ev>:
	}

}

void LineTrace::clearSideLineDistance2()
{
 800305e:	b480      	push	{r7}
 8003060:	b087      	sub	sp, #28
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
	for(auto &s : sideline_distance2_){
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 800306c:	3358      	adds	r3, #88	; 0x58
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	429a      	cmp	r2, r3
 8003082:	d009      	beq.n	8003098 <_ZN9LineTrace22clearSideLineDistance2Ev+0x3a>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	60bb      	str	r3, [r7, #8]
		s = 0;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
	for(auto &s : sideline_distance2_){
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3304      	adds	r3, #4
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e7f1      	b.n	800307c <_ZN9LineTrace22clearSideLineDistance2Ev+0x1e>
	}

}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	ed2d 8b02 	vpush	{d8}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d046      	beq.n	8003148 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030c0:	3364      	adds	r3, #100	; 0x64
 80030c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11c      	bne.n	8003104 <_ZN9LineTrace9storeLogsEv+0x60>
			//logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69dc      	ldr	r4, [r3, #28]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe faad 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 80030d8:	eeb0 8a40 	vmov.f32	s16, s0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f002 fb9d 	bl	8005820 <_ZN8Odometry13getDeltaThetaEv>
 80030e6:	ec53 2b10 	vmov	r2, r3, d0
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fd fd93 	bl	8000c18 <__aeabi_d2f>
 80030f2:	4603      	mov	r3, r0
 80030f4:	ee00 3a90 	vmov	s1, r3
 80030f8:	eeb0 0a48 	vmov.f32	s0, s16
 80030fc:	4620      	mov	r0, r4
 80030fe:	f002 f83f 	bl	8005180 <_ZN6Logger21storeDistanceAndThetaEff>
 8003102:	e01b      	b.n	800313c <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69dc      	ldr	r4, [r3, #28]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe fa90 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8003112:	eeb0 8a40 	vmov.f32	s16, s0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	4618      	mov	r0, r3
 800311c:	f002 fb80 	bl	8005820 <_ZN8Odometry13getDeltaThetaEv>
 8003120:	ec53 2b10 	vmov	r2, r3, d0
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f7fd fd76 	bl	8000c18 <__aeabi_d2f>
 800312c:	4603      	mov	r3, r0
 800312e:	ee00 3a90 	vmov	s1, r3
 8003132:	eeb0 0a48 	vmov.f32	s0, s16
 8003136:	4620      	mov	r0, r4
 8003138:	f002 f822 	bl	8005180 <_ZN6Logger21storeDistanceAndThetaEff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003146:	801a      	strh	r2, [r3, #0]
	}
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	ecbd 8b02 	vpop	{d8}
 8003152:	bd90      	pop	{r4, r7, pc}
 8003154:	20000204 	.word	0x20000204

08003158 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003166:	3328      	adds	r3, #40	; 0x28
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d85a      	bhi.n	8003224 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003174:	3328      	adds	r3, #40	; 0x28
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800317e:	331a      	adds	r3, #26
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fa5f 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8003192:	eeb0 7a40 	vmov.f32	s14, s0
 8003196:	edd7 7a03 	vldr	s15, [r7, #12]
 800319a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800319e:	eeb0 0a67 	vmov.f32	s0, s15
 80031a2:	f7ff fb99 	bl	80028d8 <_ZSt3absf>
 80031a6:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 80031aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003248 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 80031b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	d826      	bhi.n	800320a <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031c2:	3358      	adds	r3, #88	; 0x58
 80031c4:	2200      	movs	r2, #0
 80031c6:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6959      	ldr	r1, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031d2:	3328      	adds	r3, #40	; 0x28
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80031dc:	331a      	adds	r3, #26
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ea:	4608      	mov	r0, r1
 80031ec:	f7fe fa3f 	bl	800166e <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031f6:	3328      	adds	r3, #40	; 0x28
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003204:	3328      	adds	r3, #40	; 0x28
 8003206:	801a      	strh	r2, [r3, #0]
			break;
 8003208:	e00c      	b.n	8003224 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003210:	3328      	adds	r3, #40	; 0x28
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	3301      	adds	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800321e:	3328      	adds	r3, #40	; 0x28
 8003220:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 8003222:	e79d      	b.n	8003160 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800322a:	3328      	adds	r3, #40	; 0x28
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	2b63      	cmp	r3, #99	; 0x63
 8003230:	d905      	bls.n	800323e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003238:	3328      	adds	r3, #40	; 0x28
 800323a:	2263      	movs	r2, #99	; 0x63
 800323c:	801a      	strh	r2, [r3, #0]

}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	437a0000 	.word	0x437a0000

0800324c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003254:	2300      	movs	r3, #0
 8003256:	82fb      	strh	r3, [r7, #22]
 8003258:	8afb      	ldrh	r3, [r7, #22]
 800325a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800325e:	d23d      	bcs.n	80032dc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 8003260:	8afb      	ldrh	r3, [r7, #22]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003268:	3322      	adds	r3, #34	; 0x22
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe f9ea 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 800327c:	eeb0 7a40 	vmov.f32	s14, s0
 8003280:	edd7 7a04 	vldr	s15, [r7, #16]
 8003284:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003288:	eeb0 0a67 	vmov.f32	s0, s15
 800328c:	f7ff fb24 	bl	80028d8 <_ZSt3absf>
 8003290:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 8003294:	edd7 7a03 	vldr	s15, [r7, #12]
 8003298:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003304 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 800329c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a4:	d816      	bhi.n	80032d4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032ac:	3358      	adds	r3, #88	; 0x58
 80032ae:	2200      	movs	r2, #0
 80032b0:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6959      	ldr	r1, [r3, #20]
 80032b6:	8afb      	ldrh	r3, [r7, #22]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80032be:	3322      	adds	r3, #34	; 0x22
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	edd3 7a00 	vldr	s15, [r3]
 80032c8:	eeb0 0a67 	vmov.f32	s0, s15
 80032cc:	4608      	mov	r0, r1
 80032ce:	f7fe f9ce 	bl	800166e <_ZN7Encoder16setTotalDistanceEf>
			break;
 80032d2:	e003      	b.n	80032dc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80032d4:	8afb      	ldrh	r3, [r7, #22]
 80032d6:	3301      	adds	r3, #1
 80032d8:	82fb      	strh	r3, [r7, #22]
 80032da:	e7bd      	b.n	8003258 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032e2:	332c      	adds	r3, #44	; 0x2c
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032ea:	d306      	bcc.n	80032fa <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032f2:	332c      	adds	r3, #44	; 0x2c
 80032f4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032f8:	801a      	strh	r2, [r3, #0]

}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	43660000 	.word	0x43660000

08003308 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800331a:	3364      	adds	r3, #100	; 0x64
 800331c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d144      	bne.n	80033ae <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 8003324:	edd7 7a00 	vldr	s15, [r7]
 8003328:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8003590 <_ZN9LineTrace15radius2VelocityEf+0x288>
 800332c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003334:	d504      	bpl.n	8003340 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e11c      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 500) velocity = 1.5;
 8003340:	edd7 7a00 	vldr	s15, [r7]
 8003344:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8003594 <_ZN9LineTrace15radius2VelocityEf+0x28c>
 8003348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	d503      	bpl.n	800335a <_ZN9LineTrace15radius2VelocityEf+0x52>
 8003352:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e10f      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 650) velocity = 2.0;
 800335a:	edd7 7a00 	vldr	s15, [r7]
 800335e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003598 <_ZN9LineTrace15radius2VelocityEf+0x290>
 8003362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	d503      	bpl.n	8003374 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 800336c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e102      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 1500) velocity = 2.5;
 8003374:	edd7 7a00 	vldr	s15, [r7]
 8003378:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800359c <_ZN9LineTrace15radius2VelocityEf+0x294>
 800337c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d502      	bpl.n	800338c <_ZN9LineTrace15radius2VelocityEf+0x84>
 8003386:	4b86      	ldr	r3, [pc, #536]	; (80035a0 <_ZN9LineTrace15radius2VelocityEf+0x298>)
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	e0f6      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 2000) velocity = 3.0;
 800338c:	edd7 7a00 	vldr	s15, [r7]
 8003390:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80035a4 <_ZN9LineTrace15radius2VelocityEf+0x29c>
 8003394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339c:	d502      	bpl.n	80033a4 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 800339e:	4b82      	ldr	r3, [pc, #520]	; (80035a8 <_ZN9LineTrace15radius2VelocityEf+0x2a0>)
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e0ea      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else velocity = max_velocity_;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e0e5      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033b4:	3364      	adds	r3, #100	; 0x64
 80033b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d143      	bne.n	8003446 <_ZN9LineTrace15radius2VelocityEf+0x13e>
		if(radius < 400) velocity = min_velocity2_;
 80033be:	edd7 7a00 	vldr	s15, [r7]
 80033c2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003590 <_ZN9LineTrace15radius2VelocityEf+0x288>
 80033c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	d504      	bpl.n	80033da <_ZN9LineTrace15radius2VelocityEf+0xd2>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e0cf      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 500) velocity = 1.7;
 80033da:	edd7 7a00 	vldr	s15, [r7]
 80033de:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8003594 <_ZN9LineTrace15radius2VelocityEf+0x28c>
 80033e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	d502      	bpl.n	80033f2 <_ZN9LineTrace15radius2VelocityEf+0xea>
 80033ec:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <_ZN9LineTrace15radius2VelocityEf+0x2a4>)
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e0c3      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 650) velocity = 2.0;
 80033f2:	edd7 7a00 	vldr	s15, [r7]
 80033f6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003598 <_ZN9LineTrace15radius2VelocityEf+0x290>
 80033fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	d503      	bpl.n	800340c <_ZN9LineTrace15radius2VelocityEf+0x104>
 8003404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e0b6      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 1500) velocity = 2.5;
 800340c:	edd7 7a00 	vldr	s15, [r7]
 8003410:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800359c <_ZN9LineTrace15radius2VelocityEf+0x294>
 8003414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341c:	d502      	bpl.n	8003424 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 800341e:	4b60      	ldr	r3, [pc, #384]	; (80035a0 <_ZN9LineTrace15radius2VelocityEf+0x298>)
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e0aa      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 2000) velocity = 3.0;
 8003424:	edd7 7a00 	vldr	s15, [r7]
 8003428:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80035a4 <_ZN9LineTrace15radius2VelocityEf+0x29c>
 800342c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003434:	d502      	bpl.n	800343c <_ZN9LineTrace15radius2VelocityEf+0x134>
 8003436:	4b5c      	ldr	r3, [pc, #368]	; (80035a8 <_ZN9LineTrace15radius2VelocityEf+0x2a0>)
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e09e      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else velocity = max_velocity2_;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e099      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800344c:	3364      	adds	r3, #100	; 0x64
 800344e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003452:	2b03      	cmp	r3, #3
 8003454:	d143      	bne.n	80034de <_ZN9LineTrace15radius2VelocityEf+0x1d6>
		if(radius < 400) velocity = min_velocity3_;
 8003456:	edd7 7a00 	vldr	s15, [r7]
 800345a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003590 <_ZN9LineTrace15radius2VelocityEf+0x288>
 800345e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	d504      	bpl.n	8003472 <_ZN9LineTrace15radius2VelocityEf+0x16a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e083      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 500) velocity = 1.7;
 8003472:	edd7 7a00 	vldr	s15, [r7]
 8003476:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003594 <_ZN9LineTrace15radius2VelocityEf+0x28c>
 800347a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	d502      	bpl.n	800348a <_ZN9LineTrace15radius2VelocityEf+0x182>
 8003484:	4b49      	ldr	r3, [pc, #292]	; (80035ac <_ZN9LineTrace15radius2VelocityEf+0x2a4>)
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e077      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 650) velocity = 2.0;
 800348a:	edd7 7a00 	vldr	s15, [r7]
 800348e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003598 <_ZN9LineTrace15radius2VelocityEf+0x290>
 8003492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349a:	d503      	bpl.n	80034a4 <_ZN9LineTrace15radius2VelocityEf+0x19c>
 800349c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	e06a      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 1500) velocity = 2.5;
 80034a4:	edd7 7a00 	vldr	s15, [r7]
 80034a8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800359c <_ZN9LineTrace15radius2VelocityEf+0x294>
 80034ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	d502      	bpl.n	80034bc <_ZN9LineTrace15radius2VelocityEf+0x1b4>
 80034b6:	4b3a      	ldr	r3, [pc, #232]	; (80035a0 <_ZN9LineTrace15radius2VelocityEf+0x298>)
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	e05e      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 2000) velocity = 3.0;
 80034bc:	edd7 7a00 	vldr	s15, [r7]
 80034c0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80035a4 <_ZN9LineTrace15radius2VelocityEf+0x29c>
 80034c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034cc:	d502      	bpl.n	80034d4 <_ZN9LineTrace15radius2VelocityEf+0x1cc>
 80034ce:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <_ZN9LineTrace15radius2VelocityEf+0x2a0>)
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e052      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else velocity = max_velocity3_;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e04d      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034e4:	3364      	adds	r3, #100	; 0x64
 80034e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d143      	bne.n	8003576 <_ZN9LineTrace15radius2VelocityEf+0x26e>
		if(radius < 400) velocity = min_velocity4_;
 80034ee:	edd7 7a00 	vldr	s15, [r7]
 80034f2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003590 <_ZN9LineTrace15radius2VelocityEf+0x288>
 80034f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	d504      	bpl.n	800350a <_ZN9LineTrace15radius2VelocityEf+0x202>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e037      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 500) velocity = 1.7;
 800350a:	edd7 7a00 	vldr	s15, [r7]
 800350e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003594 <_ZN9LineTrace15radius2VelocityEf+0x28c>
 8003512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351a:	d502      	bpl.n	8003522 <_ZN9LineTrace15radius2VelocityEf+0x21a>
 800351c:	4b23      	ldr	r3, [pc, #140]	; (80035ac <_ZN9LineTrace15radius2VelocityEf+0x2a4>)
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e02b      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 650) velocity = 2.0;
 8003522:	edd7 7a00 	vldr	s15, [r7]
 8003526:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003598 <_ZN9LineTrace15radius2VelocityEf+0x290>
 800352a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003532:	d503      	bpl.n	800353c <_ZN9LineTrace15radius2VelocityEf+0x234>
 8003534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e01e      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 1500) velocity = 2.5;
 800353c:	edd7 7a00 	vldr	s15, [r7]
 8003540:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800359c <_ZN9LineTrace15radius2VelocityEf+0x294>
 8003544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354c:	d502      	bpl.n	8003554 <_ZN9LineTrace15radius2VelocityEf+0x24c>
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <_ZN9LineTrace15radius2VelocityEf+0x298>)
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e012      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else if(radius < 2000) velocity = 3.0;
 8003554:	edd7 7a00 	vldr	s15, [r7]
 8003558:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80035a4 <_ZN9LineTrace15radius2VelocityEf+0x29c>
 800355c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003564:	d502      	bpl.n	800356c <_ZN9LineTrace15radius2VelocityEf+0x264>
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <_ZN9LineTrace15radius2VelocityEf+0x2a0>)
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e006      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
		else velocity = max_velocity4_;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e001      	b.n	800357a <_ZN9LineTrace15radius2VelocityEf+0x272>
	}
	else velocity = 1.3;
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <_ZN9LineTrace15radius2VelocityEf+0x2a8>)
 8003578:	60fb      	str	r3, [r7, #12]

	return velocity;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	ee07 3a90 	vmov	s15, r3
}
 8003580:	eeb0 0a67 	vmov.f32	s0, s15
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	43c80000 	.word	0x43c80000
 8003594:	43fa0000 	.word	0x43fa0000
 8003598:	44228000 	.word	0x44228000
 800359c:	44bb8000 	.word	0x44bb8000
 80035a0:	40200000 	.word	0x40200000
 80035a4:	44fa0000 	.word	0x44fa0000
 80035a8:	40400000 	.word	0x40400000
 80035ac:	3fd9999a 	.word	0x3fd9999a
 80035b0:	3fa66666 	.word	0x3fa66666
 80035b4:	00000000 	.word	0x00000000

080035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80035c4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80035c6:	f241 736f 	movw	r3, #5999	; 0x176f
 80035ca:	83fb      	strh	r3, [r7, #30]
 80035cc:	8bfb      	ldrh	r3, [r7, #30]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 808d 	beq.w	80036ee <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80035d4:	8bfb      	ldrh	r3, [r7, #30]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035de:	3308      	adds	r3, #8
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	ed93 7a00 	vldr	s14, [r3]
 80035e8:	8bfb      	ldrh	r3, [r7, #30]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035f0:	3308      	adds	r3, #8
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	edd3 7a00 	vldr	s15, [r3]
 80035fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035fe:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003602:	edd7 7a06 	vldr	s15, [r7, #24]
 8003606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800360a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360e:	dd6a      	ble.n	80036e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003610:	8bfb      	ldrh	r3, [r7, #30]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc ffac 	bl	8000578 <__aeabi_f2d>
 8003620:	a335      	add	r3, pc, #212	; (adr r3, 80036f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f7fc ffff 	bl	8000628 <__aeabi_dmul>
 800362a:	4603      	mov	r3, r0
 800362c:	460c      	mov	r4, r1
 800362e:	4625      	mov	r5, r4
 8003630:	461c      	mov	r4, r3
 8003632:	69b8      	ldr	r0, [r7, #24]
 8003634:	f7fc ffa0 	bl	8000578 <__aeabi_f2d>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4620      	mov	r0, r4
 800363e:	4629      	mov	r1, r5
 8003640:	f7fd f91c 	bl	800087c <__aeabi_ddiv>
 8003644:	4603      	mov	r3, r0
 8003646:	460c      	mov	r4, r1
 8003648:	4618      	mov	r0, r3
 800364a:	4621      	mov	r1, r4
 800364c:	f7fd fae4 	bl	8000c18 <__aeabi_d2f>
 8003650:	4603      	mov	r3, r0
 8003652:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003654:	edd7 6a06 	vldr	s13, [r7, #24]
 8003658:	ed97 7a05 	vldr	s14, [r7, #20]
 800365c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003660:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003664:	ed97 7a04 	vldr	s14, [r7, #16]
 8003668:	edd7 7a02 	vldr	s15, [r7, #8]
 800366c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	dd37      	ble.n	80036e6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003676:	8bfb      	ldrh	r3, [r7, #30]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800367e:	3308      	adds	r3, #8
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff76 	bl	8000578 <__aeabi_f2d>
 800368c:	4604      	mov	r4, r0
 800368e:	460d      	mov	r5, r1
 8003690:	8bfb      	ldrh	r3, [r7, #30]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	ed93 7a00 	vldr	s14, [r3]
 800369c:	edd7 7a02 	vldr	s15, [r7, #8]
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	ee17 0a90 	vmov	r0, s15
 80036a8:	f7fc ff66 	bl	8000578 <__aeabi_f2d>
 80036ac:	a312      	add	r3, pc, #72	; (adr r3, 80036f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f7fc ffb9 	bl	8000628 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4620      	mov	r0, r4
 80036bc:	4629      	mov	r1, r5
 80036be:	f7fc fdfd 	bl	80002bc <__adddf3>
 80036c2:	4603      	mov	r3, r0
 80036c4:	460c      	mov	r4, r1
 80036c6:	4619      	mov	r1, r3
 80036c8:	4622      	mov	r2, r4
 80036ca:	8bfb      	ldrh	r3, [r7, #30]
 80036cc:	1e5c      	subs	r4, r3, #1
 80036ce:	4608      	mov	r0, r1
 80036d0:	4611      	mov	r1, r2
 80036d2:	f7fd faa1 	bl	8000c18 <__aeabi_d2f>
 80036d6:	4601      	mov	r1, r0
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80036de:	3308      	adds	r3, #8
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80036e6:	8bfb      	ldrh	r3, [r7, #30]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	83fb      	strh	r3, [r7, #30]
 80036ec:	e76e      	b.n	80035cc <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80036ee:	bf00      	nop
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bdb0      	pop	{r4, r5, r7, pc}
 80036f6:	bf00      	nop
 80036f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80036fc:	3f50624d 	.word	0x3f50624d

08003700 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003700:	b5b0      	push	{r4, r5, r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	ed87 0a02 	vstr	s0, [r7, #8]
 800370c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800370e:	2300      	movs	r3, #0
 8003710:	83fb      	strh	r3, [r7, #30]
 8003712:	8bfb      	ldrh	r3, [r7, #30]
 8003714:	f241 726f 	movw	r2, #5999	; 0x176f
 8003718:	4293      	cmp	r3, r2
 800371a:	f200 808d 	bhi.w	8003838 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800371e:	8bfb      	ldrh	r3, [r7, #30]
 8003720:	3301      	adds	r3, #1
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003728:	3308      	adds	r3, #8
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	ed93 7a00 	vldr	s14, [r3]
 8003732:	8bfb      	ldrh	r3, [r7, #30]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800373a:	3308      	adds	r3, #8
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003748:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800374c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003758:	dd6a      	ble.n	8003830 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800375a:	8bfb      	ldrh	r3, [r7, #30]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc ff07 	bl	8000578 <__aeabi_f2d>
 800376a:	a335      	add	r3, pc, #212	; (adr r3, 8003840 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f7fc ff5a 	bl	8000628 <__aeabi_dmul>
 8003774:	4603      	mov	r3, r0
 8003776:	460c      	mov	r4, r1
 8003778:	4625      	mov	r5, r4
 800377a:	461c      	mov	r4, r3
 800377c:	69b8      	ldr	r0, [r7, #24]
 800377e:	f7fc fefb 	bl	8000578 <__aeabi_f2d>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4620      	mov	r0, r4
 8003788:	4629      	mov	r1, r5
 800378a:	f7fd f877 	bl	800087c <__aeabi_ddiv>
 800378e:	4603      	mov	r3, r0
 8003790:	460c      	mov	r4, r1
 8003792:	4618      	mov	r0, r3
 8003794:	4621      	mov	r1, r4
 8003796:	f7fd fa3f 	bl	8000c18 <__aeabi_d2f>
 800379a:	4603      	mov	r3, r0
 800379c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800379e:	edd7 6a06 	vldr	s13, [r7, #24]
 80037a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80037a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037aa:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80037ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80037b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	dd37      	ble.n	8003830 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80037c0:	8bfb      	ldrh	r3, [r7, #30]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80037c8:	3308      	adds	r3, #8
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fed1 	bl	8000578 <__aeabi_f2d>
 80037d6:	4604      	mov	r4, r0
 80037d8:	460d      	mov	r5, r1
 80037da:	8bfb      	ldrh	r3, [r7, #30]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	ed93 7a00 	vldr	s14, [r3]
 80037e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ee:	ee17 0a90 	vmov	r0, s15
 80037f2:	f7fc fec1 	bl	8000578 <__aeabi_f2d>
 80037f6:	a312      	add	r3, pc, #72	; (adr r3, 8003840 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f7fc ff14 	bl	8000628 <__aeabi_dmul>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4620      	mov	r0, r4
 8003806:	4629      	mov	r1, r5
 8003808:	f7fc fd58 	bl	80002bc <__adddf3>
 800380c:	4603      	mov	r3, r0
 800380e:	460c      	mov	r4, r1
 8003810:	4619      	mov	r1, r3
 8003812:	4622      	mov	r2, r4
 8003814:	8bfb      	ldrh	r3, [r7, #30]
 8003816:	1c5c      	adds	r4, r3, #1
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	f7fd f9fc 	bl	8000c18 <__aeabi_d2f>
 8003820:	4601      	mov	r1, r0
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003828:	3308      	adds	r3, #8
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003830:	8bfb      	ldrh	r3, [r7, #30]
 8003832:	3301      	adds	r3, #1
 8003834:	83fb      	strh	r3, [r7, #30]
 8003836:	e76c      	b.n	8003712 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003838:	bf00      	nop
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bdb0      	pop	{r4, r5, r7, pc}
 8003840:	d2f1a9fc 	.word	0xd2f1a9fc
 8003844:	3f50624d 	.word	0x3f50624d

08003848 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd ff27 	bl	80016a8 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003860:	3360      	adds	r3, #96	; 0x60
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800386c:	3362      	adds	r3, #98	; 0x62
 800386e:	2200      	movs	r2, #0
 8003870:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003878:	331c      	adds	r3, #28
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003896:	3360      	adds	r3, #96	; 0x60
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038a2:	3362      	adds	r3, #98	; 0x62
 80038a4:	2200      	movs	r2, #0
 80038a6:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80038ae:	331c      	adds	r3, #28
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038d0:	3360      	adds	r3, #96	; 0x60
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d05e      	beq.n	8003996 <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd feb7 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 80038e2:	eeb0 7a40 	vmov.f32	s14, s0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80038ec:	331c      	adds	r3, #28
 80038ee:	edd3 7a00 	vldr	s15, [r3]
 80038f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fa:	bfac      	ite	ge
 80038fc:	2301      	movge	r3, #1
 80038fe:	2300      	movlt	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d025      	beq.n	8003952 <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800390c:	331c      	adds	r3, #28
 800390e:	ed93 7a00 	vldr	s14, [r3]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003918:	3362      	adds	r3, #98	; 0x62
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	3336      	adds	r3, #54	; 0x36
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	edd3 7a00 	vldr	s15, [r3]
 800392a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003934:	331c      	adds	r3, #28
 8003936:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003940:	3362      	adds	r3, #98	; 0x62
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	3301      	adds	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800394e:	3362      	adds	r3, #98	; 0x62
 8003950:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003958:	3362      	adds	r3, #98	; 0x62
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003960:	4293      	cmp	r3, r2
 8003962:	d906      	bls.n	8003972 <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800396a:	3362      	adds	r3, #98	; 0x62
 800396c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003970:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003978:	3362      	adds	r3, #98	; 0x62
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003982:	3308      	adds	r3, #8
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	edd3 7a00 	vldr	s15, [r3]
 800398c:	eeb0 0a67 	vmov.f32	s0, s15
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fb50 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd fe3d 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 80039b8:	eeb0 7a40 	vmov.f32	s14, s0
 80039bc:	edd7 7a00 	vldr	s15, [r7]
 80039c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	bf94      	ite	ls
 80039ca:	2301      	movls	r3, #1
 80039cc:	2300      	movhi	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	//float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
	//float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80039fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a08:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8003a1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a28:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	//static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003a2c:	4a3b      	ldr	r2, [pc, #236]	; (8003b1c <_ZN9LineTrace11isCrossLineEv+0x138>)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003a32:	4a3b      	ldr	r2, [pc, #236]	; (8003b20 <_ZN9LineTrace11isCrossLineEv+0x13c>)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6013      	str	r3, [r2, #0]

	//if(white_flag == false){
		if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700 && encoder_->getCrossLineIgnoreDistance() >= 50){
 8003a38:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a3c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003b24 <_ZN9LineTrace11isCrossLineEv+0x140>
 8003a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a48:	d518      	bpl.n	8003a7c <_ZN9LineTrace11isCrossLineEv+0x98>
 8003a4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a4e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003b24 <_ZN9LineTrace11isCrossLineEv+0x140>
 8003a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5a:	d50f      	bpl.n	8003a7c <_ZN9LineTrace11isCrossLineEv+0x98>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fd fe4c 	bl	80016fe <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003a66:	eeb0 7a40 	vmov.f32	s14, s0
 8003a6a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8003b28 <_ZN9LineTrace11isCrossLineEv+0x144>
 8003a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a76:	db01      	blt.n	8003a7c <_ZN9LineTrace11isCrossLineEv+0x98>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <_ZN9LineTrace11isCrossLineEv+0x9a>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8003a82:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003a8c:	801a      	strh	r2, [r3, #0]
 8003a8e:	e002      	b.n	8003a96 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8003a90:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d938      	bls.n	8003b10 <_ZN9LineTrace11isCrossLineEv+0x12c>
			flag = true;
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
			//white_flag = true;
			cnt = 0;
 8003aa4:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <_ZN9LineTrace11isCrossLineEv+0x148>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	801a      	strh	r2, [r3, #0]

			side_sensor_->enableIgnore();
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f002 f962 	bl	8005d78 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearSideLineIgnoreDistance();
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd fe12 	bl	80016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fe2a 	bl	800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ace:	3335      	adds	r3, #53	; 0x35
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
			//stable_flag_force_ = true;
			if(mode_selector_ == FIRST_RUNNING){
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003ada:	3364      	adds	r3, #100	; 0x64
 8003adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <_ZN9LineTrace11isCrossLineEv+0x114>
				store_check_cnt_ = 0;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003aea:	335a      	adds	r3, #90	; 0x5a
 8003aec:	2200      	movs	r2, #0
 8003aee:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff f9b5 	bl	8002e60 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003af6:	e00b      	b.n	8003b10 <_ZN9LineTrace11isCrossLineEv+0x12c>
			}
			else{
				store_check_cnt_ = 0;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003afe:	335a      	adds	r3, #90	; 0x5a
 8003b00:	2200      	movs	r2, #0
 8003b02:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff fb27 	bl	8003158 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff f9de 	bl	8002ecc <_ZN9LineTrace23storeCrossLineDistance2Ev>
		}

	}
	*/

	return flag;
 8003b10:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000208 	.word	0x20000208
 8003b20:	2000020c 	.word	0x2000020c
 8003b24:	442f0000 	.word	0x442f0000
 8003b28:	42480000 	.word	0x42480000
 8003b2c:	20000218 	.word	0x20000218
 8003b30:	2000021a 	.word	0x2000021a

08003b34 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fd fd74 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8003b4a:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 fe53 	bl	80057fe <_ZN8Odometry8getThetaEv>
 8003b58:	ec54 3b10 	vmov	r3, r4, d0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	4621      	mov	r1, r4
 8003b60:	f7fd f85a 	bl	8000c18 <__aeabi_d2f>
 8003b64:	4603      	mov	r3, r0
 8003b66:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b74:	d101      	bne.n	8003b7a <_ZN9LineTrace8isStableEv+0x46>
 8003b76:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <_ZN9LineTrace8isStableEv+0xd0>)
 8003b78:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003b7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b86:	eeb0 0a66 	vmov.f32	s0, s13
 8003b8a:	f7fe fea5 	bl	80028d8 <_ZSt3absf>
 8003b8e:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003b92:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b96:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003c08 <_ZN9LineTrace8isStableEv+0xd4>
 8003b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba2:	db01      	blt.n	8003ba8 <_ZN9LineTrace8isStableEv+0x74>
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <_ZN9LineTrace8isStableEv+0xd8>)
 8003ba6:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003bae:	3335      	adds	r3, #53	; 0x35
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <_ZN9LineTrace8isStableEv+0xdc>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003bc2:	3335      	adds	r3, #53	; 0x35
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bcc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003c14 <_ZN9LineTrace8isStableEv+0xe0>
 8003bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	db06      	blt.n	8003be8 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <_ZN9LineTrace8isStableEv+0xdc>)
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <_ZN9LineTrace8isStableEv+0xdc>)
 8003be4:	801a      	strh	r2, [r3, #0]
 8003be6:	e002      	b.n	8003bee <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <_ZN9LineTrace8isStableEv+0xdc>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <_ZN9LineTrace8isStableEv+0xdc>)
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	2b18      	cmp	r3, #24
 8003bf4:	d901      	bls.n	8003bfa <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	371c      	adds	r7, #28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd90      	pop	{r4, r7, pc}
 8003c04:	3727c5ac 	.word	0x3727c5ac
 8003c08:	459c4000 	.word	0x459c4000
 8003c0c:	459c4000 	.word	0x459c4000
 8003c10:	2000021c 	.word	0x2000021c
 8003c14:	44fa0000 	.word	0x44fa0000

08003c18 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b09a      	sub	sp, #104	; 0x68
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003c20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c24:	2201      	movs	r2, #1
 8003c26:	499e      	ldr	r1, [pc, #632]	; (8003ea0 <_ZN9LineTrace4initEv+0x288>)
 8003c28:	489e      	ldr	r0, [pc, #632]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003c2a:	f7fd fe7d 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003c2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c32:	2201      	movs	r2, #1
 8003c34:	499c      	ldr	r1, [pc, #624]	; (8003ea8 <_ZN9LineTrace4initEv+0x290>)
 8003c36:	489b      	ldr	r0, [pc, #620]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003c38:	f7fd fe76 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003c3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c40:	2201      	movs	r2, #1
 8003c42:	499a      	ldr	r1, [pc, #616]	; (8003eac <_ZN9LineTrace4initEv+0x294>)
 8003c44:	4897      	ldr	r0, [pc, #604]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003c46:	f7fd fe6f 	bl	8001928 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003c4a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003c4e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003c52:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8003c56:	eeb0 1a66 	vmov.f32	s2, s13
 8003c5a:	eef0 0a47 	vmov.f32	s1, s14
 8003c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f94c 	bl	8003f00 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003c68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	4990      	ldr	r1, [pc, #576]	; (8003eb0 <_ZN9LineTrace4initEv+0x298>)
 8003c70:	488c      	ldr	r0, [pc, #560]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003c72:	f7fd fe59 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003c76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	498d      	ldr	r1, [pc, #564]	; (8003eb4 <_ZN9LineTrace4initEv+0x29c>)
 8003c7e:	4889      	ldr	r0, [pc, #548]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003c80:	f7fd fe52 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003c84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c88:	2201      	movs	r2, #1
 8003c8a:	498b      	ldr	r1, [pc, #556]	; (8003eb8 <_ZN9LineTrace4initEv+0x2a0>)
 8003c8c:	4885      	ldr	r0, [pc, #532]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003c8e:	f7fd fe4b 	bl	8001928 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003c92:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003c96:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003c9a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8003c9e:	eeb0 1a66 	vmov.f32	s2, s13
 8003ca2:	eef0 0a47 	vmov.f32	s1, s14
 8003ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f96e 	bl	8003f8c <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_min_velocity, temp_max_velocity2, temp_min_velocity2,
		temp_max_velocity3, temp_min_velocity3, temp_max_velocity4, temp_min_velocity4;
	sd_read_array_float("PARAMS", "TARVEL.TXT", 1, &temp_velocity);
 8003cb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4981      	ldr	r1, [pc, #516]	; (8003ebc <_ZN9LineTrace4initEv+0x2a4>)
 8003cb8:	487a      	ldr	r0, [pc, #488]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003cba:	f7fd fe35 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003cbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	497e      	ldr	r1, [pc, #504]	; (8003ec0 <_ZN9LineTrace4initEv+0x2a8>)
 8003cc6:	4877      	ldr	r0, [pc, #476]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003cc8:	f7fd fe2e 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity);
 8003ccc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	497c      	ldr	r1, [pc, #496]	; (8003ec4 <_ZN9LineTrace4initEv+0x2ac>)
 8003cd4:	4873      	ldr	r0, [pc, #460]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003cd6:	f7fd fe27 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003cda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4979      	ldr	r1, [pc, #484]	; (8003ec8 <_ZN9LineTrace4initEv+0x2b0>)
 8003ce2:	4870      	ldr	r0, [pc, #448]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003ce4:	f7fd fe20 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL3.TXT", 1, &temp_min_velocity2);
 8003ce8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cec:	2201      	movs	r2, #1
 8003cee:	4977      	ldr	r1, [pc, #476]	; (8003ecc <_ZN9LineTrace4initEv+0x2b4>)
 8003cf0:	486c      	ldr	r0, [pc, #432]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003cf2:	f7fd fe19 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL4.TXT", 1, &temp_max_velocity3);
 8003cf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	4974      	ldr	r1, [pc, #464]	; (8003ed0 <_ZN9LineTrace4initEv+0x2b8>)
 8003cfe:	4869      	ldr	r0, [pc, #420]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003d00:	f7fd fe12 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL4.TXT", 1, &temp_min_velocity3);
 8003d04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4972      	ldr	r1, [pc, #456]	; (8003ed4 <_ZN9LineTrace4initEv+0x2bc>)
 8003d0c:	4865      	ldr	r0, [pc, #404]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003d0e:	f7fd fe0b 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL5.TXT", 1, &temp_max_velocity4);
 8003d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d16:	2201      	movs	r2, #1
 8003d18:	496f      	ldr	r1, [pc, #444]	; (8003ed8 <_ZN9LineTrace4initEv+0x2c0>)
 8003d1a:	4862      	ldr	r0, [pc, #392]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003d1c:	f7fd fe04 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL5.TXT", 1, &temp_min_velocity4);
 8003d20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d24:	2201      	movs	r2, #1
 8003d26:	496d      	ldr	r1, [pc, #436]	; (8003edc <_ZN9LineTrace4initEv+0x2c4>)
 8003d28:	485e      	ldr	r0, [pc, #376]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003d2a:	f7fd fdfd 	bl	8001928 <sd_read_array_float>

	setTargetVelocity(temp_velocity);
 8003d2e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003d32:	eeb0 0a67 	vmov.f32	s0, s15
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f97d 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003d3c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003d40:	eeb0 0a67 	vmov.f32	s0, s15
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f986 	bl	8004056 <_ZN9LineTrace14setMaxVelocityEf>
	setMinVelocity(temp_min_velocity);
 8003d4a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f98f 	bl	8004076 <_ZN9LineTrace14setMinVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003d58:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f998 	bl	8004096 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity2(temp_min_velocity2);
 8003d66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f9a1 	bl	80040b6 <_ZN9LineTrace15setMinVelocity2Ef>
	setMaxVelocity3(temp_max_velocity3);
 8003d74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003d78:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f9aa 	bl	80040d6 <_ZN9LineTrace15setMaxVelocity3Ef>
	setMinVelocity3(temp_min_velocity3);
 8003d82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d86:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f9b3 	bl	80040f6 <_ZN9LineTrace15setMinVelocity3Ef>
	setMaxVelocity4(temp_max_velocity4);
 8003d90:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003d94:	eeb0 0a67 	vmov.f32	s0, s15
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f9bc 	bl	8004116 <_ZN9LineTrace15setMaxVelocity4Ef>
	setMinVelocity4(temp_min_velocity4);
 8003d9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003da2:	eeb0 0a67 	vmov.f32	s0, s15
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f9c5 	bl	8004136 <_ZN9LineTrace15setMinVelocity4Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003dac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003db0:	2201      	movs	r2, #1
 8003db2:	494b      	ldr	r1, [pc, #300]	; (8003ee0 <_ZN9LineTrace4initEv+0x2c8>)
 8003db4:	483b      	ldr	r0, [pc, #236]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003db6:	f7fd fdb7 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4948      	ldr	r1, [pc, #288]	; (8003ee4 <_ZN9LineTrace4initEv+0x2cc>)
 8003dc2:	4838      	ldr	r0, [pc, #224]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003dc4:	f7fd fdb0 	bl	8001928 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003dc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003dcc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003dd0:	eef0 0a47 	vmov.f32	s1, s14
 8003dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fa4c 	bl	8004276 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003dea:	f107 0320 	add.w	r3, r7, #32
 8003dee:	2201      	movs	r2, #1
 8003df0:	493d      	ldr	r1, [pc, #244]	; (8003ee8 <_ZN9LineTrace4initEv+0x2d0>)
 8003df2:	482c      	ldr	r0, [pc, #176]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003df4:	f7fd fd98 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003df8:	f107 031c 	add.w	r3, r7, #28
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	493b      	ldr	r1, [pc, #236]	; (8003eec <_ZN9LineTrace4initEv+0x2d4>)
 8003e00:	4828      	ldr	r0, [pc, #160]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003e02:	f7fd fd91 	bl	8001928 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003e06:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e0e:	eef0 0a47 	vmov.f32	s1, s14
 8003e12:	eeb0 0a67 	vmov.f32	s0, s15
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa47 	bl	80042aa <_ZN9LineTrace13setMaxAccDec2Eff>

	float temp_acc3 = 0, temp_dec3 = 0;
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
	sd_read_array_float("PARAMS", "ACC3.TXT", 1, &temp_acc3);
 8003e28:	f107 0318 	add.w	r3, r7, #24
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4930      	ldr	r1, [pc, #192]	; (8003ef0 <_ZN9LineTrace4initEv+0x2d8>)
 8003e30:	481c      	ldr	r0, [pc, #112]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003e32:	f7fd fd79 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC3.TXT", 1, &temp_dec3);
 8003e36:	f107 0314 	add.w	r3, r7, #20
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	492d      	ldr	r1, [pc, #180]	; (8003ef4 <_ZN9LineTrace4initEv+0x2dc>)
 8003e3e:	4819      	ldr	r0, [pc, #100]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003e40:	f7fd fd72 	bl	8001928 <sd_read_array_float>
	setMaxAccDec3(temp_acc3, temp_dec3);
 8003e44:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e48:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e4c:	eef0 0a47 	vmov.f32	s1, s14
 8003e50:	eeb0 0a67 	vmov.f32	s0, s15
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fa42 	bl	80042de <_ZN9LineTrace13setMaxAccDec3Eff>

	float temp_acc4 = 0, temp_dec4 = 0;
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC4.TXT", 1, &temp_acc4);
 8003e66:	f107 0310 	add.w	r3, r7, #16
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	4922      	ldr	r1, [pc, #136]	; (8003ef8 <_ZN9LineTrace4initEv+0x2e0>)
 8003e6e:	480d      	ldr	r0, [pc, #52]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003e70:	f7fd fd5a 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC4.TXT", 1, &temp_dec4);
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	2201      	movs	r2, #1
 8003e7a:	4920      	ldr	r1, [pc, #128]	; (8003efc <_ZN9LineTrace4initEv+0x2e4>)
 8003e7c:	4809      	ldr	r0, [pc, #36]	; (8003ea4 <_ZN9LineTrace4initEv+0x28c>)
 8003e7e:	f7fd fd53 	bl	8001928 <sd_read_array_float>
	setMaxAccDec4(temp_acc4, temp_dec4);
 8003e82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e86:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e8a:	eef0 0a47 	vmov.f32	s1, s14
 8003e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fa3d 	bl	8004312 <_ZN9LineTrace13setMaxAccDec4Eff>
}
 8003e98:	bf00      	nop
 8003e9a:	3768      	adds	r7, #104	; 0x68
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	0801a3c0 	.word	0x0801a3c0
 8003ea4:	0801a3c8 	.word	0x0801a3c8
 8003ea8:	0801a3d0 	.word	0x0801a3d0
 8003eac:	0801a3d8 	.word	0x0801a3d8
 8003eb0:	0801a3e0 	.word	0x0801a3e0
 8003eb4:	0801a3ec 	.word	0x0801a3ec
 8003eb8:	0801a3f8 	.word	0x0801a3f8
 8003ebc:	0801a404 	.word	0x0801a404
 8003ec0:	0801a410 	.word	0x0801a410
 8003ec4:	0801a41c 	.word	0x0801a41c
 8003ec8:	0801a428 	.word	0x0801a428
 8003ecc:	0801a434 	.word	0x0801a434
 8003ed0:	0801a440 	.word	0x0801a440
 8003ed4:	0801a44c 	.word	0x0801a44c
 8003ed8:	0801a458 	.word	0x0801a458
 8003edc:	0801a464 	.word	0x0801a464
 8003ee0:	0801a470 	.word	0x0801a470
 8003ee4:	0801a478 	.word	0x0801a478
 8003ee8:	0801a480 	.word	0x0801a480
 8003eec:	0801a48c 	.word	0x0801a48c
 8003ef0:	0801a498 	.word	0x0801a498
 8003ef4:	0801a4a4 	.word	0x0801a4a4
 8003ef8:	0801a4b0 	.word	0x0801a4b0
 8003efc:	0801a4bc 	.word	0x0801a4bc

08003f00 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f10:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
	return kp_;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	ee07 3a90 	vmov	s15, r3
}
 8003f42:	eeb0 0a67 	vmov.f32	s0, s15
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	return ki_;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	ee07 3a90 	vmov	s15, r3
}
 8003f60:	eeb0 0a67 	vmov.f32	s0, s15
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
	return kd_;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	ee07 3a90 	vmov	s15, r3
}
 8003f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f98:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f9c:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	ee07 3a90 	vmov	s15, r3
}
 8003fce:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	ee07 3a90 	vmov	s15, r3
}
 8003fec:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	ee07 3a90 	vmov	s15, r3
}
 800400a:	eeb0 0a67 	vmov.f32	s0, s15
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	645a      	str	r2, [r3, #68]	; 0x44
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <_ZN9LineTrace15setMaxVelocity3Ef>:

void LineTrace::setMaxVelocity3(float velocity)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	ed87 0a00 	vstr	s0, [r7]
	max_velocity3_ = velocity;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <_ZN9LineTrace15setMinVelocity3Ef>:

void LineTrace::setMinVelocity3(float velocity)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	ed87 0a00 	vstr	s0, [r7]
	min_velocity3_ = velocity;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <_ZN9LineTrace15setMaxVelocity4Ef>:

void LineTrace::setMaxVelocity4(float velocity)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity4_ = velocity;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <_ZN9LineTrace15setMinVelocity4Ef>:

void LineTrace::setMinVelocity4(float velocity)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity4_ = velocity;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004164:	ee07 3a90 	vmov	s15, r3
}
 8004168:	eeb0 0a67 	vmov.f32	s0, s15
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004184:	ee07 3a90 	vmov	s15, r3
}
 8004188:	eeb0 0a67 	vmov.f32	s0, s15
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80041a4:	ee07 3a90 	vmov	s15, r3
}
 80041a8:	eeb0 0a67 	vmov.f32	s0, s15
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80041c4:	ee07 3a90 	vmov	s15, r3
}
 80041c8:	eeb0 0a67 	vmov.f32	s0, s15
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80041e4:	ee07 3a90 	vmov	s15, r3
}
 80041e8:	eeb0 0a67 	vmov.f32	s0, s15
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <_ZN9LineTrace15getMaxVelocity3Ev>:

float LineTrace::getMaxVelocity3()
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
	return max_velocity3_;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004204:	ee07 3a90 	vmov	s15, r3
}
 8004208:	eeb0 0a67 	vmov.f32	s0, s15
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_ZN9LineTrace15getMinVelocity3Ev>:

float LineTrace::getMinVelocity3()
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
	return min_velocity3_;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004224:	ee07 3a90 	vmov	s15, r3
}
 8004228:	eeb0 0a67 	vmov.f32	s0, s15
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <_ZN9LineTrace15getMaxVelocity4Ev>:

float LineTrace::getMaxVelocity4()

{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
	return max_velocity4_;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004244:	ee07 3a90 	vmov	s15, r3
}
 8004248:	eeb0 0a67 	vmov.f32	s0, s15
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <_ZN9LineTrace15getMinVelocity4Ev>:

float LineTrace::getMinVelocity4()
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
	return min_velocity4_;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004264:	ee07 3a90 	vmov	s15, r3
}
 8004268:	eeb0 0a67 	vmov.f32	s0, s15
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <_ZN9LineTrace12setMaxAccDecEff>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004282:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800428c:	3338      	adds	r3, #56	; 0x38
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004298:	333c      	adds	r3, #60	; 0x3c
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	601a      	str	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	ed87 0a02 	vstr	s0, [r7, #8]
 80042b6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042c0:	3340      	adds	r3, #64	; 0x40
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042cc:	3344      	adds	r3, #68	; 0x44
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <_ZN9LineTrace13setMaxAccDec3Eff>:

void LineTrace::setMaxAccDec3(const float acc, const float dec)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	ed87 0a02 	vstr	s0, [r7, #8]
 80042ea:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc3_ = acc;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042f4:	3348      	adds	r3, #72	; 0x48
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	601a      	str	r2, [r3, #0]
	max_dec3_ = dec;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004300:	334c      	adds	r3, #76	; 0x4c
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	601a      	str	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <_ZN9LineTrace13setMaxAccDec4Eff>:

void LineTrace::setMaxAccDec4(const float acc, const float dec)
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	ed87 0a02 	vstr	s0, [r7, #8]
 800431e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc4_ = acc;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004328:	3350      	adds	r3, #80	; 0x50
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	601a      	str	r2, [r3, #0]
	max_dec4_ = dec;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004334:	3354      	adds	r3, #84	; 0x54
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
	return max_acc_;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004354:	3338      	adds	r3, #56	; 0x38
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	ee07 3a90 	vmov	s15, r3
}
 800435c:	eeb0 0a67 	vmov.f32	s0, s15
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004378:	333c      	adds	r3, #60	; 0x3c
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	ee07 3a90 	vmov	s15, r3
}
 8004380:	eeb0 0a67 	vmov.f32	s0, s15
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800439c:	3340      	adds	r3, #64	; 0x40
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	ee07 3a90 	vmov	s15, r3
}
 80043a4:	eeb0 0a67 	vmov.f32	s0, s15
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043c0:	3344      	adds	r3, #68	; 0x44
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	ee07 3a90 	vmov	s15, r3
}
 80043c8:	eeb0 0a67 	vmov.f32	s0, s15
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <_ZN9LineTrace10getMaxAcc3Ev>:

float LineTrace::getMaxAcc3()
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
	return max_acc3_;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043e4:	3348      	adds	r3, #72	; 0x48
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	ee07 3a90 	vmov	s15, r3
}
 80043ec:	eeb0 0a67 	vmov.f32	s0, s15
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <_ZN9LineTrace10getMaxDec3Ev>:

float LineTrace::getMaxDec3()
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
	return max_dec3_;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004408:	334c      	adds	r3, #76	; 0x4c
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	ee07 3a90 	vmov	s15, r3
}
 8004410:	eeb0 0a67 	vmov.f32	s0, s15
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <_ZN9LineTrace10getMaxAcc4Ev>:

float LineTrace::getMaxAcc4()
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
	return max_acc4_;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800442c:	3350      	adds	r3, #80	; 0x50
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	ee07 3a90 	vmov	s15, r3
}
 8004434:	eeb0 0a67 	vmov.f32	s0, s15
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <_ZN9LineTrace10getMaxDec4Ev>:

float LineTrace::getMaxDec4()
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
	return max_dec4_;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004450:	3354      	adds	r3, #84	; 0x54
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	ee07 3a90 	vmov	s15, r3
}
 8004458:	eeb0 0a67 	vmov.f32	s0, s15
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80b4 	beq.w	80045e4 <_ZN9LineTrace4flipEv+0x17c>
		// ---- line following processing -----//
		pidTrace();
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fe fbdb 	bl	8002c38 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fa1d 	bl	80038c2 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8004488:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff fa86 	bl	800399e <_ZN9LineTrace16isTargetDistanceEf>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d028      	beq.n	80044ea <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fe fe03 	bl	80030a4 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fb48 	bl	8003b34 <_ZN9LineTrace8isStableEv>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <_ZN9LineTrace4flipEv+0x5c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fc3a 	bl	8005d28 <_ZN10SideSensor10getStatusLEv>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f083 0301 	eor.w	r3, r3, #1
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <_ZN9LineTrace4flipEv+0x5c>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <_ZN9LineTrace4flipEv+0x5e>
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044d0:	3333      	adds	r3, #51	; 0x33
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd f8d6 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 f9ac 	bl	8005842 <_ZN8Odometry13clearPotitionEv>
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff fa7a 	bl	80039e4 <_ZN9LineTrace11isCrossLineEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80044f6:	3333      	adds	r3, #51	; 0x33
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <_ZN9LineTrace4flipEv+0xaa>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	4618      	mov	r0, r3
 8004504:	f001 fc10 	bl	8005d28 <_ZN10SideSensor10getStatusLEv>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <_ZN9LineTrace4flipEv+0xaa>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <_ZN9LineTrace4flipEv+0xac>
 8004512:	2300      	movs	r3, #0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d02f      	beq.n	8004578 <_ZN9LineTrace4flipEv+0x110>
		//if((stable_flag_force_ == true || stable_flag_ == true) && side_sensor_->getStatusL() == true && encoder_->getSideLineIgnoreDistance() >= 120){ //Stabilizing and side sensor is white
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800451e:	3364      	adds	r3, #100	; 0x64
 8004520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d109      	bne.n	800453c <_ZN9LineTrace4flipEv+0xd4>
				store_check_cnt_ = 0;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800452e:	335a      	adds	r3, #90	; 0x5a
 8004530:	2200      	movs	r2, #0
 8004532:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fe fcff 	bl	8002f38 <_ZN9LineTrace21storeSideLineDistanceEv>
 800453a:	e00b      	b.n	8004554 <_ZN9LineTrace4flipEv+0xec>
			}
			else{
				store_check_cnt_ = 0;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004542:	335a      	adds	r3, #90	; 0x5a
 8004544:	2200      	movs	r2, #0
 8004546:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fe fe7f 	bl	800324c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fe fd2a 	bl	8002fa8 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800455a:	3333      	adds	r3, #51	; 0x33
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
			stable_flag_force_ = false;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004566:	3334      	adds	r3, #52	; 0x34
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004572:	3335      	adds	r3, #53	; 0x35
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
		}



		if(side_sensor_->getIgnoreFlag() == true && encoder_->getSideLineIgnoreDistance() >= 100){
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	4618      	mov	r0, r3
 800457e:	f001 fc15 	bl	8005dac <_ZN10SideSensor13getIgnoreFlagEv>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00f      	beq.n	80045a8 <_ZN9LineTrace4flipEv+0x140>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	4618      	mov	r0, r3
 800458e:	f7fd f899 	bl	80016c4 <_ZN7Encoder25getSideLineIgnoreDistanceEv>
 8004592:	eeb0 7a40 	vmov.f32	s14, s0
 8004596:	eddf 7a15 	vldr	s15, [pc, #84]	; 80045ec <_ZN9LineTrace4flipEv+0x184>
 800459a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	db01      	blt.n	80045a8 <_ZN9LineTrace4flipEv+0x140>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <_ZN9LineTrace4flipEv+0x142>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <_ZN9LineTrace4flipEv+0x150>
			side_sensor_->disableIgnore();
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 fbed 	bl	8005d92 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe f93b 	bl	8002838 <_ZN10LineSensor13emergencyStopEv>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00d      	beq.n	80045e4 <_ZN9LineTrace4flipEv+0x17c>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	eddf 0a08 	vldr	s1, [pc, #32]	; 80045f0 <_ZN9LineTrace4flipEv+0x188>
 80045d0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80045f0 <_ZN9LineTrace4flipEv+0x188>
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 ff07 	bl	80063e8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fc fed0 	bl	8001384 <_ZN3ESC3offEv>
			//led_.LR(0, -1);
		}


	}
}
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	42c80000 	.word	0x42c80000
 80045f0:	00000000 	.word	0x00000000

080045f4 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004606:	3364      	adds	r3, #100	; 0x64
 8004608:	887a      	ldrh	r2, [r7, #2]
 800460a:	801a      	strh	r2, [r3, #0]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4618      	mov	r0, r3
 8004636:	f001 ff30 	bl	800649a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	4618      	mov	r0, r3
 8004640:	f001 fb8a 	bl	8005d58 <_ZN10SideSensor17resetWhiteLineCntEv>
	//clearSideLineDistance();
	clearSideLineDistance2();
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fe fd0a 	bl	800305e <_ZN9LineTrace22clearSideLineDistance2Ev>
	//clearCrossLineDistance();
	clearCrossLineDistance2();
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fe fce4 	bl	8003018 <_ZN9LineTrace23clearCrossLineDistance2Ev>
	crossline_idx_ = 0;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004656:	3328      	adds	r3, #40	; 0x28
 8004658:	2200      	movs	r2, #0
 800465a:	801a      	strh	r2, [r3, #0]
	crossline_idx2_ = 0;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004662:	332a      	adds	r3, #42	; 0x2a
 8004664:	2200      	movs	r2, #0
 8004666:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800466e:	332c      	adds	r3, #44	; 0x2c
 8004670:	2200      	movs	r2, #0
 8004672:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800467a:	332e      	adds	r3, #46	; 0x2e
 800467c:	2200      	movs	r2, #0
 800467e:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004686:	3330      	adds	r3, #48	; 0x30
 8004688:	2200      	movs	r2, #0
 800468a:	801a      	strh	r2, [r3, #0]
}
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80046a0:	2300      	movs	r3, #0
 80046a2:	737b      	strb	r3, [r7, #13]
	bool goal_judge_flag = false;
 80046a4:	2300      	movs	r3, #0
 80046a6:	733b      	strb	r3, [r7, #12]
	start();
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff ffb5 	bl	8004618 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80046ae:	7b7b      	ldrb	r3, [r7, #13]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f040 815f 	bne.w	8004974 <_ZN9LineTrace7runningEv+0x2e0>
		switch(stage){
 80046b6:	89fb      	ldrh	r3, [r7, #14]
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	d03a      	beq.n	8004732 <_ZN9LineTrace7runningEv+0x9e>
 80046bc:	2b0a      	cmp	r3, #10
 80046be:	d047      	beq.n	8004750 <_ZN9LineTrace7runningEv+0xbc>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f040 80c7 	bne.w	8004854 <_ZN9LineTrace7runningEv+0x1c0>
		case 0:
			//if(side_sensor_->getWhiteLineCntR() == 1){
			if(side_sensor_->getStatusR() == true){
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 fb38 	bl	8005d40 <_ZN10SideSensor10getStatusREv>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80b9 	beq.w	800484a <_ZN9LineTrace7runningEv+0x1b6>
				loggerStart();
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fe fb95 	bl	8002e08 <_ZN9LineTrace11loggerStartEv>
				logger_->start();
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fef9 	bl	80054da <_ZN6Logger5startEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046ee:	3364      	adds	r3, #100	; 0x64
 80046f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <_ZN9LineTrace7runningEv+0x6a>
					startVelocityPlay();
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff f8a5 	bl	8003848 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearSideLineIgnoreDistance();
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc ffed 	bl	80016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
				encoder_->clearCrossLineIgnoreDistance();
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	4618      	mov	r0, r3
 800470e:	f7fd f805 	bl	800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fc ffc6 	bl	80016a8 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	330c      	adds	r3, #12
 8004720:	f04f 32ff 	mov.w	r2, #4294967295
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd fdd0 	bl	80022cc <_ZN3LED2LREaa>
				stage = 5;
 800472c:	2305      	movs	r3, #5
 800472e:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8004730:	e08b      	b.n	800484a <_ZN9LineTrace7runningEv+0x1b6>

		case 5:
			if(side_sensor_->getStatusR() == false) stage = 10;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	4618      	mov	r0, r3
 8004738:	f001 fb02 	bl	8005d40 <_ZN10SideSensor10getStatusREv>
 800473c:	4603      	mov	r3, r0
 800473e:	f083 0301 	eor.w	r3, r3, #1
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8082 	beq.w	800484e <_ZN9LineTrace7runningEv+0x1ba>
 800474a:	230a      	movs	r3, #10
 800474c:	81fb      	strh	r3, [r7, #14]

			break;
 800474e:	e07e      	b.n	800484e <_ZN9LineTrace7runningEv+0x1ba>
		case 10:
			//if(side_sensor_->getWhiteLineCntR() == 2){
			if(side_sensor_->getStatusL() == true){
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	4618      	mov	r0, r3
 8004756:	f001 fae7 	bl	8005d28 <_ZN10SideSensor10getStatusLEv>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00c      	beq.n	800477a <_ZN9LineTrace7runningEv+0xe6>
				goal_judge_flag = false;
 8004760:	2300      	movs	r3, #0
 8004762:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fc fff4 	bl	8001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				led_.fullColor('B');
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	330c      	adds	r3, #12
 8004772:	2142      	movs	r1, #66	; 0x42
 8004774:	4618      	mov	r0, r3
 8004776:	f7fd fced 	bl	8002154 <_ZN3LED9fullColorEc>
			}

			if(goal_judge_flag == false && side_sensor_->getStatusR() == true && encoder_->getGoalJudgeDistance() >= 30){
 800477a:	7b3b      	ldrb	r3, [r7, #12]
 800477c:	f083 0301 	eor.w	r3, r3, #1
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d017      	beq.n	80047b6 <_ZN9LineTrace7runningEv+0x122>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	4618      	mov	r0, r3
 800478c:	f001 fad8 	bl	8005d40 <_ZN10SideSensor10getStatusREv>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00f      	beq.n	80047b6 <_ZN9LineTrace7runningEv+0x122>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fc ffcc 	bl	8001738 <_ZN7Encoder20getGoalJudgeDistanceEv>
 80047a0:	eeb0 7a40 	vmov.f32	s14, s0
 80047a4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80047a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b0:	db01      	blt.n	80047b6 <_ZN9LineTrace7runningEv+0x122>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <_ZN9LineTrace7runningEv+0x124>
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d013      	beq.n	80047e4 <_ZN9LineTrace7runningEv+0x150>
				goal_judge_flag = true;
 80047bc:	2301      	movs	r3, #1
 80047be:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fc ffc6 	bl	8001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				ignore_check_cnt_ = 0;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047d0:	335c      	adds	r3, #92	; 0x5c
 80047d2:	2200      	movs	r2, #0
 80047d4:	801a      	strh	r2, [r3, #0]

				led_.fullColor('Y');
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	330c      	adds	r3, #12
 80047da:	2159      	movs	r1, #89	; 0x59
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fd fcb9 	bl	8002154 <_ZN3LED9fullColorEc>
				goal_flag = true;
				goal_judge_flag = false;

			}

			break;
 80047e2:	e036      	b.n	8004852 <_ZN9LineTrace7runningEv+0x1be>
			else if(goal_judge_flag == true && encoder_->getGoalJudgeDistance() >= 30){
 80047e4:	7b3b      	ldrb	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00f      	beq.n	800480a <_ZN9LineTrace7runningEv+0x176>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fc ffa2 	bl	8001738 <_ZN7Encoder20getGoalJudgeDistanceEv>
 80047f4:	eeb0 7a40 	vmov.f32	s14, s0
 80047f8:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80047fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004804:	db01      	blt.n	800480a <_ZN9LineTrace7runningEv+0x176>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <_ZN9LineTrace7runningEv+0x178>
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <_ZN9LineTrace7runningEv+0x1be>
				led_.fullColor('M');
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	330c      	adds	r3, #12
 8004814:	214d      	movs	r1, #77	; 0x4d
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd fc9c 	bl	8002154 <_ZN3LED9fullColorEc>
				loggerStop();
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7fe fb0e 	bl	8002e3e <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff f830 	bl	8003888 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004828:	2064      	movs	r0, #100	; 0x64
 800482a:	f006 fe65 	bl	800b4f8 <HAL_Delay>
				setTargetVelocity(0);
 800482e:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8004984 <_ZN9LineTrace7runningEv+0x2f0>
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff fbff 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004838:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800483c:	f006 fe5c 	bl	800b4f8 <HAL_Delay>
				goal_flag = true;
 8004840:	2301      	movs	r3, #1
 8004842:	737b      	strb	r3, [r7, #13]
				goal_judge_flag = false;
 8004844:	2300      	movs	r3, #0
 8004846:	733b      	strb	r3, [r7, #12]
			break;
 8004848:	e003      	b.n	8004852 <_ZN9LineTrace7runningEv+0x1be>
			break;
 800484a:	bf00      	nop
 800484c:	e002      	b.n	8004854 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 8004852:	bf00      	nop
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800485a:	3358      	adds	r3, #88	; 0x58
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	3301      	adds	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004868:	3358      	adds	r3, #88	; 0x58
 800486a:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004872:	3358      	adds	r3, #88	; 0x58
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	f242 720f 	movw	r2, #9999	; 0x270f
 800487a:	4293      	cmp	r3, r2
 800487c:	d906      	bls.n	800488c <_ZN9LineTrace7runningEv+0x1f8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004884:	3358      	adds	r3, #88	; 0x58
 8004886:	f242 7210 	movw	r2, #10000	; 0x2710
 800488a:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004892:	3358      	adds	r3, #88	; 0x58
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800489a:	d805      	bhi.n	80048a8 <_ZN9LineTrace7runningEv+0x214>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	330c      	adds	r3, #12
 80048a0:	2152      	movs	r1, #82	; 0x52
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fd fc56 	bl	8002154 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048ae:	335a      	adds	r3, #90	; 0x5a
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048bc:	335a      	adds	r3, #90	; 0x5a
 80048be:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048c6:	335a      	adds	r3, #90	; 0x5a
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d906      	bls.n	80048e0 <_ZN9LineTrace7runningEv+0x24c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048d8:	335a      	adds	r3, #90	; 0x5a
 80048da:	f242 7210 	movw	r2, #10000	; 0x2710
 80048de:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 500) led_.LR(1, -1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80048e6:	335a      	adds	r3, #90	; 0x5a
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048ee:	d808      	bhi.n	8004902 <_ZN9LineTrace7runningEv+0x26e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	330c      	adds	r3, #12
 80048f4:	f04f 32ff 	mov.w	r2, #4294967295
 80048f8:	2101      	movs	r1, #1
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fd fce6 	bl	80022cc <_ZN3LED2LREaa>
 8004900:	e007      	b.n	8004912 <_ZN9LineTrace7runningEv+0x27e>
		else led_.LR(0, -1);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	330c      	adds	r3, #12
 8004906:	f04f 32ff 	mov.w	r2, #4294967295
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f7fd fcdd 	bl	80022cc <_ZN3LED2LREaa>

		ignore_check_cnt_++;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004918:	335c      	adds	r3, #92	; 0x5c
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	3301      	adds	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004926:	335c      	adds	r3, #92	; 0x5c
 8004928:	801a      	strh	r2, [r3, #0]
		if(ignore_check_cnt_>= 10000) ignore_check_cnt_= 10000;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004930:	335c      	adds	r3, #92	; 0x5c
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	f242 720f 	movw	r2, #9999	; 0x270f
 8004938:	4293      	cmp	r3, r2
 800493a:	d906      	bls.n	800494a <_ZN9LineTrace7runningEv+0x2b6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004942:	335c      	adds	r3, #92	; 0x5c
 8004944:	f242 7210 	movw	r2, #10000	; 0x2710
 8004948:	801a      	strh	r2, [r3, #0]

		if(ignore_check_cnt_ <= 200) led_.fullColor('Y');
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004950:	335c      	adds	r3, #92	; 0x5c
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	2bc8      	cmp	r3, #200	; 0xc8
 8004956:	d806      	bhi.n	8004966 <_ZN9LineTrace7runningEv+0x2d2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	330c      	adds	r3, #12
 800495c:	2159      	movs	r1, #89	; 0x59
 800495e:	4618      	mov	r0, r3
 8004960:	f7fd fbf8 	bl	8002154 <_ZN3LED9fullColorEc>
 8004964:	e6a3      	b.n	80046ae <_ZN9LineTrace7runningEv+0x1a>
		else led_.fullColor('B');
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	330c      	adds	r3, #12
 800496a:	2142      	movs	r1, #66	; 0x42
 800496c:	4618      	mov	r0, r3
 800496e:	f7fd fbf1 	bl	8002154 <_ZN3LED9fullColorEc>
	while(goal_flag == false){
 8004972:	e69c      	b.n	80046ae <_ZN9LineTrace7runningEv+0x1a>
	}

	stop();
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f807 	bl	8004988 <_ZN9LineTrace4stopEv>
}
 800497a:	bf00      	nop
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	00000000 	.word	0x00000000

08004988 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af02      	add	r7, sp, #8
 800498e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4618      	mov	r0, r3
 800499e:	f001 fd8f 	bl	80064c0 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	330c      	adds	r3, #12
 80049a6:	2201      	movs	r2, #1
 80049a8:	f04f 31ff 	mov.w	r1, #4294967295
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fd fc8d 	bl	80022cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80049b8:	3364      	adds	r3, #100	; 0x64
 80049ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d11e      	bne.n	8004a00 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69d8      	ldr	r0, [r3, #28]
 80049c6:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <_ZN9LineTrace4stopEv+0xd8>)
 80049c8:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <_ZN9LineTrace4stopEv+0xdc>)
 80049ca:	4927      	ldr	r1, [pc, #156]	; (8004a68 <_ZN9LineTrace4stopEv+0xe0>)
 80049cc:	f000 fc67 	bl	800529e <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80049d6:	3368      	adds	r3, #104	; 0x68
 80049d8:	2200      	movs	r2, #0
 80049da:	9200      	str	r2, [sp, #0]
 80049dc:	2264      	movs	r2, #100	; 0x64
 80049de:	4923      	ldr	r1, [pc, #140]	; (8004a6c <_ZN9LineTrace4stopEv+0xe4>)
 80049e0:	4821      	ldr	r0, [pc, #132]	; (8004a68 <_ZN9LineTrace4stopEv+0xe0>)
 80049e2:	f7fc ff3b 	bl	800185c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80049ec:	3388      	adds	r3, #136	; 0x88
 80049ee:	2200      	movs	r2, #0
 80049f0:	9200      	str	r2, [sp, #0]
 80049f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80049f6:	491e      	ldr	r1, [pc, #120]	; (8004a70 <_ZN9LineTrace4stopEv+0xe8>)
 80049f8:	481b      	ldr	r0, [pc, #108]	; (8004a68 <_ZN9LineTrace4stopEv+0xe0>)
 80049fa:	f7fc ff2f 	bl	800185c <sd_write_array_float>
 80049fe:	e01d      	b.n	8004a3c <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69d8      	ldr	r0, [r3, #28]
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <_ZN9LineTrace4stopEv+0xec>)
 8004a06:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <_ZN9LineTrace4stopEv+0xf0>)
 8004a08:	4917      	ldr	r1, [pc, #92]	; (8004a68 <_ZN9LineTrace4stopEv+0xe0>)
 8004a0a:	f000 fc6b 	bl	80052e4 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004a14:	33f8      	adds	r3, #248	; 0xf8
 8004a16:	2200      	movs	r2, #0
 8004a18:	9200      	str	r2, [sp, #0]
 8004a1a:	2264      	movs	r2, #100	; 0x64
 8004a1c:	4917      	ldr	r1, [pc, #92]	; (8004a7c <_ZN9LineTrace4stopEv+0xf4>)
 8004a1e:	4812      	ldr	r0, [pc, #72]	; (8004a68 <_ZN9LineTrace4stopEv+0xe0>)
 8004a20:	f7fc ff1c 	bl	800185c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 8004a2a:	3358      	adds	r3, #88	; 0x58
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	9200      	str	r2, [sp, #0]
 8004a30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a34:	4912      	ldr	r1, [pc, #72]	; (8004a80 <_ZN9LineTrace4stopEv+0xf8>)
 8004a36:	480c      	ldr	r0, [pc, #48]	; (8004a68 <_ZN9LineTrace4stopEv+0xe0>)
 8004a38:	f7fc ff10 	bl	800185c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	2200      	movs	r2, #0
 8004a42:	f04f 31ff 	mov.w	r1, #4294967295
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fd fc40 	bl	80022cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fd23 	bl	800549c <_ZN6Logger8resetIdxEv>
	//logger_->resetLogsDis2();
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	0801a4c8 	.word	0x0801a4c8
 8004a64:	0801a4d4 	.word	0x0801a4d4
 8004a68:	0801a4e4 	.word	0x0801a4e4
 8004a6c:	0801a4f0 	.word	0x0801a4f0
 8004a70:	0801a500 	.word	0x0801a500
 8004a74:	0801a50c 	.word	0x0801a50c
 8004a78:	0801a518 	.word	0x0801a518
 8004a7c:	0801a528 	.word	0x0801a528
 8004a80:	0801a538 	.word	0x0801a538

08004a84 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004a84:	b590      	push	{r4, r7, lr}
 8004a86:	b08b      	sub	sp, #44	; 0x2c
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fbbe 	bl	8005212 <_ZN6Logger23getDistanceArrayPointerEv>
 8004a96:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fbc6 	bl	800522e <_ZN6Logger20getThetaArrayPointerEv>
 8004aa2:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	837b      	strh	r3, [r7, #26]
 8004aa8:	8b7b      	ldrh	r3, [r7, #26]
 8004aaa:	f241 726f 	movw	r2, #5999	; 0x176f
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d84b      	bhi.n	8004b4a <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8004ab2:	8b7b      	ldrh	r3, [r7, #26]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4413      	add	r3, r2
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004abe:	8b7b      	ldrh	r3, [r7, #26]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004aca:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ace:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad6:	d101      	bne.n	8004adc <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004ad8:	4b75      	ldr	r3, [pc, #468]	; (8004cb0 <_ZN9LineTrace20createVelocityTabeleEv+0x22c>)
 8004ada:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004adc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ae0:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ae4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004ae8:	eeb0 0a66 	vmov.f32	s0, s13
 8004aec:	f7fd fef4 	bl	80028d8 <_ZSt3absf>
 8004af0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004af8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004cb4 <_ZN9LineTrace20createVelocityTabeleEv+0x230>
 8004afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b04:	db01      	blt.n	8004b0a <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8004b06:	4b6c      	ldr	r3, [pc, #432]	; (8004cb8 <_ZN9LineTrace20createVelocityTabeleEv+0x234>)
 8004b08:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004b0a:	8b7c      	ldrh	r4, [r7, #26]
 8004b0c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7fe fbf9 	bl	8003308 <_ZN9LineTrace15radius2VelocityEf>
 8004b16:	eef0 7a40 	vmov.f32	s15, s0
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004b20:	3308      	adds	r3, #8
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004b2a:	8b7b      	ldrh	r3, [r7, #26]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	441a      	add	r2, r3
 8004b32:	8b7b      	ldrh	r3, [r7, #26]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	3336      	adds	r3, #54	; 0x36
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3304      	adds	r3, #4
 8004b40:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004b42:	8b7b      	ldrh	r3, [r7, #26]
 8004b44:	3301      	adds	r3, #1
 8004b46:	837b      	strh	r3, [r7, #26]
 8004b48:	e7ae      	b.n	8004aa8 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004b50:	3364      	adds	r3, #100	; 0x64
 8004b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d120      	bne.n	8004b9c <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004b66:	3320      	adds	r3, #32
 8004b68:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004b70:	333c      	adds	r3, #60	; 0x3c
 8004b72:	edd3 7a00 	vldr	s15, [r3]
 8004b76:	6939      	ldr	r1, [r7, #16]
 8004b78:	eeb0 0a67 	vmov.f32	s0, s15
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fe fd1b 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004b88:	3338      	adds	r3, #56	; 0x38
 8004b8a:	edd3 7a00 	vldr	s15, [r3]
 8004b8e:	6939      	ldr	r1, [r7, #16]
 8004b90:	eeb0 0a67 	vmov.f32	s0, s15
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7fe fdb3 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004b9a:	e079      	b.n	8004c90 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004ba2:	3364      	adds	r3, #100	; 0x64
 8004ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d120      	bne.n	8004bee <_ZN9LineTrace20createVelocityTabeleEv+0x16a>
		velocity_table_[0] = min_velocity2_;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004bb8:	3320      	adds	r3, #32
 8004bba:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004bc2:	3344      	adds	r3, #68	; 0x44
 8004bc4:	edd3 7a00 	vldr	s15, [r3]
 8004bc8:	6939      	ldr	r1, [r7, #16]
 8004bca:	eeb0 0a67 	vmov.f32	s0, s15
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fe fcf2 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004bda:	3340      	adds	r3, #64	; 0x40
 8004bdc:	edd3 7a00 	vldr	s15, [r3]
 8004be0:	6939      	ldr	r1, [r7, #16]
 8004be2:	eeb0 0a67 	vmov.f32	s0, s15
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fe fd8a 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004bec:	e050      	b.n	8004c90 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004bf4:	3364      	adds	r3, #100	; 0x64
 8004bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d120      	bne.n	8004c40 <_ZN9LineTrace20createVelocityTabeleEv+0x1bc>
		velocity_table_[0] = min_velocity3_;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004c0a:	3320      	adds	r3, #32
 8004c0c:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec3_, p_distance);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004c14:	334c      	adds	r3, #76	; 0x4c
 8004c16:	edd3 7a00 	vldr	s15, [r3]
 8004c1a:	6939      	ldr	r1, [r7, #16]
 8004c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fe fcc9 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc3_, p_distance);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004c2c:	3348      	adds	r3, #72	; 0x48
 8004c2e:	edd3 7a00 	vldr	s15, [r3]
 8004c32:	6939      	ldr	r1, [r7, #16]
 8004c34:	eeb0 0a67 	vmov.f32	s0, s15
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fe fd61 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004c3e:	e027      	b.n	8004c90 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004c46:	3364      	adds	r3, #100	; 0x64
 8004c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d11f      	bne.n	8004c90 <_ZN9LineTrace20createVelocityTabeleEv+0x20c>
		velocity_table_[0] = min_velocity4_;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004c5c:	3320      	adds	r3, #32
 8004c5e:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec4_, p_distance);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004c66:	3354      	adds	r3, #84	; 0x54
 8004c68:	edd3 7a00 	vldr	s15, [r3]
 8004c6c:	6939      	ldr	r1, [r7, #16]
 8004c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fe fca0 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc4_, p_distance);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004c7e:	3350      	adds	r3, #80	; 0x50
 8004c80:	edd3 7a00 	vldr	s15, [r3]
 8004c84:	6939      	ldr	r1, [r7, #16]
 8004c86:	eeb0 0a67 	vmov.f32	s0, s15
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fe fd38 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004c96:	3320      	adds	r3, #32
 8004c98:	2200      	movs	r2, #0
 8004c9a:	9200      	str	r2, [sp, #0]
 8004c9c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ca0:	4906      	ldr	r1, [pc, #24]	; (8004cbc <_ZN9LineTrace20createVelocityTabeleEv+0x238>)
 8004ca2:	4807      	ldr	r0, [pc, #28]	; (8004cc0 <_ZN9LineTrace20createVelocityTabeleEv+0x23c>)
 8004ca4:	f7fc fdda 	bl	800185c <sd_write_array_float>

}
 8004ca8:	bf00      	nop
 8004caa:	3724      	adds	r7, #36	; 0x24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd90      	pop	{r4, r7, pc}
 8004cb0:	3727c5ac 	.word	0x3727c5ac
 8004cb4:	459c4000 	.word	0x459c4000
 8004cb8:	459c4000 	.word	0x459c4000
 8004cbc:	0801a548 	.word	0x0801a548
 8004cc0:	0801a4e4 	.word	0x0801a4e4

08004cc4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b08b      	sub	sp, #44	; 0x2c
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69d8      	ldr	r0, [r3, #28]
 8004cd0:	4b94      	ldr	r3, [pc, #592]	; (8004f24 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x260>)
 8004cd2:	4a95      	ldr	r2, [pc, #596]	; (8004f28 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x264>)
 8004cd4:	4995      	ldr	r1, [pc, #596]	; (8004f2c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004cd6:	f000 fb29 	bl	800532c <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004ce0:	3368      	adds	r3, #104	; 0x68
 8004ce2:	2264      	movs	r2, #100	; 0x64
 8004ce4:	4992      	ldr	r1, [pc, #584]	; (8004f30 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x26c>)
 8004ce6:	4891      	ldr	r0, [pc, #580]	; (8004f2c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004ce8:	f7fc fe1e 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004cf2:	3388      	adds	r3, #136	; 0x88
 8004cf4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004cf8:	498e      	ldr	r1, [pc, #568]	; (8004f34 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x270>)
 8004cfa:	488c      	ldr	r0, [pc, #560]	; (8004f2c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004cfc:	f7fc fe14 	bl	8001928 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fa84 	bl	8005212 <_ZN6Logger23getDistanceArrayPointerEv>
 8004d0a:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fa8c 	bl	800522e <_ZN6Logger20getThetaArrayPointerEv>
 8004d16:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004d18:	2300      	movs	r3, #0
 8004d1a:	837b      	strh	r3, [r7, #26]
 8004d1c:	8b7b      	ldrh	r3, [r7, #26]
 8004d1e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d84b      	bhi.n	8004dbe <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 8004d26:	8b7b      	ldrh	r3, [r7, #26]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004d32:	8b7b      	ldrh	r3, [r7, #26]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004d3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4a:	d101      	bne.n	8004d50 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004d4c:	4b7a      	ldr	r3, [pc, #488]	; (8004f38 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x274>)
 8004d4e:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004d50:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d54:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d5c:	eeb0 0a66 	vmov.f32	s0, s13
 8004d60:	f7fd fdba 	bl	80028d8 <_ZSt3absf>
 8004d64:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004d68:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d6c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004f3c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x278>
 8004d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d78:	db01      	blt.n	8004d7e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004d7a:	4b71      	ldr	r3, [pc, #452]	; (8004f40 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x27c>)
 8004d7c:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004d7e:	8b7c      	ldrh	r4, [r7, #26]
 8004d80:	ed97 0a05 	vldr	s0, [r7, #20]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fe fabf 	bl	8003308 <_ZN9LineTrace15radius2VelocityEf>
 8004d8a:	eef0 7a40 	vmov.f32	s15, s0
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004d94:	3308      	adds	r3, #8
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004d9e:	8b7b      	ldrh	r3, [r7, #26]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	441a      	add	r2, r3
 8004da6:	8b7b      	ldrh	r3, [r7, #26]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	3336      	adds	r3, #54	; 0x36
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	3304      	adds	r3, #4
 8004db4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004db6:	8b7b      	ldrh	r3, [r7, #26]
 8004db8:	3301      	adds	r3, #1
 8004dba:	837b      	strh	r3, [r7, #26]
 8004dbc:	e7ae      	b.n	8004d1c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004dc4:	3364      	adds	r3, #100	; 0x64
 8004dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d120      	bne.n	8004e10 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004dda:	3320      	adds	r3, #32
 8004ddc:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004de4:	333c      	adds	r3, #60	; 0x3c
 8004de6:	edd3 7a00 	vldr	s15, [r3]
 8004dea:	6939      	ldr	r1, [r7, #16]
 8004dec:	eeb0 0a67 	vmov.f32	s0, s15
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fe fbe1 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004dfc:	3338      	adds	r3, #56	; 0x38
 8004dfe:	edd3 7a00 	vldr	s15, [r3]
 8004e02:	6939      	ldr	r1, [r7, #16]
 8004e04:	eeb0 0a67 	vmov.f32	s0, s15
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7fe fc79 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004e0e:	e079      	b.n	8004f04 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004e16:	3364      	adds	r3, #100	; 0x64
 8004e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d120      	bne.n	8004e62 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19e>
		velocity_table_[0] = min_velocity2_;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004e2c:	3320      	adds	r3, #32
 8004e2e:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004e36:	3344      	adds	r3, #68	; 0x44
 8004e38:	edd3 7a00 	vldr	s15, [r3]
 8004e3c:	6939      	ldr	r1, [r7, #16]
 8004e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fe fbb8 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004e4e:	3340      	adds	r3, #64	; 0x40
 8004e50:	edd3 7a00 	vldr	s15, [r3]
 8004e54:	6939      	ldr	r1, [r7, #16]
 8004e56:	eeb0 0a67 	vmov.f32	s0, s15
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fe fc50 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004e60:	e050      	b.n	8004f04 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == FOURTH_RUNNING){
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004e68:	3364      	adds	r3, #100	; 0x64
 8004e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d120      	bne.n	8004eb4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1f0>
		velocity_table_[0] = min_velocity3_;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004e7e:	3320      	adds	r3, #32
 8004e80:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec3_, p_distance);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004e88:	334c      	adds	r3, #76	; 0x4c
 8004e8a:	edd3 7a00 	vldr	s15, [r3]
 8004e8e:	6939      	ldr	r1, [r7, #16]
 8004e90:	eeb0 0a67 	vmov.f32	s0, s15
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fe fb8f 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc3_, p_distance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004ea0:	3348      	adds	r3, #72	; 0x48
 8004ea2:	edd3 7a00 	vldr	s15, [r3]
 8004ea6:	6939      	ldr	r1, [r7, #16]
 8004ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7fe fc27 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004eb2:	e027      	b.n	8004f04 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
	}
	else if(mode_selector_ == FIFTH_RUNNING){
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004eba:	3364      	adds	r3, #100	; 0x64
 8004ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d11f      	bne.n	8004f04 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x240>
		velocity_table_[0] = min_velocity4_;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004ed0:	3320      	adds	r3, #32
 8004ed2:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec4_, p_distance);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004eda:	3354      	adds	r3, #84	; 0x54
 8004edc:	edd3 7a00 	vldr	s15, [r3]
 8004ee0:	6939      	ldr	r1, [r7, #16]
 8004ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fe fb66 	bl	80035b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc4_, p_distance);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004ef2:	3350      	adds	r3, #80	; 0x50
 8004ef4:	edd3 7a00 	vldr	s15, [r3]
 8004ef8:	6939      	ldr	r1, [r7, #16]
 8004efa:	eeb0 0a67 	vmov.f32	s0, s15
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fe fbfe 	bl	8003700 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004f0a:	3320      	adds	r3, #32
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	9200      	str	r2, [sp, #0]
 8004f10:	f241 7270 	movw	r2, #6000	; 0x1770
 8004f14:	490b      	ldr	r1, [pc, #44]	; (8004f44 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x280>)
 8004f16:	4805      	ldr	r0, [pc, #20]	; (8004f2c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x268>)
 8004f18:	f7fc fca0 	bl	800185c <sd_write_array_float>

}
 8004f1c:	bf00      	nop
 8004f1e:	3724      	adds	r7, #36	; 0x24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd90      	pop	{r4, r7, pc}
 8004f24:	0801a4c8 	.word	0x0801a4c8
 8004f28:	0801a4d4 	.word	0x0801a4d4
 8004f2c:	0801a4e4 	.word	0x0801a4e4
 8004f30:	0801a4f0 	.word	0x0801a4f0
 8004f34:	0801a500 	.word	0x0801a500
 8004f38:	3727c5ac 	.word	0x3727c5ac
 8004f3c:	459c4000 	.word	0x459c4000
 8004f40:	459c4000 	.word	0x459c4000
 8004f44:	0801a548 	.word	0x0801a548

08004f48 <_ZN6LoggerC1Ev>:
#include "AQM0802.h"

uint16_t mon_idx1, mon_idx2;
float mon_data1, mon_data2, mon_data3;

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f56:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f64:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004f68:	2200      	movs	r2, #0
 8004f6a:	801a      	strh	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f72:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004f76:	2200      	movs	r2, #0
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f80:	f203 33a6 	addw	r3, r3, #934	; 0x3a6
 8004f84:	2200      	movs	r2, #0
 8004f86:	801a      	strh	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f8e:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8004f92:	2200      	movs	r2, #0
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004f9c:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	801a      	strh	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004fc0:	f7fc fd3e 	bl	8001a40 <sd_mount>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	bf0c      	ite	eq
 8004fca:	2301      	moveq	r3, #1
 8004fcc:	2300      	movne	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d016      	beq.n	8005002 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004fd4:	f7fc f864 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004fd8:	2100      	movs	r1, #0
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f7fc f870 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004fe0:	4815      	ldr	r0, [pc, #84]	; (8005038 <_ZN6Logger10sdCardInitEv+0x84>)
 8004fe2:	f7fc f897 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f7fc f869 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004fee:	4813      	ldr	r0, [pc, #76]	; (800503c <_ZN6Logger10sdCardInitEv+0x88>)
 8004ff0:	f7fc f890 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004ff4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ff8:	f006 fa7e 	bl	800b4f8 <HAL_Delay>

	  ret = true;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e015      	b.n	800502e <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8005002:	f7fc f84d 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8005006:	2100      	movs	r1, #0
 8005008:	2000      	movs	r0, #0
 800500a:	f7fc f859 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800500e:	480a      	ldr	r0, [pc, #40]	; (8005038 <_ZN6Logger10sdCardInitEv+0x84>)
 8005010:	f7fc f880 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8005014:	2101      	movs	r1, #1
 8005016:	2000      	movs	r0, #0
 8005018:	f7fc f852 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 800501c:	4808      	ldr	r0, [pc, #32]	; (8005040 <_ZN6Logger10sdCardInitEv+0x8c>)
 800501e:	f7fc f879 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8005022:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005026:	f006 fa67 	bl	800b4f8 <HAL_Delay>

	  ret = false;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800502e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	0801a558 	.word	0x0801a558
 800503c:	0801a564 	.word	0x0801a564
 8005040:	0801a56c 	.word	0x0801a56c

08005044 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005056:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d034      	beq.n	80050ca <_ZN6Logger8storeLogEf+0x86>
		store_data_float_[log_index_tim_] = data;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005066:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800507c:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800508c:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8005090:	801a      	strh	r2, [r3, #0]
		mon_idx1 = log_index_tim_;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005098:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 800509c:	881a      	ldrh	r2, [r3, #0]
 800509e:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <_ZN6Logger8storeLogEf+0x94>)
 80050a0:	801a      	strh	r2, [r3, #0]
		mon_data1 = data;
 80050a2:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <_ZN6Logger8storeLogEf+0x98>)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6013      	str	r3, [r2, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80050ae:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d906      	bls.n	80050ca <_ZN6Logger8storeLogEf+0x86>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80050c2:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80050c6:	2200      	movs	r2, #0
 80050c8:	801a      	strh	r2, [r3, #0]
	}
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	2000021e 	.word	0x2000021e
 80050dc:	20000224 	.word	0x20000224

080050e0 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80050f2:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d036      	beq.n	800516a <_ZN6Logger9storeLog2Ef+0x8a>
		store_data_float2_[log_index_tim2_] = data;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005102:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800511c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	3301      	adds	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800512c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005130:	801a      	strh	r2, [r3, #0]
		mon_idx2 = log_index_tim2_;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005138:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800513c:	881a      	ldrh	r2, [r3, #0]
 800513e:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <_ZN6Logger9storeLog2Ef+0x98>)
 8005140:	801a      	strh	r2, [r3, #0]
		mon_data2 = data;
 8005142:	4a0e      	ldr	r2, [pc, #56]	; (800517c <_ZN6Logger9storeLog2Ef+0x9c>)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	6013      	str	r3, [r2, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800514e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005158:	4293      	cmp	r3, r2
 800515a:	d906      	bls.n	800516a <_ZN6Logger9storeLog2Ef+0x8a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005162:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005166:	2200      	movs	r2, #0
 8005168:	801a      	strh	r2, [r3, #0]
	}
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000220 	.word	0x20000220
 800517c:	20000228 	.word	0x20000228

08005180 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	ed87 0a02 	vstr	s0, [r7, #8]
 800518c:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005196:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 80051a2:	3328      	adds	r3, #40	; 0x28
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80051b2:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 80051be:	3318      	adds	r3, #24
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80051ce:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80051de:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80051e2:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80051ea:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	f241 726f 	movw	r2, #5999	; 0x176f
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d906      	bls.n	8005206 <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80051fe:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005202:	2200      	movs	r2, #0
 8005204:	801a      	strh	r2, [r3, #0]
	//}
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <_ZN6Logger23getDistanceArrayPointerEv>:

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	//}
}
const float *Logger::getDistanceArrayPointer()
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8005220:	33a0      	adds	r3, #160	; 0xa0
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 800523c:	3360      	adds	r3, #96	; 0x60
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b086      	sub	sp, #24
 800524e:	af02      	add	r7, sp, #8
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	2300      	movs	r3, #0
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	68b8      	ldr	r0, [r7, #8]
 8005266:	f7fc faf9 	bl	800185c <sd_write_array_float>
}
 800526a:	bf00      	nop
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af02      	add	r7, sp, #8
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8005284:	3320      	adds	r3, #32
 8005286:	2200      	movs	r2, #0
 8005288:	9200      	str	r2, [sp, #0]
 800528a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	68b8      	ldr	r0, [r7, #8]
 8005292:	f7fc fae3 	bl	800185c <sd_write_array_float>
}
 8005296:	bf00      	nop
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b086      	sub	sp, #24
 80052a2:	af02      	add	r7, sp, #8
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80052b2:	33a0      	adds	r3, #160	; 0xa0
 80052b4:	2200      	movs	r2, #0
 80052b6:	9200      	str	r2, [sp, #0]
 80052b8:	f241 7270 	movw	r2, #6000	; 0x1770
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	68b8      	ldr	r0, [r7, #8]
 80052c0:	f7fc facc 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 80052ca:	3360      	adds	r3, #96	; 0x60
 80052cc:	2200      	movs	r2, #0
 80052ce:	9200      	str	r2, [sp, #0]
 80052d0:	f241 7270 	movw	r2, #6000	; 0x1770
 80052d4:	6839      	ldr	r1, [r7, #0]
 80052d6:	68b8      	ldr	r0, [r7, #8]
 80052d8:	f7fc fac0 	bl	800185c <sd_write_array_float>
}
 80052dc:	bf00      	nop
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 80052f8:	3320      	adds	r3, #32
 80052fa:	2200      	movs	r2, #0
 80052fc:	9200      	str	r2, [sp, #0]
 80052fe:	f241 7270 	movw	r2, #6000	; 0x1770
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	68b8      	ldr	r0, [r7, #8]
 8005306:	f7fc faa9 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8005310:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005314:	2200      	movs	r2, #0
 8005316:	9200      	str	r2, [sp, #0]
 8005318:	f241 7270 	movw	r2, #6000	; 0x1770
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	68b8      	ldr	r0, [r7, #8]
 8005320:	f7fc fa9c 	bl	800185c <sd_write_array_float>
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8005340:	33a0      	adds	r3, #160	; 0xa0
 8005342:	f241 7270 	movw	r2, #6000	; 0x1770
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	68b8      	ldr	r0, [r7, #8]
 800534a:	f7fc faed 	bl	8001928 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8005354:	3360      	adds	r3, #96	; 0x60
 8005356:	f241 7270 	movw	r2, #6000	; 0x1770
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	68b8      	ldr	r0, [r7, #8]
 800535e:	f7fc fae3 	bl	8001928 <sd_read_array_float>
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <_ZN6Logger13resetLogsDis2Ev>:

	log_index_tim_ = 0;
}

void Logger::resetLogsDis2()
{
 800536a:	b480      	push	{r7}
 800536c:	b08b      	sub	sp, #44	; 0x2c
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8005378:	3320      	adds	r3, #32
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8005386:	3340      	adds	r3, #64	; 0x40
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	429a      	cmp	r2, r3
 8005390:	d009      	beq.n	80053a6 <_ZN6Logger13resetLogsDis2Ev+0x3c>
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	617b      	str	r3, [r7, #20]
		log = 0;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	3304      	adds	r3, #4
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
 80053a4:	e7f1      	b.n	800538a <_ZN6Logger13resetLogsDis2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 80053ac:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80053bc:	3340      	adds	r3, #64	; 0x40
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	6a3a      	ldr	r2, [r7, #32]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d009      	beq.n	80053dc <_ZN6Logger13resetLogsDis2Ev+0x72>
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	60bb      	str	r3, [r7, #8]
		log = 0;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	3304      	adds	r3, #4
 80053d8:	623b      	str	r3, [r7, #32]
 80053da:	e7f1      	b.n	80053c0 <_ZN6Logger13resetLogsDis2Ev+0x56>
	}

	log_index_tim2_ = 0;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80053e2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80053e6:	2200      	movs	r2, #0
 80053e8:	801a      	strh	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	372c      	adds	r7, #44	; 0x2c
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <_ZN6Logger13resetLogsTim1Ev>:

void Logger::resetLogsTim1()
{
 80053f6:	b480      	push	{r7}
 80053f8:	b087      	sub	sp, #28
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800540c:	3320      	adds	r3, #32
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	429a      	cmp	r2, r3
 8005416:	d009      	beq.n	800542c <_ZN6Logger13resetLogsTim1Ev+0x36>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	60bb      	str	r3, [r7, #8]
		log = 0;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3304      	adds	r3, #4
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	e7f1      	b.n	8005410 <_ZN6Logger13resetLogsTim1Ev+0x1a>
	}

	log_index_tim_ = 0;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005432:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8005436:	2200      	movs	r2, #0
 8005438:	801a      	strh	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <_ZN6Logger13resetLogsTim2Ev>:

void Logger::resetLogsTim2()
{
 8005446:	b480      	push	{r7}
 8005448:	b087      	sub	sp, #28
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float2_){
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8005454:	3320      	adds	r3, #32
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8005462:	3320      	adds	r3, #32
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	429a      	cmp	r2, r3
 800546c:	d009      	beq.n	8005482 <_ZN6Logger13resetLogsTim2Ev+0x3c>
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	60bb      	str	r3, [r7, #8]
		log = 0;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	3304      	adds	r3, #4
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e7f1      	b.n	8005466 <_ZN6Logger13resetLogsTim2Ev+0x20>
	}

	log_index_tim2_ = 0;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005488:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800548c:	2200      	movs	r2, #0
 800548e:	801a      	strh	r2, [r3, #0]
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80054aa:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80054ae:	2200      	movs	r2, #0
 80054b0:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80054b8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80054bc:	2200      	movs	r2, #0
 80054be:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80054c6:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80054ca:	2200      	movs	r2, #0
 80054cc:	801a      	strh	r2, [r3, #0]
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <_ZN6Logger5startEv>:

void Logger::start()
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80054e8:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80054ec:	2200      	movs	r2, #0
 80054ee:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80054f6:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80054fa:	2200      	movs	r2, #0
 80054fc:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005504:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8005508:	2201      	movs	r2, #1
 800550a:	701a      	strb	r2, [r3, #0]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005526:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	805a      	strh	r2, [r3, #2]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <_ZN5Motor4initEv>:

void Motor::init()
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005564:	2108      	movs	r1, #8
 8005566:	4805      	ldr	r0, [pc, #20]	; (800557c <_ZN5Motor4initEv+0x20>)
 8005568:	f00b f98e 	bl	8010888 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800556c:	210c      	movs	r1, #12
 800556e:	4803      	ldr	r0, [pc, #12]	; (800557c <_ZN5Motor4initEv+0x20>)
 8005570:	f00b f98a 	bl	8010888 <HAL_TIM_PWM_Start>

}
 8005574:	bf00      	nop
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20047774 	.word	0x20047774

08005580 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800558e:	2b00      	cmp	r3, #0
 8005590:	da0d      	bge.n	80055ae <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8005592:	2200      	movs	r2, #0
 8005594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005598:	481f      	ldr	r0, [pc, #124]	; (8005618 <_ZN5Motor9motorCtrlEv+0x98>)
 800559a:	f007 fa43 	bl	800ca24 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	425b      	negs	r3, r3
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	81fb      	strh	r3, [r7, #14]
 80055ac:	e00a      	b.n	80055c4 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80055ae:	2201      	movs	r2, #1
 80055b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055b4:	4818      	ldr	r0, [pc, #96]	; (8005618 <_ZN5Motor9motorCtrlEv+0x98>)
 80055b6:	f007 fa35 	bl	800ca24 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	da0d      	bge.n	80055ea <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80055ce:	2201      	movs	r2, #1
 80055d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055d4:	4810      	ldr	r0, [pc, #64]	; (8005618 <_ZN5Motor9motorCtrlEv+0x98>)
 80055d6:	f007 fa25 	bl	800ca24 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	425b      	negs	r3, r3
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	81bb      	strh	r3, [r7, #12]
 80055e8:	e00a      	b.n	8005600 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80055ea:	2200      	movs	r2, #0
 80055ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055f0:	4809      	ldr	r0, [pc, #36]	; (8005618 <_ZN5Motor9motorCtrlEv+0x98>)
 80055f2:	f007 fa17 	bl	800ca24 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8005600:	89fa      	ldrh	r2, [r7, #14]
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <_ZN5Motor9motorCtrlEv+0x9c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8005608:	89ba      	ldrh	r2, [r7, #12]
 800560a:	4b04      	ldr	r3, [pc, #16]	; (800561c <_ZN5Motor9motorCtrlEv+0x9c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40020c00 	.word	0x40020c00
 800561c:	20047774 	.word	0x20047774

08005620 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6178      	str	r0, [r7, #20]
 8005628:	ed87 0b02 	vstr	d0, [r7, #8]
 800562c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	4b30      	ldr	r3, [pc, #192]	; (80056f8 <_ZN5Motor8setRatioEdd+0xd8>)
 8005636:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800563a:	f7fb fa85 	bl	8000b48 <__aeabi_dcmpgt>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <_ZN5Motor8setRatioEdd+0x30>
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	4c2b      	ldr	r4, [pc, #172]	; (80056f8 <_ZN5Motor8setRatioEdd+0xd8>)
 800564a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800564e:	e00e      	b.n	800566e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	4b29      	ldr	r3, [pc, #164]	; (80056fc <_ZN5Motor8setRatioEdd+0xdc>)
 8005656:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800565a:	f7fb fa57 	bl	8000b0c <__aeabi_dcmplt>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <_ZN5Motor8setRatioEdd+0x4e>
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	4c24      	ldr	r4, [pc, #144]	; (80056fc <_ZN5Motor8setRatioEdd+0xdc>)
 800566a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	4b21      	ldr	r3, [pc, #132]	; (80056f8 <_ZN5Motor8setRatioEdd+0xd8>)
 8005674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005678:	f7fb fa66 	bl	8000b48 <__aeabi_dcmpgt>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <_ZN5Motor8setRatioEdd+0x6e>
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	4c1c      	ldr	r4, [pc, #112]	; (80056f8 <_ZN5Motor8setRatioEdd+0xd8>)
 8005688:	e9c7 3400 	strd	r3, r4, [r7]
 800568c:	e00e      	b.n	80056ac <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <_ZN5Motor8setRatioEdd+0xdc>)
 8005694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005698:	f7fb fa38 	bl	8000b0c <__aeabi_dcmplt>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <_ZN5Motor8setRatioEdd+0x8c>
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	4c15      	ldr	r4, [pc, #84]	; (80056fc <_ZN5Motor8setRatioEdd+0xdc>)
 80056a8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	4b13      	ldr	r3, [pc, #76]	; (8005700 <_ZN5Motor8setRatioEdd+0xe0>)
 80056b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056b6:	f7fa ffb7 	bl	8000628 <__aeabi_dmul>
 80056ba:	4603      	mov	r3, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	4618      	mov	r0, r3
 80056c0:	4621      	mov	r1, r4
 80056c2:	f7fb fa61 	bl	8000b88 <__aeabi_d2iz>
 80056c6:	4603      	mov	r3, r0
 80056c8:	b21a      	sxth	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <_ZN5Motor8setRatioEdd+0xe0>)
 80056d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d8:	f7fa ffa6 	bl	8000628 <__aeabi_dmul>
 80056dc:	4603      	mov	r3, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	4618      	mov	r0, r3
 80056e2:	4621      	mov	r1, r4
 80056e4:	f7fb fa50 	bl	8000b88 <__aeabi_d2iz>
 80056e8:	4603      	mov	r3, r0
 80056ea:	b21a      	sxth	r2, r3
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	805a      	strh	r2, [r3, #2]

}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd90      	pop	{r4, r7, pc}
 80056f8:	3ff00000 	.word	0x3ff00000
 80056fc:	bff00000 	.word	0xbff00000
 8005700:	409c2000 	.word	0x409c2000

08005704 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8005704:	b490      	push	{r4, r7}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	f04f 0400 	mov.w	r4, #0
 800571c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	f04f 0400 	mov.w	r4, #0
 800572a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	f04f 0400 	mov.w	r4, #0
 8005738:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	f04f 0400 	mov.w	r4, #0
 8005746:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	f04f 0400 	mov.w	r4, #0
 8005754:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	609a      	str	r2, [r3, #8]
}
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bc90      	pop	{r4, r7}
 8005774:	4770      	bx	lr
	...

08005778 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4618      	mov	r0, r3
 8005786:	f7fc fb23 	bl	8001dd0 <_ZN3IMU8getOmegaEv>
 800578a:	ee10 3a10 	vmov	r3, s0
 800578e:	4618      	mov	r0, r3
 8005790:	f7fa fef2 	bl	8000578 <__aeabi_f2d>
 8005794:	4603      	mov	r3, r0
 8005796:	460c      	mov	r4, r1
 8005798:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 800579c:	a310      	add	r3, pc, #64	; (adr r3, 80057e0 <_ZN8Odometry12calcPotitionEv+0x68>)
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057a6:	f7fa ff3f 	bl	8000628 <__aeabi_dmul>
 80057aa:	4603      	mov	r3, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80057c0:	461a      	mov	r2, r3
 80057c2:	4623      	mov	r3, r4
 80057c4:	f7fa fd7a 	bl	80002bc <__adddf3>
 80057c8:	4603      	mov	r3, r0
 80057ca:	460c      	mov	r4, r1
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd90      	pop	{r4, r7, pc}
 80057da:	bf00      	nop
 80057dc:	f3af 8000 	nop.w
 80057e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80057e4:	3f50624d 	.word	0x3f50624d

080057e8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	calcPotition();
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff ffc1 	bl	8005778 <_ZN8Odometry12calcPotitionEv>
}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80057fe:	b490      	push	{r4, r7}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
	return theta_;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800580c:	ec44 3b17 	vmov	d7, r3, r4
}
 8005810:	eeb0 0a47 	vmov.f32	s0, s14
 8005814:	eef0 0a67 	vmov.f32	s1, s15
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bc90      	pop	{r4, r7}
 800581e:	4770      	bx	lr

08005820 <_ZN8Odometry13getDeltaThetaEv>:

double Odometry::getDeltaTheta()
{
 8005820:	b490      	push	{r4, r7}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	return delta_theta_;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800582e:	ec44 3b17 	vmov	d7, r3, r4
}
 8005832:	eeb0 0a47 	vmov.f32	s0, s14
 8005836:	eef0 0a67 	vmov.f32	s1, s15
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bc90      	pop	{r4, r7}
 8005840:	4770      	bx	lr

08005842 <_ZN8Odometry13clearPotitionEv>:

void Odometry::clearPotition()
{
 8005842:	b490      	push	{r4, r7}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	f04f 0400 	mov.w	r4, #0
 8005854:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	f04f 0400 	mov.w	r4, #0
 8005862:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bc90      	pop	{r4, r7}
 800587c:	4770      	bx	lr
	...

08005880 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005880:	b490      	push	{r4, r7}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	f04f 0400 	mov.w	r4, #0
 8005898:	e9c2 3402 	strd	r3, r4, [r2, #8]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	f04f 0400 	mov.w	r4, #0
 80058a6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	f04f 0400 	mov.w	r4, #0
 80058b4:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80058be:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80058c2:	2200      	movs	r2, #0
 80058c4:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80058c6:	4a29      	ldr	r2, [pc, #164]	; (800596c <_ZN13PathFollowingC1Ev+0xec>)
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	f04f 0400 	mov.w	r4, #0
 80058d0:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80058d4:	4a25      	ldr	r2, [pc, #148]	; (800596c <_ZN13PathFollowingC1Ev+0xec>)
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	f04f 0400 	mov.w	r4, #0
 80058de:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80058e2:	4a22      	ldr	r2, [pc, #136]	; (800596c <_ZN13PathFollowingC1Ev+0xec>)
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	f04f 0400 	mov.w	r4, #0
 80058ec:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <_ZN13PathFollowingC1Ev+0xf0>)
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	f04f 0400 	mov.w	r4, #0
 80058fa:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80058fe:	4a1c      	ldr	r2, [pc, #112]	; (8005970 <_ZN13PathFollowingC1Ev+0xf0>)
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	f04f 0400 	mov.w	r4, #0
 8005908:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800590c:	4a18      	ldr	r2, [pc, #96]	; (8005970 <_ZN13PathFollowingC1Ev+0xf0>)
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	f04f 0400 	mov.w	r4, #0
 8005916:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800591a:	4a15      	ldr	r2, [pc, #84]	; (8005970 <_ZN13PathFollowingC1Ev+0xf0>)
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	f04f 0400 	mov.w	r4, #0
 8005924:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005928:	4a11      	ldr	r2, [pc, #68]	; (8005970 <_ZN13PathFollowingC1Ev+0xf0>)
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	f04f 0400 	mov.w	r4, #0
 8005932:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8005936:	4a0e      	ldr	r2, [pc, #56]	; (8005970 <_ZN13PathFollowingC1Ev+0xf0>)
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	f04f 0400 	mov.w	r4, #0
 8005940:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005944:	4a0b      	ldr	r2, [pc, #44]	; (8005974 <_ZN13PathFollowingC1Ev+0xf4>)
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	f04f 0400 	mov.w	r4, #0
 800594e:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8005952:	4a08      	ldr	r2, [pc, #32]	; (8005974 <_ZN13PathFollowingC1Ev+0xf4>)
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	f04f 0400 	mov.w	r4, #0
 800595c:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bc90      	pop	{r4, r7}
 800596a:	4770      	bx	lr
 800596c:	20047c78 	.word	0x20047c78
 8005970:	20047c08 	.word	0x20047c08
 8005974:	20047c68 	.word	0x20047c68

08005978 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005980:	f001 fd62 	bl	8007448 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005984:	f107 0318 	add.w	r3, r7, #24
 8005988:	2201      	movs	r2, #1
 800598a:	4915      	ldr	r1, [pc, #84]	; (80059e0 <_ZN13PathFollowing4initEv+0x68>)
 800598c:	4815      	ldr	r0, [pc, #84]	; (80059e4 <_ZN13PathFollowing4initEv+0x6c>)
 800598e:	f7fc f811 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005992:	f107 0310 	add.w	r3, r7, #16
 8005996:	2201      	movs	r2, #1
 8005998:	4913      	ldr	r1, [pc, #76]	; (80059e8 <_ZN13PathFollowing4initEv+0x70>)
 800599a:	4812      	ldr	r0, [pc, #72]	; (80059e4 <_ZN13PathFollowing4initEv+0x6c>)
 800599c:	f7fc f80a 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80059a0:	f107 0308 	add.w	r3, r7, #8
 80059a4:	2201      	movs	r2, #1
 80059a6:	4911      	ldr	r1, [pc, #68]	; (80059ec <_ZN13PathFollowing4initEv+0x74>)
 80059a8:	480e      	ldr	r0, [pc, #56]	; (80059e4 <_ZN13PathFollowing4initEv+0x6c>)
 80059aa:	f7fc f803 	bl	80019b4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80059ae:	ed97 7b06 	vldr	d7, [r7, #24]
 80059b2:	ed97 6b04 	vldr	d6, [r7, #16]
 80059b6:	ed97 5b02 	vldr	d5, [r7, #8]
 80059ba:	eeb0 2a45 	vmov.f32	s4, s10
 80059be:	eef0 2a65 	vmov.f32	s5, s11
 80059c2:	eeb0 1a46 	vmov.f32	s2, s12
 80059c6:	eef0 1a66 	vmov.f32	s3, s13
 80059ca:	eeb0 0a47 	vmov.f32	s0, s14
 80059ce:	eef0 0a67 	vmov.f32	s1, s15
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f80c 	bl	80059f0 <_ZN13PathFollowing7setGainEddd>
}
 80059d8:	bf00      	nop
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	0801a574 	.word	0x0801a574
 80059e4:	0801a57c 	.word	0x0801a57c
 80059e8:	0801a584 	.word	0x0801a584
 80059ec:	0801a58c 	.word	0x0801a58c

080059f0 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80059f0:	b490      	push	{r4, r7}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	61f8      	str	r0, [r7, #28]
 80059f8:	ed87 0b04 	vstr	d0, [r7, #16]
 80059fc:	ed87 1b02 	vstr	d1, [r7, #8]
 8005a00:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005a04:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005a06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005a0a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005a0e:	4a07      	ldr	r2, [pc, #28]	; (8005a2c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005a10:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005a14:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005a18:	4a04      	ldr	r2, [pc, #16]	; (8005a2c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005a1a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005a1e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8005a22:	bf00      	nop
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc90      	pop	{r4, r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	20047c78 	.word	0x20047c78

08005a30 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005a38:	2088      	movs	r0, #136	; 0x88
 8005a3a:	f7fc fb0c 	bl	8002056 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8005a3e:	2080      	movs	r0, #128	; 0x80
 8005a40:	f7fc fb09 	bl	8002056 <INA260_init>
}
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	0000      	movs	r0, r0
	...

08005a50 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005a50:	b590      	push	{r4, r7, lr}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005a58:	2188      	movs	r1, #136	; 0x88
 8005a5a:	2002      	movs	r0, #2
 8005a5c:	f7fc fa98 	bl	8001f90 <INA260_read>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fa fd76 	bl	8000554 <__aeabi_i2d>
 8005a68:	a30c      	add	r3, pc, #48	; (adr r3, 8005a9c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fa fddb 	bl	8000628 <__aeabi_dmul>
 8005a72:	4603      	mov	r3, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	4618      	mov	r0, r3
 8005a78:	4621      	mov	r1, r4
 8005a7a:	f7fb f8cd 	bl	8000c18 <__aeabi_d2f>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	4a03      	ldr	r2, [pc, #12]	; (8005a98 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005a8a:	6013      	str	r3, [r2, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd90      	pop	{r4, r7, pc}
 8005a94:	f3af 8000 	nop.w
 8005a98:	2000022c 	.word	0x2000022c
 8005a9c:	47ae147b 	.word	0x47ae147b
 8005aa0:	3f547ae1 	.word	0x3f547ae1

08005aa4 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	ee07 3a90 	vmov	s15, r3

}
 8005ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005ad0:	2102      	movs	r1, #2
 8005ad2:	4822      	ldr	r0, [pc, #136]	; (8005b5c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005ad4:	f006 ff8e 	bl	800c9f4 <HAL_GPIO_ReadPin>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf0c      	ite	eq
 8005ade:	2301      	moveq	r3, #1
 8005ae0:	2300      	movne	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005ae8:	89fb      	ldrh	r3, [r7, #14]
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005af0:	2108      	movs	r1, #8
 8005af2:	481a      	ldr	r0, [pc, #104]	; (8005b5c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005af4:	f006 ff7e 	bl	800c9f4 <HAL_GPIO_ReadPin>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005b08:	89fb      	ldrh	r3, [r7, #14]
 8005b0a:	f043 0302 	orr.w	r3, r3, #2
 8005b0e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005b10:	2110      	movs	r1, #16
 8005b12:	4812      	ldr	r0, [pc, #72]	; (8005b5c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005b14:	f006 ff6e 	bl	800c9f4 <HAL_GPIO_ReadPin>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005b28:	89fb      	ldrh	r3, [r7, #14]
 8005b2a:	f043 0304 	orr.w	r3, r3, #4
 8005b2e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005b30:	2180      	movs	r1, #128	; 0x80
 8005b32:	480a      	ldr	r0, [pc, #40]	; (8005b5c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005b34:	f006 ff5e 	bl	800c9f4 <HAL_GPIO_ReadPin>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bf0c      	ite	eq
 8005b3e:	2301      	moveq	r3, #1
 8005b40:	2300      	movne	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005b48:	89fb      	ldrh	r3, [r7, #14]
 8005b4a:	f043 0308 	orr.w	r3, r3, #8
 8005b4e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005b50:	89fb      	ldrh	r3, [r7, #14]

}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40020c00 	.word	0x40020c00

08005b60 <_ZN10SideSensorC1Ev>:
uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;
bool mon_rise_fall_flag = true;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false),
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
		timer_R_(0), timer_L_(0), rise_fall_flag_R_(true), rise_fall_flag_L_(true)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	801a      	strh	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	709a      	strb	r2, [r3, #2]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	70da      	strb	r2, [r3, #3]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	809a      	strh	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	80da      	strh	r2, [r3, #6]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	721a      	strb	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	815a      	strh	r2, [r3, #10]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	819a      	strh	r2, [r3, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	739a      	strb	r2, [r3, #14]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	73da      	strb	r2, [r3, #15]
{

}
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
	...

08005bb4 <_ZN10SideSensor21updateStatusRightExtiEv>:

void SideSensor::updateStatusRightExti()
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET){ // 立ち上がり Black
 8005bbc:	2104      	movs	r1, #4
 8005bbe:	480e      	ldr	r0, [pc, #56]	; (8005bf8 <_ZN10SideSensor21updateStatusRightExtiEv+0x44>)
 8005bc0:	f006 ff18 	bl	800c9f4 <HAL_GPIO_ReadPin>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	bf0c      	ite	eq
 8005bca:	2301      	moveq	r3, #1
 8005bcc:	2300      	movne	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d006      	beq.n	8005be2 <_ZN10SideSensor21updateStatusRightExtiEv+0x2e>
		timer_R_ = 0;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = true;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	739a      	strb	r2, [r3, #14]
	}
	else{	//White
		timer_R_ = 0;
		rise_fall_flag_R_ = false;
	}
}
 8005be0:	e005      	b.n	8005bee <_ZN10SideSensor21updateStatusRightExtiEv+0x3a>
		timer_R_ = 0;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = false;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	739a      	strb	r2, [r3, #14]
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000

08005bfc <_ZN10SideSensor20updateStatusLeftExtiEv>:

void SideSensor::updateStatusLeftExti()
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET){ // 立ち上がり Black
 8005c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c08:	480d      	ldr	r0, [pc, #52]	; (8005c40 <_ZN10SideSensor20updateStatusLeftExtiEv+0x44>)
 8005c0a:	f006 fef3 	bl	800c9f4 <HAL_GPIO_ReadPin>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	bf0c      	ite	eq
 8005c14:	2301      	moveq	r3, #1
 8005c16:	2300      	movne	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d006      	beq.n	8005c2c <_ZN10SideSensor20updateStatusLeftExtiEv+0x30>
		timer_L_ = 0;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = true;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	73da      	strb	r2, [r3, #15]
	}
	else{	//White
		timer_L_ = 0;
		rise_fall_flag_L_ = false;
	}
}
 8005c2a:	e005      	b.n	8005c38 <_ZN10SideSensor20updateStatusLeftExtiEv+0x3c>
		timer_L_ = 0;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = false;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	73da      	strb	r2, [r3, #15]
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	40020c00 	.word	0x40020c00

08005c44 <_ZN10SideSensor12updateStatusEv>:

void SideSensor::updateStatus() // called timer flip
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
	timer_R_++;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	895b      	ldrh	r3, [r3, #10]
 8005c50:	3301      	adds	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	815a      	strh	r2, [r3, #10]
	timer_L_++;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	899b      	ldrh	r3, [r3, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	819a      	strh	r2, [r3, #12]
	if(timer_R_ >= 10000) timer_R_ = 10000;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	895b      	ldrh	r3, [r3, #10]
 8005c68:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d903      	bls.n	8005c78 <_ZN10SideSensor12updateStatusEv+0x34>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c76:	815a      	strh	r2, [r3, #10]
	if(timer_L_ >= 10000) timer_L_ = 10000;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	899b      	ldrh	r3, [r3, #12]
 8005c7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d903      	bls.n	8005c8c <_ZN10SideSensor12updateStatusEv+0x48>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c8a:	819a      	strh	r2, [r3, #12]

	if(ignore_flag_ == false){
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	7a1b      	ldrb	r3, [r3, #8]
 8005c90:	f083 0301 	eor.w	r3, r3, #1
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d019      	beq.n	8005cce <_ZN10SideSensor12updateStatusEv+0x8a>
		if(rise_fall_flag_R_ == true && timer_R_ >= 2){
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	7b9b      	ldrb	r3, [r3, #14]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d007      	beq.n	8005cb2 <_ZN10SideSensor12updateStatusEv+0x6e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	895b      	ldrh	r3, [r3, #10]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d903      	bls.n	8005cb2 <_ZN10SideSensor12updateStatusEv+0x6e>
			status_R_ = false;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	70da      	strb	r2, [r3, #3]
 8005cb0:	e00d      	b.n	8005cce <_ZN10SideSensor12updateStatusEv+0x8a>
		}
		else if(rise_fall_flag_R_ == false && timer_R_ >= 2){
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	7b9b      	ldrb	r3, [r3, #14]
 8005cb6:	f083 0301 	eor.w	r3, r3, #1
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <_ZN10SideSensor12updateStatusEv+0x8a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	895b      	ldrh	r3, [r3, #10]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d902      	bls.n	8005cce <_ZN10SideSensor12updateStatusEv+0x8a>
			status_R_ = true;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	70da      	strb	r2, [r3, #3]
		}
	}

	if(rise_fall_flag_L_ == true && timer_L_ >= 2){
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	7bdb      	ldrb	r3, [r3, #15]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <_ZN10SideSensor12updateStatusEv+0xa2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	899b      	ldrh	r3, [r3, #12]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d903      	bls.n	8005ce6 <_ZN10SideSensor12updateStatusEv+0xa2>
		status_L_ = false;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	709a      	strb	r2, [r3, #2]
 8005ce4:	e00d      	b.n	8005d02 <_ZN10SideSensor12updateStatusEv+0xbe>
	}
	else if(rise_fall_flag_L_ == false && timer_L_ >= 2){
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	7bdb      	ldrb	r3, [r3, #15]
 8005cea:	f083 0301 	eor.w	r3, r3, #1
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d006      	beq.n	8005d02 <_ZN10SideSensor12updateStatusEv+0xbe>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	899b      	ldrh	r3, [r3, #12]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d902      	bls.n	8005d02 <_ZN10SideSensor12updateStatusEv+0xbe>
		status_L_ = true;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	709a      	strb	r2, [r3, #2]
	}

	mon_status_R = status_R_;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	78da      	ldrb	r2, [r3, #3]
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <_ZN10SideSensor12updateStatusEv+0xdc>)
 8005d08:	701a      	strb	r2, [r3, #0]
	mon_status_L = status_L_;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	789a      	ldrb	r2, [r3, #2]
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <_ZN10SideSensor12updateStatusEv+0xe0>)
 8005d10:	701a      	strb	r2, [r3, #0]
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000231 	.word	0x20000231
 8005d24:	20000230 	.word	0x20000230

08005d28 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	789b      	ldrb	r3, [r3, #2]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <_ZN10SideSensor10getStatusREv>:

bool SideSensor::getStatusR()
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	return status_R_;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	78db      	ldrb	r3, [r3, #3]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <_ZN10SideSensor17resetWhiteLineCntEv>:
{
	return white_line_cnt_r_;
}

void SideSensor::resetWhiteLineCnt()
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	80da      	strh	r2, [r3, #6]
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	721a      	strb	r2, [r3, #8]
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	721a      	strb	r2, [r3, #8]
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	7a1b      	ldrb	r3, [r3, #8]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f010 f8c2 	bl	8015f64 <memset>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005de6:	811a      	strh	r2, [r3, #8]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dee:	815a      	strh	r2, [r3, #10]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005df6:	819a      	strh	r2, [r3, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dfe:	81da      	strh	r2, [r3, #14]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e06:	821a      	strh	r2, [r3, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e0e:	825a      	strh	r2, [r3, #18]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	829a      	strh	r2, [r3, #20]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	82da      	strh	r2, [r3, #22]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	831a      	strh	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	835a      	strh	r2, [r3, #26]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	839a      	strh	r2, [r3, #28]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	83da      	strh	r2, [r3, #30]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	841a      	strh	r2, [r3, #32]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e40:	845a      	strh	r2, [r3, #34]	; 0x22
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	849a      	strh	r2, [r3, #36]	; 0x24
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e4e:	84da      	strh	r2, [r3, #38]	; 0x26
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	851a      	strh	r2, [r3, #40]	; 0x28
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e6a:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e72:	861a      	strh	r2, [r3, #48]	; 0x30
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	865a      	strh	r2, [r3, #50]	; 0x32
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	869a      	strh	r2, [r3, #52]	; 0x34
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e86:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e8e:	871a      	strh	r2, [r3, #56]	; 0x38
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005edc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ee6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ef8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f12:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f6a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f84:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f96:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fb0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fca:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fd4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fe6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ff0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006002:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800600c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006016:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006038:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006042:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800604c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006056:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006068:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800609a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060a4:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060b6:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060c8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060ea:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060f4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800610e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2201      	movs	r2, #1
 8006116:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006120:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	609a      	str	r2, [r3, #8]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f04f 0200 	mov.w	r2, #0
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	611a      	str	r2, [r3, #16]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	615a      	str	r2, [r3, #20]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f04f 0200 	mov.w	r2, #0
 8006198:	619a      	str	r2, [r3, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	61da      	str	r2, [r3, #28]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	621a      	str	r2, [r3, #32]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	639a      	str	r2, [r3, #56]	; 0x38

}
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	0000      	movs	r0, r0
 80061ec:	0000      	movs	r0, r0
	...

080061f0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80061f0:	b590      	push	{r4, r7, lr}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fc:	f107 020c 	add.w	r2, r7, #12
 8006200:	f107 0110 	add.w	r1, r7, #16
 8006204:	4618      	mov	r0, r3
 8006206:	f7fb f9f1 	bl	80015ec <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800620a:	ed97 7a04 	vldr	s14, [r7, #16]
 800620e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006216:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800621a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800621e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8006222:	6978      	ldr	r0, [r7, #20]
 8006224:	f7fa f9a8 	bl	8000578 <__aeabi_f2d>
 8006228:	a30e      	add	r3, pc, #56	; (adr r3, 8006264 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7fa f9fb 	bl	8000628 <__aeabi_dmul>
 8006232:	4603      	mov	r3, r0
 8006234:	460c      	mov	r4, r1
 8006236:	4618      	mov	r0, r3
 8006238:	4621      	mov	r1, r4
 800623a:	f7fa fced 	bl	8000c18 <__aeabi_d2f>
 800623e:	4602      	mov	r2, r0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	4a05      	ldr	r2, [pc, #20]	; (8006260 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 800624a:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	ee07 3a90 	vmov	s15, r3
}
 8006254:	eeb0 0a67 	vmov.f32	s0, s15
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	bd90      	pop	{r4, r7, pc}
 800625e:	bf00      	nop
 8006260:	20000234 	.word	0x20000234
 8006264:	1ab1d998 	.word	0x1ab1d998
 8006268:	3f7830b5 	.word	0x3f7830b5
 800626c:	00000000 	.word	0x00000000

08006270 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8006270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	ed93 7a00 	vldr	s14, [r3]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	edd3 7a02 	vldr	s15, [r3, #8]
 8006284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006288:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8006296:	4b48      	ldr	r3, [pc, #288]	; (80063b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80062ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80062b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80062b8:	4b3f      	ldr	r3, [pc, #252]	; (80063b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fa f95b 	bl	8000578 <__aeabi_f2d>
 80062c2:	4604      	mov	r4, r0
 80062c4:	460d      	mov	r5, r1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80062cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80062d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d4:	ee17 0a90 	vmov	r0, s15
 80062d8:	f7fa f94e 	bl	8000578 <__aeabi_f2d>
 80062dc:	a334      	add	r3, pc, #208	; (adr r3, 80063b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7fa f9a1 	bl	8000628 <__aeabi_dmul>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	4620      	mov	r0, r4
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7f9 ffe5 	bl	80002bc <__adddf3>
 80062f2:	4603      	mov	r3, r0
 80062f4:	460c      	mov	r4, r1
 80062f6:	4618      	mov	r0, r3
 80062f8:	4621      	mov	r1, r4
 80062fa:	f7fa fc8d 	bl	8000c18 <__aeabi_d2f>
 80062fe:	4602      	mov	r2, r0
 8006300:	4b2d      	ldr	r3, [pc, #180]	; (80063b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8006302:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	ed93 7a05 	vldr	s14, [r3, #20]
 800630a:	4b2c      	ldr	r3, [pc, #176]	; (80063bc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800630c:	edd3 7a00 	vldr	s15, [r3]
 8006310:	edd7 6a05 	vldr	s13, [r7, #20]
 8006314:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631c:	ee17 0a90 	vmov	r0, s15
 8006320:	f7fa f92a 	bl	8000578 <__aeabi_f2d>
 8006324:	a322      	add	r3, pc, #136	; (adr r3, 80063b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f7fa faa7 	bl	800087c <__aeabi_ddiv>
 800632e:	4603      	mov	r3, r0
 8006330:	460c      	mov	r4, r1
 8006332:	4618      	mov	r0, r3
 8006334:	4621      	mov	r1, r4
 8006336:	f7fa fc6f 	bl	8000c18 <__aeabi_d2f>
 800633a:	4603      	mov	r3, r0
 800633c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 800633e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006342:	edd7 7a03 	vldr	s15, [r7, #12]
 8006346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800634a:	4b1b      	ldr	r3, [pc, #108]	; (80063b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800634c:	edd3 7a00 	vldr	s15, [r3]
 8006350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006354:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006362:	edd7 7a02 	vldr	s15, [r7, #8]
 8006366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800636a:	ee17 0a90 	vmov	r0, s15
 800636e:	f7fa f903 	bl	8000578 <__aeabi_f2d>
 8006372:	4605      	mov	r5, r0
 8006374:	460e      	mov	r6, r1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800637c:	ed97 7a02 	vldr	s14, [r7, #8]
 8006380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006384:	ee17 0a90 	vmov	r0, s15
 8006388:	f7fa f8f6 	bl	8000578 <__aeabi_f2d>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	ec43 2b11 	vmov	d1, r2, r3
 8006394:	ec46 5b10 	vmov	d0, r5, r6
 8006398:	4620      	mov	r0, r4
 800639a:	f7ff f941 	bl	8005620 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 800639e:	4a07      	ldr	r2, [pc, #28]	; (80063bc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	6013      	str	r3, [r2, #0]
}
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ac:	f3af 8000 	nop.w
 80063b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80063b4:	3f50624d 	.word	0x3f50624d
 80063b8:	2000023c 	.word	0x2000023c
 80063bc:	20000238 	.word	0x20000238

080063c0 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80063cc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	605a      	str	r2, [r3, #4]
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80063f4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	ed87 0a02 	vstr	s0, [r7, #8]
 800641c:	edc7 0a01 	vstr	s1, [r7, #4]
 8006420:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	615a      	str	r2, [r3, #20]
}
 8006436:	bf00      	nop
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	ed87 0a02 	vstr	s0, [r7, #8]
 800644e:	edc7 0a01 	vstr	s1, [r7, #4]
 8006452:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	621a      	str	r2, [r3, #32]
}
 8006468:	bf00      	nop
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff feb7 	bl	80061f0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff feef 	bl	8006270 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80064f0 <_ZN12VelocityCtrl4stopEv+0x30>
 80064d8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80064f0 <_ZN12VelocityCtrl4stopEv+0x30>
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff f89f 	bl	8005620 <_ZN5Motor8setRatioEdd>

}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	f3af 8000 	nop.w
	...

080064f8 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	ee07 3a90 	vmov	s15, r3
}
 8006508:	eeb0 0a67 	vmov.f32	s0, s15
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <HAL_GPIO_EXTI_Callback>:
  return len;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	4603      	mov	r3, r0
 800651e:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fe68 	bl	80081f8 <cppExit>
}
 8006528:	bf00      	nop
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1e      	ldr	r2, [pc, #120]	; (80065b8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8006542:	f001 fe31 	bl	80081a8 <cppFlip100ns>

		tim7_timer++;
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3301      	adds	r3, #1
 800654c:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800654e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8006550:	4b1a      	ldr	r3, [pc, #104]	; (80065bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1a      	ldr	r2, [pc, #104]	; (80065c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d902      	bls.n	8006560 <HAL_TIM_PeriodElapsedCallback+0x30>
 800655a:	4b18      	ldr	r3, [pc, #96]	; (80065bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a17      	ldr	r2, [pc, #92]	; (80065c4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d10e      	bne.n	8006588 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 800656a:	f001 fded 	bl	8008148 <cppFlip1ms>

		tim6_timer++;
 800656e:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	4a14      	ldr	r2, [pc, #80]	; (80065c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006576:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8006578:	4b13      	ldr	r3, [pc, #76]	; (80065c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a10      	ldr	r2, [pc, #64]	; (80065c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d902      	bls.n	8006588 <HAL_TIM_PeriodElapsedCallback+0x58>
 8006582:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a0f      	ldr	r2, [pc, #60]	; (80065cc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d10e      	bne.n	80065b0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8006592:	f001 fe13 	bl	80081bc <cppFlip10ms>

		tim13_timer++;
 8006596:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3301      	adds	r3, #1
 800659c:	4a0c      	ldr	r2, [pc, #48]	; (80065d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800659e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a06      	ldr	r2, [pc, #24]	; (80065c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d902      	bls.n	80065b0 <HAL_TIM_PeriodElapsedCallback+0x80>
 80065aa:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
	}

}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40001400 	.word	0x40001400
 80065bc:	20047928 	.word	0x20047928
 80065c0:	0001869f 	.word	0x0001869f
 80065c4:	40001000 	.word	0x40001000
 80065c8:	200478e4 	.word	0x200478e4
 80065cc:	40001c00 	.word	0x40001c00
 80065d0:	2004792c 	.word	0x2004792c

080065d4 <init>:

void init()
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80065d8:	2201      	movs	r2, #1
 80065da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065de:	4808      	ldr	r0, [pc, #32]	; (8006600 <init+0x2c>)
 80065e0:	f006 fa20 	bl	800ca24 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80065e4:	4807      	ldr	r0, [pc, #28]	; (8006604 <init+0x30>)
 80065e6:	f00a f900 	bl	80107ea <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80065ea:	4807      	ldr	r0, [pc, #28]	; (8006608 <init+0x34>)
 80065ec:	f00a f8fd 	bl	80107ea <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80065f0:	4806      	ldr	r0, [pc, #24]	; (800660c <init+0x38>)
 80065f2:	f00a f8fa 	bl	80107ea <HAL_TIM_Base_Start_IT>

	cppInit();
 80065f6:	f001 fd05 	bl	8008004 <cppInit>

	//path_following_initialize();

}
 80065fa:	bf00      	nop
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40021000 	.word	0x40021000
 8006604:	20047a10 	.word	0x20047a10
 8006608:	20047bb4 	.word	0x20047bb4
 800660c:	20047930 	.word	0x20047930

08006610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006614:	f004 fefe 	bl	800b414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006618:	f000 f82a 	bl	8006670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800661c:	f000 fdbc 	bl	8007198 <MX_GPIO_Init>
  MX_DMA_Init();
 8006620:	f000 fd8a 	bl	8007138 <MX_DMA_Init>
  MX_I2C2_Init();
 8006624:	f000 f9e8 	bl	80069f8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006628:	f000 fa14 	bl	8006a54 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800662c:	f000 fa32 	bl	8006a94 <MX_SPI2_Init>
  MX_TIM1_Init();
 8006630:	f000 fa66 	bl	8006b00 <MX_TIM1_Init>
  MX_TIM4_Init();
 8006634:	f000 fb70 	bl	8006d18 <MX_TIM4_Init>
  MX_TIM8_Init();
 8006638:	f000 fc3c 	bl	8006eb4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800663c:	f000 fd52 	bl	80070e4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006640:	f00c f8a6 	bl	8012790 <MX_FATFS_Init>
  MX_TIM6_Init();
 8006644:	f000 fbcc 	bl	8006de0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006648:	f000 f9a8 	bl	800699c <MX_I2C1_Init>
  MX_TIM3_Init();
 800664c:	f000 fb00 	bl	8006c50 <MX_TIM3_Init>
  MX_TIM10_Init();
 8006650:	f000 fc88 	bl	8006f64 <MX_TIM10_Init>
  MX_TIM11_Init();
 8006654:	f000 fcd4 	bl	8007000 <MX_TIM11_Init>
  MX_ADC2_Init();
 8006658:	f000 f898 	bl	800678c <MX_ADC2_Init>
  MX_TIM7_Init();
 800665c:	f000 fbf6 	bl	8006e4c <MX_TIM7_Init>
  MX_TIM13_Init();
 8006660:	f000 fd1c 	bl	800709c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8006664:	f7ff ffb6 	bl	80065d4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8006668:	f001 fde2 	bl	8008230 <cppLoop>
 800666c:	e7fc      	b.n	8006668 <main+0x58>
	...

08006670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b0a4      	sub	sp, #144	; 0x90
 8006674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006676:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800667a:	2234      	movs	r2, #52	; 0x34
 800667c:	2100      	movs	r1, #0
 800667e:	4618      	mov	r0, r3
 8006680:	f00f fc70 	bl	8015f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006684:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	609a      	str	r2, [r3, #8]
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006694:	f107 030c 	add.w	r3, r7, #12
 8006698:	223c      	movs	r2, #60	; 0x3c
 800669a:	2100      	movs	r1, #0
 800669c:	4618      	mov	r0, r3
 800669e:	f00f fc61 	bl	8015f64 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80066a2:	2300      	movs	r3, #0
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	4b37      	ldr	r3, [pc, #220]	; (8006784 <SystemClock_Config+0x114>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	4a36      	ldr	r2, [pc, #216]	; (8006784 <SystemClock_Config+0x114>)
 80066ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b0:	6413      	str	r3, [r2, #64]	; 0x40
 80066b2:	4b34      	ldr	r3, [pc, #208]	; (8006784 <SystemClock_Config+0x114>)
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ba:	60bb      	str	r3, [r7, #8]
 80066bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80066be:	2300      	movs	r3, #0
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	4b31      	ldr	r3, [pc, #196]	; (8006788 <SystemClock_Config+0x118>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a30      	ldr	r2, [pc, #192]	; (8006788 <SystemClock_Config+0x118>)
 80066c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	4b2e      	ldr	r3, [pc, #184]	; (8006788 <SystemClock_Config+0x118>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066d6:	607b      	str	r3, [r7, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80066da:	2301      	movs	r3, #1
 80066dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80066de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066e4:	2302      	movs	r3, #2
 80066e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066ec:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80066ee:	2308      	movs	r3, #8
 80066f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80066f2:	23b4      	movs	r3, #180	; 0xb4
 80066f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80066f8:	2302      	movs	r3, #2
 80066fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80066fe:	2308      	movs	r3, #8
 8006700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006704:	2302      	movs	r3, #2
 8006706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800670a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800670e:	4618      	mov	r0, r3
 8006710:	f007 fdc2 	bl	800e298 <HAL_RCC_OscConfig>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800671a:	f000 fe91 	bl	8007440 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800671e:	f007 f93d 	bl	800d99c <HAL_PWREx_EnableOverDrive>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006728:	f000 fe8a 	bl	8007440 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800672c:	230f      	movs	r3, #15
 800672e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006730:	2302      	movs	r3, #2
 8006732:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006734:	2300      	movs	r3, #0
 8006736:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800673c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800673e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006742:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006744:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006748:	2105      	movs	r1, #5
 800674a:	4618      	mov	r0, r3
 800674c:	f007 f976 	bl	800da3c <HAL_RCC_ClockConfig>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8006756:	f000 fe73 	bl	8007440 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800675a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800675e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006760:	2300      	movs	r3, #0
 8006762:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8006764:	2300      	movs	r3, #0
 8006766:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006768:	f107 030c 	add.w	r3, r7, #12
 800676c:	4618      	mov	r0, r3
 800676e:	f007 fb55 	bl	800de1c <HAL_RCCEx_PeriphCLKConfig>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006778:	f000 fe62 	bl	8007440 <Error_Handler>
  }
}
 800677c:	bf00      	nop
 800677e:	3790      	adds	r7, #144	; 0x90
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40023800 	.word	0x40023800
 8006788:	40007000 	.word	0x40007000

0800678c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006792:	463b      	mov	r3, r7
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	605a      	str	r2, [r3, #4]
 800679a:	609a      	str	r2, [r3, #8]
 800679c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800679e:	4b7c      	ldr	r3, [pc, #496]	; (8006990 <MX_ADC2_Init+0x204>)
 80067a0:	4a7c      	ldr	r2, [pc, #496]	; (8006994 <MX_ADC2_Init+0x208>)
 80067a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80067a4:	4b7a      	ldr	r3, [pc, #488]	; (8006990 <MX_ADC2_Init+0x204>)
 80067a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80067ac:	4b78      	ldr	r3, [pc, #480]	; (8006990 <MX_ADC2_Init+0x204>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80067b2:	4b77      	ldr	r3, [pc, #476]	; (8006990 <MX_ADC2_Init+0x204>)
 80067b4:	2201      	movs	r2, #1
 80067b6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80067b8:	4b75      	ldr	r3, [pc, #468]	; (8006990 <MX_ADC2_Init+0x204>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80067be:	4b74      	ldr	r3, [pc, #464]	; (8006990 <MX_ADC2_Init+0x204>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80067c6:	4b72      	ldr	r3, [pc, #456]	; (8006990 <MX_ADC2_Init+0x204>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80067cc:	4b70      	ldr	r3, [pc, #448]	; (8006990 <MX_ADC2_Init+0x204>)
 80067ce:	4a72      	ldr	r2, [pc, #456]	; (8006998 <MX_ADC2_Init+0x20c>)
 80067d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80067d2:	4b6f      	ldr	r3, [pc, #444]	; (8006990 <MX_ADC2_Init+0x204>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80067d8:	4b6d      	ldr	r3, [pc, #436]	; (8006990 <MX_ADC2_Init+0x204>)
 80067da:	220e      	movs	r2, #14
 80067dc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80067de:	4b6c      	ldr	r3, [pc, #432]	; (8006990 <MX_ADC2_Init+0x204>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80067e6:	4b6a      	ldr	r3, [pc, #424]	; (8006990 <MX_ADC2_Init+0x204>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80067ec:	4868      	ldr	r0, [pc, #416]	; (8006990 <MX_ADC2_Init+0x204>)
 80067ee:	f004 fea5 	bl	800b53c <HAL_ADC_Init>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80067f8:	f000 fe22 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80067fc:	230a      	movs	r3, #10
 80067fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006800:	2301      	movs	r3, #1
 8006802:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006804:	2306      	movs	r3, #6
 8006806:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006808:	463b      	mov	r3, r7
 800680a:	4619      	mov	r1, r3
 800680c:	4860      	ldr	r0, [pc, #384]	; (8006990 <MX_ADC2_Init+0x204>)
 800680e:	f004 ffe9 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006818:	f000 fe12 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800681c:	230b      	movs	r3, #11
 800681e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006820:	2302      	movs	r3, #2
 8006822:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006824:	463b      	mov	r3, r7
 8006826:	4619      	mov	r1, r3
 8006828:	4859      	ldr	r0, [pc, #356]	; (8006990 <MX_ADC2_Init+0x204>)
 800682a:	f004 ffdb 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006834:	f000 fe04 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006838:	230c      	movs	r3, #12
 800683a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800683c:	2303      	movs	r3, #3
 800683e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006840:	463b      	mov	r3, r7
 8006842:	4619      	mov	r1, r3
 8006844:	4852      	ldr	r0, [pc, #328]	; (8006990 <MX_ADC2_Init+0x204>)
 8006846:	f004 ffcd 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006850:	f000 fdf6 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006854:	230d      	movs	r3, #13
 8006856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006858:	2304      	movs	r3, #4
 800685a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800685c:	463b      	mov	r3, r7
 800685e:	4619      	mov	r1, r3
 8006860:	484b      	ldr	r0, [pc, #300]	; (8006990 <MX_ADC2_Init+0x204>)
 8006862:	f004 ffbf 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800686c:	f000 fde8 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006870:	2300      	movs	r3, #0
 8006872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006874:	2305      	movs	r3, #5
 8006876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006878:	463b      	mov	r3, r7
 800687a:	4619      	mov	r1, r3
 800687c:	4844      	ldr	r0, [pc, #272]	; (8006990 <MX_ADC2_Init+0x204>)
 800687e:	f004 ffb1 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006888:	f000 fdda 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800688c:	2301      	movs	r3, #1
 800688e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006890:	2306      	movs	r3, #6
 8006892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006894:	463b      	mov	r3, r7
 8006896:	4619      	mov	r1, r3
 8006898:	483d      	ldr	r0, [pc, #244]	; (8006990 <MX_ADC2_Init+0x204>)
 800689a:	f004 ffa3 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80068a4:	f000 fdcc 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80068a8:	2302      	movs	r3, #2
 80068aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80068ac:	2307      	movs	r3, #7
 80068ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068b0:	463b      	mov	r3, r7
 80068b2:	4619      	mov	r1, r3
 80068b4:	4836      	ldr	r0, [pc, #216]	; (8006990 <MX_ADC2_Init+0x204>)
 80068b6:	f004 ff95 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80068c0:	f000 fdbe 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80068c4:	2303      	movs	r3, #3
 80068c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80068c8:	2308      	movs	r3, #8
 80068ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068cc:	463b      	mov	r3, r7
 80068ce:	4619      	mov	r1, r3
 80068d0:	482f      	ldr	r0, [pc, #188]	; (8006990 <MX_ADC2_Init+0x204>)
 80068d2:	f004 ff87 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80068dc:	f000 fdb0 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80068e0:	2304      	movs	r3, #4
 80068e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80068e4:	2309      	movs	r3, #9
 80068e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068e8:	463b      	mov	r3, r7
 80068ea:	4619      	mov	r1, r3
 80068ec:	4828      	ldr	r0, [pc, #160]	; (8006990 <MX_ADC2_Init+0x204>)
 80068ee:	f004 ff79 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80068f8:	f000 fda2 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80068fc:	2305      	movs	r3, #5
 80068fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006900:	230a      	movs	r3, #10
 8006902:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006904:	463b      	mov	r3, r7
 8006906:	4619      	mov	r1, r3
 8006908:	4821      	ldr	r0, [pc, #132]	; (8006990 <MX_ADC2_Init+0x204>)
 800690a:	f004 ff6b 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8006914:	f000 fd94 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006918:	2306      	movs	r3, #6
 800691a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800691c:	230b      	movs	r3, #11
 800691e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006920:	463b      	mov	r3, r7
 8006922:	4619      	mov	r1, r3
 8006924:	481a      	ldr	r0, [pc, #104]	; (8006990 <MX_ADC2_Init+0x204>)
 8006926:	f004 ff5d 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006930:	f000 fd86 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006934:	2307      	movs	r3, #7
 8006936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006938:	230c      	movs	r3, #12
 800693a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800693c:	463b      	mov	r3, r7
 800693e:	4619      	mov	r1, r3
 8006940:	4813      	ldr	r0, [pc, #76]	; (8006990 <MX_ADC2_Init+0x204>)
 8006942:	f004 ff4f 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800694c:	f000 fd78 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006950:	2308      	movs	r3, #8
 8006952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8006954:	230d      	movs	r3, #13
 8006956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006958:	463b      	mov	r3, r7
 800695a:	4619      	mov	r1, r3
 800695c:	480c      	ldr	r0, [pc, #48]	; (8006990 <MX_ADC2_Init+0x204>)
 800695e:	f004 ff41 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8006968:	f000 fd6a 	bl	8007440 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800696c:	2309      	movs	r3, #9
 800696e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006970:	230e      	movs	r3, #14
 8006972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006974:	463b      	mov	r3, r7
 8006976:	4619      	mov	r1, r3
 8006978:	4805      	ldr	r0, [pc, #20]	; (8006990 <MX_ADC2_Init+0x204>)
 800697a:	f004 ff33 	bl	800b7e4 <HAL_ADC_ConfigChannel>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8006984:	f000 fd5c 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006988:	bf00      	nop
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	200477b4 	.word	0x200477b4
 8006994:	40012100 	.word	0x40012100
 8006998:	0f000001 	.word	0x0f000001

0800699c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80069a0:	4b12      	ldr	r3, [pc, #72]	; (80069ec <MX_I2C1_Init+0x50>)
 80069a2:	4a13      	ldr	r2, [pc, #76]	; (80069f0 <MX_I2C1_Init+0x54>)
 80069a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80069a6:	4b11      	ldr	r3, [pc, #68]	; (80069ec <MX_I2C1_Init+0x50>)
 80069a8:	4a12      	ldr	r2, [pc, #72]	; (80069f4 <MX_I2C1_Init+0x58>)
 80069aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80069ac:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <MX_I2C1_Init+0x50>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80069b2:	4b0e      	ldr	r3, [pc, #56]	; (80069ec <MX_I2C1_Init+0x50>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <MX_I2C1_Init+0x50>)
 80069ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80069c0:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <MX_I2C1_Init+0x50>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <MX_I2C1_Init+0x50>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80069cc:	4b07      	ldr	r3, [pc, #28]	; (80069ec <MX_I2C1_Init+0x50>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80069d2:	4b06      	ldr	r3, [pc, #24]	; (80069ec <MX_I2C1_Init+0x50>)
 80069d4:	2280      	movs	r2, #128	; 0x80
 80069d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80069d8:	4804      	ldr	r0, [pc, #16]	; (80069ec <MX_I2C1_Init+0x50>)
 80069da:	f006 f855 	bl	800ca88 <HAL_I2C_Init>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80069e4:	f000 fd2c 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80069e8:	bf00      	nop
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	200477fc 	.word	0x200477fc
 80069f0:	40005400 	.word	0x40005400
 80069f4:	000186a0 	.word	0x000186a0

080069f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80069fc:	4b12      	ldr	r3, [pc, #72]	; (8006a48 <MX_I2C2_Init+0x50>)
 80069fe:	4a13      	ldr	r2, [pc, #76]	; (8006a4c <MX_I2C2_Init+0x54>)
 8006a00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006a02:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <MX_I2C2_Init+0x50>)
 8006a04:	4a12      	ldr	r2, [pc, #72]	; (8006a50 <MX_I2C2_Init+0x58>)
 8006a06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <MX_I2C2_Init+0x50>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006a0e:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <MX_I2C2_Init+0x50>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006a14:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <MX_I2C2_Init+0x50>)
 8006a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <MX_I2C2_Init+0x50>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006a22:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <MX_I2C2_Init+0x50>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006a28:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <MX_I2C2_Init+0x50>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006a2e:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <MX_I2C2_Init+0x50>)
 8006a30:	2280      	movs	r2, #128	; 0x80
 8006a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006a34:	4804      	ldr	r0, [pc, #16]	; (8006a48 <MX_I2C2_Init+0x50>)
 8006a36:	f006 f827 	bl	800ca88 <HAL_I2C_Init>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006a40:	f000 fcfe 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006a44:	bf00      	nop
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20047890 	.word	0x20047890
 8006a4c:	40005800 	.word	0x40005800
 8006a50:	000186a0 	.word	0x000186a0

08006a54 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <MX_SDIO_SD_Init+0x38>)
 8006a5a:	4a0d      	ldr	r2, [pc, #52]	; (8006a90 <MX_SDIO_SD_Init+0x3c>)
 8006a5c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <MX_SDIO_SD_Init+0x38>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006a64:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <MX_SDIO_SD_Init+0x38>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006a6a:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <MX_SDIO_SD_Init+0x38>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006a70:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <MX_SDIO_SD_Init+0x38>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <MX_SDIO_SD_Init+0x38>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8006a7c:	4b03      	ldr	r3, [pc, #12]	; (8006a8c <MX_SDIO_SD_Init+0x38>)
 8006a7e:	2204      	movs	r2, #4
 8006a80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006a82:	bf00      	nop
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20047a90 	.word	0x20047a90
 8006a90:	40012c00 	.word	0x40012c00

08006a94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006a98:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006a9a:	4a18      	ldr	r2, [pc, #96]	; (8006afc <MX_SPI2_Init+0x68>)
 8006a9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006a9e:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006aa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006aa6:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006aac:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006ab2:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006abe:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ac4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006ac8:	2220      	movs	r2, #32
 8006aca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ad2:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006ae0:	220a      	movs	r2, #10
 8006ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006ae4:	4804      	ldr	r0, [pc, #16]	; (8006af8 <MX_SPI2_Init+0x64>)
 8006ae6:	f009 f901 	bl	800fcec <HAL_SPI_Init>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006af0:	f000 fca6 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006af4:	bf00      	nop
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	200476dc 	.word	0x200476dc
 8006afc:	40003800 	.word	0x40003800

08006b00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b09a      	sub	sp, #104	; 0x68
 8006b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006b06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b0a:	2224      	movs	r2, #36	; 0x24
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f00f fa28 	bl	8015f64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b1e:	f107 0320 	add.w	r3, r7, #32
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	609a      	str	r2, [r3, #8]
 8006b2a:	60da      	str	r2, [r3, #12]
 8006b2c:	611a      	str	r2, [r3, #16]
 8006b2e:	615a      	str	r2, [r3, #20]
 8006b30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006b32:	463b      	mov	r3, r7
 8006b34:	2220      	movs	r2, #32
 8006b36:	2100      	movs	r1, #0
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f00f fa13 	bl	8015f64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006b3e:	4b42      	ldr	r3, [pc, #264]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006b40:	4a42      	ldr	r2, [pc, #264]	; (8006c4c <MX_TIM1_Init+0x14c>)
 8006b42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006b44:	4b40      	ldr	r3, [pc, #256]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b4a:	4b3f      	ldr	r3, [pc, #252]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006b50:	4b3d      	ldr	r3, [pc, #244]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b58:	4b3b      	ldr	r3, [pc, #236]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006b5e:	4b3a      	ldr	r3, [pc, #232]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b64:	4b38      	ldr	r3, [pc, #224]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006b6a:	4837      	ldr	r0, [pc, #220]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006b6c:	f009 fe61 	bl	8010832 <HAL_TIM_PWM_Init>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006b76:	f000 fc63 	bl	8007440 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006b82:	2301      	movs	r3, #1
 8006b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006b86:	2300      	movs	r3, #0
 8006b88:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006b92:	2301      	movs	r3, #1
 8006b94:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006b96:	2300      	movs	r3, #0
 8006b98:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006b9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4828      	ldr	r0, [pc, #160]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006ba6:	f009 fead 	bl	8010904 <HAL_TIM_Encoder_Init>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006bb0:	f000 fc46 	bl	8007440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006bbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4821      	ldr	r0, [pc, #132]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006bc4:	f00a fbd4 	bl	8011370 <HAL_TIMEx_MasterConfigSynchronization>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006bce:	f000 fc37 	bl	8007440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006bd2:	2360      	movs	r3, #96	; 0x60
 8006bd4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006bde:	2300      	movs	r3, #0
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006be2:	2300      	movs	r3, #0
 8006be4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006be6:	2300      	movs	r3, #0
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006bea:	2300      	movs	r3, #0
 8006bec:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006bee:	f107 0320 	add.w	r3, r7, #32
 8006bf2:	2208      	movs	r2, #8
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4814      	ldr	r0, [pc, #80]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006bf8:	f00a f856 	bl	8010ca8 <HAL_TIM_PWM_ConfigChannel>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006c02:	f000 fc1d 	bl	8007440 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006c24:	463b      	mov	r3, r7
 8006c26:	4619      	mov	r1, r3
 8006c28:	4807      	ldr	r0, [pc, #28]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006c2a:	f00a fc1d 	bl	8011468 <HAL_TIMEx_ConfigBreakDeadTime>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006c34:	f000 fc04 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006c38:	4803      	ldr	r0, [pc, #12]	; (8006c48 <MX_TIM1_Init+0x148>)
 8006c3a:	f000 fff1 	bl	8007c20 <HAL_TIM_MspPostInit>

}
 8006c3e:	bf00      	nop
 8006c40:	3768      	adds	r7, #104	; 0x68
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20047a50 	.word	0x20047a50
 8006c4c:	40010000 	.word	0x40010000

08006c50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08a      	sub	sp, #40	; 0x28
 8006c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c56:	f107 0320 	add.w	r3, r7, #32
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c60:	1d3b      	adds	r3, r7, #4
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	605a      	str	r2, [r3, #4]
 8006c68:	609a      	str	r2, [r3, #8]
 8006c6a:	60da      	str	r2, [r3, #12]
 8006c6c:	611a      	str	r2, [r3, #16]
 8006c6e:	615a      	str	r2, [r3, #20]
 8006c70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006c72:	4b27      	ldr	r3, [pc, #156]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006c74:	4a27      	ldr	r2, [pc, #156]	; (8006d14 <MX_TIM3_Init+0xc4>)
 8006c76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006c78:	4b25      	ldr	r3, [pc, #148]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c7e:	4b24      	ldr	r3, [pc, #144]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8006c84:	4b22      	ldr	r3, [pc, #136]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006c86:	f241 1293 	movw	r2, #4499	; 0x1193
 8006c8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c8c:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c92:	4b1f      	ldr	r3, [pc, #124]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006c98:	481d      	ldr	r0, [pc, #116]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006c9a:	f009 fdca 	bl	8010832 <HAL_TIM_PWM_Init>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006ca4:	f000 fbcc 	bl	8007440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cac:	2300      	movs	r3, #0
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006cb0:	f107 0320 	add.w	r3, r7, #32
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4816      	ldr	r0, [pc, #88]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006cb8:	f00a fb5a 	bl	8011370 <HAL_TIMEx_MasterConfigSynchronization>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006cc2:	f000 fbbd 	bl	8007440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006cc6:	2360      	movs	r3, #96	; 0x60
 8006cc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006cd6:	1d3b      	adds	r3, r7, #4
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4619      	mov	r1, r3
 8006cdc:	480c      	ldr	r0, [pc, #48]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006cde:	f009 ffe3 	bl	8010ca8 <HAL_TIM_PWM_ConfigChannel>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006ce8:	f000 fbaa 	bl	8007440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006cec:	1d3b      	adds	r3, r7, #4
 8006cee:	2204      	movs	r2, #4
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4807      	ldr	r0, [pc, #28]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006cf4:	f009 ffd8 	bl	8010ca8 <HAL_TIM_PWM_ConfigChannel>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006cfe:	f000 fb9f 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006d02:	4803      	ldr	r0, [pc, #12]	; (8006d10 <MX_TIM3_Init+0xc0>)
 8006d04:	f000 ff8c 	bl	8007c20 <HAL_TIM_MspPostInit>

}
 8006d08:	bf00      	nop
 8006d0a:	3728      	adds	r7, #40	; 0x28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	200478e8 	.word	0x200478e8
 8006d14:	40000400 	.word	0x40000400

08006d18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	; 0x28
 8006d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d1e:	f107 0320 	add.w	r3, r7, #32
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006d28:	1d3b      	adds	r3, r7, #4
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	605a      	str	r2, [r3, #4]
 8006d30:	609a      	str	r2, [r3, #8]
 8006d32:	60da      	str	r2, [r3, #12]
 8006d34:	611a      	str	r2, [r3, #16]
 8006d36:	615a      	str	r2, [r3, #20]
 8006d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006d3a:	4b27      	ldr	r3, [pc, #156]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006d3c:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <MX_TIM4_Init+0xc4>)
 8006d3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006d40:	4b25      	ldr	r3, [pc, #148]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d46:	4b24      	ldr	r3, [pc, #144]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006d4c:	4b22      	ldr	r3, [pc, #136]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006d4e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006d52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d54:	4b20      	ldr	r3, [pc, #128]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d5a:	4b1f      	ldr	r3, [pc, #124]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006d60:	481d      	ldr	r0, [pc, #116]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006d62:	f009 fd66 	bl	8010832 <HAL_TIM_PWM_Init>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006d6c:	f000 fb68 	bl	8007440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d70:	2300      	movs	r3, #0
 8006d72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d74:	2300      	movs	r3, #0
 8006d76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006d78:	f107 0320 	add.w	r3, r7, #32
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4816      	ldr	r0, [pc, #88]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006d80:	f00a faf6 	bl	8011370 <HAL_TIMEx_MasterConfigSynchronization>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006d8a:	f000 fb59 	bl	8007440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d8e:	2360      	movs	r3, #96	; 0x60
 8006d90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006d9e:	1d3b      	adds	r3, r7, #4
 8006da0:	2208      	movs	r2, #8
 8006da2:	4619      	mov	r1, r3
 8006da4:	480c      	ldr	r0, [pc, #48]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006da6:	f009 ff7f 	bl	8010ca8 <HAL_TIM_PWM_ConfigChannel>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006db0:	f000 fb46 	bl	8007440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006db4:	1d3b      	adds	r3, r7, #4
 8006db6:	220c      	movs	r2, #12
 8006db8:	4619      	mov	r1, r3
 8006dba:	4807      	ldr	r0, [pc, #28]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006dbc:	f009 ff74 	bl	8010ca8 <HAL_TIM_PWM_ConfigChannel>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006dc6:	f000 fb3b 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006dca:	4803      	ldr	r0, [pc, #12]	; (8006dd8 <MX_TIM4_Init+0xc0>)
 8006dcc:	f000 ff28 	bl	8007c20 <HAL_TIM_MspPostInit>

}
 8006dd0:	bf00      	nop
 8006dd2:	3728      	adds	r7, #40	; 0x28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20047774 	.word	0x20047774
 8006ddc:	40000800 	.word	0x40000800

08006de0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006de6:	463b      	mov	r3, r7
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006dee:	4b15      	ldr	r3, [pc, #84]	; (8006e44 <MX_TIM6_Init+0x64>)
 8006df0:	4a15      	ldr	r2, [pc, #84]	; (8006e48 <MX_TIM6_Init+0x68>)
 8006df2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006df4:	4b13      	ldr	r3, [pc, #76]	; (8006e44 <MX_TIM6_Init+0x64>)
 8006df6:	2259      	movs	r2, #89	; 0x59
 8006df8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <MX_TIM6_Init+0x64>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006e00:	4b10      	ldr	r3, [pc, #64]	; (8006e44 <MX_TIM6_Init+0x64>)
 8006e02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006e06:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006e08:	4b0e      	ldr	r3, [pc, #56]	; (8006e44 <MX_TIM6_Init+0x64>)
 8006e0a:	2280      	movs	r2, #128	; 0x80
 8006e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006e0e:	480d      	ldr	r0, [pc, #52]	; (8006e44 <MX_TIM6_Init+0x64>)
 8006e10:	f009 fcc0 	bl	8010794 <HAL_TIM_Base_Init>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006e1a:	f000 fb11 	bl	8007440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006e26:	463b      	mov	r3, r7
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4806      	ldr	r0, [pc, #24]	; (8006e44 <MX_TIM6_Init+0x64>)
 8006e2c:	f00a faa0 	bl	8011370 <HAL_TIMEx_MasterConfigSynchronization>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006e36:	f000 fb03 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20047a10 	.word	0x20047a10
 8006e48:	40001000 	.word	0x40001000

08006e4c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e52:	463b      	mov	r3, r7
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006e5a:	4b14      	ldr	r3, [pc, #80]	; (8006eac <MX_TIM7_Init+0x60>)
 8006e5c:	4a14      	ldr	r2, [pc, #80]	; (8006eb0 <MX_TIM7_Init+0x64>)
 8006e5e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006e60:	4b12      	ldr	r3, [pc, #72]	; (8006eac <MX_TIM7_Init+0x60>)
 8006e62:	22b3      	movs	r2, #179	; 0xb3
 8006e64:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e66:	4b11      	ldr	r3, [pc, #68]	; (8006eac <MX_TIM7_Init+0x60>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006e6c:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <MX_TIM7_Init+0x60>)
 8006e6e:	2231      	movs	r2, #49	; 0x31
 8006e70:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006e72:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <MX_TIM7_Init+0x60>)
 8006e74:	2280      	movs	r2, #128	; 0x80
 8006e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006e78:	480c      	ldr	r0, [pc, #48]	; (8006eac <MX_TIM7_Init+0x60>)
 8006e7a:	f009 fc8b 	bl	8010794 <HAL_TIM_Base_Init>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006e84:	f000 fadc 	bl	8007440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006e90:	463b      	mov	r3, r7
 8006e92:	4619      	mov	r1, r3
 8006e94:	4805      	ldr	r0, [pc, #20]	; (8006eac <MX_TIM7_Init+0x60>)
 8006e96:	f00a fa6b 	bl	8011370 <HAL_TIMEx_MasterConfigSynchronization>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006ea0:	f000 face 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20047bb4 	.word	0x20047bb4
 8006eb0:	40001400 	.word	0x40001400

08006eb4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08c      	sub	sp, #48	; 0x30
 8006eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006eba:	f107 030c 	add.w	r3, r7, #12
 8006ebe:	2224      	movs	r2, #36	; 0x24
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f00f f84e 	bl	8015f64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ec8:	1d3b      	adds	r3, r7, #4
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006ed0:	4b22      	ldr	r3, [pc, #136]	; (8006f5c <MX_TIM8_Init+0xa8>)
 8006ed2:	4a23      	ldr	r2, [pc, #140]	; (8006f60 <MX_TIM8_Init+0xac>)
 8006ed4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006ed6:	4b21      	ldr	r3, [pc, #132]	; (8006f5c <MX_TIM8_Init+0xa8>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006edc:	4b1f      	ldr	r3, [pc, #124]	; (8006f5c <MX_TIM8_Init+0xa8>)
 8006ede:	2210      	movs	r2, #16
 8006ee0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006ee2:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <MX_TIM8_Init+0xa8>)
 8006ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ee8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006eea:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <MX_TIM8_Init+0xa8>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006ef0:	4b1a      	ldr	r3, [pc, #104]	; (8006f5c <MX_TIM8_Init+0xa8>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ef6:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <MX_TIM8_Init+0xa8>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006efc:	2303      	movs	r3, #3
 8006efe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006f00:	2300      	movs	r3, #0
 8006f02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006f04:	2301      	movs	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006f10:	2300      	movs	r3, #0
 8006f12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006f14:	2301      	movs	r3, #1
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006f20:	f107 030c 	add.w	r3, r7, #12
 8006f24:	4619      	mov	r1, r3
 8006f26:	480d      	ldr	r0, [pc, #52]	; (8006f5c <MX_TIM8_Init+0xa8>)
 8006f28:	f009 fcec 	bl	8010904 <HAL_TIM_Encoder_Init>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006f32:	f000 fa85 	bl	8007440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f36:	2300      	movs	r3, #0
 8006f38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006f3e:	1d3b      	adds	r3, r7, #4
 8006f40:	4619      	mov	r1, r3
 8006f42:	4806      	ldr	r0, [pc, #24]	; (8006f5c <MX_TIM8_Init+0xa8>)
 8006f44:	f00a fa14 	bl	8011370 <HAL_TIMEx_MasterConfigSynchronization>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006f4e:	f000 fa77 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006f52:	bf00      	nop
 8006f54:	3730      	adds	r7, #48	; 0x30
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20047734 	.word	0x20047734
 8006f60:	40010400 	.word	0x40010400

08006f64 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	605a      	str	r2, [r3, #4]
 8006f72:	609a      	str	r2, [r3, #8]
 8006f74:	60da      	str	r2, [r3, #12]
 8006f76:	611a      	str	r2, [r3, #16]
 8006f78:	615a      	str	r2, [r3, #20]
 8006f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006f7c:	4b1e      	ldr	r3, [pc, #120]	; (8006ff8 <MX_TIM10_Init+0x94>)
 8006f7e:	4a1f      	ldr	r2, [pc, #124]	; (8006ffc <MX_TIM10_Init+0x98>)
 8006f80:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006f82:	4b1d      	ldr	r3, [pc, #116]	; (8006ff8 <MX_TIM10_Init+0x94>)
 8006f84:	2201      	movs	r2, #1
 8006f86:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f88:	4b1b      	ldr	r3, [pc, #108]	; (8006ff8 <MX_TIM10_Init+0x94>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ff8 <MX_TIM10_Init+0x94>)
 8006f90:	f242 3227 	movw	r2, #8999	; 0x2327
 8006f94:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f96:	4b18      	ldr	r3, [pc, #96]	; (8006ff8 <MX_TIM10_Init+0x94>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f9c:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <MX_TIM10_Init+0x94>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006fa2:	4815      	ldr	r0, [pc, #84]	; (8006ff8 <MX_TIM10_Init+0x94>)
 8006fa4:	f009 fbf6 	bl	8010794 <HAL_TIM_Base_Init>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006fae:	f000 fa47 	bl	8007440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006fb2:	4811      	ldr	r0, [pc, #68]	; (8006ff8 <MX_TIM10_Init+0x94>)
 8006fb4:	f009 fc3d 	bl	8010832 <HAL_TIM_PWM_Init>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006fbe:	f000 fa3f 	bl	8007440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006fc2:	2360      	movs	r3, #96	; 0x60
 8006fc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006fd2:	1d3b      	adds	r3, r7, #4
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4807      	ldr	r0, [pc, #28]	; (8006ff8 <MX_TIM10_Init+0x94>)
 8006fda:	f009 fe65 	bl	8010ca8 <HAL_TIM_PWM_ConfigChannel>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006fe4:	f000 fa2c 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006fe8:	4803      	ldr	r0, [pc, #12]	; (8006ff8 <MX_TIM10_Init+0x94>)
 8006fea:	f000 fe19 	bl	8007c20 <HAL_TIM_MspPostInit>

}
 8006fee:	bf00      	nop
 8006ff0:	3720      	adds	r7, #32
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20047850 	.word	0x20047850
 8006ffc:	40014400 	.word	0x40014400

08007000 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	605a      	str	r2, [r3, #4]
 800700e:	609a      	str	r2, [r3, #8]
 8007010:	60da      	str	r2, [r3, #12]
 8007012:	611a      	str	r2, [r3, #16]
 8007014:	615a      	str	r2, [r3, #20]
 8007016:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8007018:	4b1e      	ldr	r3, [pc, #120]	; (8007094 <MX_TIM11_Init+0x94>)
 800701a:	4a1f      	ldr	r2, [pc, #124]	; (8007098 <MX_TIM11_Init+0x98>)
 800701c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800701e:	4b1d      	ldr	r3, [pc, #116]	; (8007094 <MX_TIM11_Init+0x94>)
 8007020:	2201      	movs	r2, #1
 8007022:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007024:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <MX_TIM11_Init+0x94>)
 8007026:	2200      	movs	r2, #0
 8007028:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 800702a:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <MX_TIM11_Init+0x94>)
 800702c:	f242 3227 	movw	r2, #8999	; 0x2327
 8007030:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007032:	4b18      	ldr	r3, [pc, #96]	; (8007094 <MX_TIM11_Init+0x94>)
 8007034:	2200      	movs	r2, #0
 8007036:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007038:	4b16      	ldr	r3, [pc, #88]	; (8007094 <MX_TIM11_Init+0x94>)
 800703a:	2200      	movs	r2, #0
 800703c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800703e:	4815      	ldr	r0, [pc, #84]	; (8007094 <MX_TIM11_Init+0x94>)
 8007040:	f009 fba8 	bl	8010794 <HAL_TIM_Base_Init>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800704a:	f000 f9f9 	bl	8007440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800704e:	4811      	ldr	r0, [pc, #68]	; (8007094 <MX_TIM11_Init+0x94>)
 8007050:	f009 fbef 	bl	8010832 <HAL_TIM_PWM_Init>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800705a:	f000 f9f1 	bl	8007440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800705e:	2360      	movs	r3, #96	; 0x60
 8007060:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800706a:	2300      	movs	r3, #0
 800706c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800706e:	1d3b      	adds	r3, r7, #4
 8007070:	2200      	movs	r2, #0
 8007072:	4619      	mov	r1, r3
 8007074:	4807      	ldr	r0, [pc, #28]	; (8007094 <MX_TIM11_Init+0x94>)
 8007076:	f009 fe17 	bl	8010ca8 <HAL_TIM_PWM_ConfigChannel>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8007080:	f000 f9de 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8007084:	4803      	ldr	r0, [pc, #12]	; (8007094 <MX_TIM11_Init+0x94>)
 8007086:	f000 fdcb 	bl	8007c20 <HAL_TIM_MspPostInit>

}
 800708a:	bf00      	nop
 800708c:	3720      	adds	r7, #32
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20047970 	.word	0x20047970
 8007098:	40014800 	.word	0x40014800

0800709c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80070a0:	4b0e      	ldr	r3, [pc, #56]	; (80070dc <MX_TIM13_Init+0x40>)
 80070a2:	4a0f      	ldr	r2, [pc, #60]	; (80070e0 <MX_TIM13_Init+0x44>)
 80070a4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80070a6:	4b0d      	ldr	r3, [pc, #52]	; (80070dc <MX_TIM13_Init+0x40>)
 80070a8:	2259      	movs	r2, #89	; 0x59
 80070aa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070ac:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <MX_TIM13_Init+0x40>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80070b2:	4b0a      	ldr	r3, [pc, #40]	; (80070dc <MX_TIM13_Init+0x40>)
 80070b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80070b8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070ba:	4b08      	ldr	r3, [pc, #32]	; (80070dc <MX_TIM13_Init+0x40>)
 80070bc:	2200      	movs	r2, #0
 80070be:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <MX_TIM13_Init+0x40>)
 80070c2:	2280      	movs	r2, #128	; 0x80
 80070c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80070c6:	4805      	ldr	r0, [pc, #20]	; (80070dc <MX_TIM13_Init+0x40>)
 80070c8:	f009 fb64 	bl	8010794 <HAL_TIM_Base_Init>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80070d2:	f000 f9b5 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80070d6:	bf00      	nop
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20047930 	.word	0x20047930
 80070e0:	40001c00 	.word	0x40001c00

080070e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80070e8:	4b11      	ldr	r3, [pc, #68]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 80070ea:	4a12      	ldr	r2, [pc, #72]	; (8007134 <MX_USART2_UART_Init+0x50>)
 80070ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80070ee:	4b10      	ldr	r3, [pc, #64]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 80070f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80070f6:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80070fc:	4b0c      	ldr	r3, [pc, #48]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 80070fe:	2200      	movs	r2, #0
 8007100:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007102:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 8007104:	2200      	movs	r2, #0
 8007106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 800710a:	220c      	movs	r2, #12
 800710c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800710e:	4b08      	ldr	r3, [pc, #32]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 8007110:	2200      	movs	r2, #0
 8007112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007114:	4b06      	ldr	r3, [pc, #24]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 8007116:	2200      	movs	r2, #0
 8007118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800711a:	4805      	ldr	r0, [pc, #20]	; (8007130 <MX_USART2_UART_Init+0x4c>)
 800711c:	f00a fa0a 	bl	8011534 <HAL_UART_Init>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007126:	f000 f98b 	bl	8007440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800712a:	bf00      	nop
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20047b14 	.word	0x20047b14
 8007134:	40004400 	.word	0x40004400

08007138 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800713e:	2300      	movs	r3, #0
 8007140:	607b      	str	r3, [r7, #4]
 8007142:	4b14      	ldr	r3, [pc, #80]	; (8007194 <MX_DMA_Init+0x5c>)
 8007144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007146:	4a13      	ldr	r2, [pc, #76]	; (8007194 <MX_DMA_Init+0x5c>)
 8007148:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800714c:	6313      	str	r3, [r2, #48]	; 0x30
 800714e:	4b11      	ldr	r3, [pc, #68]	; (8007194 <MX_DMA_Init+0x5c>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007156:	607b      	str	r3, [r7, #4]
 8007158:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800715a:	2200      	movs	r2, #0
 800715c:	2100      	movs	r1, #0
 800715e:	203a      	movs	r0, #58	; 0x3a
 8007160:	f004 fecb 	bl	800befa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007164:	203a      	movs	r0, #58	; 0x3a
 8007166:	f004 fee4 	bl	800bf32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800716a:	2200      	movs	r2, #0
 800716c:	2100      	movs	r1, #0
 800716e:	203b      	movs	r0, #59	; 0x3b
 8007170:	f004 fec3 	bl	800befa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8007174:	203b      	movs	r0, #59	; 0x3b
 8007176:	f004 fedc 	bl	800bf32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800717a:	2200      	movs	r2, #0
 800717c:	2100      	movs	r1, #0
 800717e:	2045      	movs	r0, #69	; 0x45
 8007180:	f004 febb 	bl	800befa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8007184:	2045      	movs	r0, #69	; 0x45
 8007186:	f004 fed4 	bl	800bf32 <HAL_NVIC_EnableIRQ>

}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40023800 	.word	0x40023800

08007198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08c      	sub	sp, #48	; 0x30
 800719c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800719e:	f107 031c 	add.w	r3, r7, #28
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	605a      	str	r2, [r3, #4]
 80071a8:	609a      	str	r2, [r3, #8]
 80071aa:	60da      	str	r2, [r3, #12]
 80071ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80071ae:	2300      	movs	r3, #0
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	4b9c      	ldr	r3, [pc, #624]	; (8007424 <MX_GPIO_Init+0x28c>)
 80071b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b6:	4a9b      	ldr	r2, [pc, #620]	; (8007424 <MX_GPIO_Init+0x28c>)
 80071b8:	f043 0310 	orr.w	r3, r3, #16
 80071bc:	6313      	str	r3, [r2, #48]	; 0x30
 80071be:	4b99      	ldr	r3, [pc, #612]	; (8007424 <MX_GPIO_Init+0x28c>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	f003 0310 	and.w	r3, r3, #16
 80071c6:	61bb      	str	r3, [r7, #24]
 80071c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	4b95      	ldr	r3, [pc, #596]	; (8007424 <MX_GPIO_Init+0x28c>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	4a94      	ldr	r2, [pc, #592]	; (8007424 <MX_GPIO_Init+0x28c>)
 80071d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d8:	6313      	str	r3, [r2, #48]	; 0x30
 80071da:	4b92      	ldr	r3, [pc, #584]	; (8007424 <MX_GPIO_Init+0x28c>)
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80071e6:	2300      	movs	r3, #0
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	4b8e      	ldr	r3, [pc, #568]	; (8007424 <MX_GPIO_Init+0x28c>)
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	4a8d      	ldr	r2, [pc, #564]	; (8007424 <MX_GPIO_Init+0x28c>)
 80071f0:	f043 0304 	orr.w	r3, r3, #4
 80071f4:	6313      	str	r3, [r2, #48]	; 0x30
 80071f6:	4b8b      	ldr	r3, [pc, #556]	; (8007424 <MX_GPIO_Init+0x28c>)
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	4b87      	ldr	r3, [pc, #540]	; (8007424 <MX_GPIO_Init+0x28c>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	4a86      	ldr	r2, [pc, #536]	; (8007424 <MX_GPIO_Init+0x28c>)
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	6313      	str	r3, [r2, #48]	; 0x30
 8007212:	4b84      	ldr	r3, [pc, #528]	; (8007424 <MX_GPIO_Init+0x28c>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800721e:	2300      	movs	r3, #0
 8007220:	60bb      	str	r3, [r7, #8]
 8007222:	4b80      	ldr	r3, [pc, #512]	; (8007424 <MX_GPIO_Init+0x28c>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	4a7f      	ldr	r2, [pc, #508]	; (8007424 <MX_GPIO_Init+0x28c>)
 8007228:	f043 0302 	orr.w	r3, r3, #2
 800722c:	6313      	str	r3, [r2, #48]	; 0x30
 800722e:	4b7d      	ldr	r3, [pc, #500]	; (8007424 <MX_GPIO_Init+0x28c>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	60bb      	str	r3, [r7, #8]
 8007238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800723a:	2300      	movs	r3, #0
 800723c:	607b      	str	r3, [r7, #4]
 800723e:	4b79      	ldr	r3, [pc, #484]	; (8007424 <MX_GPIO_Init+0x28c>)
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	4a78      	ldr	r2, [pc, #480]	; (8007424 <MX_GPIO_Init+0x28c>)
 8007244:	f043 0308 	orr.w	r3, r3, #8
 8007248:	6313      	str	r3, [r2, #48]	; 0x30
 800724a:	4b76      	ldr	r3, [pc, #472]	; (8007424 <MX_GPIO_Init+0x28c>)
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	607b      	str	r3, [r7, #4]
 8007254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8007256:	2200      	movs	r2, #0
 8007258:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800725c:	4872      	ldr	r0, [pc, #456]	; (8007428 <MX_GPIO_Init+0x290>)
 800725e:	f005 fbe1 	bl	800ca24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8007262:	2200      	movs	r2, #0
 8007264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007268:	4870      	ldr	r0, [pc, #448]	; (800742c <MX_GPIO_Init+0x294>)
 800726a:	f005 fbdb 	bl	800ca24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800726e:	2200      	movs	r2, #0
 8007270:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007274:	486e      	ldr	r0, [pc, #440]	; (8007430 <MX_GPIO_Init+0x298>)
 8007276:	f005 fbd5 	bl	800ca24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800727a:	2200      	movs	r2, #0
 800727c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8007280:	486c      	ldr	r0, [pc, #432]	; (8007434 <MX_GPIO_Init+0x29c>)
 8007282:	f005 fbcf 	bl	800ca24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007286:	2304      	movs	r3, #4
 8007288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800728a:	4b6b      	ldr	r3, [pc, #428]	; (8007438 <MX_GPIO_Init+0x2a0>)
 800728c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800728e:	2300      	movs	r3, #0
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007292:	f107 031c 	add.w	r3, r7, #28
 8007296:	4619      	mov	r1, r3
 8007298:	4863      	ldr	r0, [pc, #396]	; (8007428 <MX_GPIO_Init+0x290>)
 800729a:	f005 fa01 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800729e:	230f      	movs	r3, #15
 80072a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072a2:	2303      	movs	r3, #3
 80072a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072aa:	f107 031c 	add.w	r3, r7, #28
 80072ae:	4619      	mov	r1, r3
 80072b0:	4862      	ldr	r0, [pc, #392]	; (800743c <MX_GPIO_Init+0x2a4>)
 80072b2:	f005 f9f5 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80072b6:	23e1      	movs	r3, #225	; 0xe1
 80072b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072ba:	2303      	movs	r3, #3
 80072bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072c2:	f107 031c 	add.w	r3, r7, #28
 80072c6:	4619      	mov	r1, r3
 80072c8:	485a      	ldr	r0, [pc, #360]	; (8007434 <MX_GPIO_Init+0x29c>)
 80072ca:	f005 f9e9 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80072ce:	2303      	movs	r3, #3
 80072d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072d2:	2303      	movs	r3, #3
 80072d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072da:	f107 031c 	add.w	r3, r7, #28
 80072de:	4619      	mov	r1, r3
 80072e0:	4852      	ldr	r0, [pc, #328]	; (800742c <MX_GPIO_Init+0x294>)
 80072e2:	f005 f9dd 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80072e6:	2304      	movs	r3, #4
 80072e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072ea:	2300      	movs	r3, #0
 80072ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072ee:	2301      	movs	r3, #1
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072f2:	f107 031c 	add.w	r3, r7, #28
 80072f6:	4619      	mov	r1, r3
 80072f8:	484c      	ldr	r0, [pc, #304]	; (800742c <MX_GPIO_Init+0x294>)
 80072fa:	f005 f9d1 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80072fe:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8007302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007304:	2300      	movs	r3, #0
 8007306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007308:	2301      	movs	r3, #1
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800730c:	f107 031c 	add.w	r3, r7, #28
 8007310:	4619      	mov	r1, r3
 8007312:	4845      	ldr	r0, [pc, #276]	; (8007428 <MX_GPIO_Init+0x290>)
 8007314:	f005 f9c4 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007318:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800731c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800731e:	2301      	movs	r3, #1
 8007320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007322:	2300      	movs	r3, #0
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007326:	2300      	movs	r3, #0
 8007328:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800732a:	f107 031c 	add.w	r3, r7, #28
 800732e:	4619      	mov	r1, r3
 8007330:	483d      	ldr	r0, [pc, #244]	; (8007428 <MX_GPIO_Init+0x290>)
 8007332:	f005 f9b5 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800733a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800733c:	2301      	movs	r3, #1
 800733e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007340:	2300      	movs	r3, #0
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007344:	2300      	movs	r3, #0
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007348:	f107 031c 	add.w	r3, r7, #28
 800734c:	4619      	mov	r1, r3
 800734e:	4837      	ldr	r0, [pc, #220]	; (800742c <MX_GPIO_Init+0x294>)
 8007350:	f005 f9a6 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800735a:	4b37      	ldr	r3, [pc, #220]	; (8007438 <MX_GPIO_Init+0x2a0>)
 800735c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007362:	f107 031c 	add.w	r3, r7, #28
 8007366:	4619      	mov	r1, r3
 8007368:	4831      	ldr	r0, [pc, #196]	; (8007430 <MX_GPIO_Init+0x298>)
 800736a:	f005 f999 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800736e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007374:	2301      	movs	r3, #1
 8007376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007378:	2300      	movs	r3, #0
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800737c:	2300      	movs	r3, #0
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007380:	f107 031c 	add.w	r3, r7, #28
 8007384:	4619      	mov	r1, r3
 8007386:	482a      	ldr	r0, [pc, #168]	; (8007430 <MX_GPIO_Init+0x298>)
 8007388:	f005 f98a 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800738c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007392:	2301      	movs	r3, #1
 8007394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007396:	2301      	movs	r3, #1
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800739a:	2300      	movs	r3, #0
 800739c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800739e:	f107 031c 	add.w	r3, r7, #28
 80073a2:	4619      	mov	r1, r3
 80073a4:	4822      	ldr	r0, [pc, #136]	; (8007430 <MX_GPIO_Init+0x298>)
 80073a6:	f005 f97b 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80073aa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80073ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073b0:	2301      	movs	r3, #1
 80073b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073b8:	2300      	movs	r3, #0
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073bc:	f107 031c 	add.w	r3, r7, #28
 80073c0:	4619      	mov	r1, r3
 80073c2:	481c      	ldr	r0, [pc, #112]	; (8007434 <MX_GPIO_Init+0x29c>)
 80073c4:	f005 f96c 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80073c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073ce:	2300      	movs	r3, #0
 80073d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073d6:	f107 031c 	add.w	r3, r7, #28
 80073da:	4619      	mov	r1, r3
 80073dc:	4815      	ldr	r0, [pc, #84]	; (8007434 <MX_GPIO_Init+0x29c>)
 80073de:	f005 f95f 	bl	800c6a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80073e2:	239b      	movs	r3, #155	; 0x9b
 80073e4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073e6:	2300      	movs	r3, #0
 80073e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073ea:	2301      	movs	r3, #1
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80073ee:	f107 031c 	add.w	r3, r7, #28
 80073f2:	4619      	mov	r1, r3
 80073f4:	480e      	ldr	r0, [pc, #56]	; (8007430 <MX_GPIO_Init+0x298>)
 80073f6:	f005 f953 	bl	800c6a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80073fa:	2200      	movs	r2, #0
 80073fc:	2100      	movs	r1, #0
 80073fe:	2008      	movs	r0, #8
 8007400:	f004 fd7b 	bl	800befa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8007404:	2008      	movs	r0, #8
 8007406:	f004 fd94 	bl	800bf32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800740a:	2200      	movs	r2, #0
 800740c:	2100      	movs	r1, #0
 800740e:	2017      	movs	r0, #23
 8007410:	f004 fd73 	bl	800befa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007414:	2017      	movs	r0, #23
 8007416:	f004 fd8c 	bl	800bf32 <HAL_NVIC_EnableIRQ>

}
 800741a:	bf00      	nop
 800741c:	3730      	adds	r7, #48	; 0x30
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	40023800 	.word	0x40023800
 8007428:	40021000 	.word	0x40021000
 800742c:	40020400 	.word	0x40020400
 8007430:	40020c00 	.word	0x40020c00
 8007434:	40020000 	.word	0x40020000
 8007438:	10310000 	.word	0x10310000
 800743c:	40020800 	.word	0x40020800

08007440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007444:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007446:	e7fe      	b.n	8007446 <Error_Handler+0x6>

08007448 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 800744c:	bf00      	nop
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800745e:	2300      	movs	r3, #0
 8007460:	607b      	str	r3, [r7, #4]
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <HAL_MspInit+0x4c>)
 8007464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007466:	4a0f      	ldr	r2, [pc, #60]	; (80074a4 <HAL_MspInit+0x4c>)
 8007468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800746c:	6453      	str	r3, [r2, #68]	; 0x44
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <HAL_MspInit+0x4c>)
 8007470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007476:	607b      	str	r3, [r7, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800747a:	2300      	movs	r3, #0
 800747c:	603b      	str	r3, [r7, #0]
 800747e:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <HAL_MspInit+0x4c>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	4a08      	ldr	r2, [pc, #32]	; (80074a4 <HAL_MspInit+0x4c>)
 8007484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007488:	6413      	str	r3, [r2, #64]	; 0x40
 800748a:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <HAL_MspInit+0x4c>)
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40023800 	.word	0x40023800

080074a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08c      	sub	sp, #48	; 0x30
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074b0:	f107 031c 	add.w	r3, r7, #28
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	605a      	str	r2, [r3, #4]
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	60da      	str	r2, [r3, #12]
 80074be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a4a      	ldr	r2, [pc, #296]	; (80075f0 <HAL_ADC_MspInit+0x148>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	f040 808e 	bne.w	80075e8 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80074cc:	2300      	movs	r3, #0
 80074ce:	61bb      	str	r3, [r7, #24]
 80074d0:	4b48      	ldr	r3, [pc, #288]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 80074d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d4:	4a47      	ldr	r2, [pc, #284]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 80074d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074da:	6453      	str	r3, [r2, #68]	; 0x44
 80074dc:	4b45      	ldr	r3, [pc, #276]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 80074de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	4b41      	ldr	r3, [pc, #260]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	4a40      	ldr	r2, [pc, #256]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 80074f2:	f043 0304 	orr.w	r3, r3, #4
 80074f6:	6313      	str	r3, [r2, #48]	; 0x30
 80074f8:	4b3e      	ldr	r3, [pc, #248]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007504:	2300      	movs	r3, #0
 8007506:	613b      	str	r3, [r7, #16]
 8007508:	4b3a      	ldr	r3, [pc, #232]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	4a39      	ldr	r2, [pc, #228]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	6313      	str	r3, [r2, #48]	; 0x30
 8007514:	4b37      	ldr	r3, [pc, #220]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007520:	2300      	movs	r3, #0
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	4b33      	ldr	r3, [pc, #204]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 8007526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007528:	4a32      	ldr	r2, [pc, #200]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 800752a:	f043 0302 	orr.w	r3, r3, #2
 800752e:	6313      	str	r3, [r2, #48]	; 0x30
 8007530:	4b30      	ldr	r3, [pc, #192]	; (80075f4 <HAL_ADC_MspInit+0x14c>)
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800753c:	230f      	movs	r3, #15
 800753e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007540:	2303      	movs	r3, #3
 8007542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007544:	2300      	movs	r3, #0
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007548:	f107 031c 	add.w	r3, r7, #28
 800754c:	4619      	mov	r1, r3
 800754e:	482a      	ldr	r0, [pc, #168]	; (80075f8 <HAL_ADC_MspInit+0x150>)
 8007550:	f005 f8a6 	bl	800c6a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007554:	23ff      	movs	r3, #255	; 0xff
 8007556:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007558:	2303      	movs	r3, #3
 800755a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800755c:	2300      	movs	r3, #0
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007560:	f107 031c 	add.w	r3, r7, #28
 8007564:	4619      	mov	r1, r3
 8007566:	4825      	ldr	r0, [pc, #148]	; (80075fc <HAL_ADC_MspInit+0x154>)
 8007568:	f005 f89a 	bl	800c6a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800756c:	2303      	movs	r3, #3
 800756e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007570:	2303      	movs	r3, #3
 8007572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007574:	2300      	movs	r3, #0
 8007576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007578:	f107 031c 	add.w	r3, r7, #28
 800757c:	4619      	mov	r1, r3
 800757e:	4820      	ldr	r0, [pc, #128]	; (8007600 <HAL_ADC_MspInit+0x158>)
 8007580:	f005 f88e 	bl	800c6a0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8007584:	4b1f      	ldr	r3, [pc, #124]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 8007586:	4a20      	ldr	r2, [pc, #128]	; (8007608 <HAL_ADC_MspInit+0x160>)
 8007588:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800758a:	4b1e      	ldr	r3, [pc, #120]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 800758c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007590:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007592:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 8007594:	2200      	movs	r2, #0
 8007596:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007598:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 800759a:	2200      	movs	r2, #0
 800759c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800759e:	4b19      	ldr	r3, [pc, #100]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 80075a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075a4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80075a6:	4b17      	ldr	r3, [pc, #92]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 80075a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075ac:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80075ae:	4b15      	ldr	r3, [pc, #84]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 80075b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075b4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80075b6:	4b13      	ldr	r3, [pc, #76]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 80075b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075bc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 80075c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075c4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80075c6:	4b0f      	ldr	r3, [pc, #60]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80075cc:	480d      	ldr	r0, [pc, #52]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 80075ce:	f004 fccb 	bl	800bf68 <HAL_DMA_Init>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80075d8:	f7ff ff32 	bl	8007440 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a09      	ldr	r2, [pc, #36]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38
 80075e2:	4a08      	ldr	r2, [pc, #32]	; (8007604 <HAL_ADC_MspInit+0x15c>)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80075e8:	bf00      	nop
 80075ea:	3730      	adds	r7, #48	; 0x30
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40012100 	.word	0x40012100
 80075f4:	40023800 	.word	0x40023800
 80075f8:	40020800 	.word	0x40020800
 80075fc:	40020000 	.word	0x40020000
 8007600:	40020400 	.word	0x40020400
 8007604:	20047b54 	.word	0x20047b54
 8007608:	40026440 	.word	0x40026440

0800760c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08c      	sub	sp, #48	; 0x30
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007614:	f107 031c 	add.w	r3, r7, #28
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	605a      	str	r2, [r3, #4]
 800761e:	609a      	str	r2, [r3, #8]
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a32      	ldr	r2, [pc, #200]	; (80076f4 <HAL_I2C_MspInit+0xe8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d12c      	bne.n	8007688 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800762e:	2300      	movs	r3, #0
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	4b31      	ldr	r3, [pc, #196]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 8007634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007636:	4a30      	ldr	r2, [pc, #192]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 8007638:	f043 0302 	orr.w	r3, r3, #2
 800763c:	6313      	str	r3, [r2, #48]	; 0x30
 800763e:	4b2e      	ldr	r3, [pc, #184]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800764a:	23c0      	movs	r3, #192	; 0xc0
 800764c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800764e:	2312      	movs	r3, #18
 8007650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007652:	2301      	movs	r3, #1
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007656:	2303      	movs	r3, #3
 8007658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800765a:	2304      	movs	r3, #4
 800765c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800765e:	f107 031c 	add.w	r3, r7, #28
 8007662:	4619      	mov	r1, r3
 8007664:	4825      	ldr	r0, [pc, #148]	; (80076fc <HAL_I2C_MspInit+0xf0>)
 8007666:	f005 f81b 	bl	800c6a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	4b22      	ldr	r3, [pc, #136]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	4a21      	ldr	r2, [pc, #132]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 8007674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007678:	6413      	str	r3, [r2, #64]	; 0x40
 800767a:	4b1f      	ldr	r3, [pc, #124]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007686:	e031      	b.n	80076ec <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1c      	ldr	r2, [pc, #112]	; (8007700 <HAL_I2C_MspInit+0xf4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d12c      	bne.n	80076ec <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007692:	2300      	movs	r3, #0
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	4b18      	ldr	r3, [pc, #96]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	4a17      	ldr	r2, [pc, #92]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 800769c:	f043 0302 	orr.w	r3, r3, #2
 80076a0:	6313      	str	r3, [r2, #48]	; 0x30
 80076a2:	4b15      	ldr	r3, [pc, #84]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 80076a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	613b      	str	r3, [r7, #16]
 80076ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80076ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80076b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076b4:	2312      	movs	r3, #18
 80076b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076b8:	2301      	movs	r3, #1
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076bc:	2303      	movs	r3, #3
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80076c0:	2304      	movs	r3, #4
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076c4:	f107 031c 	add.w	r3, r7, #28
 80076c8:	4619      	mov	r1, r3
 80076ca:	480c      	ldr	r0, [pc, #48]	; (80076fc <HAL_I2C_MspInit+0xf0>)
 80076cc:	f004 ffe8 	bl	800c6a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	4b08      	ldr	r3, [pc, #32]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	4a07      	ldr	r2, [pc, #28]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 80076da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076de:	6413      	str	r3, [r2, #64]	; 0x40
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <HAL_I2C_MspInit+0xec>)
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	68fb      	ldr	r3, [r7, #12]
}
 80076ec:	bf00      	nop
 80076ee:	3730      	adds	r7, #48	; 0x30
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40005400 	.word	0x40005400
 80076f8:	40023800 	.word	0x40023800
 80076fc:	40020400 	.word	0x40020400
 8007700:	40005800 	.word	0x40005800

08007704 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08a      	sub	sp, #40	; 0x28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800770c:	f107 0314 	add.w	r3, r7, #20
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	609a      	str	r2, [r3, #8]
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a69      	ldr	r2, [pc, #420]	; (80078c8 <HAL_SD_MspInit+0x1c4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	f040 80cb 	bne.w	80078be <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007728:	2300      	movs	r3, #0
 800772a:	613b      	str	r3, [r7, #16]
 800772c:	4b67      	ldr	r3, [pc, #412]	; (80078cc <HAL_SD_MspInit+0x1c8>)
 800772e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007730:	4a66      	ldr	r2, [pc, #408]	; (80078cc <HAL_SD_MspInit+0x1c8>)
 8007732:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007736:	6453      	str	r3, [r2, #68]	; 0x44
 8007738:	4b64      	ldr	r3, [pc, #400]	; (80078cc <HAL_SD_MspInit+0x1c8>)
 800773a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	4b60      	ldr	r3, [pc, #384]	; (80078cc <HAL_SD_MspInit+0x1c8>)
 800774a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774c:	4a5f      	ldr	r2, [pc, #380]	; (80078cc <HAL_SD_MspInit+0x1c8>)
 800774e:	f043 0304 	orr.w	r3, r3, #4
 8007752:	6313      	str	r3, [r2, #48]	; 0x30
 8007754:	4b5d      	ldr	r3, [pc, #372]	; (80078cc <HAL_SD_MspInit+0x1c8>)
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007760:	2300      	movs	r3, #0
 8007762:	60bb      	str	r3, [r7, #8]
 8007764:	4b59      	ldr	r3, [pc, #356]	; (80078cc <HAL_SD_MspInit+0x1c8>)
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	4a58      	ldr	r2, [pc, #352]	; (80078cc <HAL_SD_MspInit+0x1c8>)
 800776a:	f043 0308 	orr.w	r3, r3, #8
 800776e:	6313      	str	r3, [r2, #48]	; 0x30
 8007770:	4b56      	ldr	r3, [pc, #344]	; (80078cc <HAL_SD_MspInit+0x1c8>)
 8007772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800777c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007780:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007782:	2302      	movs	r3, #2
 8007784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800778a:	2303      	movs	r3, #3
 800778c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800778e:	230c      	movs	r3, #12
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007792:	f107 0314 	add.w	r3, r7, #20
 8007796:	4619      	mov	r1, r3
 8007798:	484d      	ldr	r0, [pc, #308]	; (80078d0 <HAL_SD_MspInit+0x1cc>)
 800779a:	f004 ff81 	bl	800c6a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800779e:	2304      	movs	r3, #4
 80077a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077a2:	2302      	movs	r3, #2
 80077a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077aa:	2303      	movs	r3, #3
 80077ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80077ae:	230c      	movs	r3, #12
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077b2:	f107 0314 	add.w	r3, r7, #20
 80077b6:	4619      	mov	r1, r3
 80077b8:	4846      	ldr	r0, [pc, #280]	; (80078d4 <HAL_SD_MspInit+0x1d0>)
 80077ba:	f004 ff71 	bl	800c6a0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80077be:	4b46      	ldr	r3, [pc, #280]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 80077c0:	4a46      	ldr	r2, [pc, #280]	; (80078dc <HAL_SD_MspInit+0x1d8>)
 80077c2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80077c4:	4b44      	ldr	r3, [pc, #272]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 80077c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077ca:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80077cc:	4b42      	ldr	r3, [pc, #264]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80077d2:	4b41      	ldr	r3, [pc, #260]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80077d8:	4b3f      	ldr	r3, [pc, #252]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 80077da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077de:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80077e0:	4b3d      	ldr	r3, [pc, #244]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 80077e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077e6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80077e8:	4b3b      	ldr	r3, [pc, #236]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 80077ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80077ee:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80077f0:	4b39      	ldr	r3, [pc, #228]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 80077f2:	2220      	movs	r2, #32
 80077f4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80077f6:	4b38      	ldr	r3, [pc, #224]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 80077f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80077fc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80077fe:	4b36      	ldr	r3, [pc, #216]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 8007800:	2204      	movs	r2, #4
 8007802:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007804:	4b34      	ldr	r3, [pc, #208]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 8007806:	2203      	movs	r2, #3
 8007808:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800780a:	4b33      	ldr	r3, [pc, #204]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 800780c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007810:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007812:	4b31      	ldr	r3, [pc, #196]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 8007814:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007818:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800781a:	482f      	ldr	r0, [pc, #188]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 800781c:	f004 fba4 	bl	800bf68 <HAL_DMA_Init>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007826:	f7ff fe0b 	bl	8007440 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a2a      	ldr	r2, [pc, #168]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 800782e:	641a      	str	r2, [r3, #64]	; 0x40
 8007830:	4a29      	ldr	r2, [pc, #164]	; (80078d8 <HAL_SD_MspInit+0x1d4>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007836:	4b2a      	ldr	r3, [pc, #168]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 8007838:	4a2a      	ldr	r2, [pc, #168]	; (80078e4 <HAL_SD_MspInit+0x1e0>)
 800783a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800783c:	4b28      	ldr	r3, [pc, #160]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 800783e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007842:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007844:	4b26      	ldr	r3, [pc, #152]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 8007846:	2240      	movs	r2, #64	; 0x40
 8007848:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800784a:	4b25      	ldr	r3, [pc, #148]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 800784c:	2200      	movs	r2, #0
 800784e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007850:	4b23      	ldr	r3, [pc, #140]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 8007852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007856:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007858:	4b21      	ldr	r3, [pc, #132]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 800785a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800785e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007860:	4b1f      	ldr	r3, [pc, #124]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 8007862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007866:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007868:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 800786a:	2220      	movs	r2, #32
 800786c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800786e:	4b1c      	ldr	r3, [pc, #112]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 8007870:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007874:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007876:	4b1a      	ldr	r3, [pc, #104]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 8007878:	2204      	movs	r2, #4
 800787a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800787c:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 800787e:	2203      	movs	r2, #3
 8007880:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8007882:	4b17      	ldr	r3, [pc, #92]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 8007884:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007888:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800788a:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 800788c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007890:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8007892:	4813      	ldr	r0, [pc, #76]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 8007894:	f004 fb68 	bl	800bf68 <HAL_DMA_Init>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800789e:	f7ff fdcf 	bl	8007440 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a0e      	ldr	r2, [pc, #56]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 80078a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80078a8:	4a0d      	ldr	r2, [pc, #52]	; (80078e0 <HAL_SD_MspInit+0x1dc>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80078ae:	2200      	movs	r2, #0
 80078b0:	2100      	movs	r1, #0
 80078b2:	2031      	movs	r0, #49	; 0x31
 80078b4:	f004 fb21 	bl	800befa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80078b8:	2031      	movs	r0, #49	; 0x31
 80078ba:	f004 fb3a 	bl	800bf32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80078be:	bf00      	nop
 80078c0:	3728      	adds	r7, #40	; 0x28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	40012c00 	.word	0x40012c00
 80078cc:	40023800 	.word	0x40023800
 80078d0:	40020800 	.word	0x40020800
 80078d4:	40020c00 	.word	0x40020c00
 80078d8:	2004767c 	.word	0x2004767c
 80078dc:	40026458 	.word	0x40026458
 80078e0:	200479b0 	.word	0x200479b0
 80078e4:	400264a0 	.word	0x400264a0

080078e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	; 0x28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078f0:	f107 0314 	add.w	r3, r7, #20
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	605a      	str	r2, [r3, #4]
 80078fa:	609a      	str	r2, [r3, #8]
 80078fc:	60da      	str	r2, [r3, #12]
 80078fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a19      	ldr	r2, [pc, #100]	; (800796c <HAL_SPI_MspInit+0x84>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d12c      	bne.n	8007964 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800790a:	2300      	movs	r3, #0
 800790c:	613b      	str	r3, [r7, #16]
 800790e:	4b18      	ldr	r3, [pc, #96]	; (8007970 <HAL_SPI_MspInit+0x88>)
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	4a17      	ldr	r2, [pc, #92]	; (8007970 <HAL_SPI_MspInit+0x88>)
 8007914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007918:	6413      	str	r3, [r2, #64]	; 0x40
 800791a:	4b15      	ldr	r3, [pc, #84]	; (8007970 <HAL_SPI_MspInit+0x88>)
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	4b11      	ldr	r3, [pc, #68]	; (8007970 <HAL_SPI_MspInit+0x88>)
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	4a10      	ldr	r2, [pc, #64]	; (8007970 <HAL_SPI_MspInit+0x88>)
 8007930:	f043 0302 	orr.w	r3, r3, #2
 8007934:	6313      	str	r3, [r2, #48]	; 0x30
 8007936:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <HAL_SPI_MspInit+0x88>)
 8007938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007942:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007948:	2302      	movs	r3, #2
 800794a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794c:	2300      	movs	r3, #0
 800794e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007950:	2303      	movs	r3, #3
 8007952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007954:	2305      	movs	r3, #5
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007958:	f107 0314 	add.w	r3, r7, #20
 800795c:	4619      	mov	r1, r3
 800795e:	4805      	ldr	r0, [pc, #20]	; (8007974 <HAL_SPI_MspInit+0x8c>)
 8007960:	f004 fe9e 	bl	800c6a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007964:	bf00      	nop
 8007966:	3728      	adds	r7, #40	; 0x28
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	40003800 	.word	0x40003800
 8007970:	40023800 	.word	0x40023800
 8007974:	40020400 	.word	0x40020400

08007978 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08c      	sub	sp, #48	; 0x30
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007980:	f107 031c 	add.w	r3, r7, #28
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	605a      	str	r2, [r3, #4]
 800798a:	609a      	str	r2, [r3, #8]
 800798c:	60da      	str	r2, [r3, #12]
 800798e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a2d      	ldr	r2, [pc, #180]	; (8007a4c <HAL_TIM_PWM_MspInit+0xd4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d12d      	bne.n	80079f6 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800799a:	2300      	movs	r3, #0
 800799c:	61bb      	str	r3, [r7, #24]
 800799e:	4b2c      	ldr	r3, [pc, #176]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 80079a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a2:	4a2b      	ldr	r2, [pc, #172]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	6453      	str	r3, [r2, #68]	; 0x44
 80079aa:	4b29      	ldr	r3, [pc, #164]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 80079ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	61bb      	str	r3, [r7, #24]
 80079b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]
 80079ba:	4b25      	ldr	r3, [pc, #148]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 80079bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079be:	4a24      	ldr	r2, [pc, #144]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 80079c0:	f043 0310 	orr.w	r3, r3, #16
 80079c4:	6313      	str	r3, [r2, #48]	; 0x30
 80079c6:	4b22      	ldr	r3, [pc, #136]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	f003 0310 	and.w	r3, r3, #16
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80079d2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80079d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079d8:	2302      	movs	r3, #2
 80079da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079dc:	2300      	movs	r3, #0
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079e0:	2300      	movs	r3, #0
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80079e4:	2301      	movs	r3, #1
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80079e8:	f107 031c 	add.w	r3, r7, #28
 80079ec:	4619      	mov	r1, r3
 80079ee:	4819      	ldr	r0, [pc, #100]	; (8007a54 <HAL_TIM_PWM_MspInit+0xdc>)
 80079f0:	f004 fe56 	bl	800c6a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80079f4:	e026      	b.n	8007a44 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <HAL_TIM_PWM_MspInit+0xe0>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10e      	bne.n	8007a1e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	4b12      	ldr	r3, [pc, #72]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	4a11      	ldr	r2, [pc, #68]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a0a:	f043 0302 	orr.w	r3, r3, #2
 8007a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8007a10:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	613b      	str	r3, [r7, #16]
 8007a1a:	693b      	ldr	r3, [r7, #16]
}
 8007a1c:	e012      	b.n	8007a44 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a0e      	ldr	r2, [pc, #56]	; (8007a5c <HAL_TIM_PWM_MspInit+0xe4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d10d      	bne.n	8007a44 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	4b08      	ldr	r3, [pc, #32]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a30:	4a07      	ldr	r2, [pc, #28]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a32:	f043 0304 	orr.w	r3, r3, #4
 8007a36:	6413      	str	r3, [r2, #64]	; 0x40
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <HAL_TIM_PWM_MspInit+0xd8>)
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	68fb      	ldr	r3, [r7, #12]
}
 8007a44:	bf00      	nop
 8007a46:	3730      	adds	r7, #48	; 0x30
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40010000 	.word	0x40010000
 8007a50:	40023800 	.word	0x40023800
 8007a54:	40021000 	.word	0x40021000
 8007a58:	40000400 	.word	0x40000400
 8007a5c:	40000800 	.word	0x40000800

08007a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a3e      	ldr	r2, [pc, #248]	; (8007b68 <HAL_TIM_Base_MspInit+0x108>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d116      	bne.n	8007aa0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007a72:	2300      	movs	r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	4b3d      	ldr	r3, [pc, #244]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	4a3c      	ldr	r2, [pc, #240]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007a7c:	f043 0310 	orr.w	r3, r3, #16
 8007a80:	6413      	str	r3, [r2, #64]	; 0x40
 8007a82:	4b3a      	ldr	r3, [pc, #232]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	61fb      	str	r3, [r7, #28]
 8007a8c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2101      	movs	r1, #1
 8007a92:	2036      	movs	r0, #54	; 0x36
 8007a94:	f004 fa31 	bl	800befa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007a98:	2036      	movs	r0, #54	; 0x36
 8007a9a:	f004 fa4a 	bl	800bf32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007a9e:	e05e      	b.n	8007b5e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a32      	ldr	r2, [pc, #200]	; (8007b70 <HAL_TIM_Base_MspInit+0x110>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d116      	bne.n	8007ad8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	4b2f      	ldr	r3, [pc, #188]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	4a2e      	ldr	r2, [pc, #184]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007ab4:	f043 0320 	orr.w	r3, r3, #32
 8007ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8007aba:	4b2c      	ldr	r3, [pc, #176]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	61bb      	str	r3, [r7, #24]
 8007ac4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2100      	movs	r1, #0
 8007aca:	2037      	movs	r0, #55	; 0x37
 8007acc:	f004 fa15 	bl	800befa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007ad0:	2037      	movs	r0, #55	; 0x37
 8007ad2:	f004 fa2e 	bl	800bf32 <HAL_NVIC_EnableIRQ>
}
 8007ad6:	e042      	b.n	8007b5e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a25      	ldr	r2, [pc, #148]	; (8007b74 <HAL_TIM_Base_MspInit+0x114>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d10e      	bne.n	8007b00 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
 8007ae6:	4b21      	ldr	r3, [pc, #132]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aea:	4a20      	ldr	r2, [pc, #128]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af0:	6453      	str	r3, [r2, #68]	; 0x44
 8007af2:	4b1e      	ldr	r3, [pc, #120]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	697b      	ldr	r3, [r7, #20]
}
 8007afe:	e02e      	b.n	8007b5e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1c      	ldr	r2, [pc, #112]	; (8007b78 <HAL_TIM_Base_MspInit+0x118>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d10e      	bne.n	8007b28 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
 8007b0e:	4b17      	ldr	r3, [pc, #92]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b12:	4a16      	ldr	r2, [pc, #88]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b18:	6453      	str	r3, [r2, #68]	; 0x44
 8007b1a:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	693b      	ldr	r3, [r7, #16]
}
 8007b26:	e01a      	b.n	8007b5e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a13      	ldr	r2, [pc, #76]	; (8007b7c <HAL_TIM_Base_MspInit+0x11c>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d115      	bne.n	8007b5e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	4b0d      	ldr	r3, [pc, #52]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	4a0c      	ldr	r2, [pc, #48]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b40:	6413      	str	r3, [r2, #64]	; 0x40
 8007b42:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <HAL_TIM_Base_MspInit+0x10c>)
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2100      	movs	r1, #0
 8007b52:	202c      	movs	r0, #44	; 0x2c
 8007b54:	f004 f9d1 	bl	800befa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007b58:	202c      	movs	r0, #44	; 0x2c
 8007b5a:	f004 f9ea 	bl	800bf32 <HAL_NVIC_EnableIRQ>
}
 8007b5e:	bf00      	nop
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40001000 	.word	0x40001000
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	40001400 	.word	0x40001400
 8007b74:	40014400 	.word	0x40014400
 8007b78:	40014800 	.word	0x40014800
 8007b7c:	40001c00 	.word	0x40001c00

08007b80 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08a      	sub	sp, #40	; 0x28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b88:	f107 0314 	add.w	r3, r7, #20
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	605a      	str	r2, [r3, #4]
 8007b92:	609a      	str	r2, [r3, #8]
 8007b94:	60da      	str	r2, [r3, #12]
 8007b96:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <HAL_TIM_Encoder_MspInit+0x94>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d133      	bne.n	8007c0a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]
 8007ba6:	4b1c      	ldr	r3, [pc, #112]	; (8007c18 <HAL_TIM_Encoder_MspInit+0x98>)
 8007ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007baa:	4a1b      	ldr	r2, [pc, #108]	; (8007c18 <HAL_TIM_Encoder_MspInit+0x98>)
 8007bac:	f043 0302 	orr.w	r3, r3, #2
 8007bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8007bb2:	4b19      	ldr	r3, [pc, #100]	; (8007c18 <HAL_TIM_Encoder_MspInit+0x98>)
 8007bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	4b15      	ldr	r3, [pc, #84]	; (8007c18 <HAL_TIM_Encoder_MspInit+0x98>)
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc6:	4a14      	ldr	r2, [pc, #80]	; (8007c18 <HAL_TIM_Encoder_MspInit+0x98>)
 8007bc8:	f043 0304 	orr.w	r3, r3, #4
 8007bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <HAL_TIM_Encoder_MspInit+0x98>)
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007bda:	23c0      	movs	r3, #192	; 0xc0
 8007bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bde:	2302      	movs	r3, #2
 8007be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007be6:	2300      	movs	r3, #0
 8007be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007bea:	2303      	movs	r3, #3
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bee:	f107 0314 	add.w	r3, r7, #20
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4809      	ldr	r0, [pc, #36]	; (8007c1c <HAL_TIM_Encoder_MspInit+0x9c>)
 8007bf6:	f004 fd53 	bl	800c6a0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	202c      	movs	r0, #44	; 0x2c
 8007c00:	f004 f97b 	bl	800befa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007c04:	202c      	movs	r0, #44	; 0x2c
 8007c06:	f004 f994 	bl	800bf32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007c0a:	bf00      	nop
 8007c0c:	3728      	adds	r7, #40	; 0x28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40010400 	.word	0x40010400
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	40020800 	.word	0x40020800

08007c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08c      	sub	sp, #48	; 0x30
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c28:	f107 031c 	add.w	r3, r7, #28
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	609a      	str	r2, [r3, #8]
 8007c34:	60da      	str	r2, [r3, #12]
 8007c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a5c      	ldr	r2, [pc, #368]	; (8007db0 <HAL_TIM_MspPostInit+0x190>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d11f      	bne.n	8007c82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c42:	2300      	movs	r3, #0
 8007c44:	61bb      	str	r3, [r7, #24]
 8007c46:	4b5b      	ldr	r3, [pc, #364]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	4a5a      	ldr	r2, [pc, #360]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007c4c:	f043 0310 	orr.w	r3, r3, #16
 8007c50:	6313      	str	r3, [r2, #48]	; 0x30
 8007c52:	4b58      	ldr	r3, [pc, #352]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	f003 0310 	and.w	r3, r3, #16
 8007c5a:	61bb      	str	r3, [r7, #24]
 8007c5c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c64:	2302      	movs	r3, #2
 8007c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007c70:	2301      	movs	r3, #1
 8007c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c74:	f107 031c 	add.w	r3, r7, #28
 8007c78:	4619      	mov	r1, r3
 8007c7a:	484f      	ldr	r0, [pc, #316]	; (8007db8 <HAL_TIM_MspPostInit+0x198>)
 8007c7c:	f004 fd10 	bl	800c6a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007c80:	e091      	b.n	8007da6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a4d      	ldr	r2, [pc, #308]	; (8007dbc <HAL_TIM_MspPostInit+0x19c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d11e      	bne.n	8007cca <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	4b48      	ldr	r3, [pc, #288]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	4a47      	ldr	r2, [pc, #284]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007c96:	f043 0302 	orr.w	r3, r3, #2
 8007c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c9c:	4b45      	ldr	r3, [pc, #276]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007ca8:	2330      	movs	r3, #48	; 0x30
 8007caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cac:	2302      	movs	r3, #2
 8007cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cbc:	f107 031c 	add.w	r3, r7, #28
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	483f      	ldr	r0, [pc, #252]	; (8007dc0 <HAL_TIM_MspPostInit+0x1a0>)
 8007cc4:	f004 fcec 	bl	800c6a0 <HAL_GPIO_Init>
}
 8007cc8:	e06d      	b.n	8007da6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a3d      	ldr	r2, [pc, #244]	; (8007dc4 <HAL_TIM_MspPostInit+0x1a4>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d11f      	bne.n	8007d14 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	613b      	str	r3, [r7, #16]
 8007cd8:	4b36      	ldr	r3, [pc, #216]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cdc:	4a35      	ldr	r2, [pc, #212]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007cde:	f043 0308 	orr.w	r3, r3, #8
 8007ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ce4:	4b33      	ldr	r3, [pc, #204]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	f003 0308 	and.w	r3, r3, #8
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007cf0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007d02:	2302      	movs	r3, #2
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d06:	f107 031c 	add.w	r3, r7, #28
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	482e      	ldr	r0, [pc, #184]	; (8007dc8 <HAL_TIM_MspPostInit+0x1a8>)
 8007d0e:	f004 fcc7 	bl	800c6a0 <HAL_GPIO_Init>
}
 8007d12:	e048      	b.n	8007da6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a2c      	ldr	r2, [pc, #176]	; (8007dcc <HAL_TIM_MspPostInit+0x1ac>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d11f      	bne.n	8007d5e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	4a23      	ldr	r2, [pc, #140]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007d28:	f043 0302 	orr.w	r3, r3, #2
 8007d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d2e:	4b21      	ldr	r3, [pc, #132]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d40:	2302      	movs	r3, #2
 8007d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d50:	f107 031c 	add.w	r3, r7, #28
 8007d54:	4619      	mov	r1, r3
 8007d56:	481a      	ldr	r0, [pc, #104]	; (8007dc0 <HAL_TIM_MspPostInit+0x1a0>)
 8007d58:	f004 fca2 	bl	800c6a0 <HAL_GPIO_Init>
}
 8007d5c:	e023      	b.n	8007da6 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1b      	ldr	r2, [pc, #108]	; (8007dd0 <HAL_TIM_MspPostInit+0x1b0>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d11e      	bne.n	8007da6 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60bb      	str	r3, [r7, #8]
 8007d6c:	4b11      	ldr	r3, [pc, #68]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d70:	4a10      	ldr	r2, [pc, #64]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007d72:	f043 0302 	orr.w	r3, r3, #2
 8007d76:	6313      	str	r3, [r2, #48]	; 0x30
 8007d78:	4b0e      	ldr	r3, [pc, #56]	; (8007db4 <HAL_TIM_MspPostInit+0x194>)
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7c:	f003 0302 	and.w	r3, r3, #2
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d92:	2300      	movs	r3, #0
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007d96:	2303      	movs	r3, #3
 8007d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d9a:	f107 031c 	add.w	r3, r7, #28
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4807      	ldr	r0, [pc, #28]	; (8007dc0 <HAL_TIM_MspPostInit+0x1a0>)
 8007da2:	f004 fc7d 	bl	800c6a0 <HAL_GPIO_Init>
}
 8007da6:	bf00      	nop
 8007da8:	3730      	adds	r7, #48	; 0x30
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	40010000 	.word	0x40010000
 8007db4:	40023800 	.word	0x40023800
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	40000400 	.word	0x40000400
 8007dc0:	40020400 	.word	0x40020400
 8007dc4:	40000800 	.word	0x40000800
 8007dc8:	40020c00 	.word	0x40020c00
 8007dcc:	40014400 	.word	0x40014400
 8007dd0:	40014800 	.word	0x40014800

08007dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08a      	sub	sp, #40	; 0x28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ddc:	f107 0314 	add.w	r3, r7, #20
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	605a      	str	r2, [r3, #4]
 8007de6:	609a      	str	r2, [r3, #8]
 8007de8:	60da      	str	r2, [r3, #12]
 8007dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a19      	ldr	r2, [pc, #100]	; (8007e58 <HAL_UART_MspInit+0x84>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d12b      	bne.n	8007e4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007df6:	2300      	movs	r3, #0
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	4b18      	ldr	r3, [pc, #96]	; (8007e5c <HAL_UART_MspInit+0x88>)
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	4a17      	ldr	r2, [pc, #92]	; (8007e5c <HAL_UART_MspInit+0x88>)
 8007e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e04:	6413      	str	r3, [r2, #64]	; 0x40
 8007e06:	4b15      	ldr	r3, [pc, #84]	; (8007e5c <HAL_UART_MspInit+0x88>)
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <HAL_UART_MspInit+0x88>)
 8007e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1a:	4a10      	ldr	r2, [pc, #64]	; (8007e5c <HAL_UART_MspInit+0x88>)
 8007e1c:	f043 0308 	orr.w	r3, r3, #8
 8007e20:	6313      	str	r3, [r2, #48]	; 0x30
 8007e22:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <HAL_UART_MspInit+0x88>)
 8007e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007e2e:	2360      	movs	r3, #96	; 0x60
 8007e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e32:	2302      	movs	r3, #2
 8007e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007e3e:	2307      	movs	r3, #7
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e42:	f107 0314 	add.w	r3, r7, #20
 8007e46:	4619      	mov	r1, r3
 8007e48:	4805      	ldr	r0, [pc, #20]	; (8007e60 <HAL_UART_MspInit+0x8c>)
 8007e4a:	f004 fc29 	bl	800c6a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007e4e:	bf00      	nop
 8007e50:	3728      	adds	r7, #40	; 0x28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	40004400 	.word	0x40004400
 8007e5c:	40023800 	.word	0x40023800
 8007e60:	40020c00 	.word	0x40020c00

08007e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007e68:	e7fe      	b.n	8007e68 <NMI_Handler+0x4>

08007e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e6e:	e7fe      	b.n	8007e6e <HardFault_Handler+0x4>

08007e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e74:	e7fe      	b.n	8007e74 <MemManage_Handler+0x4>

08007e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e76:	b480      	push	{r7}
 8007e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e7a:	e7fe      	b.n	8007e7a <BusFault_Handler+0x4>

08007e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e80:	e7fe      	b.n	8007e80 <UsageFault_Handler+0x4>

08007e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e82:	b480      	push	{r7}
 8007e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007e86:	bf00      	nop
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e94:	bf00      	nop
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007ea2:	bf00      	nop
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007eb0:	f003 fb02 	bl	800b4b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007eb4:	bf00      	nop
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007ebc:	2004      	movs	r0, #4
 8007ebe:	f004 fdcb 	bl	800ca58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007ec2:	bf00      	nop
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007eca:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ece:	f004 fdc3 	bl	800ca58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007ed2:	bf00      	nop
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007edc:	4803      	ldr	r0, [pc, #12]	; (8007eec <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007ede:	f008 fdda 	bl	8010a96 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007ee2:	4803      	ldr	r0, [pc, #12]	; (8007ef0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007ee4:	f008 fdd7 	bl	8010a96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007ee8:	bf00      	nop
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20047734 	.word	0x20047734
 8007ef0:	20047930 	.word	0x20047930

08007ef4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007ef8:	4802      	ldr	r0, [pc, #8]	; (8007f04 <SDIO_IRQHandler+0x10>)
 8007efa:	f006 fe73 	bl	800ebe4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007efe:	bf00      	nop
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20047a90 	.word	0x20047a90

08007f08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007f0c:	4802      	ldr	r0, [pc, #8]	; (8007f18 <TIM6_DAC_IRQHandler+0x10>)
 8007f0e:	f008 fdc2 	bl	8010a96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007f12:	bf00      	nop
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20047a10 	.word	0x20047a10

08007f1c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007f20:	4802      	ldr	r0, [pc, #8]	; (8007f2c <TIM7_IRQHandler+0x10>)
 8007f22:	f008 fdb8 	bl	8010a96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007f26:	bf00      	nop
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20047bb4 	.word	0x20047bb4

08007f30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007f34:	4802      	ldr	r0, [pc, #8]	; (8007f40 <DMA2_Stream2_IRQHandler+0x10>)
 8007f36:	f004 f93f 	bl	800c1b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007f3a:	bf00      	nop
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20047b54 	.word	0x20047b54

08007f44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007f48:	4802      	ldr	r0, [pc, #8]	; (8007f54 <DMA2_Stream3_IRQHandler+0x10>)
 8007f4a:	f004 f935 	bl	800c1b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007f4e:	bf00      	nop
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	2004767c 	.word	0x2004767c

08007f58 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007f5c:	4802      	ldr	r0, [pc, #8]	; (8007f68 <DMA2_Stream6_IRQHandler+0x10>)
 8007f5e:	f004 f92b 	bl	800c1b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007f62:	bf00      	nop
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	200479b0 	.word	0x200479b0

08007f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f74:	4a14      	ldr	r2, [pc, #80]	; (8007fc8 <_sbrk+0x5c>)
 8007f76:	4b15      	ldr	r3, [pc, #84]	; (8007fcc <_sbrk+0x60>)
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f80:	4b13      	ldr	r3, [pc, #76]	; (8007fd0 <_sbrk+0x64>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d102      	bne.n	8007f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f88:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <_sbrk+0x64>)
 8007f8a:	4a12      	ldr	r2, [pc, #72]	; (8007fd4 <_sbrk+0x68>)
 8007f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f8e:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <_sbrk+0x64>)
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4413      	add	r3, r2
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d207      	bcs.n	8007fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f9c:	f00d ffb8 	bl	8015f10 <__errno>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	230c      	movs	r3, #12
 8007fa4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8007faa:	e009      	b.n	8007fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007fac:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <_sbrk+0x64>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007fb2:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <_sbrk+0x64>)
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4413      	add	r3, r2
 8007fba:	4a05      	ldr	r2, [pc, #20]	; (8007fd0 <_sbrk+0x64>)
 8007fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	20050000 	.word	0x20050000
 8007fcc:	00000800 	.word	0x00000800
 8007fd0:	20000240 	.word	0x20000240
 8007fd4:	20049d08 	.word	0x20049d08

08007fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007fdc:	4b08      	ldr	r3, [pc, #32]	; (8008000 <SystemInit+0x28>)
 8007fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe2:	4a07      	ldr	r2, [pc, #28]	; (8008000 <SystemInit+0x28>)
 8007fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007fec:	4b04      	ldr	r3, [pc, #16]	; (8008000 <SystemInit+0x28>)
 8007fee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ff2:	609a      	str	r2, [r3, #8]
#endif
}
 8007ff4:	bf00      	nop
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	e000ed00 	.word	0xe000ed00

08008004 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8008004:	b598      	push	{r3, r4, r7, lr}
 8008006:	af00      	add	r7, sp, #0
	lcd_init();
 8008008:	f7f9 f806 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 800800c:	483b      	ldr	r0, [pc, #236]	; (80080fc <cppInit+0xf8>)
 800800e:	f7fd fd0f 	bl	8005a30 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8008012:	2064      	movs	r0, #100	; 0x64
 8008014:	f003 fa70 	bl	800b4f8 <HAL_Delay>
	power_sensor.updateValues();
 8008018:	4838      	ldr	r0, [pc, #224]	; (80080fc <cppInit+0xf8>)
 800801a:	f7fd fd19 	bl	8005a50 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800801e:	f7f9 f83f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8008022:	2100      	movs	r1, #0
 8008024:	2000      	movs	r0, #0
 8008026:	f7f9 f84b 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800802a:	4835      	ldr	r0, [pc, #212]	; (8008100 <cppInit+0xfc>)
 800802c:	f7f9 f872 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8008030:	2101      	movs	r1, #1
 8008032:	2000      	movs	r0, #0
 8008034:	f7f9 f844 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8008038:	4830      	ldr	r0, [pc, #192]	; (80080fc <cppInit+0xf8>)
 800803a:	f7fd fd33 	bl	8005aa4 <_ZN11PowerSensor17getButteryVoltageEv>
 800803e:	ee10 3a10 	vmov	r3, s0
 8008042:	4618      	mov	r0, r3
 8008044:	f7f8 fa98 	bl	8000578 <__aeabi_f2d>
 8008048:	4603      	mov	r3, r0
 800804a:	460c      	mov	r4, r1
 800804c:	461a      	mov	r2, r3
 800804e:	4623      	mov	r3, r4
 8008050:	482c      	ldr	r0, [pc, #176]	; (8008104 <cppInit+0x100>)
 8008052:	f7f9 f85f 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 8008056:	f44f 7048 	mov.w	r0, #800	; 0x320
 800805a:	f003 fa4d 	bl	800b4f8 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800805e:	482a      	ldr	r0, [pc, #168]	; (8008108 <cppInit+0x104>)
 8008060:	f7fc ffa8 	bl	8004fb4 <_ZN6Logger10sdCardInitEv>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <cppInit+0x76>
		led.fullColor('G');
 800806a:	2147      	movs	r1, #71	; 0x47
 800806c:	4827      	ldr	r0, [pc, #156]	; (800810c <cppInit+0x108>)
 800806e:	f7fa f871 	bl	8002154 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8008072:	2064      	movs	r0, #100	; 0x64
 8008074:	f003 fa40 	bl	800b4f8 <HAL_Delay>
 8008078:	e006      	b.n	8008088 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800807a:	2152      	movs	r1, #82	; 0x52
 800807c:	4823      	ldr	r0, [pc, #140]	; (800810c <cppInit+0x108>)
 800807e:	f7fa f869 	bl	8002154 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8008082:	2064      	movs	r0, #100	; 0x64
 8008084:	f003 fa38 	bl	800b4f8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8008088:	4821      	ldr	r0, [pc, #132]	; (8008110 <cppInit+0x10c>)
 800808a:	f7fa f9bf 	bl	800240c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800808e:	4821      	ldr	r0, [pc, #132]	; (8008114 <cppInit+0x110>)
 8008090:	f7fd fa64 	bl	800555c <_ZN5Motor4initEv>
	encoder.init();
 8008094:	4820      	ldr	r0, [pc, #128]	; (8008118 <cppInit+0x114>)
 8008096:	f7f9 f9cd 	bl	8001434 <_ZN7Encoder4initEv>
	imu.init();
 800809a:	4820      	ldr	r0, [pc, #128]	; (800811c <cppInit+0x118>)
 800809c:	f7f9 fe18 	bl	8001cd0 <_ZN3IMU4initEv>
	line_trace.init();
 80080a0:	481f      	ldr	r0, [pc, #124]	; (8008120 <cppInit+0x11c>)
 80080a2:	f7fb fdb9 	bl	8003c18 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80080a6:	481a      	ldr	r0, [pc, #104]	; (8008110 <cppInit+0x10c>)
 80080a8:	f7fa faa6 	bl	80025f8 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80080ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080b0:	f003 fa22 	bl	800b4f8 <HAL_Delay>

	led.fullColor('M');
 80080b4:	214d      	movs	r1, #77	; 0x4d
 80080b6:	4815      	ldr	r0, [pc, #84]	; (800810c <cppInit+0x108>)
 80080b8:	f7fa f84c 	bl	8002154 <_ZN3LED9fullColorEc>
	imu.calibration();
 80080bc:	4817      	ldr	r0, [pc, #92]	; (800811c <cppInit+0x118>)
 80080be:	f7f9 fed1 	bl	8001e64 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 80080c2:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8008124 <cppInit+0x120>
 80080c6:	eddf 0a18 	vldr	s1, [pc, #96]	; 8008128 <cppInit+0x124>
 80080ca:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800812c <cppInit+0x128>
 80080ce:	4818      	ldr	r0, [pc, #96]	; (8008130 <cppInit+0x12c>)
 80080d0:	f7fe f99e 	bl	8006410 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 80080d4:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8008124 <cppInit+0x120>
 80080d8:	eddf 0a16 	vldr	s1, [pc, #88]	; 8008134 <cppInit+0x130>
 80080dc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8008138 <cppInit+0x134>
 80080e0:	4813      	ldr	r0, [pc, #76]	; (8008130 <cppInit+0x12c>)
 80080e2:	f7fe f9ae 	bl	8006442 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 80080e6:	4815      	ldr	r0, [pc, #84]	; (800813c <cppInit+0x138>)
 80080e8:	f7fd fbab 	bl	8005842 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80080ec:	4814      	ldr	r0, [pc, #80]	; (8008140 <cppInit+0x13c>)
 80080ee:	f7fd fc43 	bl	8005978 <_ZN13PathFollowing4initEv>

	esc.init();
 80080f2:	4814      	ldr	r0, [pc, #80]	; (8008144 <cppInit+0x140>)
 80080f4:	f7f9 f87a 	bl	80011ec <_ZN3ESC4initEv>

}
 80080f8:	bf00      	nop
 80080fa:	bd98      	pop	{r3, r4, r7, pc}
 80080fc:	2000055c 	.word	0x2000055c
 8008100:	0801a5bc 	.word	0x0801a5bc
 8008104:	0801a5c4 	.word	0x0801a5c4
 8008108:	2000057c 	.word	0x2000057c
 800810c:	20000558 	.word	0x20000558
 8008110:	20000244 	.word	0x20000244
 8008114:	20000554 	.word	0x20000554
 8008118:	20020928 	.word	0x20020928
 800811c:	20000568 	.word	0x20000568
 8008120:	200209d4 	.word	0x200209d4
 8008124:	00000000 	.word	0x00000000
 8008128:	4129999a 	.word	0x4129999a
 800812c:	3f99999a 	.word	0x3f99999a
 8008130:	20020950 	.word	0x20020950
 8008134:	3f5e3fbc 	.word	0x3f5e3fbc
 8008138:	3d75c28f 	.word	0x3d75c28f
 800813c:	20020990 	.word	0x20020990
 8008140:	2002db40 	.word	0x2002db40
 8008144:	200209d0 	.word	0x200209d0

08008148 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800814c:	480e      	ldr	r0, [pc, #56]	; (8008188 <cppFlip1ms+0x40>)
 800814e:	f7fa f9bb 	bl	80024c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8008152:	480e      	ldr	r0, [pc, #56]	; (800818c <cppFlip1ms+0x44>)
 8008154:	f7f9 fde4 	bl	8001d20 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8008158:	480d      	ldr	r0, [pc, #52]	; (8008190 <cppFlip1ms+0x48>)
 800815a:	f7f9 f98d 	bl	8001478 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800815e:	480d      	ldr	r0, [pc, #52]	; (8008194 <cppFlip1ms+0x4c>)
 8008160:	f7fc f982 	bl	8004468 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8008164:	480c      	ldr	r0, [pc, #48]	; (8008198 <cppFlip1ms+0x50>)
 8008166:	f7fe f985 	bl	8006474 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800816a:	480c      	ldr	r0, [pc, #48]	; (800819c <cppFlip1ms+0x54>)
 800816c:	f7fd fb3c 	bl	80057e8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8008170:	480b      	ldr	r0, [pc, #44]	; (80081a0 <cppFlip1ms+0x58>)
 8008172:	f7fd fd67 	bl	8005c44 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8008176:	480b      	ldr	r0, [pc, #44]	; (80081a4 <cppFlip1ms+0x5c>)
 8008178:	f7fd fa02 	bl	8005580 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 800817c:	4804      	ldr	r0, [pc, #16]	; (8008190 <cppFlip1ms+0x48>)
 800817e:	f7f9 fa13 	bl	80015a8 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8008182:	bf00      	nop
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000244 	.word	0x20000244
 800818c:	20000568 	.word	0x20000568
 8008190:	20020928 	.word	0x20020928
 8008194:	200209d4 	.word	0x200209d4
 8008198:	20020950 	.word	0x20020950
 800819c:	20020990 	.word	0x20020990
 80081a0:	2000053c 	.word	0x2000053c
 80081a4:	20000554 	.word	0x20000554

080081a8 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80081ac:	4802      	ldr	r0, [pc, #8]	; (80081b8 <cppFlip100ns+0x10>)
 80081ae:	f7fa f93d 	bl	800242c <_ZN10LineSensor17storeSensorValuesEv>
}
 80081b2:	bf00      	nop
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000244 	.word	0x20000244

080081bc <cppFlip10ms>:

void cppFlip10ms(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 80081c0:	480a      	ldr	r0, [pc, #40]	; (80081ec <cppFlip10ms+0x30>)
 80081c2:	f7fb ffc8 	bl	8004156 <_ZN9LineTrace17getTargetVelocityEv>
 80081c6:	eef0 7a40 	vmov.f32	s15, s0
 80081ca:	eeb0 0a67 	vmov.f32	s0, s15
 80081ce:	4808      	ldr	r0, [pc, #32]	; (80081f0 <cppFlip10ms+0x34>)
 80081d0:	f7fc ff38 	bl	8005044 <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 80081d4:	4807      	ldr	r0, [pc, #28]	; (80081f4 <cppFlip10ms+0x38>)
 80081d6:	f7fe f98f 	bl	80064f8 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 80081da:	eef0 7a40 	vmov.f32	s15, s0
 80081de:	eeb0 0a67 	vmov.f32	s0, s15
 80081e2:	4803      	ldr	r0, [pc, #12]	; (80081f0 <cppFlip10ms+0x34>)
 80081e4:	f7fc ff7c 	bl	80050e0 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80081e8:	bf00      	nop
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	200209d4 	.word	0x200209d4
 80081f0:	2000057c 	.word	0x2000057c
 80081f4:	20020950 	.word	0x20020950

080081f8 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	80fb      	strh	r3, [r7, #6]
	if(gpio_pin == GPIO_PIN_2){ //Right
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	2b04      	cmp	r3, #4
 8008206:	d103      	bne.n	8008210 <cppExit+0x18>
		side_sensor.updateStatusRightExti();
 8008208:	4807      	ldr	r0, [pc, #28]	; (8008228 <cppExit+0x30>)
 800820a:	f7fd fcd3 	bl	8005bb4 <_ZN10SideSensor21updateStatusRightExtiEv>
	}
	else if(gpio_pin == GPIO_PIN_8){ //Left
		side_sensor.updateStatusLeftExti();
	}
}
 800820e:	e006      	b.n	800821e <cppExit+0x26>
	else if(gpio_pin == GPIO_PIN_8){ //Left
 8008210:	88fb      	ldrh	r3, [r7, #6]
 8008212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008216:	d102      	bne.n	800821e <cppExit+0x26>
		side_sensor.updateStatusLeftExti();
 8008218:	4803      	ldr	r0, [pc, #12]	; (8008228 <cppExit+0x30>)
 800821a:	f7fd fcef 	bl	8005bfc <_ZN10SideSensor20updateStatusLeftExtiEv>
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	2000053c 	.word	0x2000053c
 800822c:	00000000 	.word	0x00000000

08008230 <cppLoop>:

void cppLoop(void)
{
 8008230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008232:	b085      	sub	sp, #20
 8008234:	af02      	add	r7, sp, #8
	static int16_t selector_gain;
	static int16_t selector_run;
	static int16_t selector_acc;
	static int16_t selector_vel;

	static float adj_kp = line_trace.getKp();
 8008236:	4baf      	ldr	r3, [pc, #700]	; (80084f4 <cppLoop+0x2c4>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	f3bf 8f5b 	dmb	ish
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	bf0c      	ite	eq
 8008248:	2301      	moveq	r3, #1
 800824a:	2300      	movne	r3, #0
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d015      	beq.n	800827e <cppLoop+0x4e>
 8008252:	48a8      	ldr	r0, [pc, #672]	; (80084f4 <cppLoop+0x2c4>)
 8008254:	f00d fe4d 	bl	8015ef2 <__cxa_guard_acquire>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	bf14      	ite	ne
 800825e:	2301      	movne	r3, #1
 8008260:	2300      	moveq	r3, #0
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <cppLoop+0x4e>
 8008268:	48a3      	ldr	r0, [pc, #652]	; (80084f8 <cppLoop+0x2c8>)
 800826a:	f7fb fe62 	bl	8003f32 <_ZN9LineTrace5getKpEv>
 800826e:	eef0 7a40 	vmov.f32	s15, s0
 8008272:	4ba2      	ldr	r3, [pc, #648]	; (80084fc <cppLoop+0x2cc>)
 8008274:	edc3 7a00 	vstr	s15, [r3]
 8008278:	489e      	ldr	r0, [pc, #632]	; (80084f4 <cppLoop+0x2c4>)
 800827a:	f00d fe46 	bl	8015f0a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 800827e:	4ba0      	ldr	r3, [pc, #640]	; (8008500 <cppLoop+0x2d0>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	f3bf 8f5b 	dmb	ish
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	bf0c      	ite	eq
 8008290:	2301      	moveq	r3, #1
 8008292:	2300      	movne	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d015      	beq.n	80082c6 <cppLoop+0x96>
 800829a:	4899      	ldr	r0, [pc, #612]	; (8008500 <cppLoop+0x2d0>)
 800829c:	f00d fe29 	bl	8015ef2 <__cxa_guard_acquire>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bf14      	ite	ne
 80082a6:	2301      	movne	r3, #1
 80082a8:	2300      	moveq	r3, #0
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <cppLoop+0x96>
 80082b0:	4891      	ldr	r0, [pc, #580]	; (80084f8 <cppLoop+0x2c8>)
 80082b2:	f7fb fe4d 	bl	8003f50 <_ZN9LineTrace5getKiEv>
 80082b6:	eef0 7a40 	vmov.f32	s15, s0
 80082ba:	4b92      	ldr	r3, [pc, #584]	; (8008504 <cppLoop+0x2d4>)
 80082bc:	edc3 7a00 	vstr	s15, [r3]
 80082c0:	488f      	ldr	r0, [pc, #572]	; (8008500 <cppLoop+0x2d0>)
 80082c2:	f00d fe22 	bl	8015f0a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80082c6:	4b90      	ldr	r3, [pc, #576]	; (8008508 <cppLoop+0x2d8>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	f3bf 8f5b 	dmb	ish
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bf0c      	ite	eq
 80082d8:	2301      	moveq	r3, #1
 80082da:	2300      	movne	r3, #0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d015      	beq.n	800830e <cppLoop+0xde>
 80082e2:	4889      	ldr	r0, [pc, #548]	; (8008508 <cppLoop+0x2d8>)
 80082e4:	f00d fe05 	bl	8015ef2 <__cxa_guard_acquire>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bf14      	ite	ne
 80082ee:	2301      	movne	r3, #1
 80082f0:	2300      	moveq	r3, #0
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <cppLoop+0xde>
 80082f8:	487f      	ldr	r0, [pc, #508]	; (80084f8 <cppLoop+0x2c8>)
 80082fa:	f7fb fe38 	bl	8003f6e <_ZN9LineTrace5getKdEv>
 80082fe:	eef0 7a40 	vmov.f32	s15, s0
 8008302:	4b82      	ldr	r3, [pc, #520]	; (800850c <cppLoop+0x2dc>)
 8008304:	edc3 7a00 	vstr	s15, [r3]
 8008308:	487f      	ldr	r0, [pc, #508]	; (8008508 <cppLoop+0x2d8>)
 800830a:	f00d fdfe 	bl	8015f0a <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 800830e:	4b80      	ldr	r3, [pc, #512]	; (8008510 <cppLoop+0x2e0>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	f3bf 8f5b 	dmb	ish
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	bf0c      	ite	eq
 8008320:	2301      	moveq	r3, #1
 8008322:	2300      	movne	r3, #0
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d015      	beq.n	8008356 <cppLoop+0x126>
 800832a:	4879      	ldr	r0, [pc, #484]	; (8008510 <cppLoop+0x2e0>)
 800832c:	f00d fde1 	bl	8015ef2 <__cxa_guard_acquire>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	bf14      	ite	ne
 8008336:	2301      	movne	r3, #1
 8008338:	2300      	moveq	r3, #0
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <cppLoop+0x126>
 8008340:	486d      	ldr	r0, [pc, #436]	; (80084f8 <cppLoop+0x2c8>)
 8008342:	f7fb fe3c 	bl	8003fbe <_ZN9LineTrace9getKpSlowEv>
 8008346:	eef0 7a40 	vmov.f32	s15, s0
 800834a:	4b72      	ldr	r3, [pc, #456]	; (8008514 <cppLoop+0x2e4>)
 800834c:	edc3 7a00 	vstr	s15, [r3]
 8008350:	486f      	ldr	r0, [pc, #444]	; (8008510 <cppLoop+0x2e0>)
 8008352:	f00d fdda 	bl	8015f0a <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8008356:	4b70      	ldr	r3, [pc, #448]	; (8008518 <cppLoop+0x2e8>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	f3bf 8f5b 	dmb	ish
 800835e:	b2db      	uxtb	r3, r3
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	bf0c      	ite	eq
 8008368:	2301      	moveq	r3, #1
 800836a:	2300      	movne	r3, #0
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d015      	beq.n	800839e <cppLoop+0x16e>
 8008372:	4869      	ldr	r0, [pc, #420]	; (8008518 <cppLoop+0x2e8>)
 8008374:	f00d fdbd 	bl	8015ef2 <__cxa_guard_acquire>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	bf14      	ite	ne
 800837e:	2301      	movne	r3, #1
 8008380:	2300      	moveq	r3, #0
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00a      	beq.n	800839e <cppLoop+0x16e>
 8008388:	485b      	ldr	r0, [pc, #364]	; (80084f8 <cppLoop+0x2c8>)
 800838a:	f7fb fe27 	bl	8003fdc <_ZN9LineTrace9getKiSlowEv>
 800838e:	eef0 7a40 	vmov.f32	s15, s0
 8008392:	4b62      	ldr	r3, [pc, #392]	; (800851c <cppLoop+0x2ec>)
 8008394:	edc3 7a00 	vstr	s15, [r3]
 8008398:	485f      	ldr	r0, [pc, #380]	; (8008518 <cppLoop+0x2e8>)
 800839a:	f00d fdb6 	bl	8015f0a <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 800839e:	4b60      	ldr	r3, [pc, #384]	; (8008520 <cppLoop+0x2f0>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	f3bf 8f5b 	dmb	ish
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bf0c      	ite	eq
 80083b0:	2301      	moveq	r3, #1
 80083b2:	2300      	movne	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d015      	beq.n	80083e6 <cppLoop+0x1b6>
 80083ba:	4859      	ldr	r0, [pc, #356]	; (8008520 <cppLoop+0x2f0>)
 80083bc:	f00d fd99 	bl	8015ef2 <__cxa_guard_acquire>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bf14      	ite	ne
 80083c6:	2301      	movne	r3, #1
 80083c8:	2300      	moveq	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <cppLoop+0x1b6>
 80083d0:	4849      	ldr	r0, [pc, #292]	; (80084f8 <cppLoop+0x2c8>)
 80083d2:	f7fb fe12 	bl	8003ffa <_ZN9LineTrace9getKdSlowEv>
 80083d6:	eef0 7a40 	vmov.f32	s15, s0
 80083da:	4b52      	ldr	r3, [pc, #328]	; (8008524 <cppLoop+0x2f4>)
 80083dc:	edc3 7a00 	vstr	s15, [r3]
 80083e0:	484f      	ldr	r0, [pc, #316]	; (8008520 <cppLoop+0x2f0>)
 80083e2:	f00d fd92 	bl	8015f0a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80083e6:	4b50      	ldr	r3, [pc, #320]	; (8008528 <cppLoop+0x2f8>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	f3bf 8f5b 	dmb	ish
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bf0c      	ite	eq
 80083f8:	2301      	moveq	r3, #1
 80083fa:	2300      	movne	r3, #0
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d015      	beq.n	800842e <cppLoop+0x1fe>
 8008402:	4849      	ldr	r0, [pc, #292]	; (8008528 <cppLoop+0x2f8>)
 8008404:	f00d fd75 	bl	8015ef2 <__cxa_guard_acquire>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	bf14      	ite	ne
 800840e:	2301      	movne	r3, #1
 8008410:	2300      	moveq	r3, #0
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00a      	beq.n	800842e <cppLoop+0x1fe>
 8008418:	4837      	ldr	r0, [pc, #220]	; (80084f8 <cppLoop+0x2c8>)
 800841a:	f7fb fe9c 	bl	8004156 <_ZN9LineTrace17getTargetVelocityEv>
 800841e:	eef0 7a40 	vmov.f32	s15, s0
 8008422:	4b42      	ldr	r3, [pc, #264]	; (800852c <cppLoop+0x2fc>)
 8008424:	edc3 7a00 	vstr	s15, [r3]
 8008428:	483f      	ldr	r0, [pc, #252]	; (8008528 <cppLoop+0x2f8>)
 800842a:	f00d fd6e 	bl	8015f0a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 800842e:	4b40      	ldr	r3, [pc, #256]	; (8008530 <cppLoop+0x300>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	f3bf 8f5b 	dmb	ish
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	bf0c      	ite	eq
 8008440:	2301      	moveq	r3, #1
 8008442:	2300      	movne	r3, #0
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d015      	beq.n	8008476 <cppLoop+0x246>
 800844a:	4839      	ldr	r0, [pc, #228]	; (8008530 <cppLoop+0x300>)
 800844c:	f00d fd51 	bl	8015ef2 <__cxa_guard_acquire>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	bf14      	ite	ne
 8008456:	2301      	movne	r3, #1
 8008458:	2300      	moveq	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00a      	beq.n	8008476 <cppLoop+0x246>
 8008460:	4825      	ldr	r0, [pc, #148]	; (80084f8 <cppLoop+0x2c8>)
 8008462:	f7fb fe88 	bl	8004176 <_ZN9LineTrace14getMaxVelocityEv>
 8008466:	eef0 7a40 	vmov.f32	s15, s0
 800846a:	4b32      	ldr	r3, [pc, #200]	; (8008534 <cppLoop+0x304>)
 800846c:	edc3 7a00 	vstr	s15, [r3]
 8008470:	482f      	ldr	r0, [pc, #188]	; (8008530 <cppLoop+0x300>)
 8008472:	f00d fd4a 	bl	8015f0a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8008476:	4b30      	ldr	r3, [pc, #192]	; (8008538 <cppLoop+0x308>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	f3bf 8f5b 	dmb	ish
 800847e:	b2db      	uxtb	r3, r3
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	bf0c      	ite	eq
 8008488:	2301      	moveq	r3, #1
 800848a:	2300      	movne	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d015      	beq.n	80084be <cppLoop+0x28e>
 8008492:	4829      	ldr	r0, [pc, #164]	; (8008538 <cppLoop+0x308>)
 8008494:	f00d fd2d 	bl	8015ef2 <__cxa_guard_acquire>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	bf14      	ite	ne
 800849e:	2301      	movne	r3, #1
 80084a0:	2300      	moveq	r3, #0
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <cppLoop+0x28e>
 80084a8:	4813      	ldr	r0, [pc, #76]	; (80084f8 <cppLoop+0x2c8>)
 80084aa:	f7fb fe74 	bl	8004196 <_ZN9LineTrace14getMinVelocityEv>
 80084ae:	eef0 7a40 	vmov.f32	s15, s0
 80084b2:	4b22      	ldr	r3, [pc, #136]	; (800853c <cppLoop+0x30c>)
 80084b4:	edc3 7a00 	vstr	s15, [r3]
 80084b8:	481f      	ldr	r0, [pc, #124]	; (8008538 <cppLoop+0x308>)
 80084ba:	f00d fd26 	bl	8015f0a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 80084be:	4b20      	ldr	r3, [pc, #128]	; (8008540 <cppLoop+0x310>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f3bf 8f5b 	dmb	ish
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	bf0c      	ite	eq
 80084d0:	2301      	moveq	r3, #1
 80084d2:	2300      	movne	r3, #0
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d03f      	beq.n	800855a <cppLoop+0x32a>
 80084da:	4819      	ldr	r0, [pc, #100]	; (8008540 <cppLoop+0x310>)
 80084dc:	f00d fd09 	bl	8015ef2 <__cxa_guard_acquire>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	bf14      	ite	ne
 80084e6:	2301      	movne	r3, #1
 80084e8:	2300      	moveq	r3, #0
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d034      	beq.n	800855a <cppLoop+0x32a>
 80084f0:	e028      	b.n	8008544 <cppLoop+0x314>
 80084f2:	bf00      	nop
 80084f4:	20045274 	.word	0x20045274
 80084f8:	200209d4 	.word	0x200209d4
 80084fc:	20045270 	.word	0x20045270
 8008500:	2004527c 	.word	0x2004527c
 8008504:	20045278 	.word	0x20045278
 8008508:	20045284 	.word	0x20045284
 800850c:	20045280 	.word	0x20045280
 8008510:	2004528c 	.word	0x2004528c
 8008514:	20045288 	.word	0x20045288
 8008518:	20045294 	.word	0x20045294
 800851c:	20045290 	.word	0x20045290
 8008520:	2004529c 	.word	0x2004529c
 8008524:	20045298 	.word	0x20045298
 8008528:	200452a4 	.word	0x200452a4
 800852c:	200452a0 	.word	0x200452a0
 8008530:	200452ac 	.word	0x200452ac
 8008534:	200452a8 	.word	0x200452a8
 8008538:	200452b4 	.word	0x200452b4
 800853c:	200452b0 	.word	0x200452b0
 8008540:	200452bc 	.word	0x200452bc
 8008544:	48ae      	ldr	r0, [pc, #696]	; (8008800 <cppLoop+0x5d0>)
 8008546:	f7fb fe36 	bl	80041b6 <_ZN9LineTrace15getMaxVelocity2Ev>
 800854a:	eef0 7a40 	vmov.f32	s15, s0
 800854e:	4bad      	ldr	r3, [pc, #692]	; (8008804 <cppLoop+0x5d4>)
 8008550:	edc3 7a00 	vstr	s15, [r3]
 8008554:	48ac      	ldr	r0, [pc, #688]	; (8008808 <cppLoop+0x5d8>)
 8008556:	f00d fcd8 	bl	8015f0a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 800855a:	4bac      	ldr	r3, [pc, #688]	; (800880c <cppLoop+0x5dc>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f3bf 8f5b 	dmb	ish
 8008562:	b2db      	uxtb	r3, r3
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	bf0c      	ite	eq
 800856c:	2301      	moveq	r3, #1
 800856e:	2300      	movne	r3, #0
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d015      	beq.n	80085a2 <cppLoop+0x372>
 8008576:	48a5      	ldr	r0, [pc, #660]	; (800880c <cppLoop+0x5dc>)
 8008578:	f00d fcbb 	bl	8015ef2 <__cxa_guard_acquire>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	bf14      	ite	ne
 8008582:	2301      	movne	r3, #1
 8008584:	2300      	moveq	r3, #0
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <cppLoop+0x372>
 800858c:	489c      	ldr	r0, [pc, #624]	; (8008800 <cppLoop+0x5d0>)
 800858e:	f7fb fe22 	bl	80041d6 <_ZN9LineTrace15getMinVelocity2Ev>
 8008592:	eef0 7a40 	vmov.f32	s15, s0
 8008596:	4b9e      	ldr	r3, [pc, #632]	; (8008810 <cppLoop+0x5e0>)
 8008598:	edc3 7a00 	vstr	s15, [r3]
 800859c:	489b      	ldr	r0, [pc, #620]	; (800880c <cppLoop+0x5dc>)
 800859e:	f00d fcb4 	bl	8015f0a <__cxa_guard_release>
	static float adj_max_velocity3 = line_trace.getMaxVelocity3();
 80085a2:	4b9c      	ldr	r3, [pc, #624]	; (8008814 <cppLoop+0x5e4>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	f3bf 8f5b 	dmb	ish
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	bf0c      	ite	eq
 80085b4:	2301      	moveq	r3, #1
 80085b6:	2300      	movne	r3, #0
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d015      	beq.n	80085ea <cppLoop+0x3ba>
 80085be:	4895      	ldr	r0, [pc, #596]	; (8008814 <cppLoop+0x5e4>)
 80085c0:	f00d fc97 	bl	8015ef2 <__cxa_guard_acquire>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bf14      	ite	ne
 80085ca:	2301      	movne	r3, #1
 80085cc:	2300      	moveq	r3, #0
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <cppLoop+0x3ba>
 80085d4:	488a      	ldr	r0, [pc, #552]	; (8008800 <cppLoop+0x5d0>)
 80085d6:	f7fb fe0e 	bl	80041f6 <_ZN9LineTrace15getMaxVelocity3Ev>
 80085da:	eef0 7a40 	vmov.f32	s15, s0
 80085de:	4b8e      	ldr	r3, [pc, #568]	; (8008818 <cppLoop+0x5e8>)
 80085e0:	edc3 7a00 	vstr	s15, [r3]
 80085e4:	488b      	ldr	r0, [pc, #556]	; (8008814 <cppLoop+0x5e4>)
 80085e6:	f00d fc90 	bl	8015f0a <__cxa_guard_release>
	static float adj_min_velocity3 = line_trace.getMinVelocity3();
 80085ea:	4b8c      	ldr	r3, [pc, #560]	; (800881c <cppLoop+0x5ec>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	f3bf 8f5b 	dmb	ish
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bf0c      	ite	eq
 80085fc:	2301      	moveq	r3, #1
 80085fe:	2300      	movne	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d015      	beq.n	8008632 <cppLoop+0x402>
 8008606:	4885      	ldr	r0, [pc, #532]	; (800881c <cppLoop+0x5ec>)
 8008608:	f00d fc73 	bl	8015ef2 <__cxa_guard_acquire>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	bf14      	ite	ne
 8008612:	2301      	movne	r3, #1
 8008614:	2300      	moveq	r3, #0
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00a      	beq.n	8008632 <cppLoop+0x402>
 800861c:	4878      	ldr	r0, [pc, #480]	; (8008800 <cppLoop+0x5d0>)
 800861e:	f7fb fdfa 	bl	8004216 <_ZN9LineTrace15getMinVelocity3Ev>
 8008622:	eef0 7a40 	vmov.f32	s15, s0
 8008626:	4b7e      	ldr	r3, [pc, #504]	; (8008820 <cppLoop+0x5f0>)
 8008628:	edc3 7a00 	vstr	s15, [r3]
 800862c:	487b      	ldr	r0, [pc, #492]	; (800881c <cppLoop+0x5ec>)
 800862e:	f00d fc6c 	bl	8015f0a <__cxa_guard_release>
	static float adj_max_velocity4 = line_trace.getMaxVelocity4();
 8008632:	4b7c      	ldr	r3, [pc, #496]	; (8008824 <cppLoop+0x5f4>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	f3bf 8f5b 	dmb	ish
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	bf0c      	ite	eq
 8008644:	2301      	moveq	r3, #1
 8008646:	2300      	movne	r3, #0
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d015      	beq.n	800867a <cppLoop+0x44a>
 800864e:	4875      	ldr	r0, [pc, #468]	; (8008824 <cppLoop+0x5f4>)
 8008650:	f00d fc4f 	bl	8015ef2 <__cxa_guard_acquire>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	bf14      	ite	ne
 800865a:	2301      	movne	r3, #1
 800865c:	2300      	moveq	r3, #0
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00a      	beq.n	800867a <cppLoop+0x44a>
 8008664:	4866      	ldr	r0, [pc, #408]	; (8008800 <cppLoop+0x5d0>)
 8008666:	f7fb fde6 	bl	8004236 <_ZN9LineTrace15getMaxVelocity4Ev>
 800866a:	eef0 7a40 	vmov.f32	s15, s0
 800866e:	4b6e      	ldr	r3, [pc, #440]	; (8008828 <cppLoop+0x5f8>)
 8008670:	edc3 7a00 	vstr	s15, [r3]
 8008674:	486b      	ldr	r0, [pc, #428]	; (8008824 <cppLoop+0x5f4>)
 8008676:	f00d fc48 	bl	8015f0a <__cxa_guard_release>
	static float adj_min_velocity4 = line_trace.getMinVelocity4();
 800867a:	4b6c      	ldr	r3, [pc, #432]	; (800882c <cppLoop+0x5fc>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	f3bf 8f5b 	dmb	ish
 8008682:	b2db      	uxtb	r3, r3
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	2b00      	cmp	r3, #0
 800868a:	bf0c      	ite	eq
 800868c:	2301      	moveq	r3, #1
 800868e:	2300      	movne	r3, #0
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d015      	beq.n	80086c2 <cppLoop+0x492>
 8008696:	4865      	ldr	r0, [pc, #404]	; (800882c <cppLoop+0x5fc>)
 8008698:	f00d fc2b 	bl	8015ef2 <__cxa_guard_acquire>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bf14      	ite	ne
 80086a2:	2301      	movne	r3, #1
 80086a4:	2300      	moveq	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <cppLoop+0x492>
 80086ac:	4854      	ldr	r0, [pc, #336]	; (8008800 <cppLoop+0x5d0>)
 80086ae:	f7fb fdd2 	bl	8004256 <_ZN9LineTrace15getMinVelocity4Ev>
 80086b2:	eef0 7a40 	vmov.f32	s15, s0
 80086b6:	4b5e      	ldr	r3, [pc, #376]	; (8008830 <cppLoop+0x600>)
 80086b8:	edc3 7a00 	vstr	s15, [r3]
 80086bc:	485b      	ldr	r0, [pc, #364]	; (800882c <cppLoop+0x5fc>)
 80086be:	f00d fc24 	bl	8015f0a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 80086c2:	4b5c      	ldr	r3, [pc, #368]	; (8008834 <cppLoop+0x604>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	f3bf 8f5b 	dmb	ish
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bf0c      	ite	eq
 80086d4:	2301      	moveq	r3, #1
 80086d6:	2300      	movne	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d015      	beq.n	800870a <cppLoop+0x4da>
 80086de:	4855      	ldr	r0, [pc, #340]	; (8008834 <cppLoop+0x604>)
 80086e0:	f00d fc07 	bl	8015ef2 <__cxa_guard_acquire>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bf14      	ite	ne
 80086ea:	2301      	movne	r3, #1
 80086ec:	2300      	moveq	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00a      	beq.n	800870a <cppLoop+0x4da>
 80086f4:	4842      	ldr	r0, [pc, #264]	; (8008800 <cppLoop+0x5d0>)
 80086f6:	f7fb fe26 	bl	8004346 <_ZN9LineTrace9getMaxAccEv>
 80086fa:	eef0 7a40 	vmov.f32	s15, s0
 80086fe:	4b4e      	ldr	r3, [pc, #312]	; (8008838 <cppLoop+0x608>)
 8008700:	edc3 7a00 	vstr	s15, [r3]
 8008704:	484b      	ldr	r0, [pc, #300]	; (8008834 <cppLoop+0x604>)
 8008706:	f00d fc00 	bl	8015f0a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 800870a:	4b4c      	ldr	r3, [pc, #304]	; (800883c <cppLoop+0x60c>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	f3bf 8f5b 	dmb	ish
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	bf0c      	ite	eq
 800871c:	2301      	moveq	r3, #1
 800871e:	2300      	movne	r3, #0
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d015      	beq.n	8008752 <cppLoop+0x522>
 8008726:	4845      	ldr	r0, [pc, #276]	; (800883c <cppLoop+0x60c>)
 8008728:	f00d fbe3 	bl	8015ef2 <__cxa_guard_acquire>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	bf14      	ite	ne
 8008732:	2301      	movne	r3, #1
 8008734:	2300      	moveq	r3, #0
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <cppLoop+0x522>
 800873c:	4830      	ldr	r0, [pc, #192]	; (8008800 <cppLoop+0x5d0>)
 800873e:	f7fb fe14 	bl	800436a <_ZN9LineTrace9getMaxDecEv>
 8008742:	eef0 7a40 	vmov.f32	s15, s0
 8008746:	4b3e      	ldr	r3, [pc, #248]	; (8008840 <cppLoop+0x610>)
 8008748:	edc3 7a00 	vstr	s15, [r3]
 800874c:	483b      	ldr	r0, [pc, #236]	; (800883c <cppLoop+0x60c>)
 800874e:	f00d fbdc 	bl	8015f0a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8008752:	4b3c      	ldr	r3, [pc, #240]	; (8008844 <cppLoop+0x614>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	f3bf 8f5b 	dmb	ish
 800875a:	b2db      	uxtb	r3, r3
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	bf0c      	ite	eq
 8008764:	2301      	moveq	r3, #1
 8008766:	2300      	movne	r3, #0
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d015      	beq.n	800879a <cppLoop+0x56a>
 800876e:	4835      	ldr	r0, [pc, #212]	; (8008844 <cppLoop+0x614>)
 8008770:	f00d fbbf 	bl	8015ef2 <__cxa_guard_acquire>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	bf14      	ite	ne
 800877a:	2301      	movne	r3, #1
 800877c:	2300      	moveq	r3, #0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <cppLoop+0x56a>
 8008784:	481e      	ldr	r0, [pc, #120]	; (8008800 <cppLoop+0x5d0>)
 8008786:	f7fb fe02 	bl	800438e <_ZN9LineTrace10getMaxAcc2Ev>
 800878a:	eef0 7a40 	vmov.f32	s15, s0
 800878e:	4b2e      	ldr	r3, [pc, #184]	; (8008848 <cppLoop+0x618>)
 8008790:	edc3 7a00 	vstr	s15, [r3]
 8008794:	482b      	ldr	r0, [pc, #172]	; (8008844 <cppLoop+0x614>)
 8008796:	f00d fbb8 	bl	8015f0a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 800879a:	4b2c      	ldr	r3, [pc, #176]	; (800884c <cppLoop+0x61c>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	f3bf 8f5b 	dmb	ish
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bf0c      	ite	eq
 80087ac:	2301      	moveq	r3, #1
 80087ae:	2300      	movne	r3, #0
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d015      	beq.n	80087e2 <cppLoop+0x5b2>
 80087b6:	4825      	ldr	r0, [pc, #148]	; (800884c <cppLoop+0x61c>)
 80087b8:	f00d fb9b 	bl	8015ef2 <__cxa_guard_acquire>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	bf14      	ite	ne
 80087c2:	2301      	movne	r3, #1
 80087c4:	2300      	moveq	r3, #0
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <cppLoop+0x5b2>
 80087cc:	480c      	ldr	r0, [pc, #48]	; (8008800 <cppLoop+0x5d0>)
 80087ce:	f7fb fdf0 	bl	80043b2 <_ZN9LineTrace10getMaxDec2Ev>
 80087d2:	eef0 7a40 	vmov.f32	s15, s0
 80087d6:	4b1e      	ldr	r3, [pc, #120]	; (8008850 <cppLoop+0x620>)
 80087d8:	edc3 7a00 	vstr	s15, [r3]
 80087dc:	481b      	ldr	r0, [pc, #108]	; (800884c <cppLoop+0x61c>)
 80087de:	f00d fb94 	bl	8015f0a <__cxa_guard_release>
	static float adj_acc3 = line_trace.getMaxAcc3();
 80087e2:	4b1c      	ldr	r3, [pc, #112]	; (8008854 <cppLoop+0x624>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	f3bf 8f5b 	dmb	ish
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	bf0c      	ite	eq
 80087f4:	2301      	moveq	r3, #1
 80087f6:	2300      	movne	r3, #0
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d042      	beq.n	8008884 <cppLoop+0x654>
 80087fe:	e02b      	b.n	8008858 <cppLoop+0x628>
 8008800:	200209d4 	.word	0x200209d4
 8008804:	200452b8 	.word	0x200452b8
 8008808:	200452bc 	.word	0x200452bc
 800880c:	200452c4 	.word	0x200452c4
 8008810:	200452c0 	.word	0x200452c0
 8008814:	200452cc 	.word	0x200452cc
 8008818:	200452c8 	.word	0x200452c8
 800881c:	200452d4 	.word	0x200452d4
 8008820:	200452d0 	.word	0x200452d0
 8008824:	200452dc 	.word	0x200452dc
 8008828:	200452d8 	.word	0x200452d8
 800882c:	200452e4 	.word	0x200452e4
 8008830:	200452e0 	.word	0x200452e0
 8008834:	200452ec 	.word	0x200452ec
 8008838:	200452e8 	.word	0x200452e8
 800883c:	200452f4 	.word	0x200452f4
 8008840:	200452f0 	.word	0x200452f0
 8008844:	200452fc 	.word	0x200452fc
 8008848:	200452f8 	.word	0x200452f8
 800884c:	20045304 	.word	0x20045304
 8008850:	20045300 	.word	0x20045300
 8008854:	2004530c 	.word	0x2004530c
 8008858:	48bf      	ldr	r0, [pc, #764]	; (8008b58 <cppLoop+0x928>)
 800885a:	f00d fb4a 	bl	8015ef2 <__cxa_guard_acquire>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	bf14      	ite	ne
 8008864:	2301      	movne	r3, #1
 8008866:	2300      	moveq	r3, #0
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00a      	beq.n	8008884 <cppLoop+0x654>
 800886e:	48bb      	ldr	r0, [pc, #748]	; (8008b5c <cppLoop+0x92c>)
 8008870:	f7fb fdb1 	bl	80043d6 <_ZN9LineTrace10getMaxAcc3Ev>
 8008874:	eef0 7a40 	vmov.f32	s15, s0
 8008878:	4bb9      	ldr	r3, [pc, #740]	; (8008b60 <cppLoop+0x930>)
 800887a:	edc3 7a00 	vstr	s15, [r3]
 800887e:	48b6      	ldr	r0, [pc, #728]	; (8008b58 <cppLoop+0x928>)
 8008880:	f00d fb43 	bl	8015f0a <__cxa_guard_release>
	static float adj_dec3 = line_trace.getMaxDec3();
 8008884:	4bb7      	ldr	r3, [pc, #732]	; (8008b64 <cppLoop+0x934>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	f3bf 8f5b 	dmb	ish
 800888c:	b2db      	uxtb	r3, r3
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	bf0c      	ite	eq
 8008896:	2301      	moveq	r3, #1
 8008898:	2300      	movne	r3, #0
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d015      	beq.n	80088cc <cppLoop+0x69c>
 80088a0:	48b0      	ldr	r0, [pc, #704]	; (8008b64 <cppLoop+0x934>)
 80088a2:	f00d fb26 	bl	8015ef2 <__cxa_guard_acquire>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bf14      	ite	ne
 80088ac:	2301      	movne	r3, #1
 80088ae:	2300      	moveq	r3, #0
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <cppLoop+0x69c>
 80088b6:	48a9      	ldr	r0, [pc, #676]	; (8008b5c <cppLoop+0x92c>)
 80088b8:	f7fb fd9f 	bl	80043fa <_ZN9LineTrace10getMaxDec3Ev>
 80088bc:	eef0 7a40 	vmov.f32	s15, s0
 80088c0:	4ba9      	ldr	r3, [pc, #676]	; (8008b68 <cppLoop+0x938>)
 80088c2:	edc3 7a00 	vstr	s15, [r3]
 80088c6:	48a7      	ldr	r0, [pc, #668]	; (8008b64 <cppLoop+0x934>)
 80088c8:	f00d fb1f 	bl	8015f0a <__cxa_guard_release>
	static float adj_acc4 = line_trace.getMaxAcc4();
 80088cc:	4ba7      	ldr	r3, [pc, #668]	; (8008b6c <cppLoop+0x93c>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f3bf 8f5b 	dmb	ish
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	bf0c      	ite	eq
 80088de:	2301      	moveq	r3, #1
 80088e0:	2300      	movne	r3, #0
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d015      	beq.n	8008914 <cppLoop+0x6e4>
 80088e8:	48a0      	ldr	r0, [pc, #640]	; (8008b6c <cppLoop+0x93c>)
 80088ea:	f00d fb02 	bl	8015ef2 <__cxa_guard_acquire>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bf14      	ite	ne
 80088f4:	2301      	movne	r3, #1
 80088f6:	2300      	moveq	r3, #0
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <cppLoop+0x6e4>
 80088fe:	4897      	ldr	r0, [pc, #604]	; (8008b5c <cppLoop+0x92c>)
 8008900:	f7fb fd8d 	bl	800441e <_ZN9LineTrace10getMaxAcc4Ev>
 8008904:	eef0 7a40 	vmov.f32	s15, s0
 8008908:	4b99      	ldr	r3, [pc, #612]	; (8008b70 <cppLoop+0x940>)
 800890a:	edc3 7a00 	vstr	s15, [r3]
 800890e:	4897      	ldr	r0, [pc, #604]	; (8008b6c <cppLoop+0x93c>)
 8008910:	f00d fafb 	bl	8015f0a <__cxa_guard_release>
	static float adj_dec4 = line_trace.getMaxDec4();
 8008914:	4b97      	ldr	r3, [pc, #604]	; (8008b74 <cppLoop+0x944>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	f3bf 8f5b 	dmb	ish
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	bf0c      	ite	eq
 8008926:	2301      	moveq	r3, #1
 8008928:	2300      	movne	r3, #0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d015      	beq.n	800895c <cppLoop+0x72c>
 8008930:	4890      	ldr	r0, [pc, #576]	; (8008b74 <cppLoop+0x944>)
 8008932:	f00d fade 	bl	8015ef2 <__cxa_guard_acquire>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	bf14      	ite	ne
 800893c:	2301      	movne	r3, #1
 800893e:	2300      	moveq	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <cppLoop+0x72c>
 8008946:	4885      	ldr	r0, [pc, #532]	; (8008b5c <cppLoop+0x92c>)
 8008948:	f7fb fd7b 	bl	8004442 <_ZN9LineTrace10getMaxDec4Ev>
 800894c:	eef0 7a40 	vmov.f32	s15, s0
 8008950:	4b89      	ldr	r3, [pc, #548]	; (8008b78 <cppLoop+0x948>)
 8008952:	edc3 7a00 	vstr	s15, [r3]
 8008956:	4887      	ldr	r0, [pc, #540]	; (8008b74 <cppLoop+0x944>)
 8008958:	f00d fad7 	bl	8015f0a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 800895c:	4887      	ldr	r0, [pc, #540]	; (8008b7c <cppLoop+0x94c>)
 800895e:	f7fd f8b1 	bl	8005ac4 <_ZN12RotarySwitch8getValueEv>
 8008962:	4603      	mov	r3, r0
 8008964:	2b0f      	cmp	r3, #15
 8008966:	f202 847b 	bhi.w	800b260 <cppLoop+0x3030>
 800896a:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <cppLoop+0x740>)
 800896c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008970:	080089b1 	.word	0x080089b1
 8008974:	08008d3d 	.word	0x08008d3d
 8008978:	080090fd 	.word	0x080090fd
 800897c:	080093b5 	.word	0x080093b5
 8008980:	0800979b 	.word	0x0800979b
 8008984:	08009be5 	.word	0x08009be5
 8008988:	08009fe9 	.word	0x08009fe9
 800898c:	0800a3fd 	.word	0x0800a3fd
 8008990:	0800a687 	.word	0x0800a687
 8008994:	0800a913 	.word	0x0800a913
 8008998:	0800ab99 	.word	0x0800ab99
 800899c:	0800ae25 	.word	0x0800ae25
 80089a0:	0800aec5 	.word	0x0800aec5
 80089a4:	0800af81 	.word	0x0800af81
 80089a8:	0800b047 	.word	0x0800b047
 80089ac:	0800b189 	.word	0x0800b189
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 1 -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 0:
		led.fullColor('W');
 80089b0:	2157      	movs	r1, #87	; 0x57
 80089b2:	4873      	ldr	r0, [pc, #460]	; (8008b80 <cppLoop+0x950>)
 80089b4:	f7f9 fbce 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 80089b8:	f7f8 fb72 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089bc:	2100      	movs	r1, #0
 80089be:	2000      	movs	r0, #0
 80089c0:	f7f8 fb7e 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 80089c4:	4865      	ldr	r0, [pc, #404]	; (8008b5c <cppLoop+0x92c>)
 80089c6:	f7fb fafa 	bl	8003fbe <_ZN9LineTrace9getKpSlowEv>
 80089ca:	eeb0 7a40 	vmov.f32	s14, s0
 80089ce:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8008b84 <cppLoop+0x954>
 80089d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d6:	eeb0 0a67 	vmov.f32	s0, s15
 80089da:	f7f9 ff7d 	bl	80028d8 <_ZSt3absf>
 80089de:	ee10 3a10 	vmov	r3, s0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7f7 fdc8 	bl	8000578 <__aeabi_f2d>
 80089e8:	4603      	mov	r3, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	461a      	mov	r2, r3
 80089ee:	4623      	mov	r3, r4
 80089f0:	4865      	ldr	r0, [pc, #404]	; (8008b88 <cppLoop+0x958>)
 80089f2:	f7f8 fb8f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80089f6:	2101      	movs	r1, #1
 80089f8:	2000      	movs	r0, #0
 80089fa:	f7f8 fb61 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*10000));
 80089fe:	4857      	ldr	r0, [pc, #348]	; (8008b5c <cppLoop+0x92c>)
 8008a00:	f7fb faec 	bl	8003fdc <_ZN9LineTrace9getKiSlowEv>
 8008a04:	eeb0 7a40 	vmov.f32	s14, s0
 8008a08:	eddf 7a60 	vldr	s15, [pc, #384]	; 8008b8c <cppLoop+0x95c>
 8008a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a10:	eeb0 0a67 	vmov.f32	s0, s15
 8008a14:	f7f9 ff60 	bl	80028d8 <_ZSt3absf>
 8008a18:	ee10 3a10 	vmov	r3, s0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7f7 fdab 	bl	8000578 <__aeabi_f2d>
 8008a22:	4605      	mov	r5, r0
 8008a24:	460e      	mov	r6, r1
 8008a26:	484d      	ldr	r0, [pc, #308]	; (8008b5c <cppLoop+0x92c>)
 8008a28:	f7fb fae7 	bl	8003ffa <_ZN9LineTrace9getKdSlowEv>
 8008a2c:	eeb0 7a40 	vmov.f32	s14, s0
 8008a30:	eddf 7a54 	vldr	s15, [pc, #336]	; 8008b84 <cppLoop+0x954>
 8008a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a38:	eeb0 0a67 	vmov.f32	s0, s15
 8008a3c:	f7f9 ff4c 	bl	80028d8 <_ZSt3absf>
 8008a40:	ee10 3a10 	vmov	r3, s0
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7f7 fd97 	bl	8000578 <__aeabi_f2d>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	e9cd 3400 	strd	r3, r4, [sp]
 8008a52:	462a      	mov	r2, r5
 8008a54:	4633      	mov	r3, r6
 8008a56:	484e      	ldr	r0, [pc, #312]	; (8008b90 <cppLoop+0x960>)
 8008a58:	f7f8 fb5c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8008a5c:	484d      	ldr	r0, [pc, #308]	; (8008b94 <cppLoop+0x964>)
 8008a5e:	f7f9 fb15 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	bf0c      	ite	eq
 8008a68:	2301      	moveq	r3, #1
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d022      	beq.n	8008ab8 <cppLoop+0x888>
			led.LR(-1, 1);
 8008a72:	2201      	movs	r2, #1
 8008a74:	f04f 31ff 	mov.w	r1, #4294967295
 8008a78:	4841      	ldr	r0, [pc, #260]	; (8008b80 <cppLoop+0x950>)
 8008a7a:	f7f9 fc27 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a82:	f002 fd39 	bl	800b4f8 <HAL_Delay>

			selector_gain++;
 8008a86:	4b44      	ldr	r3, [pc, #272]	; (8008b98 <cppLoop+0x968>)
 8008a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	3301      	adds	r3, #1
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	b21a      	sxth	r2, r3
 8008a94:	4b40      	ldr	r3, [pc, #256]	; (8008b98 <cppLoop+0x968>)
 8008a96:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8008a98:	4b3f      	ldr	r3, [pc, #252]	; (8008b98 <cppLoop+0x968>)
 8008a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	dd02      	ble.n	8008aa8 <cppLoop+0x878>
 8008aa2:	4b3d      	ldr	r3, [pc, #244]	; (8008b98 <cppLoop+0x968>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8008aae:	4834      	ldr	r0, [pc, #208]	; (8008b80 <cppLoop+0x950>)
 8008ab0:	f7f9 fc0c 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008ab4:	f002 bbd6 	b.w	800b264 <cppLoop+0x3034>
		else if(joy_stick.getValue() == JOY_R){
 8008ab8:	4836      	ldr	r0, [pc, #216]	; (8008b94 <cppLoop+0x964>)
 8008aba:	f7f9 fae7 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b10      	cmp	r3, #16
 8008ac2:	bf0c      	ite	eq
 8008ac4:	2301      	moveq	r3, #1
 8008ac6:	2300      	movne	r3, #0
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 8089 	beq.w	8008be2 <cppLoop+0x9b2>
			led.LR(-1, 1);
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ad6:	482a      	ldr	r0, [pc, #168]	; (8008b80 <cppLoop+0x950>)
 8008ad8:	f7f9 fbf8 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008adc:	2064      	movs	r0, #100	; 0x64
 8008ade:	f002 fd0b 	bl	800b4f8 <HAL_Delay>
			if(selector_gain == 0){
 8008ae2:	4b2d      	ldr	r3, [pc, #180]	; (8008b98 <cppLoop+0x968>)
 8008ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d113      	bne.n	8008b14 <cppLoop+0x8e4>
				adj_kp_slow = adj_kp_slow + 0.000001;
 8008aec:	4b2b      	ldr	r3, [pc, #172]	; (8008b9c <cppLoop+0x96c>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7f7 fd41 	bl	8000578 <__aeabi_f2d>
 8008af6:	a314      	add	r3, pc, #80	; (adr r3, 8008b48 <cppLoop+0x918>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f7f7 fbde 	bl	80002bc <__adddf3>
 8008b00:	4603      	mov	r3, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	4618      	mov	r0, r3
 8008b06:	4621      	mov	r1, r4
 8008b08:	f7f8 f886 	bl	8000c18 <__aeabi_d2f>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	4b23      	ldr	r3, [pc, #140]	; (8008b9c <cppLoop+0x96c>)
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	e05a      	b.n	8008bca <cppLoop+0x99a>
			else if(selector_gain == 1){
 8008b14:	4b20      	ldr	r3, [pc, #128]	; (8008b98 <cppLoop+0x968>)
 8008b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d142      	bne.n	8008ba4 <cppLoop+0x974>
				adj_ki_slow = adj_ki_slow + 0.00001;
 8008b1e:	4b20      	ldr	r3, [pc, #128]	; (8008ba0 <cppLoop+0x970>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f7 fd28 	bl	8000578 <__aeabi_f2d>
 8008b28:	a309      	add	r3, pc, #36	; (adr r3, 8008b50 <cppLoop+0x920>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fbc5 	bl	80002bc <__adddf3>
 8008b32:	4603      	mov	r3, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	4618      	mov	r0, r3
 8008b38:	4621      	mov	r1, r4
 8008b3a:	f7f8 f86d 	bl	8000c18 <__aeabi_d2f>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4b17      	ldr	r3, [pc, #92]	; (8008ba0 <cppLoop+0x970>)
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	e041      	b.n	8008bca <cppLoop+0x99a>
 8008b46:	bf00      	nop
 8008b48:	a0b5ed8d 	.word	0xa0b5ed8d
 8008b4c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008b50:	88e368f1 	.word	0x88e368f1
 8008b54:	3ee4f8b5 	.word	0x3ee4f8b5
 8008b58:	2004530c 	.word	0x2004530c
 8008b5c:	200209d4 	.word	0x200209d4
 8008b60:	20045308 	.word	0x20045308
 8008b64:	20045314 	.word	0x20045314
 8008b68:	20045310 	.word	0x20045310
 8008b6c:	2004531c 	.word	0x2004531c
 8008b70:	20045318 	.word	0x20045318
 8008b74:	20045324 	.word	0x20045324
 8008b78:	20045320 	.word	0x20045320
 8008b7c:	20000550 	.word	0x20000550
 8008b80:	20000558 	.word	0x20000558
 8008b84:	461c4000 	.word	0x461c4000
 8008b88:	0801a5c8 	.word	0x0801a5c8
 8008b8c:	447a0000 	.word	0x447a0000
 8008b90:	0801a5d4 	.word	0x0801a5d4
 8008b94:	2000054c 	.word	0x2000054c
 8008b98:	20045268 	.word	0x20045268
 8008b9c:	20045288 	.word	0x20045288
 8008ba0:	20045290 	.word	0x20045290
				adj_kd_slow = adj_kd_slow + 0.000001;
 8008ba4:	4bc2      	ldr	r3, [pc, #776]	; (8008eb0 <cppLoop+0xc80>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7f7 fce5 	bl	8000578 <__aeabi_f2d>
 8008bae:	a3bc      	add	r3, pc, #752	; (adr r3, 8008ea0 <cppLoop+0xc70>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f7f7 fb82 	bl	80002bc <__adddf3>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	f7f8 f82a 	bl	8000c18 <__aeabi_d2f>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	4bba      	ldr	r3, [pc, #744]	; (8008eb0 <cppLoop+0xc80>)
 8008bc8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008bca:	2152      	movs	r1, #82	; 0x52
 8008bcc:	48b9      	ldr	r0, [pc, #740]	; (8008eb4 <cppLoop+0xc84>)
 8008bce:	f7f9 fac1 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8008bd8:	48b6      	ldr	r0, [pc, #728]	; (8008eb4 <cppLoop+0xc84>)
 8008bda:	f7f9 fb77 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008bde:	f002 bb41 	b.w	800b264 <cppLoop+0x3034>
		else if(joy_stick.getValue() == JOY_L){
 8008be2:	48b5      	ldr	r0, [pc, #724]	; (8008eb8 <cppLoop+0xc88>)
 8008be4:	f7f9 fa52 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	bf0c      	ite	eq
 8008bee:	2301      	moveq	r3, #1
 8008bf0:	2300      	movne	r3, #0
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d059      	beq.n	8008cac <cppLoop+0xa7c>
			led.LR(-1, 1);
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8008bfe:	48ad      	ldr	r0, [pc, #692]	; (8008eb4 <cppLoop+0xc84>)
 8008c00:	f7f9 fb64 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c04:	2064      	movs	r0, #100	; 0x64
 8008c06:	f002 fc77 	bl	800b4f8 <HAL_Delay>
			if(selector_gain == 0){
 8008c0a:	4bac      	ldr	r3, [pc, #688]	; (8008ebc <cppLoop+0xc8c>)
 8008c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d113      	bne.n	8008c3c <cppLoop+0xa0c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 8008c14:	4baa      	ldr	r3, [pc, #680]	; (8008ec0 <cppLoop+0xc90>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7f7 fcad 	bl	8000578 <__aeabi_f2d>
 8008c1e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008ea0 <cppLoop+0xc70>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	f7f7 fb48 	bl	80002b8 <__aeabi_dsub>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	4621      	mov	r1, r4
 8008c30:	f7f7 fff2 	bl	8000c18 <__aeabi_d2f>
 8008c34:	4602      	mov	r2, r0
 8008c36:	4ba2      	ldr	r3, [pc, #648]	; (8008ec0 <cppLoop+0xc90>)
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e02b      	b.n	8008c94 <cppLoop+0xa64>
			else if(selector_gain == 1){
 8008c3c:	4b9f      	ldr	r3, [pc, #636]	; (8008ebc <cppLoop+0xc8c>)
 8008c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d113      	bne.n	8008c6e <cppLoop+0xa3e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 8008c46:	4b9f      	ldr	r3, [pc, #636]	; (8008ec4 <cppLoop+0xc94>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7f7 fc94 	bl	8000578 <__aeabi_f2d>
 8008c50:	a395      	add	r3, pc, #596	; (adr r3, 8008ea8 <cppLoop+0xc78>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	f7f7 fb2f 	bl	80002b8 <__aeabi_dsub>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	4618      	mov	r0, r3
 8008c60:	4621      	mov	r1, r4
 8008c62:	f7f7 ffd9 	bl	8000c18 <__aeabi_d2f>
 8008c66:	4602      	mov	r2, r0
 8008c68:	4b96      	ldr	r3, [pc, #600]	; (8008ec4 <cppLoop+0xc94>)
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	e012      	b.n	8008c94 <cppLoop+0xa64>
				adj_kd_slow = adj_kd_slow - 0.000001;
 8008c6e:	4b90      	ldr	r3, [pc, #576]	; (8008eb0 <cppLoop+0xc80>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7f7 fc80 	bl	8000578 <__aeabi_f2d>
 8008c78:	a389      	add	r3, pc, #548	; (adr r3, 8008ea0 <cppLoop+0xc70>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	f7f7 fb1b 	bl	80002b8 <__aeabi_dsub>
 8008c82:	4603      	mov	r3, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	4618      	mov	r0, r3
 8008c88:	4621      	mov	r1, r4
 8008c8a:	f7f7 ffc5 	bl	8000c18 <__aeabi_d2f>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	4b87      	ldr	r3, [pc, #540]	; (8008eb0 <cppLoop+0xc80>)
 8008c92:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008c94:	2152      	movs	r1, #82	; 0x52
 8008c96:	4887      	ldr	r0, [pc, #540]	; (8008eb4 <cppLoop+0xc84>)
 8008c98:	f7f9 fa5c 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8008ca2:	4884      	ldr	r0, [pc, #528]	; (8008eb4 <cppLoop+0xc84>)
 8008ca4:	f7f9 fb12 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008ca8:	f002 badc 	b.w	800b264 <cppLoop+0x3034>
		else if(joy_stick.getValue() == JOY_C){
 8008cac:	4882      	ldr	r0, [pc, #520]	; (8008eb8 <cppLoop+0xc88>)
 8008cae:	f7f9 f9ed 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	bf0c      	ite	eq
 8008cb8:	2301      	moveq	r3, #1
 8008cba:	2300      	movne	r3, #0
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f002 82d0 	beq.w	800b264 <cppLoop+0x3034>
			led.LR(-1, 1);
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8008cca:	487a      	ldr	r0, [pc, #488]	; (8008eb4 <cppLoop+0xc84>)
 8008ccc:	f7f9 fafe 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008cd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008cd4:	f002 fc10 	bl	800b4f8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008cd8:	2300      	movs	r3, #0
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	4b78      	ldr	r3, [pc, #480]	; (8008ec0 <cppLoop+0xc90>)
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4979      	ldr	r1, [pc, #484]	; (8008ec8 <cppLoop+0xc98>)
 8008ce2:	487a      	ldr	r0, [pc, #488]	; (8008ecc <cppLoop+0xc9c>)
 8008ce4:	f7f8 fdba 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008ce8:	2300      	movs	r3, #0
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	4b75      	ldr	r3, [pc, #468]	; (8008ec4 <cppLoop+0xc94>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	4977      	ldr	r1, [pc, #476]	; (8008ed0 <cppLoop+0xca0>)
 8008cf2:	4876      	ldr	r0, [pc, #472]	; (8008ecc <cppLoop+0xc9c>)
 8008cf4:	f7f8 fdb2 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	4b6c      	ldr	r3, [pc, #432]	; (8008eb0 <cppLoop+0xc80>)
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4974      	ldr	r1, [pc, #464]	; (8008ed4 <cppLoop+0xca4>)
 8008d02:	4872      	ldr	r0, [pc, #456]	; (8008ecc <cppLoop+0xc9c>)
 8008d04:	f7f8 fdaa 	bl	800185c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008d08:	4b6d      	ldr	r3, [pc, #436]	; (8008ec0 <cppLoop+0xc90>)
 8008d0a:	edd3 7a00 	vldr	s15, [r3]
 8008d0e:	4b6d      	ldr	r3, [pc, #436]	; (8008ec4 <cppLoop+0xc94>)
 8008d10:	ed93 7a00 	vldr	s14, [r3]
 8008d14:	4b66      	ldr	r3, [pc, #408]	; (8008eb0 <cppLoop+0xc80>)
 8008d16:	edd3 6a00 	vldr	s13, [r3]
 8008d1a:	eeb0 1a66 	vmov.f32	s2, s13
 8008d1e:	eef0 0a47 	vmov.f32	s1, s14
 8008d22:	eeb0 0a67 	vmov.f32	s0, s15
 8008d26:	486c      	ldr	r0, [pc, #432]	; (8008ed8 <cppLoop+0xca8>)
 8008d28:	f7fb f930 	bl	8003f8c <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d32:	4860      	ldr	r0, [pc, #384]	; (8008eb4 <cppLoop+0xc84>)
 8008d34:	f7f9 faca 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008d38:	f002 ba94 	b.w	800b264 <cppLoop+0x3034>
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 2 -----------------------*/
	/*-------------------------------------------------------------------------*/

	case 1:
		led.fullColor('W');
 8008d3c:	2157      	movs	r1, #87	; 0x57
 8008d3e:	485d      	ldr	r0, [pc, #372]	; (8008eb4 <cppLoop+0xc84>)
 8008d40:	f7f9 fa08 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d44:	f7f8 f9ac 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d48:	2100      	movs	r1, #0
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	f7f8 f9b8 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*10000));
 8008d50:	4861      	ldr	r0, [pc, #388]	; (8008ed8 <cppLoop+0xca8>)
 8008d52:	f7fb f8ee 	bl	8003f32 <_ZN9LineTrace5getKpEv>
 8008d56:	eeb0 7a40 	vmov.f32	s14, s0
 8008d5a:	eddf 7a60 	vldr	s15, [pc, #384]	; 8008edc <cppLoop+0xcac>
 8008d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d62:	eeb0 0a67 	vmov.f32	s0, s15
 8008d66:	f7f9 fdb7 	bl	80028d8 <_ZSt3absf>
 8008d6a:	ee10 3a10 	vmov	r3, s0
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7f7 fc02 	bl	8000578 <__aeabi_f2d>
 8008d74:	4603      	mov	r3, r0
 8008d76:	460c      	mov	r4, r1
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	4858      	ldr	r0, [pc, #352]	; (8008ee0 <cppLoop+0xcb0>)
 8008d7e:	f7f8 f9c9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008d82:	2101      	movs	r1, #1
 8008d84:	2000      	movs	r0, #0
 8008d86:	f7f8 f99b 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*10000));
 8008d8a:	4853      	ldr	r0, [pc, #332]	; (8008ed8 <cppLoop+0xca8>)
 8008d8c:	f7fb f8e0 	bl	8003f50 <_ZN9LineTrace5getKiEv>
 8008d90:	eeb0 7a40 	vmov.f32	s14, s0
 8008d94:	eddf 7a53 	vldr	s15, [pc, #332]	; 8008ee4 <cppLoop+0xcb4>
 8008d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8008da0:	f7f9 fd9a 	bl	80028d8 <_ZSt3absf>
 8008da4:	ee10 3a10 	vmov	r3, s0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f7 fbe5 	bl	8000578 <__aeabi_f2d>
 8008dae:	4605      	mov	r5, r0
 8008db0:	460e      	mov	r6, r1
 8008db2:	4849      	ldr	r0, [pc, #292]	; (8008ed8 <cppLoop+0xca8>)
 8008db4:	f7fb f8db 	bl	8003f6e <_ZN9LineTrace5getKdEv>
 8008db8:	eeb0 7a40 	vmov.f32	s14, s0
 8008dbc:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008edc <cppLoop+0xcac>
 8008dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8008dc8:	f7f9 fd86 	bl	80028d8 <_ZSt3absf>
 8008dcc:	ee10 3a10 	vmov	r3, s0
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7f7 fbd1 	bl	8000578 <__aeabi_f2d>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	e9cd 3400 	strd	r3, r4, [sp]
 8008dde:	462a      	mov	r2, r5
 8008de0:	4633      	mov	r3, r6
 8008de2:	4841      	ldr	r0, [pc, #260]	; (8008ee8 <cppLoop+0xcb8>)
 8008de4:	f7f8 f996 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8008de8:	4833      	ldr	r0, [pc, #204]	; (8008eb8 <cppLoop+0xc88>)
 8008dea:	f7f9 f94f 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	bf0c      	ite	eq
 8008df4:	2301      	moveq	r3, #1
 8008df6:	2300      	movne	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d022      	beq.n	8008e44 <cppLoop+0xc14>
			led.LR(-1, 1);
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f04f 31ff 	mov.w	r1, #4294967295
 8008e04:	482b      	ldr	r0, [pc, #172]	; (8008eb4 <cppLoop+0xc84>)
 8008e06:	f7f9 fa61 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e0e:	f002 fb73 	bl	800b4f8 <HAL_Delay>

			selector_gain++;
 8008e12:	4b2a      	ldr	r3, [pc, #168]	; (8008ebc <cppLoop+0xc8c>)
 8008e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	b21a      	sxth	r2, r3
 8008e20:	4b26      	ldr	r3, [pc, #152]	; (8008ebc <cppLoop+0xc8c>)
 8008e22:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8008e24:	4b25      	ldr	r3, [pc, #148]	; (8008ebc <cppLoop+0xc8c>)
 8008e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	dd02      	ble.n	8008e34 <cppLoop+0xc04>
 8008e2e:	4b23      	ldr	r3, [pc, #140]	; (8008ebc <cppLoop+0xc8c>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008e34:	2200      	movs	r2, #0
 8008e36:	f04f 31ff 	mov.w	r1, #4294967295
 8008e3a:	481e      	ldr	r0, [pc, #120]	; (8008eb4 <cppLoop+0xc84>)
 8008e3c:	f7f9 fa46 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8008e40:	f002 ba12 	b.w	800b268 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_R){
 8008e44:	481c      	ldr	r0, [pc, #112]	; (8008eb8 <cppLoop+0xc88>)
 8008e46:	f7f9 f921 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b10      	cmp	r3, #16
 8008e4e:	bf0c      	ite	eq
 8008e50:	2301      	moveq	r3, #1
 8008e52:	2300      	movne	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 8082 	beq.w	8008f60 <cppLoop+0xd30>
			led.LR(-1, 1);
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8008e62:	4814      	ldr	r0, [pc, #80]	; (8008eb4 <cppLoop+0xc84>)
 8008e64:	f7f9 fa32 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e68:	2064      	movs	r0, #100	; 0x64
 8008e6a:	f002 fb45 	bl	800b4f8 <HAL_Delay>
			if(selector_gain == 0){
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <cppLoop+0xc8c>)
 8008e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d13b      	bne.n	8008ef0 <cppLoop+0xcc0>
				adj_kp = adj_kp + 0.000001;
 8008e78:	4b1c      	ldr	r3, [pc, #112]	; (8008eec <cppLoop+0xcbc>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7f7 fb7b 	bl	8000578 <__aeabi_f2d>
 8008e82:	a307      	add	r3, pc, #28	; (adr r3, 8008ea0 <cppLoop+0xc70>)
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f7f7 fa18 	bl	80002bc <__adddf3>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	4618      	mov	r0, r3
 8008e92:	4621      	mov	r1, r4
 8008e94:	f7f7 fec0 	bl	8000c18 <__aeabi_d2f>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	4b14      	ldr	r3, [pc, #80]	; (8008eec <cppLoop+0xcbc>)
 8008e9c:	601a      	str	r2, [r3, #0]
 8008e9e:	e053      	b.n	8008f48 <cppLoop+0xd18>
 8008ea0:	a0b5ed8d 	.word	0xa0b5ed8d
 8008ea4:	3eb0c6f7 	.word	0x3eb0c6f7
 8008ea8:	88e368f1 	.word	0x88e368f1
 8008eac:	3ee4f8b5 	.word	0x3ee4f8b5
 8008eb0:	20045298 	.word	0x20045298
 8008eb4:	20000558 	.word	0x20000558
 8008eb8:	2000054c 	.word	0x2000054c
 8008ebc:	20045268 	.word	0x20045268
 8008ec0:	20045288 	.word	0x20045288
 8008ec4:	20045290 	.word	0x20045290
 8008ec8:	0801a5e4 	.word	0x0801a5e4
 8008ecc:	0801a5f0 	.word	0x0801a5f0
 8008ed0:	0801a5f8 	.word	0x0801a5f8
 8008ed4:	0801a604 	.word	0x0801a604
 8008ed8:	200209d4 	.word	0x200209d4
 8008edc:	461c4000 	.word	0x461c4000
 8008ee0:	0801a610 	.word	0x0801a610
 8008ee4:	447a0000 	.word	0x447a0000
 8008ee8:	0801a5d4 	.word	0x0801a5d4
 8008eec:	20045270 	.word	0x20045270
			else if(selector_gain == 1){
 8008ef0:	4b77      	ldr	r3, [pc, #476]	; (80090d0 <cppLoop+0xea0>)
 8008ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d113      	bne.n	8008f22 <cppLoop+0xcf2>
				adj_ki = adj_ki + 0.00001;
 8008efa:	4b76      	ldr	r3, [pc, #472]	; (80090d4 <cppLoop+0xea4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7f7 fb3a 	bl	8000578 <__aeabi_f2d>
 8008f04:	a36e      	add	r3, pc, #440	; (adr r3, 80090c0 <cppLoop+0xe90>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f7f7 f9d7 	bl	80002bc <__adddf3>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	4618      	mov	r0, r3
 8008f14:	4621      	mov	r1, r4
 8008f16:	f7f7 fe7f 	bl	8000c18 <__aeabi_d2f>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	4b6d      	ldr	r3, [pc, #436]	; (80090d4 <cppLoop+0xea4>)
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	e012      	b.n	8008f48 <cppLoop+0xd18>
				adj_kd = adj_kd + 0.000001;
 8008f22:	4b6d      	ldr	r3, [pc, #436]	; (80090d8 <cppLoop+0xea8>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f7 fb26 	bl	8000578 <__aeabi_f2d>
 8008f2c:	a366      	add	r3, pc, #408	; (adr r3, 80090c8 <cppLoop+0xe98>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f7f7 f9c3 	bl	80002bc <__adddf3>
 8008f36:	4603      	mov	r3, r0
 8008f38:	460c      	mov	r4, r1
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	f7f7 fe6b 	bl	8000c18 <__aeabi_d2f>
 8008f42:	4602      	mov	r2, r0
 8008f44:	4b64      	ldr	r3, [pc, #400]	; (80090d8 <cppLoop+0xea8>)
 8008f46:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008f48:	2152      	movs	r1, #82	; 0x52
 8008f4a:	4864      	ldr	r0, [pc, #400]	; (80090dc <cppLoop+0xeac>)
 8008f4c:	f7f9 f902 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008f50:	2200      	movs	r2, #0
 8008f52:	f04f 31ff 	mov.w	r1, #4294967295
 8008f56:	4861      	ldr	r0, [pc, #388]	; (80090dc <cppLoop+0xeac>)
 8008f58:	f7f9 f9b8 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008f5c:	f002 b984 	b.w	800b268 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_L){
 8008f60:	485f      	ldr	r0, [pc, #380]	; (80090e0 <cppLoop+0xeb0>)
 8008f62:	f7f9 f893 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	bf0c      	ite	eq
 8008f6c:	2301      	moveq	r3, #1
 8008f6e:	2300      	movne	r3, #0
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d059      	beq.n	800902a <cppLoop+0xdfa>
			led.LR(-1, 1);
 8008f76:	2201      	movs	r2, #1
 8008f78:	f04f 31ff 	mov.w	r1, #4294967295
 8008f7c:	4857      	ldr	r0, [pc, #348]	; (80090dc <cppLoop+0xeac>)
 8008f7e:	f7f9 f9a5 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f82:	2064      	movs	r0, #100	; 0x64
 8008f84:	f002 fab8 	bl	800b4f8 <HAL_Delay>
			if(selector_gain == 0){
 8008f88:	4b51      	ldr	r3, [pc, #324]	; (80090d0 <cppLoop+0xea0>)
 8008f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d113      	bne.n	8008fba <cppLoop+0xd8a>
				adj_kp = adj_kp - 0.000001;
 8008f92:	4b54      	ldr	r3, [pc, #336]	; (80090e4 <cppLoop+0xeb4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7f7 faee 	bl	8000578 <__aeabi_f2d>
 8008f9c:	a34a      	add	r3, pc, #296	; (adr r3, 80090c8 <cppLoop+0xe98>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f7f7 f989 	bl	80002b8 <__aeabi_dsub>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	460c      	mov	r4, r1
 8008faa:	4618      	mov	r0, r3
 8008fac:	4621      	mov	r1, r4
 8008fae:	f7f7 fe33 	bl	8000c18 <__aeabi_d2f>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	4b4b      	ldr	r3, [pc, #300]	; (80090e4 <cppLoop+0xeb4>)
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	e02b      	b.n	8009012 <cppLoop+0xde2>
			else if(selector_gain == 1){
 8008fba:	4b45      	ldr	r3, [pc, #276]	; (80090d0 <cppLoop+0xea0>)
 8008fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d113      	bne.n	8008fec <cppLoop+0xdbc>
				adj_ki = adj_ki - 0.00001;
 8008fc4:	4b43      	ldr	r3, [pc, #268]	; (80090d4 <cppLoop+0xea4>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7f7 fad5 	bl	8000578 <__aeabi_f2d>
 8008fce:	a33c      	add	r3, pc, #240	; (adr r3, 80090c0 <cppLoop+0xe90>)
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 f970 	bl	80002b8 <__aeabi_dsub>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	4618      	mov	r0, r3
 8008fde:	4621      	mov	r1, r4
 8008fe0:	f7f7 fe1a 	bl	8000c18 <__aeabi_d2f>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	4b3b      	ldr	r3, [pc, #236]	; (80090d4 <cppLoop+0xea4>)
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	e012      	b.n	8009012 <cppLoop+0xde2>
				adj_kd = adj_kd - 0.000001;
 8008fec:	4b3a      	ldr	r3, [pc, #232]	; (80090d8 <cppLoop+0xea8>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7f7 fac1 	bl	8000578 <__aeabi_f2d>
 8008ff6:	a334      	add	r3, pc, #208	; (adr r3, 80090c8 <cppLoop+0xe98>)
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	f7f7 f95c 	bl	80002b8 <__aeabi_dsub>
 8009000:	4603      	mov	r3, r0
 8009002:	460c      	mov	r4, r1
 8009004:	4618      	mov	r0, r3
 8009006:	4621      	mov	r1, r4
 8009008:	f7f7 fe06 	bl	8000c18 <__aeabi_d2f>
 800900c:	4602      	mov	r2, r0
 800900e:	4b32      	ldr	r3, [pc, #200]	; (80090d8 <cppLoop+0xea8>)
 8009010:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009012:	2152      	movs	r1, #82	; 0x52
 8009014:	4831      	ldr	r0, [pc, #196]	; (80090dc <cppLoop+0xeac>)
 8009016:	f7f9 f89d 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800901a:	2200      	movs	r2, #0
 800901c:	f04f 31ff 	mov.w	r1, #4294967295
 8009020:	482e      	ldr	r0, [pc, #184]	; (80090dc <cppLoop+0xeac>)
 8009022:	f7f9 f953 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009026:	f002 b91f 	b.w	800b268 <cppLoop+0x3038>
		else if(joy_stick.getValue() == JOY_C){
 800902a:	482d      	ldr	r0, [pc, #180]	; (80090e0 <cppLoop+0xeb0>)
 800902c:	f7f9 f82e 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009030:	4603      	mov	r3, r0
 8009032:	2b02      	cmp	r3, #2
 8009034:	bf0c      	ite	eq
 8009036:	2301      	moveq	r3, #1
 8009038:	2300      	movne	r3, #0
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	f002 8113 	beq.w	800b268 <cppLoop+0x3038>
			led.LR(-1, 1);
 8009042:	2201      	movs	r2, #1
 8009044:	f04f 31ff 	mov.w	r1, #4294967295
 8009048:	4824      	ldr	r0, [pc, #144]	; (80090dc <cppLoop+0xeac>)
 800904a:	f7f9 f93f 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800904e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009052:	f002 fa51 	bl	800b4f8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009056:	2300      	movs	r3, #0
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	4b22      	ldr	r3, [pc, #136]	; (80090e4 <cppLoop+0xeb4>)
 800905c:	2201      	movs	r2, #1
 800905e:	4922      	ldr	r1, [pc, #136]	; (80090e8 <cppLoop+0xeb8>)
 8009060:	4822      	ldr	r0, [pc, #136]	; (80090ec <cppLoop+0xebc>)
 8009062:	f7f8 fbfb 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009066:	2300      	movs	r3, #0
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	4b1a      	ldr	r3, [pc, #104]	; (80090d4 <cppLoop+0xea4>)
 800906c:	2201      	movs	r2, #1
 800906e:	4920      	ldr	r1, [pc, #128]	; (80090f0 <cppLoop+0xec0>)
 8009070:	481e      	ldr	r0, [pc, #120]	; (80090ec <cppLoop+0xebc>)
 8009072:	f7f8 fbf3 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009076:	2300      	movs	r3, #0
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	4b17      	ldr	r3, [pc, #92]	; (80090d8 <cppLoop+0xea8>)
 800907c:	2201      	movs	r2, #1
 800907e:	491d      	ldr	r1, [pc, #116]	; (80090f4 <cppLoop+0xec4>)
 8009080:	481a      	ldr	r0, [pc, #104]	; (80090ec <cppLoop+0xebc>)
 8009082:	f7f8 fbeb 	bl	800185c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009086:	4b17      	ldr	r3, [pc, #92]	; (80090e4 <cppLoop+0xeb4>)
 8009088:	edd3 7a00 	vldr	s15, [r3]
 800908c:	4b11      	ldr	r3, [pc, #68]	; (80090d4 <cppLoop+0xea4>)
 800908e:	ed93 7a00 	vldr	s14, [r3]
 8009092:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <cppLoop+0xea8>)
 8009094:	edd3 6a00 	vldr	s13, [r3]
 8009098:	eeb0 1a66 	vmov.f32	s2, s13
 800909c:	eef0 0a47 	vmov.f32	s1, s14
 80090a0:	eeb0 0a67 	vmov.f32	s0, s15
 80090a4:	4814      	ldr	r0, [pc, #80]	; (80090f8 <cppLoop+0xec8>)
 80090a6:	f7fa ff2b 	bl	8003f00 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80090aa:	2200      	movs	r2, #0
 80090ac:	f04f 31ff 	mov.w	r1, #4294967295
 80090b0:	480a      	ldr	r0, [pc, #40]	; (80090dc <cppLoop+0xeac>)
 80090b2:	f7f9 f90b 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80090b6:	f002 b8d7 	b.w	800b268 <cppLoop+0x3038>
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w
 80090c0:	88e368f1 	.word	0x88e368f1
 80090c4:	3ee4f8b5 	.word	0x3ee4f8b5
 80090c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80090cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80090d0:	20045268 	.word	0x20045268
 80090d4:	20045278 	.word	0x20045278
 80090d8:	20045280 	.word	0x20045280
 80090dc:	20000558 	.word	0x20000558
 80090e0:	2000054c 	.word	0x2000054c
 80090e4:	20045270 	.word	0x20045270
 80090e8:	0801a61c 	.word	0x0801a61c
 80090ec:	0801a5f0 	.word	0x0801a5f0
 80090f0:	0801a624 	.word	0x0801a624
 80090f4:	0801a62c 	.word	0x0801a62c
 80090f8:	200209d4 	.word	0x200209d4

	/*-------------------------------------------------------------------------*/
	/*----------------------------------- First running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 2:
		led.fullColor('C');
 80090fc:	2143      	movs	r1, #67	; 0x43
 80090fe:	489e      	ldr	r0, [pc, #632]	; (8009378 <cppLoop+0x1148>)
 8009100:	f7f9 f828 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8009104:	489d      	ldr	r0, [pc, #628]	; (800937c <cppLoop+0x114c>)
 8009106:	f7f8 ffc1 	bl	800208c <_ZN8JoyStick8getValueEv>
 800910a:	4603      	mov	r3, r0
 800910c:	2b04      	cmp	r3, #4
 800910e:	bf0c      	ite	eq
 8009110:	2301      	moveq	r3, #1
 8009112:	2300      	movne	r3, #0
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d020      	beq.n	800915c <cppLoop+0xf2c>
			led.LR(-1, 1);
 800911a:	2201      	movs	r2, #1
 800911c:	f04f 31ff 	mov.w	r1, #4294967295
 8009120:	4895      	ldr	r0, [pc, #596]	; (8009378 <cppLoop+0x1148>)
 8009122:	f7f9 f8d3 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009126:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800912a:	f002 f9e5 	bl	800b4f8 <HAL_Delay>

			selector_run++;
 800912e:	4b94      	ldr	r3, [pc, #592]	; (8009380 <cppLoop+0x1150>)
 8009130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009134:	b29b      	uxth	r3, r3
 8009136:	3301      	adds	r3, #1
 8009138:	b29b      	uxth	r3, r3
 800913a:	b21a      	sxth	r2, r3
 800913c:	4b90      	ldr	r3, [pc, #576]	; (8009380 <cppLoop+0x1150>)
 800913e:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009140:	4b8f      	ldr	r3, [pc, #572]	; (8009380 <cppLoop+0x1150>)
 8009142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009146:	2b01      	cmp	r3, #1
 8009148:	dd02      	ble.n	8009150 <cppLoop+0xf20>
 800914a:	4b8d      	ldr	r3, [pc, #564]	; (8009380 <cppLoop+0x1150>)
 800914c:	2200      	movs	r2, #0
 800914e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009150:	2200      	movs	r2, #0
 8009152:	f04f 31ff 	mov.w	r1, #4294967295
 8009156:	4888      	ldr	r0, [pc, #544]	; (8009378 <cppLoop+0x1148>)
 8009158:	f7f9 f8b8 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 800915c:	4b88      	ldr	r3, [pc, #544]	; (8009380 <cppLoop+0x1150>)
 800915e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d15c      	bne.n	8009220 <cppLoop+0xff0>
			lcd_clear();
 8009166:	f7f7 ff9b 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800916a:	2100      	movs	r1, #0
 800916c:	2000      	movs	r0, #0
 800916e:	f7f7 ffa7 	bl	80010c0 <lcd_locate>
			lcd_printf("1:   ");
 8009172:	4884      	ldr	r0, [pc, #528]	; (8009384 <cppLoop+0x1154>)
 8009174:	f7f7 ffce 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009178:	2101      	movs	r1, #1
 800917a:	2000      	movs	r0, #0
 800917c:	f7f7 ffa0 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_velocity);
 8009180:	4b81      	ldr	r3, [pc, #516]	; (8009388 <cppLoop+0x1158>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4618      	mov	r0, r3
 8009186:	f7f7 f9f7 	bl	8000578 <__aeabi_f2d>
 800918a:	4603      	mov	r3, r0
 800918c:	460c      	mov	r4, r1
 800918e:	461a      	mov	r2, r3
 8009190:	4623      	mov	r3, r4
 8009192:	487e      	ldr	r0, [pc, #504]	; (800938c <cppLoop+0x115c>)
 8009194:	f7f7 ffbe 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8009198:	4878      	ldr	r0, [pc, #480]	; (800937c <cppLoop+0x114c>)
 800919a:	f7f8 ff77 	bl	800208c <_ZN8JoyStick8getValueEv>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	bf0c      	ite	eq
 80091a4:	2301      	moveq	r3, #1
 80091a6:	2300      	movne	r3, #0
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f002 805e 	beq.w	800b26c <cppLoop+0x303c>
				HAL_Delay(500);
 80091b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091b4:	f002 f9a0 	bl	800b4f8 <HAL_Delay>

				line_trace.setTargetVelocity(adj_velocity);
 80091b8:	4b73      	ldr	r3, [pc, #460]	; (8009388 <cppLoop+0x1158>)
 80091ba:	edd3 7a00 	vldr	s15, [r3]
 80091be:	eeb0 0a67 	vmov.f32	s0, s15
 80091c2:	4873      	ldr	r0, [pc, #460]	; (8009390 <cppLoop+0x1160>)
 80091c4:	f7fa ff37 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(1, -1);
 80091c8:	f04f 32ff 	mov.w	r2, #4294967295
 80091cc:	2101      	movs	r1, #1
 80091ce:	486a      	ldr	r0, [pc, #424]	; (8009378 <cppLoop+0x1148>)
 80091d0:	f7f9 f87c 	bl	80022cc <_ZN3LED2LREaa>

				// Record start
				HAL_Delay(1000);
 80091d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091d8:	f002 f98e 	bl	800b4f8 <HAL_Delay>

				// Run
				line_trace.setMode(FIRST_RUNNING);
 80091dc:	2100      	movs	r1, #0
 80091de:	486c      	ldr	r0, [pc, #432]	; (8009390 <cppLoop+0x1160>)
 80091e0:	f7fb fa08 	bl	80045f4 <_ZN9LineTrace7setModeEs>

				logger.resetLogsTim1();
 80091e4:	486b      	ldr	r0, [pc, #428]	; (8009394 <cppLoop+0x1164>)
 80091e6:	f7fc f906 	bl	80053f6 <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 80091ea:	486a      	ldr	r0, [pc, #424]	; (8009394 <cppLoop+0x1164>)
 80091ec:	f7fc f92b 	bl	8005446 <_ZN6Logger13resetLogsTim2Ev>

				line_trace.running();
 80091f0:	4867      	ldr	r0, [pc, #412]	; (8009390 <cppLoop+0x1160>)
 80091f2:	f7fb fa4f 	bl	8004694 <_ZN9LineTrace7runningEv>

				logger.stop();
 80091f6:	4867      	ldr	r0, [pc, #412]	; (8009394 <cppLoop+0x1164>)
 80091f8:	f7fc f98e 	bl	8005518 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 80091fc:	4a66      	ldr	r2, [pc, #408]	; (8009398 <cppLoop+0x1168>)
 80091fe:	4967      	ldr	r1, [pc, #412]	; (800939c <cppLoop+0x116c>)
 8009200:	4864      	ldr	r0, [pc, #400]	; (8009394 <cppLoop+0x1164>)
 8009202:	f7fc f822 	bl	800524a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009206:	4a66      	ldr	r2, [pc, #408]	; (80093a0 <cppLoop+0x1170>)
 8009208:	4964      	ldr	r1, [pc, #400]	; (800939c <cppLoop+0x116c>)
 800920a:	4862      	ldr	r0, [pc, #392]	; (8009394 <cppLoop+0x1164>)
 800920c:	f7fc f831 	bl	8005272 <_ZN6Logger9saveLogs2EPKcS1_>


				led.LR(0, -1);
 8009210:	f04f 32ff 	mov.w	r2, #4294967295
 8009214:	2100      	movs	r1, #0
 8009216:	4858      	ldr	r0, [pc, #352]	; (8009378 <cppLoop+0x1148>)
 8009218:	f7f9 f858 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}
		}

		break;
 800921c:	f002 b826 	b.w	800b26c <cppLoop+0x303c>
			lcd_clear();
 8009220:	f7f7 ff3e 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009224:	2100      	movs	r1, #0
 8009226:	2000      	movs	r0, #0
 8009228:	f7f7 ff4a 	bl	80010c0 <lcd_locate>
			lcd_printf("1: ");
 800922c:	485d      	ldr	r0, [pc, #372]	; (80093a4 <cppLoop+0x1174>)
 800922e:	f7f7 ff71 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009232:	2101      	movs	r1, #1
 8009234:	2000      	movs	r0, #0
 8009236:	f7f7 ff43 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", adj_velocity);
 800923a:	4b53      	ldr	r3, [pc, #332]	; (8009388 <cppLoop+0x1158>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4618      	mov	r0, r3
 8009240:	f7f7 f99a 	bl	8000578 <__aeabi_f2d>
 8009244:	4603      	mov	r3, r0
 8009246:	460c      	mov	r4, r1
 8009248:	461a      	mov	r2, r3
 800924a:	4623      	mov	r3, r4
 800924c:	4856      	ldr	r0, [pc, #344]	; (80093a8 <cppLoop+0x1178>)
 800924e:	f7f7 ff61 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_R){
 8009252:	484a      	ldr	r0, [pc, #296]	; (800937c <cppLoop+0x114c>)
 8009254:	f7f8 ff1a 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009258:	4603      	mov	r3, r0
 800925a:	2b10      	cmp	r3, #16
 800925c:	bf0c      	ite	eq
 800925e:	2301      	moveq	r3, #1
 8009260:	2300      	movne	r3, #0
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d023      	beq.n	80092b0 <cppLoop+0x1080>
				led.LR(-1, 1);
 8009268:	2201      	movs	r2, #1
 800926a:	f04f 31ff 	mov.w	r1, #4294967295
 800926e:	4842      	ldr	r0, [pc, #264]	; (8009378 <cppLoop+0x1148>)
 8009270:	f7f9 f82c 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009274:	2064      	movs	r0, #100	; 0x64
 8009276:	f002 f93f 	bl	800b4f8 <HAL_Delay>
				adj_velocity = adj_velocity + 0.1;
 800927a:	4b43      	ldr	r3, [pc, #268]	; (8009388 <cppLoop+0x1158>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4618      	mov	r0, r3
 8009280:	f7f7 f97a 	bl	8000578 <__aeabi_f2d>
 8009284:	a33a      	add	r3, pc, #232	; (adr r3, 8009370 <cppLoop+0x1140>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f7f7 f817 	bl	80002bc <__adddf3>
 800928e:	4603      	mov	r3, r0
 8009290:	460c      	mov	r4, r1
 8009292:	4618      	mov	r0, r3
 8009294:	4621      	mov	r1, r4
 8009296:	f7f7 fcbf 	bl	8000c18 <__aeabi_d2f>
 800929a:	4602      	mov	r2, r0
 800929c:	4b3a      	ldr	r3, [pc, #232]	; (8009388 <cppLoop+0x1158>)
 800929e:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 80092a0:	2200      	movs	r2, #0
 80092a2:	f04f 31ff 	mov.w	r1, #4294967295
 80092a6:	4834      	ldr	r0, [pc, #208]	; (8009378 <cppLoop+0x1148>)
 80092a8:	f7f9 f810 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80092ac:	f001 bfde 	b.w	800b26c <cppLoop+0x303c>
			else if(joy_stick.getValue() == JOY_L){
 80092b0:	4832      	ldr	r0, [pc, #200]	; (800937c <cppLoop+0x114c>)
 80092b2:	f7f8 feeb 	bl	800208c <_ZN8JoyStick8getValueEv>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	bf0c      	ite	eq
 80092bc:	2301      	moveq	r3, #1
 80092be:	2300      	movne	r3, #0
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d023      	beq.n	800930e <cppLoop+0x10de>
				led.LR(-1, 1);
 80092c6:	2201      	movs	r2, #1
 80092c8:	f04f 31ff 	mov.w	r1, #4294967295
 80092cc:	482a      	ldr	r0, [pc, #168]	; (8009378 <cppLoop+0x1148>)
 80092ce:	f7f8 fffd 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 80092d2:	2064      	movs	r0, #100	; 0x64
 80092d4:	f002 f910 	bl	800b4f8 <HAL_Delay>
				adj_velocity = adj_velocity - 0.1;
 80092d8:	4b2b      	ldr	r3, [pc, #172]	; (8009388 <cppLoop+0x1158>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f7 f94b 	bl	8000578 <__aeabi_f2d>
 80092e2:	a323      	add	r3, pc, #140	; (adr r3, 8009370 <cppLoop+0x1140>)
 80092e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e8:	f7f6 ffe6 	bl	80002b8 <__aeabi_dsub>
 80092ec:	4603      	mov	r3, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	4618      	mov	r0, r3
 80092f2:	4621      	mov	r1, r4
 80092f4:	f7f7 fc90 	bl	8000c18 <__aeabi_d2f>
 80092f8:	4602      	mov	r2, r0
 80092fa:	4b23      	ldr	r3, [pc, #140]	; (8009388 <cppLoop+0x1158>)
 80092fc:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 80092fe:	2200      	movs	r2, #0
 8009300:	f04f 31ff 	mov.w	r1, #4294967295
 8009304:	481c      	ldr	r0, [pc, #112]	; (8009378 <cppLoop+0x1148>)
 8009306:	f7f8 ffe1 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800930a:	f001 bfaf 	b.w	800b26c <cppLoop+0x303c>
			else if(joy_stick.getValue() == JOY_C){
 800930e:	481b      	ldr	r0, [pc, #108]	; (800937c <cppLoop+0x114c>)
 8009310:	f7f8 febc 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009314:	4603      	mov	r3, r0
 8009316:	2b02      	cmp	r3, #2
 8009318:	bf0c      	ite	eq
 800931a:	2301      	moveq	r3, #1
 800931c:	2300      	movne	r3, #0
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	f001 87a3 	beq.w	800b26c <cppLoop+0x303c>
				led.LR(-1, 1);
 8009326:	2201      	movs	r2, #1
 8009328:	f04f 31ff 	mov.w	r1, #4294967295
 800932c:	4812      	ldr	r0, [pc, #72]	; (8009378 <cppLoop+0x1148>)
 800932e:	f7f8 ffcd 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009332:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009336:	f002 f8df 	bl	800b4f8 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL.TXT", 1, &adj_velocity, OVER_WRITE);
 800933a:	2300      	movs	r3, #0
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	4b12      	ldr	r3, [pc, #72]	; (8009388 <cppLoop+0x1158>)
 8009340:	2201      	movs	r2, #1
 8009342:	491a      	ldr	r1, [pc, #104]	; (80093ac <cppLoop+0x117c>)
 8009344:	481a      	ldr	r0, [pc, #104]	; (80093b0 <cppLoop+0x1180>)
 8009346:	f7f8 fa89 	bl	800185c <sd_write_array_float>
				line_trace.setTargetVelocity(adj_velocity);
 800934a:	4b0f      	ldr	r3, [pc, #60]	; (8009388 <cppLoop+0x1158>)
 800934c:	edd3 7a00 	vldr	s15, [r3]
 8009350:	eeb0 0a67 	vmov.f32	s0, s15
 8009354:	480e      	ldr	r0, [pc, #56]	; (8009390 <cppLoop+0x1160>)
 8009356:	f7fa fe6e 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(-1, 0);
 800935a:	2200      	movs	r2, #0
 800935c:	f04f 31ff 	mov.w	r1, #4294967295
 8009360:	4805      	ldr	r0, [pc, #20]	; (8009378 <cppLoop+0x1148>)
 8009362:	f7f8 ffb3 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009366:	f001 bf81 	b.w	800b26c <cppLoop+0x303c>
 800936a:	bf00      	nop
 800936c:	f3af 8000 	nop.w
 8009370:	9999999a 	.word	0x9999999a
 8009374:	3fb99999 	.word	0x3fb99999
 8009378:	20000558 	.word	0x20000558
 800937c:	2000054c 	.word	0x2000054c
 8009380:	2004526a 	.word	0x2004526a
 8009384:	0801a634 	.word	0x0801a634
 8009388:	200452a0 	.word	0x200452a0
 800938c:	0801a63c 	.word	0x0801a63c
 8009390:	200209d4 	.word	0x200209d4
 8009394:	2000057c 	.word	0x2000057c
 8009398:	0801a648 	.word	0x0801a648
 800939c:	0801a654 	.word	0x0801a654
 80093a0:	0801a660 	.word	0x0801a660
 80093a4:	0801a66c 	.word	0x0801a66c
 80093a8:	0801a670 	.word	0x0801a670
 80093ac:	0801a67c 	.word	0x0801a67c
 80093b0:	0801a5f0 	.word	0x0801a5f0

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Second running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 3:
		led.fullColor('Y');
 80093b4:	2159      	movs	r1, #89	; 0x59
 80093b6:	48be      	ldr	r0, [pc, #760]	; (80096b0 <cppLoop+0x1480>)
 80093b8:	f7f8 fecc 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 80093bc:	48bd      	ldr	r0, [pc, #756]	; (80096b4 <cppLoop+0x1484>)
 80093be:	f7f8 fe65 	bl	800208c <_ZN8JoyStick8getValueEv>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	bf0c      	ite	eq
 80093c8:	2301      	moveq	r3, #1
 80093ca:	2300      	movne	r3, #0
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d020      	beq.n	8009414 <cppLoop+0x11e4>
			led.LR(-1, 1);
 80093d2:	2201      	movs	r2, #1
 80093d4:	f04f 31ff 	mov.w	r1, #4294967295
 80093d8:	48b5      	ldr	r0, [pc, #724]	; (80096b0 <cppLoop+0x1480>)
 80093da:	f7f8 ff77 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80093de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80093e2:	f002 f889 	bl	800b4f8 <HAL_Delay>

			selector_run++;
 80093e6:	4bb4      	ldr	r3, [pc, #720]	; (80096b8 <cppLoop+0x1488>)
 80093e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3301      	adds	r3, #1
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	b21a      	sxth	r2, r3
 80093f4:	4bb0      	ldr	r3, [pc, #704]	; (80096b8 <cppLoop+0x1488>)
 80093f6:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 80093f8:	4baf      	ldr	r3, [pc, #700]	; (80096b8 <cppLoop+0x1488>)
 80093fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	dd02      	ble.n	8009408 <cppLoop+0x11d8>
 8009402:	4bad      	ldr	r3, [pc, #692]	; (80096b8 <cppLoop+0x1488>)
 8009404:	2200      	movs	r2, #0
 8009406:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009408:	2200      	movs	r2, #0
 800940a:	f04f 31ff 	mov.w	r1, #4294967295
 800940e:	48a8      	ldr	r0, [pc, #672]	; (80096b0 <cppLoop+0x1480>)
 8009410:	f7f8 ff5c 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009414:	4ba8      	ldr	r3, [pc, #672]	; (80096b8 <cppLoop+0x1488>)
 8009416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d178      	bne.n	8009510 <cppLoop+0x12e0>
			lcd_clear();
 800941e:	f7f7 fe3f 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009422:	2100      	movs	r1, #0
 8009424:	2000      	movs	r0, #0
 8009426:	f7f7 fe4b 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", adj_max_velocity);
 800942a:	4ba4      	ldr	r3, [pc, #656]	; (80096bc <cppLoop+0x148c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f7f7 f8a2 	bl	8000578 <__aeabi_f2d>
 8009434:	4603      	mov	r3, r0
 8009436:	460c      	mov	r4, r1
 8009438:	461a      	mov	r2, r3
 800943a:	4623      	mov	r3, r4
 800943c:	48a0      	ldr	r0, [pc, #640]	; (80096c0 <cppLoop+0x1490>)
 800943e:	f7f7 fe69 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009442:	2101      	movs	r1, #1
 8009444:	2000      	movs	r0, #0
 8009446:	f7f7 fe3b 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity);
 800944a:	4b9e      	ldr	r3, [pc, #632]	; (80096c4 <cppLoop+0x1494>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4618      	mov	r0, r3
 8009450:	f7f7 f892 	bl	8000578 <__aeabi_f2d>
 8009454:	4603      	mov	r3, r0
 8009456:	460c      	mov	r4, r1
 8009458:	461a      	mov	r2, r3
 800945a:	4623      	mov	r3, r4
 800945c:	489a      	ldr	r0, [pc, #616]	; (80096c8 <cppLoop+0x1498>)
 800945e:	f7f7 fe59 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_C){
 8009462:	4894      	ldr	r0, [pc, #592]	; (80096b4 <cppLoop+0x1484>)
 8009464:	f7f8 fe12 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009468:	4603      	mov	r3, r0
 800946a:	2b02      	cmp	r3, #2
 800946c:	bf0c      	ite	eq
 800946e:	2301      	moveq	r3, #1
 8009470:	2300      	movne	r3, #0
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b00      	cmp	r3, #0
 8009476:	f001 86fb 	beq.w	800b270 <cppLoop+0x3040>
				HAL_Delay(500);
 800947a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800947e:	f002 f83b 	bl	800b4f8 <HAL_Delay>

				led.LR(1, -1);
 8009482:	f04f 32ff 	mov.w	r2, #4294967295
 8009486:	2101      	movs	r1, #1
 8009488:	4889      	ldr	r0, [pc, #548]	; (80096b0 <cppLoop+0x1480>)
 800948a:	f7f8 ff1f 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setMode(SECOND_RUNNING);
 800948e:	2101      	movs	r1, #1
 8009490:	488e      	ldr	r0, [pc, #568]	; (80096cc <cppLoop+0x149c>)
 8009492:	f7fb f8af 	bl	80045f4 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity);
 8009496:	4b8b      	ldr	r3, [pc, #556]	; (80096c4 <cppLoop+0x1494>)
 8009498:	edd3 7a00 	vldr	s15, [r3]
 800949c:	eeb0 0a67 	vmov.f32	s0, s15
 80094a0:	488a      	ldr	r0, [pc, #552]	; (80096cc <cppLoop+0x149c>)
 80094a2:	f7fa fdc8 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity(adj_max_velocity);
 80094a6:	4b85      	ldr	r3, [pc, #532]	; (80096bc <cppLoop+0x148c>)
 80094a8:	edd3 7a00 	vldr	s15, [r3]
 80094ac:	eeb0 0a67 	vmov.f32	s0, s15
 80094b0:	4886      	ldr	r0, [pc, #536]	; (80096cc <cppLoop+0x149c>)
 80094b2:	f7fa fdd0 	bl	8004056 <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 80094b6:	4b83      	ldr	r3, [pc, #524]	; (80096c4 <cppLoop+0x1494>)
 80094b8:	edd3 7a00 	vldr	s15, [r3]
 80094bc:	eeb0 0a67 	vmov.f32	s0, s15
 80094c0:	4882      	ldr	r0, [pc, #520]	; (80096cc <cppLoop+0x149c>)
 80094c2:	f7fa fdd8 	bl	8004076 <_ZN9LineTrace14setMinVelocityEf>
				line_trace.createVelocityTabele();
 80094c6:	4881      	ldr	r0, [pc, #516]	; (80096cc <cppLoop+0x149c>)
 80094c8:	f7fb fadc 	bl	8004a84 <_ZN9LineTrace20createVelocityTabeleEv>

				HAL_Delay(1000);
 80094cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094d0:	f002 f812 	bl	800b4f8 <HAL_Delay>

				logger.resetLogsTim1();
 80094d4:	487e      	ldr	r0, [pc, #504]	; (80096d0 <cppLoop+0x14a0>)
 80094d6:	f7fb ff8e 	bl	80053f6 <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 80094da:	487d      	ldr	r0, [pc, #500]	; (80096d0 <cppLoop+0x14a0>)
 80094dc:	f7fb ffb3 	bl	8005446 <_ZN6Logger13resetLogsTim2Ev>
				//logger.start();

				line_trace.running();
 80094e0:	487a      	ldr	r0, [pc, #488]	; (80096cc <cppLoop+0x149c>)
 80094e2:	f7fb f8d7 	bl	8004694 <_ZN9LineTrace7runningEv>

				logger.stop();
 80094e6:	487a      	ldr	r0, [pc, #488]	; (80096d0 <cppLoop+0x14a0>)
 80094e8:	f7fc f816 	bl	8005518 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 80094ec:	4a79      	ldr	r2, [pc, #484]	; (80096d4 <cppLoop+0x14a4>)
 80094ee:	497a      	ldr	r1, [pc, #488]	; (80096d8 <cppLoop+0x14a8>)
 80094f0:	4877      	ldr	r0, [pc, #476]	; (80096d0 <cppLoop+0x14a0>)
 80094f2:	f7fb feaa 	bl	800524a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 80094f6:	4a79      	ldr	r2, [pc, #484]	; (80096dc <cppLoop+0x14ac>)
 80094f8:	4977      	ldr	r1, [pc, #476]	; (80096d8 <cppLoop+0x14a8>)
 80094fa:	4875      	ldr	r0, [pc, #468]	; (80096d0 <cppLoop+0x14a0>)
 80094fc:	f7fb feb9 	bl	8005272 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009500:	f04f 32ff 	mov.w	r2, #4294967295
 8009504:	2100      	movs	r1, #0
 8009506:	486a      	ldr	r0, [pc, #424]	; (80096b0 <cppLoop+0x1480>)
 8009508:	f7f8 fee0 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setMinVelocity(adj_min_velocity);

				led.LR(-1, 0);
			}
		}
		break;
 800950c:	f001 beb0 	b.w	800b270 <cppLoop+0x3040>
			lcd_clear();
 8009510:	f7f7 fdc6 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009514:	2100      	movs	r1, #0
 8009516:	2000      	movs	r0, #0
 8009518:	f7f7 fdd2 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800951c:	486b      	ldr	r0, [pc, #428]	; (80096cc <cppLoop+0x149c>)
 800951e:	f7fa fe2a 	bl	8004176 <_ZN9LineTrace14getMaxVelocityEv>
 8009522:	ee10 3a10 	vmov	r3, s0
 8009526:	4618      	mov	r0, r3
 8009528:	f7f7 f826 	bl	8000578 <__aeabi_f2d>
 800952c:	4603      	mov	r3, r0
 800952e:	460c      	mov	r4, r1
 8009530:	461a      	mov	r2, r3
 8009532:	4623      	mov	r3, r4
 8009534:	4862      	ldr	r0, [pc, #392]	; (80096c0 <cppLoop+0x1490>)
 8009536:	f7f7 fded 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800953a:	2101      	movs	r1, #1
 800953c:	2000      	movs	r0, #0
 800953e:	f7f7 fdbf 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8009542:	4862      	ldr	r0, [pc, #392]	; (80096cc <cppLoop+0x149c>)
 8009544:	f7fa fe27 	bl	8004196 <_ZN9LineTrace14getMinVelocityEv>
 8009548:	ee10 3a10 	vmov	r3, s0
 800954c:	4618      	mov	r0, r3
 800954e:	f7f7 f813 	bl	8000578 <__aeabi_f2d>
 8009552:	4603      	mov	r3, r0
 8009554:	460c      	mov	r4, r1
 8009556:	461a      	mov	r2, r3
 8009558:	4623      	mov	r3, r4
 800955a:	4861      	ldr	r0, [pc, #388]	; (80096e0 <cppLoop+0x14b0>)
 800955c:	f7f7 fdda 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009560:	4854      	ldr	r0, [pc, #336]	; (80096b4 <cppLoop+0x1484>)
 8009562:	f7f8 fd93 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009566:	4603      	mov	r3, r0
 8009568:	2b08      	cmp	r3, #8
 800956a:	bf0c      	ite	eq
 800956c:	2301      	moveq	r3, #1
 800956e:	2300      	movne	r3, #0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	d022      	beq.n	80095bc <cppLoop+0x138c>
				led.LR(-1, 1);
 8009576:	2201      	movs	r2, #1
 8009578:	f04f 31ff 	mov.w	r1, #4294967295
 800957c:	484c      	ldr	r0, [pc, #304]	; (80096b0 <cppLoop+0x1480>)
 800957e:	f7f8 fea5 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009582:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009586:	f001 ffb7 	bl	800b4f8 <HAL_Delay>
				selector_vel++;
 800958a:	4b56      	ldr	r3, [pc, #344]	; (80096e4 <cppLoop+0x14b4>)
 800958c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009590:	b29b      	uxth	r3, r3
 8009592:	3301      	adds	r3, #1
 8009594:	b29b      	uxth	r3, r3
 8009596:	b21a      	sxth	r2, r3
 8009598:	4b52      	ldr	r3, [pc, #328]	; (80096e4 <cppLoop+0x14b4>)
 800959a:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 800959c:	4b51      	ldr	r3, [pc, #324]	; (80096e4 <cppLoop+0x14b4>)
 800959e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	dd02      	ble.n	80095ac <cppLoop+0x137c>
 80095a6:	4b4f      	ldr	r3, [pc, #316]	; (80096e4 <cppLoop+0x14b4>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 80095ac:	2200      	movs	r2, #0
 80095ae:	f04f 31ff 	mov.w	r1, #4294967295
 80095b2:	483f      	ldr	r0, [pc, #252]	; (80096b0 <cppLoop+0x1480>)
 80095b4:	f7f8 fe8a 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80095b8:	f001 be5a 	b.w	800b270 <cppLoop+0x3040>
			else if(joy_stick.getValue() == JOY_R){
 80095bc:	483d      	ldr	r0, [pc, #244]	; (80096b4 <cppLoop+0x1484>)
 80095be:	f7f8 fd65 	bl	800208c <_ZN8JoyStick8getValueEv>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b10      	cmp	r3, #16
 80095c6:	bf0c      	ite	eq
 80095c8:	2301      	moveq	r3, #1
 80095ca:	2300      	movne	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d03c      	beq.n	800964c <cppLoop+0x141c>
				led.LR(-1, 1);
 80095d2:	2201      	movs	r2, #1
 80095d4:	f04f 31ff 	mov.w	r1, #4294967295
 80095d8:	4835      	ldr	r0, [pc, #212]	; (80096b0 <cppLoop+0x1480>)
 80095da:	f7f8 fe77 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 80095de:	2064      	movs	r0, #100	; 0x64
 80095e0:	f001 ff8a 	bl	800b4f8 <HAL_Delay>
				if(selector_vel == 0)
 80095e4:	4b3f      	ldr	r3, [pc, #252]	; (80096e4 <cppLoop+0x14b4>)
 80095e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d113      	bne.n	8009616 <cppLoop+0x13e6>
					adj_max_velocity = adj_max_velocity + 0.1;
 80095ee:	4b33      	ldr	r3, [pc, #204]	; (80096bc <cppLoop+0x148c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7f6 ffc0 	bl	8000578 <__aeabi_f2d>
 80095f8:	a32b      	add	r3, pc, #172	; (adr r3, 80096a8 <cppLoop+0x1478>)
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	f7f6 fe5d 	bl	80002bc <__adddf3>
 8009602:	4603      	mov	r3, r0
 8009604:	460c      	mov	r4, r1
 8009606:	4618      	mov	r0, r3
 8009608:	4621      	mov	r1, r4
 800960a:	f7f7 fb05 	bl	8000c18 <__aeabi_d2f>
 800960e:	4602      	mov	r2, r0
 8009610:	4b2a      	ldr	r3, [pc, #168]	; (80096bc <cppLoop+0x148c>)
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	e012      	b.n	800963c <cppLoop+0x140c>
					adj_min_velocity = adj_min_velocity + 0.1;
 8009616:	4b2b      	ldr	r3, [pc, #172]	; (80096c4 <cppLoop+0x1494>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f7f6 ffac 	bl	8000578 <__aeabi_f2d>
 8009620:	a321      	add	r3, pc, #132	; (adr r3, 80096a8 <cppLoop+0x1478>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f6 fe49 	bl	80002bc <__adddf3>
 800962a:	4603      	mov	r3, r0
 800962c:	460c      	mov	r4, r1
 800962e:	4618      	mov	r0, r3
 8009630:	4621      	mov	r1, r4
 8009632:	f7f7 faf1 	bl	8000c18 <__aeabi_d2f>
 8009636:	4602      	mov	r2, r0
 8009638:	4b22      	ldr	r3, [pc, #136]	; (80096c4 <cppLoop+0x1494>)
 800963a:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800963c:	2200      	movs	r2, #0
 800963e:	f04f 31ff 	mov.w	r1, #4294967295
 8009642:	481b      	ldr	r0, [pc, #108]	; (80096b0 <cppLoop+0x1480>)
 8009644:	f7f8 fe42 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009648:	f001 be12 	b.w	800b270 <cppLoop+0x3040>
			else if(joy_stick.getValue() == JOY_L){
 800964c:	4819      	ldr	r0, [pc, #100]	; (80096b4 <cppLoop+0x1484>)
 800964e:	f7f8 fd1d 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009652:	4603      	mov	r3, r0
 8009654:	2b01      	cmp	r3, #1
 8009656:	bf0c      	ite	eq
 8009658:	2301      	moveq	r3, #1
 800965a:	2300      	movne	r3, #0
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d05d      	beq.n	800971e <cppLoop+0x14ee>
				led.LR(-1, 1);
 8009662:	2201      	movs	r2, #1
 8009664:	f04f 31ff 	mov.w	r1, #4294967295
 8009668:	4811      	ldr	r0, [pc, #68]	; (80096b0 <cppLoop+0x1480>)
 800966a:	f7f8 fe2f 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 800966e:	2064      	movs	r0, #100	; 0x64
 8009670:	f001 ff42 	bl	800b4f8 <HAL_Delay>
				if(selector_vel == 0)
 8009674:	4b1b      	ldr	r3, [pc, #108]	; (80096e4 <cppLoop+0x14b4>)
 8009676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d134      	bne.n	80096e8 <cppLoop+0x14b8>
					adj_max_velocity = adj_max_velocity - 0.1;
 800967e:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <cppLoop+0x148c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f7f6 ff78 	bl	8000578 <__aeabi_f2d>
 8009688:	a307      	add	r3, pc, #28	; (adr r3, 80096a8 <cppLoop+0x1478>)
 800968a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968e:	f7f6 fe13 	bl	80002b8 <__aeabi_dsub>
 8009692:	4603      	mov	r3, r0
 8009694:	460c      	mov	r4, r1
 8009696:	4618      	mov	r0, r3
 8009698:	4621      	mov	r1, r4
 800969a:	f7f7 fabd 	bl	8000c18 <__aeabi_d2f>
 800969e:	4602      	mov	r2, r0
 80096a0:	4b06      	ldr	r3, [pc, #24]	; (80096bc <cppLoop+0x148c>)
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	e033      	b.n	800970e <cppLoop+0x14de>
 80096a6:	bf00      	nop
 80096a8:	9999999a 	.word	0x9999999a
 80096ac:	3fb99999 	.word	0x3fb99999
 80096b0:	20000558 	.word	0x20000558
 80096b4:	2000054c 	.word	0x2000054c
 80096b8:	2004526a 	.word	0x2004526a
 80096bc:	200452a8 	.word	0x200452a8
 80096c0:	0801a688 	.word	0x0801a688
 80096c4:	200452b0 	.word	0x200452b0
 80096c8:	0801a63c 	.word	0x0801a63c
 80096cc:	200209d4 	.word	0x200209d4
 80096d0:	2000057c 	.word	0x2000057c
 80096d4:	0801a648 	.word	0x0801a648
 80096d8:	0801a654 	.word	0x0801a654
 80096dc:	0801a660 	.word	0x0801a660
 80096e0:	0801a670 	.word	0x0801a670
 80096e4:	2004526e 	.word	0x2004526e
					adj_min_velocity = adj_min_velocity - 0.1;
 80096e8:	4bb5      	ldr	r3, [pc, #724]	; (80099c0 <cppLoop+0x1790>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7f6 ff43 	bl	8000578 <__aeabi_f2d>
 80096f2:	a3b1      	add	r3, pc, #708	; (adr r3, 80099b8 <cppLoop+0x1788>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f7f6 fdde 	bl	80002b8 <__aeabi_dsub>
 80096fc:	4603      	mov	r3, r0
 80096fe:	460c      	mov	r4, r1
 8009700:	4618      	mov	r0, r3
 8009702:	4621      	mov	r1, r4
 8009704:	f7f7 fa88 	bl	8000c18 <__aeabi_d2f>
 8009708:	4602      	mov	r2, r0
 800970a:	4bad      	ldr	r3, [pc, #692]	; (80099c0 <cppLoop+0x1790>)
 800970c:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800970e:	2200      	movs	r2, #0
 8009710:	f04f 31ff 	mov.w	r1, #4294967295
 8009714:	48ab      	ldr	r0, [pc, #684]	; (80099c4 <cppLoop+0x1794>)
 8009716:	f7f8 fdd9 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800971a:	f001 bda9 	b.w	800b270 <cppLoop+0x3040>
			else if(joy_stick.getValue() == JOY_C){
 800971e:	48aa      	ldr	r0, [pc, #680]	; (80099c8 <cppLoop+0x1798>)
 8009720:	f7f8 fcb4 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009724:	4603      	mov	r3, r0
 8009726:	2b02      	cmp	r3, #2
 8009728:	bf0c      	ite	eq
 800972a:	2301      	moveq	r3, #1
 800972c:	2300      	movne	r3, #0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	f001 859d 	beq.w	800b270 <cppLoop+0x3040>
				led.LR(-1, 1);
 8009736:	2201      	movs	r2, #1
 8009738:	f04f 31ff 	mov.w	r1, #4294967295
 800973c:	48a1      	ldr	r0, [pc, #644]	; (80099c4 <cppLoop+0x1794>)
 800973e:	f7f8 fdc5 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009742:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009746:	f001 fed7 	bl	800b4f8 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 800974a:	2300      	movs	r3, #0
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	4b9f      	ldr	r3, [pc, #636]	; (80099cc <cppLoop+0x179c>)
 8009750:	2201      	movs	r2, #1
 8009752:	499f      	ldr	r1, [pc, #636]	; (80099d0 <cppLoop+0x17a0>)
 8009754:	489f      	ldr	r0, [pc, #636]	; (80099d4 <cppLoop+0x17a4>)
 8009756:	f7f8 f881 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity, OVER_WRITE);
 800975a:	2300      	movs	r3, #0
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	4b98      	ldr	r3, [pc, #608]	; (80099c0 <cppLoop+0x1790>)
 8009760:	2201      	movs	r2, #1
 8009762:	499d      	ldr	r1, [pc, #628]	; (80099d8 <cppLoop+0x17a8>)
 8009764:	489b      	ldr	r0, [pc, #620]	; (80099d4 <cppLoop+0x17a4>)
 8009766:	f7f8 f879 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity(adj_max_velocity);
 800976a:	4b98      	ldr	r3, [pc, #608]	; (80099cc <cppLoop+0x179c>)
 800976c:	edd3 7a00 	vldr	s15, [r3]
 8009770:	eeb0 0a67 	vmov.f32	s0, s15
 8009774:	4899      	ldr	r0, [pc, #612]	; (80099dc <cppLoop+0x17ac>)
 8009776:	f7fa fc6e 	bl	8004056 <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 800977a:	4b91      	ldr	r3, [pc, #580]	; (80099c0 <cppLoop+0x1790>)
 800977c:	edd3 7a00 	vldr	s15, [r3]
 8009780:	eeb0 0a67 	vmov.f32	s0, s15
 8009784:	4895      	ldr	r0, [pc, #596]	; (80099dc <cppLoop+0x17ac>)
 8009786:	f7fa fc76 	bl	8004076 <_ZN9LineTrace14setMinVelocityEf>
				led.LR(-1, 0);
 800978a:	2200      	movs	r2, #0
 800978c:	f04f 31ff 	mov.w	r1, #4294967295
 8009790:	488c      	ldr	r0, [pc, #560]	; (80099c4 <cppLoop+0x1794>)
 8009792:	f7f8 fd9b 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009796:	f001 bd6b 	b.w	800b270 <cppLoop+0x3040>

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Third running-----------------------*/
	/*-------------------------------------------------------------------------*/
	case 4:
		led.fullColor('M');
 800979a:	214d      	movs	r1, #77	; 0x4d
 800979c:	4889      	ldr	r0, [pc, #548]	; (80099c4 <cppLoop+0x1794>)
 800979e:	f7f8 fcd9 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 80097a2:	4889      	ldr	r0, [pc, #548]	; (80099c8 <cppLoop+0x1798>)
 80097a4:	f7f8 fc72 	bl	800208c <_ZN8JoyStick8getValueEv>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	bf0c      	ite	eq
 80097ae:	2301      	moveq	r3, #1
 80097b0:	2300      	movne	r3, #0
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d020      	beq.n	80097fa <cppLoop+0x15ca>
			led.LR(-1, 1);
 80097b8:	2201      	movs	r2, #1
 80097ba:	f04f 31ff 	mov.w	r1, #4294967295
 80097be:	4881      	ldr	r0, [pc, #516]	; (80099c4 <cppLoop+0x1794>)
 80097c0:	f7f8 fd84 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80097c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80097c8:	f001 fe96 	bl	800b4f8 <HAL_Delay>

			selector_run++;
 80097cc:	4b84      	ldr	r3, [pc, #528]	; (80099e0 <cppLoop+0x17b0>)
 80097ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	3301      	adds	r3, #1
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	b21a      	sxth	r2, r3
 80097da:	4b81      	ldr	r3, [pc, #516]	; (80099e0 <cppLoop+0x17b0>)
 80097dc:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 80097de:	4b80      	ldr	r3, [pc, #512]	; (80099e0 <cppLoop+0x17b0>)
 80097e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	dd02      	ble.n	80097ee <cppLoop+0x15be>
 80097e8:	4b7d      	ldr	r3, [pc, #500]	; (80099e0 <cppLoop+0x17b0>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80097ee:	2200      	movs	r2, #0
 80097f0:	f04f 31ff 	mov.w	r1, #4294967295
 80097f4:	4873      	ldr	r0, [pc, #460]	; (80099c4 <cppLoop+0x1794>)
 80097f6:	f7f8 fd69 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 80097fa:	4b79      	ldr	r3, [pc, #484]	; (80099e0 <cppLoop+0x17b0>)
 80097fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f040 8081 	bne.w	8009908 <cppLoop+0x16d8>
			lcd_clear();
 8009806:	f7f7 fc4b 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800980a:	2100      	movs	r1, #0
 800980c:	2000      	movs	r0, #0
 800980e:	f7f7 fc57 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", adj_max_velocity2);
 8009812:	4b74      	ldr	r3, [pc, #464]	; (80099e4 <cppLoop+0x17b4>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4618      	mov	r0, r3
 8009818:	f7f6 feae 	bl	8000578 <__aeabi_f2d>
 800981c:	4603      	mov	r3, r0
 800981e:	460c      	mov	r4, r1
 8009820:	461a      	mov	r2, r3
 8009822:	4623      	mov	r3, r4
 8009824:	4870      	ldr	r0, [pc, #448]	; (80099e8 <cppLoop+0x17b8>)
 8009826:	f7f7 fc75 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800982a:	2101      	movs	r1, #1
 800982c:	2000      	movs	r0, #0
 800982e:	f7f7 fc47 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity2);
 8009832:	4b6e      	ldr	r3, [pc, #440]	; (80099ec <cppLoop+0x17bc>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f7f6 fe9e 	bl	8000578 <__aeabi_f2d>
 800983c:	4603      	mov	r3, r0
 800983e:	460c      	mov	r4, r1
 8009840:	461a      	mov	r2, r3
 8009842:	4623      	mov	r3, r4
 8009844:	486a      	ldr	r0, [pc, #424]	; (80099f0 <cppLoop+0x17c0>)
 8009846:	f7f7 fc65 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 800984a:	485f      	ldr	r0, [pc, #380]	; (80099c8 <cppLoop+0x1798>)
 800984c:	f7f8 fc1e 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009850:	4603      	mov	r3, r0
 8009852:	2b02      	cmp	r3, #2
 8009854:	bf0c      	ite	eq
 8009856:	2301      	moveq	r3, #1
 8009858:	2300      	movne	r3, #0
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	f001 8509 	beq.w	800b274 <cppLoop+0x3044>
				HAL_Delay(500);
 8009862:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009866:	f001 fe47 	bl	800b4f8 <HAL_Delay>

				led.LR(1, -1);
 800986a:	f04f 32ff 	mov.w	r2, #4294967295
 800986e:	2101      	movs	r1, #1
 8009870:	4854      	ldr	r0, [pc, #336]	; (80099c4 <cppLoop+0x1794>)
 8009872:	f7f8 fd2b 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009876:	4b5f      	ldr	r3, [pc, #380]	; (80099f4 <cppLoop+0x17c4>)
 8009878:	edd3 7a00 	vldr	s15, [r3]
 800987c:	4b5e      	ldr	r3, [pc, #376]	; (80099f8 <cppLoop+0x17c8>)
 800987e:	ed93 7a00 	vldr	s14, [r3]
 8009882:	4b5e      	ldr	r3, [pc, #376]	; (80099fc <cppLoop+0x17cc>)
 8009884:	edd3 6a00 	vldr	s13, [r3]
 8009888:	eeb0 1a66 	vmov.f32	s2, s13
 800988c:	eef0 0a47 	vmov.f32	s1, s14
 8009890:	eeb0 0a67 	vmov.f32	s0, s15
 8009894:	4851      	ldr	r0, [pc, #324]	; (80099dc <cppLoop+0x17ac>)
 8009896:	f7fa fb33 	bl	8003f00 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(THIRD_RUNNING);
 800989a:	2102      	movs	r1, #2
 800989c:	484f      	ldr	r0, [pc, #316]	; (80099dc <cppLoop+0x17ac>)
 800989e:	f7fa fea9 	bl	80045f4 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity2);
 80098a2:	4b52      	ldr	r3, [pc, #328]	; (80099ec <cppLoop+0x17bc>)
 80098a4:	edd3 7a00 	vldr	s15, [r3]
 80098a8:	eeb0 0a67 	vmov.f32	s0, s15
 80098ac:	484b      	ldr	r0, [pc, #300]	; (80099dc <cppLoop+0x17ac>)
 80098ae:	f7fa fbc2 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 80098b2:	4b4c      	ldr	r3, [pc, #304]	; (80099e4 <cppLoop+0x17b4>)
 80098b4:	edd3 7a00 	vldr	s15, [r3]
 80098b8:	eeb0 0a67 	vmov.f32	s0, s15
 80098bc:	4847      	ldr	r0, [pc, #284]	; (80099dc <cppLoop+0x17ac>)
 80098be:	f7fa fbea 	bl	8004096 <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 80098c2:	4b4a      	ldr	r3, [pc, #296]	; (80099ec <cppLoop+0x17bc>)
 80098c4:	edd3 7a00 	vldr	s15, [r3]
 80098c8:	eeb0 0a67 	vmov.f32	s0, s15
 80098cc:	4843      	ldr	r0, [pc, #268]	; (80099dc <cppLoop+0x17ac>)
 80098ce:	f7fa fbf2 	bl	80040b6 <_ZN9LineTrace15setMinVelocity2Ef>
				line_trace.createVelocityTabele();
 80098d2:	4842      	ldr	r0, [pc, #264]	; (80099dc <cppLoop+0x17ac>)
 80098d4:	f7fb f8d6 	bl	8004a84 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 80098d8:	4840      	ldr	r0, [pc, #256]	; (80099dc <cppLoop+0x17ac>)
 80098da:	f7fa fedb 	bl	8004694 <_ZN9LineTrace7runningEv>

				logger.stop();
 80098de:	4848      	ldr	r0, [pc, #288]	; (8009a00 <cppLoop+0x17d0>)
 80098e0:	f7fb fe1a 	bl	8005518 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 80098e4:	4a47      	ldr	r2, [pc, #284]	; (8009a04 <cppLoop+0x17d4>)
 80098e6:	4948      	ldr	r1, [pc, #288]	; (8009a08 <cppLoop+0x17d8>)
 80098e8:	4845      	ldr	r0, [pc, #276]	; (8009a00 <cppLoop+0x17d0>)
 80098ea:	f7fb fcae 	bl	800524a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 80098ee:	4a47      	ldr	r2, [pc, #284]	; (8009a0c <cppLoop+0x17dc>)
 80098f0:	4945      	ldr	r1, [pc, #276]	; (8009a08 <cppLoop+0x17d8>)
 80098f2:	4843      	ldr	r0, [pc, #268]	; (8009a00 <cppLoop+0x17d0>)
 80098f4:	f7fb fcbd 	bl	8005272 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 80098f8:	f04f 32ff 	mov.w	r2, #4294967295
 80098fc:	2100      	movs	r1, #0
 80098fe:	4831      	ldr	r0, [pc, #196]	; (80099c4 <cppLoop+0x1794>)
 8009900:	f7f8 fce4 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 8009904:	f001 bcb6 	b.w	800b274 <cppLoop+0x3044>
			lcd_clear();
 8009908:	f7f7 fbca 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800990c:	2100      	movs	r1, #0
 800990e:	2000      	movs	r0, #0
 8009910:	f7f7 fbd6 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8009914:	4831      	ldr	r0, [pc, #196]	; (80099dc <cppLoop+0x17ac>)
 8009916:	f7fa fc4e 	bl	80041b6 <_ZN9LineTrace15getMaxVelocity2Ev>
 800991a:	ee10 3a10 	vmov	r3, s0
 800991e:	4618      	mov	r0, r3
 8009920:	f7f6 fe2a 	bl	8000578 <__aeabi_f2d>
 8009924:	4603      	mov	r3, r0
 8009926:	460c      	mov	r4, r1
 8009928:	461a      	mov	r2, r3
 800992a:	4623      	mov	r3, r4
 800992c:	482e      	ldr	r0, [pc, #184]	; (80099e8 <cppLoop+0x17b8>)
 800992e:	f7f7 fbf1 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009932:	2101      	movs	r1, #1
 8009934:	2000      	movs	r0, #0
 8009936:	f7f7 fbc3 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 800993a:	4828      	ldr	r0, [pc, #160]	; (80099dc <cppLoop+0x17ac>)
 800993c:	f7fa fc4b 	bl	80041d6 <_ZN9LineTrace15getMinVelocity2Ev>
 8009940:	ee10 3a10 	vmov	r3, s0
 8009944:	4618      	mov	r0, r3
 8009946:	f7f6 fe17 	bl	8000578 <__aeabi_f2d>
 800994a:	4603      	mov	r3, r0
 800994c:	460c      	mov	r4, r1
 800994e:	461a      	mov	r2, r3
 8009950:	4623      	mov	r3, r4
 8009952:	482f      	ldr	r0, [pc, #188]	; (8009a10 <cppLoop+0x17e0>)
 8009954:	f7f7 fbde 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009958:	481b      	ldr	r0, [pc, #108]	; (80099c8 <cppLoop+0x1798>)
 800995a:	f7f8 fb97 	bl	800208c <_ZN8JoyStick8getValueEv>
 800995e:	4603      	mov	r3, r0
 8009960:	2b08      	cmp	r3, #8
 8009962:	bf0c      	ite	eq
 8009964:	2301      	moveq	r3, #1
 8009966:	2300      	movne	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d054      	beq.n	8009a18 <cppLoop+0x17e8>
				led.LR(-1, 1);
 800996e:	2201      	movs	r2, #1
 8009970:	f04f 31ff 	mov.w	r1, #4294967295
 8009974:	4813      	ldr	r0, [pc, #76]	; (80099c4 <cppLoop+0x1794>)
 8009976:	f7f8 fca9 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 800997a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800997e:	f001 fdbb 	bl	800b4f8 <HAL_Delay>
				selector_vel++;
 8009982:	4b24      	ldr	r3, [pc, #144]	; (8009a14 <cppLoop+0x17e4>)
 8009984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009988:	b29b      	uxth	r3, r3
 800998a:	3301      	adds	r3, #1
 800998c:	b29b      	uxth	r3, r3
 800998e:	b21a      	sxth	r2, r3
 8009990:	4b20      	ldr	r3, [pc, #128]	; (8009a14 <cppLoop+0x17e4>)
 8009992:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 8009994:	4b1f      	ldr	r3, [pc, #124]	; (8009a14 <cppLoop+0x17e4>)
 8009996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800999a:	2b01      	cmp	r3, #1
 800999c:	dd02      	ble.n	80099a4 <cppLoop+0x1774>
 800999e:	4b1d      	ldr	r3, [pc, #116]	; (8009a14 <cppLoop+0x17e4>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 80099a4:	2200      	movs	r2, #0
 80099a6:	f04f 31ff 	mov.w	r1, #4294967295
 80099aa:	4806      	ldr	r0, [pc, #24]	; (80099c4 <cppLoop+0x1794>)
 80099ac:	f7f8 fc8e 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80099b0:	f001 bc60 	b.w	800b274 <cppLoop+0x3044>
 80099b4:	f3af 8000 	nop.w
 80099b8:	9999999a 	.word	0x9999999a
 80099bc:	3fb99999 	.word	0x3fb99999
 80099c0:	200452b0 	.word	0x200452b0
 80099c4:	20000558 	.word	0x20000558
 80099c8:	2000054c 	.word	0x2000054c
 80099cc:	200452a8 	.word	0x200452a8
 80099d0:	0801a694 	.word	0x0801a694
 80099d4:	0801a5f0 	.word	0x0801a5f0
 80099d8:	0801a6a0 	.word	0x0801a6a0
 80099dc:	200209d4 	.word	0x200209d4
 80099e0:	2004526a 	.word	0x2004526a
 80099e4:	200452b8 	.word	0x200452b8
 80099e8:	0801a6ac 	.word	0x0801a6ac
 80099ec:	200452c0 	.word	0x200452c0
 80099f0:	0801a63c 	.word	0x0801a63c
 80099f4:	20045270 	.word	0x20045270
 80099f8:	20045278 	.word	0x20045278
 80099fc:	20045280 	.word	0x20045280
 8009a00:	2000057c 	.word	0x2000057c
 8009a04:	0801a648 	.word	0x0801a648
 8009a08:	0801a654 	.word	0x0801a654
 8009a0c:	0801a660 	.word	0x0801a660
 8009a10:	0801a670 	.word	0x0801a670
 8009a14:	2004526e 	.word	0x2004526e
			else if(joy_stick.getValue() == JOY_R){
 8009a18:	4869      	ldr	r0, [pc, #420]	; (8009bc0 <cppLoop+0x1990>)
 8009a1a:	f7f8 fb37 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b10      	cmp	r3, #16
 8009a22:	bf0c      	ite	eq
 8009a24:	2301      	moveq	r3, #1
 8009a26:	2300      	movne	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d03c      	beq.n	8009aa8 <cppLoop+0x1878>
				led.LR(-1, 1);
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f04f 31ff 	mov.w	r1, #4294967295
 8009a34:	4863      	ldr	r0, [pc, #396]	; (8009bc4 <cppLoop+0x1994>)
 8009a36:	f7f8 fc49 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009a3a:	2064      	movs	r0, #100	; 0x64
 8009a3c:	f001 fd5c 	bl	800b4f8 <HAL_Delay>
				if(selector_vel == 0)
 8009a40:	4b61      	ldr	r3, [pc, #388]	; (8009bc8 <cppLoop+0x1998>)
 8009a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d113      	bne.n	8009a72 <cppLoop+0x1842>
					adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8009a4a:	4b60      	ldr	r3, [pc, #384]	; (8009bcc <cppLoop+0x199c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7f6 fd92 	bl	8000578 <__aeabi_f2d>
 8009a54:	a358      	add	r3, pc, #352	; (adr r3, 8009bb8 <cppLoop+0x1988>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f7f6 fc2f 	bl	80002bc <__adddf3>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	460c      	mov	r4, r1
 8009a62:	4618      	mov	r0, r3
 8009a64:	4621      	mov	r1, r4
 8009a66:	f7f7 f8d7 	bl	8000c18 <__aeabi_d2f>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b57      	ldr	r3, [pc, #348]	; (8009bcc <cppLoop+0x199c>)
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	e012      	b.n	8009a98 <cppLoop+0x1868>
					adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8009a72:	4b57      	ldr	r3, [pc, #348]	; (8009bd0 <cppLoop+0x19a0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7f6 fd7e 	bl	8000578 <__aeabi_f2d>
 8009a7c:	a34e      	add	r3, pc, #312	; (adr r3, 8009bb8 <cppLoop+0x1988>)
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f7f6 fc1b 	bl	80002bc <__adddf3>
 8009a86:	4603      	mov	r3, r0
 8009a88:	460c      	mov	r4, r1
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	f7f7 f8c3 	bl	8000c18 <__aeabi_d2f>
 8009a92:	4602      	mov	r2, r0
 8009a94:	4b4e      	ldr	r3, [pc, #312]	; (8009bd0 <cppLoop+0x19a0>)
 8009a96:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a9e:	4849      	ldr	r0, [pc, #292]	; (8009bc4 <cppLoop+0x1994>)
 8009aa0:	f7f8 fc14 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009aa4:	f001 bbe6 	b.w	800b274 <cppLoop+0x3044>
			else if(joy_stick.getValue() == JOY_L){
 8009aa8:	4845      	ldr	r0, [pc, #276]	; (8009bc0 <cppLoop+0x1990>)
 8009aaa:	f7f8 faef 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	bf0c      	ite	eq
 8009ab4:	2301      	moveq	r3, #1
 8009ab6:	2300      	movne	r3, #0
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d03c      	beq.n	8009b38 <cppLoop+0x1908>
				led.LR(-1, 1);
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac4:	483f      	ldr	r0, [pc, #252]	; (8009bc4 <cppLoop+0x1994>)
 8009ac6:	f7f8 fc01 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009aca:	2064      	movs	r0, #100	; 0x64
 8009acc:	f001 fd14 	bl	800b4f8 <HAL_Delay>
				if(selector_vel == 0)
 8009ad0:	4b3d      	ldr	r3, [pc, #244]	; (8009bc8 <cppLoop+0x1998>)
 8009ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d113      	bne.n	8009b02 <cppLoop+0x18d2>
					adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8009ada:	4b3c      	ldr	r3, [pc, #240]	; (8009bcc <cppLoop+0x199c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7f6 fd4a 	bl	8000578 <__aeabi_f2d>
 8009ae4:	a334      	add	r3, pc, #208	; (adr r3, 8009bb8 <cppLoop+0x1988>)
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f7f6 fbe5 	bl	80002b8 <__aeabi_dsub>
 8009aee:	4603      	mov	r3, r0
 8009af0:	460c      	mov	r4, r1
 8009af2:	4618      	mov	r0, r3
 8009af4:	4621      	mov	r1, r4
 8009af6:	f7f7 f88f 	bl	8000c18 <__aeabi_d2f>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4b33      	ldr	r3, [pc, #204]	; (8009bcc <cppLoop+0x199c>)
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	e012      	b.n	8009b28 <cppLoop+0x18f8>
					adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8009b02:	4b33      	ldr	r3, [pc, #204]	; (8009bd0 <cppLoop+0x19a0>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7f6 fd36 	bl	8000578 <__aeabi_f2d>
 8009b0c:	a32a      	add	r3, pc, #168	; (adr r3, 8009bb8 <cppLoop+0x1988>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fbd1 	bl	80002b8 <__aeabi_dsub>
 8009b16:	4603      	mov	r3, r0
 8009b18:	460c      	mov	r4, r1
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f7f7 f87b 	bl	8000c18 <__aeabi_d2f>
 8009b22:	4602      	mov	r2, r0
 8009b24:	4b2a      	ldr	r3, [pc, #168]	; (8009bd0 <cppLoop+0x19a0>)
 8009b26:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8009b2e:	4825      	ldr	r0, [pc, #148]	; (8009bc4 <cppLoop+0x1994>)
 8009b30:	f7f8 fbcc 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009b34:	f001 bb9e 	b.w	800b274 <cppLoop+0x3044>
			else if(joy_stick.getValue() == JOY_C){
 8009b38:	4821      	ldr	r0, [pc, #132]	; (8009bc0 <cppLoop+0x1990>)
 8009b3a:	f7f8 faa7 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	bf0c      	ite	eq
 8009b44:	2301      	moveq	r3, #1
 8009b46:	2300      	movne	r3, #0
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f001 8392 	beq.w	800b274 <cppLoop+0x3044>
				led.LR(-1, 1);
 8009b50:	2201      	movs	r2, #1
 8009b52:	f04f 31ff 	mov.w	r1, #4294967295
 8009b56:	481b      	ldr	r0, [pc, #108]	; (8009bc4 <cppLoop+0x1994>)
 8009b58:	f7f8 fbb8 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009b5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009b60:	f001 fcca 	bl	800b4f8 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8009b64:	2300      	movs	r3, #0
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	4b18      	ldr	r3, [pc, #96]	; (8009bcc <cppLoop+0x199c>)
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	4919      	ldr	r1, [pc, #100]	; (8009bd4 <cppLoop+0x19a4>)
 8009b6e:	481a      	ldr	r0, [pc, #104]	; (8009bd8 <cppLoop+0x19a8>)
 8009b70:	f7f7 fe74 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL3.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8009b74:	2300      	movs	r3, #0
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	4b15      	ldr	r3, [pc, #84]	; (8009bd0 <cppLoop+0x19a0>)
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	4917      	ldr	r1, [pc, #92]	; (8009bdc <cppLoop+0x19ac>)
 8009b7e:	4816      	ldr	r0, [pc, #88]	; (8009bd8 <cppLoop+0x19a8>)
 8009b80:	f7f7 fe6c 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 8009b84:	4b11      	ldr	r3, [pc, #68]	; (8009bcc <cppLoop+0x199c>)
 8009b86:	edd3 7a00 	vldr	s15, [r3]
 8009b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b8e:	4814      	ldr	r0, [pc, #80]	; (8009be0 <cppLoop+0x19b0>)
 8009b90:	f7fa fa81 	bl	8004096 <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 8009b94:	4b0e      	ldr	r3, [pc, #56]	; (8009bd0 <cppLoop+0x19a0>)
 8009b96:	edd3 7a00 	vldr	s15, [r3]
 8009b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b9e:	4810      	ldr	r0, [pc, #64]	; (8009be0 <cppLoop+0x19b0>)
 8009ba0:	f7fa fa89 	bl	80040b6 <_ZN9LineTrace15setMinVelocity2Ef>
				led.LR(-1, 0);
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f04f 31ff 	mov.w	r1, #4294967295
 8009baa:	4806      	ldr	r0, [pc, #24]	; (8009bc4 <cppLoop+0x1994>)
 8009bac:	f7f8 fb8e 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009bb0:	f001 bb60 	b.w	800b274 <cppLoop+0x3044>
 8009bb4:	f3af 8000 	nop.w
 8009bb8:	9999999a 	.word	0x9999999a
 8009bbc:	3fb99999 	.word	0x3fb99999
 8009bc0:	2000054c 	.word	0x2000054c
 8009bc4:	20000558 	.word	0x20000558
 8009bc8:	2004526e 	.word	0x2004526e
 8009bcc:	200452b8 	.word	0x200452b8
 8009bd0:	200452c0 	.word	0x200452c0
 8009bd4:	0801a6b8 	.word	0x0801a6b8
 8009bd8:	0801a5f0 	.word	0x0801a5f0
 8009bdc:	0801a6c4 	.word	0x0801a6c4
 8009be0:	200209d4 	.word	0x200209d4

	case 5:
		led.fullColor('B');
 8009be4:	2142      	movs	r1, #66	; 0x42
 8009be6:	48ac      	ldr	r0, [pc, #688]	; (8009e98 <cppLoop+0x1c68>)
 8009be8:	f7f8 fab4 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8009bec:	48ab      	ldr	r0, [pc, #684]	; (8009e9c <cppLoop+0x1c6c>)
 8009bee:	f7f8 fa4d 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	bf0c      	ite	eq
 8009bf8:	2301      	moveq	r3, #1
 8009bfa:	2300      	movne	r3, #0
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d020      	beq.n	8009c44 <cppLoop+0x1a14>
			led.LR(-1, 1);
 8009c02:	2201      	movs	r2, #1
 8009c04:	f04f 31ff 	mov.w	r1, #4294967295
 8009c08:	48a3      	ldr	r0, [pc, #652]	; (8009e98 <cppLoop+0x1c68>)
 8009c0a:	f7f8 fb5f 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009c0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009c12:	f001 fc71 	bl	800b4f8 <HAL_Delay>

			selector_run++;
 8009c16:	4ba2      	ldr	r3, [pc, #648]	; (8009ea0 <cppLoop+0x1c70>)
 8009c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	3301      	adds	r3, #1
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	b21a      	sxth	r2, r3
 8009c24:	4b9e      	ldr	r3, [pc, #632]	; (8009ea0 <cppLoop+0x1c70>)
 8009c26:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8009c28:	4b9d      	ldr	r3, [pc, #628]	; (8009ea0 <cppLoop+0x1c70>)
 8009c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	dd02      	ble.n	8009c38 <cppLoop+0x1a08>
 8009c32:	4b9b      	ldr	r3, [pc, #620]	; (8009ea0 <cppLoop+0x1c70>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8009c3e:	4896      	ldr	r0, [pc, #600]	; (8009e98 <cppLoop+0x1c68>)
 8009c40:	f7f8 fb44 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8009c44:	4b96      	ldr	r3, [pc, #600]	; (8009ea0 <cppLoop+0x1c70>)
 8009c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f040 8081 	bne.w	8009d52 <cppLoop+0x1b22>
			lcd_clear();
 8009c50:	f7f7 fa26 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009c54:	2100      	movs	r1, #0
 8009c56:	2000      	movs	r0, #0
 8009c58:	f7f7 fa32 	bl	80010c0 <lcd_locate>
			lcd_printf("4:   %3.1f", adj_max_velocity3);
 8009c5c:	4b91      	ldr	r3, [pc, #580]	; (8009ea4 <cppLoop+0x1c74>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7f6 fc89 	bl	8000578 <__aeabi_f2d>
 8009c66:	4603      	mov	r3, r0
 8009c68:	460c      	mov	r4, r1
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	4623      	mov	r3, r4
 8009c6e:	488e      	ldr	r0, [pc, #568]	; (8009ea8 <cppLoop+0x1c78>)
 8009c70:	f7f7 fa50 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009c74:	2101      	movs	r1, #1
 8009c76:	2000      	movs	r0, #0
 8009c78:	f7f7 fa22 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity3);
 8009c7c:	4b8b      	ldr	r3, [pc, #556]	; (8009eac <cppLoop+0x1c7c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7f6 fc79 	bl	8000578 <__aeabi_f2d>
 8009c86:	4603      	mov	r3, r0
 8009c88:	460c      	mov	r4, r1
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	4888      	ldr	r0, [pc, #544]	; (8009eb0 <cppLoop+0x1c80>)
 8009c90:	f7f7 fa40 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8009c94:	4881      	ldr	r0, [pc, #516]	; (8009e9c <cppLoop+0x1c6c>)
 8009c96:	f7f8 f9f9 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	bf0c      	ite	eq
 8009ca0:	2301      	moveq	r3, #1
 8009ca2:	2300      	movne	r3, #0
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f001 82e6 	beq.w	800b278 <cppLoop+0x3048>
				HAL_Delay(500);
 8009cac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009cb0:	f001 fc22 	bl	800b4f8 <HAL_Delay>

				led.LR(1, -1);
 8009cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb8:	2101      	movs	r1, #1
 8009cba:	4877      	ldr	r0, [pc, #476]	; (8009e98 <cppLoop+0x1c68>)
 8009cbc:	f7f8 fb06 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009cc0:	4b7c      	ldr	r3, [pc, #496]	; (8009eb4 <cppLoop+0x1c84>)
 8009cc2:	edd3 7a00 	vldr	s15, [r3]
 8009cc6:	4b7c      	ldr	r3, [pc, #496]	; (8009eb8 <cppLoop+0x1c88>)
 8009cc8:	ed93 7a00 	vldr	s14, [r3]
 8009ccc:	4b7b      	ldr	r3, [pc, #492]	; (8009ebc <cppLoop+0x1c8c>)
 8009cce:	edd3 6a00 	vldr	s13, [r3]
 8009cd2:	eeb0 1a66 	vmov.f32	s2, s13
 8009cd6:	eef0 0a47 	vmov.f32	s1, s14
 8009cda:	eeb0 0a67 	vmov.f32	s0, s15
 8009cde:	4878      	ldr	r0, [pc, #480]	; (8009ec0 <cppLoop+0x1c90>)
 8009ce0:	f7fa f90e 	bl	8003f00 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(FOURTH_RUNNING);
 8009ce4:	2103      	movs	r1, #3
 8009ce6:	4876      	ldr	r0, [pc, #472]	; (8009ec0 <cppLoop+0x1c90>)
 8009ce8:	f7fa fc84 	bl	80045f4 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity3);
 8009cec:	4b6f      	ldr	r3, [pc, #444]	; (8009eac <cppLoop+0x1c7c>)
 8009cee:	edd3 7a00 	vldr	s15, [r3]
 8009cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8009cf6:	4872      	ldr	r0, [pc, #456]	; (8009ec0 <cppLoop+0x1c90>)
 8009cf8:	f7fa f99d 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity3(adj_max_velocity3);
 8009cfc:	4b69      	ldr	r3, [pc, #420]	; (8009ea4 <cppLoop+0x1c74>)
 8009cfe:	edd3 7a00 	vldr	s15, [r3]
 8009d02:	eeb0 0a67 	vmov.f32	s0, s15
 8009d06:	486e      	ldr	r0, [pc, #440]	; (8009ec0 <cppLoop+0x1c90>)
 8009d08:	f7fa f9e5 	bl	80040d6 <_ZN9LineTrace15setMaxVelocity3Ef>
				line_trace.setMinVelocity3(adj_min_velocity3);
 8009d0c:	4b67      	ldr	r3, [pc, #412]	; (8009eac <cppLoop+0x1c7c>)
 8009d0e:	edd3 7a00 	vldr	s15, [r3]
 8009d12:	eeb0 0a67 	vmov.f32	s0, s15
 8009d16:	486a      	ldr	r0, [pc, #424]	; (8009ec0 <cppLoop+0x1c90>)
 8009d18:	f7fa f9ed 	bl	80040f6 <_ZN9LineTrace15setMinVelocity3Ef>
				line_trace.createVelocityTabele();
 8009d1c:	4868      	ldr	r0, [pc, #416]	; (8009ec0 <cppLoop+0x1c90>)
 8009d1e:	f7fa feb1 	bl	8004a84 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 8009d22:	4867      	ldr	r0, [pc, #412]	; (8009ec0 <cppLoop+0x1c90>)
 8009d24:	f7fa fcb6 	bl	8004694 <_ZN9LineTrace7runningEv>

				logger.stop();
 8009d28:	4866      	ldr	r0, [pc, #408]	; (8009ec4 <cppLoop+0x1c94>)
 8009d2a:	f7fb fbf5 	bl	8005518 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8009d2e:	4a66      	ldr	r2, [pc, #408]	; (8009ec8 <cppLoop+0x1c98>)
 8009d30:	4966      	ldr	r1, [pc, #408]	; (8009ecc <cppLoop+0x1c9c>)
 8009d32:	4864      	ldr	r0, [pc, #400]	; (8009ec4 <cppLoop+0x1c94>)
 8009d34:	f7fb fa89 	bl	800524a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009d38:	4a65      	ldr	r2, [pc, #404]	; (8009ed0 <cppLoop+0x1ca0>)
 8009d3a:	4964      	ldr	r1, [pc, #400]	; (8009ecc <cppLoop+0x1c9c>)
 8009d3c:	4861      	ldr	r0, [pc, #388]	; (8009ec4 <cppLoop+0x1c94>)
 8009d3e:	f7fb fa98 	bl	8005272 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8009d42:	f04f 32ff 	mov.w	r2, #4294967295
 8009d46:	2100      	movs	r1, #0
 8009d48:	4853      	ldr	r0, [pc, #332]	; (8009e98 <cppLoop+0x1c68>)
 8009d4a:	f7f8 fabf 	bl	80022cc <_ZN3LED2LREaa>
				led.LR(-1, 0);
			}

		}

		break;
 8009d4e:	f001 ba93 	b.w	800b278 <cppLoop+0x3048>
			lcd_clear();
 8009d52:	f7f7 f9a5 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8009d56:	2100      	movs	r1, #0
 8009d58:	2000      	movs	r0, #0
 8009d5a:	f7f7 f9b1 	bl	80010c0 <lcd_locate>
			lcd_printf("4:   %3.1f", line_trace.getMaxVelocity3());
 8009d5e:	4858      	ldr	r0, [pc, #352]	; (8009ec0 <cppLoop+0x1c90>)
 8009d60:	f7fa fa49 	bl	80041f6 <_ZN9LineTrace15getMaxVelocity3Ev>
 8009d64:	ee10 3a10 	vmov	r3, s0
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7f6 fc05 	bl	8000578 <__aeabi_f2d>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	460c      	mov	r4, r1
 8009d72:	461a      	mov	r2, r3
 8009d74:	4623      	mov	r3, r4
 8009d76:	484c      	ldr	r0, [pc, #304]	; (8009ea8 <cppLoop+0x1c78>)
 8009d78:	f7f7 f9cc 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	2000      	movs	r0, #0
 8009d80:	f7f7 f99e 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity3());
 8009d84:	484e      	ldr	r0, [pc, #312]	; (8009ec0 <cppLoop+0x1c90>)
 8009d86:	f7fa fa46 	bl	8004216 <_ZN9LineTrace15getMinVelocity3Ev>
 8009d8a:	ee10 3a10 	vmov	r3, s0
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7f6 fbf2 	bl	8000578 <__aeabi_f2d>
 8009d94:	4603      	mov	r3, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4623      	mov	r3, r4
 8009d9c:	484d      	ldr	r0, [pc, #308]	; (8009ed4 <cppLoop+0x1ca4>)
 8009d9e:	f7f7 f9b9 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009da2:	483e      	ldr	r0, [pc, #248]	; (8009e9c <cppLoop+0x1c6c>)
 8009da4:	f7f8 f972 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b08      	cmp	r3, #8
 8009dac:	bf0c      	ite	eq
 8009dae:	2301      	moveq	r3, #1
 8009db0:	2300      	movne	r3, #0
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d022      	beq.n	8009dfe <cppLoop+0x1bce>
				led.LR(-1, 1);
 8009db8:	2201      	movs	r2, #1
 8009dba:	f04f 31ff 	mov.w	r1, #4294967295
 8009dbe:	4836      	ldr	r0, [pc, #216]	; (8009e98 <cppLoop+0x1c68>)
 8009dc0:	f7f8 fa84 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009dc4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009dc8:	f001 fb96 	bl	800b4f8 <HAL_Delay>
				selector_vel++;
 8009dcc:	4b42      	ldr	r3, [pc, #264]	; (8009ed8 <cppLoop+0x1ca8>)
 8009dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	b21a      	sxth	r2, r3
 8009dda:	4b3f      	ldr	r3, [pc, #252]	; (8009ed8 <cppLoop+0x1ca8>)
 8009ddc:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 8009dde:	4b3e      	ldr	r3, [pc, #248]	; (8009ed8 <cppLoop+0x1ca8>)
 8009de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	dd02      	ble.n	8009dee <cppLoop+0x1bbe>
 8009de8:	4b3b      	ldr	r3, [pc, #236]	; (8009ed8 <cppLoop+0x1ca8>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 8009dee:	2200      	movs	r2, #0
 8009df0:	f04f 31ff 	mov.w	r1, #4294967295
 8009df4:	4828      	ldr	r0, [pc, #160]	; (8009e98 <cppLoop+0x1c68>)
 8009df6:	f7f8 fa69 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009dfa:	f001 ba3d 	b.w	800b278 <cppLoop+0x3048>
			else if(joy_stick.getValue() == JOY_R){
 8009dfe:	4827      	ldr	r0, [pc, #156]	; (8009e9c <cppLoop+0x1c6c>)
 8009e00:	f7f8 f944 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b10      	cmp	r3, #16
 8009e08:	bf0c      	ite	eq
 8009e0a:	2301      	moveq	r3, #1
 8009e0c:	2300      	movne	r3, #0
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d063      	beq.n	8009edc <cppLoop+0x1cac>
				led.LR(-1, 1);
 8009e14:	2201      	movs	r2, #1
 8009e16:	f04f 31ff 	mov.w	r1, #4294967295
 8009e1a:	481f      	ldr	r0, [pc, #124]	; (8009e98 <cppLoop+0x1c68>)
 8009e1c:	f7f8 fa56 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009e20:	2064      	movs	r0, #100	; 0x64
 8009e22:	f001 fb69 	bl	800b4f8 <HAL_Delay>
				if(selector_vel == 0)
 8009e26:	4b2c      	ldr	r3, [pc, #176]	; (8009ed8 <cppLoop+0x1ca8>)
 8009e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d113      	bne.n	8009e58 <cppLoop+0x1c28>
					adj_max_velocity3 = adj_max_velocity3 + 0.1;
 8009e30:	4b1c      	ldr	r3, [pc, #112]	; (8009ea4 <cppLoop+0x1c74>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7f6 fb9f 	bl	8000578 <__aeabi_f2d>
 8009e3a:	a315      	add	r3, pc, #84	; (adr r3, 8009e90 <cppLoop+0x1c60>)
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	f7f6 fa3c 	bl	80002bc <__adddf3>
 8009e44:	4603      	mov	r3, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	4618      	mov	r0, r3
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	f7f6 fee4 	bl	8000c18 <__aeabi_d2f>
 8009e50:	4602      	mov	r2, r0
 8009e52:	4b14      	ldr	r3, [pc, #80]	; (8009ea4 <cppLoop+0x1c74>)
 8009e54:	601a      	str	r2, [r3, #0]
 8009e56:	e012      	b.n	8009e7e <cppLoop+0x1c4e>
					adj_min_velocity3 = adj_min_velocity3 + 0.1;
 8009e58:	4b14      	ldr	r3, [pc, #80]	; (8009eac <cppLoop+0x1c7c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7f6 fb8b 	bl	8000578 <__aeabi_f2d>
 8009e62:	a30b      	add	r3, pc, #44	; (adr r3, 8009e90 <cppLoop+0x1c60>)
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f7f6 fa28 	bl	80002bc <__adddf3>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	460c      	mov	r4, r1
 8009e70:	4618      	mov	r0, r3
 8009e72:	4621      	mov	r1, r4
 8009e74:	f7f6 fed0 	bl	8000c18 <__aeabi_d2f>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <cppLoop+0x1c7c>)
 8009e7c:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f04f 31ff 	mov.w	r1, #4294967295
 8009e84:	4804      	ldr	r0, [pc, #16]	; (8009e98 <cppLoop+0x1c68>)
 8009e86:	f7f8 fa21 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009e8a:	f001 b9f5 	b.w	800b278 <cppLoop+0x3048>
 8009e8e:	bf00      	nop
 8009e90:	9999999a 	.word	0x9999999a
 8009e94:	3fb99999 	.word	0x3fb99999
 8009e98:	20000558 	.word	0x20000558
 8009e9c:	2000054c 	.word	0x2000054c
 8009ea0:	2004526a 	.word	0x2004526a
 8009ea4:	200452c8 	.word	0x200452c8
 8009ea8:	0801a6d0 	.word	0x0801a6d0
 8009eac:	200452d0 	.word	0x200452d0
 8009eb0:	0801a63c 	.word	0x0801a63c
 8009eb4:	20045270 	.word	0x20045270
 8009eb8:	20045278 	.word	0x20045278
 8009ebc:	20045280 	.word	0x20045280
 8009ec0:	200209d4 	.word	0x200209d4
 8009ec4:	2000057c 	.word	0x2000057c
 8009ec8:	0801a648 	.word	0x0801a648
 8009ecc:	0801a654 	.word	0x0801a654
 8009ed0:	0801a660 	.word	0x0801a660
 8009ed4:	0801a670 	.word	0x0801a670
 8009ed8:	2004526e 	.word	0x2004526e
			else if(joy_stick.getValue() == JOY_L){
 8009edc:	48a0      	ldr	r0, [pc, #640]	; (800a160 <cppLoop+0x1f30>)
 8009ede:	f7f8 f8d5 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	bf0c      	ite	eq
 8009ee8:	2301      	moveq	r3, #1
 8009eea:	2300      	movne	r3, #0
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d03c      	beq.n	8009f6c <cppLoop+0x1d3c>
				led.LR(-1, 1);
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8009ef8:	489a      	ldr	r0, [pc, #616]	; (800a164 <cppLoop+0x1f34>)
 8009efa:	f7f8 f9e7 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8009efe:	2064      	movs	r0, #100	; 0x64
 8009f00:	f001 fafa 	bl	800b4f8 <HAL_Delay>
				if(selector_vel == 0)
 8009f04:	4b98      	ldr	r3, [pc, #608]	; (800a168 <cppLoop+0x1f38>)
 8009f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d113      	bne.n	8009f36 <cppLoop+0x1d06>
					adj_max_velocity3 = adj_max_velocity3 - 0.1;
 8009f0e:	4b97      	ldr	r3, [pc, #604]	; (800a16c <cppLoop+0x1f3c>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7f6 fb30 	bl	8000578 <__aeabi_f2d>
 8009f18:	a38f      	add	r3, pc, #572	; (adr r3, 800a158 <cppLoop+0x1f28>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 f9cb 	bl	80002b8 <__aeabi_dsub>
 8009f22:	4603      	mov	r3, r0
 8009f24:	460c      	mov	r4, r1
 8009f26:	4618      	mov	r0, r3
 8009f28:	4621      	mov	r1, r4
 8009f2a:	f7f6 fe75 	bl	8000c18 <__aeabi_d2f>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	4b8e      	ldr	r3, [pc, #568]	; (800a16c <cppLoop+0x1f3c>)
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	e012      	b.n	8009f5c <cppLoop+0x1d2c>
					adj_min_velocity3 = adj_min_velocity3 - 0.1;
 8009f36:	4b8e      	ldr	r3, [pc, #568]	; (800a170 <cppLoop+0x1f40>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7f6 fb1c 	bl	8000578 <__aeabi_f2d>
 8009f40:	a385      	add	r3, pc, #532	; (adr r3, 800a158 <cppLoop+0x1f28>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f7f6 f9b7 	bl	80002b8 <__aeabi_dsub>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	4618      	mov	r0, r3
 8009f50:	4621      	mov	r1, r4
 8009f52:	f7f6 fe61 	bl	8000c18 <__aeabi_d2f>
 8009f56:	4602      	mov	r2, r0
 8009f58:	4b85      	ldr	r3, [pc, #532]	; (800a170 <cppLoop+0x1f40>)
 8009f5a:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8009f62:	4880      	ldr	r0, [pc, #512]	; (800a164 <cppLoop+0x1f34>)
 8009f64:	f7f8 f9b2 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009f68:	f001 b986 	b.w	800b278 <cppLoop+0x3048>
			else if(joy_stick.getValue() == JOY_C){
 8009f6c:	487c      	ldr	r0, [pc, #496]	; (800a160 <cppLoop+0x1f30>)
 8009f6e:	f7f8 f88d 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	bf0c      	ite	eq
 8009f78:	2301      	moveq	r3, #1
 8009f7a:	2300      	movne	r3, #0
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f001 817a 	beq.w	800b278 <cppLoop+0x3048>
				led.LR(-1, 1);
 8009f84:	2201      	movs	r2, #1
 8009f86:	f04f 31ff 	mov.w	r1, #4294967295
 8009f8a:	4876      	ldr	r0, [pc, #472]	; (800a164 <cppLoop+0x1f34>)
 8009f8c:	f7f8 f99e 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8009f90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009f94:	f001 fab0 	bl	800b4f8 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL4.TXT", 1, &adj_max_velocity3, OVER_WRITE);
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	4b73      	ldr	r3, [pc, #460]	; (800a16c <cppLoop+0x1f3c>)
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	4974      	ldr	r1, [pc, #464]	; (800a174 <cppLoop+0x1f44>)
 8009fa2:	4875      	ldr	r0, [pc, #468]	; (800a178 <cppLoop+0x1f48>)
 8009fa4:	f7f7 fc5a 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL4.TXT", 1, &adj_min_velocity3, OVER_WRITE);
 8009fa8:	2300      	movs	r3, #0
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	4b70      	ldr	r3, [pc, #448]	; (800a170 <cppLoop+0x1f40>)
 8009fae:	2201      	movs	r2, #1
 8009fb0:	4972      	ldr	r1, [pc, #456]	; (800a17c <cppLoop+0x1f4c>)
 8009fb2:	4871      	ldr	r0, [pc, #452]	; (800a178 <cppLoop+0x1f48>)
 8009fb4:	f7f7 fc52 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity3(adj_max_velocity3);
 8009fb8:	4b6c      	ldr	r3, [pc, #432]	; (800a16c <cppLoop+0x1f3c>)
 8009fba:	edd3 7a00 	vldr	s15, [r3]
 8009fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8009fc2:	486f      	ldr	r0, [pc, #444]	; (800a180 <cppLoop+0x1f50>)
 8009fc4:	f7fa f887 	bl	80040d6 <_ZN9LineTrace15setMaxVelocity3Ef>
				line_trace.setMinVelocity3(adj_min_velocity3);
 8009fc8:	4b69      	ldr	r3, [pc, #420]	; (800a170 <cppLoop+0x1f40>)
 8009fca:	edd3 7a00 	vldr	s15, [r3]
 8009fce:	eeb0 0a67 	vmov.f32	s0, s15
 8009fd2:	486b      	ldr	r0, [pc, #428]	; (800a180 <cppLoop+0x1f50>)
 8009fd4:	f7fa f88f 	bl	80040f6 <_ZN9LineTrace15setMinVelocity3Ef>
				led.LR(-1, 0);
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f04f 31ff 	mov.w	r1, #4294967295
 8009fde:	4861      	ldr	r0, [pc, #388]	; (800a164 <cppLoop+0x1f34>)
 8009fe0:	f7f8 f974 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009fe4:	f001 b948 	b.w	800b278 <cppLoop+0x3048>

	case 6:
		led.fullColor('R');
 8009fe8:	2152      	movs	r1, #82	; 0x52
 8009fea:	485e      	ldr	r0, [pc, #376]	; (800a164 <cppLoop+0x1f34>)
 8009fec:	f7f8 f8b2 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8009ff0:	485b      	ldr	r0, [pc, #364]	; (800a160 <cppLoop+0x1f30>)
 8009ff2:	f7f8 f84b 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	bf0c      	ite	eq
 8009ffc:	2301      	moveq	r3, #1
 8009ffe:	2300      	movne	r3, #0
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d020      	beq.n	800a048 <cppLoop+0x1e18>
			led.LR(-1, 1);
 800a006:	2201      	movs	r2, #1
 800a008:	f04f 31ff 	mov.w	r1, #4294967295
 800a00c:	4855      	ldr	r0, [pc, #340]	; (800a164 <cppLoop+0x1f34>)
 800a00e:	f7f8 f95d 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a012:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a016:	f001 fa6f 	bl	800b4f8 <HAL_Delay>

			selector_run++;
 800a01a:	4b5a      	ldr	r3, [pc, #360]	; (800a184 <cppLoop+0x1f54>)
 800a01c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a020:	b29b      	uxth	r3, r3
 800a022:	3301      	adds	r3, #1
 800a024:	b29b      	uxth	r3, r3
 800a026:	b21a      	sxth	r2, r3
 800a028:	4b56      	ldr	r3, [pc, #344]	; (800a184 <cppLoop+0x1f54>)
 800a02a:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 800a02c:	4b55      	ldr	r3, [pc, #340]	; (800a184 <cppLoop+0x1f54>)
 800a02e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a032:	2b01      	cmp	r3, #1
 800a034:	dd02      	ble.n	800a03c <cppLoop+0x1e0c>
 800a036:	4b53      	ldr	r3, [pc, #332]	; (800a184 <cppLoop+0x1f54>)
 800a038:	2200      	movs	r2, #0
 800a03a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a03c:	2200      	movs	r2, #0
 800a03e:	f04f 31ff 	mov.w	r1, #4294967295
 800a042:	4848      	ldr	r0, [pc, #288]	; (800a164 <cppLoop+0x1f34>)
 800a044:	f7f8 f942 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 800a048:	4b4e      	ldr	r3, [pc, #312]	; (800a184 <cppLoop+0x1f54>)
 800a04a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f040 80b0 	bne.w	800a1b4 <cppLoop+0x1f84>
			lcd_clear();
 800a054:	f7f7 f824 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800a058:	2100      	movs	r1, #0
 800a05a:	2000      	movs	r0, #0
 800a05c:	f7f7 f830 	bl	80010c0 <lcd_locate>
			lcd_printf("5:   %3.1f", adj_max_velocity4);
 800a060:	4b49      	ldr	r3, [pc, #292]	; (800a188 <cppLoop+0x1f58>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4618      	mov	r0, r3
 800a066:	f7f6 fa87 	bl	8000578 <__aeabi_f2d>
 800a06a:	4603      	mov	r3, r0
 800a06c:	460c      	mov	r4, r1
 800a06e:	461a      	mov	r2, r3
 800a070:	4623      	mov	r3, r4
 800a072:	4846      	ldr	r0, [pc, #280]	; (800a18c <cppLoop+0x1f5c>)
 800a074:	f7f7 f84e 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800a078:	2101      	movs	r1, #1
 800a07a:	2000      	movs	r0, #0
 800a07c:	f7f7 f820 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity4);
 800a080:	4b43      	ldr	r3, [pc, #268]	; (800a190 <cppLoop+0x1f60>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4618      	mov	r0, r3
 800a086:	f7f6 fa77 	bl	8000578 <__aeabi_f2d>
 800a08a:	4603      	mov	r3, r0
 800a08c:	460c      	mov	r4, r1
 800a08e:	461a      	mov	r2, r3
 800a090:	4623      	mov	r3, r4
 800a092:	4840      	ldr	r0, [pc, #256]	; (800a194 <cppLoop+0x1f64>)
 800a094:	f7f7 f83e 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 800a098:	4831      	ldr	r0, [pc, #196]	; (800a160 <cppLoop+0x1f30>)
 800a09a:	f7f7 fff7 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	bf0c      	ite	eq
 800a0a4:	2301      	moveq	r3, #1
 800a0a6:	2300      	movne	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f001 80e6 	beq.w	800b27c <cppLoop+0x304c>
				HAL_Delay(500);
 800a0b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0b4:	f001 fa20 	bl	800b4f8 <HAL_Delay>

				led.LR(1, -1);
 800a0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0bc:	2101      	movs	r1, #1
 800a0be:	4829      	ldr	r0, [pc, #164]	; (800a164 <cppLoop+0x1f34>)
 800a0c0:	f7f8 f904 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800a0c4:	4b34      	ldr	r3, [pc, #208]	; (800a198 <cppLoop+0x1f68>)
 800a0c6:	edd3 7a00 	vldr	s15, [r3]
 800a0ca:	4b34      	ldr	r3, [pc, #208]	; (800a19c <cppLoop+0x1f6c>)
 800a0cc:	ed93 7a00 	vldr	s14, [r3]
 800a0d0:	4b33      	ldr	r3, [pc, #204]	; (800a1a0 <cppLoop+0x1f70>)
 800a0d2:	edd3 6a00 	vldr	s13, [r3]
 800a0d6:	eeb0 1a66 	vmov.f32	s2, s13
 800a0da:	eef0 0a47 	vmov.f32	s1, s14
 800a0de:	eeb0 0a67 	vmov.f32	s0, s15
 800a0e2:	4827      	ldr	r0, [pc, #156]	; (800a180 <cppLoop+0x1f50>)
 800a0e4:	f7f9 ff0c 	bl	8003f00 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(FIFTH_RUNNING);
 800a0e8:	2104      	movs	r1, #4
 800a0ea:	4825      	ldr	r0, [pc, #148]	; (800a180 <cppLoop+0x1f50>)
 800a0ec:	f7fa fa82 	bl	80045f4 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity4);
 800a0f0:	4b27      	ldr	r3, [pc, #156]	; (800a190 <cppLoop+0x1f60>)
 800a0f2:	edd3 7a00 	vldr	s15, [r3]
 800a0f6:	eeb0 0a67 	vmov.f32	s0, s15
 800a0fa:	4821      	ldr	r0, [pc, #132]	; (800a180 <cppLoop+0x1f50>)
 800a0fc:	f7f9 ff9b 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity4(adj_max_velocity4);
 800a100:	4b21      	ldr	r3, [pc, #132]	; (800a188 <cppLoop+0x1f58>)
 800a102:	edd3 7a00 	vldr	s15, [r3]
 800a106:	eeb0 0a67 	vmov.f32	s0, s15
 800a10a:	481d      	ldr	r0, [pc, #116]	; (800a180 <cppLoop+0x1f50>)
 800a10c:	f7fa f803 	bl	8004116 <_ZN9LineTrace15setMaxVelocity4Ef>
				line_trace.setMinVelocity4(adj_min_velocity4);
 800a110:	4b1f      	ldr	r3, [pc, #124]	; (800a190 <cppLoop+0x1f60>)
 800a112:	edd3 7a00 	vldr	s15, [r3]
 800a116:	eeb0 0a67 	vmov.f32	s0, s15
 800a11a:	4819      	ldr	r0, [pc, #100]	; (800a180 <cppLoop+0x1f50>)
 800a11c:	f7fa f80b 	bl	8004136 <_ZN9LineTrace15setMinVelocity4Ef>
				line_trace.createVelocityTabele();
 800a120:	4817      	ldr	r0, [pc, #92]	; (800a180 <cppLoop+0x1f50>)
 800a122:	f7fa fcaf 	bl	8004a84 <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 800a126:	4816      	ldr	r0, [pc, #88]	; (800a180 <cppLoop+0x1f50>)
 800a128:	f7fa fab4 	bl	8004694 <_ZN9LineTrace7runningEv>

				logger.stop();
 800a12c:	481d      	ldr	r0, [pc, #116]	; (800a1a4 <cppLoop+0x1f74>)
 800a12e:	f7fb f9f3 	bl	8005518 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 800a132:	4a1d      	ldr	r2, [pc, #116]	; (800a1a8 <cppLoop+0x1f78>)
 800a134:	491d      	ldr	r1, [pc, #116]	; (800a1ac <cppLoop+0x1f7c>)
 800a136:	481b      	ldr	r0, [pc, #108]	; (800a1a4 <cppLoop+0x1f74>)
 800a138:	f7fb f887 	bl	800524a <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 800a13c:	4a1c      	ldr	r2, [pc, #112]	; (800a1b0 <cppLoop+0x1f80>)
 800a13e:	491b      	ldr	r1, [pc, #108]	; (800a1ac <cppLoop+0x1f7c>)
 800a140:	4818      	ldr	r0, [pc, #96]	; (800a1a4 <cppLoop+0x1f74>)
 800a142:	f7fb f896 	bl	8005272 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 800a146:	f04f 32ff 	mov.w	r2, #4294967295
 800a14a:	2100      	movs	r1, #0
 800a14c:	4805      	ldr	r0, [pc, #20]	; (800a164 <cppLoop+0x1f34>)
 800a14e:	f7f8 f8bd 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 800a152:	f001 b893 	b.w	800b27c <cppLoop+0x304c>
 800a156:	bf00      	nop
 800a158:	9999999a 	.word	0x9999999a
 800a15c:	3fb99999 	.word	0x3fb99999
 800a160:	2000054c 	.word	0x2000054c
 800a164:	20000558 	.word	0x20000558
 800a168:	2004526e 	.word	0x2004526e
 800a16c:	200452c8 	.word	0x200452c8
 800a170:	200452d0 	.word	0x200452d0
 800a174:	0801a6dc 	.word	0x0801a6dc
 800a178:	0801a5f0 	.word	0x0801a5f0
 800a17c:	0801a6e8 	.word	0x0801a6e8
 800a180:	200209d4 	.word	0x200209d4
 800a184:	2004526a 	.word	0x2004526a
 800a188:	200452d8 	.word	0x200452d8
 800a18c:	0801a6f4 	.word	0x0801a6f4
 800a190:	200452e0 	.word	0x200452e0
 800a194:	0801a63c 	.word	0x0801a63c
 800a198:	20045270 	.word	0x20045270
 800a19c:	20045278 	.word	0x20045278
 800a1a0:	20045280 	.word	0x20045280
 800a1a4:	2000057c 	.word	0x2000057c
 800a1a8:	0801a648 	.word	0x0801a648
 800a1ac:	0801a654 	.word	0x0801a654
 800a1b0:	0801a660 	.word	0x0801a660
			lcd_clear();
 800a1b4:	f7f6 ff74 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	f7f6 ff80 	bl	80010c0 <lcd_locate>
			lcd_printf("5:   %3.1f", line_trace.getMaxVelocity4());
 800a1c0:	48bd      	ldr	r0, [pc, #756]	; (800a4b8 <cppLoop+0x2288>)
 800a1c2:	f7fa f838 	bl	8004236 <_ZN9LineTrace15getMaxVelocity4Ev>
 800a1c6:	ee10 3a10 	vmov	r3, s0
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7f6 f9d4 	bl	8000578 <__aeabi_f2d>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	4623      	mov	r3, r4
 800a1d8:	48b8      	ldr	r0, [pc, #736]	; (800a4bc <cppLoop+0x228c>)
 800a1da:	f7f6 ff9b 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 800a1de:	2101      	movs	r1, #1
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	f7f6 ff6d 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity4());
 800a1e6:	48b4      	ldr	r0, [pc, #720]	; (800a4b8 <cppLoop+0x2288>)
 800a1e8:	f7fa f835 	bl	8004256 <_ZN9LineTrace15getMinVelocity4Ev>
 800a1ec:	ee10 3a10 	vmov	r3, s0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7f6 f9c1 	bl	8000578 <__aeabi_f2d>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	4623      	mov	r3, r4
 800a1fe:	48b0      	ldr	r0, [pc, #704]	; (800a4c0 <cppLoop+0x2290>)
 800a200:	f7f6 ff88 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 800a204:	48af      	ldr	r0, [pc, #700]	; (800a4c4 <cppLoop+0x2294>)
 800a206:	f7f7 ff41 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b08      	cmp	r3, #8
 800a20e:	bf0c      	ite	eq
 800a210:	2301      	moveq	r3, #1
 800a212:	2300      	movne	r3, #0
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d022      	beq.n	800a260 <cppLoop+0x2030>
				led.LR(-1, 1);
 800a21a:	2201      	movs	r2, #1
 800a21c:	f04f 31ff 	mov.w	r1, #4294967295
 800a220:	48a9      	ldr	r0, [pc, #676]	; (800a4c8 <cppLoop+0x2298>)
 800a222:	f7f8 f853 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 800a226:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a22a:	f001 f965 	bl	800b4f8 <HAL_Delay>
				selector_vel++;
 800a22e:	4ba7      	ldr	r3, [pc, #668]	; (800a4cc <cppLoop+0x229c>)
 800a230:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a234:	b29b      	uxth	r3, r3
 800a236:	3301      	adds	r3, #1
 800a238:	b29b      	uxth	r3, r3
 800a23a:	b21a      	sxth	r2, r3
 800a23c:	4ba3      	ldr	r3, [pc, #652]	; (800a4cc <cppLoop+0x229c>)
 800a23e:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 800a240:	4ba2      	ldr	r3, [pc, #648]	; (800a4cc <cppLoop+0x229c>)
 800a242:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a246:	2b01      	cmp	r3, #1
 800a248:	dd02      	ble.n	800a250 <cppLoop+0x2020>
 800a24a:	4ba0      	ldr	r3, [pc, #640]	; (800a4cc <cppLoop+0x229c>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 800a250:	2200      	movs	r2, #0
 800a252:	f04f 31ff 	mov.w	r1, #4294967295
 800a256:	489c      	ldr	r0, [pc, #624]	; (800a4c8 <cppLoop+0x2298>)
 800a258:	f7f8 f838 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a25c:	f001 b80e 	b.w	800b27c <cppLoop+0x304c>
			else if(joy_stick.getValue() == JOY_R){
 800a260:	4898      	ldr	r0, [pc, #608]	; (800a4c4 <cppLoop+0x2294>)
 800a262:	f7f7 ff13 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a266:	4603      	mov	r3, r0
 800a268:	2b10      	cmp	r3, #16
 800a26a:	bf0c      	ite	eq
 800a26c:	2301      	moveq	r3, #1
 800a26e:	2300      	movne	r3, #0
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	d03c      	beq.n	800a2f0 <cppLoop+0x20c0>
				led.LR(-1, 1);
 800a276:	2201      	movs	r2, #1
 800a278:	f04f 31ff 	mov.w	r1, #4294967295
 800a27c:	4892      	ldr	r0, [pc, #584]	; (800a4c8 <cppLoop+0x2298>)
 800a27e:	f7f8 f825 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 800a282:	2064      	movs	r0, #100	; 0x64
 800a284:	f001 f938 	bl	800b4f8 <HAL_Delay>
				if(selector_vel == 0)
 800a288:	4b90      	ldr	r3, [pc, #576]	; (800a4cc <cppLoop+0x229c>)
 800a28a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d113      	bne.n	800a2ba <cppLoop+0x208a>
					adj_max_velocity4 = adj_max_velocity4 + 0.1;
 800a292:	4b8f      	ldr	r3, [pc, #572]	; (800a4d0 <cppLoop+0x22a0>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4618      	mov	r0, r3
 800a298:	f7f6 f96e 	bl	8000578 <__aeabi_f2d>
 800a29c:	a384      	add	r3, pc, #528	; (adr r3, 800a4b0 <cppLoop+0x2280>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	f7f6 f80b 	bl	80002bc <__adddf3>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	f7f6 fcb3 	bl	8000c18 <__aeabi_d2f>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	4b86      	ldr	r3, [pc, #536]	; (800a4d0 <cppLoop+0x22a0>)
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	e012      	b.n	800a2e0 <cppLoop+0x20b0>
					adj_min_velocity4 = adj_min_velocity4 + 0.1;
 800a2ba:	4b86      	ldr	r3, [pc, #536]	; (800a4d4 <cppLoop+0x22a4>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7f6 f95a 	bl	8000578 <__aeabi_f2d>
 800a2c4:	a37a      	add	r3, pc, #488	; (adr r3, 800a4b0 <cppLoop+0x2280>)
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f7f5 fff7 	bl	80002bc <__adddf3>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	f7f6 fc9f 	bl	8000c18 <__aeabi_d2f>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	4b7d      	ldr	r3, [pc, #500]	; (800a4d4 <cppLoop+0x22a4>)
 800a2de:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f04f 31ff 	mov.w	r1, #4294967295
 800a2e6:	4878      	ldr	r0, [pc, #480]	; (800a4c8 <cppLoop+0x2298>)
 800a2e8:	f7f7 fff0 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a2ec:	f000 bfc6 	b.w	800b27c <cppLoop+0x304c>
			else if(joy_stick.getValue() == JOY_L){
 800a2f0:	4874      	ldr	r0, [pc, #464]	; (800a4c4 <cppLoop+0x2294>)
 800a2f2:	f7f7 fecb 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	bf0c      	ite	eq
 800a2fc:	2301      	moveq	r3, #1
 800a2fe:	2300      	movne	r3, #0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d03c      	beq.n	800a380 <cppLoop+0x2150>
				led.LR(-1, 1);
 800a306:	2201      	movs	r2, #1
 800a308:	f04f 31ff 	mov.w	r1, #4294967295
 800a30c:	486e      	ldr	r0, [pc, #440]	; (800a4c8 <cppLoop+0x2298>)
 800a30e:	f7f7 ffdd 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 800a312:	2064      	movs	r0, #100	; 0x64
 800a314:	f001 f8f0 	bl	800b4f8 <HAL_Delay>
				if(selector_vel == 0)
 800a318:	4b6c      	ldr	r3, [pc, #432]	; (800a4cc <cppLoop+0x229c>)
 800a31a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d113      	bne.n	800a34a <cppLoop+0x211a>
					adj_max_velocity4 = adj_max_velocity4 - 0.1;
 800a322:	4b6b      	ldr	r3, [pc, #428]	; (800a4d0 <cppLoop+0x22a0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4618      	mov	r0, r3
 800a328:	f7f6 f926 	bl	8000578 <__aeabi_f2d>
 800a32c:	a360      	add	r3, pc, #384	; (adr r3, 800a4b0 <cppLoop+0x2280>)
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	f7f5 ffc1 	bl	80002b8 <__aeabi_dsub>
 800a336:	4603      	mov	r3, r0
 800a338:	460c      	mov	r4, r1
 800a33a:	4618      	mov	r0, r3
 800a33c:	4621      	mov	r1, r4
 800a33e:	f7f6 fc6b 	bl	8000c18 <__aeabi_d2f>
 800a342:	4602      	mov	r2, r0
 800a344:	4b62      	ldr	r3, [pc, #392]	; (800a4d0 <cppLoop+0x22a0>)
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	e012      	b.n	800a370 <cppLoop+0x2140>
					adj_min_velocity4 = adj_min_velocity4 - 0.1;
 800a34a:	4b62      	ldr	r3, [pc, #392]	; (800a4d4 <cppLoop+0x22a4>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4618      	mov	r0, r3
 800a350:	f7f6 f912 	bl	8000578 <__aeabi_f2d>
 800a354:	a356      	add	r3, pc, #344	; (adr r3, 800a4b0 <cppLoop+0x2280>)
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f7f5 ffad 	bl	80002b8 <__aeabi_dsub>
 800a35e:	4603      	mov	r3, r0
 800a360:	460c      	mov	r4, r1
 800a362:	4618      	mov	r0, r3
 800a364:	4621      	mov	r1, r4
 800a366:	f7f6 fc57 	bl	8000c18 <__aeabi_d2f>
 800a36a:	4602      	mov	r2, r0
 800a36c:	4b59      	ldr	r3, [pc, #356]	; (800a4d4 <cppLoop+0x22a4>)
 800a36e:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800a370:	2200      	movs	r2, #0
 800a372:	f04f 31ff 	mov.w	r1, #4294967295
 800a376:	4854      	ldr	r0, [pc, #336]	; (800a4c8 <cppLoop+0x2298>)
 800a378:	f7f7 ffa8 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a37c:	f000 bf7e 	b.w	800b27c <cppLoop+0x304c>
			else if(joy_stick.getValue() == JOY_C){
 800a380:	4850      	ldr	r0, [pc, #320]	; (800a4c4 <cppLoop+0x2294>)
 800a382:	f7f7 fe83 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a386:	4603      	mov	r3, r0
 800a388:	2b02      	cmp	r3, #2
 800a38a:	bf0c      	ite	eq
 800a38c:	2301      	moveq	r3, #1
 800a38e:	2300      	movne	r3, #0
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 8772 	beq.w	800b27c <cppLoop+0x304c>
				led.LR(-1, 1);
 800a398:	2201      	movs	r2, #1
 800a39a:	f04f 31ff 	mov.w	r1, #4294967295
 800a39e:	484a      	ldr	r0, [pc, #296]	; (800a4c8 <cppLoop+0x2298>)
 800a3a0:	f7f7 ff94 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 800a3a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a3a8:	f001 f8a6 	bl	800b4f8 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL5.TXT", 1, &adj_max_velocity4, OVER_WRITE);
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	4b47      	ldr	r3, [pc, #284]	; (800a4d0 <cppLoop+0x22a0>)
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	4948      	ldr	r1, [pc, #288]	; (800a4d8 <cppLoop+0x22a8>)
 800a3b6:	4849      	ldr	r0, [pc, #292]	; (800a4dc <cppLoop+0x22ac>)
 800a3b8:	f7f7 fa50 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL5.TXT", 1, &adj_min_velocity4, OVER_WRITE);
 800a3bc:	2300      	movs	r3, #0
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	4b44      	ldr	r3, [pc, #272]	; (800a4d4 <cppLoop+0x22a4>)
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	4946      	ldr	r1, [pc, #280]	; (800a4e0 <cppLoop+0x22b0>)
 800a3c6:	4845      	ldr	r0, [pc, #276]	; (800a4dc <cppLoop+0x22ac>)
 800a3c8:	f7f7 fa48 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity4(adj_max_velocity4);
 800a3cc:	4b40      	ldr	r3, [pc, #256]	; (800a4d0 <cppLoop+0x22a0>)
 800a3ce:	edd3 7a00 	vldr	s15, [r3]
 800a3d2:	eeb0 0a67 	vmov.f32	s0, s15
 800a3d6:	4838      	ldr	r0, [pc, #224]	; (800a4b8 <cppLoop+0x2288>)
 800a3d8:	f7f9 fe9d 	bl	8004116 <_ZN9LineTrace15setMaxVelocity4Ef>
				line_trace.setMinVelocity4(adj_min_velocity4);
 800a3dc:	4b3d      	ldr	r3, [pc, #244]	; (800a4d4 <cppLoop+0x22a4>)
 800a3de:	edd3 7a00 	vldr	s15, [r3]
 800a3e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a3e6:	4834      	ldr	r0, [pc, #208]	; (800a4b8 <cppLoop+0x2288>)
 800a3e8:	f7f9 fea5 	bl	8004136 <_ZN9LineTrace15setMinVelocity4Ef>
				led.LR(-1, 0);
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f04f 31ff 	mov.w	r1, #4294967295
 800a3f2:	4835      	ldr	r0, [pc, #212]	; (800a4c8 <cppLoop+0x2298>)
 800a3f4:	f7f7 ff6a 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a3f8:	f000 bf40 	b.w	800b27c <cppLoop+0x304c>
	case 7:
		led.fullColor('W');
 800a3fc:	2157      	movs	r1, #87	; 0x57
 800a3fe:	4832      	ldr	r0, [pc, #200]	; (800a4c8 <cppLoop+0x2298>)
 800a400:	f7f7 fea8 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a404:	f7f6 fe4c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a408:	2100      	movs	r1, #0
 800a40a:	2000      	movs	r0, #0
 800a40c:	f7f6 fe58 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc());
 800a410:	4829      	ldr	r0, [pc, #164]	; (800a4b8 <cppLoop+0x2288>)
 800a412:	f7f9 ff98 	bl	8004346 <_ZN9LineTrace9getMaxAccEv>
 800a416:	ee10 3a10 	vmov	r3, s0
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7f6 f8ac 	bl	8000578 <__aeabi_f2d>
 800a420:	4603      	mov	r3, r0
 800a422:	460c      	mov	r4, r1
 800a424:	461a      	mov	r2, r3
 800a426:	4623      	mov	r3, r4
 800a428:	482e      	ldr	r0, [pc, #184]	; (800a4e4 <cppLoop+0x22b4>)
 800a42a:	f7f6 fe73 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a42e:	2101      	movs	r1, #1
 800a430:	2000      	movs	r0, #0
 800a432:	f7f6 fe45 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec());
 800a436:	4820      	ldr	r0, [pc, #128]	; (800a4b8 <cppLoop+0x2288>)
 800a438:	f7f9 ff97 	bl	800436a <_ZN9LineTrace9getMaxDecEv>
 800a43c:	ee10 3a10 	vmov	r3, s0
 800a440:	4618      	mov	r0, r3
 800a442:	f7f6 f899 	bl	8000578 <__aeabi_f2d>
 800a446:	4603      	mov	r3, r0
 800a448:	460c      	mov	r4, r1
 800a44a:	461a      	mov	r2, r3
 800a44c:	4623      	mov	r3, r4
 800a44e:	4826      	ldr	r0, [pc, #152]	; (800a4e8 <cppLoop+0x22b8>)
 800a450:	f7f6 fe60 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a454:	481b      	ldr	r0, [pc, #108]	; (800a4c4 <cppLoop+0x2294>)
 800a456:	f7f7 fe19 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b04      	cmp	r3, #4
 800a45e:	bf0c      	ite	eq
 800a460:	2301      	moveq	r3, #1
 800a462:	2300      	movne	r3, #0
 800a464:	b2db      	uxtb	r3, r3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d042      	beq.n	800a4f0 <cppLoop+0x22c0>
			led.LR(-1, 1);
 800a46a:	2201      	movs	r2, #1
 800a46c:	f04f 31ff 	mov.w	r1, #4294967295
 800a470:	4815      	ldr	r0, [pc, #84]	; (800a4c8 <cppLoop+0x2298>)
 800a472:	f7f7 ff2b 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a476:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a47a:	f001 f83d 	bl	800b4f8 <HAL_Delay>

			selector_acc++;
 800a47e:	4b1b      	ldr	r3, [pc, #108]	; (800a4ec <cppLoop+0x22bc>)
 800a480:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a484:	b29b      	uxth	r3, r3
 800a486:	3301      	adds	r3, #1
 800a488:	b29b      	uxth	r3, r3
 800a48a:	b21a      	sxth	r2, r3
 800a48c:	4b17      	ldr	r3, [pc, #92]	; (800a4ec <cppLoop+0x22bc>)
 800a48e:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a490:	4b16      	ldr	r3, [pc, #88]	; (800a4ec <cppLoop+0x22bc>)
 800a492:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a496:	2b01      	cmp	r3, #1
 800a498:	dd02      	ble.n	800a4a0 <cppLoop+0x2270>
 800a49a:	4b14      	ldr	r3, [pc, #80]	; (800a4ec <cppLoop+0x22bc>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f04f 31ff 	mov.w	r1, #4294967295
 800a4a6:	4808      	ldr	r0, [pc, #32]	; (800a4c8 <cppLoop+0x2298>)
 800a4a8:	f7f7 ff10 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 800a4ac:	f000 bee8 	b.w	800b280 <cppLoop+0x3050>
 800a4b0:	9999999a 	.word	0x9999999a
 800a4b4:	3fb99999 	.word	0x3fb99999
 800a4b8:	200209d4 	.word	0x200209d4
 800a4bc:	0801a6f4 	.word	0x0801a6f4
 800a4c0:	0801a670 	.word	0x0801a670
 800a4c4:	2000054c 	.word	0x2000054c
 800a4c8:	20000558 	.word	0x20000558
 800a4cc:	2004526e 	.word	0x2004526e
 800a4d0:	200452d8 	.word	0x200452d8
 800a4d4:	200452e0 	.word	0x200452e0
 800a4d8:	0801a700 	.word	0x0801a700
 800a4dc:	0801a5f0 	.word	0x0801a5f0
 800a4e0:	0801a70c 	.word	0x0801a70c
 800a4e4:	0801a718 	.word	0x0801a718
 800a4e8:	0801a724 	.word	0x0801a724
 800a4ec:	2004526c 	.word	0x2004526c
		else if(joy_stick.getValue() == JOY_R){
 800a4f0:	48b9      	ldr	r0, [pc, #740]	; (800a7d8 <cppLoop+0x25a8>)
 800a4f2:	f7f7 fdcb 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b10      	cmp	r3, #16
 800a4fa:	bf0c      	ite	eq
 800a4fc:	2301      	moveq	r3, #1
 800a4fe:	2300      	movne	r3, #0
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d03c      	beq.n	800a580 <cppLoop+0x2350>
			led.LR(-1, 1);
 800a506:	2201      	movs	r2, #1
 800a508:	f04f 31ff 	mov.w	r1, #4294967295
 800a50c:	48b3      	ldr	r0, [pc, #716]	; (800a7dc <cppLoop+0x25ac>)
 800a50e:	f7f7 fedd 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a512:	2064      	movs	r0, #100	; 0x64
 800a514:	f000 fff0 	bl	800b4f8 <HAL_Delay>
			if(selector_acc == 0){
 800a518:	4bb1      	ldr	r3, [pc, #708]	; (800a7e0 <cppLoop+0x25b0>)
 800a51a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d113      	bne.n	800a54a <cppLoop+0x231a>
				adj_acc = adj_acc + 0.1;
 800a522:	4bb0      	ldr	r3, [pc, #704]	; (800a7e4 <cppLoop+0x25b4>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4618      	mov	r0, r3
 800a528:	f7f6 f826 	bl	8000578 <__aeabi_f2d>
 800a52c:	a3a8      	add	r3, pc, #672	; (adr r3, 800a7d0 <cppLoop+0x25a0>)
 800a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a532:	f7f5 fec3 	bl	80002bc <__adddf3>
 800a536:	4603      	mov	r3, r0
 800a538:	460c      	mov	r4, r1
 800a53a:	4618      	mov	r0, r3
 800a53c:	4621      	mov	r1, r4
 800a53e:	f7f6 fb6b 	bl	8000c18 <__aeabi_d2f>
 800a542:	4602      	mov	r2, r0
 800a544:	4ba7      	ldr	r3, [pc, #668]	; (800a7e4 <cppLoop+0x25b4>)
 800a546:	601a      	str	r2, [r3, #0]
 800a548:	e012      	b.n	800a570 <cppLoop+0x2340>
				adj_dec = adj_dec + 0.1;
 800a54a:	4ba7      	ldr	r3, [pc, #668]	; (800a7e8 <cppLoop+0x25b8>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f6 f812 	bl	8000578 <__aeabi_f2d>
 800a554:	a39e      	add	r3, pc, #632	; (adr r3, 800a7d0 <cppLoop+0x25a0>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	f7f5 feaf 	bl	80002bc <__adddf3>
 800a55e:	4603      	mov	r3, r0
 800a560:	460c      	mov	r4, r1
 800a562:	4618      	mov	r0, r3
 800a564:	4621      	mov	r1, r4
 800a566:	f7f6 fb57 	bl	8000c18 <__aeabi_d2f>
 800a56a:	4602      	mov	r2, r0
 800a56c:	4b9e      	ldr	r3, [pc, #632]	; (800a7e8 <cppLoop+0x25b8>)
 800a56e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a570:	2200      	movs	r2, #0
 800a572:	f04f 31ff 	mov.w	r1, #4294967295
 800a576:	4899      	ldr	r0, [pc, #612]	; (800a7dc <cppLoop+0x25ac>)
 800a578:	f7f7 fea8 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a57c:	f000 be80 	b.w	800b280 <cppLoop+0x3050>
		else if(joy_stick.getValue() == JOY_L){
 800a580:	4895      	ldr	r0, [pc, #596]	; (800a7d8 <cppLoop+0x25a8>)
 800a582:	f7f7 fd83 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a586:	4603      	mov	r3, r0
 800a588:	2b01      	cmp	r3, #1
 800a58a:	bf0c      	ite	eq
 800a58c:	2301      	moveq	r3, #1
 800a58e:	2300      	movne	r3, #0
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	d03c      	beq.n	800a610 <cppLoop+0x23e0>
			led.LR(-1, 1);
 800a596:	2201      	movs	r2, #1
 800a598:	f04f 31ff 	mov.w	r1, #4294967295
 800a59c:	488f      	ldr	r0, [pc, #572]	; (800a7dc <cppLoop+0x25ac>)
 800a59e:	f7f7 fe95 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a5a2:	2064      	movs	r0, #100	; 0x64
 800a5a4:	f000 ffa8 	bl	800b4f8 <HAL_Delay>
			if(selector_acc == 0){
 800a5a8:	4b8d      	ldr	r3, [pc, #564]	; (800a7e0 <cppLoop+0x25b0>)
 800a5aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d113      	bne.n	800a5da <cppLoop+0x23aa>
				adj_acc = adj_acc - 0.1;
 800a5b2:	4b8c      	ldr	r3, [pc, #560]	; (800a7e4 <cppLoop+0x25b4>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7f5 ffde 	bl	8000578 <__aeabi_f2d>
 800a5bc:	a384      	add	r3, pc, #528	; (adr r3, 800a7d0 <cppLoop+0x25a0>)
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	f7f5 fe79 	bl	80002b8 <__aeabi_dsub>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	f7f6 fb23 	bl	8000c18 <__aeabi_d2f>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b83      	ldr	r3, [pc, #524]	; (800a7e4 <cppLoop+0x25b4>)
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	e012      	b.n	800a600 <cppLoop+0x23d0>
				adj_dec = adj_dec - 0.1;
 800a5da:	4b83      	ldr	r3, [pc, #524]	; (800a7e8 <cppLoop+0x25b8>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7f5 ffca 	bl	8000578 <__aeabi_f2d>
 800a5e4:	a37a      	add	r3, pc, #488	; (adr r3, 800a7d0 <cppLoop+0x25a0>)
 800a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ea:	f7f5 fe65 	bl	80002b8 <__aeabi_dsub>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	f7f6 fb0f 	bl	8000c18 <__aeabi_d2f>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	4b7a      	ldr	r3, [pc, #488]	; (800a7e8 <cppLoop+0x25b8>)
 800a5fe:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a600:	2200      	movs	r2, #0
 800a602:	f04f 31ff 	mov.w	r1, #4294967295
 800a606:	4875      	ldr	r0, [pc, #468]	; (800a7dc <cppLoop+0x25ac>)
 800a608:	f7f7 fe60 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a60c:	f000 be38 	b.w	800b280 <cppLoop+0x3050>
		else if(joy_stick.getValue() == JOY_C){
 800a610:	4871      	ldr	r0, [pc, #452]	; (800a7d8 <cppLoop+0x25a8>)
 800a612:	f7f7 fd3b 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a616:	4603      	mov	r3, r0
 800a618:	2b02      	cmp	r3, #2
 800a61a:	bf0c      	ite	eq
 800a61c:	2301      	moveq	r3, #1
 800a61e:	2300      	movne	r3, #0
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 862c 	beq.w	800b280 <cppLoop+0x3050>
			led.LR(-1, 1);
 800a628:	2201      	movs	r2, #1
 800a62a:	f04f 31ff 	mov.w	r1, #4294967295
 800a62e:	486b      	ldr	r0, [pc, #428]	; (800a7dc <cppLoop+0x25ac>)
 800a630:	f7f7 fe4c 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a634:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a638:	f000 ff5e 	bl	800b4f8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 800a63c:	2300      	movs	r3, #0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	4b68      	ldr	r3, [pc, #416]	; (800a7e4 <cppLoop+0x25b4>)
 800a642:	2201      	movs	r2, #1
 800a644:	4969      	ldr	r1, [pc, #420]	; (800a7ec <cppLoop+0x25bc>)
 800a646:	486a      	ldr	r0, [pc, #424]	; (800a7f0 <cppLoop+0x25c0>)
 800a648:	f7f7 f908 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 800a64c:	2300      	movs	r3, #0
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	4b65      	ldr	r3, [pc, #404]	; (800a7e8 <cppLoop+0x25b8>)
 800a652:	2201      	movs	r2, #1
 800a654:	4967      	ldr	r1, [pc, #412]	; (800a7f4 <cppLoop+0x25c4>)
 800a656:	4866      	ldr	r0, [pc, #408]	; (800a7f0 <cppLoop+0x25c0>)
 800a658:	f7f7 f900 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 800a65c:	4b61      	ldr	r3, [pc, #388]	; (800a7e4 <cppLoop+0x25b4>)
 800a65e:	edd3 7a00 	vldr	s15, [r3]
 800a662:	4b61      	ldr	r3, [pc, #388]	; (800a7e8 <cppLoop+0x25b8>)
 800a664:	ed93 7a00 	vldr	s14, [r3]
 800a668:	eef0 0a47 	vmov.f32	s1, s14
 800a66c:	eeb0 0a67 	vmov.f32	s0, s15
 800a670:	4861      	ldr	r0, [pc, #388]	; (800a7f8 <cppLoop+0x25c8>)
 800a672:	f7f9 fe00 	bl	8004276 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800a676:	2200      	movs	r2, #0
 800a678:	f04f 31ff 	mov.w	r1, #4294967295
 800a67c:	4857      	ldr	r0, [pc, #348]	; (800a7dc <cppLoop+0x25ac>)
 800a67e:	f7f7 fe25 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a682:	f000 bdfd 	b.w	800b280 <cppLoop+0x3050>

	case 8 :
		led.fullColor('W');
 800a686:	2157      	movs	r1, #87	; 0x57
 800a688:	4854      	ldr	r0, [pc, #336]	; (800a7dc <cppLoop+0x25ac>)
 800a68a:	f7f7 fd63 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a68e:	f7f6 fd07 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a692:	2100      	movs	r1, #0
 800a694:	2000      	movs	r0, #0
 800a696:	f7f6 fd13 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC3:%3.1f", line_trace.getMaxAcc2());
 800a69a:	4857      	ldr	r0, [pc, #348]	; (800a7f8 <cppLoop+0x25c8>)
 800a69c:	f7f9 fe77 	bl	800438e <_ZN9LineTrace10getMaxAcc2Ev>
 800a6a0:	ee10 3a10 	vmov	r3, s0
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7f5 ff67 	bl	8000578 <__aeabi_f2d>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	4852      	ldr	r0, [pc, #328]	; (800a7fc <cppLoop+0x25cc>)
 800a6b4:	f7f6 fd2e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	f7f6 fd00 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC3:%3.1f", line_trace.getMaxDec2());
 800a6c0:	484d      	ldr	r0, [pc, #308]	; (800a7f8 <cppLoop+0x25c8>)
 800a6c2:	f7f9 fe76 	bl	80043b2 <_ZN9LineTrace10getMaxDec2Ev>
 800a6c6:	ee10 3a10 	vmov	r3, s0
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7f5 ff54 	bl	8000578 <__aeabi_f2d>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	4623      	mov	r3, r4
 800a6d8:	4849      	ldr	r0, [pc, #292]	; (800a800 <cppLoop+0x25d0>)
 800a6da:	f7f6 fd1b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a6de:	483e      	ldr	r0, [pc, #248]	; (800a7d8 <cppLoop+0x25a8>)
 800a6e0:	f7f7 fcd4 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	bf0c      	ite	eq
 800a6ea:	2301      	moveq	r3, #1
 800a6ec:	2300      	movne	r3, #0
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d022      	beq.n	800a73a <cppLoop+0x250a>
			led.LR(-1, 1);
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f04f 31ff 	mov.w	r1, #4294967295
 800a6fa:	4838      	ldr	r0, [pc, #224]	; (800a7dc <cppLoop+0x25ac>)
 800a6fc:	f7f7 fde6 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a700:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a704:	f000 fef8 	bl	800b4f8 <HAL_Delay>

			selector_acc++;
 800a708:	4b35      	ldr	r3, [pc, #212]	; (800a7e0 <cppLoop+0x25b0>)
 800a70a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	3301      	adds	r3, #1
 800a712:	b29b      	uxth	r3, r3
 800a714:	b21a      	sxth	r2, r3
 800a716:	4b32      	ldr	r3, [pc, #200]	; (800a7e0 <cppLoop+0x25b0>)
 800a718:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a71a:	4b31      	ldr	r3, [pc, #196]	; (800a7e0 <cppLoop+0x25b0>)
 800a71c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a720:	2b01      	cmp	r3, #1
 800a722:	dd02      	ble.n	800a72a <cppLoop+0x24fa>
 800a724:	4b2e      	ldr	r3, [pc, #184]	; (800a7e0 <cppLoop+0x25b0>)
 800a726:	2200      	movs	r2, #0
 800a728:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a72a:	2200      	movs	r2, #0
 800a72c:	f04f 31ff 	mov.w	r1, #4294967295
 800a730:	482a      	ldr	r0, [pc, #168]	; (800a7dc <cppLoop+0x25ac>)
 800a732:	f7f7 fdcb 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 800a736:	f000 bda5 	b.w	800b284 <cppLoop+0x3054>
		else if(joy_stick.getValue() == JOY_R){
 800a73a:	4827      	ldr	r0, [pc, #156]	; (800a7d8 <cppLoop+0x25a8>)
 800a73c:	f7f7 fca6 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a740:	4603      	mov	r3, r0
 800a742:	2b10      	cmp	r3, #16
 800a744:	bf0c      	ite	eq
 800a746:	2301      	moveq	r3, #1
 800a748:	2300      	movne	r3, #0
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d05d      	beq.n	800a80c <cppLoop+0x25dc>
			led.LR(-1, 1);
 800a750:	2201      	movs	r2, #1
 800a752:	f04f 31ff 	mov.w	r1, #4294967295
 800a756:	4821      	ldr	r0, [pc, #132]	; (800a7dc <cppLoop+0x25ac>)
 800a758:	f7f7 fdb8 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a75c:	2064      	movs	r0, #100	; 0x64
 800a75e:	f000 fecb 	bl	800b4f8 <HAL_Delay>
			if(selector_acc == 0){
 800a762:	4b1f      	ldr	r3, [pc, #124]	; (800a7e0 <cppLoop+0x25b0>)
 800a764:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d113      	bne.n	800a794 <cppLoop+0x2564>
				adj_acc2 = adj_acc2 + 0.1;
 800a76c:	4b25      	ldr	r3, [pc, #148]	; (800a804 <cppLoop+0x25d4>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4618      	mov	r0, r3
 800a772:	f7f5 ff01 	bl	8000578 <__aeabi_f2d>
 800a776:	a316      	add	r3, pc, #88	; (adr r3, 800a7d0 <cppLoop+0x25a0>)
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	f7f5 fd9e 	bl	80002bc <__adddf3>
 800a780:	4603      	mov	r3, r0
 800a782:	460c      	mov	r4, r1
 800a784:	4618      	mov	r0, r3
 800a786:	4621      	mov	r1, r4
 800a788:	f7f6 fa46 	bl	8000c18 <__aeabi_d2f>
 800a78c:	4602      	mov	r2, r0
 800a78e:	4b1d      	ldr	r3, [pc, #116]	; (800a804 <cppLoop+0x25d4>)
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	e012      	b.n	800a7ba <cppLoop+0x258a>
				adj_dec2 = adj_dec2 + 0.1;
 800a794:	4b1c      	ldr	r3, [pc, #112]	; (800a808 <cppLoop+0x25d8>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4618      	mov	r0, r3
 800a79a:	f7f5 feed 	bl	8000578 <__aeabi_f2d>
 800a79e:	a30c      	add	r3, pc, #48	; (adr r3, 800a7d0 <cppLoop+0x25a0>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f5 fd8a 	bl	80002bc <__adddf3>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	f7f6 fa32 	bl	8000c18 <__aeabi_d2f>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	4b14      	ldr	r3, [pc, #80]	; (800a808 <cppLoop+0x25d8>)
 800a7b8:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f04f 31ff 	mov.w	r1, #4294967295
 800a7c0:	4806      	ldr	r0, [pc, #24]	; (800a7dc <cppLoop+0x25ac>)
 800a7c2:	f7f7 fd83 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a7c6:	f000 bd5d 	b.w	800b284 <cppLoop+0x3054>
 800a7ca:	bf00      	nop
 800a7cc:	f3af 8000 	nop.w
 800a7d0:	9999999a 	.word	0x9999999a
 800a7d4:	3fb99999 	.word	0x3fb99999
 800a7d8:	2000054c 	.word	0x2000054c
 800a7dc:	20000558 	.word	0x20000558
 800a7e0:	2004526c 	.word	0x2004526c
 800a7e4:	200452e8 	.word	0x200452e8
 800a7e8:	200452f0 	.word	0x200452f0
 800a7ec:	0801a730 	.word	0x0801a730
 800a7f0:	0801a5f0 	.word	0x0801a5f0
 800a7f4:	0801a738 	.word	0x0801a738
 800a7f8:	200209d4 	.word	0x200209d4
 800a7fc:	0801a740 	.word	0x0801a740
 800a800:	0801a74c 	.word	0x0801a74c
 800a804:	200452f8 	.word	0x200452f8
 800a808:	20045300 	.word	0x20045300
		else if(joy_stick.getValue() == JOY_L){
 800a80c:	48b8      	ldr	r0, [pc, #736]	; (800aaf0 <cppLoop+0x28c0>)
 800a80e:	f7f7 fc3d 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a812:	4603      	mov	r3, r0
 800a814:	2b01      	cmp	r3, #1
 800a816:	bf0c      	ite	eq
 800a818:	2301      	moveq	r3, #1
 800a81a:	2300      	movne	r3, #0
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d03c      	beq.n	800a89c <cppLoop+0x266c>
			led.LR(-1, 1);
 800a822:	2201      	movs	r2, #1
 800a824:	f04f 31ff 	mov.w	r1, #4294967295
 800a828:	48b2      	ldr	r0, [pc, #712]	; (800aaf4 <cppLoop+0x28c4>)
 800a82a:	f7f7 fd4f 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a82e:	2064      	movs	r0, #100	; 0x64
 800a830:	f000 fe62 	bl	800b4f8 <HAL_Delay>
			if(selector_acc == 0){
 800a834:	4bb0      	ldr	r3, [pc, #704]	; (800aaf8 <cppLoop+0x28c8>)
 800a836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d113      	bne.n	800a866 <cppLoop+0x2636>
				adj_acc2 = adj_acc2 - 0.1;
 800a83e:	4baf      	ldr	r3, [pc, #700]	; (800aafc <cppLoop+0x28cc>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4618      	mov	r0, r3
 800a844:	f7f5 fe98 	bl	8000578 <__aeabi_f2d>
 800a848:	a3a7      	add	r3, pc, #668	; (adr r3, 800aae8 <cppLoop+0x28b8>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f7f5 fd33 	bl	80002b8 <__aeabi_dsub>
 800a852:	4603      	mov	r3, r0
 800a854:	460c      	mov	r4, r1
 800a856:	4618      	mov	r0, r3
 800a858:	4621      	mov	r1, r4
 800a85a:	f7f6 f9dd 	bl	8000c18 <__aeabi_d2f>
 800a85e:	4602      	mov	r2, r0
 800a860:	4ba6      	ldr	r3, [pc, #664]	; (800aafc <cppLoop+0x28cc>)
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	e012      	b.n	800a88c <cppLoop+0x265c>
				adj_dec2 = adj_dec2 - 0.1;
 800a866:	4ba6      	ldr	r3, [pc, #664]	; (800ab00 <cppLoop+0x28d0>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7f5 fe84 	bl	8000578 <__aeabi_f2d>
 800a870:	a39d      	add	r3, pc, #628	; (adr r3, 800aae8 <cppLoop+0x28b8>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 fd1f 	bl	80002b8 <__aeabi_dsub>
 800a87a:	4603      	mov	r3, r0
 800a87c:	460c      	mov	r4, r1
 800a87e:	4618      	mov	r0, r3
 800a880:	4621      	mov	r1, r4
 800a882:	f7f6 f9c9 	bl	8000c18 <__aeabi_d2f>
 800a886:	4602      	mov	r2, r0
 800a888:	4b9d      	ldr	r3, [pc, #628]	; (800ab00 <cppLoop+0x28d0>)
 800a88a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800a88c:	2200      	movs	r2, #0
 800a88e:	f04f 31ff 	mov.w	r1, #4294967295
 800a892:	4898      	ldr	r0, [pc, #608]	; (800aaf4 <cppLoop+0x28c4>)
 800a894:	f7f7 fd1a 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a898:	f000 bcf4 	b.w	800b284 <cppLoop+0x3054>
		else if(joy_stick.getValue() == JOY_C){
 800a89c:	4894      	ldr	r0, [pc, #592]	; (800aaf0 <cppLoop+0x28c0>)
 800a89e:	f7f7 fbf5 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	bf0c      	ite	eq
 800a8a8:	2301      	moveq	r3, #1
 800a8aa:	2300      	movne	r3, #0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 84e8 	beq.w	800b284 <cppLoop+0x3054>
			led.LR(-1, 1);
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f04f 31ff 	mov.w	r1, #4294967295
 800a8ba:	488e      	ldr	r0, [pc, #568]	; (800aaf4 <cppLoop+0x28c4>)
 800a8bc:	f7f7 fd06 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a8c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a8c4:	f000 fe18 	bl	800b4f8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	4b8b      	ldr	r3, [pc, #556]	; (800aafc <cppLoop+0x28cc>)
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	498c      	ldr	r1, [pc, #560]	; (800ab04 <cppLoop+0x28d4>)
 800a8d2:	488d      	ldr	r0, [pc, #564]	; (800ab08 <cppLoop+0x28d8>)
 800a8d4:	f7f6 ffc2 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	4b88      	ldr	r3, [pc, #544]	; (800ab00 <cppLoop+0x28d0>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	498a      	ldr	r1, [pc, #552]	; (800ab0c <cppLoop+0x28dc>)
 800a8e2:	4889      	ldr	r0, [pc, #548]	; (800ab08 <cppLoop+0x28d8>)
 800a8e4:	f7f6 ffba 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 800a8e8:	4b84      	ldr	r3, [pc, #528]	; (800aafc <cppLoop+0x28cc>)
 800a8ea:	edd3 7a00 	vldr	s15, [r3]
 800a8ee:	4b84      	ldr	r3, [pc, #528]	; (800ab00 <cppLoop+0x28d0>)
 800a8f0:	ed93 7a00 	vldr	s14, [r3]
 800a8f4:	eef0 0a47 	vmov.f32	s1, s14
 800a8f8:	eeb0 0a67 	vmov.f32	s0, s15
 800a8fc:	4884      	ldr	r0, [pc, #528]	; (800ab10 <cppLoop+0x28e0>)
 800a8fe:	f7f9 fcd4 	bl	80042aa <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 800a902:	2200      	movs	r2, #0
 800a904:	f04f 31ff 	mov.w	r1, #4294967295
 800a908:	487a      	ldr	r0, [pc, #488]	; (800aaf4 <cppLoop+0x28c4>)
 800a90a:	f7f7 fcdf 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800a90e:	f000 bcb9 	b.w	800b284 <cppLoop+0x3054>


	case 9:
		led.fullColor('W');
 800a912:	2157      	movs	r1, #87	; 0x57
 800a914:	4877      	ldr	r0, [pc, #476]	; (800aaf4 <cppLoop+0x28c4>)
 800a916:	f7f7 fc1d 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800a91a:	f7f6 fbc1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800a91e:	2100      	movs	r1, #0
 800a920:	2000      	movs	r0, #0
 800a922:	f7f6 fbcd 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC4:%3.1f", line_trace.getMaxAcc3());
 800a926:	487a      	ldr	r0, [pc, #488]	; (800ab10 <cppLoop+0x28e0>)
 800a928:	f7f9 fd55 	bl	80043d6 <_ZN9LineTrace10getMaxAcc3Ev>
 800a92c:	ee10 3a10 	vmov	r3, s0
 800a930:	4618      	mov	r0, r3
 800a932:	f7f5 fe21 	bl	8000578 <__aeabi_f2d>
 800a936:	4603      	mov	r3, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	461a      	mov	r2, r3
 800a93c:	4623      	mov	r3, r4
 800a93e:	4875      	ldr	r0, [pc, #468]	; (800ab14 <cppLoop+0x28e4>)
 800a940:	f7f6 fbe8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800a944:	2101      	movs	r1, #1
 800a946:	2000      	movs	r0, #0
 800a948:	f7f6 fbba 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC4:%3.1f", line_trace.getMaxDec3());
 800a94c:	4870      	ldr	r0, [pc, #448]	; (800ab10 <cppLoop+0x28e0>)
 800a94e:	f7f9 fd54 	bl	80043fa <_ZN9LineTrace10getMaxDec3Ev>
 800a952:	ee10 3a10 	vmov	r3, s0
 800a956:	4618      	mov	r0, r3
 800a958:	f7f5 fe0e 	bl	8000578 <__aeabi_f2d>
 800a95c:	4603      	mov	r3, r0
 800a95e:	460c      	mov	r4, r1
 800a960:	461a      	mov	r2, r3
 800a962:	4623      	mov	r3, r4
 800a964:	486c      	ldr	r0, [pc, #432]	; (800ab18 <cppLoop+0x28e8>)
 800a966:	f7f6 fbd5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800a96a:	4861      	ldr	r0, [pc, #388]	; (800aaf0 <cppLoop+0x28c0>)
 800a96c:	f7f7 fb8e 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a970:	4603      	mov	r3, r0
 800a972:	2b04      	cmp	r3, #4
 800a974:	bf0c      	ite	eq
 800a976:	2301      	moveq	r3, #1
 800a978:	2300      	movne	r3, #0
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d022      	beq.n	800a9c6 <cppLoop+0x2796>
			led.LR(-1, 1);
 800a980:	2201      	movs	r2, #1
 800a982:	f04f 31ff 	mov.w	r1, #4294967295
 800a986:	485b      	ldr	r0, [pc, #364]	; (800aaf4 <cppLoop+0x28c4>)
 800a988:	f7f7 fca0 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800a98c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a990:	f000 fdb2 	bl	800b4f8 <HAL_Delay>

			selector_acc++;
 800a994:	4b58      	ldr	r3, [pc, #352]	; (800aaf8 <cppLoop+0x28c8>)
 800a996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	3301      	adds	r3, #1
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	b21a      	sxth	r2, r3
 800a9a2:	4b55      	ldr	r3, [pc, #340]	; (800aaf8 <cppLoop+0x28c8>)
 800a9a4:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800a9a6:	4b54      	ldr	r3, [pc, #336]	; (800aaf8 <cppLoop+0x28c8>)
 800a9a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	dd02      	ble.n	800a9b6 <cppLoop+0x2786>
 800a9b0:	4b51      	ldr	r3, [pc, #324]	; (800aaf8 <cppLoop+0x28c8>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a9bc:	484d      	ldr	r0, [pc, #308]	; (800aaf4 <cppLoop+0x28c4>)
 800a9be:	f7f7 fc85 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC3.TXT", 1, &adj_dec3, OVER_WRITE);
			line_trace.setMaxAccDec3(adj_acc3, adj_dec3);

			led.LR(-1, 0);
		}
		break;
 800a9c2:	f000 bc61 	b.w	800b288 <cppLoop+0x3058>
		else if(joy_stick.getValue() == JOY_R){
 800a9c6:	484a      	ldr	r0, [pc, #296]	; (800aaf0 <cppLoop+0x28c0>)
 800a9c8:	f7f7 fb60 	bl	800208c <_ZN8JoyStick8getValueEv>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b10      	cmp	r3, #16
 800a9d0:	bf0c      	ite	eq
 800a9d2:	2301      	moveq	r3, #1
 800a9d4:	2300      	movne	r3, #0
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d03c      	beq.n	800aa56 <cppLoop+0x2826>
			led.LR(-1, 1);
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f04f 31ff 	mov.w	r1, #4294967295
 800a9e2:	4844      	ldr	r0, [pc, #272]	; (800aaf4 <cppLoop+0x28c4>)
 800a9e4:	f7f7 fc72 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800a9e8:	2064      	movs	r0, #100	; 0x64
 800a9ea:	f000 fd85 	bl	800b4f8 <HAL_Delay>
			if(selector_acc == 0){
 800a9ee:	4b42      	ldr	r3, [pc, #264]	; (800aaf8 <cppLoop+0x28c8>)
 800a9f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d113      	bne.n	800aa20 <cppLoop+0x27f0>
				adj_acc3 = adj_acc3 + 0.1;
 800a9f8:	4b48      	ldr	r3, [pc, #288]	; (800ab1c <cppLoop+0x28ec>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f5 fdbb 	bl	8000578 <__aeabi_f2d>
 800aa02:	a339      	add	r3, pc, #228	; (adr r3, 800aae8 <cppLoop+0x28b8>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fc58 	bl	80002bc <__adddf3>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	460c      	mov	r4, r1
 800aa10:	4618      	mov	r0, r3
 800aa12:	4621      	mov	r1, r4
 800aa14:	f7f6 f900 	bl	8000c18 <__aeabi_d2f>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	4b40      	ldr	r3, [pc, #256]	; (800ab1c <cppLoop+0x28ec>)
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	e012      	b.n	800aa46 <cppLoop+0x2816>
				adj_dec3 = adj_dec3 + 0.1;
 800aa20:	4b3f      	ldr	r3, [pc, #252]	; (800ab20 <cppLoop+0x28f0>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7f5 fda7 	bl	8000578 <__aeabi_f2d>
 800aa2a:	a32f      	add	r3, pc, #188	; (adr r3, 800aae8 <cppLoop+0x28b8>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7f5 fc44 	bl	80002bc <__adddf3>
 800aa34:	4603      	mov	r3, r0
 800aa36:	460c      	mov	r4, r1
 800aa38:	4618      	mov	r0, r3
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	f7f6 f8ec 	bl	8000c18 <__aeabi_d2f>
 800aa40:	4602      	mov	r2, r0
 800aa42:	4b37      	ldr	r3, [pc, #220]	; (800ab20 <cppLoop+0x28f0>)
 800aa44:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800aa46:	2200      	movs	r2, #0
 800aa48:	f04f 31ff 	mov.w	r1, #4294967295
 800aa4c:	4829      	ldr	r0, [pc, #164]	; (800aaf4 <cppLoop+0x28c4>)
 800aa4e:	f7f7 fc3d 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800aa52:	f000 bc19 	b.w	800b288 <cppLoop+0x3058>
		else if(joy_stick.getValue() == JOY_L){
 800aa56:	4826      	ldr	r0, [pc, #152]	; (800aaf0 <cppLoop+0x28c0>)
 800aa58:	f7f7 fb18 	bl	800208c <_ZN8JoyStick8getValueEv>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	bf0c      	ite	eq
 800aa62:	2301      	moveq	r3, #1
 800aa64:	2300      	movne	r3, #0
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d05b      	beq.n	800ab24 <cppLoop+0x28f4>
			led.LR(-1, 1);
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f04f 31ff 	mov.w	r1, #4294967295
 800aa72:	4820      	ldr	r0, [pc, #128]	; (800aaf4 <cppLoop+0x28c4>)
 800aa74:	f7f7 fc2a 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800aa78:	2064      	movs	r0, #100	; 0x64
 800aa7a:	f000 fd3d 	bl	800b4f8 <HAL_Delay>
			if(selector_acc == 0){
 800aa7e:	4b1e      	ldr	r3, [pc, #120]	; (800aaf8 <cppLoop+0x28c8>)
 800aa80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d113      	bne.n	800aab0 <cppLoop+0x2880>
				adj_acc3 = adj_acc3 - 0.1;
 800aa88:	4b24      	ldr	r3, [pc, #144]	; (800ab1c <cppLoop+0x28ec>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7f5 fd73 	bl	8000578 <__aeabi_f2d>
 800aa92:	a315      	add	r3, pc, #84	; (adr r3, 800aae8 <cppLoop+0x28b8>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	f7f5 fc0e 	bl	80002b8 <__aeabi_dsub>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	f7f6 f8b8 	bl	8000c18 <__aeabi_d2f>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	4b1c      	ldr	r3, [pc, #112]	; (800ab1c <cppLoop+0x28ec>)
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	e012      	b.n	800aad6 <cppLoop+0x28a6>
				adj_dec3 = adj_dec3 - 0.1;
 800aab0:	4b1b      	ldr	r3, [pc, #108]	; (800ab20 <cppLoop+0x28f0>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7f5 fd5f 	bl	8000578 <__aeabi_f2d>
 800aaba:	a30b      	add	r3, pc, #44	; (adr r3, 800aae8 <cppLoop+0x28b8>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fbfa 	bl	80002b8 <__aeabi_dsub>
 800aac4:	4603      	mov	r3, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	4618      	mov	r0, r3
 800aaca:	4621      	mov	r1, r4
 800aacc:	f7f6 f8a4 	bl	8000c18 <__aeabi_d2f>
 800aad0:	4602      	mov	r2, r0
 800aad2:	4b13      	ldr	r3, [pc, #76]	; (800ab20 <cppLoop+0x28f0>)
 800aad4:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800aad6:	2200      	movs	r2, #0
 800aad8:	f04f 31ff 	mov.w	r1, #4294967295
 800aadc:	4805      	ldr	r0, [pc, #20]	; (800aaf4 <cppLoop+0x28c4>)
 800aade:	f7f7 fbf5 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800aae2:	e3d1      	b.n	800b288 <cppLoop+0x3058>
 800aae4:	f3af 8000 	nop.w
 800aae8:	9999999a 	.word	0x9999999a
 800aaec:	3fb99999 	.word	0x3fb99999
 800aaf0:	2000054c 	.word	0x2000054c
 800aaf4:	20000558 	.word	0x20000558
 800aaf8:	2004526c 	.word	0x2004526c
 800aafc:	200452f8 	.word	0x200452f8
 800ab00:	20045300 	.word	0x20045300
 800ab04:	0801a758 	.word	0x0801a758
 800ab08:	0801a5f0 	.word	0x0801a5f0
 800ab0c:	0801a764 	.word	0x0801a764
 800ab10:	200209d4 	.word	0x200209d4
 800ab14:	0801a770 	.word	0x0801a770
 800ab18:	0801a77c 	.word	0x0801a77c
 800ab1c:	20045308 	.word	0x20045308
 800ab20:	20045310 	.word	0x20045310
		else if(joy_stick.getValue() == JOY_C){
 800ab24:	48b0      	ldr	r0, [pc, #704]	; (800ade8 <cppLoop+0x2bb8>)
 800ab26:	f7f7 fab1 	bl	800208c <_ZN8JoyStick8getValueEv>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	bf0c      	ite	eq
 800ab30:	2301      	moveq	r3, #1
 800ab32:	2300      	movne	r3, #0
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 83a6 	beq.w	800b288 <cppLoop+0x3058>
			led.LR(-1, 1);
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f04f 31ff 	mov.w	r1, #4294967295
 800ab42:	48aa      	ldr	r0, [pc, #680]	; (800adec <cppLoop+0x2bbc>)
 800ab44:	f7f7 fbc2 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800ab48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ab4c:	f000 fcd4 	bl	800b4f8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC3.TXT", 1, &adj_acc3, OVER_WRITE);
 800ab50:	2300      	movs	r3, #0
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	4ba6      	ldr	r3, [pc, #664]	; (800adf0 <cppLoop+0x2bc0>)
 800ab56:	2201      	movs	r2, #1
 800ab58:	49a6      	ldr	r1, [pc, #664]	; (800adf4 <cppLoop+0x2bc4>)
 800ab5a:	48a7      	ldr	r0, [pc, #668]	; (800adf8 <cppLoop+0x2bc8>)
 800ab5c:	f7f6 fe7e 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC3.TXT", 1, &adj_dec3, OVER_WRITE);
 800ab60:	2300      	movs	r3, #0
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	4ba5      	ldr	r3, [pc, #660]	; (800adfc <cppLoop+0x2bcc>)
 800ab66:	2201      	movs	r2, #1
 800ab68:	49a5      	ldr	r1, [pc, #660]	; (800ae00 <cppLoop+0x2bd0>)
 800ab6a:	48a3      	ldr	r0, [pc, #652]	; (800adf8 <cppLoop+0x2bc8>)
 800ab6c:	f7f6 fe76 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec3(adj_acc3, adj_dec3);
 800ab70:	4b9f      	ldr	r3, [pc, #636]	; (800adf0 <cppLoop+0x2bc0>)
 800ab72:	edd3 7a00 	vldr	s15, [r3]
 800ab76:	4ba1      	ldr	r3, [pc, #644]	; (800adfc <cppLoop+0x2bcc>)
 800ab78:	ed93 7a00 	vldr	s14, [r3]
 800ab7c:	eef0 0a47 	vmov.f32	s1, s14
 800ab80:	eeb0 0a67 	vmov.f32	s0, s15
 800ab84:	489f      	ldr	r0, [pc, #636]	; (800ae04 <cppLoop+0x2bd4>)
 800ab86:	f7f9 fbaa 	bl	80042de <_ZN9LineTrace13setMaxAccDec3Eff>
			led.LR(-1, 0);
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f04f 31ff 	mov.w	r1, #4294967295
 800ab90:	4896      	ldr	r0, [pc, #600]	; (800adec <cppLoop+0x2bbc>)
 800ab92:	f7f7 fb9b 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800ab96:	e377      	b.n	800b288 <cppLoop+0x3058>

	case 10:
		led.fullColor('W');
 800ab98:	2157      	movs	r1, #87	; 0x57
 800ab9a:	4894      	ldr	r0, [pc, #592]	; (800adec <cppLoop+0x2bbc>)
 800ab9c:	f7f7 fada 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800aba0:	f7f6 fa7e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800aba4:	2100      	movs	r1, #0
 800aba6:	2000      	movs	r0, #0
 800aba8:	f7f6 fa8a 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC5:%3.1f", line_trace.getMaxAcc4());
 800abac:	4895      	ldr	r0, [pc, #596]	; (800ae04 <cppLoop+0x2bd4>)
 800abae:	f7f9 fc36 	bl	800441e <_ZN9LineTrace10getMaxAcc4Ev>
 800abb2:	ee10 3a10 	vmov	r3, s0
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7f5 fcde 	bl	8000578 <__aeabi_f2d>
 800abbc:	4603      	mov	r3, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	461a      	mov	r2, r3
 800abc2:	4623      	mov	r3, r4
 800abc4:	4890      	ldr	r0, [pc, #576]	; (800ae08 <cppLoop+0x2bd8>)
 800abc6:	f7f6 faa5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800abca:	2101      	movs	r1, #1
 800abcc:	2000      	movs	r0, #0
 800abce:	f7f6 fa77 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC5:%3.1f", line_trace.getMaxDec4());
 800abd2:	488c      	ldr	r0, [pc, #560]	; (800ae04 <cppLoop+0x2bd4>)
 800abd4:	f7f9 fc35 	bl	8004442 <_ZN9LineTrace10getMaxDec4Ev>
 800abd8:	ee10 3a10 	vmov	r3, s0
 800abdc:	4618      	mov	r0, r3
 800abde:	f7f5 fccb 	bl	8000578 <__aeabi_f2d>
 800abe2:	4603      	mov	r3, r0
 800abe4:	460c      	mov	r4, r1
 800abe6:	461a      	mov	r2, r3
 800abe8:	4623      	mov	r3, r4
 800abea:	4888      	ldr	r0, [pc, #544]	; (800ae0c <cppLoop+0x2bdc>)
 800abec:	f7f6 fa92 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 800abf0:	487d      	ldr	r0, [pc, #500]	; (800ade8 <cppLoop+0x2bb8>)
 800abf2:	f7f7 fa4b 	bl	800208c <_ZN8JoyStick8getValueEv>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b04      	cmp	r3, #4
 800abfa:	bf0c      	ite	eq
 800abfc:	2301      	moveq	r3, #1
 800abfe:	2300      	movne	r3, #0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d021      	beq.n	800ac4a <cppLoop+0x2a1a>
			led.LR(-1, 1);
 800ac06:	2201      	movs	r2, #1
 800ac08:	f04f 31ff 	mov.w	r1, #4294967295
 800ac0c:	4877      	ldr	r0, [pc, #476]	; (800adec <cppLoop+0x2bbc>)
 800ac0e:	f7f7 fb5d 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800ac12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ac16:	f000 fc6f 	bl	800b4f8 <HAL_Delay>

			selector_acc++;
 800ac1a:	4b7d      	ldr	r3, [pc, #500]	; (800ae10 <cppLoop+0x2be0>)
 800ac1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	3301      	adds	r3, #1
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	b21a      	sxth	r2, r3
 800ac28:	4b79      	ldr	r3, [pc, #484]	; (800ae10 <cppLoop+0x2be0>)
 800ac2a:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800ac2c:	4b78      	ldr	r3, [pc, #480]	; (800ae10 <cppLoop+0x2be0>)
 800ac2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	dd02      	ble.n	800ac3c <cppLoop+0x2a0c>
 800ac36:	4b76      	ldr	r3, [pc, #472]	; (800ae10 <cppLoop+0x2be0>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f04f 31ff 	mov.w	r1, #4294967295
 800ac42:	486a      	ldr	r0, [pc, #424]	; (800adec <cppLoop+0x2bbc>)
 800ac44:	f7f7 fb42 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC4.TXT", 1, &adj_dec4, OVER_WRITE);
			line_trace.setMaxAccDec4(adj_acc4, adj_dec4);

			led.LR(-1, 0);
		}
		break;
 800ac48:	e320      	b.n	800b28c <cppLoop+0x305c>
		else if(joy_stick.getValue() == JOY_R){
 800ac4a:	4867      	ldr	r0, [pc, #412]	; (800ade8 <cppLoop+0x2bb8>)
 800ac4c:	f7f7 fa1e 	bl	800208c <_ZN8JoyStick8getValueEv>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b10      	cmp	r3, #16
 800ac54:	bf0c      	ite	eq
 800ac56:	2301      	moveq	r3, #1
 800ac58:	2300      	movne	r3, #0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d03b      	beq.n	800acd8 <cppLoop+0x2aa8>
			led.LR(-1, 1);
 800ac60:	2201      	movs	r2, #1
 800ac62:	f04f 31ff 	mov.w	r1, #4294967295
 800ac66:	4861      	ldr	r0, [pc, #388]	; (800adec <cppLoop+0x2bbc>)
 800ac68:	f7f7 fb30 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800ac6c:	2064      	movs	r0, #100	; 0x64
 800ac6e:	f000 fc43 	bl	800b4f8 <HAL_Delay>
			if(selector_acc == 0){
 800ac72:	4b67      	ldr	r3, [pc, #412]	; (800ae10 <cppLoop+0x2be0>)
 800ac74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d113      	bne.n	800aca4 <cppLoop+0x2a74>
				adj_acc4 = adj_acc4 + 0.1;
 800ac7c:	4b65      	ldr	r3, [pc, #404]	; (800ae14 <cppLoop+0x2be4>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7f5 fc79 	bl	8000578 <__aeabi_f2d>
 800ac86:	a356      	add	r3, pc, #344	; (adr r3, 800ade0 <cppLoop+0x2bb0>)
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 fb16 	bl	80002bc <__adddf3>
 800ac90:	4603      	mov	r3, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	4618      	mov	r0, r3
 800ac96:	4621      	mov	r1, r4
 800ac98:	f7f5 ffbe 	bl	8000c18 <__aeabi_d2f>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	4b5d      	ldr	r3, [pc, #372]	; (800ae14 <cppLoop+0x2be4>)
 800aca0:	601a      	str	r2, [r3, #0]
 800aca2:	e012      	b.n	800acca <cppLoop+0x2a9a>
				adj_dec4 = adj_dec4 + 0.1;
 800aca4:	4b5c      	ldr	r3, [pc, #368]	; (800ae18 <cppLoop+0x2be8>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7f5 fc65 	bl	8000578 <__aeabi_f2d>
 800acae:	a34c      	add	r3, pc, #304	; (adr r3, 800ade0 <cppLoop+0x2bb0>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 fb02 	bl	80002bc <__adddf3>
 800acb8:	4603      	mov	r3, r0
 800acba:	460c      	mov	r4, r1
 800acbc:	4618      	mov	r0, r3
 800acbe:	4621      	mov	r1, r4
 800acc0:	f7f5 ffaa 	bl	8000c18 <__aeabi_d2f>
 800acc4:	4602      	mov	r2, r0
 800acc6:	4b54      	ldr	r3, [pc, #336]	; (800ae18 <cppLoop+0x2be8>)
 800acc8:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800acca:	2200      	movs	r2, #0
 800accc:	f04f 31ff 	mov.w	r1, #4294967295
 800acd0:	4846      	ldr	r0, [pc, #280]	; (800adec <cppLoop+0x2bbc>)
 800acd2:	f7f7 fafb 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800acd6:	e2d9      	b.n	800b28c <cppLoop+0x305c>
		else if(joy_stick.getValue() == JOY_L){
 800acd8:	4843      	ldr	r0, [pc, #268]	; (800ade8 <cppLoop+0x2bb8>)
 800acda:	f7f7 f9d7 	bl	800208c <_ZN8JoyStick8getValueEv>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	bf0c      	ite	eq
 800ace4:	2301      	moveq	r3, #1
 800ace6:	2300      	movne	r3, #0
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d03b      	beq.n	800ad66 <cppLoop+0x2b36>
			led.LR(-1, 1);
 800acee:	2201      	movs	r2, #1
 800acf0:	f04f 31ff 	mov.w	r1, #4294967295
 800acf4:	483d      	ldr	r0, [pc, #244]	; (800adec <cppLoop+0x2bbc>)
 800acf6:	f7f7 fae9 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800acfa:	2064      	movs	r0, #100	; 0x64
 800acfc:	f000 fbfc 	bl	800b4f8 <HAL_Delay>
			if(selector_acc == 0){
 800ad00:	4b43      	ldr	r3, [pc, #268]	; (800ae10 <cppLoop+0x2be0>)
 800ad02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d113      	bne.n	800ad32 <cppLoop+0x2b02>
				adj_acc4 = adj_acc4 - 0.1;
 800ad0a:	4b42      	ldr	r3, [pc, #264]	; (800ae14 <cppLoop+0x2be4>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7f5 fc32 	bl	8000578 <__aeabi_f2d>
 800ad14:	a332      	add	r3, pc, #200	; (adr r3, 800ade0 <cppLoop+0x2bb0>)
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f7f5 facd 	bl	80002b8 <__aeabi_dsub>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	4618      	mov	r0, r3
 800ad24:	4621      	mov	r1, r4
 800ad26:	f7f5 ff77 	bl	8000c18 <__aeabi_d2f>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	4b39      	ldr	r3, [pc, #228]	; (800ae14 <cppLoop+0x2be4>)
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	e012      	b.n	800ad58 <cppLoop+0x2b28>
				adj_dec4 = adj_dec4 - 0.1;
 800ad32:	4b39      	ldr	r3, [pc, #228]	; (800ae18 <cppLoop+0x2be8>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f5 fc1e 	bl	8000578 <__aeabi_f2d>
 800ad3c:	a328      	add	r3, pc, #160	; (adr r3, 800ade0 <cppLoop+0x2bb0>)
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	f7f5 fab9 	bl	80002b8 <__aeabi_dsub>
 800ad46:	4603      	mov	r3, r0
 800ad48:	460c      	mov	r4, r1
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	f7f5 ff63 	bl	8000c18 <__aeabi_d2f>
 800ad52:	4602      	mov	r2, r0
 800ad54:	4b30      	ldr	r3, [pc, #192]	; (800ae18 <cppLoop+0x2be8>)
 800ad56:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f04f 31ff 	mov.w	r1, #4294967295
 800ad5e:	4823      	ldr	r0, [pc, #140]	; (800adec <cppLoop+0x2bbc>)
 800ad60:	f7f7 fab4 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800ad64:	e292      	b.n	800b28c <cppLoop+0x305c>
		else if(joy_stick.getValue() == JOY_C){
 800ad66:	4820      	ldr	r0, [pc, #128]	; (800ade8 <cppLoop+0x2bb8>)
 800ad68:	f7f7 f990 	bl	800208c <_ZN8JoyStick8getValueEv>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	bf0c      	ite	eq
 800ad72:	2301      	moveq	r3, #1
 800ad74:	2300      	movne	r3, #0
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 8287 	beq.w	800b28c <cppLoop+0x305c>
			led.LR(-1, 1);
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f04f 31ff 	mov.w	r1, #4294967295
 800ad84:	4819      	ldr	r0, [pc, #100]	; (800adec <cppLoop+0x2bbc>)
 800ad86:	f7f7 faa1 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800ad8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ad8e:	f000 fbb3 	bl	800b4f8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC4.TXT", 1, &adj_acc4, OVER_WRITE);
 800ad92:	2300      	movs	r3, #0
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	4b1f      	ldr	r3, [pc, #124]	; (800ae14 <cppLoop+0x2be4>)
 800ad98:	2201      	movs	r2, #1
 800ad9a:	4920      	ldr	r1, [pc, #128]	; (800ae1c <cppLoop+0x2bec>)
 800ad9c:	4816      	ldr	r0, [pc, #88]	; (800adf8 <cppLoop+0x2bc8>)
 800ad9e:	f7f6 fd5d 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC4.TXT", 1, &adj_dec4, OVER_WRITE);
 800ada2:	2300      	movs	r3, #0
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	4b1c      	ldr	r3, [pc, #112]	; (800ae18 <cppLoop+0x2be8>)
 800ada8:	2201      	movs	r2, #1
 800adaa:	491d      	ldr	r1, [pc, #116]	; (800ae20 <cppLoop+0x2bf0>)
 800adac:	4812      	ldr	r0, [pc, #72]	; (800adf8 <cppLoop+0x2bc8>)
 800adae:	f7f6 fd55 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec4(adj_acc4, adj_dec4);
 800adb2:	4b18      	ldr	r3, [pc, #96]	; (800ae14 <cppLoop+0x2be4>)
 800adb4:	edd3 7a00 	vldr	s15, [r3]
 800adb8:	4b17      	ldr	r3, [pc, #92]	; (800ae18 <cppLoop+0x2be8>)
 800adba:	ed93 7a00 	vldr	s14, [r3]
 800adbe:	eef0 0a47 	vmov.f32	s1, s14
 800adc2:	eeb0 0a67 	vmov.f32	s0, s15
 800adc6:	480f      	ldr	r0, [pc, #60]	; (800ae04 <cppLoop+0x2bd4>)
 800adc8:	f7f9 faa3 	bl	8004312 <_ZN9LineTrace13setMaxAccDec4Eff>
			led.LR(-1, 0);
 800adcc:	2200      	movs	r2, #0
 800adce:	f04f 31ff 	mov.w	r1, #4294967295
 800add2:	4806      	ldr	r0, [pc, #24]	; (800adec <cppLoop+0x2bbc>)
 800add4:	f7f7 fa7a 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800add8:	e258      	b.n	800b28c <cppLoop+0x305c>
 800adda:	bf00      	nop
 800addc:	f3af 8000 	nop.w
 800ade0:	9999999a 	.word	0x9999999a
 800ade4:	3fb99999 	.word	0x3fb99999
 800ade8:	2000054c 	.word	0x2000054c
 800adec:	20000558 	.word	0x20000558
 800adf0:	20045308 	.word	0x20045308
 800adf4:	0801a788 	.word	0x0801a788
 800adf8:	0801a5f0 	.word	0x0801a5f0
 800adfc:	20045310 	.word	0x20045310
 800ae00:	0801a794 	.word	0x0801a794
 800ae04:	200209d4 	.word	0x200209d4
 800ae08:	0801a7a0 	.word	0x0801a7a0
 800ae0c:	0801a7ac 	.word	0x0801a7ac
 800ae10:	2004526c 	.word	0x2004526c
 800ae14:	20045318 	.word	0x20045318
 800ae18:	20045320 	.word	0x20045320
 800ae1c:	0801a7b8 	.word	0x0801a7b8
 800ae20:	0801a7c4 	.word	0x0801a7c4

	case 11:
		led.fullColor('~');
 800ae24:	217e      	movs	r1, #126	; 0x7e
 800ae26:	48be      	ldr	r0, [pc, #760]	; (800b120 <cppLoop+0x2ef0>)
 800ae28:	f7f7 f994 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800ae2c:	f7f6 f938 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800ae30:	2100      	movs	r1, #0
 800ae32:	2000      	movs	r0, #0
 800ae34:	f7f6 f944 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800ae38:	48ba      	ldr	r0, [pc, #744]	; (800b124 <cppLoop+0x2ef4>)
 800ae3a:	f7f6 f96b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800ae3e:	2101      	movs	r1, #1
 800ae40:	2000      	movs	r0, #0
 800ae42:	f7f6 f93d 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800ae46:	48b8      	ldr	r0, [pc, #736]	; (800b128 <cppLoop+0x2ef8>)
 800ae48:	f7f6 f964 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800ae4c:	48b7      	ldr	r0, [pc, #732]	; (800b12c <cppLoop+0x2efc>)
 800ae4e:	f7f7 f91d 	bl	800208c <_ZN8JoyStick8getValueEv>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	bf0c      	ite	eq
 800ae58:	2301      	moveq	r3, #1
 800ae5a:	2300      	movne	r3, #0
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 8216 	beq.w	800b290 <cppLoop+0x3060>
			HAL_Delay(500);
 800ae64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ae68:	f000 fb46 	bl	800b4f8 <HAL_Delay>
			led.LR(-1, 1);
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f04f 31ff 	mov.w	r1, #4294967295
 800ae72:	48ab      	ldr	r0, [pc, #684]	; (800b120 <cppLoop+0x2ef0>)
 800ae74:	f7f7 fa2a 	bl	80022cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800ae78:	2102      	movs	r1, #2
 800ae7a:	48ad      	ldr	r0, [pc, #692]	; (800b130 <cppLoop+0x2f00>)
 800ae7c:	f7f9 fbba 	bl	80045f4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800ae80:	4bac      	ldr	r3, [pc, #688]	; (800b134 <cppLoop+0x2f04>)
 800ae82:	edd3 7a00 	vldr	s15, [r3]
 800ae86:	eeb0 0a67 	vmov.f32	s0, s15
 800ae8a:	48a9      	ldr	r0, [pc, #676]	; (800b130 <cppLoop+0x2f00>)
 800ae8c:	f7f9 f8d3 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800ae90:	4ba8      	ldr	r3, [pc, #672]	; (800b134 <cppLoop+0x2f04>)
 800ae92:	edd3 7a00 	vldr	s15, [r3]
 800ae96:	eeb0 0a67 	vmov.f32	s0, s15
 800ae9a:	48a5      	ldr	r0, [pc, #660]	; (800b130 <cppLoop+0x2f00>)
 800ae9c:	f7f9 f8db 	bl	8004056 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800aea0:	4ba4      	ldr	r3, [pc, #656]	; (800b134 <cppLoop+0x2f04>)
 800aea2:	edd3 7a00 	vldr	s15, [r3]
 800aea6:	eeb0 0a67 	vmov.f32	s0, s15
 800aeaa:	48a1      	ldr	r0, [pc, #644]	; (800b130 <cppLoop+0x2f00>)
 800aeac:	f7f9 f8e3 	bl	8004076 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800aeb0:	489f      	ldr	r0, [pc, #636]	; (800b130 <cppLoop+0x2f00>)
 800aeb2:	f7f9 ff07 	bl	8004cc4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f04f 31ff 	mov.w	r1, #4294967295
 800aebc:	4898      	ldr	r0, [pc, #608]	; (800b120 <cppLoop+0x2ef0>)
 800aebe:	f7f7 fa05 	bl	80022cc <_ZN3LED2LREaa>
		}

		break;
 800aec2:	e1e5      	b.n	800b290 <cppLoop+0x3060>

	case 12:
		led.fullColor('~');
 800aec4:	217e      	movs	r1, #126	; 0x7e
 800aec6:	4896      	ldr	r0, [pc, #600]	; (800b120 <cppLoop+0x2ef0>)
 800aec8:	f7f7 f944 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800aecc:	f7f6 f8e8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800aed0:	2100      	movs	r1, #0
 800aed2:	2000      	movs	r0, #0
 800aed4:	f7f6 f8f4 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800aed8:	4897      	ldr	r0, [pc, #604]	; (800b138 <cppLoop+0x2f08>)
 800aeda:	f7f6 f91b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800aede:	2101      	movs	r1, #1
 800aee0:	2000      	movs	r0, #0
 800aee2:	f7f6 f8ed 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 800aee6:	4895      	ldr	r0, [pc, #596]	; (800b13c <cppLoop+0x2f0c>)
 800aee8:	f7f6 f914 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800aeec:	488f      	ldr	r0, [pc, #572]	; (800b12c <cppLoop+0x2efc>)
 800aeee:	f7f7 f8cd 	bl	800208c <_ZN8JoyStick8getValueEv>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	bf0c      	ite	eq
 800aef8:	2301      	moveq	r3, #1
 800aefa:	2300      	movne	r3, #0
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 81c8 	beq.w	800b294 <cppLoop+0x3064>
			led.LR(-1, 1);
 800af04:	2201      	movs	r2, #1
 800af06:	f04f 31ff 	mov.w	r1, #4294967295
 800af0a:	4885      	ldr	r0, [pc, #532]	; (800b120 <cppLoop+0x2ef0>)
 800af0c:	f7f7 f9de 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 800af10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800af14:	f000 faf0 	bl	800b4f8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800af18:	ed9f 0a89 	vldr	s0, [pc, #548]	; 800b140 <cppLoop+0x2f10>
 800af1c:	4884      	ldr	r0, [pc, #528]	; (800b130 <cppLoop+0x2f00>)
 800af1e:	f7f9 f87b 	bl	8004018 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800af22:	4883      	ldr	r0, [pc, #524]	; (800b130 <cppLoop+0x2f00>)
 800af24:	f7f9 fb78 	bl	8004618 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800af28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800af2c:	f000 fae4 	bl	800b4f8 <HAL_Delay>

			led.fullColor('R');
 800af30:	2152      	movs	r1, #82	; 0x52
 800af32:	487b      	ldr	r0, [pc, #492]	; (800b120 <cppLoop+0x2ef0>)
 800af34:	f7f7 f90e 	bl	8002154 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800af38:	4882      	ldr	r0, [pc, #520]	; (800b144 <cppLoop+0x2f14>)
 800af3a:	f7f6 fba7 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 800af3e:	f242 7010 	movw	r0, #10000	; 0x2710
 800af42:	f000 fad9 	bl	800b4f8 <HAL_Delay>

			line_trace.stop();
 800af46:	487a      	ldr	r0, [pc, #488]	; (800b130 <cppLoop+0x2f00>)
 800af48:	f7f9 fd1e 	bl	8004988 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800af4c:	497e      	ldr	r1, [pc, #504]	; (800b148 <cppLoop+0x2f18>)
 800af4e:	487f      	ldr	r0, [pc, #508]	; (800b14c <cppLoop+0x2f1c>)
 800af50:	f7f6 fc0f 	bl	8001772 <user_fopen>
			float d = encoder.getDistance();
 800af54:	487b      	ldr	r0, [pc, #492]	; (800b144 <cppLoop+0x2f14>)
 800af56:	f7f6 fb5d 	bl	8001614 <_ZN7Encoder11getDistanceEv>
 800af5a:	eef0 7a40 	vmov.f32	s15, s0
 800af5e:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 800af62:	1d3b      	adds	r3, r7, #4
 800af64:	2201      	movs	r2, #1
 800af66:	4619      	mov	r1, r3
 800af68:	2001      	movs	r0, #1
 800af6a:	f7f6 fc25 	bl	80017b8 <sd_write_float>
			user_fclose();
 800af6e:	f7f6 fc13 	bl	8001798 <user_fclose>

			led.LR(-1, 0);
 800af72:	2200      	movs	r2, #0
 800af74:	f04f 31ff 	mov.w	r1, #4294967295
 800af78:	4869      	ldr	r0, [pc, #420]	; (800b120 <cppLoop+0x2ef0>)
 800af7a:	f7f7 f9a7 	bl	80022cc <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 800af7e:	e189      	b.n	800b294 <cppLoop+0x3064>

	case 13:
		led.fullColor('~');
 800af80:	217e      	movs	r1, #126	; 0x7e
 800af82:	4867      	ldr	r0, [pc, #412]	; (800b120 <cppLoop+0x2ef0>)
 800af84:	f7f7 f8e6 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800af88:	f7f6 f88a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800af8c:	2100      	movs	r1, #0
 800af8e:	2000      	movs	r0, #0
 800af90:	f7f6 f896 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800af94:	486e      	ldr	r0, [pc, #440]	; (800b150 <cppLoop+0x2f20>)
 800af96:	f7f6 f8bd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800af9a:	2101      	movs	r1, #1
 800af9c:	2000      	movs	r0, #0
 800af9e:	f7f6 f88f 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800afa2:	486c      	ldr	r0, [pc, #432]	; (800b154 <cppLoop+0x2f24>)
 800afa4:	f7f6 f8b6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800afa8:	4860      	ldr	r0, [pc, #384]	; (800b12c <cppLoop+0x2efc>)
 800afaa:	f7f7 f86f 	bl	800208c <_ZN8JoyStick8getValueEv>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	bf0c      	ite	eq
 800afb4:	2301      	moveq	r3, #1
 800afb6:	2300      	movne	r3, #0
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 816c 	beq.w	800b298 <cppLoop+0x3068>
			HAL_Delay(1500);
 800afc0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800afc4:	f000 fa98 	bl	800b4f8 <HAL_Delay>
			led.LR(-1, 1);
 800afc8:	2201      	movs	r2, #1
 800afca:	f04f 31ff 	mov.w	r1, #4294967295
 800afce:	4854      	ldr	r0, [pc, #336]	; (800b120 <cppLoop+0x2ef0>)
 800afd0:	f7f7 f97c 	bl	80022cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 800afd4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800afd8:	f000 fa8e 	bl	800b4f8 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800afdc:	eddf 1a5e 	vldr	s3, [pc, #376]	; 800b158 <cppLoop+0x2f28>
 800afe0:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 800b158 <cppLoop+0x2f28>
 800afe4:	eddf 0a5c 	vldr	s1, [pc, #368]	; 800b158 <cppLoop+0x2f28>
 800afe8:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800b158 <cppLoop+0x2f28>
 800afec:	485b      	ldr	r0, [pc, #364]	; (800b15c <cppLoop+0x2f2c>)
 800afee:	f7f6 f92f 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 800aff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aff6:	f000 fa7f 	bl	800b4f8 <HAL_Delay>

			logger.start();
 800affa:	4859      	ldr	r0, [pc, #356]	; (800b160 <cppLoop+0x2f30>)
 800affc:	f7fa fa6d 	bl	80054da <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800b000:	4858      	ldr	r0, [pc, #352]	; (800b164 <cppLoop+0x2f34>)
 800b002:	f7fb fa4a 	bl	800649a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 800b006:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800b140 <cppLoop+0x2f10>
 800b00a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b00e:	4855      	ldr	r0, [pc, #340]	; (800b164 <cppLoop+0x2f34>)
 800b010:	f7fb f9d6 	bl	80063c0 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800b014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b018:	f000 fa6e 	bl	800b4f8 <HAL_Delay>

			logger.stop();
 800b01c:	4850      	ldr	r0, [pc, #320]	; (800b160 <cppLoop+0x2f30>)
 800b01e:	f7fa fa7b 	bl	8005518 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800b022:	4850      	ldr	r0, [pc, #320]	; (800b164 <cppLoop+0x2f34>)
 800b024:	f7fb fa4c 	bl	80064c0 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 800b028:	484c      	ldr	r0, [pc, #304]	; (800b15c <cppLoop+0x2f2c>)
 800b02a:	f7f6 f9ab 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800b02e:	4a4e      	ldr	r2, [pc, #312]	; (800b168 <cppLoop+0x2f38>)
 800b030:	494e      	ldr	r1, [pc, #312]	; (800b16c <cppLoop+0x2f3c>)
 800b032:	484b      	ldr	r0, [pc, #300]	; (800b160 <cppLoop+0x2f30>)
 800b034:	f7fa f909 	bl	800524a <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800b038:	2200      	movs	r2, #0
 800b03a:	f04f 31ff 	mov.w	r1, #4294967295
 800b03e:	4838      	ldr	r0, [pc, #224]	; (800b120 <cppLoop+0x2ef0>)
 800b040:	f7f7 f944 	bl	80022cc <_ZN3LED2LREaa>
		}
		break;
 800b044:	e128      	b.n	800b298 <cppLoop+0x3068>

	case 14:

		led.fullColor('W');
 800b046:	2157      	movs	r1, #87	; 0x57
 800b048:	4835      	ldr	r0, [pc, #212]	; (800b120 <cppLoop+0x2ef0>)
 800b04a:	f7f7 f883 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800b04e:	f7f6 f827 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800b052:	2100      	movs	r1, #0
 800b054:	2000      	movs	r0, #0
 800b056:	f7f6 f833 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 800b05a:	4845      	ldr	r0, [pc, #276]	; (800b170 <cppLoop+0x2f40>)
 800b05c:	f7f6 f85a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800b060:	2101      	movs	r1, #1
 800b062:	2000      	movs	r0, #0
 800b064:	f7f6 f82c 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800b068:	4b32      	ldr	r3, [pc, #200]	; (800b134 <cppLoop+0x2f04>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7f5 fa83 	bl	8000578 <__aeabi_f2d>
 800b072:	4603      	mov	r3, r0
 800b074:	460c      	mov	r4, r1
 800b076:	461a      	mov	r2, r3
 800b078:	4623      	mov	r3, r4
 800b07a:	483e      	ldr	r0, [pc, #248]	; (800b174 <cppLoop+0x2f44>)
 800b07c:	f7f6 f84a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800b080:	482a      	ldr	r0, [pc, #168]	; (800b12c <cppLoop+0x2efc>)
 800b082:	f7f7 f803 	bl	800208c <_ZN8JoyStick8getValueEv>
 800b086:	4603      	mov	r3, r0
 800b088:	2b02      	cmp	r3, #2
 800b08a:	bf0c      	ite	eq
 800b08c:	2301      	moveq	r3, #1
 800b08e:	2300      	movne	r3, #0
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 8102 	beq.w	800b29c <cppLoop+0x306c>
			HAL_Delay(500);
 800b098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b09c:	f000 fa2c 	bl	800b4f8 <HAL_Delay>

			led.LR(1, -1);
 800b0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	481e      	ldr	r0, [pc, #120]	; (800b120 <cppLoop+0x2ef0>)
 800b0a8:	f7f7 f910 	bl	80022cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800b0ac:	2102      	movs	r1, #2
 800b0ae:	4820      	ldr	r0, [pc, #128]	; (800b130 <cppLoop+0x2f00>)
 800b0b0:	f7f9 faa0 	bl	80045f4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800b0b4:	4b30      	ldr	r3, [pc, #192]	; (800b178 <cppLoop+0x2f48>)
 800b0b6:	edd3 7a00 	vldr	s15, [r3]
 800b0ba:	eeb0 0a67 	vmov.f32	s0, s15
 800b0be:	481c      	ldr	r0, [pc, #112]	; (800b130 <cppLoop+0x2f00>)
 800b0c0:	f7f8 ffb9 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800b0c4:	4b1b      	ldr	r3, [pc, #108]	; (800b134 <cppLoop+0x2f04>)
 800b0c6:	edd3 7a00 	vldr	s15, [r3]
 800b0ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b0ce:	4818      	ldr	r0, [pc, #96]	; (800b130 <cppLoop+0x2f00>)
 800b0d0:	f7f8 ffc1 	bl	8004056 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800b0d4:	4b17      	ldr	r3, [pc, #92]	; (800b134 <cppLoop+0x2f04>)
 800b0d6:	edd3 7a00 	vldr	s15, [r3]
 800b0da:	eeb0 0a67 	vmov.f32	s0, s15
 800b0de:	4814      	ldr	r0, [pc, #80]	; (800b130 <cppLoop+0x2f00>)
 800b0e0:	f7f8 ffc9 	bl	8004076 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800b0e4:	4812      	ldr	r0, [pc, #72]	; (800b130 <cppLoop+0x2f00>)
 800b0e6:	f7f9 fded 	bl	8004cc4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 800b0ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b0ee:	f000 fa03 	bl	800b4f8 <HAL_Delay>

			line_trace.running();
 800b0f2:	480f      	ldr	r0, [pc, #60]	; (800b130 <cppLoop+0x2f00>)
 800b0f4:	f7f9 face 	bl	8004694 <_ZN9LineTrace7runningEv>
			logger.stop();
 800b0f8:	4819      	ldr	r0, [pc, #100]	; (800b160 <cppLoop+0x2f30>)
 800b0fa:	f7fa fa0d 	bl	8005518 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800b0fe:	4a1f      	ldr	r2, [pc, #124]	; (800b17c <cppLoop+0x2f4c>)
 800b100:	491f      	ldr	r1, [pc, #124]	; (800b180 <cppLoop+0x2f50>)
 800b102:	4817      	ldr	r0, [pc, #92]	; (800b160 <cppLoop+0x2f30>)
 800b104:	f7fa f8a1 	bl	800524a <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800b108:	4a1e      	ldr	r2, [pc, #120]	; (800b184 <cppLoop+0x2f54>)
 800b10a:	491d      	ldr	r1, [pc, #116]	; (800b180 <cppLoop+0x2f50>)
 800b10c:	4814      	ldr	r0, [pc, #80]	; (800b160 <cppLoop+0x2f30>)
 800b10e:	f7fa f8b0 	bl	8005272 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 800b112:	f04f 32ff 	mov.w	r2, #4294967295
 800b116:	2100      	movs	r1, #0
 800b118:	4801      	ldr	r0, [pc, #4]	; (800b120 <cppLoop+0x2ef0>)
 800b11a:	f7f7 f8d7 	bl	80022cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 800b11e:	e0bd      	b.n	800b29c <cppLoop+0x306c>
 800b120:	20000558 	.word	0x20000558
 800b124:	0801a7d0 	.word	0x0801a7d0
 800b128:	0801a7dc 	.word	0x0801a7dc
 800b12c:	2000054c 	.word	0x2000054c
 800b130:	200209d4 	.word	0x200209d4
 800b134:	200452b8 	.word	0x200452b8
 800b138:	0801a7e8 	.word	0x0801a7e8
 800b13c:	0801a7f0 	.word	0x0801a7f0
 800b140:	00000000 	.word	0x00000000
 800b144:	20020928 	.word	0x20020928
 800b148:	0801a7fc 	.word	0x0801a7fc
 800b14c:	0801a804 	.word	0x0801a804
 800b150:	0801a810 	.word	0x0801a810
 800b154:	0801a814 	.word	0x0801a814
 800b158:	3ea3d70a 	.word	0x3ea3d70a
 800b15c:	200209d0 	.word	0x200209d0
 800b160:	2000057c 	.word	0x2000057c
 800b164:	20020950 	.word	0x20020950
 800b168:	0801a820 	.word	0x0801a820
 800b16c:	0801a82c 	.word	0x0801a82c
 800b170:	0801a838 	.word	0x0801a838
 800b174:	0801a63c 	.word	0x0801a63c
 800b178:	200452c0 	.word	0x200452c0
 800b17c:	0801a648 	.word	0x0801a648
 800b180:	0801a654 	.word	0x0801a654
 800b184:	0801a660 	.word	0x0801a660

	case 15:
		led.fullColor('W');
 800b188:	2157      	movs	r1, #87	; 0x57
 800b18a:	4849      	ldr	r0, [pc, #292]	; (800b2b0 <cppLoop+0x3080>)
 800b18c:	f7f6 ffe2 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800b190:	f7f5 ff86 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800b194:	2100      	movs	r1, #0
 800b196:	2000      	movs	r0, #0
 800b198:	f7f5 ff92 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800b19c:	4845      	ldr	r0, [pc, #276]	; (800b2b4 <cppLoop+0x3084>)
 800b19e:	f7f5 ffb9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	f7f5 ff8b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800b1aa:	4b43      	ldr	r3, [pc, #268]	; (800b2b8 <cppLoop+0x3088>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7f5 f9e2 	bl	8000578 <__aeabi_f2d>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	4623      	mov	r3, r4
 800b1bc:	483f      	ldr	r0, [pc, #252]	; (800b2bc <cppLoop+0x308c>)
 800b1be:	f7f5 ffa9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800b1c2:	483f      	ldr	r0, [pc, #252]	; (800b2c0 <cppLoop+0x3090>)
 800b1c4:	f7f6 ff62 	bl	800208c <_ZN8JoyStick8getValueEv>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	bf0c      	ite	eq
 800b1ce:	2301      	moveq	r3, #1
 800b1d0:	2300      	movne	r3, #0
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d063      	beq.n	800b2a0 <cppLoop+0x3070>
			HAL_Delay(500);
 800b1d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b1dc:	f000 f98c 	bl	800b4f8 <HAL_Delay>

			led.LR(1, -1);
 800b1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	4832      	ldr	r0, [pc, #200]	; (800b2b0 <cppLoop+0x3080>)
 800b1e8:	f7f7 f870 	bl	80022cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800b1ec:	2101      	movs	r1, #1
 800b1ee:	4835      	ldr	r0, [pc, #212]	; (800b2c4 <cppLoop+0x3094>)
 800b1f0:	f7f9 fa00 	bl	80045f4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 800b1f4:	4b34      	ldr	r3, [pc, #208]	; (800b2c8 <cppLoop+0x3098>)
 800b1f6:	edd3 7a00 	vldr	s15, [r3]
 800b1fa:	eeb0 0a67 	vmov.f32	s0, s15
 800b1fe:	4831      	ldr	r0, [pc, #196]	; (800b2c4 <cppLoop+0x3094>)
 800b200:	f7f8 ff19 	bl	8004036 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 800b204:	4b2c      	ldr	r3, [pc, #176]	; (800b2b8 <cppLoop+0x3088>)
 800b206:	edd3 7a00 	vldr	s15, [r3]
 800b20a:	eeb0 0a67 	vmov.f32	s0, s15
 800b20e:	482d      	ldr	r0, [pc, #180]	; (800b2c4 <cppLoop+0x3094>)
 800b210:	f7f8 ff21 	bl	8004056 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800b214:	4b2c      	ldr	r3, [pc, #176]	; (800b2c8 <cppLoop+0x3098>)
 800b216:	edd3 7a00 	vldr	s15, [r3]
 800b21a:	eeb0 0a67 	vmov.f32	s0, s15
 800b21e:	4829      	ldr	r0, [pc, #164]	; (800b2c4 <cppLoop+0x3094>)
 800b220:	f7f8 ff29 	bl	8004076 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800b224:	4827      	ldr	r0, [pc, #156]	; (800b2c4 <cppLoop+0x3094>)
 800b226:	f7f9 fd4d 	bl	8004cc4 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 800b22a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b22e:	f000 f963 	bl	800b4f8 <HAL_Delay>

			line_trace.running();
 800b232:	4824      	ldr	r0, [pc, #144]	; (800b2c4 <cppLoop+0x3094>)
 800b234:	f7f9 fa2e 	bl	8004694 <_ZN9LineTrace7runningEv>

			logger.stop();
 800b238:	4824      	ldr	r0, [pc, #144]	; (800b2cc <cppLoop+0x309c>)
 800b23a:	f7fa f96d 	bl	8005518 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800b23e:	4a24      	ldr	r2, [pc, #144]	; (800b2d0 <cppLoop+0x30a0>)
 800b240:	4924      	ldr	r1, [pc, #144]	; (800b2d4 <cppLoop+0x30a4>)
 800b242:	4822      	ldr	r0, [pc, #136]	; (800b2cc <cppLoop+0x309c>)
 800b244:	f7fa f801 	bl	800524a <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800b248:	4a23      	ldr	r2, [pc, #140]	; (800b2d8 <cppLoop+0x30a8>)
 800b24a:	4922      	ldr	r1, [pc, #136]	; (800b2d4 <cppLoop+0x30a4>)
 800b24c:	481f      	ldr	r0, [pc, #124]	; (800b2cc <cppLoop+0x309c>)
 800b24e:	f7fa f810 	bl	8005272 <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 800b252:	f04f 32ff 	mov.w	r2, #4294967295
 800b256:	2100      	movs	r1, #0
 800b258:	4815      	ldr	r0, [pc, #84]	; (800b2b0 <cppLoop+0x3080>)
 800b25a:	f7f7 f837 	bl	80022cc <_ZN3LED2LREaa>
		}

		break;
 800b25e:	e01f      	b.n	800b2a0 <cppLoop+0x3070>


	default:
		break;
 800b260:	bf00      	nop
 800b262:	e01e      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b264:	bf00      	nop
 800b266:	e01c      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b268:	bf00      	nop
 800b26a:	e01a      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b26c:	bf00      	nop
 800b26e:	e018      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b270:	bf00      	nop
 800b272:	e016      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b274:	bf00      	nop
 800b276:	e014      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b278:	bf00      	nop
 800b27a:	e012      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b27c:	bf00      	nop
 800b27e:	e010      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b280:	bf00      	nop
 800b282:	e00e      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b284:	bf00      	nop
 800b286:	e00c      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b288:	bf00      	nop
 800b28a:	e00a      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b28c:	bf00      	nop
 800b28e:	e008      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b290:	bf00      	nop
 800b292:	e006      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b294:	bf00      	nop
 800b296:	e004      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b298:	bf00      	nop
 800b29a:	e002      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b29c:	bf00      	nop
 800b29e:	e000      	b.n	800b2a2 <cppLoop+0x3072>
		break;
 800b2a0:	bf00      	nop

	}

	HAL_Delay(30);
 800b2a2:	201e      	movs	r0, #30
 800b2a4:	f000 f928 	bl	800b4f8 <HAL_Delay>

}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b0:	20000558 	.word	0x20000558
 800b2b4:	0801a844 	.word	0x0801a844
 800b2b8:	200452a8 	.word	0x200452a8
 800b2bc:	0801a63c 	.word	0x0801a63c
 800b2c0:	2000054c 	.word	0x2000054c
 800b2c4:	200209d4 	.word	0x200209d4
 800b2c8:	200452b0 	.word	0x200452b0
 800b2cc:	2000057c 	.word	0x2000057c
 800b2d0:	0801a648 	.word	0x0801a648
 800b2d4:	0801a654 	.word	0x0801a654
 800b2d8:	0801a660 	.word	0x0801a660

0800b2dc <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b088      	sub	sp, #32
 800b2e0:	af06      	add	r7, sp, #24
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d142      	bne.n	800b372 <_Z41__static_initialization_and_destruction_0ii+0x96>
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d13d      	bne.n	800b372 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 800b2f6:	4821      	ldr	r0, [pc, #132]	; (800b37c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800b2f8:	f7f7 f820 	bl	800233c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800b2fc:	4820      	ldr	r0, [pc, #128]	; (800b380 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800b2fe:	f7fa fc2f 	bl	8005b60 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800b302:	4820      	ldr	r0, [pc, #128]	; (800b384 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800b304:	f7f6 feb6 	bl	8002074 <_ZN8JoyStickC1Ev>
Motor motor;
 800b308:	481f      	ldr	r0, [pc, #124]	; (800b388 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b30a:	f7fa f916 	bl	800553a <_ZN5MotorC1Ev>
IMU imu;
 800b30e:	481f      	ldr	r0, [pc, #124]	; (800b38c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b310:	f7f6 fcbc 	bl	8001c8c <_ZN3IMUC1Ev>
Logger logger;
 800b314:	481e      	ldr	r0, [pc, #120]	; (800b390 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b316:	f7f9 fe17 	bl	8004f48 <_ZN6LoggerC1Ev>
Encoder encoder;
 800b31a:	481e      	ldr	r0, [pc, #120]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b31c:	f7f6 f856 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 800b320:	4b1a      	ldr	r3, [pc, #104]	; (800b38c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b322:	4a1c      	ldr	r2, [pc, #112]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b324:	4918      	ldr	r1, [pc, #96]	; (800b388 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b326:	481c      	ldr	r0, [pc, #112]	; (800b398 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b328:	f7fa ff14 	bl	8006154 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800b32c:	4b1a      	ldr	r3, [pc, #104]	; (800b398 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b32e:	4a17      	ldr	r2, [pc, #92]	; (800b38c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b330:	4918      	ldr	r1, [pc, #96]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b332:	481a      	ldr	r0, [pc, #104]	; (800b39c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b334:	f7fa f9e6 	bl	8005704 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 800b338:	4819      	ldr	r0, [pc, #100]	; (800b3a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b33a:	f7f5 ff4b 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 800b33e:	4b18      	ldr	r3, [pc, #96]	; (800b3a0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	4b12      	ldr	r3, [pc, #72]	; (800b38c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800b344:	9304      	str	r3, [sp, #16]
 800b346:	4b12      	ldr	r3, [pc, #72]	; (800b390 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b348:	9303      	str	r3, [sp, #12]
 800b34a:	4b14      	ldr	r3, [pc, #80]	; (800b39c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800b34c:	9302      	str	r3, [sp, #8]
 800b34e:	4b11      	ldr	r3, [pc, #68]	; (800b394 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	4b10      	ldr	r3, [pc, #64]	; (800b398 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800b358:	4a08      	ldr	r2, [pc, #32]	; (800b37c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800b35a:	490b      	ldr	r1, [pc, #44]	; (800b388 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b35c:	4811      	ldr	r0, [pc, #68]	; (800b3a4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800b35e:	f7f7 facb 	bl	80028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 800b362:	4a09      	ldr	r2, [pc, #36]	; (800b388 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800b364:	490a      	ldr	r1, [pc, #40]	; (800b390 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800b366:	4810      	ldr	r0, [pc, #64]	; (800b3a8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800b368:	f7fa fd2c 	bl	8005dc4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800b36c:	480f      	ldr	r0, [pc, #60]	; (800b3ac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800b36e:	f7fa fa87 	bl	8005880 <_ZN13PathFollowingC1Ev>
}
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000244 	.word	0x20000244
 800b380:	2000053c 	.word	0x2000053c
 800b384:	2000054c 	.word	0x2000054c
 800b388:	20000554 	.word	0x20000554
 800b38c:	20000568 	.word	0x20000568
 800b390:	2000057c 	.word	0x2000057c
 800b394:	20020928 	.word	0x20020928
 800b398:	20020950 	.word	0x20020950
 800b39c:	20020990 	.word	0x20020990
 800b3a0:	200209d0 	.word	0x200209d0
 800b3a4:	200209d4 	.word	0x200209d4
 800b3a8:	2002d934 	.word	0x2002d934
 800b3ac:	2002db40 	.word	0x2002db40

0800b3b0 <_GLOBAL__sub_I_line_sensor>:
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b3b8:	2001      	movs	r0, #1
 800b3ba:	f7ff ff8f 	bl	800b2dc <_Z41__static_initialization_and_destruction_0ii>
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b3c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b3f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b3c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b3c6:	e003      	b.n	800b3d0 <LoopCopyDataInit>

0800b3c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b3c8:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b3ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b3cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b3ce:	3104      	adds	r1, #4

0800b3d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b3d0:	480b      	ldr	r0, [pc, #44]	; (800b400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b3d2:	4b0c      	ldr	r3, [pc, #48]	; (800b404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b3d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b3d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b3d8:	d3f6      	bcc.n	800b3c8 <CopyDataInit>
  ldr  r2, =_sbss
 800b3da:	4a0b      	ldr	r2, [pc, #44]	; (800b408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b3dc:	e002      	b.n	800b3e4 <LoopFillZerobss>

0800b3de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b3de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b3e0:	f842 3b04 	str.w	r3, [r2], #4

0800b3e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b3e4:	4b09      	ldr	r3, [pc, #36]	; (800b40c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b3e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b3e8:	d3f9      	bcc.n	800b3de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b3ea:	f7fc fdf5 	bl	8007fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b3ee:	f00a fd95 	bl	8015f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b3f2:	f7fb f90d 	bl	8006610 <main>
  bx  lr    
 800b3f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b3f8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800b3fc:	0801ac60 	.word	0x0801ac60
  ldr  r0, =_sdata
 800b400:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b404:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800b408:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800b40c:	20049d08 	.word	0x20049d08

0800b410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b410:	e7fe      	b.n	800b410 <ADC_IRQHandler>
	...

0800b414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b418:	4b0e      	ldr	r3, [pc, #56]	; (800b454 <HAL_Init+0x40>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a0d      	ldr	r2, [pc, #52]	; (800b454 <HAL_Init+0x40>)
 800b41e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b424:	4b0b      	ldr	r3, [pc, #44]	; (800b454 <HAL_Init+0x40>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a0a      	ldr	r2, [pc, #40]	; (800b454 <HAL_Init+0x40>)
 800b42a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b42e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b430:	4b08      	ldr	r3, [pc, #32]	; (800b454 <HAL_Init+0x40>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a07      	ldr	r2, [pc, #28]	; (800b454 <HAL_Init+0x40>)
 800b436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b43a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b43c:	2003      	movs	r0, #3
 800b43e:	f000 fd51 	bl	800bee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b442:	2000      	movs	r0, #0
 800b444:	f000 f808 	bl	800b458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b448:	f7fc f806 	bl	8007458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	40023c00 	.word	0x40023c00

0800b458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b460:	4b12      	ldr	r3, [pc, #72]	; (800b4ac <HAL_InitTick+0x54>)
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	4b12      	ldr	r3, [pc, #72]	; (800b4b0 <HAL_InitTick+0x58>)
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	4619      	mov	r1, r3
 800b46a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b46e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b472:	fbb2 f3f3 	udiv	r3, r2, r3
 800b476:	4618      	mov	r0, r3
 800b478:	f000 fd69 	bl	800bf4e <HAL_SYSTICK_Config>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e00e      	b.n	800b4a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2b0f      	cmp	r3, #15
 800b48a:	d80a      	bhi.n	800b4a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b48c:	2200      	movs	r2, #0
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	f04f 30ff 	mov.w	r0, #4294967295
 800b494:	f000 fd31 	bl	800befa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b498:	4a06      	ldr	r2, [pc, #24]	; (800b4b4 <HAL_InitTick+0x5c>)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e000      	b.n	800b4a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20000000 	.word	0x20000000
 800b4b0:	20000008 	.word	0x20000008
 800b4b4:	20000004 	.word	0x20000004

0800b4b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b4bc:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <HAL_IncTick+0x20>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4b06      	ldr	r3, [pc, #24]	; (800b4dc <HAL_IncTick+0x24>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	4a04      	ldr	r2, [pc, #16]	; (800b4dc <HAL_IncTick+0x24>)
 800b4ca:	6013      	str	r3, [r2, #0]
}
 800b4cc:	bf00      	nop
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	20000008 	.word	0x20000008
 800b4dc:	20047c90 	.word	0x20047c90

0800b4e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	af00      	add	r7, sp, #0
  return uwTick;
 800b4e4:	4b03      	ldr	r3, [pc, #12]	; (800b4f4 <HAL_GetTick+0x14>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	20047c90 	.word	0x20047c90

0800b4f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b500:	f7ff ffee 	bl	800b4e0 <HAL_GetTick>
 800b504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b510:	d005      	beq.n	800b51e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <HAL_Delay+0x40>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4413      	add	r3, r2
 800b51c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b51e:	bf00      	nop
 800b520:	f7ff ffde 	bl	800b4e0 <HAL_GetTick>
 800b524:	4602      	mov	r2, r0
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	1ad3      	subs	r3, r2, r3
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d8f7      	bhi.n	800b520 <HAL_Delay+0x28>
  {
  }
}
 800b530:	bf00      	nop
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20000008 	.word	0x20000008

0800b53c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e033      	b.n	800b5ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b556:	2b00      	cmp	r3, #0
 800b558:	d109      	bne.n	800b56e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7fb ffa4 	bl	80074a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b572:	f003 0310 	and.w	r3, r3, #16
 800b576:	2b00      	cmp	r3, #0
 800b578:	d118      	bne.n	800b5ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b582:	f023 0302 	bic.w	r3, r3, #2
 800b586:	f043 0202 	orr.w	r2, r3, #2
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 fa5a 	bl	800ba48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59e:	f023 0303 	bic.w	r3, r3, #3
 800b5a2:	f043 0201 	orr.w	r2, r3, #1
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	641a      	str	r2, [r3, #64]	; 0x40
 800b5aa:	e001      	b.n	800b5b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
	...

0800b5c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d101      	bne.n	800b5e2 <HAL_ADC_Start_DMA+0x1e>
 800b5de:	2302      	movs	r3, #2
 800b5e0:	e0cc      	b.n	800b77c <HAL_ADC_Start_DMA+0x1b8>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d018      	beq.n	800b62a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f042 0201 	orr.w	r2, r2, #1
 800b606:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b608:	4b5e      	ldr	r3, [pc, #376]	; (800b784 <HAL_ADC_Start_DMA+0x1c0>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a5e      	ldr	r2, [pc, #376]	; (800b788 <HAL_ADC_Start_DMA+0x1c4>)
 800b60e:	fba2 2303 	umull	r2, r3, r2, r3
 800b612:	0c9a      	lsrs	r2, r3, #18
 800b614:	4613      	mov	r3, r2
 800b616:	005b      	lsls	r3, r3, #1
 800b618:	4413      	add	r3, r2
 800b61a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b61c:	e002      	b.n	800b624 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	3b01      	subs	r3, #1
 800b622:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1f9      	bne.n	800b61e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b01      	cmp	r3, #1
 800b636:	f040 80a0 	bne.w	800b77a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b642:	f023 0301 	bic.w	r3, r3, #1
 800b646:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d007      	beq.n	800b66c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b660:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b664:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b678:	d106      	bne.n	800b688 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b67e:	f023 0206 	bic.w	r2, r3, #6
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	645a      	str	r2, [r3, #68]	; 0x44
 800b686:	e002      	b.n	800b68e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b696:	4b3d      	ldr	r3, [pc, #244]	; (800b78c <HAL_ADC_Start_DMA+0x1c8>)
 800b698:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69e:	4a3c      	ldr	r2, [pc, #240]	; (800b790 <HAL_ADC_Start_DMA+0x1cc>)
 800b6a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a6:	4a3b      	ldr	r2, [pc, #236]	; (800b794 <HAL_ADC_Start_DMA+0x1d0>)
 800b6a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ae:	4a3a      	ldr	r2, [pc, #232]	; (800b798 <HAL_ADC_Start_DMA+0x1d4>)
 800b6b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800b6ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	685a      	ldr	r2, [r3, #4]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b6ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689a      	ldr	r2, [r3, #8]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	334c      	adds	r3, #76	; 0x4c
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f000 fcea 	bl	800c0c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	f003 031f 	and.w	r3, r3, #31
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d12a      	bne.n	800b752 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a26      	ldr	r2, [pc, #152]	; (800b79c <HAL_ADC_Start_DMA+0x1d8>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d015      	beq.n	800b732 <HAL_ADC_Start_DMA+0x16e>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a25      	ldr	r2, [pc, #148]	; (800b7a0 <HAL_ADC_Start_DMA+0x1dc>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d105      	bne.n	800b71c <HAL_ADC_Start_DMA+0x158>
 800b710:	4b1e      	ldr	r3, [pc, #120]	; (800b78c <HAL_ADC_Start_DMA+0x1c8>)
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	f003 031f 	and.w	r3, r3, #31
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00a      	beq.n	800b732 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a20      	ldr	r2, [pc, #128]	; (800b7a4 <HAL_ADC_Start_DMA+0x1e0>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d129      	bne.n	800b77a <HAL_ADC_Start_DMA+0x1b6>
 800b726:	4b19      	ldr	r3, [pc, #100]	; (800b78c <HAL_ADC_Start_DMA+0x1c8>)
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	f003 031f 	and.w	r3, r3, #31
 800b72e:	2b0f      	cmp	r3, #15
 800b730:	d823      	bhi.n	800b77a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d11c      	bne.n	800b77a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689a      	ldr	r2, [r3, #8]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b74e:	609a      	str	r2, [r3, #8]
 800b750:	e013      	b.n	800b77a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a11      	ldr	r2, [pc, #68]	; (800b79c <HAL_ADC_Start_DMA+0x1d8>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d10e      	bne.n	800b77a <HAL_ADC_Start_DMA+0x1b6>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b766:	2b00      	cmp	r3, #0
 800b768:	d107      	bne.n	800b77a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	689a      	ldr	r2, [r3, #8]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800b778:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20000000 	.word	0x20000000
 800b788:	431bde83 	.word	0x431bde83
 800b78c:	40012300 	.word	0x40012300
 800b790:	0800bc41 	.word	0x0800bc41
 800b794:	0800bcfb 	.word	0x0800bcfb
 800b798:	0800bd17 	.word	0x0800bd17
 800b79c:	40012000 	.word	0x40012000
 800b7a0:	40012100 	.word	0x40012100
 800b7a4:	40012200 	.word	0x40012200

0800b7a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d101      	bne.n	800b800 <HAL_ADC_ConfigChannel+0x1c>
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e113      	b.n	800ba28 <HAL_ADC_ConfigChannel+0x244>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b09      	cmp	r3, #9
 800b80e:	d925      	bls.n	800b85c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68d9      	ldr	r1, [r3, #12]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	461a      	mov	r2, r3
 800b81e:	4613      	mov	r3, r2
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	4413      	add	r3, r2
 800b824:	3b1e      	subs	r3, #30
 800b826:	2207      	movs	r2, #7
 800b828:	fa02 f303 	lsl.w	r3, r2, r3
 800b82c:	43da      	mvns	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	400a      	ands	r2, r1
 800b834:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68d9      	ldr	r1, [r3, #12]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	689a      	ldr	r2, [r3, #8]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	b29b      	uxth	r3, r3
 800b846:	4618      	mov	r0, r3
 800b848:	4603      	mov	r3, r0
 800b84a:	005b      	lsls	r3, r3, #1
 800b84c:	4403      	add	r3, r0
 800b84e:	3b1e      	subs	r3, #30
 800b850:	409a      	lsls	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	430a      	orrs	r2, r1
 800b858:	60da      	str	r2, [r3, #12]
 800b85a:	e022      	b.n	800b8a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6919      	ldr	r1, [r3, #16]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	b29b      	uxth	r3, r3
 800b868:	461a      	mov	r2, r3
 800b86a:	4613      	mov	r3, r2
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	4413      	add	r3, r2
 800b870:	2207      	movs	r2, #7
 800b872:	fa02 f303 	lsl.w	r3, r2, r3
 800b876:	43da      	mvns	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	400a      	ands	r2, r1
 800b87e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6919      	ldr	r1, [r3, #16]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	689a      	ldr	r2, [r3, #8]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	b29b      	uxth	r3, r3
 800b890:	4618      	mov	r0, r3
 800b892:	4603      	mov	r3, r0
 800b894:	005b      	lsls	r3, r3, #1
 800b896:	4403      	add	r3, r0
 800b898:	409a      	lsls	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	2b06      	cmp	r3, #6
 800b8a8:	d824      	bhi.n	800b8f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	685a      	ldr	r2, [r3, #4]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	3b05      	subs	r3, #5
 800b8bc:	221f      	movs	r2, #31
 800b8be:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c2:	43da      	mvns	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	400a      	ands	r2, r1
 800b8ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	4618      	mov	r0, r3
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	3b05      	subs	r3, #5
 800b8e6:	fa00 f203 	lsl.w	r2, r0, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	635a      	str	r2, [r3, #52]	; 0x34
 800b8f2:	e04c      	b.n	800b98e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	2b0c      	cmp	r3, #12
 800b8fa:	d824      	bhi.n	800b946 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	3b23      	subs	r3, #35	; 0x23
 800b90e:	221f      	movs	r2, #31
 800b910:	fa02 f303 	lsl.w	r3, r2, r3
 800b914:	43da      	mvns	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	400a      	ands	r2, r1
 800b91c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	b29b      	uxth	r3, r3
 800b92a:	4618      	mov	r0, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	685a      	ldr	r2, [r3, #4]
 800b930:	4613      	mov	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	4413      	add	r3, r2
 800b936:	3b23      	subs	r3, #35	; 0x23
 800b938:	fa00 f203 	lsl.w	r2, r0, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	430a      	orrs	r2, r1
 800b942:	631a      	str	r2, [r3, #48]	; 0x30
 800b944:	e023      	b.n	800b98e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	4613      	mov	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4413      	add	r3, r2
 800b956:	3b41      	subs	r3, #65	; 0x41
 800b958:	221f      	movs	r2, #31
 800b95a:	fa02 f303 	lsl.w	r3, r2, r3
 800b95e:	43da      	mvns	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	400a      	ands	r2, r1
 800b966:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	b29b      	uxth	r3, r3
 800b974:	4618      	mov	r0, r3
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	685a      	ldr	r2, [r3, #4]
 800b97a:	4613      	mov	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4413      	add	r3, r2
 800b980:	3b41      	subs	r3, #65	; 0x41
 800b982:	fa00 f203 	lsl.w	r2, r0, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800b98e:	4b29      	ldr	r3, [pc, #164]	; (800ba34 <HAL_ADC_ConfigChannel+0x250>)
 800b990:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a28      	ldr	r2, [pc, #160]	; (800ba38 <HAL_ADC_ConfigChannel+0x254>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d10f      	bne.n	800b9bc <HAL_ADC_ConfigChannel+0x1d8>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b12      	cmp	r3, #18
 800b9a2:	d10b      	bne.n	800b9bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a1d      	ldr	r2, [pc, #116]	; (800ba38 <HAL_ADC_ConfigChannel+0x254>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d12b      	bne.n	800ba1e <HAL_ADC_ConfigChannel+0x23a>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a1c      	ldr	r2, [pc, #112]	; (800ba3c <HAL_ADC_ConfigChannel+0x258>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d003      	beq.n	800b9d8 <HAL_ADC_ConfigChannel+0x1f4>
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b11      	cmp	r3, #17
 800b9d6:	d122      	bne.n	800ba1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a11      	ldr	r2, [pc, #68]	; (800ba3c <HAL_ADC_ConfigChannel+0x258>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d111      	bne.n	800ba1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b9fa:	4b11      	ldr	r3, [pc, #68]	; (800ba40 <HAL_ADC_ConfigChannel+0x25c>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a11      	ldr	r2, [pc, #68]	; (800ba44 <HAL_ADC_ConfigChannel+0x260>)
 800ba00:	fba2 2303 	umull	r2, r3, r2, r3
 800ba04:	0c9a      	lsrs	r2, r3, #18
 800ba06:	4613      	mov	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ba10:	e002      	b.n	800ba18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1f9      	bne.n	800ba12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	40012300 	.word	0x40012300
 800ba38:	40012000 	.word	0x40012000
 800ba3c:	10000012 	.word	0x10000012
 800ba40:	20000000 	.word	0x20000000
 800ba44:	431bde83 	.word	0x431bde83

0800ba48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ba50:	4b79      	ldr	r3, [pc, #484]	; (800bc38 <ADC_Init+0x1f0>)
 800ba52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	685a      	ldr	r2, [r3, #4]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	431a      	orrs	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	685a      	ldr	r2, [r3, #4]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	6859      	ldr	r1, [r3, #4]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	021a      	lsls	r2, r3, #8
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	430a      	orrs	r2, r1
 800ba90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800baa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	6859      	ldr	r1, [r3, #4]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	689a      	ldr	r2, [r3, #8]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	430a      	orrs	r2, r1
 800bab2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	689a      	ldr	r2, [r3, #8]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6899      	ldr	r1, [r3, #8]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68da      	ldr	r2, [r3, #12]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bada:	4a58      	ldr	r2, [pc, #352]	; (800bc3c <ADC_Init+0x1f4>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d022      	beq.n	800bb26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689a      	ldr	r2, [r3, #8]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800baee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6899      	ldr	r1, [r3, #8]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	430a      	orrs	r2, r1
 800bb00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689a      	ldr	r2, [r3, #8]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bb10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6899      	ldr	r1, [r3, #8]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	430a      	orrs	r2, r1
 800bb22:	609a      	str	r2, [r3, #8]
 800bb24:	e00f      	b.n	800bb46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	689a      	ldr	r2, [r3, #8]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bb34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	689a      	ldr	r2, [r3, #8]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bb44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f022 0202 	bic.w	r2, r2, #2
 800bb54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6899      	ldr	r1, [r3, #8]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	7e1b      	ldrb	r3, [r3, #24]
 800bb60:	005a      	lsls	r2, r3, #1
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	430a      	orrs	r2, r1
 800bb68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d01b      	beq.n	800bbac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	685a      	ldr	r2, [r3, #4]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	685a      	ldr	r2, [r3, #4]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800bb92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6859      	ldr	r1, [r3, #4]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	035a      	lsls	r2, r3, #13
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	605a      	str	r2, [r3, #4]
 800bbaa:	e007      	b.n	800bbbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800bbca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	69db      	ldr	r3, [r3, #28]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	051a      	lsls	r2, r3, #20
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	430a      	orrs	r2, r1
 800bbe0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	689a      	ldr	r2, [r3, #8]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800bbf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	6899      	ldr	r1, [r3, #8]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbfe:	025a      	lsls	r2, r3, #9
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	430a      	orrs	r2, r1
 800bc06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689a      	ldr	r2, [r3, #8]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6899      	ldr	r1, [r3, #8]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	695b      	ldr	r3, [r3, #20]
 800bc22:	029a      	lsls	r2, r3, #10
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	430a      	orrs	r2, r1
 800bc2a:	609a      	str	r2, [r3, #8]
}
 800bc2c:	bf00      	nop
 800bc2e:	3714      	adds	r7, #20
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	40012300 	.word	0x40012300
 800bc3c:	0f000001 	.word	0x0f000001

0800bc40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d13c      	bne.n	800bcd4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d12b      	bne.n	800bccc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d127      	bne.n	800bccc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d006      	beq.n	800bc98 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d119      	bne.n	800bccc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f022 0220 	bic.w	r2, r2, #32
 800bca6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d105      	bne.n	800bccc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc4:	f043 0201 	orr.w	r2, r3, #1
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f7ff fd6b 	bl	800b7a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800bcd2:	e00e      	b.n	800bcf2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd8:	f003 0310 	and.w	r3, r3, #16
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d003      	beq.n	800bce8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f7ff fd75 	bl	800b7d0 <HAL_ADC_ErrorCallback>
}
 800bce6:	e004      	b.n	800bcf2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	4798      	blx	r3
}
 800bcf2:	bf00      	nop
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f7ff fd57 	bl	800b7bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bd0e:	bf00      	nop
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b084      	sub	sp, #16
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2240      	movs	r2, #64	; 0x40
 800bd28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd2e:	f043 0204 	orr.w	r2, r3, #4
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800bd36:	68f8      	ldr	r0, [r7, #12]
 800bd38:	f7ff fd4a 	bl	800b7d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800bd3c:	bf00      	nop
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f003 0307 	and.w	r3, r3, #7
 800bd52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bd54:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <__NVIC_SetPriorityGrouping+0x44>)
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bd60:	4013      	ands	r3, r2
 800bd62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bd6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bd70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bd76:	4a04      	ldr	r2, [pc, #16]	; (800bd88 <__NVIC_SetPriorityGrouping+0x44>)
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	60d3      	str	r3, [r2, #12]
}
 800bd7c:	bf00      	nop
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	e000ed00 	.word	0xe000ed00

0800bd8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bd90:	4b04      	ldr	r3, [pc, #16]	; (800bda4 <__NVIC_GetPriorityGrouping+0x18>)
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	0a1b      	lsrs	r3, r3, #8
 800bd96:	f003 0307 	and.w	r3, r3, #7
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr
 800bda4:	e000ed00 	.word	0xe000ed00

0800bda8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	db0b      	blt.n	800bdd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bdba:	79fb      	ldrb	r3, [r7, #7]
 800bdbc:	f003 021f 	and.w	r2, r3, #31
 800bdc0:	4907      	ldr	r1, [pc, #28]	; (800bde0 <__NVIC_EnableIRQ+0x38>)
 800bdc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdc6:	095b      	lsrs	r3, r3, #5
 800bdc8:	2001      	movs	r0, #1
 800bdca:	fa00 f202 	lsl.w	r2, r0, r2
 800bdce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bdd2:	bf00      	nop
 800bdd4:	370c      	adds	r7, #12
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	e000e100 	.word	0xe000e100

0800bde4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	6039      	str	r1, [r7, #0]
 800bdee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	db0a      	blt.n	800be0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	490c      	ldr	r1, [pc, #48]	; (800be30 <__NVIC_SetPriority+0x4c>)
 800bdfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be02:	0112      	lsls	r2, r2, #4
 800be04:	b2d2      	uxtb	r2, r2
 800be06:	440b      	add	r3, r1
 800be08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800be0c:	e00a      	b.n	800be24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	b2da      	uxtb	r2, r3
 800be12:	4908      	ldr	r1, [pc, #32]	; (800be34 <__NVIC_SetPriority+0x50>)
 800be14:	79fb      	ldrb	r3, [r7, #7]
 800be16:	f003 030f 	and.w	r3, r3, #15
 800be1a:	3b04      	subs	r3, #4
 800be1c:	0112      	lsls	r2, r2, #4
 800be1e:	b2d2      	uxtb	r2, r2
 800be20:	440b      	add	r3, r1
 800be22:	761a      	strb	r2, [r3, #24]
}
 800be24:	bf00      	nop
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr
 800be30:	e000e100 	.word	0xe000e100
 800be34:	e000ed00 	.word	0xe000ed00

0800be38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be38:	b480      	push	{r7}
 800be3a:	b089      	sub	sp, #36	; 0x24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f003 0307 	and.w	r3, r3, #7
 800be4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	f1c3 0307 	rsb	r3, r3, #7
 800be52:	2b04      	cmp	r3, #4
 800be54:	bf28      	it	cs
 800be56:	2304      	movcs	r3, #4
 800be58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	3304      	adds	r3, #4
 800be5e:	2b06      	cmp	r3, #6
 800be60:	d902      	bls.n	800be68 <NVIC_EncodePriority+0x30>
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	3b03      	subs	r3, #3
 800be66:	e000      	b.n	800be6a <NVIC_EncodePriority+0x32>
 800be68:	2300      	movs	r3, #0
 800be6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be6c:	f04f 32ff 	mov.w	r2, #4294967295
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	fa02 f303 	lsl.w	r3, r2, r3
 800be76:	43da      	mvns	r2, r3
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	401a      	ands	r2, r3
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800be80:	f04f 31ff 	mov.w	r1, #4294967295
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	fa01 f303 	lsl.w	r3, r1, r3
 800be8a:	43d9      	mvns	r1, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be90:	4313      	orrs	r3, r2
         );
}
 800be92:	4618      	mov	r0, r3
 800be94:	3724      	adds	r7, #36	; 0x24
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
	...

0800bea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	3b01      	subs	r3, #1
 800beac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800beb0:	d301      	bcc.n	800beb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800beb2:	2301      	movs	r3, #1
 800beb4:	e00f      	b.n	800bed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800beb6:	4a0a      	ldr	r2, [pc, #40]	; (800bee0 <SysTick_Config+0x40>)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	3b01      	subs	r3, #1
 800bebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bebe:	210f      	movs	r1, #15
 800bec0:	f04f 30ff 	mov.w	r0, #4294967295
 800bec4:	f7ff ff8e 	bl	800bde4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bec8:	4b05      	ldr	r3, [pc, #20]	; (800bee0 <SysTick_Config+0x40>)
 800beca:	2200      	movs	r2, #0
 800becc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bece:	4b04      	ldr	r3, [pc, #16]	; (800bee0 <SysTick_Config+0x40>)
 800bed0:	2207      	movs	r2, #7
 800bed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	e000e010 	.word	0xe000e010

0800bee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff ff29 	bl	800bd44 <__NVIC_SetPriorityGrouping>
}
 800bef2:	bf00      	nop
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800befa:	b580      	push	{r7, lr}
 800befc:	b086      	sub	sp, #24
 800befe:	af00      	add	r7, sp, #0
 800bf00:	4603      	mov	r3, r0
 800bf02:	60b9      	str	r1, [r7, #8]
 800bf04:	607a      	str	r2, [r7, #4]
 800bf06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bf0c:	f7ff ff3e 	bl	800bd8c <__NVIC_GetPriorityGrouping>
 800bf10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	68b9      	ldr	r1, [r7, #8]
 800bf16:	6978      	ldr	r0, [r7, #20]
 800bf18:	f7ff ff8e 	bl	800be38 <NVIC_EncodePriority>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf22:	4611      	mov	r1, r2
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff ff5d 	bl	800bde4 <__NVIC_SetPriority>
}
 800bf2a:	bf00      	nop
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b082      	sub	sp, #8
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	4603      	mov	r3, r0
 800bf3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bf3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7ff ff31 	bl	800bda8 <__NVIC_EnableIRQ>
}
 800bf46:	bf00      	nop
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b082      	sub	sp, #8
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff ffa2 	bl	800bea0 <SysTick_Config>
 800bf5c:	4603      	mov	r3, r0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
	...

0800bf68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b086      	sub	sp, #24
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bf70:	2300      	movs	r3, #0
 800bf72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bf74:	f7ff fab4 	bl	800b4e0 <HAL_GetTick>
 800bf78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d101      	bne.n	800bf84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bf80:	2301      	movs	r3, #1
 800bf82:	e099      	b.n	800c0b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f022 0201 	bic.w	r2, r2, #1
 800bfa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bfa4:	e00f      	b.n	800bfc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bfa6:	f7ff fa9b 	bl	800b4e0 <HAL_GetTick>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	2b05      	cmp	r3, #5
 800bfb2:	d908      	bls.n	800bfc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	e078      	b.n	800c0b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 0301 	and.w	r3, r3, #1
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e8      	bne.n	800bfa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	4b38      	ldr	r3, [pc, #224]	; (800c0c0 <HAL_DMA_Init+0x158>)
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	699b      	ldr	r3, [r3, #24]
 800c004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c00a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a1b      	ldr	r3, [r3, #32]
 800c010:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	4313      	orrs	r3, r2
 800c016:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	2b04      	cmp	r3, #4
 800c01e:	d107      	bne.n	800c030 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c028:	4313      	orrs	r3, r2
 800c02a:	697a      	ldr	r2, [r7, #20]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	697a      	ldr	r2, [r7, #20]
 800c036:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	f023 0307 	bic.w	r3, r3, #7
 800c046:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	4313      	orrs	r3, r2
 800c050:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c056:	2b04      	cmp	r3, #4
 800c058:	d117      	bne.n	800c08a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c05e:	697a      	ldr	r2, [r7, #20]
 800c060:	4313      	orrs	r3, r2
 800c062:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00e      	beq.n	800c08a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fa9d 	bl	800c5ac <DMA_CheckFifoParam>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d008      	beq.n	800c08a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2240      	movs	r2, #64	; 0x40
 800c07c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2201      	movs	r2, #1
 800c082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c086:	2301      	movs	r3, #1
 800c088:	e016      	b.n	800c0b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fa54 	bl	800c540 <DMA_CalcBaseAndBitshift>
 800c098:	4603      	mov	r3, r0
 800c09a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0a0:	223f      	movs	r2, #63	; 0x3f
 800c0a2:	409a      	lsls	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3718      	adds	r7, #24
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	f010803f 	.word	0xf010803f

0800c0c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
 800c0d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d101      	bne.n	800c0ea <HAL_DMA_Start_IT+0x26>
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	e040      	b.n	800c16c <HAL_DMA_Start_IT+0xa8>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d12f      	bne.n	800c15e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2202      	movs	r2, #2
 800c102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	68b9      	ldr	r1, [r7, #8]
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f000 f9e6 	bl	800c4e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c11c:	223f      	movs	r2, #63	; 0x3f
 800c11e:	409a      	lsls	r2, r3
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f042 0216 	orr.w	r2, r2, #22
 800c132:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d007      	beq.n	800c14c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f042 0208 	orr.w	r2, r2, #8
 800c14a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f042 0201 	orr.w	r2, r2, #1
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	e005      	b.n	800c16a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c166:	2302      	movs	r3, #2
 800c168:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3718      	adds	r7, #24
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b02      	cmp	r3, #2
 800c186:	d004      	beq.n	800c192 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2280      	movs	r2, #128	; 0x80
 800c18c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	e00c      	b.n	800c1ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2205      	movs	r2, #5
 800c196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f022 0201 	bic.w	r2, r2, #1
 800c1a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c1c4:	4b92      	ldr	r3, [pc, #584]	; (800c410 <HAL_DMA_IRQHandler+0x258>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a92      	ldr	r2, [pc, #584]	; (800c414 <HAL_DMA_IRQHandler+0x25c>)
 800c1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ce:	0a9b      	lsrs	r3, r3, #10
 800c1d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1e2:	2208      	movs	r2, #8
 800c1e4:	409a      	lsls	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d01a      	beq.n	800c224 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 0304 	and.w	r3, r3, #4
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d013      	beq.n	800c224 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f022 0204 	bic.w	r2, r2, #4
 800c20a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c210:	2208      	movs	r2, #8
 800c212:	409a      	lsls	r2, r3
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c21c:	f043 0201 	orr.w	r2, r3, #1
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c228:	2201      	movs	r2, #1
 800c22a:	409a      	lsls	r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4013      	ands	r3, r2
 800c230:	2b00      	cmp	r3, #0
 800c232:	d012      	beq.n	800c25a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00b      	beq.n	800c25a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c246:	2201      	movs	r2, #1
 800c248:	409a      	lsls	r2, r3
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c252:	f043 0202 	orr.w	r2, r3, #2
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c25e:	2204      	movs	r2, #4
 800c260:	409a      	lsls	r2, r3
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	4013      	ands	r3, r2
 800c266:	2b00      	cmp	r3, #0
 800c268:	d012      	beq.n	800c290 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 0302 	and.w	r3, r3, #2
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00b      	beq.n	800c290 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c27c:	2204      	movs	r2, #4
 800c27e:	409a      	lsls	r2, r3
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c288:	f043 0204 	orr.w	r2, r3, #4
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c294:	2210      	movs	r2, #16
 800c296:	409a      	lsls	r2, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	4013      	ands	r3, r2
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d043      	beq.n	800c328 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 0308 	and.w	r3, r3, #8
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d03c      	beq.n	800c328 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2b2:	2210      	movs	r2, #16
 800c2b4:	409a      	lsls	r2, r3
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d018      	beq.n	800c2fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d108      	bne.n	800c2e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d024      	beq.n	800c328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	4798      	blx	r3
 800c2e6:	e01f      	b.n	800c328 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d01b      	beq.n	800c328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	4798      	blx	r3
 800c2f8:	e016      	b.n	800c328 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c304:	2b00      	cmp	r3, #0
 800c306:	d107      	bne.n	800c318 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f022 0208 	bic.w	r2, r2, #8
 800c316:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d003      	beq.n	800c328 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c32c:	2220      	movs	r2, #32
 800c32e:	409a      	lsls	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4013      	ands	r3, r2
 800c334:	2b00      	cmp	r3, #0
 800c336:	f000 808e 	beq.w	800c456 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 0310 	and.w	r3, r3, #16
 800c344:	2b00      	cmp	r3, #0
 800c346:	f000 8086 	beq.w	800c456 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c34e:	2220      	movs	r2, #32
 800c350:	409a      	lsls	r2, r3
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	2b05      	cmp	r3, #5
 800c360:	d136      	bne.n	800c3d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f022 0216 	bic.w	r2, r2, #22
 800c370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	695a      	ldr	r2, [r3, #20]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c380:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c386:	2b00      	cmp	r3, #0
 800c388:	d103      	bne.n	800c392 <HAL_DMA_IRQHandler+0x1da>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d007      	beq.n	800c3a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0208 	bic.w	r2, r2, #8
 800c3a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3a6:	223f      	movs	r2, #63	; 0x3f
 800c3a8:	409a      	lsls	r2, r3
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d07d      	beq.n	800c4c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	4798      	blx	r3
        }
        return;
 800c3ce:	e078      	b.n	800c4c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d01c      	beq.n	800c418 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d108      	bne.n	800c3fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d030      	beq.n	800c456 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	4798      	blx	r3
 800c3fc:	e02b      	b.n	800c456 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c402:	2b00      	cmp	r3, #0
 800c404:	d027      	beq.n	800c456 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	4798      	blx	r3
 800c40e:	e022      	b.n	800c456 <HAL_DMA_IRQHandler+0x29e>
 800c410:	20000000 	.word	0x20000000
 800c414:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10f      	bne.n	800c446 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f022 0210 	bic.w	r2, r2, #16
 800c434:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d003      	beq.n	800c456 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d032      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c462:	f003 0301 	and.w	r3, r3, #1
 800c466:	2b00      	cmp	r3, #0
 800c468:	d022      	beq.n	800c4b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2205      	movs	r2, #5
 800c46e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f022 0201 	bic.w	r2, r2, #1
 800c480:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	3301      	adds	r3, #1
 800c486:	60bb      	str	r3, [r7, #8]
 800c488:	697a      	ldr	r2, [r7, #20]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d307      	bcc.n	800c49e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1f2      	bne.n	800c482 <HAL_DMA_IRQHandler+0x2ca>
 800c49c:	e000      	b.n	800c4a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c49e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d005      	beq.n	800c4c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	4798      	blx	r3
 800c4c0:	e000      	b.n	800c4c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c4c2:	bf00      	nop
    }
  }
}
 800c4c4:	3718      	adds	r7, #24
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop

0800c4cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
 800c4f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c500:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	2b40      	cmp	r3, #64	; 0x40
 800c510:	d108      	bne.n	800c524 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c522:	e007      	b.n	800c534 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	60da      	str	r2, [r3, #12]
}
 800c534:	bf00      	nop
 800c536:	3714      	adds	r7, #20
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	3b10      	subs	r3, #16
 800c550:	4a14      	ldr	r2, [pc, #80]	; (800c5a4 <DMA_CalcBaseAndBitshift+0x64>)
 800c552:	fba2 2303 	umull	r2, r3, r2, r3
 800c556:	091b      	lsrs	r3, r3, #4
 800c558:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c55a:	4a13      	ldr	r2, [pc, #76]	; (800c5a8 <DMA_CalcBaseAndBitshift+0x68>)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4413      	add	r3, r2
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	461a      	mov	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2b03      	cmp	r3, #3
 800c56c:	d909      	bls.n	800c582 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c576:	f023 0303 	bic.w	r3, r3, #3
 800c57a:	1d1a      	adds	r2, r3, #4
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	659a      	str	r2, [r3, #88]	; 0x58
 800c580:	e007      	b.n	800c592 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c58a:	f023 0303 	bic.w	r3, r3, #3
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c596:	4618      	mov	r0, r3
 800c598:	3714      	adds	r7, #20
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	aaaaaaab 	.word	0xaaaaaaab
 800c5a8:	0801a884 	.word	0x0801a884

0800c5ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d11f      	bne.n	800c606 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2b03      	cmp	r3, #3
 800c5ca:	d855      	bhi.n	800c678 <DMA_CheckFifoParam+0xcc>
 800c5cc:	a201      	add	r2, pc, #4	; (adr r2, 800c5d4 <DMA_CheckFifoParam+0x28>)
 800c5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d2:	bf00      	nop
 800c5d4:	0800c5e5 	.word	0x0800c5e5
 800c5d8:	0800c5f7 	.word	0x0800c5f7
 800c5dc:	0800c5e5 	.word	0x0800c5e5
 800c5e0:	0800c679 	.word	0x0800c679
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d045      	beq.n	800c67c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5f4:	e042      	b.n	800c67c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c5fe:	d13f      	bne.n	800c680 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c604:	e03c      	b.n	800c680 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c60e:	d121      	bne.n	800c654 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2b03      	cmp	r3, #3
 800c614:	d836      	bhi.n	800c684 <DMA_CheckFifoParam+0xd8>
 800c616:	a201      	add	r2, pc, #4	; (adr r2, 800c61c <DMA_CheckFifoParam+0x70>)
 800c618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61c:	0800c62d 	.word	0x0800c62d
 800c620:	0800c633 	.word	0x0800c633
 800c624:	0800c62d 	.word	0x0800c62d
 800c628:	0800c645 	.word	0x0800c645
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	73fb      	strb	r3, [r7, #15]
      break;
 800c630:	e02f      	b.n	800c692 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d024      	beq.n	800c688 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c642:	e021      	b.n	800c688 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c648:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c64c:	d11e      	bne.n	800c68c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
 800c650:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c652:	e01b      	b.n	800c68c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	2b02      	cmp	r3, #2
 800c658:	d902      	bls.n	800c660 <DMA_CheckFifoParam+0xb4>
 800c65a:	2b03      	cmp	r3, #3
 800c65c:	d003      	beq.n	800c666 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c65e:	e018      	b.n	800c692 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	73fb      	strb	r3, [r7, #15]
      break;
 800c664:	e015      	b.n	800c692 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00e      	beq.n	800c690 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	73fb      	strb	r3, [r7, #15]
      break;
 800c676:	e00b      	b.n	800c690 <DMA_CheckFifoParam+0xe4>
      break;
 800c678:	bf00      	nop
 800c67a:	e00a      	b.n	800c692 <DMA_CheckFifoParam+0xe6>
      break;
 800c67c:	bf00      	nop
 800c67e:	e008      	b.n	800c692 <DMA_CheckFifoParam+0xe6>
      break;
 800c680:	bf00      	nop
 800c682:	e006      	b.n	800c692 <DMA_CheckFifoParam+0xe6>
      break;
 800c684:	bf00      	nop
 800c686:	e004      	b.n	800c692 <DMA_CheckFifoParam+0xe6>
      break;
 800c688:	bf00      	nop
 800c68a:	e002      	b.n	800c692 <DMA_CheckFifoParam+0xe6>
      break;   
 800c68c:	bf00      	nop
 800c68e:	e000      	b.n	800c692 <DMA_CheckFifoParam+0xe6>
      break;
 800c690:	bf00      	nop
    }
  } 
  
  return status; 
 800c692:	7bfb      	ldrb	r3, [r7, #15]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b089      	sub	sp, #36	; 0x24
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	61fb      	str	r3, [r7, #28]
 800c6ba:	e177      	b.n	800c9ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c6bc:	2201      	movs	r2, #1
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	697a      	ldr	r2, [r7, #20]
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	f040 8166 	bne.w	800c9a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d00b      	beq.n	800c6fa <HAL_GPIO_Init+0x5a>
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d007      	beq.n	800c6fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c6ee:	2b11      	cmp	r3, #17
 800c6f0:	d003      	beq.n	800c6fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	2b12      	cmp	r3, #18
 800c6f8:	d130      	bne.n	800c75c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	2203      	movs	r2, #3
 800c706:	fa02 f303 	lsl.w	r3, r2, r3
 800c70a:	43db      	mvns	r3, r3
 800c70c:	69ba      	ldr	r2, [r7, #24]
 800c70e:	4013      	ands	r3, r2
 800c710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	68da      	ldr	r2, [r3, #12]
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	fa02 f303 	lsl.w	r3, r2, r3
 800c71e:	69ba      	ldr	r2, [r7, #24]
 800c720:	4313      	orrs	r3, r2
 800c722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	69ba      	ldr	r2, [r7, #24]
 800c728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c730:	2201      	movs	r2, #1
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	fa02 f303 	lsl.w	r3, r2, r3
 800c738:	43db      	mvns	r3, r3
 800c73a:	69ba      	ldr	r2, [r7, #24]
 800c73c:	4013      	ands	r3, r2
 800c73e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	091b      	lsrs	r3, r3, #4
 800c746:	f003 0201 	and.w	r2, r3, #1
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	fa02 f303 	lsl.w	r3, r2, r3
 800c750:	69ba      	ldr	r2, [r7, #24]
 800c752:	4313      	orrs	r3, r2
 800c754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	69ba      	ldr	r2, [r7, #24]
 800c75a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	2203      	movs	r2, #3
 800c768:	fa02 f303 	lsl.w	r3, r2, r3
 800c76c:	43db      	mvns	r3, r3
 800c76e:	69ba      	ldr	r2, [r7, #24]
 800c770:	4013      	ands	r3, r2
 800c772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	689a      	ldr	r2, [r3, #8]
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	fa02 f303 	lsl.w	r3, r2, r3
 800c780:	69ba      	ldr	r2, [r7, #24]
 800c782:	4313      	orrs	r3, r2
 800c784:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	69ba      	ldr	r2, [r7, #24]
 800c78a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	2b02      	cmp	r3, #2
 800c792:	d003      	beq.n	800c79c <HAL_GPIO_Init+0xfc>
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	2b12      	cmp	r3, #18
 800c79a:	d123      	bne.n	800c7e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	08da      	lsrs	r2, r3, #3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3208      	adds	r2, #8
 800c7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	f003 0307 	and.w	r3, r3, #7
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	220f      	movs	r2, #15
 800c7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b8:	43db      	mvns	r3, r3
 800c7ba:	69ba      	ldr	r2, [r7, #24]
 800c7bc:	4013      	ands	r3, r2
 800c7be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	691a      	ldr	r2, [r3, #16]
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c7d0:	69ba      	ldr	r2, [r7, #24]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	08da      	lsrs	r2, r3, #3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	3208      	adds	r2, #8
 800c7de:	69b9      	ldr	r1, [r7, #24]
 800c7e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	2203      	movs	r2, #3
 800c7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f4:	43db      	mvns	r3, r3
 800c7f6:	69ba      	ldr	r2, [r7, #24]
 800c7f8:	4013      	ands	r3, r2
 800c7fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	f003 0203 	and.w	r2, r3, #3
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	005b      	lsls	r3, r3, #1
 800c808:	fa02 f303 	lsl.w	r3, r2, r3
 800c80c:	69ba      	ldr	r2, [r7, #24]
 800c80e:	4313      	orrs	r3, r2
 800c810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	69ba      	ldr	r2, [r7, #24]
 800c816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 80c0 	beq.w	800c9a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c826:	2300      	movs	r3, #0
 800c828:	60fb      	str	r3, [r7, #12]
 800c82a:	4b65      	ldr	r3, [pc, #404]	; (800c9c0 <HAL_GPIO_Init+0x320>)
 800c82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c82e:	4a64      	ldr	r2, [pc, #400]	; (800c9c0 <HAL_GPIO_Init+0x320>)
 800c830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c834:	6453      	str	r3, [r2, #68]	; 0x44
 800c836:	4b62      	ldr	r3, [pc, #392]	; (800c9c0 <HAL_GPIO_Init+0x320>)
 800c838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c83a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c83e:	60fb      	str	r3, [r7, #12]
 800c840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c842:	4a60      	ldr	r2, [pc, #384]	; (800c9c4 <HAL_GPIO_Init+0x324>)
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	089b      	lsrs	r3, r3, #2
 800c848:	3302      	adds	r3, #2
 800c84a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c84e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	f003 0303 	and.w	r3, r3, #3
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	220f      	movs	r2, #15
 800c85a:	fa02 f303 	lsl.w	r3, r2, r3
 800c85e:	43db      	mvns	r3, r3
 800c860:	69ba      	ldr	r2, [r7, #24]
 800c862:	4013      	ands	r3, r2
 800c864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a57      	ldr	r2, [pc, #348]	; (800c9c8 <HAL_GPIO_Init+0x328>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d037      	beq.n	800c8de <HAL_GPIO_Init+0x23e>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a56      	ldr	r2, [pc, #344]	; (800c9cc <HAL_GPIO_Init+0x32c>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d031      	beq.n	800c8da <HAL_GPIO_Init+0x23a>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a55      	ldr	r2, [pc, #340]	; (800c9d0 <HAL_GPIO_Init+0x330>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d02b      	beq.n	800c8d6 <HAL_GPIO_Init+0x236>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a54      	ldr	r2, [pc, #336]	; (800c9d4 <HAL_GPIO_Init+0x334>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d025      	beq.n	800c8d2 <HAL_GPIO_Init+0x232>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a53      	ldr	r2, [pc, #332]	; (800c9d8 <HAL_GPIO_Init+0x338>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d01f      	beq.n	800c8ce <HAL_GPIO_Init+0x22e>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a52      	ldr	r2, [pc, #328]	; (800c9dc <HAL_GPIO_Init+0x33c>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d019      	beq.n	800c8ca <HAL_GPIO_Init+0x22a>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a51      	ldr	r2, [pc, #324]	; (800c9e0 <HAL_GPIO_Init+0x340>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d013      	beq.n	800c8c6 <HAL_GPIO_Init+0x226>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a50      	ldr	r2, [pc, #320]	; (800c9e4 <HAL_GPIO_Init+0x344>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d00d      	beq.n	800c8c2 <HAL_GPIO_Init+0x222>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4a4f      	ldr	r2, [pc, #316]	; (800c9e8 <HAL_GPIO_Init+0x348>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d007      	beq.n	800c8be <HAL_GPIO_Init+0x21e>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a4e      	ldr	r2, [pc, #312]	; (800c9ec <HAL_GPIO_Init+0x34c>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d101      	bne.n	800c8ba <HAL_GPIO_Init+0x21a>
 800c8b6:	2309      	movs	r3, #9
 800c8b8:	e012      	b.n	800c8e0 <HAL_GPIO_Init+0x240>
 800c8ba:	230a      	movs	r3, #10
 800c8bc:	e010      	b.n	800c8e0 <HAL_GPIO_Init+0x240>
 800c8be:	2308      	movs	r3, #8
 800c8c0:	e00e      	b.n	800c8e0 <HAL_GPIO_Init+0x240>
 800c8c2:	2307      	movs	r3, #7
 800c8c4:	e00c      	b.n	800c8e0 <HAL_GPIO_Init+0x240>
 800c8c6:	2306      	movs	r3, #6
 800c8c8:	e00a      	b.n	800c8e0 <HAL_GPIO_Init+0x240>
 800c8ca:	2305      	movs	r3, #5
 800c8cc:	e008      	b.n	800c8e0 <HAL_GPIO_Init+0x240>
 800c8ce:	2304      	movs	r3, #4
 800c8d0:	e006      	b.n	800c8e0 <HAL_GPIO_Init+0x240>
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	e004      	b.n	800c8e0 <HAL_GPIO_Init+0x240>
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	e002      	b.n	800c8e0 <HAL_GPIO_Init+0x240>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e000      	b.n	800c8e0 <HAL_GPIO_Init+0x240>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	69fa      	ldr	r2, [r7, #28]
 800c8e2:	f002 0203 	and.w	r2, r2, #3
 800c8e6:	0092      	lsls	r2, r2, #2
 800c8e8:	4093      	lsls	r3, r2
 800c8ea:	69ba      	ldr	r2, [r7, #24]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c8f0:	4934      	ldr	r1, [pc, #208]	; (800c9c4 <HAL_GPIO_Init+0x324>)
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	089b      	lsrs	r3, r3, #2
 800c8f6:	3302      	adds	r3, #2
 800c8f8:	69ba      	ldr	r2, [r7, #24]
 800c8fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c8fe:	4b3c      	ldr	r3, [pc, #240]	; (800c9f0 <HAL_GPIO_Init+0x350>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	43db      	mvns	r3, r3
 800c908:	69ba      	ldr	r2, [r7, #24]
 800c90a:	4013      	ands	r3, r2
 800c90c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c91a:	69ba      	ldr	r2, [r7, #24]
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	4313      	orrs	r3, r2
 800c920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c922:	4a33      	ldr	r2, [pc, #204]	; (800c9f0 <HAL_GPIO_Init+0x350>)
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c928:	4b31      	ldr	r3, [pc, #196]	; (800c9f0 <HAL_GPIO_Init+0x350>)
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	43db      	mvns	r3, r3
 800c932:	69ba      	ldr	r2, [r7, #24]
 800c934:	4013      	ands	r3, r2
 800c936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c944:	69ba      	ldr	r2, [r7, #24]
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	4313      	orrs	r3, r2
 800c94a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c94c:	4a28      	ldr	r2, [pc, #160]	; (800c9f0 <HAL_GPIO_Init+0x350>)
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c952:	4b27      	ldr	r3, [pc, #156]	; (800c9f0 <HAL_GPIO_Init+0x350>)
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	43db      	mvns	r3, r3
 800c95c:	69ba      	ldr	r2, [r7, #24]
 800c95e:	4013      	ands	r3, r2
 800c960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d003      	beq.n	800c976 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c96e:	69ba      	ldr	r2, [r7, #24]
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	4313      	orrs	r3, r2
 800c974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c976:	4a1e      	ldr	r2, [pc, #120]	; (800c9f0 <HAL_GPIO_Init+0x350>)
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c97c:	4b1c      	ldr	r3, [pc, #112]	; (800c9f0 <HAL_GPIO_Init+0x350>)
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	43db      	mvns	r3, r3
 800c986:	69ba      	ldr	r2, [r7, #24]
 800c988:	4013      	ands	r3, r2
 800c98a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c994:	2b00      	cmp	r3, #0
 800c996:	d003      	beq.n	800c9a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c998:	69ba      	ldr	r2, [r7, #24]
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c9a0:	4a13      	ldr	r2, [pc, #76]	; (800c9f0 <HAL_GPIO_Init+0x350>)
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	61fb      	str	r3, [r7, #28]
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	2b0f      	cmp	r3, #15
 800c9b0:	f67f ae84 	bls.w	800c6bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c9b4:	bf00      	nop
 800c9b6:	3724      	adds	r7, #36	; 0x24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr
 800c9c0:	40023800 	.word	0x40023800
 800c9c4:	40013800 	.word	0x40013800
 800c9c8:	40020000 	.word	0x40020000
 800c9cc:	40020400 	.word	0x40020400
 800c9d0:	40020800 	.word	0x40020800
 800c9d4:	40020c00 	.word	0x40020c00
 800c9d8:	40021000 	.word	0x40021000
 800c9dc:	40021400 	.word	0x40021400
 800c9e0:	40021800 	.word	0x40021800
 800c9e4:	40021c00 	.word	0x40021c00
 800c9e8:	40022000 	.word	0x40022000
 800c9ec:	40022400 	.word	0x40022400
 800c9f0:	40013c00 	.word	0x40013c00

0800c9f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	691a      	ldr	r2, [r3, #16]
 800ca04:	887b      	ldrh	r3, [r7, #2]
 800ca06:	4013      	ands	r3, r2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	73fb      	strb	r3, [r7, #15]
 800ca10:	e001      	b.n	800ca16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ca12:	2300      	movs	r3, #0
 800ca14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ca16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	807b      	strh	r3, [r7, #2]
 800ca30:	4613      	mov	r3, r2
 800ca32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ca34:	787b      	ldrb	r3, [r7, #1]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d003      	beq.n	800ca42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ca3a:	887a      	ldrh	r2, [r7, #2]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ca40:	e003      	b.n	800ca4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ca42:	887b      	ldrh	r3, [r7, #2]
 800ca44:	041a      	lsls	r2, r3, #16
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	619a      	str	r2, [r3, #24]
}
 800ca4a:	bf00      	nop
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
	...

0800ca58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ca62:	4b08      	ldr	r3, [pc, #32]	; (800ca84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ca64:	695a      	ldr	r2, [r3, #20]
 800ca66:	88fb      	ldrh	r3, [r7, #6]
 800ca68:	4013      	ands	r3, r2
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d006      	beq.n	800ca7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ca6e:	4a05      	ldr	r2, [pc, #20]	; (800ca84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ca70:	88fb      	ldrh	r3, [r7, #6]
 800ca72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ca74:	88fb      	ldrh	r3, [r7, #6]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7f9 fd4d 	bl	8006516 <HAL_GPIO_EXTI_Callback>
  }
}
 800ca7c:	bf00      	nop
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	40013c00 	.word	0x40013c00

0800ca88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d101      	bne.n	800ca9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e11f      	b.n	800ccda <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d106      	bne.n	800cab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7fa fdac 	bl	800760c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2224      	movs	r2, #36	; 0x24
 800cab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f022 0201 	bic.w	r2, r2, #1
 800caca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cada:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800caea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800caec:	f001 f96e 	bl	800ddcc <HAL_RCC_GetPCLK1Freq>
 800caf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	4a7b      	ldr	r2, [pc, #492]	; (800cce4 <HAL_I2C_Init+0x25c>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d807      	bhi.n	800cb0c <HAL_I2C_Init+0x84>
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	4a7a      	ldr	r2, [pc, #488]	; (800cce8 <HAL_I2C_Init+0x260>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	bf94      	ite	ls
 800cb04:	2301      	movls	r3, #1
 800cb06:	2300      	movhi	r3, #0
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	e006      	b.n	800cb1a <HAL_I2C_Init+0x92>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4a77      	ldr	r2, [pc, #476]	; (800ccec <HAL_I2C_Init+0x264>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	bf94      	ite	ls
 800cb14:	2301      	movls	r3, #1
 800cb16:	2300      	movhi	r3, #0
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e0db      	b.n	800ccda <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	4a72      	ldr	r2, [pc, #456]	; (800ccf0 <HAL_I2C_Init+0x268>)
 800cb26:	fba2 2303 	umull	r2, r3, r2, r3
 800cb2a:	0c9b      	lsrs	r3, r3, #18
 800cb2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	6a1b      	ldr	r3, [r3, #32]
 800cb48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	4a64      	ldr	r2, [pc, #400]	; (800cce4 <HAL_I2C_Init+0x25c>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d802      	bhi.n	800cb5c <HAL_I2C_Init+0xd4>
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	e009      	b.n	800cb70 <HAL_I2C_Init+0xe8>
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cb62:	fb02 f303 	mul.w	r3, r2, r3
 800cb66:	4a63      	ldr	r2, [pc, #396]	; (800ccf4 <HAL_I2C_Init+0x26c>)
 800cb68:	fba2 2303 	umull	r2, r3, r2, r3
 800cb6c:	099b      	lsrs	r3, r3, #6
 800cb6e:	3301      	adds	r3, #1
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	6812      	ldr	r2, [r2, #0]
 800cb74:	430b      	orrs	r3, r1
 800cb76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	69db      	ldr	r3, [r3, #28]
 800cb7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800cb82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	4956      	ldr	r1, [pc, #344]	; (800cce4 <HAL_I2C_Init+0x25c>)
 800cb8c:	428b      	cmp	r3, r1
 800cb8e:	d80d      	bhi.n	800cbac <HAL_I2C_Init+0x124>
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	1e59      	subs	r1, r3, #1
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	fbb1 f3f3 	udiv	r3, r1, r3
 800cb9e:	3301      	adds	r3, #1
 800cba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cba4:	2b04      	cmp	r3, #4
 800cba6:	bf38      	it	cc
 800cba8:	2304      	movcc	r3, #4
 800cbaa:	e04f      	b.n	800cc4c <HAL_I2C_Init+0x1c4>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d111      	bne.n	800cbd8 <HAL_I2C_Init+0x150>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	1e58      	subs	r0, r3, #1
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6859      	ldr	r1, [r3, #4]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	440b      	add	r3, r1
 800cbc2:	fbb0 f3f3 	udiv	r3, r0, r3
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	bf0c      	ite	eq
 800cbd0:	2301      	moveq	r3, #1
 800cbd2:	2300      	movne	r3, #0
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	e012      	b.n	800cbfe <HAL_I2C_Init+0x176>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	1e58      	subs	r0, r3, #1
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6859      	ldr	r1, [r3, #4]
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	440b      	add	r3, r1
 800cbe6:	0099      	lsls	r1, r3, #2
 800cbe8:	440b      	add	r3, r1
 800cbea:	fbb0 f3f3 	udiv	r3, r0, r3
 800cbee:	3301      	adds	r3, #1
 800cbf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bf0c      	ite	eq
 800cbf8:	2301      	moveq	r3, #1
 800cbfa:	2300      	movne	r3, #0
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <HAL_I2C_Init+0x17e>
 800cc02:	2301      	movs	r3, #1
 800cc04:	e022      	b.n	800cc4c <HAL_I2C_Init+0x1c4>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d10e      	bne.n	800cc2c <HAL_I2C_Init+0x1a4>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	1e58      	subs	r0, r3, #1
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6859      	ldr	r1, [r3, #4]
 800cc16:	460b      	mov	r3, r1
 800cc18:	005b      	lsls	r3, r3, #1
 800cc1a:	440b      	add	r3, r1
 800cc1c:	fbb0 f3f3 	udiv	r3, r0, r3
 800cc20:	3301      	adds	r3, #1
 800cc22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc2a:	e00f      	b.n	800cc4c <HAL_I2C_Init+0x1c4>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	1e58      	subs	r0, r3, #1
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6859      	ldr	r1, [r3, #4]
 800cc34:	460b      	mov	r3, r1
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	440b      	add	r3, r1
 800cc3a:	0099      	lsls	r1, r3, #2
 800cc3c:	440b      	add	r3, r1
 800cc3e:	fbb0 f3f3 	udiv	r3, r0, r3
 800cc42:	3301      	adds	r3, #1
 800cc44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc4c:	6879      	ldr	r1, [r7, #4]
 800cc4e:	6809      	ldr	r1, [r1, #0]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	69da      	ldr	r2, [r3, #28]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6a1b      	ldr	r3, [r3, #32]
 800cc66:	431a      	orrs	r2, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800cc7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	6911      	ldr	r1, [r2, #16]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	68d2      	ldr	r2, [r2, #12]
 800cc86:	4311      	orrs	r1, r2
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	6812      	ldr	r2, [r2, #0]
 800cc8c:	430b      	orrs	r3, r1
 800cc8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	695a      	ldr	r2, [r3, #20]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	699b      	ldr	r3, [r3, #24]
 800cca2:	431a      	orrs	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	f042 0201 	orr.w	r2, r2, #1
 800ccba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2220      	movs	r2, #32
 800ccc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	000186a0 	.word	0x000186a0
 800cce8:	001e847f 	.word	0x001e847f
 800ccec:	003d08ff 	.word	0x003d08ff
 800ccf0:	431bde83 	.word	0x431bde83
 800ccf4:	10624dd3 	.word	0x10624dd3

0800ccf8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b088      	sub	sp, #32
 800ccfc:	af02      	add	r7, sp, #8
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	607a      	str	r2, [r7, #4]
 800cd02:	461a      	mov	r2, r3
 800cd04:	460b      	mov	r3, r1
 800cd06:	817b      	strh	r3, [r7, #10]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cd0c:	f7fe fbe8 	bl	800b4e0 <HAL_GetTick>
 800cd10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	2b20      	cmp	r3, #32
 800cd1c:	f040 80e0 	bne.w	800cee0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	2319      	movs	r3, #25
 800cd26:	2201      	movs	r2, #1
 800cd28:	4970      	ldr	r1, [pc, #448]	; (800ceec <HAL_I2C_Master_Transmit+0x1f4>)
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f000 fc58 	bl	800d5e0 <I2C_WaitOnFlagUntilTimeout>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d001      	beq.n	800cd3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800cd36:	2302      	movs	r3, #2
 800cd38:	e0d3      	b.n	800cee2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d101      	bne.n	800cd48 <HAL_I2C_Master_Transmit+0x50>
 800cd44:	2302      	movs	r3, #2
 800cd46:	e0cc      	b.n	800cee2 <HAL_I2C_Master_Transmit+0x1ea>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f003 0301 	and.w	r3, r3, #1
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d007      	beq.n	800cd6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f042 0201 	orr.w	r2, r2, #1
 800cd6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2221      	movs	r2, #33	; 0x21
 800cd82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2210      	movs	r2, #16
 800cd8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2200      	movs	r2, #0
 800cd92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	893a      	ldrh	r2, [r7, #8]
 800cd9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	4a50      	ldr	r2, [pc, #320]	; (800cef0 <HAL_I2C_Master_Transmit+0x1f8>)
 800cdae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800cdb0:	8979      	ldrh	r1, [r7, #10]
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	6a3a      	ldr	r2, [r7, #32]
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f000 fac2 	bl	800d340 <I2C_MasterRequestWrite>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e08d      	b.n	800cee2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	613b      	str	r3, [r7, #16]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	613b      	str	r3, [r7, #16]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	613b      	str	r3, [r7, #16]
 800cdda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800cddc:	e066      	b.n	800ceac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cdde:	697a      	ldr	r2, [r7, #20]
 800cde0:	6a39      	ldr	r1, [r7, #32]
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f000 fcd2 	bl	800d78c <I2C_WaitOnTXEFlagUntilTimeout>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00d      	beq.n	800ce0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf2:	2b04      	cmp	r3, #4
 800cdf4:	d107      	bne.n	800ce06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e06b      	b.n	800cee2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0e:	781a      	ldrb	r2, [r3, #0]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1a:	1c5a      	adds	r2, r3, #1
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	3b01      	subs	r3, #1
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce32:	3b01      	subs	r3, #1
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	f003 0304 	and.w	r3, r3, #4
 800ce44:	2b04      	cmp	r3, #4
 800ce46:	d11b      	bne.n	800ce80 <HAL_I2C_Master_Transmit+0x188>
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d017      	beq.n	800ce80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce54:	781a      	ldrb	r2, [r3, #0]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	6a39      	ldr	r1, [r7, #32]
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f000 fcc2 	bl	800d80e <I2C_WaitOnBTFFlagUntilTimeout>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00d      	beq.n	800ceac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce94:	2b04      	cmp	r3, #4
 800ce96:	d107      	bne.n	800cea8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cea6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e01a      	b.n	800cee2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d194      	bne.n	800cdde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2220      	movs	r2, #32
 800cec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	e000      	b.n	800cee2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800cee0:	2302      	movs	r3, #2
  }
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3718      	adds	r7, #24
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	00100002 	.word	0x00100002
 800cef0:	ffff0000 	.word	0xffff0000

0800cef4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b08c      	sub	sp, #48	; 0x30
 800cef8:	af02      	add	r7, sp, #8
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	607a      	str	r2, [r7, #4]
 800cefe:	461a      	mov	r2, r3
 800cf00:	460b      	mov	r3, r1
 800cf02:	817b      	strh	r3, [r7, #10]
 800cf04:	4613      	mov	r3, r2
 800cf06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cf08:	f7fe faea 	bl	800b4e0 <HAL_GetTick>
 800cf0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b20      	cmp	r3, #32
 800cf18:	f040 820b 	bne.w	800d332 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	2319      	movs	r3, #25
 800cf22:	2201      	movs	r2, #1
 800cf24:	497c      	ldr	r1, [pc, #496]	; (800d118 <HAL_I2C_Master_Receive+0x224>)
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f000 fb5a 	bl	800d5e0 <I2C_WaitOnFlagUntilTimeout>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800cf32:	2302      	movs	r3, #2
 800cf34:	e1fe      	b.n	800d334 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d101      	bne.n	800cf44 <HAL_I2C_Master_Receive+0x50>
 800cf40:	2302      	movs	r3, #2
 800cf42:	e1f7      	b.n	800d334 <HAL_I2C_Master_Receive+0x440>
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 0301 	and.w	r3, r3, #1
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d007      	beq.n	800cf6a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f042 0201 	orr.w	r2, r2, #1
 800cf68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cf78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2222      	movs	r2, #34	; 0x22
 800cf7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2210      	movs	r2, #16
 800cf86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	893a      	ldrh	r2, [r7, #8]
 800cf9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	4a5c      	ldr	r2, [pc, #368]	; (800d11c <HAL_I2C_Master_Receive+0x228>)
 800cfaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800cfac:	8979      	ldrh	r1, [r7, #10]
 800cfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f000 fa46 	bl	800d444 <I2C_MasterRequestRead>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e1b8      	b.n	800d334 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d113      	bne.n	800cff2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cfca:	2300      	movs	r3, #0
 800cfcc:	623b      	str	r3, [r7, #32]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	695b      	ldr	r3, [r3, #20]
 800cfd4:	623b      	str	r3, [r7, #32]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	699b      	ldr	r3, [r3, #24]
 800cfdc:	623b      	str	r3, [r7, #32]
 800cfde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfee:	601a      	str	r2, [r3, #0]
 800cff0:	e18c      	b.n	800d30c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d11b      	bne.n	800d032 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d00a:	2300      	movs	r3, #0
 800d00c:	61fb      	str	r3, [r7, #28]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	695b      	ldr	r3, [r3, #20]
 800d014:	61fb      	str	r3, [r7, #28]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	699b      	ldr	r3, [r3, #24]
 800d01c:	61fb      	str	r3, [r7, #28]
 800d01e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	e16c      	b.n	800d30c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d036:	2b02      	cmp	r3, #2
 800d038:	d11b      	bne.n	800d072 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d048:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d05a:	2300      	movs	r3, #0
 800d05c:	61bb      	str	r3, [r7, #24]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	695b      	ldr	r3, [r3, #20]
 800d064:	61bb      	str	r3, [r7, #24]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	61bb      	str	r3, [r7, #24]
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	e14c      	b.n	800d30c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d082:	2300      	movs	r3, #0
 800d084:	617b      	str	r3, [r7, #20]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	695b      	ldr	r3, [r3, #20]
 800d08c:	617b      	str	r3, [r7, #20]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	617b      	str	r3, [r7, #20]
 800d096:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d098:	e138      	b.n	800d30c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	f200 80f1 	bhi.w	800d286 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d123      	bne.n	800d0f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f000 fbed 	bl	800d890 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e139      	b.n	800d334 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	691a      	ldr	r2, [r3, #16]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ca:	b2d2      	uxtb	r2, r2
 800d0cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	b29a      	uxth	r2, r3
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0f2:	e10b      	b.n	800d30c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d14e      	bne.n	800d19a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d102:	2200      	movs	r2, #0
 800d104:	4906      	ldr	r1, [pc, #24]	; (800d120 <HAL_I2C_Master_Receive+0x22c>)
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f000 fa6a 	bl	800d5e0 <I2C_WaitOnFlagUntilTimeout>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d008      	beq.n	800d124 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	e10e      	b.n	800d334 <HAL_I2C_Master_Receive+0x440>
 800d116:	bf00      	nop
 800d118:	00100002 	.word	0x00100002
 800d11c:	ffff0000 	.word	0xffff0000
 800d120:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	681a      	ldr	r2, [r3, #0]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	691a      	ldr	r2, [r3, #16]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13e:	b2d2      	uxtb	r2, r2
 800d140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d146:	1c5a      	adds	r2, r3, #1
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d150:	3b01      	subs	r3, #1
 800d152:	b29a      	uxth	r2, r3
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	3b01      	subs	r3, #1
 800d160:	b29a      	uxth	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	691a      	ldr	r2, [r3, #16]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d170:	b2d2      	uxtb	r2, r2
 800d172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d178:	1c5a      	adds	r2, r3, #1
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d182:	3b01      	subs	r3, #1
 800d184:	b29a      	uxth	r2, r3
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d18e:	b29b      	uxth	r3, r3
 800d190:	3b01      	subs	r3, #1
 800d192:	b29a      	uxth	r2, r3
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d198:	e0b8      	b.n	800d30c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	4966      	ldr	r1, [pc, #408]	; (800d33c <HAL_I2C_Master_Receive+0x448>)
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f000 fa1b 	bl	800d5e0 <I2C_WaitOnFlagUntilTimeout>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d001      	beq.n	800d1b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	e0bf      	b.n	800d334 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	691a      	ldr	r2, [r3, #16]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ce:	b2d2      	uxtb	r2, r2
 800d1d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d6:	1c5a      	adds	r2, r3, #1
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	b29a      	uxth	r2, r3
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	494f      	ldr	r1, [pc, #316]	; (800d33c <HAL_I2C_Master_Receive+0x448>)
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f000 f9ed 	bl	800d5e0 <I2C_WaitOnFlagUntilTimeout>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d001      	beq.n	800d210 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	e091      	b.n	800d334 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d21e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	691a      	ldr	r2, [r3, #16]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22a:	b2d2      	uxtb	r2, r2
 800d22c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d232:	1c5a      	adds	r2, r3, #1
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d23c:	3b01      	subs	r3, #1
 800d23e:	b29a      	uxth	r2, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d248:	b29b      	uxth	r3, r3
 800d24a:	3b01      	subs	r3, #1
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	691a      	ldr	r2, [r3, #16]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25c:	b2d2      	uxtb	r2, r2
 800d25e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d264:	1c5a      	adds	r2, r3, #1
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d26e:	3b01      	subs	r3, #1
 800d270:	b29a      	uxth	r2, r3
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	3b01      	subs	r3, #1
 800d27e:	b29a      	uxth	r2, r3
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d284:	e042      	b.n	800d30c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f000 fb00 	bl	800d890 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e04c      	b.n	800d334 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	691a      	ldr	r2, [r3, #16]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a4:	b2d2      	uxtb	r2, r2
 800d2a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	f003 0304 	and.w	r3, r3, #4
 800d2d6:	2b04      	cmp	r3, #4
 800d2d8:	d118      	bne.n	800d30c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	691a      	ldr	r2, [r3, #16]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e4:	b2d2      	uxtb	r2, r2
 800d2e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	1c5a      	adds	r2, r3, #1
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d302:	b29b      	uxth	r3, r3
 800d304:	3b01      	subs	r3, #1
 800d306:	b29a      	uxth	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d310:	2b00      	cmp	r3, #0
 800d312:	f47f aec2 	bne.w	800d09a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2220      	movs	r2, #32
 800d31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2200      	movs	r2, #0
 800d32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	e000      	b.n	800d334 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d332:	2302      	movs	r3, #2
  }
}
 800d334:	4618      	mov	r0, r3
 800d336:	3728      	adds	r7, #40	; 0x28
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	00010004 	.word	0x00010004

0800d340 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af02      	add	r7, sp, #8
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	607a      	str	r2, [r7, #4]
 800d34a:	603b      	str	r3, [r7, #0]
 800d34c:	460b      	mov	r3, r1
 800d34e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d354:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	2b08      	cmp	r3, #8
 800d35a:	d006      	beq.n	800d36a <I2C_MasterRequestWrite+0x2a>
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d003      	beq.n	800d36a <I2C_MasterRequestWrite+0x2a>
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d368:	d108      	bne.n	800d37c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d378:	601a      	str	r2, [r3, #0]
 800d37a:	e00b      	b.n	800d394 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d380:	2b12      	cmp	r3, #18
 800d382:	d107      	bne.n	800d394 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d392:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f000 f91d 	bl	800d5e0 <I2C_WaitOnFlagUntilTimeout>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00d      	beq.n	800d3c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3ba:	d103      	bne.n	800d3c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d3c4:	2303      	movs	r3, #3
 800d3c6:	e035      	b.n	800d434 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3d0:	d108      	bne.n	800d3e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d3d2:	897b      	ldrh	r3, [r7, #10]
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d3e0:	611a      	str	r2, [r3, #16]
 800d3e2:	e01b      	b.n	800d41c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d3e4:	897b      	ldrh	r3, [r7, #10]
 800d3e6:	11db      	asrs	r3, r3, #7
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	f003 0306 	and.w	r3, r3, #6
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	f063 030f 	orn	r3, r3, #15
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	490e      	ldr	r1, [pc, #56]	; (800d43c <I2C_MasterRequestWrite+0xfc>)
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f000 f943 	bl	800d68e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d001      	beq.n	800d412 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e010      	b.n	800d434 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d412:	897b      	ldrh	r3, [r7, #10]
 800d414:	b2da      	uxtb	r2, r3
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	4907      	ldr	r1, [pc, #28]	; (800d440 <I2C_MasterRequestWrite+0x100>)
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f000 f933 	bl	800d68e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d001      	beq.n	800d432 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	e000      	b.n	800d434 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3718      	adds	r7, #24
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	00010008 	.word	0x00010008
 800d440:	00010002 	.word	0x00010002

0800d444 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b088      	sub	sp, #32
 800d448:	af02      	add	r7, sp, #8
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	607a      	str	r2, [r7, #4]
 800d44e:	603b      	str	r3, [r7, #0]
 800d450:	460b      	mov	r3, r1
 800d452:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d458:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d468:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2b08      	cmp	r3, #8
 800d46e:	d006      	beq.n	800d47e <I2C_MasterRequestRead+0x3a>
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d003      	beq.n	800d47e <I2C_MasterRequestRead+0x3a>
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d47c:	d108      	bne.n	800d490 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d48c:	601a      	str	r2, [r3, #0]
 800d48e:	e00b      	b.n	800d4a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d494:	2b11      	cmp	r3, #17
 800d496:	d107      	bne.n	800d4a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f000 f893 	bl	800d5e0 <I2C_WaitOnFlagUntilTimeout>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00d      	beq.n	800d4dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4ce:	d103      	bne.n	800d4d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	e079      	b.n	800d5d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4e4:	d108      	bne.n	800d4f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d4e6:	897b      	ldrh	r3, [r7, #10]
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	f043 0301 	orr.w	r3, r3, #1
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	611a      	str	r2, [r3, #16]
 800d4f6:	e05f      	b.n	800d5b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d4f8:	897b      	ldrh	r3, [r7, #10]
 800d4fa:	11db      	asrs	r3, r3, #7
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	f003 0306 	and.w	r3, r3, #6
 800d502:	b2db      	uxtb	r3, r3
 800d504:	f063 030f 	orn	r3, r3, #15
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	4930      	ldr	r1, [pc, #192]	; (800d5d8 <I2C_MasterRequestRead+0x194>)
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	f000 f8b9 	bl	800d68e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d001      	beq.n	800d526 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	e054      	b.n	800d5d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d526:	897b      	ldrh	r3, [r7, #10]
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	4929      	ldr	r1, [pc, #164]	; (800d5dc <I2C_MasterRequestRead+0x198>)
 800d536:	68f8      	ldr	r0, [r7, #12]
 800d538:	f000 f8a9 	bl	800d68e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	e044      	b.n	800d5d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d546:	2300      	movs	r3, #0
 800d548:	613b      	str	r3, [r7, #16]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	695b      	ldr	r3, [r3, #20]
 800d550:	613b      	str	r3, [r7, #16]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	699b      	ldr	r3, [r3, #24]
 800d558:	613b      	str	r3, [r7, #16]
 800d55a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d56a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f000 f831 	bl	800d5e0 <I2C_WaitOnFlagUntilTimeout>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00d      	beq.n	800d5a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d58e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d592:	d103      	bne.n	800d59c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d59a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d59c:	2303      	movs	r3, #3
 800d59e:	e017      	b.n	800d5d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d5a0:	897b      	ldrh	r3, [r7, #10]
 800d5a2:	11db      	asrs	r3, r3, #7
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	f003 0306 	and.w	r3, r3, #6
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	f063 030e 	orn	r3, r3, #14
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	4907      	ldr	r1, [pc, #28]	; (800d5dc <I2C_MasterRequestRead+0x198>)
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f000 f865 	bl	800d68e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d001      	beq.n	800d5ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e000      	b.n	800d5d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3718      	adds	r7, #24
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	00010008 	.word	0x00010008
 800d5dc:	00010002 	.word	0x00010002

0800d5e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	603b      	str	r3, [r7, #0]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d5f0:	e025      	b.n	800d63e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f8:	d021      	beq.n	800d63e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5fa:	f7fd ff71 	bl	800b4e0 <HAL_GetTick>
 800d5fe:	4602      	mov	r2, r0
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	1ad3      	subs	r3, r2, r3
 800d604:	683a      	ldr	r2, [r7, #0]
 800d606:	429a      	cmp	r2, r3
 800d608:	d302      	bcc.n	800d610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d116      	bne.n	800d63e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2200      	movs	r2, #0
 800d614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2220      	movs	r2, #32
 800d61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2200      	movs	r2, #0
 800d622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62a:	f043 0220 	orr.w	r2, r3, #32
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e023      	b.n	800d686 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	0c1b      	lsrs	r3, r3, #16
 800d642:	b2db      	uxtb	r3, r3
 800d644:	2b01      	cmp	r3, #1
 800d646:	d10d      	bne.n	800d664 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	695b      	ldr	r3, [r3, #20]
 800d64e:	43da      	mvns	r2, r3
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	4013      	ands	r3, r2
 800d654:	b29b      	uxth	r3, r3
 800d656:	2b00      	cmp	r3, #0
 800d658:	bf0c      	ite	eq
 800d65a:	2301      	moveq	r3, #1
 800d65c:	2300      	movne	r3, #0
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	461a      	mov	r2, r3
 800d662:	e00c      	b.n	800d67e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	699b      	ldr	r3, [r3, #24]
 800d66a:	43da      	mvns	r2, r3
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	4013      	ands	r3, r2
 800d670:	b29b      	uxth	r3, r3
 800d672:	2b00      	cmp	r3, #0
 800d674:	bf0c      	ite	eq
 800d676:	2301      	moveq	r3, #1
 800d678:	2300      	movne	r3, #0
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	461a      	mov	r2, r3
 800d67e:	79fb      	ldrb	r3, [r7, #7]
 800d680:	429a      	cmp	r2, r3
 800d682:	d0b6      	beq.n	800d5f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b084      	sub	sp, #16
 800d692:	af00      	add	r7, sp, #0
 800d694:	60f8      	str	r0, [r7, #12]
 800d696:	60b9      	str	r1, [r7, #8]
 800d698:	607a      	str	r2, [r7, #4]
 800d69a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d69c:	e051      	b.n	800d742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	695b      	ldr	r3, [r3, #20]
 800d6a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d6a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6ac:	d123      	bne.n	800d6f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d6c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e2:	f043 0204 	orr.w	r2, r3, #4
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e046      	b.n	800d784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6fc:	d021      	beq.n	800d742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6fe:	f7fd feef 	bl	800b4e0 <HAL_GetTick>
 800d702:	4602      	mov	r2, r0
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	1ad3      	subs	r3, r2, r3
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d302      	bcc.n	800d714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d116      	bne.n	800d742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2200      	movs	r2, #0
 800d718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2220      	movs	r2, #32
 800d71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d72e:	f043 0220 	orr.w	r2, r3, #32
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d73e:	2301      	movs	r3, #1
 800d740:	e020      	b.n	800d784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	0c1b      	lsrs	r3, r3, #16
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d10c      	bne.n	800d766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	695b      	ldr	r3, [r3, #20]
 800d752:	43da      	mvns	r2, r3
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	4013      	ands	r3, r2
 800d758:	b29b      	uxth	r3, r3
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	bf14      	ite	ne
 800d75e:	2301      	movne	r3, #1
 800d760:	2300      	moveq	r3, #0
 800d762:	b2db      	uxtb	r3, r3
 800d764:	e00b      	b.n	800d77e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	43da      	mvns	r2, r3
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	4013      	ands	r3, r2
 800d772:	b29b      	uxth	r3, r3
 800d774:	2b00      	cmp	r3, #0
 800d776:	bf14      	ite	ne
 800d778:	2301      	movne	r3, #1
 800d77a:	2300      	moveq	r3, #0
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d18d      	bne.n	800d69e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d782:	2300      	movs	r3, #0
}
 800d784:	4618      	mov	r0, r3
 800d786:	3710      	adds	r7, #16
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d798:	e02d      	b.n	800d7f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f000 f8ce 	bl	800d93c <I2C_IsAcknowledgeFailed>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e02d      	b.n	800d806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b0:	d021      	beq.n	800d7f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7b2:	f7fd fe95 	bl	800b4e0 <HAL_GetTick>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d302      	bcc.n	800d7c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d116      	bne.n	800d7f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2220      	movs	r2, #32
 800d7d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e2:	f043 0220 	orr.w	r2, r3, #32
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e007      	b.n	800d806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	695b      	ldr	r3, [r3, #20]
 800d7fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d800:	2b80      	cmp	r3, #128	; 0x80
 800d802:	d1ca      	bne.n	800d79a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3710      	adds	r7, #16
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b084      	sub	sp, #16
 800d812:	af00      	add	r7, sp, #0
 800d814:	60f8      	str	r0, [r7, #12]
 800d816:	60b9      	str	r1, [r7, #8]
 800d818:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d81a:	e02d      	b.n	800d878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f000 f88d 	bl	800d93c <I2C_IsAcknowledgeFailed>
 800d822:	4603      	mov	r3, r0
 800d824:	2b00      	cmp	r3, #0
 800d826:	d001      	beq.n	800d82c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d828:	2301      	movs	r3, #1
 800d82a:	e02d      	b.n	800d888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d832:	d021      	beq.n	800d878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d834:	f7fd fe54 	bl	800b4e0 <HAL_GetTick>
 800d838:	4602      	mov	r2, r0
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	429a      	cmp	r2, r3
 800d842:	d302      	bcc.n	800d84a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d116      	bne.n	800d878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2200      	movs	r2, #0
 800d84e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2220      	movs	r2, #32
 800d854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d864:	f043 0220 	orr.w	r2, r3, #32
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2200      	movs	r2, #0
 800d870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	e007      	b.n	800d888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	f003 0304 	and.w	r3, r3, #4
 800d882:	2b04      	cmp	r3, #4
 800d884:	d1ca      	bne.n	800d81c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d89c:	e042      	b.n	800d924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	695b      	ldr	r3, [r3, #20]
 800d8a4:	f003 0310 	and.w	r3, r3, #16
 800d8a8:	2b10      	cmp	r3, #16
 800d8aa:	d119      	bne.n	800d8e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f06f 0210 	mvn.w	r2, #16
 800d8b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2220      	movs	r2, #32
 800d8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e029      	b.n	800d934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8e0:	f7fd fdfe 	bl	800b4e0 <HAL_GetTick>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d302      	bcc.n	800d8f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d116      	bne.n	800d924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2220      	movs	r2, #32
 800d900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d910:	f043 0220 	orr.w	r2, r3, #32
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d920:	2301      	movs	r3, #1
 800d922:	e007      	b.n	800d934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	695b      	ldr	r3, [r3, #20]
 800d92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d92e:	2b40      	cmp	r3, #64	; 0x40
 800d930:	d1b5      	bne.n	800d89e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d94e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d952:	d11b      	bne.n	800d98c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d95c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2220      	movs	r2, #32
 800d968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d978:	f043 0204 	orr.w	r2, r3, #4
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	e000      	b.n	800d98e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d98c:	2300      	movs	r3, #0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	370c      	adds	r7, #12
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr
	...

0800d99c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	603b      	str	r3, [r7, #0]
 800d9aa:	4b20      	ldr	r3, [pc, #128]	; (800da2c <HAL_PWREx_EnableOverDrive+0x90>)
 800d9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ae:	4a1f      	ldr	r2, [pc, #124]	; (800da2c <HAL_PWREx_EnableOverDrive+0x90>)
 800d9b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9b4:	6413      	str	r3, [r2, #64]	; 0x40
 800d9b6:	4b1d      	ldr	r3, [pc, #116]	; (800da2c <HAL_PWREx_EnableOverDrive+0x90>)
 800d9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9be:	603b      	str	r3, [r7, #0]
 800d9c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d9c2:	4b1b      	ldr	r3, [pc, #108]	; (800da30 <HAL_PWREx_EnableOverDrive+0x94>)
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d9c8:	f7fd fd8a 	bl	800b4e0 <HAL_GetTick>
 800d9cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d9ce:	e009      	b.n	800d9e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d9d0:	f7fd fd86 	bl	800b4e0 <HAL_GetTick>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9de:	d901      	bls.n	800d9e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	e01f      	b.n	800da24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d9e4:	4b13      	ldr	r3, [pc, #76]	; (800da34 <HAL_PWREx_EnableOverDrive+0x98>)
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9f0:	d1ee      	bne.n	800d9d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d9f2:	4b11      	ldr	r3, [pc, #68]	; (800da38 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d9f8:	f7fd fd72 	bl	800b4e0 <HAL_GetTick>
 800d9fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d9fe:	e009      	b.n	800da14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800da00:	f7fd fd6e 	bl	800b4e0 <HAL_GetTick>
 800da04:	4602      	mov	r2, r0
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da0e:	d901      	bls.n	800da14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800da10:	2303      	movs	r3, #3
 800da12:	e007      	b.n	800da24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800da14:	4b07      	ldr	r3, [pc, #28]	; (800da34 <HAL_PWREx_EnableOverDrive+0x98>)
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800da20:	d1ee      	bne.n	800da00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	40023800 	.word	0x40023800
 800da30:	420e0040 	.word	0x420e0040
 800da34:	40007000 	.word	0x40007000
 800da38:	420e0044 	.word	0x420e0044

0800da3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d101      	bne.n	800da50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da4c:	2301      	movs	r3, #1
 800da4e:	e0cc      	b.n	800dbea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800da50:	4b68      	ldr	r3, [pc, #416]	; (800dbf4 <HAL_RCC_ClockConfig+0x1b8>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f003 030f 	and.w	r3, r3, #15
 800da58:	683a      	ldr	r2, [r7, #0]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d90c      	bls.n	800da78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da5e:	4b65      	ldr	r3, [pc, #404]	; (800dbf4 <HAL_RCC_ClockConfig+0x1b8>)
 800da60:	683a      	ldr	r2, [r7, #0]
 800da62:	b2d2      	uxtb	r2, r2
 800da64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800da66:	4b63      	ldr	r3, [pc, #396]	; (800dbf4 <HAL_RCC_ClockConfig+0x1b8>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f003 030f 	and.w	r3, r3, #15
 800da6e:	683a      	ldr	r2, [r7, #0]
 800da70:	429a      	cmp	r2, r3
 800da72:	d001      	beq.n	800da78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	e0b8      	b.n	800dbea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f003 0302 	and.w	r3, r3, #2
 800da80:	2b00      	cmp	r3, #0
 800da82:	d020      	beq.n	800dac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f003 0304 	and.w	r3, r3, #4
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d005      	beq.n	800da9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800da90:	4b59      	ldr	r3, [pc, #356]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	4a58      	ldr	r2, [pc, #352]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800da96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800da9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f003 0308 	and.w	r3, r3, #8
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d005      	beq.n	800dab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800daa8:	4b53      	ldr	r3, [pc, #332]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	4a52      	ldr	r2, [pc, #328]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800daae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dab4:	4b50      	ldr	r3, [pc, #320]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	494d      	ldr	r1, [pc, #308]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800dac2:	4313      	orrs	r3, r2
 800dac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f003 0301 	and.w	r3, r3, #1
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d044      	beq.n	800db5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d107      	bne.n	800daea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dada:	4b47      	ldr	r3, [pc, #284]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d119      	bne.n	800db1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dae6:	2301      	movs	r3, #1
 800dae8:	e07f      	b.n	800dbea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d003      	beq.n	800dafa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800daf6:	2b03      	cmp	r3, #3
 800daf8:	d107      	bne.n	800db0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dafa:	4b3f      	ldr	r3, [pc, #252]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db02:	2b00      	cmp	r3, #0
 800db04:	d109      	bne.n	800db1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800db06:	2301      	movs	r3, #1
 800db08:	e06f      	b.n	800dbea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800db0a:	4b3b      	ldr	r3, [pc, #236]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f003 0302 	and.w	r3, r3, #2
 800db12:	2b00      	cmp	r3, #0
 800db14:	d101      	bne.n	800db1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800db16:	2301      	movs	r3, #1
 800db18:	e067      	b.n	800dbea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800db1a:	4b37      	ldr	r3, [pc, #220]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	f023 0203 	bic.w	r2, r3, #3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	4934      	ldr	r1, [pc, #208]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800db28:	4313      	orrs	r3, r2
 800db2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800db2c:	f7fd fcd8 	bl	800b4e0 <HAL_GetTick>
 800db30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db32:	e00a      	b.n	800db4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db34:	f7fd fcd4 	bl	800b4e0 <HAL_GetTick>
 800db38:	4602      	mov	r2, r0
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800db42:	4293      	cmp	r3, r2
 800db44:	d901      	bls.n	800db4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800db46:	2303      	movs	r3, #3
 800db48:	e04f      	b.n	800dbea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db4a:	4b2b      	ldr	r3, [pc, #172]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	f003 020c 	and.w	r2, r3, #12
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	429a      	cmp	r2, r3
 800db5a:	d1eb      	bne.n	800db34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800db5c:	4b25      	ldr	r3, [pc, #148]	; (800dbf4 <HAL_RCC_ClockConfig+0x1b8>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 030f 	and.w	r3, r3, #15
 800db64:	683a      	ldr	r2, [r7, #0]
 800db66:	429a      	cmp	r2, r3
 800db68:	d20c      	bcs.n	800db84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db6a:	4b22      	ldr	r3, [pc, #136]	; (800dbf4 <HAL_RCC_ClockConfig+0x1b8>)
 800db6c:	683a      	ldr	r2, [r7, #0]
 800db6e:	b2d2      	uxtb	r2, r2
 800db70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800db72:	4b20      	ldr	r3, [pc, #128]	; (800dbf4 <HAL_RCC_ClockConfig+0x1b8>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f003 030f 	and.w	r3, r3, #15
 800db7a:	683a      	ldr	r2, [r7, #0]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d001      	beq.n	800db84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	e032      	b.n	800dbea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f003 0304 	and.w	r3, r3, #4
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d008      	beq.n	800dba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800db90:	4b19      	ldr	r3, [pc, #100]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	4916      	ldr	r1, [pc, #88]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800db9e:	4313      	orrs	r3, r2
 800dba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f003 0308 	and.w	r3, r3, #8
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d009      	beq.n	800dbc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dbae:	4b12      	ldr	r3, [pc, #72]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	490e      	ldr	r1, [pc, #56]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dbc2:	f000 f821 	bl	800dc08 <HAL_RCC_GetSysClockFreq>
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	4b0b      	ldr	r3, [pc, #44]	; (800dbf8 <HAL_RCC_ClockConfig+0x1bc>)
 800dbca:	689b      	ldr	r3, [r3, #8]
 800dbcc:	091b      	lsrs	r3, r3, #4
 800dbce:	f003 030f 	and.w	r3, r3, #15
 800dbd2:	4a0a      	ldr	r2, [pc, #40]	; (800dbfc <HAL_RCC_ClockConfig+0x1c0>)
 800dbd4:	5cd3      	ldrb	r3, [r2, r3]
 800dbd6:	fa21 f303 	lsr.w	r3, r1, r3
 800dbda:	4a09      	ldr	r2, [pc, #36]	; (800dc00 <HAL_RCC_ClockConfig+0x1c4>)
 800dbdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dbde:	4b09      	ldr	r3, [pc, #36]	; (800dc04 <HAL_RCC_ClockConfig+0x1c8>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fd fc38 	bl	800b458 <HAL_InitTick>

  return HAL_OK;
 800dbe8:	2300      	movs	r3, #0
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	40023c00 	.word	0x40023c00
 800dbf8:	40023800 	.word	0x40023800
 800dbfc:	0801a86c 	.word	0x0801a86c
 800dc00:	20000000 	.word	0x20000000
 800dc04:	20000004 	.word	0x20000004

0800dc08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	607b      	str	r3, [r7, #4]
 800dc12:	2300      	movs	r3, #0
 800dc14:	60fb      	str	r3, [r7, #12]
 800dc16:	2300      	movs	r3, #0
 800dc18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dc1e:	4b63      	ldr	r3, [pc, #396]	; (800ddac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	f003 030c 	and.w	r3, r3, #12
 800dc26:	2b04      	cmp	r3, #4
 800dc28:	d007      	beq.n	800dc3a <HAL_RCC_GetSysClockFreq+0x32>
 800dc2a:	2b08      	cmp	r3, #8
 800dc2c:	d008      	beq.n	800dc40 <HAL_RCC_GetSysClockFreq+0x38>
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f040 80b4 	bne.w	800dd9c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dc34:	4b5e      	ldr	r3, [pc, #376]	; (800ddb0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dc36:	60bb      	str	r3, [r7, #8]
       break;
 800dc38:	e0b3      	b.n	800dda2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dc3a:	4b5d      	ldr	r3, [pc, #372]	; (800ddb0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dc3c:	60bb      	str	r3, [r7, #8]
      break;
 800dc3e:	e0b0      	b.n	800dda2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dc40:	4b5a      	ldr	r3, [pc, #360]	; (800ddac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dc4a:	4b58      	ldr	r3, [pc, #352]	; (800ddac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d04a      	beq.n	800dcec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dc56:	4b55      	ldr	r3, [pc, #340]	; (800ddac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	099b      	lsrs	r3, r3, #6
 800dc5c:	f04f 0400 	mov.w	r4, #0
 800dc60:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dc64:	f04f 0200 	mov.w	r2, #0
 800dc68:	ea03 0501 	and.w	r5, r3, r1
 800dc6c:	ea04 0602 	and.w	r6, r4, r2
 800dc70:	4629      	mov	r1, r5
 800dc72:	4632      	mov	r2, r6
 800dc74:	f04f 0300 	mov.w	r3, #0
 800dc78:	f04f 0400 	mov.w	r4, #0
 800dc7c:	0154      	lsls	r4, r2, #5
 800dc7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dc82:	014b      	lsls	r3, r1, #5
 800dc84:	4619      	mov	r1, r3
 800dc86:	4622      	mov	r2, r4
 800dc88:	1b49      	subs	r1, r1, r5
 800dc8a:	eb62 0206 	sbc.w	r2, r2, r6
 800dc8e:	f04f 0300 	mov.w	r3, #0
 800dc92:	f04f 0400 	mov.w	r4, #0
 800dc96:	0194      	lsls	r4, r2, #6
 800dc98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dc9c:	018b      	lsls	r3, r1, #6
 800dc9e:	1a5b      	subs	r3, r3, r1
 800dca0:	eb64 0402 	sbc.w	r4, r4, r2
 800dca4:	f04f 0100 	mov.w	r1, #0
 800dca8:	f04f 0200 	mov.w	r2, #0
 800dcac:	00e2      	lsls	r2, r4, #3
 800dcae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dcb2:	00d9      	lsls	r1, r3, #3
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	4614      	mov	r4, r2
 800dcb8:	195b      	adds	r3, r3, r5
 800dcba:	eb44 0406 	adc.w	r4, r4, r6
 800dcbe:	f04f 0100 	mov.w	r1, #0
 800dcc2:	f04f 0200 	mov.w	r2, #0
 800dcc6:	02a2      	lsls	r2, r4, #10
 800dcc8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dccc:	0299      	lsls	r1, r3, #10
 800dcce:	460b      	mov	r3, r1
 800dcd0:	4614      	mov	r4, r2
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f04f 0400 	mov.w	r4, #0
 800dcdc:	461a      	mov	r2, r3
 800dcde:	4623      	mov	r3, r4
 800dce0:	f7f2 ffea 	bl	8000cb8 <__aeabi_uldivmod>
 800dce4:	4603      	mov	r3, r0
 800dce6:	460c      	mov	r4, r1
 800dce8:	60fb      	str	r3, [r7, #12]
 800dcea:	e049      	b.n	800dd80 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dcec:	4b2f      	ldr	r3, [pc, #188]	; (800ddac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	099b      	lsrs	r3, r3, #6
 800dcf2:	f04f 0400 	mov.w	r4, #0
 800dcf6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dcfa:	f04f 0200 	mov.w	r2, #0
 800dcfe:	ea03 0501 	and.w	r5, r3, r1
 800dd02:	ea04 0602 	and.w	r6, r4, r2
 800dd06:	4629      	mov	r1, r5
 800dd08:	4632      	mov	r2, r6
 800dd0a:	f04f 0300 	mov.w	r3, #0
 800dd0e:	f04f 0400 	mov.w	r4, #0
 800dd12:	0154      	lsls	r4, r2, #5
 800dd14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dd18:	014b      	lsls	r3, r1, #5
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	1b49      	subs	r1, r1, r5
 800dd20:	eb62 0206 	sbc.w	r2, r2, r6
 800dd24:	f04f 0300 	mov.w	r3, #0
 800dd28:	f04f 0400 	mov.w	r4, #0
 800dd2c:	0194      	lsls	r4, r2, #6
 800dd2e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800dd32:	018b      	lsls	r3, r1, #6
 800dd34:	1a5b      	subs	r3, r3, r1
 800dd36:	eb64 0402 	sbc.w	r4, r4, r2
 800dd3a:	f04f 0100 	mov.w	r1, #0
 800dd3e:	f04f 0200 	mov.w	r2, #0
 800dd42:	00e2      	lsls	r2, r4, #3
 800dd44:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800dd48:	00d9      	lsls	r1, r3, #3
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	4614      	mov	r4, r2
 800dd4e:	195b      	adds	r3, r3, r5
 800dd50:	eb44 0406 	adc.w	r4, r4, r6
 800dd54:	f04f 0100 	mov.w	r1, #0
 800dd58:	f04f 0200 	mov.w	r2, #0
 800dd5c:	02a2      	lsls	r2, r4, #10
 800dd5e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800dd62:	0299      	lsls	r1, r3, #10
 800dd64:	460b      	mov	r3, r1
 800dd66:	4614      	mov	r4, r2
 800dd68:	4618      	mov	r0, r3
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f04f 0400 	mov.w	r4, #0
 800dd72:	461a      	mov	r2, r3
 800dd74:	4623      	mov	r3, r4
 800dd76:	f7f2 ff9f 	bl	8000cb8 <__aeabi_uldivmod>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800dd80:	4b0a      	ldr	r3, [pc, #40]	; (800ddac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	0c1b      	lsrs	r3, r3, #16
 800dd86:	f003 0303 	and.w	r3, r3, #3
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	005b      	lsls	r3, r3, #1
 800dd8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd98:	60bb      	str	r3, [r7, #8]
      break;
 800dd9a:	e002      	b.n	800dda2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dd9c:	4b04      	ldr	r3, [pc, #16]	; (800ddb0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800dd9e:	60bb      	str	r3, [r7, #8]
      break;
 800dda0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dda2:	68bb      	ldr	r3, [r7, #8]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddac:	40023800 	.word	0x40023800
 800ddb0:	00f42400 	.word	0x00f42400

0800ddb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ddb8:	4b03      	ldr	r3, [pc, #12]	; (800ddc8 <HAL_RCC_GetHCLKFreq+0x14>)
 800ddba:	681b      	ldr	r3, [r3, #0]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	20000000 	.word	0x20000000

0800ddcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ddd0:	f7ff fff0 	bl	800ddb4 <HAL_RCC_GetHCLKFreq>
 800ddd4:	4601      	mov	r1, r0
 800ddd6:	4b05      	ldr	r3, [pc, #20]	; (800ddec <HAL_RCC_GetPCLK1Freq+0x20>)
 800ddd8:	689b      	ldr	r3, [r3, #8]
 800ddda:	0a9b      	lsrs	r3, r3, #10
 800dddc:	f003 0307 	and.w	r3, r3, #7
 800dde0:	4a03      	ldr	r2, [pc, #12]	; (800ddf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dde2:	5cd3      	ldrb	r3, [r2, r3]
 800dde4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	40023800 	.word	0x40023800
 800ddf0:	0801a87c 	.word	0x0801a87c

0800ddf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ddf8:	f7ff ffdc 	bl	800ddb4 <HAL_RCC_GetHCLKFreq>
 800ddfc:	4601      	mov	r1, r0
 800ddfe:	4b05      	ldr	r3, [pc, #20]	; (800de14 <HAL_RCC_GetPCLK2Freq+0x20>)
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	0b5b      	lsrs	r3, r3, #13
 800de04:	f003 0307 	and.w	r3, r3, #7
 800de08:	4a03      	ldr	r2, [pc, #12]	; (800de18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800de0a:	5cd3      	ldrb	r3, [r2, r3]
 800de0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800de10:	4618      	mov	r0, r3
 800de12:	bd80      	pop	{r7, pc}
 800de14:	40023800 	.word	0x40023800
 800de18:	0801a87c 	.word	0x0801a87c

0800de1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b088      	sub	sp, #32
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800de24:	2300      	movs	r3, #0
 800de26:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800de28:	2300      	movs	r3, #0
 800de2a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800de2c:	2300      	movs	r3, #0
 800de2e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800de30:	2300      	movs	r3, #0
 800de32:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800de34:	2300      	movs	r3, #0
 800de36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00a      	beq.n	800de5a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800de44:	4b66      	ldr	r3, [pc, #408]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de4a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de52:	4963      	ldr	r1, [pc, #396]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de54:	4313      	orrs	r3, r2
 800de56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de62:	2b00      	cmp	r3, #0
 800de64:	d00a      	beq.n	800de7c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800de66:	4b5e      	ldr	r3, [pc, #376]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de6c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de74:	495a      	ldr	r1, [pc, #360]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800de76:	4313      	orrs	r3, r2
 800de78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	2b00      	cmp	r3, #0
 800de86:	d10b      	bne.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800de90:	2b00      	cmp	r3, #0
 800de92:	d105      	bne.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d075      	beq.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800dea0:	4b50      	ldr	r3, [pc, #320]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800dea6:	f7fd fb1b 	bl	800b4e0 <HAL_GetTick>
 800deaa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800deac:	e008      	b.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800deae:	f7fd fb17 	bl	800b4e0 <HAL_GetTick>
 800deb2:	4602      	mov	r2, r0
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	2b02      	cmp	r3, #2
 800deba:	d901      	bls.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800debc:	2303      	movs	r3, #3
 800debe:	e1dc      	b.n	800e27a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dec0:	4b47      	ldr	r3, [pc, #284]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1f0      	bne.n	800deae <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f003 0301 	and.w	r3, r3, #1
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d009      	beq.n	800deec <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	019a      	lsls	r2, r3, #6
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	071b      	lsls	r3, r3, #28
 800dee4:	493e      	ldr	r1, [pc, #248]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800dee6:	4313      	orrs	r3, r2
 800dee8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f003 0302 	and.w	r3, r3, #2
 800def4:	2b00      	cmp	r3, #0
 800def6:	d01f      	beq.n	800df38 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800def8:	4b39      	ldr	r3, [pc, #228]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800defa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800defe:	0f1b      	lsrs	r3, r3, #28
 800df00:	f003 0307 	and.w	r3, r3, #7
 800df04:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	019a      	lsls	r2, r3, #6
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	061b      	lsls	r3, r3, #24
 800df12:	431a      	orrs	r2, r3
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	071b      	lsls	r3, r3, #28
 800df18:	4931      	ldr	r1, [pc, #196]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df1a:	4313      	orrs	r3, r2
 800df1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800df20:	4b2f      	ldr	r3, [pc, #188]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df26:	f023 021f 	bic.w	r2, r3, #31
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6a1b      	ldr	r3, [r3, #32]
 800df2e:	3b01      	subs	r3, #1
 800df30:	492b      	ldr	r1, [pc, #172]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df32:	4313      	orrs	r3, r2
 800df34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00d      	beq.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	019a      	lsls	r2, r3, #6
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	061b      	lsls	r3, r3, #24
 800df50:	431a      	orrs	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	071b      	lsls	r3, r3, #28
 800df58:	4921      	ldr	r1, [pc, #132]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df5a:	4313      	orrs	r3, r2
 800df5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800df60:	4b20      	ldr	r3, [pc, #128]	; (800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800df62:	2201      	movs	r2, #1
 800df64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800df66:	f7fd fabb 	bl	800b4e0 <HAL_GetTick>
 800df6a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800df6c:	e008      	b.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800df6e:	f7fd fab7 	bl	800b4e0 <HAL_GetTick>
 800df72:	4602      	mov	r2, r0
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	2b02      	cmp	r3, #2
 800df7a:	d901      	bls.n	800df80 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800df7c:	2303      	movs	r3, #3
 800df7e:	e17c      	b.n	800e27a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800df80:	4b17      	ldr	r3, [pc, #92]	; (800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d0f0      	beq.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f003 0304 	and.w	r3, r3, #4
 800df94:	2b00      	cmp	r3, #0
 800df96:	d112      	bne.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d10c      	bne.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f000 80ce 	beq.w	800e14e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800dfb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dfba:	f040 80c8 	bne.w	800e14e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800dfbe:	4b0a      	ldr	r3, [pc, #40]	; (800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800dfc4:	f7fd fa8c 	bl	800b4e0 <HAL_GetTick>
 800dfc8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800dfca:	e00f      	b.n	800dfec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800dfcc:	f7fd fa88 	bl	800b4e0 <HAL_GetTick>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	2b02      	cmp	r3, #2
 800dfd8:	d908      	bls.n	800dfec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dfda:	2303      	movs	r3, #3
 800dfdc:	e14d      	b.n	800e27a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800dfde:	bf00      	nop
 800dfe0:	40023800 	.word	0x40023800
 800dfe4:	42470068 	.word	0x42470068
 800dfe8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800dfec:	4ba5      	ldr	r3, [pc, #660]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dff8:	d0e8      	beq.n	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f003 0304 	and.w	r3, r3, #4
 800e002:	2b00      	cmp	r3, #0
 800e004:	d02e      	beq.n	800e064 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800e006:	4b9f      	ldr	r3, [pc, #636]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e00c:	0c1b      	lsrs	r3, r3, #16
 800e00e:	f003 0303 	and.w	r3, r3, #3
 800e012:	3301      	adds	r3, #1
 800e014:	005b      	lsls	r3, r3, #1
 800e016:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e018:	4b9a      	ldr	r3, [pc, #616]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e01e:	0f1b      	lsrs	r3, r3, #28
 800e020:	f003 0307 	and.w	r3, r3, #7
 800e024:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	691b      	ldr	r3, [r3, #16]
 800e02a:	019a      	lsls	r2, r3, #6
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	085b      	lsrs	r3, r3, #1
 800e030:	3b01      	subs	r3, #1
 800e032:	041b      	lsls	r3, r3, #16
 800e034:	431a      	orrs	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	699b      	ldr	r3, [r3, #24]
 800e03a:	061b      	lsls	r3, r3, #24
 800e03c:	431a      	orrs	r2, r3
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	071b      	lsls	r3, r3, #28
 800e042:	4990      	ldr	r1, [pc, #576]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e044:	4313      	orrs	r3, r2
 800e046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e04a:	4b8e      	ldr	r3, [pc, #568]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e04c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e050:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e058:	3b01      	subs	r3, #1
 800e05a:	021b      	lsls	r3, r3, #8
 800e05c:	4989      	ldr	r1, [pc, #548]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e05e:	4313      	orrs	r3, r2
 800e060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f003 0308 	and.w	r3, r3, #8
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d02c      	beq.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800e070:	4b84      	ldr	r3, [pc, #528]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e076:	0c1b      	lsrs	r3, r3, #16
 800e078:	f003 0303 	and.w	r3, r3, #3
 800e07c:	3301      	adds	r3, #1
 800e07e:	005b      	lsls	r3, r3, #1
 800e080:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e082:	4b80      	ldr	r3, [pc, #512]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e088:	0e1b      	lsrs	r3, r3, #24
 800e08a:	f003 030f 	and.w	r3, r3, #15
 800e08e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	691b      	ldr	r3, [r3, #16]
 800e094:	019a      	lsls	r2, r3, #6
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	085b      	lsrs	r3, r3, #1
 800e09a:	3b01      	subs	r3, #1
 800e09c:	041b      	lsls	r3, r3, #16
 800e09e:	431a      	orrs	r2, r3
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	061b      	lsls	r3, r3, #24
 800e0a4:	431a      	orrs	r2, r3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	69db      	ldr	r3, [r3, #28]
 800e0aa:	071b      	lsls	r3, r3, #28
 800e0ac:	4975      	ldr	r1, [pc, #468]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e0b4:	4b73      	ldr	r3, [pc, #460]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c2:	4970      	ldr	r1, [pc, #448]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d024      	beq.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800e0da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0de:	d11f      	bne.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e0e0:	4b68      	ldr	r3, [pc, #416]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0e6:	0e1b      	lsrs	r3, r3, #24
 800e0e8:	f003 030f 	and.w	r3, r3, #15
 800e0ec:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e0ee:	4b65      	ldr	r3, [pc, #404]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0f4:	0f1b      	lsrs	r3, r3, #28
 800e0f6:	f003 0307 	and.w	r3, r3, #7
 800e0fa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	691b      	ldr	r3, [r3, #16]
 800e100:	019a      	lsls	r2, r3, #6
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	695b      	ldr	r3, [r3, #20]
 800e106:	085b      	lsrs	r3, r3, #1
 800e108:	3b01      	subs	r3, #1
 800e10a:	041b      	lsls	r3, r3, #16
 800e10c:	431a      	orrs	r2, r3
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	061b      	lsls	r3, r3, #24
 800e112:	431a      	orrs	r2, r3
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	071b      	lsls	r3, r3, #28
 800e118:	495a      	ldr	r1, [pc, #360]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e11a:	4313      	orrs	r3, r2
 800e11c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e120:	4b59      	ldr	r3, [pc, #356]	; (800e288 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800e122:	2201      	movs	r2, #1
 800e124:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e126:	f7fd f9db 	bl	800b4e0 <HAL_GetTick>
 800e12a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e12c:	e008      	b.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800e12e:	f7fd f9d7 	bl	800b4e0 <HAL_GetTick>
 800e132:	4602      	mov	r2, r0
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	2b02      	cmp	r3, #2
 800e13a:	d901      	bls.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e13c:	2303      	movs	r3, #3
 800e13e:	e09c      	b.n	800e27a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e140:	4b50      	ldr	r3, [pc, #320]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e14c:	d1ef      	bne.n	800e12e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f003 0320 	and.w	r3, r3, #32
 800e156:	2b00      	cmp	r3, #0
 800e158:	f000 8083 	beq.w	800e262 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e15c:	2300      	movs	r3, #0
 800e15e:	60bb      	str	r3, [r7, #8]
 800e160:	4b48      	ldr	r3, [pc, #288]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e164:	4a47      	ldr	r2, [pc, #284]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e16a:	6413      	str	r3, [r2, #64]	; 0x40
 800e16c:	4b45      	ldr	r3, [pc, #276]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e174:	60bb      	str	r3, [r7, #8]
 800e176:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800e178:	4b44      	ldr	r3, [pc, #272]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a43      	ldr	r2, [pc, #268]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e17e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e182:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e184:	f7fd f9ac 	bl	800b4e0 <HAL_GetTick>
 800e188:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e18a:	e008      	b.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e18c:	f7fd f9a8 	bl	800b4e0 <HAL_GetTick>
 800e190:	4602      	mov	r2, r0
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	1ad3      	subs	r3, r2, r3
 800e196:	2b02      	cmp	r3, #2
 800e198:	d901      	bls.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800e19a:	2303      	movs	r3, #3
 800e19c:	e06d      	b.n	800e27a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800e19e:	4b3b      	ldr	r3, [pc, #236]	; (800e28c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d0f0      	beq.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e1aa:	4b36      	ldr	r3, [pc, #216]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1b2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d02f      	beq.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e1c2:	69ba      	ldr	r2, [r7, #24]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d028      	beq.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e1c8:	4b2e      	ldr	r3, [pc, #184]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1d0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e1d2:	4b2f      	ldr	r3, [pc, #188]	; (800e290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e1d8:	4b2d      	ldr	r3, [pc, #180]	; (800e290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800e1da:	2200      	movs	r2, #0
 800e1dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800e1de:	4a29      	ldr	r2, [pc, #164]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e1e4:	4b27      	ldr	r3, [pc, #156]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e8:	f003 0301 	and.w	r3, r3, #1
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d114      	bne.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800e1f0:	f7fd f976 	bl	800b4e0 <HAL_GetTick>
 800e1f4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e1f6:	e00a      	b.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e1f8:	f7fd f972 	bl	800b4e0 <HAL_GetTick>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	f241 3288 	movw	r2, #5000	; 0x1388
 800e206:	4293      	cmp	r3, r2
 800e208:	d901      	bls.n	800e20e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800e20a:	2303      	movs	r3, #3
 800e20c:	e035      	b.n	800e27a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e20e:	4b1d      	ldr	r3, [pc, #116]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e212:	f003 0302 	and.w	r3, r3, #2
 800e216:	2b00      	cmp	r3, #0
 800e218:	d0ee      	beq.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e226:	d10d      	bne.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800e228:	4b16      	ldr	r3, [pc, #88]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e234:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e23c:	4911      	ldr	r1, [pc, #68]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e23e:	4313      	orrs	r3, r2
 800e240:	608b      	str	r3, [r1, #8]
 800e242:	e005      	b.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800e244:	4b0f      	ldr	r3, [pc, #60]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	4a0e      	ldr	r2, [pc, #56]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e24a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e24e:	6093      	str	r3, [r2, #8]
 800e250:	4b0c      	ldr	r3, [pc, #48]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e25c:	4909      	ldr	r1, [pc, #36]	; (800e284 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e25e:	4313      	orrs	r3, r2
 800e260:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 0310 	and.w	r3, r3, #16
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d004      	beq.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e274:	4b07      	ldr	r3, [pc, #28]	; (800e294 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800e276:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3720      	adds	r7, #32
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	40023800 	.word	0x40023800
 800e288:	42470070 	.word	0x42470070
 800e28c:	40007000 	.word	0x40007000
 800e290:	42470e40 	.word	0x42470e40
 800e294:	424711e0 	.word	0x424711e0

0800e298 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f003 0301 	and.w	r3, r3, #1
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d075      	beq.n	800e39c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e2b0:	4ba2      	ldr	r3, [pc, #648]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	f003 030c 	and.w	r3, r3, #12
 800e2b8:	2b04      	cmp	r3, #4
 800e2ba:	d00c      	beq.n	800e2d6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e2bc:	4b9f      	ldr	r3, [pc, #636]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800e2c4:	2b08      	cmp	r3, #8
 800e2c6:	d112      	bne.n	800e2ee <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e2c8:	4b9c      	ldr	r3, [pc, #624]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e2d4:	d10b      	bne.n	800e2ee <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e2d6:	4b99      	ldr	r3, [pc, #612]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d05b      	beq.n	800e39a <HAL_RCC_OscConfig+0x102>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d157      	bne.n	800e39a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e20b      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2f6:	d106      	bne.n	800e306 <HAL_RCC_OscConfig+0x6e>
 800e2f8:	4b90      	ldr	r3, [pc, #576]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4a8f      	ldr	r2, [pc, #572]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e2fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e302:	6013      	str	r3, [r2, #0]
 800e304:	e01d      	b.n	800e342 <HAL_RCC_OscConfig+0xaa>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e30e:	d10c      	bne.n	800e32a <HAL_RCC_OscConfig+0x92>
 800e310:	4b8a      	ldr	r3, [pc, #552]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a89      	ldr	r2, [pc, #548]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e31a:	6013      	str	r3, [r2, #0]
 800e31c:	4b87      	ldr	r3, [pc, #540]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a86      	ldr	r2, [pc, #536]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e326:	6013      	str	r3, [r2, #0]
 800e328:	e00b      	b.n	800e342 <HAL_RCC_OscConfig+0xaa>
 800e32a:	4b84      	ldr	r3, [pc, #528]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a83      	ldr	r2, [pc, #524]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e334:	6013      	str	r3, [r2, #0]
 800e336:	4b81      	ldr	r3, [pc, #516]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a80      	ldr	r2, [pc, #512]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e33c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e340:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d013      	beq.n	800e372 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e34a:	f7fd f8c9 	bl	800b4e0 <HAL_GetTick>
 800e34e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e350:	e008      	b.n	800e364 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e352:	f7fd f8c5 	bl	800b4e0 <HAL_GetTick>
 800e356:	4602      	mov	r2, r0
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	1ad3      	subs	r3, r2, r3
 800e35c:	2b64      	cmp	r3, #100	; 0x64
 800e35e:	d901      	bls.n	800e364 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800e360:	2303      	movs	r3, #3
 800e362:	e1d0      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e364:	4b75      	ldr	r3, [pc, #468]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d0f0      	beq.n	800e352 <HAL_RCC_OscConfig+0xba>
 800e370:	e014      	b.n	800e39c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e372:	f7fd f8b5 	bl	800b4e0 <HAL_GetTick>
 800e376:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e378:	e008      	b.n	800e38c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e37a:	f7fd f8b1 	bl	800b4e0 <HAL_GetTick>
 800e37e:	4602      	mov	r2, r0
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	1ad3      	subs	r3, r2, r3
 800e384:	2b64      	cmp	r3, #100	; 0x64
 800e386:	d901      	bls.n	800e38c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800e388:	2303      	movs	r3, #3
 800e38a:	e1bc      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e38c:	4b6b      	ldr	r3, [pc, #428]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e394:	2b00      	cmp	r3, #0
 800e396:	d1f0      	bne.n	800e37a <HAL_RCC_OscConfig+0xe2>
 800e398:	e000      	b.n	800e39c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e39a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f003 0302 	and.w	r3, r3, #2
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d063      	beq.n	800e470 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e3a8:	4b64      	ldr	r3, [pc, #400]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e3aa:	689b      	ldr	r3, [r3, #8]
 800e3ac:	f003 030c 	and.w	r3, r3, #12
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00b      	beq.n	800e3cc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e3b4:	4b61      	ldr	r3, [pc, #388]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e3b6:	689b      	ldr	r3, [r3, #8]
 800e3b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800e3bc:	2b08      	cmp	r3, #8
 800e3be:	d11c      	bne.n	800e3fa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e3c0:	4b5e      	ldr	r3, [pc, #376]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d116      	bne.n	800e3fa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e3cc:	4b5b      	ldr	r3, [pc, #364]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	f003 0302 	and.w	r3, r3, #2
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d005      	beq.n	800e3e4 <HAL_RCC_OscConfig+0x14c>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d001      	beq.n	800e3e4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e190      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e3e4:	4b55      	ldr	r3, [pc, #340]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	691b      	ldr	r3, [r3, #16]
 800e3f0:	00db      	lsls	r3, r3, #3
 800e3f2:	4952      	ldr	r1, [pc, #328]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e3f8:	e03a      	b.n	800e470 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d020      	beq.n	800e444 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e402:	4b4f      	ldr	r3, [pc, #316]	; (800e540 <HAL_RCC_OscConfig+0x2a8>)
 800e404:	2201      	movs	r2, #1
 800e406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e408:	f7fd f86a 	bl	800b4e0 <HAL_GetTick>
 800e40c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e40e:	e008      	b.n	800e422 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e410:	f7fd f866 	bl	800b4e0 <HAL_GetTick>
 800e414:	4602      	mov	r2, r0
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	d901      	bls.n	800e422 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800e41e:	2303      	movs	r3, #3
 800e420:	e171      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e422:	4b46      	ldr	r3, [pc, #280]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f003 0302 	and.w	r3, r3, #2
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d0f0      	beq.n	800e410 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e42e:	4b43      	ldr	r3, [pc, #268]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	691b      	ldr	r3, [r3, #16]
 800e43a:	00db      	lsls	r3, r3, #3
 800e43c:	493f      	ldr	r1, [pc, #252]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e43e:	4313      	orrs	r3, r2
 800e440:	600b      	str	r3, [r1, #0]
 800e442:	e015      	b.n	800e470 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e444:	4b3e      	ldr	r3, [pc, #248]	; (800e540 <HAL_RCC_OscConfig+0x2a8>)
 800e446:	2200      	movs	r2, #0
 800e448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e44a:	f7fd f849 	bl	800b4e0 <HAL_GetTick>
 800e44e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e450:	e008      	b.n	800e464 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e452:	f7fd f845 	bl	800b4e0 <HAL_GetTick>
 800e456:	4602      	mov	r2, r0
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	1ad3      	subs	r3, r2, r3
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d901      	bls.n	800e464 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800e460:	2303      	movs	r3, #3
 800e462:	e150      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e464:	4b35      	ldr	r3, [pc, #212]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f003 0302 	and.w	r3, r3, #2
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1f0      	bne.n	800e452 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f003 0308 	and.w	r3, r3, #8
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d030      	beq.n	800e4de <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	695b      	ldr	r3, [r3, #20]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d016      	beq.n	800e4b2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e484:	4b2f      	ldr	r3, [pc, #188]	; (800e544 <HAL_RCC_OscConfig+0x2ac>)
 800e486:	2201      	movs	r2, #1
 800e488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e48a:	f7fd f829 	bl	800b4e0 <HAL_GetTick>
 800e48e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e490:	e008      	b.n	800e4a4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e492:	f7fd f825 	bl	800b4e0 <HAL_GetTick>
 800e496:	4602      	mov	r2, r0
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	1ad3      	subs	r3, r2, r3
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	d901      	bls.n	800e4a4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800e4a0:	2303      	movs	r3, #3
 800e4a2:	e130      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e4a4:	4b25      	ldr	r3, [pc, #148]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4a8:	f003 0302 	and.w	r3, r3, #2
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d0f0      	beq.n	800e492 <HAL_RCC_OscConfig+0x1fa>
 800e4b0:	e015      	b.n	800e4de <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e4b2:	4b24      	ldr	r3, [pc, #144]	; (800e544 <HAL_RCC_OscConfig+0x2ac>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e4b8:	f7fd f812 	bl	800b4e0 <HAL_GetTick>
 800e4bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e4be:	e008      	b.n	800e4d2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e4c0:	f7fd f80e 	bl	800b4e0 <HAL_GetTick>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	2b02      	cmp	r3, #2
 800e4cc:	d901      	bls.n	800e4d2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800e4ce:	2303      	movs	r3, #3
 800e4d0:	e119      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e4d2:	4b1a      	ldr	r3, [pc, #104]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e4d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4d6:	f003 0302 	and.w	r3, r3, #2
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1f0      	bne.n	800e4c0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f003 0304 	and.w	r3, r3, #4
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f000 809f 	beq.w	800e62a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e4f0:	4b12      	ldr	r3, [pc, #72]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10f      	bne.n	800e51c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	60fb      	str	r3, [r7, #12]
 800e500:	4b0e      	ldr	r3, [pc, #56]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e504:	4a0d      	ldr	r2, [pc, #52]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e50a:	6413      	str	r3, [r2, #64]	; 0x40
 800e50c:	4b0b      	ldr	r3, [pc, #44]	; (800e53c <HAL_RCC_OscConfig+0x2a4>)
 800e50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e514:	60fb      	str	r3, [r7, #12]
 800e516:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800e518:	2301      	movs	r3, #1
 800e51a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e51c:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <HAL_RCC_OscConfig+0x2b0>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e524:	2b00      	cmp	r3, #0
 800e526:	d120      	bne.n	800e56a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e528:	4b07      	ldr	r3, [pc, #28]	; (800e548 <HAL_RCC_OscConfig+0x2b0>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a06      	ldr	r2, [pc, #24]	; (800e548 <HAL_RCC_OscConfig+0x2b0>)
 800e52e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e532:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e534:	f7fc ffd4 	bl	800b4e0 <HAL_GetTick>
 800e538:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e53a:	e010      	b.n	800e55e <HAL_RCC_OscConfig+0x2c6>
 800e53c:	40023800 	.word	0x40023800
 800e540:	42470000 	.word	0x42470000
 800e544:	42470e80 	.word	0x42470e80
 800e548:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e54c:	f7fc ffc8 	bl	800b4e0 <HAL_GetTick>
 800e550:	4602      	mov	r2, r0
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	2b02      	cmp	r3, #2
 800e558:	d901      	bls.n	800e55e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800e55a:	2303      	movs	r3, #3
 800e55c:	e0d3      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e55e:	4b6c      	ldr	r3, [pc, #432]	; (800e710 <HAL_RCC_OscConfig+0x478>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e566:	2b00      	cmp	r3, #0
 800e568:	d0f0      	beq.n	800e54c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d106      	bne.n	800e580 <HAL_RCC_OscConfig+0x2e8>
 800e572:	4b68      	ldr	r3, [pc, #416]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e576:	4a67      	ldr	r2, [pc, #412]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e578:	f043 0301 	orr.w	r3, r3, #1
 800e57c:	6713      	str	r3, [r2, #112]	; 0x70
 800e57e:	e01c      	b.n	800e5ba <HAL_RCC_OscConfig+0x322>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	2b05      	cmp	r3, #5
 800e586:	d10c      	bne.n	800e5a2 <HAL_RCC_OscConfig+0x30a>
 800e588:	4b62      	ldr	r3, [pc, #392]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58c:	4a61      	ldr	r2, [pc, #388]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e58e:	f043 0304 	orr.w	r3, r3, #4
 800e592:	6713      	str	r3, [r2, #112]	; 0x70
 800e594:	4b5f      	ldr	r3, [pc, #380]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e598:	4a5e      	ldr	r2, [pc, #376]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e59a:	f043 0301 	orr.w	r3, r3, #1
 800e59e:	6713      	str	r3, [r2, #112]	; 0x70
 800e5a0:	e00b      	b.n	800e5ba <HAL_RCC_OscConfig+0x322>
 800e5a2:	4b5c      	ldr	r3, [pc, #368]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5a6:	4a5b      	ldr	r2, [pc, #364]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e5a8:	f023 0301 	bic.w	r3, r3, #1
 800e5ac:	6713      	str	r3, [r2, #112]	; 0x70
 800e5ae:	4b59      	ldr	r3, [pc, #356]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5b2:	4a58      	ldr	r2, [pc, #352]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e5b4:	f023 0304 	bic.w	r3, r3, #4
 800e5b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d015      	beq.n	800e5ee <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5c2:	f7fc ff8d 	bl	800b4e0 <HAL_GetTick>
 800e5c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e5c8:	e00a      	b.n	800e5e0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e5ca:	f7fc ff89 	bl	800b4e0 <HAL_GetTick>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	1ad3      	subs	r3, r2, r3
 800e5d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d901      	bls.n	800e5e0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	e092      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e5e0:	4b4c      	ldr	r3, [pc, #304]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e5e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e4:	f003 0302 	and.w	r3, r3, #2
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d0ee      	beq.n	800e5ca <HAL_RCC_OscConfig+0x332>
 800e5ec:	e014      	b.n	800e618 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5ee:	f7fc ff77 	bl	800b4e0 <HAL_GetTick>
 800e5f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e5f4:	e00a      	b.n	800e60c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e5f6:	f7fc ff73 	bl	800b4e0 <HAL_GetTick>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	1ad3      	subs	r3, r2, r3
 800e600:	f241 3288 	movw	r2, #5000	; 0x1388
 800e604:	4293      	cmp	r3, r2
 800e606:	d901      	bls.n	800e60c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800e608:	2303      	movs	r3, #3
 800e60a:	e07c      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e60c:	4b41      	ldr	r3, [pc, #260]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e610:	f003 0302 	and.w	r3, r3, #2
 800e614:	2b00      	cmp	r3, #0
 800e616:	d1ee      	bne.n	800e5f6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e618:	7dfb      	ldrb	r3, [r7, #23]
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d105      	bne.n	800e62a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e61e:	4b3d      	ldr	r3, [pc, #244]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e622:	4a3c      	ldr	r2, [pc, #240]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e628:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	699b      	ldr	r3, [r3, #24]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d068      	beq.n	800e704 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e632:	4b38      	ldr	r3, [pc, #224]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e634:	689b      	ldr	r3, [r3, #8]
 800e636:	f003 030c 	and.w	r3, r3, #12
 800e63a:	2b08      	cmp	r3, #8
 800e63c:	d060      	beq.n	800e700 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	699b      	ldr	r3, [r3, #24]
 800e642:	2b02      	cmp	r3, #2
 800e644:	d145      	bne.n	800e6d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e646:	4b34      	ldr	r3, [pc, #208]	; (800e718 <HAL_RCC_OscConfig+0x480>)
 800e648:	2200      	movs	r2, #0
 800e64a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e64c:	f7fc ff48 	bl	800b4e0 <HAL_GetTick>
 800e650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e652:	e008      	b.n	800e666 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e654:	f7fc ff44 	bl	800b4e0 <HAL_GetTick>
 800e658:	4602      	mov	r2, r0
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	1ad3      	subs	r3, r2, r3
 800e65e:	2b02      	cmp	r3, #2
 800e660:	d901      	bls.n	800e666 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800e662:	2303      	movs	r3, #3
 800e664:	e04f      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e666:	4b2b      	ldr	r3, [pc, #172]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1f0      	bne.n	800e654 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	69da      	ldr	r2, [r3, #28]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6a1b      	ldr	r3, [r3, #32]
 800e67a:	431a      	orrs	r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e680:	019b      	lsls	r3, r3, #6
 800e682:	431a      	orrs	r2, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e688:	085b      	lsrs	r3, r3, #1
 800e68a:	3b01      	subs	r3, #1
 800e68c:	041b      	lsls	r3, r3, #16
 800e68e:	431a      	orrs	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e694:	061b      	lsls	r3, r3, #24
 800e696:	431a      	orrs	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e69c:	071b      	lsls	r3, r3, #28
 800e69e:	491d      	ldr	r1, [pc, #116]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e6a4:	4b1c      	ldr	r3, [pc, #112]	; (800e718 <HAL_RCC_OscConfig+0x480>)
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6aa:	f7fc ff19 	bl	800b4e0 <HAL_GetTick>
 800e6ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e6b0:	e008      	b.n	800e6c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e6b2:	f7fc ff15 	bl	800b4e0 <HAL_GetTick>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d901      	bls.n	800e6c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800e6c0:	2303      	movs	r3, #3
 800e6c2:	e020      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e6c4:	4b13      	ldr	r3, [pc, #76]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d0f0      	beq.n	800e6b2 <HAL_RCC_OscConfig+0x41a>
 800e6d0:	e018      	b.n	800e704 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e6d2:	4b11      	ldr	r3, [pc, #68]	; (800e718 <HAL_RCC_OscConfig+0x480>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6d8:	f7fc ff02 	bl	800b4e0 <HAL_GetTick>
 800e6dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e6de:	e008      	b.n	800e6f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e6e0:	f7fc fefe 	bl	800b4e0 <HAL_GetTick>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	1ad3      	subs	r3, r2, r3
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	d901      	bls.n	800e6f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800e6ee:	2303      	movs	r3, #3
 800e6f0:	e009      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e6f2:	4b08      	ldr	r3, [pc, #32]	; (800e714 <HAL_RCC_OscConfig+0x47c>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1f0      	bne.n	800e6e0 <HAL_RCC_OscConfig+0x448>
 800e6fe:	e001      	b.n	800e704 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800e700:	2301      	movs	r3, #1
 800e702:	e000      	b.n	800e706 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800e704:	2300      	movs	r3, #0
}
 800e706:	4618      	mov	r0, r3
 800e708:	3718      	adds	r7, #24
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	40007000 	.word	0x40007000
 800e714:	40023800 	.word	0x40023800
 800e718:	42470060 	.word	0x42470060

0800e71c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d101      	bne.n	800e72e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e72a:	2301      	movs	r3, #1
 800e72c:	e022      	b.n	800e774 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e734:	b2db      	uxtb	r3, r3
 800e736:	2b00      	cmp	r3, #0
 800e738:	d105      	bne.n	800e746 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f7f8 ffdf 	bl	8007704 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2203      	movs	r2, #3
 800e74a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 f814 	bl	800e77c <HAL_SD_InitCard>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	d001      	beq.n	800e75e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e75a:	2301      	movs	r3, #1
 800e75c:	e00a      	b.n	800e774 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2201      	movs	r2, #1
 800e76e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e772:	2300      	movs	r3, #0
}
 800e774:	4618      	mov	r0, r3
 800e776:	3708      	adds	r7, #8
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e77c:	b5b0      	push	{r4, r5, r7, lr}
 800e77e:	b08e      	sub	sp, #56	; 0x38
 800e780:	af04      	add	r7, sp, #16
 800e782:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800e784:	2300      	movs	r3, #0
 800e786:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800e788:	2300      	movs	r3, #0
 800e78a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800e78c:	2300      	movs	r3, #0
 800e78e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800e790:	2300      	movs	r3, #0
 800e792:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800e794:	2300      	movs	r3, #0
 800e796:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800e798:	2376      	movs	r3, #118	; 0x76
 800e79a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681d      	ldr	r5, [r3, #0]
 800e7a0:	466c      	mov	r4, sp
 800e7a2:	f107 0314 	add.w	r3, r7, #20
 800e7a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e7aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e7ae:	f107 0308 	add.w	r3, r7, #8
 800e7b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	f003 fa87 	bl	8011cc8 <SDIO_Init>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e031      	b.n	800e830 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800e7cc:	4b1a      	ldr	r3, [pc, #104]	; (800e838 <HAL_SD_InitCard+0xbc>)
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f003 fabf 	bl	8011d5a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800e7dc:	4b16      	ldr	r3, [pc, #88]	; (800e838 <HAL_SD_InitCard+0xbc>)
 800e7de:	2201      	movs	r2, #1
 800e7e0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 ffc6 	bl	800f774 <SD_PowerON>
 800e7e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7ea:	6a3b      	ldr	r3, [r7, #32]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d00b      	beq.n	800e808 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7fc:	6a3b      	ldr	r3, [r7, #32]
 800e7fe:	431a      	orrs	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e804:	2301      	movs	r3, #1
 800e806:	e013      	b.n	800e830 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 fee5 	bl	800f5d8 <SD_InitCard>
 800e80e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00b      	beq.n	800e82e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2201      	movs	r2, #1
 800e81a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	431a      	orrs	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	e000      	b.n	800e830 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800e82e:	2300      	movs	r3, #0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3728      	adds	r7, #40	; 0x28
 800e834:	46bd      	mov	sp, r7
 800e836:	bdb0      	pop	{r4, r5, r7, pc}
 800e838:	422580a0 	.word	0x422580a0

0800e83c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08c      	sub	sp, #48	; 0x30
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	607a      	str	r2, [r7, #4]
 800e848:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d107      	bne.n	800e864 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e858:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e860:	2301      	movs	r3, #1
 800e862:	e0c7      	b.n	800e9f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	f040 80c0 	bne.w	800e9f2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2200      	movs	r2, #0
 800e876:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	441a      	add	r2, r3
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e882:	429a      	cmp	r2, r3
 800e884:	d907      	bls.n	800e896 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e88a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e892:	2301      	movs	r3, #1
 800e894:	e0ae      	b.n	800e9f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2203      	movs	r2, #3
 800e89a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e8b4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ba:	4a50      	ldr	r2, [pc, #320]	; (800e9fc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e8bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8c2:	4a4f      	ldr	r2, [pc, #316]	; (800ea00 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800e8c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	3380      	adds	r3, #128	; 0x80
 800e8d8:	4619      	mov	r1, r3
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	025b      	lsls	r3, r3, #9
 800e8e0:	089b      	lsrs	r3, r3, #2
 800e8e2:	f7fd fbef 	bl	800c0c4 <HAL_DMA_Start_IT>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d017      	beq.n	800e91c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e8fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a40      	ldr	r2, [pc, #256]	; (800ea04 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e902:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e908:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2201      	movs	r2, #1
 800e914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e918:	2301      	movs	r3, #1
 800e91a:	e06b      	b.n	800e9f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e91c:	4b3a      	ldr	r3, [pc, #232]	; (800ea08 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800e91e:	2201      	movs	r2, #1
 800e920:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e926:	2b01      	cmp	r3, #1
 800e928:	d002      	beq.n	800e930 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800e92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92c:	025b      	lsls	r3, r3, #9
 800e92e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e938:	4618      	mov	r0, r3
 800e93a:	f003 faa1 	bl	8011e80 <SDMMC_CmdBlockLength>
 800e93e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800e940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00f      	beq.n	800e966 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a2e      	ldr	r2, [pc, #184]	; (800ea04 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e94c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	431a      	orrs	r2, r3
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2201      	movs	r2, #1
 800e95e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	e046      	b.n	800e9f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e966:	f04f 33ff 	mov.w	r3, #4294967295
 800e96a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	025b      	lsls	r3, r3, #9
 800e970:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e972:	2390      	movs	r3, #144	; 0x90
 800e974:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e976:	2302      	movs	r3, #2
 800e978:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e97a:	2300      	movs	r3, #0
 800e97c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800e97e:	2301      	movs	r3, #1
 800e980:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f107 0210 	add.w	r2, r7, #16
 800e98a:	4611      	mov	r1, r2
 800e98c:	4618      	mov	r0, r3
 800e98e:	f003 fa4b 	bl	8011e28 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	2b01      	cmp	r3, #1
 800e996:	d90a      	bls.n	800e9ae <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2282      	movs	r2, #130	; 0x82
 800e99c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f003 faaf 	bl	8011f08 <SDMMC_CmdReadMultiBlock>
 800e9aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e9ac:	e009      	b.n	800e9c2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2281      	movs	r2, #129	; 0x81
 800e9b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f003 fa82 	bl	8011ec4 <SDMMC_CmdReadSingleBlock>
 800e9c0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d012      	beq.n	800e9ee <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a0d      	ldr	r2, [pc, #52]	; (800ea04 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800e9ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d6:	431a      	orrs	r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e002      	b.n	800e9f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	e000      	b.n	800e9f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800e9f2:	2302      	movs	r3, #2
  }
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3730      	adds	r7, #48	; 0x30
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	0800f3e7 	.word	0x0800f3e7
 800ea00:	0800f459 	.word	0x0800f459
 800ea04:	004005ff 	.word	0x004005ff
 800ea08:	4225858c 	.word	0x4225858c

0800ea0c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b08c      	sub	sp, #48	; 0x30
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
 800ea18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d107      	bne.n	800ea34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ea30:	2301      	movs	r3, #1
 800ea32:	e0ca      	b.n	800ebca <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	f040 80c3 	bne.w	800ebc8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2200      	movs	r2, #0
 800ea46:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ea48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	441a      	add	r2, r3
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d907      	bls.n	800ea66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ea62:	2301      	movs	r3, #1
 800ea64:	e0b1      	b.n	800ebca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2203      	movs	r2, #3
 800ea6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2200      	movs	r2, #0
 800ea74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f042 021a 	orr.w	r2, r2, #26
 800ea84:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea8a:	4a52      	ldr	r2, [pc, #328]	; (800ebd4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ea8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea92:	4a51      	ldr	r2, [pc, #324]	; (800ebd8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800ea94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d002      	beq.n	800eaac <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800eaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa8:	025b      	lsls	r3, r3, #9
 800eaaa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eab4:	4618      	mov	r0, r3
 800eab6:	f003 f9e3 	bl	8011e80 <SDMMC_CmdBlockLength>
 800eaba:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00f      	beq.n	800eae2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	4a45      	ldr	r2, [pc, #276]	; (800ebdc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800eac8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead0:	431a      	orrs	r2, r3
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2201      	movs	r2, #1
 800eada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	e073      	b.n	800ebca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d90a      	bls.n	800eafe <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	22a0      	movs	r2, #160	; 0xa0
 800eaec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f003 fa4b 	bl	8011f90 <SDMMC_CmdWriteMultiBlock>
 800eafa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800eafc:	e009      	b.n	800eb12 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2290      	movs	r2, #144	; 0x90
 800eb02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f003 fa1e 	bl	8011f4c <SDMMC_CmdWriteSingleBlock>
 800eb10:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d012      	beq.n	800eb3e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4a2f      	ldr	r2, [pc, #188]	; (800ebdc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800eb1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb26:	431a      	orrs	r2, r3
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2200      	movs	r2, #0
 800eb38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	e045      	b.n	800ebca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800eb3e:	4b28      	ldr	r3, [pc, #160]	; (800ebe0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800eb40:	2201      	movs	r2, #1
 800eb42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800eb48:	68b9      	ldr	r1, [r7, #8]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	3380      	adds	r3, #128	; 0x80
 800eb50:	461a      	mov	r2, r3
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	025b      	lsls	r3, r3, #9
 800eb56:	089b      	lsrs	r3, r3, #2
 800eb58:	f7fd fab4 	bl	800c0c4 <HAL_DMA_Start_IT>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d01a      	beq.n	800eb98 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f022 021a 	bic.w	r2, r2, #26
 800eb70:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4a19      	ldr	r2, [pc, #100]	; (800ebdc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800eb78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2200      	movs	r2, #0
 800eb92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800eb94:	2301      	movs	r3, #1
 800eb96:	e018      	b.n	800ebca <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eb98:	f04f 33ff 	mov.w	r3, #4294967295
 800eb9c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	025b      	lsls	r3, r3, #9
 800eba2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800eba4:	2390      	movs	r3, #144	; 0x90
 800eba6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ebac:	2300      	movs	r3, #0
 800ebae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f107 0210 	add.w	r2, r7, #16
 800ebbc:	4611      	mov	r1, r2
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f003 f932 	bl	8011e28 <SDIO_ConfigData>

      return HAL_OK;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	e000      	b.n	800ebca <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ebc8:	2302      	movs	r3, #2
  }
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3730      	adds	r7, #48	; 0x30
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	0800f3bd 	.word	0x0800f3bd
 800ebd8:	0800f459 	.word	0x0800f459
 800ebdc:	004005ff 	.word	0x004005ff
 800ebe0:	4225858c 	.word	0x4225858c

0800ebe4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebf0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d008      	beq.n	800ec12 <HAL_SD_IRQHandler+0x2e>
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f003 0308 	and.w	r3, r3, #8
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d003      	beq.n	800ec12 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f000 ffc8 	bl	800fba0 <SD_Read_IT>
 800ec10:	e155      	b.n	800eebe <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f000 808f 	beq.w	800ed40 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec2a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	6812      	ldr	r2, [r2, #0]
 800ec36:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ec3a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ec3e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f022 0201 	bic.w	r2, r2, #1
 800ec4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f003 0308 	and.w	r3, r3, #8
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d039      	beq.n	800ecce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f003 0302 	and.w	r3, r3, #2
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d104      	bne.n	800ec6e <HAL_SD_IRQHandler+0x8a>
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f003 0320 	and.w	r3, r3, #32
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d011      	beq.n	800ec92 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f003 f9ae 	bl	8011fd4 <SDMMC_CmdStopTransfer>
 800ec78:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d008      	beq.n	800ec92 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	431a      	orrs	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 f91f 	bl	800eed0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f240 523a 	movw	r2, #1338	; 0x53a
 800ec9a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f003 0301 	and.w	r3, r3, #1
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d104      	bne.n	800ecbe <HAL_SD_IRQHandler+0xda>
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f003 0302 	and.w	r3, r3, #2
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d003      	beq.n	800ecc6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f003 fe04 	bl	80128cc <HAL_SD_RxCpltCallback>
 800ecc4:	e0fb      	b.n	800eebe <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f003 fdf6 	bl	80128b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800eccc:	e0f7      	b.n	800eebe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f000 80f2 	beq.w	800eebe <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f003 0320 	and.w	r3, r3, #32
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d011      	beq.n	800ed08 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f003 f973 	bl	8011fd4 <SDMMC_CmdStopTransfer>
 800ecee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d008      	beq.n	800ed08 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	431a      	orrs	r2, r3
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f8e4 	bl	800eed0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f003 0301 	and.w	r3, r3, #1
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f040 80d5 	bne.w	800eebe <HAL_SD_IRQHandler+0x2da>
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f003 0302 	and.w	r3, r3, #2
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f040 80cf 	bne.w	800eebe <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f022 0208 	bic.w	r2, r2, #8
 800ed2e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2201      	movs	r2, #1
 800ed34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f003 fdbd 	bl	80128b8 <HAL_SD_TxCpltCallback>
}
 800ed3e:	e0be      	b.n	800eebe <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d008      	beq.n	800ed60 <HAL_SD_IRQHandler+0x17c>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f003 0308 	and.w	r3, r3, #8
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d003      	beq.n	800ed60 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f000 ff72 	bl	800fc42 <SD_Write_IT>
 800ed5e:	e0ae      	b.n	800eebe <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed66:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 80a7 	beq.w	800eebe <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed76:	f003 0302 	and.w	r3, r3, #2
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d005      	beq.n	800ed8a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed82:	f043 0202 	orr.w	r2, r3, #2
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed90:	f003 0308 	and.w	r3, r3, #8
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d005      	beq.n	800eda4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed9c:	f043 0208 	orr.w	r2, r3, #8
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edaa:	f003 0320 	and.w	r3, r3, #32
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d005      	beq.n	800edbe <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb6:	f043 0220 	orr.w	r2, r3, #32
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edc4:	f003 0310 	and.w	r3, r3, #16
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d005      	beq.n	800edd8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edd0:	f043 0210 	orr.w	r2, r3, #16
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f240 523a 	movw	r2, #1338	; 0x53a
 800ede0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800edf0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4618      	mov	r0, r3
 800edf8:	f003 f8ec 	bl	8011fd4 <SDMMC_CmdStopTransfer>
 800edfc:	4602      	mov	r2, r0
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee02:	431a      	orrs	r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f003 0308 	and.w	r3, r3, #8
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d00a      	beq.n	800ee28 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2201      	movs	r2, #1
 800ee16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f000 f855 	bl	800eed0 <HAL_SD_ErrorCallback>
}
 800ee26:	e04a      	b.n	800eebe <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d045      	beq.n	800eebe <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f003 0310 	and.w	r3, r3, #16
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d104      	bne.n	800ee46 <HAL_SD_IRQHandler+0x262>
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f003 0320 	and.w	r3, r3, #32
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d011      	beq.n	800ee6a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee4a:	4a1f      	ldr	r2, [pc, #124]	; (800eec8 <HAL_SD_IRQHandler+0x2e4>)
 800ee4c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fd f98e 	bl	800c174 <HAL_DMA_Abort_IT>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d02f      	beq.n	800eebe <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee62:	4618      	mov	r0, r3
 800ee64:	f000 fb4a 	bl	800f4fc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ee68:	e029      	b.n	800eebe <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f003 0301 	and.w	r3, r3, #1
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d104      	bne.n	800ee7e <HAL_SD_IRQHandler+0x29a>
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f003 0302 	and.w	r3, r3, #2
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d011      	beq.n	800eea2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee82:	4a12      	ldr	r2, [pc, #72]	; (800eecc <HAL_SD_IRQHandler+0x2e8>)
 800ee84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fd f972 	bl	800c174 <HAL_DMA_Abort_IT>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d013      	beq.n	800eebe <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f000 fb65 	bl	800f56a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800eea0:	e00d      	b.n	800eebe <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f003 fcf4 	bl	80128a4 <HAL_SD_AbortCallback>
}
 800eebc:	e7ff      	b.n	800eebe <HAL_SD_IRQHandler+0x2da>
 800eebe:	bf00      	nop
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	0800f4fd 	.word	0x0800f4fd
 800eecc:	0800f56b 	.word	0x0800f56b

0800eed0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800eed8:	bf00      	nop
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eef2:	0f9b      	lsrs	r3, r3, #30
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eefe:	0e9b      	lsrs	r3, r3, #26
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	f003 030f 	and.w	r3, r3, #15
 800ef06:	b2da      	uxtb	r2, r3
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef10:	0e1b      	lsrs	r3, r3, #24
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	f003 0303 	and.w	r3, r3, #3
 800ef18:	b2da      	uxtb	r2, r3
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef22:	0c1b      	lsrs	r3, r3, #16
 800ef24:	b2da      	uxtb	r2, r3
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef2e:	0a1b      	lsrs	r3, r3, #8
 800ef30:	b2da      	uxtb	r2, r3
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef3a:	b2da      	uxtb	r2, r3
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef44:	0d1b      	lsrs	r3, r3, #20
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef50:	0c1b      	lsrs	r3, r3, #16
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	f003 030f 	and.w	r3, r3, #15
 800ef58:	b2da      	uxtb	r2, r3
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef62:	0bdb      	lsrs	r3, r3, #15
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	f003 0301 	and.w	r3, r3, #1
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef74:	0b9b      	lsrs	r3, r3, #14
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	f003 0301 	and.w	r3, r3, #1
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef86:	0b5b      	lsrs	r3, r3, #13
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	f003 0301 	and.w	r3, r3, #1
 800ef8e:	b2da      	uxtb	r2, r3
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef98:	0b1b      	lsrs	r3, r3, #12
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	f003 0301 	and.w	r3, r3, #1
 800efa0:	b2da      	uxtb	r2, r3
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	2200      	movs	r2, #0
 800efaa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d163      	bne.n	800f07c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efb8:	009a      	lsls	r2, r3, #2
 800efba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800efbe:	4013      	ands	r3, r2
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800efc4:	0f92      	lsrs	r2, r2, #30
 800efc6:	431a      	orrs	r2, r3
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efd0:	0edb      	lsrs	r3, r3, #27
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	f003 0307 	and.w	r3, r3, #7
 800efd8:	b2da      	uxtb	r2, r3
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efe2:	0e1b      	lsrs	r3, r3, #24
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	f003 0307 	and.w	r3, r3, #7
 800efea:	b2da      	uxtb	r2, r3
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eff4:	0d5b      	lsrs	r3, r3, #21
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	f003 0307 	and.w	r3, r3, #7
 800effc:	b2da      	uxtb	r2, r3
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f006:	0c9b      	lsrs	r3, r3, #18
 800f008:	b2db      	uxtb	r3, r3
 800f00a:	f003 0307 	and.w	r3, r3, #7
 800f00e:	b2da      	uxtb	r2, r3
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f018:	0bdb      	lsrs	r3, r3, #15
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	f003 0307 	and.w	r3, r3, #7
 800f020:	b2da      	uxtb	r2, r3
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	691b      	ldr	r3, [r3, #16]
 800f02a:	1c5a      	adds	r2, r3, #1
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	7e1b      	ldrb	r3, [r3, #24]
 800f034:	b2db      	uxtb	r3, r3
 800f036:	f003 0307 	and.w	r3, r3, #7
 800f03a:	3302      	adds	r3, #2
 800f03c:	2201      	movs	r2, #1
 800f03e:	fa02 f303 	lsl.w	r3, r2, r3
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800f046:	fb02 f203 	mul.w	r2, r2, r3
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	7a1b      	ldrb	r3, [r3, #8]
 800f052:	b2db      	uxtb	r3, r3
 800f054:	f003 030f 	and.w	r3, r3, #15
 800f058:	2201      	movs	r2, #1
 800f05a:	409a      	lsls	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800f068:	0a52      	lsrs	r2, r2, #9
 800f06a:	fb02 f203 	mul.w	r2, r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f078:	661a      	str	r2, [r3, #96]	; 0x60
 800f07a:	e031      	b.n	800f0e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f080:	2b01      	cmp	r3, #1
 800f082:	d11d      	bne.n	800f0c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f088:	041b      	lsls	r3, r3, #16
 800f08a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f092:	0c1b      	lsrs	r3, r3, #16
 800f094:	431a      	orrs	r2, r3
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	691b      	ldr	r3, [r3, #16]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	029a      	lsls	r2, r3, #10
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	661a      	str	r2, [r3, #96]	; 0x60
 800f0be:	e00f      	b.n	800f0e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4a58      	ldr	r2, [pc, #352]	; (800f228 <HAL_SD_GetCardCSD+0x344>)
 800f0c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e09d      	b.n	800f21c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0e4:	0b9b      	lsrs	r3, r3, #14
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	f003 0301 	and.w	r3, r3, #1
 800f0ec:	b2da      	uxtb	r2, r3
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f6:	09db      	lsrs	r3, r3, #7
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f10e:	b2da      	uxtb	r2, r3
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f118:	0fdb      	lsrs	r3, r3, #31
 800f11a:	b2da      	uxtb	r2, r3
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f124:	0f5b      	lsrs	r3, r3, #29
 800f126:	b2db      	uxtb	r3, r3
 800f128:	f003 0303 	and.w	r3, r3, #3
 800f12c:	b2da      	uxtb	r2, r3
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f136:	0e9b      	lsrs	r3, r3, #26
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	f003 0307 	and.w	r3, r3, #7
 800f13e:	b2da      	uxtb	r2, r3
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f148:	0d9b      	lsrs	r3, r3, #22
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	f003 030f 	and.w	r3, r3, #15
 800f150:	b2da      	uxtb	r2, r3
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f15a:	0d5b      	lsrs	r3, r3, #21
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	f003 0301 	and.w	r3, r3, #1
 800f162:	b2da      	uxtb	r2, r3
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	2200      	movs	r2, #0
 800f16e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f176:	0c1b      	lsrs	r3, r3, #16
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	f003 0301 	and.w	r3, r3, #1
 800f17e:	b2da      	uxtb	r2, r3
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f18a:	0bdb      	lsrs	r3, r3, #15
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	f003 0301 	and.w	r3, r3, #1
 800f192:	b2da      	uxtb	r2, r3
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f19e:	0b9b      	lsrs	r3, r3, #14
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	f003 0301 	and.w	r3, r3, #1
 800f1a6:	b2da      	uxtb	r2, r3
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1b2:	0b5b      	lsrs	r3, r3, #13
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	f003 0301 	and.w	r3, r3, #1
 800f1ba:	b2da      	uxtb	r2, r3
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1c6:	0b1b      	lsrs	r3, r3, #12
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	f003 0301 	and.w	r3, r3, #1
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1da:	0a9b      	lsrs	r3, r3, #10
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	f003 0303 	and.w	r3, r3, #3
 800f1e2:	b2da      	uxtb	r2, r3
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1ee:	0a1b      	lsrs	r3, r3, #8
 800f1f0:	b2db      	uxtb	r3, r3
 800f1f2:	f003 0303 	and.w	r3, r3, #3
 800f1f6:	b2da      	uxtb	r2, r3
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f202:	085b      	lsrs	r3, r3, #1
 800f204:	b2db      	uxtb	r3, r3
 800f206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f20a:	b2da      	uxtb	r2, r3
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	2201      	movs	r2, #1
 800f216:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800f21a:	2300      	movs	r3, #0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	370c      	adds	r7, #12
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr
 800f228:	004005ff 	.word	0x004005ff

0800f22c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800f276:	2300      	movs	r3, #0
}
 800f278:	4618      	mov	r0, r3
 800f27a:	370c      	adds	r7, #12
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr

0800f284 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800f284:	b5b0      	push	{r4, r5, r7, lr}
 800f286:	b08e      	sub	sp, #56	; 0x38
 800f288:	af04      	add	r7, sp, #16
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2203      	movs	r2, #3
 800f292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	d02e      	beq.n	800f2fc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2a4:	d106      	bne.n	800f2b4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	639a      	str	r2, [r3, #56]	; 0x38
 800f2b2:	e029      	b.n	800f308 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2ba:	d10a      	bne.n	800f2d2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 fb0f 	bl	800f8e0 <SD_WideBus_Enable>
 800f2c2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ca:	431a      	orrs	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	639a      	str	r2, [r3, #56]	; 0x38
 800f2d0:	e01a      	b.n	800f308 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d10a      	bne.n	800f2ee <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f000 fb4c 	bl	800f976 <SD_WideBus_Disable>
 800f2de:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e6:	431a      	orrs	r2, r3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	639a      	str	r2, [r3, #56]	; 0x38
 800f2ec:	e00c      	b.n	800f308 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	639a      	str	r2, [r3, #56]	; 0x38
 800f2fa:	e005      	b.n	800f308 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f300:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d009      	beq.n	800f324 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a18      	ldr	r2, [pc, #96]	; (800f378 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800f316:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2201      	movs	r2, #1
 800f31c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800f320:	2301      	movs	r3, #1
 800f322:	e024      	b.n	800f36e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	68db      	ldr	r3, [r3, #12]
 800f334:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	695b      	ldr	r3, [r3, #20]
 800f33e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	699b      	ldr	r3, [r3, #24]
 800f344:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681d      	ldr	r5, [r3, #0]
 800f34a:	466c      	mov	r4, sp
 800f34c:	f107 0318 	add.w	r3, r7, #24
 800f350:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f358:	f107 030c 	add.w	r3, r7, #12
 800f35c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f35e:	4628      	mov	r0, r5
 800f360:	f002 fcb2 	bl	8011cc8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2201      	movs	r2, #1
 800f368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3728      	adds	r7, #40	; 0x28
 800f372:	46bd      	mov	sp, r7
 800f374:	bdb0      	pop	{r4, r5, r7, pc}
 800f376:	bf00      	nop
 800f378:	004005ff 	.word	0x004005ff

0800f37c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800f388:	f107 030c 	add.w	r3, r7, #12
 800f38c:	4619      	mov	r1, r3
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 fa7e 	bl	800f890 <SD_SendStatus>
 800f394:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d005      	beq.n	800f3a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	431a      	orrs	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	0a5b      	lsrs	r3, r3, #9
 800f3ac:	f003 030f 	and.w	r3, r3, #15
 800f3b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800f3b2:	693b      	ldr	r3, [r7, #16]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3718      	adds	r7, #24
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3c8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f3d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f3da:	bf00      	nop
 800f3dc:	3714      	adds	r7, #20
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b084      	sub	sp, #16
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3f2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3f8:	2b82      	cmp	r3, #130	; 0x82
 800f3fa:	d111      	bne.n	800f420 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4618      	mov	r0, r3
 800f402:	f002 fde7 	bl	8011fd4 <SDMMC_CmdStopTransfer>
 800f406:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d008      	beq.n	800f420 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	431a      	orrs	r2, r3
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f7ff fd58 	bl	800eed0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f022 0208 	bic.w	r2, r2, #8
 800f42e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f240 523a 	movw	r2, #1338	; 0x53a
 800f438:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2201      	movs	r2, #1
 800f43e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2200      	movs	r2, #0
 800f446:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f003 fa3f 	bl	80128cc <HAL_SD_RxCpltCallback>
#endif
}
 800f44e:	bf00      	nop
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
	...

0800f458 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b086      	sub	sp, #24
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f464:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7fd f830 	bl	800c4cc <HAL_DMA_GetError>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d03e      	beq.n	800f4f0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f478:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f47e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f480:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	2b01      	cmp	r3, #1
 800f486:	d002      	beq.n	800f48e <SD_DMAError+0x36>
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d12d      	bne.n	800f4ea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	4a19      	ldr	r2, [pc, #100]	; (800f4f8 <SD_DMAError+0xa0>)
 800f494:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800f4a4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800f4b2:	6978      	ldr	r0, [r7, #20]
 800f4b4:	f7ff ff62 	bl	800f37c <HAL_SD_GetCardState>
 800f4b8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2b06      	cmp	r3, #6
 800f4be:	d002      	beq.n	800f4c6 <SD_DMAError+0x6e>
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	2b05      	cmp	r3, #5
 800f4c4:	d10a      	bne.n	800f4dc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f002 fd82 	bl	8011fd4 <SDMMC_CmdStopTransfer>
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d6:	431a      	orrs	r2, r3
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800f4ea:	6978      	ldr	r0, [r7, #20]
 800f4ec:	f7ff fcf0 	bl	800eed0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800f4f0:	bf00      	nop
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	004005ff 	.word	0x004005ff

0800f4fc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f508:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f240 523a 	movw	r2, #1338	; 0x53a
 800f512:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f7ff ff31 	bl	800f37c <HAL_SD_GetCardState>
 800f51a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2200      	movs	r2, #0
 800f528:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	2b06      	cmp	r3, #6
 800f52e:	d002      	beq.n	800f536 <SD_DMATxAbort+0x3a>
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2b05      	cmp	r3, #5
 800f534:	d10a      	bne.n	800f54c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4618      	mov	r0, r3
 800f53c:	f002 fd4a 	bl	8011fd4 <SDMMC_CmdStopTransfer>
 800f540:	4602      	mov	r2, r0
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f546:	431a      	orrs	r2, r3
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f550:	2b00      	cmp	r3, #0
 800f552:	d103      	bne.n	800f55c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	f003 f9a5 	bl	80128a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f55a:	e002      	b.n	800f562 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f7ff fcb7 	bl	800eed0 <HAL_SD_ErrorCallback>
}
 800f562:	bf00      	nop
 800f564:	3710      	adds	r7, #16
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b084      	sub	sp, #16
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f576:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f240 523a 	movw	r2, #1338	; 0x53a
 800f580:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f7ff fefa 	bl	800f37c <HAL_SD_GetCardState>
 800f588:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2201      	movs	r2, #1
 800f58e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2200      	movs	r2, #0
 800f596:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	2b06      	cmp	r3, #6
 800f59c:	d002      	beq.n	800f5a4 <SD_DMARxAbort+0x3a>
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	2b05      	cmp	r3, #5
 800f5a2:	d10a      	bne.n	800f5ba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f002 fd13 	bl	8011fd4 <SDMMC_CmdStopTransfer>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5b4:	431a      	orrs	r2, r3
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d103      	bne.n	800f5ca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f003 f96e 	bl	80128a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800f5c8:	e002      	b.n	800f5d0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f7ff fc80 	bl	800eed0 <HAL_SD_ErrorCallback>
}
 800f5d0:	bf00      	nop
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f5d8:	b5b0      	push	{r4, r5, r7, lr}
 800f5da:	b094      	sub	sp, #80	; 0x50
 800f5dc:	af04      	add	r7, sp, #16
 800f5de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f002 fbc5 	bl	8011d78 <SDIO_GetPowerState>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d102      	bne.n	800f5fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f5f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f5f8:	e0b7      	b.n	800f76a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5fe:	2b03      	cmp	r3, #3
 800f600:	d02f      	beq.n	800f662 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4618      	mov	r0, r3
 800f608:	f002 fdee 	bl	80121e8 <SDMMC_CmdSendCID>
 800f60c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <SD_InitCard+0x40>
    {
      return errorstate;
 800f614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f616:	e0a8      	b.n	800f76a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2100      	movs	r1, #0
 800f61e:	4618      	mov	r0, r3
 800f620:	f002 fbef 	bl	8011e02 <SDIO_GetResponse>
 800f624:	4602      	mov	r2, r0
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2104      	movs	r1, #4
 800f630:	4618      	mov	r0, r3
 800f632:	f002 fbe6 	bl	8011e02 <SDIO_GetResponse>
 800f636:	4602      	mov	r2, r0
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2108      	movs	r1, #8
 800f642:	4618      	mov	r0, r3
 800f644:	f002 fbdd 	bl	8011e02 <SDIO_GetResponse>
 800f648:	4602      	mov	r2, r0
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	210c      	movs	r1, #12
 800f654:	4618      	mov	r0, r3
 800f656:	f002 fbd4 	bl	8011e02 <SDIO_GetResponse>
 800f65a:	4602      	mov	r2, r0
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f666:	2b03      	cmp	r3, #3
 800f668:	d00d      	beq.n	800f686 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f107 020e 	add.w	r2, r7, #14
 800f672:	4611      	mov	r1, r2
 800f674:	4618      	mov	r0, r3
 800f676:	f002 fdf4 	bl	8012262 <SDMMC_CmdSetRelAdd>
 800f67a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d001      	beq.n	800f686 <SD_InitCard+0xae>
    {
      return errorstate;
 800f682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f684:	e071      	b.n	800f76a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f68a:	2b03      	cmp	r3, #3
 800f68c:	d036      	beq.n	800f6fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f68e:	89fb      	ldrh	r3, [r7, #14]
 800f690:	461a      	mov	r2, r3
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f69e:	041b      	lsls	r3, r3, #16
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	4610      	mov	r0, r2
 800f6a4:	f002 fdbe 	bl	8012224 <SDMMC_CmdSendCSD>
 800f6a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d001      	beq.n	800f6b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800f6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b2:	e05a      	b.n	800f76a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f002 fba1 	bl	8011e02 <SDIO_GetResponse>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	2104      	movs	r1, #4
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f002 fb98 	bl	8011e02 <SDIO_GetResponse>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2108      	movs	r1, #8
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f002 fb8f 	bl	8011e02 <SDIO_GetResponse>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	210c      	movs	r1, #12
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f002 fb86 	bl	8011e02 <SDIO_GetResponse>
 800f6f6:	4602      	mov	r2, r0
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2104      	movs	r1, #4
 800f702:	4618      	mov	r0, r3
 800f704:	f002 fb7d 	bl	8011e02 <SDIO_GetResponse>
 800f708:	4603      	mov	r3, r0
 800f70a:	0d1a      	lsrs	r2, r3, #20
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f710:	f107 0310 	add.w	r3, r7, #16
 800f714:	4619      	mov	r1, r3
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7ff fbe4 	bl	800eee4 <HAL_SD_GetCardCSD>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d002      	beq.n	800f728 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f722:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f726:	e020      	b.n	800f76a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6819      	ldr	r1, [r3, #0]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f730:	041b      	lsls	r3, r3, #16
 800f732:	f04f 0400 	mov.w	r4, #0
 800f736:	461a      	mov	r2, r3
 800f738:	4623      	mov	r3, r4
 800f73a:	4608      	mov	r0, r1
 800f73c:	f002 fc6c 	bl	8012018 <SDMMC_CmdSelDesel>
 800f740:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f744:	2b00      	cmp	r3, #0
 800f746:	d001      	beq.n	800f74c <SD_InitCard+0x174>
  {
    return errorstate;
 800f748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f74a:	e00e      	b.n	800f76a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681d      	ldr	r5, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	466c      	mov	r4, sp
 800f754:	f103 0210 	add.w	r2, r3, #16
 800f758:	ca07      	ldmia	r2, {r0, r1, r2}
 800f75a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f75e:	3304      	adds	r3, #4
 800f760:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f762:	4628      	mov	r0, r5
 800f764:	f002 fab0 	bl	8011cc8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3740      	adds	r7, #64	; 0x40
 800f76e:	46bd      	mov	sp, r7
 800f770:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f774 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b086      	sub	sp, #24
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f77c:	2300      	movs	r3, #0
 800f77e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f780:	2300      	movs	r3, #0
 800f782:	617b      	str	r3, [r7, #20]
 800f784:	2300      	movs	r3, #0
 800f786:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f002 fc66 	bl	801205e <SDMMC_CmdGoIdleState>
 800f792:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d001      	beq.n	800f79e <SD_PowerON+0x2a>
  {
    return errorstate;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	e072      	b.n	800f884 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f002 fc79 	bl	801209a <SDMMC_CmdOperCond>
 800f7a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d00d      	beq.n	800f7cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f002 fc4f 	bl	801205e <SDMMC_CmdGoIdleState>
 800f7c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d004      	beq.n	800f7d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	e05b      	b.n	800f884 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d137      	bne.n	800f84a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2100      	movs	r1, #0
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f002 fc79 	bl	80120d8 <SDMMC_CmdAppCommand>
 800f7e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d02d      	beq.n	800f84a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f7ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f7f2:	e047      	b.n	800f884 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f002 fc6c 	bl	80120d8 <SDMMC_CmdAppCommand>
 800f800:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d001      	beq.n	800f80c <SD_PowerON+0x98>
    {
      return errorstate;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	e03b      	b.n	800f884 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	491e      	ldr	r1, [pc, #120]	; (800f88c <SD_PowerON+0x118>)
 800f812:	4618      	mov	r0, r3
 800f814:	f002 fc82 	bl	801211c <SDMMC_CmdAppOperCommand>
 800f818:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d002      	beq.n	800f826 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f820:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f824:	e02e      	b.n	800f884 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2100      	movs	r1, #0
 800f82c:	4618      	mov	r0, r3
 800f82e:	f002 fae8 	bl	8011e02 <SDIO_GetResponse>
 800f832:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	0fdb      	lsrs	r3, r3, #31
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d101      	bne.n	800f840 <SD_PowerON+0xcc>
 800f83c:	2301      	movs	r3, #1
 800f83e:	e000      	b.n	800f842 <SD_PowerON+0xce>
 800f840:	2300      	movs	r3, #0
 800f842:	613b      	str	r3, [r7, #16]

    count++;
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	3301      	adds	r3, #1
 800f848:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f850:	4293      	cmp	r3, r2
 800f852:	d802      	bhi.n	800f85a <SD_PowerON+0xe6>
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d0cc      	beq.n	800f7f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f860:	4293      	cmp	r3, r2
 800f862:	d902      	bls.n	800f86a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f868:	e00c      	b.n	800f884 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f870:	2b00      	cmp	r3, #0
 800f872:	d003      	beq.n	800f87c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2201      	movs	r2, #1
 800f878:	645a      	str	r2, [r3, #68]	; 0x44
 800f87a:	e002      	b.n	800f882 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2200      	movs	r2, #0
 800f880:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f882:	2300      	movs	r3, #0
}
 800f884:	4618      	mov	r0, r3
 800f886:	3718      	adds	r7, #24
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	c1100000 	.word	0xc1100000

0800f890 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d102      	bne.n	800f8a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f8a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f8a4:	e018      	b.n	800f8d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8ae:	041b      	lsls	r3, r3, #16
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	f002 fcf6 	bl	80122a4 <SDMMC_CmdSendStatus>
 800f8b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d001      	beq.n	800f8c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	e009      	b.n	800f8d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2100      	movs	r1, #0
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f002 fa99 	bl	8011e02 <SDIO_GetResponse>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f8d6:	2300      	movs	r3, #0
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b086      	sub	sp, #24
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	60fb      	str	r3, [r7, #12]
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2100      	movs	r1, #0
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f002 fa83 	bl	8011e02 <SDIO_GetResponse>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f906:	d102      	bne.n	800f90e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f90c:	e02f      	b.n	800f96e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f90e:	f107 030c 	add.w	r3, r7, #12
 800f912:	4619      	mov	r1, r3
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f000 f879 	bl	800fa0c <SD_FindSCR>
 800f91a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d001      	beq.n	800f926 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	e023      	b.n	800f96e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d01c      	beq.n	800f96a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f938:	041b      	lsls	r3, r3, #16
 800f93a:	4619      	mov	r1, r3
 800f93c:	4610      	mov	r0, r2
 800f93e:	f002 fbcb 	bl	80120d8 <SDMMC_CmdAppCommand>
 800f942:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d001      	beq.n	800f94e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	e00f      	b.n	800f96e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2102      	movs	r1, #2
 800f954:	4618      	mov	r0, r3
 800f956:	f002 fc04 	bl	8012162 <SDMMC_CmdBusWidth>
 800f95a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d001      	beq.n	800f966 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	e003      	b.n	800f96e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f966:	2300      	movs	r3, #0
 800f968:	e001      	b.n	800f96e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f96a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3718      	adds	r7, #24
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}

0800f976 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f976:	b580      	push	{r7, lr}
 800f978:	b086      	sub	sp, #24
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f97e:	2300      	movs	r3, #0
 800f980:	60fb      	str	r3, [r7, #12]
 800f982:	2300      	movs	r3, #0
 800f984:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2100      	movs	r1, #0
 800f98c:	4618      	mov	r0, r3
 800f98e:	f002 fa38 	bl	8011e02 <SDIO_GetResponse>
 800f992:	4603      	mov	r3, r0
 800f994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f99c:	d102      	bne.n	800f9a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f99e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9a2:	e02f      	b.n	800fa04 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f9a4:	f107 030c 	add.w	r3, r7, #12
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f000 f82e 	bl	800fa0c <SD_FindSCR>
 800f9b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d001      	beq.n	800f9bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	e023      	b.n	800fa04 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d01c      	beq.n	800fa00 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681a      	ldr	r2, [r3, #0]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9ce:	041b      	lsls	r3, r3, #16
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	4610      	mov	r0, r2
 800f9d4:	f002 fb80 	bl	80120d8 <SDMMC_CmdAppCommand>
 800f9d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d001      	beq.n	800f9e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	e00f      	b.n	800fa04 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f002 fbb9 	bl	8012162 <SDMMC_CmdBusWidth>
 800f9f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d001      	beq.n	800f9fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	e003      	b.n	800fa04 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	e001      	b.n	800fa04 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800fa00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3718      	adds	r7, #24
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800fa0c:	b590      	push	{r4, r7, lr}
 800fa0e:	b08f      	sub	sp, #60	; 0x3c
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800fa16:	f7fb fd63 	bl	800b4e0 <HAL_GetTick>
 800fa1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800fa20:	2300      	movs	r3, #0
 800fa22:	60bb      	str	r3, [r7, #8]
 800fa24:	2300      	movs	r3, #0
 800fa26:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2108      	movs	r1, #8
 800fa32:	4618      	mov	r0, r3
 800fa34:	f002 fa24 	bl	8011e80 <SDMMC_CmdBlockLength>
 800fa38:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d001      	beq.n	800fa44 <SD_FindSCR+0x38>
  {
    return errorstate;
 800fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa42:	e0a9      	b.n	800fb98 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681a      	ldr	r2, [r3, #0]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa4c:	041b      	lsls	r3, r3, #16
 800fa4e:	4619      	mov	r1, r3
 800fa50:	4610      	mov	r0, r2
 800fa52:	f002 fb41 	bl	80120d8 <SDMMC_CmdAppCommand>
 800fa56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <SD_FindSCR+0x56>
  {
    return errorstate;
 800fa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa60:	e09a      	b.n	800fb98 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800fa62:	f04f 33ff 	mov.w	r3, #4294967295
 800fa66:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800fa68:	2308      	movs	r3, #8
 800fa6a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800fa6c:	2330      	movs	r3, #48	; 0x30
 800fa6e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800fa70:	2302      	movs	r3, #2
 800fa72:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800fa74:	2300      	movs	r3, #0
 800fa76:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800fa78:	2301      	movs	r3, #1
 800fa7a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f107 0210 	add.w	r2, r7, #16
 800fa84:	4611      	mov	r1, r2
 800fa86:	4618      	mov	r0, r3
 800fa88:	f002 f9ce 	bl	8011e28 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4618      	mov	r0, r3
 800fa92:	f002 fb88 	bl	80121a6 <SDMMC_CmdSendSCR>
 800fa96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800fa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d022      	beq.n	800fae4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800fa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa0:	e07a      	b.n	800fb98 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800faac:	2b00      	cmp	r3, #0
 800faae:	d00e      	beq.n	800face <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6819      	ldr	r1, [r3, #0]
 800fab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	f107 0208 	add.w	r2, r7, #8
 800fabc:	18d4      	adds	r4, r2, r3
 800fabe:	4608      	mov	r0, r1
 800fac0:	f002 f92d 	bl	8011d1e <SDIO_ReadFIFO>
 800fac4:	4603      	mov	r3, r0
 800fac6:	6023      	str	r3, [r4, #0]
      index++;
 800fac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faca:	3301      	adds	r3, #1
 800facc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800face:	f7fb fd07 	bl	800b4e0 <HAL_GetTick>
 800fad2:	4602      	mov	r2, r0
 800fad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad6:	1ad3      	subs	r3, r2, r3
 800fad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fadc:	d102      	bne.n	800fae4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800fade:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fae2:	e059      	b.n	800fb98 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faea:	f240 432a 	movw	r3, #1066	; 0x42a
 800faee:	4013      	ands	r3, r2
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d0d6      	beq.n	800faa2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fafa:	f003 0308 	and.w	r3, r3, #8
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d005      	beq.n	800fb0e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	2208      	movs	r2, #8
 800fb08:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800fb0a:	2308      	movs	r3, #8
 800fb0c:	e044      	b.n	800fb98 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb14:	f003 0302 	and.w	r3, r3, #2
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d005      	beq.n	800fb28 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2202      	movs	r2, #2
 800fb22:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800fb24:	2302      	movs	r3, #2
 800fb26:	e037      	b.n	800fb98 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb2e:	f003 0320 	and.w	r3, r3, #32
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d005      	beq.n	800fb42 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2220      	movs	r2, #32
 800fb3c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800fb3e:	2320      	movs	r3, #32
 800fb40:	e02a      	b.n	800fb98 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f240 523a 	movw	r2, #1338	; 0x53a
 800fb4a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	061a      	lsls	r2, r3, #24
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	021b      	lsls	r3, r3, #8
 800fb54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fb58:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	0a1b      	lsrs	r3, r3, #8
 800fb5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fb62:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	0e1b      	lsrs	r3, r3, #24
 800fb68:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800fb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6c:	601a      	str	r2, [r3, #0]
    scr++;
 800fb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb70:	3304      	adds	r3, #4
 800fb72:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	061a      	lsls	r2, r3, #24
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	021b      	lsls	r3, r3, #8
 800fb7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fb80:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	0a1b      	lsrs	r3, r3, #8
 800fb86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fb8a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	0e1b      	lsrs	r3, r3, #24
 800fb90:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800fb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb94:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	373c      	adds	r7, #60	; 0x3c
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd90      	pop	{r4, r7, pc}

0800fba0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d03f      	beq.n	800fc3a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800fbba:	2300      	movs	r3, #0
 800fbbc:	617b      	str	r3, [r7, #20]
 800fbbe:	e033      	b.n	800fc28 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f002 f8aa 	bl	8011d1e <SDIO_ReadFIFO>
 800fbca:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	b2da      	uxtb	r2, r3
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	3b01      	subs	r3, #1
 800fbde:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	0a1b      	lsrs	r3, r3, #8
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	3301      	adds	r3, #1
 800fbee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	0c1b      	lsrs	r3, r3, #16
 800fbfa:	b2da      	uxtb	r2, r3
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3301      	adds	r3, #1
 800fc04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	3b01      	subs	r3, #1
 800fc0a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	0e1b      	lsrs	r3, r3, #24
 800fc10:	b2da      	uxtb	r2, r3
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	701a      	strb	r2, [r3, #0]
      tmp++;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	3b01      	subs	r3, #1
 800fc20:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	3301      	adds	r3, #1
 800fc26:	617b      	str	r3, [r7, #20]
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	2b07      	cmp	r3, #7
 800fc2c:	d9c8      	bls.n	800fbc0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	68fa      	ldr	r2, [r7, #12]
 800fc32:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	693a      	ldr	r2, [r7, #16]
 800fc38:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800fc3a:	bf00      	nop
 800fc3c:	3718      	adds	r7, #24
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800fc42:	b580      	push	{r7, lr}
 800fc44:	b086      	sub	sp, #24
 800fc46:	af00      	add	r7, sp, #0
 800fc48:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6a1b      	ldr	r3, [r3, #32]
 800fc4e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc54:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d043      	beq.n	800fce4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	617b      	str	r3, [r7, #20]
 800fc60:	e037      	b.n	800fcd2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	3b01      	subs	r3, #1
 800fc72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	021a      	lsls	r2, r3, #8
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	4313      	orrs	r3, r2
 800fc7e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	3301      	adds	r3, #1
 800fc84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	041a      	lsls	r2, r3, #16
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	4313      	orrs	r3, r2
 800fc96:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	3b01      	subs	r3, #1
 800fca2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	061a      	lsls	r2, r3, #24
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	4313      	orrs	r3, r2
 800fcae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f107 0208 	add.w	r2, r7, #8
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f002 f836 	bl	8011d38 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	617b      	str	r3, [r7, #20]
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	2b07      	cmp	r3, #7
 800fcd6:	d9c4      	bls.n	800fc62 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	693a      	ldr	r2, [r7, #16]
 800fce2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800fce4:	bf00      	nop
 800fce6:	3718      	adds	r7, #24
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d101      	bne.n	800fcfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	e056      	b.n	800fdac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d106      	bne.n	800fd1e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7f7 fde5 	bl	80078e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2202      	movs	r2, #2
 800fd22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fd34:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	685a      	ldr	r2, [r3, #4]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	689b      	ldr	r3, [r3, #8]
 800fd3e:	431a      	orrs	r2, r3
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	431a      	orrs	r2, r3
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	691b      	ldr	r3, [r3, #16]
 800fd4a:	431a      	orrs	r2, r3
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	695b      	ldr	r3, [r3, #20]
 800fd50:	431a      	orrs	r2, r3
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	699b      	ldr	r3, [r3, #24]
 800fd56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fd5a:	431a      	orrs	r2, r3
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	69db      	ldr	r3, [r3, #28]
 800fd60:	431a      	orrs	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a1b      	ldr	r3, [r3, #32]
 800fd66:	ea42 0103 	orr.w	r1, r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	430a      	orrs	r2, r1
 800fd74:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	699b      	ldr	r3, [r3, #24]
 800fd7a:	0c1b      	lsrs	r3, r3, #16
 800fd7c:	f003 0104 	and.w	r1, r3, #4
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	430a      	orrs	r2, r1
 800fd8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	69da      	ldr	r2, [r3, #28]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fd9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2201      	movs	r2, #1
 800fda6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800fdaa:	2300      	movs	r3, #0
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3708      	adds	r7, #8
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b088      	sub	sp, #32
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	603b      	str	r3, [r7, #0]
 800fdc0:	4613      	mov	r3, r2
 800fdc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d101      	bne.n	800fdd6 <HAL_SPI_Transmit+0x22>
 800fdd2:	2302      	movs	r3, #2
 800fdd4:	e11e      	b.n	8010014 <HAL_SPI_Transmit+0x260>
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fdde:	f7fb fb7f 	bl	800b4e0 <HAL_GetTick>
 800fde2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800fde4:	88fb      	ldrh	r3, [r7, #6]
 800fde6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d002      	beq.n	800fdfa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800fdf4:	2302      	movs	r3, #2
 800fdf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fdf8:	e103      	b.n	8010002 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <HAL_SPI_Transmit+0x52>
 800fe00:	88fb      	ldrh	r3, [r7, #6]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d102      	bne.n	800fe0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800fe06:	2301      	movs	r3, #1
 800fe08:	77fb      	strb	r3, [r7, #31]
    goto error;
 800fe0a:	e0fa      	b.n	8010002 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2203      	movs	r2, #3
 800fe10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	68ba      	ldr	r2, [r7, #8]
 800fe1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	88fa      	ldrh	r2, [r7, #6]
 800fe24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	88fa      	ldrh	r2, [r7, #6]
 800fe2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2200      	movs	r2, #0
 800fe36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	2200      	movs	r2, #0
 800fe42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2200      	movs	r2, #0
 800fe48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe52:	d107      	bne.n	800fe64 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fe62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe6e:	2b40      	cmp	r3, #64	; 0x40
 800fe70:	d007      	beq.n	800fe82 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fe80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe8a:	d14b      	bne.n	800ff24 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d002      	beq.n	800fe9a <HAL_SPI_Transmit+0xe6>
 800fe94:	8afb      	ldrh	r3, [r7, #22]
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d13e      	bne.n	800ff18 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9e:	881a      	ldrh	r2, [r3, #0]
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feaa:	1c9a      	adds	r2, r3, #2
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	3b01      	subs	r3, #1
 800feb8:	b29a      	uxth	r2, r3
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800febe:	e02b      	b.n	800ff18 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	689b      	ldr	r3, [r3, #8]
 800fec6:	f003 0302 	and.w	r3, r3, #2
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d112      	bne.n	800fef4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fed2:	881a      	ldrh	r2, [r3, #0]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fede:	1c9a      	adds	r2, r3, #2
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fee8:	b29b      	uxth	r3, r3
 800feea:	3b01      	subs	r3, #1
 800feec:	b29a      	uxth	r2, r3
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	86da      	strh	r2, [r3, #54]	; 0x36
 800fef2:	e011      	b.n	800ff18 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fef4:	f7fb faf4 	bl	800b4e0 <HAL_GetTick>
 800fef8:	4602      	mov	r2, r0
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	1ad3      	subs	r3, r2, r3
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d803      	bhi.n	800ff0c <HAL_SPI_Transmit+0x158>
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff0a:	d102      	bne.n	800ff12 <HAL_SPI_Transmit+0x15e>
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d102      	bne.n	800ff18 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ff12:	2303      	movs	r3, #3
 800ff14:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ff16:	e074      	b.n	8010002 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d1ce      	bne.n	800fec0 <HAL_SPI_Transmit+0x10c>
 800ff22:	e04c      	b.n	800ffbe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d002      	beq.n	800ff32 <HAL_SPI_Transmit+0x17e>
 800ff2c:	8afb      	ldrh	r3, [r7, #22]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d140      	bne.n	800ffb4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	330c      	adds	r3, #12
 800ff3c:	7812      	ldrb	r2, [r2, #0]
 800ff3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff44:	1c5a      	adds	r2, r3, #1
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	3b01      	subs	r3, #1
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ff58:	e02c      	b.n	800ffb4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	689b      	ldr	r3, [r3, #8]
 800ff60:	f003 0302 	and.w	r3, r3, #2
 800ff64:	2b02      	cmp	r3, #2
 800ff66:	d113      	bne.n	800ff90 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	330c      	adds	r3, #12
 800ff72:	7812      	ldrb	r2, [r2, #0]
 800ff74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff7a:	1c5a      	adds	r2, r3, #1
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	3b01      	subs	r3, #1
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	86da      	strh	r2, [r3, #54]	; 0x36
 800ff8e:	e011      	b.n	800ffb4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff90:	f7fb faa6 	bl	800b4e0 <HAL_GetTick>
 800ff94:	4602      	mov	r2, r0
 800ff96:	69bb      	ldr	r3, [r7, #24]
 800ff98:	1ad3      	subs	r3, r2, r3
 800ff9a:	683a      	ldr	r2, [r7, #0]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d803      	bhi.n	800ffa8 <HAL_SPI_Transmit+0x1f4>
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa6:	d102      	bne.n	800ffae <HAL_SPI_Transmit+0x1fa>
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d102      	bne.n	800ffb4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800ffae:	2303      	movs	r3, #3
 800ffb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ffb2:	e026      	b.n	8010002 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1cd      	bne.n	800ff5a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ffbe:	69ba      	ldr	r2, [r7, #24]
 800ffc0:	6839      	ldr	r1, [r7, #0]
 800ffc2:	68f8      	ldr	r0, [r7, #12]
 800ffc4:	f000 fba4 	bl	8010710 <SPI_EndRxTxTransaction>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d002      	beq.n	800ffd4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2220      	movs	r2, #32
 800ffd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	689b      	ldr	r3, [r3, #8]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d10a      	bne.n	800fff2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ffdc:	2300      	movs	r3, #0
 800ffde:	613b      	str	r3, [r7, #16]
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	613b      	str	r3, [r7, #16]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	613b      	str	r3, [r7, #16]
 800fff0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d002      	beq.n	8010000 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800fffa:	2301      	movs	r3, #1
 800fffc:	77fb      	strb	r3, [r7, #31]
 800fffe:	e000      	b.n	8010002 <HAL_SPI_Transmit+0x24e>
  }

error:
 8010000:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2201      	movs	r2, #1
 8010006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2200      	movs	r2, #0
 801000e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010012:	7ffb      	ldrb	r3, [r7, #31]
}
 8010014:	4618      	mov	r0, r3
 8010016:	3720      	adds	r7, #32
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b088      	sub	sp, #32
 8010020:	af02      	add	r7, sp, #8
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	603b      	str	r3, [r7, #0]
 8010028:	4613      	mov	r3, r2
 801002a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801002c:	2300      	movs	r3, #0
 801002e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010038:	d112      	bne.n	8010060 <HAL_SPI_Receive+0x44>
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d10e      	bne.n	8010060 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2204      	movs	r2, #4
 8010046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801004a:	88fa      	ldrh	r2, [r7, #6]
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	4613      	mov	r3, r2
 8010052:	68ba      	ldr	r2, [r7, #8]
 8010054:	68b9      	ldr	r1, [r7, #8]
 8010056:	68f8      	ldr	r0, [r7, #12]
 8010058:	f000 f8e9 	bl	801022e <HAL_SPI_TransmitReceive>
 801005c:	4603      	mov	r3, r0
 801005e:	e0e2      	b.n	8010226 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010066:	2b01      	cmp	r3, #1
 8010068:	d101      	bne.n	801006e <HAL_SPI_Receive+0x52>
 801006a:	2302      	movs	r3, #2
 801006c:	e0db      	b.n	8010226 <HAL_SPI_Receive+0x20a>
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2201      	movs	r2, #1
 8010072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010076:	f7fb fa33 	bl	800b4e0 <HAL_GetTick>
 801007a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010082:	b2db      	uxtb	r3, r3
 8010084:	2b01      	cmp	r3, #1
 8010086:	d002      	beq.n	801008e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8010088:	2302      	movs	r3, #2
 801008a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801008c:	e0c2      	b.n	8010214 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d002      	beq.n	801009a <HAL_SPI_Receive+0x7e>
 8010094:	88fb      	ldrh	r3, [r7, #6]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d102      	bne.n	80100a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801009a:	2301      	movs	r3, #1
 801009c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801009e:	e0b9      	b.n	8010214 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2204      	movs	r2, #4
 80100a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2200      	movs	r2, #0
 80100ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	68ba      	ldr	r2, [r7, #8]
 80100b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	88fa      	ldrh	r2, [r7, #6]
 80100b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	88fa      	ldrh	r2, [r7, #6]
 80100be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2200      	movs	r2, #0
 80100c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2200      	movs	r2, #0
 80100ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2200      	movs	r2, #0
 80100d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2200      	movs	r2, #0
 80100d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2200      	movs	r2, #0
 80100dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	689b      	ldr	r3, [r3, #8]
 80100e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100e6:	d107      	bne.n	80100f8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80100f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010102:	2b40      	cmp	r3, #64	; 0x40
 8010104:	d007      	beq.n	8010116 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010114:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d162      	bne.n	80101e4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801011e:	e02e      	b.n	801017e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	f003 0301 	and.w	r3, r3, #1
 801012a:	2b01      	cmp	r3, #1
 801012c:	d115      	bne.n	801015a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	f103 020c 	add.w	r2, r3, #12
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801013a:	7812      	ldrb	r2, [r2, #0]
 801013c:	b2d2      	uxtb	r2, r2
 801013e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010144:	1c5a      	adds	r2, r3, #1
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801014e:	b29b      	uxth	r3, r3
 8010150:	3b01      	subs	r3, #1
 8010152:	b29a      	uxth	r2, r3
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010158:	e011      	b.n	801017e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801015a:	f7fb f9c1 	bl	800b4e0 <HAL_GetTick>
 801015e:	4602      	mov	r2, r0
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	1ad3      	subs	r3, r2, r3
 8010164:	683a      	ldr	r2, [r7, #0]
 8010166:	429a      	cmp	r2, r3
 8010168:	d803      	bhi.n	8010172 <HAL_SPI_Receive+0x156>
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010170:	d102      	bne.n	8010178 <HAL_SPI_Receive+0x15c>
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d102      	bne.n	801017e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8010178:	2303      	movs	r3, #3
 801017a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801017c:	e04a      	b.n	8010214 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010182:	b29b      	uxth	r3, r3
 8010184:	2b00      	cmp	r3, #0
 8010186:	d1cb      	bne.n	8010120 <HAL_SPI_Receive+0x104>
 8010188:	e031      	b.n	80101ee <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	689b      	ldr	r3, [r3, #8]
 8010190:	f003 0301 	and.w	r3, r3, #1
 8010194:	2b01      	cmp	r3, #1
 8010196:	d113      	bne.n	80101c0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	68da      	ldr	r2, [r3, #12]
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a2:	b292      	uxth	r2, r2
 80101a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101aa:	1c9a      	adds	r2, r3, #2
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80101b4:	b29b      	uxth	r3, r3
 80101b6:	3b01      	subs	r3, #1
 80101b8:	b29a      	uxth	r2, r3
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80101be:	e011      	b.n	80101e4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101c0:	f7fb f98e 	bl	800b4e0 <HAL_GetTick>
 80101c4:	4602      	mov	r2, r0
 80101c6:	693b      	ldr	r3, [r7, #16]
 80101c8:	1ad3      	subs	r3, r2, r3
 80101ca:	683a      	ldr	r2, [r7, #0]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d803      	bhi.n	80101d8 <HAL_SPI_Receive+0x1bc>
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d6:	d102      	bne.n	80101de <HAL_SPI_Receive+0x1c2>
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d102      	bne.n	80101e4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80101de:	2303      	movs	r3, #3
 80101e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80101e2:	e017      	b.n	8010214 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d1cd      	bne.n	801018a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80101ee:	693a      	ldr	r2, [r7, #16]
 80101f0:	6839      	ldr	r1, [r7, #0]
 80101f2:	68f8      	ldr	r0, [r7, #12]
 80101f4:	f000 fa27 	bl	8010646 <SPI_EndRxTransaction>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d002      	beq.n	8010204 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2220      	movs	r2, #32
 8010202:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010208:	2b00      	cmp	r3, #0
 801020a:	d002      	beq.n	8010212 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 801020c:	2301      	movs	r3, #1
 801020e:	75fb      	strb	r3, [r7, #23]
 8010210:	e000      	b.n	8010214 <HAL_SPI_Receive+0x1f8>
  }

error :
 8010212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2201      	movs	r2, #1
 8010218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2200      	movs	r2, #0
 8010220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010224:	7dfb      	ldrb	r3, [r7, #23]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3718      	adds	r7, #24
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b08c      	sub	sp, #48	; 0x30
 8010232:	af00      	add	r7, sp, #0
 8010234:	60f8      	str	r0, [r7, #12]
 8010236:	60b9      	str	r1, [r7, #8]
 8010238:	607a      	str	r2, [r7, #4]
 801023a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801023c:	2301      	movs	r3, #1
 801023e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010240:	2300      	movs	r3, #0
 8010242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801024c:	2b01      	cmp	r3, #1
 801024e:	d101      	bne.n	8010254 <HAL_SPI_TransmitReceive+0x26>
 8010250:	2302      	movs	r3, #2
 8010252:	e18a      	b.n	801056a <HAL_SPI_TransmitReceive+0x33c>
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2201      	movs	r2, #1
 8010258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801025c:	f7fb f940 	bl	800b4e0 <HAL_GetTick>
 8010260:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010272:	887b      	ldrh	r3, [r7, #2]
 8010274:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801027a:	2b01      	cmp	r3, #1
 801027c:	d00f      	beq.n	801029e <HAL_SPI_TransmitReceive+0x70>
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010284:	d107      	bne.n	8010296 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	689b      	ldr	r3, [r3, #8]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d103      	bne.n	8010296 <HAL_SPI_TransmitReceive+0x68>
 801028e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010292:	2b04      	cmp	r3, #4
 8010294:	d003      	beq.n	801029e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8010296:	2302      	movs	r3, #2
 8010298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801029c:	e15b      	b.n	8010556 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d005      	beq.n	80102b0 <HAL_SPI_TransmitReceive+0x82>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d002      	beq.n	80102b0 <HAL_SPI_TransmitReceive+0x82>
 80102aa:	887b      	ldrh	r3, [r7, #2]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d103      	bne.n	80102b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80102b0:	2301      	movs	r3, #1
 80102b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80102b6:	e14e      	b.n	8010556 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80102be:	b2db      	uxtb	r3, r3
 80102c0:	2b04      	cmp	r3, #4
 80102c2:	d003      	beq.n	80102cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2205      	movs	r2, #5
 80102c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2200      	movs	r2, #0
 80102d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	687a      	ldr	r2, [r7, #4]
 80102d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	887a      	ldrh	r2, [r7, #2]
 80102dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	887a      	ldrh	r2, [r7, #2]
 80102e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	887a      	ldrh	r2, [r7, #2]
 80102ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	887a      	ldrh	r2, [r7, #2]
 80102f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	2200      	movs	r2, #0
 80102fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2200      	movs	r2, #0
 8010300:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801030c:	2b40      	cmp	r3, #64	; 0x40
 801030e:	d007      	beq.n	8010320 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801031e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010328:	d178      	bne.n	801041c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d002      	beq.n	8010338 <HAL_SPI_TransmitReceive+0x10a>
 8010332:	8b7b      	ldrh	r3, [r7, #26]
 8010334:	2b01      	cmp	r3, #1
 8010336:	d166      	bne.n	8010406 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801033c:	881a      	ldrh	r2, [r3, #0]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010348:	1c9a      	adds	r2, r3, #2
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010352:	b29b      	uxth	r3, r3
 8010354:	3b01      	subs	r3, #1
 8010356:	b29a      	uxth	r2, r3
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801035c:	e053      	b.n	8010406 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	689b      	ldr	r3, [r3, #8]
 8010364:	f003 0302 	and.w	r3, r3, #2
 8010368:	2b02      	cmp	r3, #2
 801036a:	d11b      	bne.n	80103a4 <HAL_SPI_TransmitReceive+0x176>
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010370:	b29b      	uxth	r3, r3
 8010372:	2b00      	cmp	r3, #0
 8010374:	d016      	beq.n	80103a4 <HAL_SPI_TransmitReceive+0x176>
 8010376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010378:	2b01      	cmp	r3, #1
 801037a:	d113      	bne.n	80103a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010380:	881a      	ldrh	r2, [r3, #0]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801038c:	1c9a      	adds	r2, r3, #2
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010396:	b29b      	uxth	r3, r3
 8010398:	3b01      	subs	r3, #1
 801039a:	b29a      	uxth	r2, r3
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80103a0:	2300      	movs	r3, #0
 80103a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	f003 0301 	and.w	r3, r3, #1
 80103ae:	2b01      	cmp	r3, #1
 80103b0:	d119      	bne.n	80103e6 <HAL_SPI_TransmitReceive+0x1b8>
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d014      	beq.n	80103e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	68da      	ldr	r2, [r3, #12]
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103c6:	b292      	uxth	r2, r2
 80103c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ce:	1c9a      	adds	r2, r3, #2
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80103d8:	b29b      	uxth	r3, r3
 80103da:	3b01      	subs	r3, #1
 80103dc:	b29a      	uxth	r2, r3
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80103e2:	2301      	movs	r3, #1
 80103e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80103e6:	f7fb f87b 	bl	800b4e0 <HAL_GetTick>
 80103ea:	4602      	mov	r2, r0
 80103ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d807      	bhi.n	8010406 <HAL_SPI_TransmitReceive+0x1d8>
 80103f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103fc:	d003      	beq.n	8010406 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80103fe:	2303      	movs	r3, #3
 8010400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010404:	e0a7      	b.n	8010556 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801040a:	b29b      	uxth	r3, r3
 801040c:	2b00      	cmp	r3, #0
 801040e:	d1a6      	bne.n	801035e <HAL_SPI_TransmitReceive+0x130>
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010414:	b29b      	uxth	r3, r3
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1a1      	bne.n	801035e <HAL_SPI_TransmitReceive+0x130>
 801041a:	e07c      	b.n	8010516 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d002      	beq.n	801042a <HAL_SPI_TransmitReceive+0x1fc>
 8010424:	8b7b      	ldrh	r3, [r7, #26]
 8010426:	2b01      	cmp	r3, #1
 8010428:	d16b      	bne.n	8010502 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	330c      	adds	r3, #12
 8010434:	7812      	ldrb	r2, [r2, #0]
 8010436:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801043c:	1c5a      	adds	r2, r3, #1
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010446:	b29b      	uxth	r3, r3
 8010448:	3b01      	subs	r3, #1
 801044a:	b29a      	uxth	r2, r3
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010450:	e057      	b.n	8010502 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	689b      	ldr	r3, [r3, #8]
 8010458:	f003 0302 	and.w	r3, r3, #2
 801045c:	2b02      	cmp	r3, #2
 801045e:	d11c      	bne.n	801049a <HAL_SPI_TransmitReceive+0x26c>
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010464:	b29b      	uxth	r3, r3
 8010466:	2b00      	cmp	r3, #0
 8010468:	d017      	beq.n	801049a <HAL_SPI_TransmitReceive+0x26c>
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	2b01      	cmp	r3, #1
 801046e:	d114      	bne.n	801049a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	330c      	adds	r3, #12
 801047a:	7812      	ldrb	r2, [r2, #0]
 801047c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010482:	1c5a      	adds	r2, r3, #1
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801048c:	b29b      	uxth	r3, r3
 801048e:	3b01      	subs	r3, #1
 8010490:	b29a      	uxth	r2, r3
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010496:	2300      	movs	r3, #0
 8010498:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	f003 0301 	and.w	r3, r3, #1
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d119      	bne.n	80104dc <HAL_SPI_TransmitReceive+0x2ae>
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d014      	beq.n	80104dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	68da      	ldr	r2, [r3, #12]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104bc:	b2d2      	uxtb	r2, r2
 80104be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104c4:	1c5a      	adds	r2, r3, #1
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	3b01      	subs	r3, #1
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80104d8:	2301      	movs	r3, #1
 80104da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80104dc:	f7fb f800 	bl	800b4e0 <HAL_GetTick>
 80104e0:	4602      	mov	r2, r0
 80104e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e4:	1ad3      	subs	r3, r2, r3
 80104e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d803      	bhi.n	80104f4 <HAL_SPI_TransmitReceive+0x2c6>
 80104ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104f2:	d102      	bne.n	80104fa <HAL_SPI_TransmitReceive+0x2cc>
 80104f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d103      	bne.n	8010502 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80104fa:	2303      	movs	r3, #3
 80104fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8010500:	e029      	b.n	8010556 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010506:	b29b      	uxth	r3, r3
 8010508:	2b00      	cmp	r3, #0
 801050a:	d1a2      	bne.n	8010452 <HAL_SPI_TransmitReceive+0x224>
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010510:	b29b      	uxth	r3, r3
 8010512:	2b00      	cmp	r3, #0
 8010514:	d19d      	bne.n	8010452 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010518:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f000 f8f8 	bl	8010710 <SPI_EndRxTxTransaction>
 8010520:	4603      	mov	r3, r0
 8010522:	2b00      	cmp	r3, #0
 8010524:	d006      	beq.n	8010534 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8010526:	2301      	movs	r3, #1
 8010528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2220      	movs	r2, #32
 8010530:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010532:	e010      	b.n	8010556 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	689b      	ldr	r3, [r3, #8]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10b      	bne.n	8010554 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801053c:	2300      	movs	r3, #0
 801053e:	617b      	str	r3, [r7, #20]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	68db      	ldr	r3, [r3, #12]
 8010546:	617b      	str	r3, [r7, #20]
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	689b      	ldr	r3, [r3, #8]
 801054e:	617b      	str	r3, [r7, #20]
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	e000      	b.n	8010556 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8010554:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2201      	movs	r2, #1
 801055a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2200      	movs	r2, #0
 8010562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8010566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801056a:	4618      	mov	r0, r3
 801056c:	3730      	adds	r7, #48	; 0x30
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b084      	sub	sp, #16
 8010576:	af00      	add	r7, sp, #0
 8010578:	60f8      	str	r0, [r7, #12]
 801057a:	60b9      	str	r1, [r7, #8]
 801057c:	603b      	str	r3, [r7, #0]
 801057e:	4613      	mov	r3, r2
 8010580:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010582:	e04c      	b.n	801061e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801058a:	d048      	beq.n	801061e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 801058c:	f7fa ffa8 	bl	800b4e0 <HAL_GetTick>
 8010590:	4602      	mov	r2, r0
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	429a      	cmp	r2, r3
 801059a:	d902      	bls.n	80105a2 <SPI_WaitFlagStateUntilTimeout+0x30>
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d13d      	bne.n	801061e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	685a      	ldr	r2, [r3, #4]
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80105b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80105ba:	d111      	bne.n	80105e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	689b      	ldr	r3, [r3, #8]
 80105c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105c4:	d004      	beq.n	80105d0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	689b      	ldr	r3, [r3, #8]
 80105ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80105ce:	d107      	bne.n	80105e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105e8:	d10f      	bne.n	801060a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80105f8:	601a      	str	r2, [r3, #0]
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2201      	movs	r2, #1
 801060e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2200      	movs	r2, #0
 8010616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801061a:	2303      	movs	r3, #3
 801061c:	e00f      	b.n	801063e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	689a      	ldr	r2, [r3, #8]
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	4013      	ands	r3, r2
 8010628:	68ba      	ldr	r2, [r7, #8]
 801062a:	429a      	cmp	r2, r3
 801062c:	bf0c      	ite	eq
 801062e:	2301      	moveq	r3, #1
 8010630:	2300      	movne	r3, #0
 8010632:	b2db      	uxtb	r3, r3
 8010634:	461a      	mov	r2, r3
 8010636:	79fb      	ldrb	r3, [r7, #7]
 8010638:	429a      	cmp	r2, r3
 801063a:	d1a3      	bne.n	8010584 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 801063c:	2300      	movs	r3, #0
}
 801063e:	4618      	mov	r0, r3
 8010640:	3710      	adds	r7, #16
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}

08010646 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010646:	b580      	push	{r7, lr}
 8010648:	b086      	sub	sp, #24
 801064a:	af02      	add	r7, sp, #8
 801064c:	60f8      	str	r0, [r7, #12]
 801064e:	60b9      	str	r1, [r7, #8]
 8010650:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801065a:	d111      	bne.n	8010680 <SPI_EndRxTransaction+0x3a>
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	689b      	ldr	r3, [r3, #8]
 8010660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010664:	d004      	beq.n	8010670 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	689b      	ldr	r3, [r3, #8]
 801066a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801066e:	d107      	bne.n	8010680 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801067e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010688:	d12a      	bne.n	80106e0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010692:	d012      	beq.n	80106ba <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	2200      	movs	r2, #0
 801069c:	2180      	movs	r1, #128	; 0x80
 801069e:	68f8      	ldr	r0, [r7, #12]
 80106a0:	f7ff ff67 	bl	8010572 <SPI_WaitFlagStateUntilTimeout>
 80106a4:	4603      	mov	r3, r0
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d02d      	beq.n	8010706 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106ae:	f043 0220 	orr.w	r2, r3, #32
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80106b6:	2303      	movs	r3, #3
 80106b8:	e026      	b.n	8010708 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	2200      	movs	r2, #0
 80106c2:	2101      	movs	r1, #1
 80106c4:	68f8      	ldr	r0, [r7, #12]
 80106c6:	f7ff ff54 	bl	8010572 <SPI_WaitFlagStateUntilTimeout>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01a      	beq.n	8010706 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106d4:	f043 0220 	orr.w	r2, r3, #32
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80106dc:	2303      	movs	r3, #3
 80106de:	e013      	b.n	8010708 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	9300      	str	r3, [sp, #0]
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	2200      	movs	r2, #0
 80106e8:	2101      	movs	r1, #1
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f7ff ff41 	bl	8010572 <SPI_WaitFlagStateUntilTimeout>
 80106f0:	4603      	mov	r3, r0
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d007      	beq.n	8010706 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106fa:	f043 0220 	orr.w	r2, r3, #32
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8010702:	2303      	movs	r3, #3
 8010704:	e000      	b.n	8010708 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010706:	2300      	movs	r3, #0
}
 8010708:	4618      	mov	r0, r3
 801070a:	3710      	adds	r7, #16
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b088      	sub	sp, #32
 8010714:	af02      	add	r7, sp, #8
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801071c:	4b1b      	ldr	r3, [pc, #108]	; (801078c <SPI_EndRxTxTransaction+0x7c>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4a1b      	ldr	r2, [pc, #108]	; (8010790 <SPI_EndRxTxTransaction+0x80>)
 8010722:	fba2 2303 	umull	r2, r3, r2, r3
 8010726:	0d5b      	lsrs	r3, r3, #21
 8010728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801072c:	fb02 f303 	mul.w	r3, r2, r3
 8010730:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801073a:	d112      	bne.n	8010762 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	9300      	str	r3, [sp, #0]
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	2200      	movs	r2, #0
 8010744:	2180      	movs	r1, #128	; 0x80
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f7ff ff13 	bl	8010572 <SPI_WaitFlagStateUntilTimeout>
 801074c:	4603      	mov	r3, r0
 801074e:	2b00      	cmp	r3, #0
 8010750:	d016      	beq.n	8010780 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010756:	f043 0220 	orr.w	r2, r3, #32
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801075e:	2303      	movs	r3, #3
 8010760:	e00f      	b.n	8010782 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00a      	beq.n	801077e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	3b01      	subs	r3, #1
 801076c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010778:	2b80      	cmp	r3, #128	; 0x80
 801077a:	d0f2      	beq.n	8010762 <SPI_EndRxTxTransaction+0x52>
 801077c:	e000      	b.n	8010780 <SPI_EndRxTxTransaction+0x70>
        break;
 801077e:	bf00      	nop
  }

  return HAL_OK;
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3718      	adds	r7, #24
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	20000000 	.word	0x20000000
 8010790:	165e9f81 	.word	0x165e9f81

08010794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d101      	bne.n	80107a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80107a2:	2301      	movs	r3, #1
 80107a4:	e01d      	b.n	80107e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d106      	bne.n	80107c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2200      	movs	r2, #0
 80107b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f7f7 f950 	bl	8007a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2202      	movs	r2, #2
 80107c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	3304      	adds	r3, #4
 80107d0:	4619      	mov	r1, r3
 80107d2:	4610      	mov	r0, r2
 80107d4:	f000 fb56 	bl	8010e84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2201      	movs	r2, #1
 80107dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80107e0:	2300      	movs	r3, #0
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3708      	adds	r7, #8
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80107ea:	b480      	push	{r7}
 80107ec:	b085      	sub	sp, #20
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	68da      	ldr	r2, [r3, #12]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f042 0201 	orr.w	r2, r2, #1
 8010800:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	f003 0307 	and.w	r3, r3, #7
 801080c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2b06      	cmp	r3, #6
 8010812:	d007      	beq.n	8010824 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f042 0201 	orr.w	r2, r2, #1
 8010822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	3714      	adds	r7, #20
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr

08010832 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010832:	b580      	push	{r7, lr}
 8010834:	b082      	sub	sp, #8
 8010836:	af00      	add	r7, sp, #0
 8010838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d101      	bne.n	8010844 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010840:	2301      	movs	r3, #1
 8010842:	e01d      	b.n	8010880 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801084a:	b2db      	uxtb	r3, r3
 801084c:	2b00      	cmp	r3, #0
 801084e:	d106      	bne.n	801085e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7f7 f88d 	bl	8007978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2202      	movs	r2, #2
 8010862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	3304      	adds	r3, #4
 801086e:	4619      	mov	r1, r3
 8010870:	4610      	mov	r0, r2
 8010872:	f000 fb07 	bl	8010e84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2201      	movs	r2, #1
 801087a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801087e:	2300      	movs	r3, #0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3708      	adds	r7, #8
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	2201      	movs	r2, #1
 8010898:	6839      	ldr	r1, [r7, #0]
 801089a:	4618      	mov	r0, r3
 801089c:	f000 fd42 	bl	8011324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a15      	ldr	r2, [pc, #84]	; (80108fc <HAL_TIM_PWM_Start+0x74>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d004      	beq.n	80108b4 <HAL_TIM_PWM_Start+0x2c>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4a14      	ldr	r2, [pc, #80]	; (8010900 <HAL_TIM_PWM_Start+0x78>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d101      	bne.n	80108b8 <HAL_TIM_PWM_Start+0x30>
 80108b4:	2301      	movs	r3, #1
 80108b6:	e000      	b.n	80108ba <HAL_TIM_PWM_Start+0x32>
 80108b8:	2300      	movs	r3, #0
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d007      	beq.n	80108ce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80108cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	f003 0307 	and.w	r3, r3, #7
 80108d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2b06      	cmp	r3, #6
 80108de:	d007      	beq.n	80108f0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f042 0201 	orr.w	r2, r2, #1
 80108ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80108f0:	2300      	movs	r3, #0
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	40010000 	.word	0x40010000
 8010900:	40010400 	.word	0x40010400

08010904 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b086      	sub	sp, #24
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d101      	bne.n	8010918 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010914:	2301      	movs	r3, #1
 8010916:	e083      	b.n	8010a20 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801091e:	b2db      	uxtb	r3, r3
 8010920:	2b00      	cmp	r3, #0
 8010922:	d106      	bne.n	8010932 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2200      	movs	r2, #0
 8010928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f7f7 f927 	bl	8007b80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2202      	movs	r2, #2
 8010936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	689b      	ldr	r3, [r3, #8]
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	6812      	ldr	r2, [r2, #0]
 8010944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010948:	f023 0307 	bic.w	r3, r3, #7
 801094c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	3304      	adds	r3, #4
 8010956:	4619      	mov	r1, r3
 8010958:	4610      	mov	r0, r2
 801095a:	f000 fa93 	bl	8010e84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	689b      	ldr	r3, [r3, #8]
 8010964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	699b      	ldr	r3, [r3, #24]
 801096c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	6a1b      	ldr	r3, [r3, #32]
 8010974:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	697a      	ldr	r2, [r7, #20]
 801097c:	4313      	orrs	r3, r2
 801097e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010986:	f023 0303 	bic.w	r3, r3, #3
 801098a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	689a      	ldr	r2, [r3, #8]
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	699b      	ldr	r3, [r3, #24]
 8010994:	021b      	lsls	r3, r3, #8
 8010996:	4313      	orrs	r3, r2
 8010998:	693a      	ldr	r2, [r7, #16]
 801099a:	4313      	orrs	r3, r2
 801099c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80109a4:	f023 030c 	bic.w	r3, r3, #12
 80109a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80109b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80109b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	68da      	ldr	r2, [r3, #12]
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	69db      	ldr	r3, [r3, #28]
 80109be:	021b      	lsls	r3, r3, #8
 80109c0:	4313      	orrs	r3, r2
 80109c2:	693a      	ldr	r2, [r7, #16]
 80109c4:	4313      	orrs	r3, r2
 80109c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	691b      	ldr	r3, [r3, #16]
 80109cc:	011a      	lsls	r2, r3, #4
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	031b      	lsls	r3, r3, #12
 80109d4:	4313      	orrs	r3, r2
 80109d6:	693a      	ldr	r2, [r7, #16]
 80109d8:	4313      	orrs	r3, r2
 80109da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80109e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80109ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	685a      	ldr	r2, [r3, #4]
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	695b      	ldr	r3, [r3, #20]
 80109f4:	011b      	lsls	r3, r3, #4
 80109f6:	4313      	orrs	r3, r2
 80109f8:	68fa      	ldr	r2, [r7, #12]
 80109fa:	4313      	orrs	r3, r2
 80109fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	697a      	ldr	r2, [r7, #20]
 8010a04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	693a      	ldr	r2, [r7, #16]
 8010a0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	68fa      	ldr	r2, [r7, #12]
 8010a14:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2201      	movs	r2, #1
 8010a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010a1e:	2300      	movs	r3, #0
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3718      	adds	r7, #24
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d002      	beq.n	8010a3e <HAL_TIM_Encoder_Start+0x16>
 8010a38:	2b04      	cmp	r3, #4
 8010a3a:	d008      	beq.n	8010a4e <HAL_TIM_Encoder_Start+0x26>
 8010a3c:	e00f      	b.n	8010a5e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2201      	movs	r2, #1
 8010a44:	2100      	movs	r1, #0
 8010a46:	4618      	mov	r0, r3
 8010a48:	f000 fc6c 	bl	8011324 <TIM_CCxChannelCmd>
      break;
 8010a4c:	e016      	b.n	8010a7c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2201      	movs	r2, #1
 8010a54:	2104      	movs	r1, #4
 8010a56:	4618      	mov	r0, r3
 8010a58:	f000 fc64 	bl	8011324 <TIM_CCxChannelCmd>
      break;
 8010a5c:	e00e      	b.n	8010a7c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	2201      	movs	r2, #1
 8010a64:	2100      	movs	r1, #0
 8010a66:	4618      	mov	r0, r3
 8010a68:	f000 fc5c 	bl	8011324 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2201      	movs	r2, #1
 8010a72:	2104      	movs	r1, #4
 8010a74:	4618      	mov	r0, r3
 8010a76:	f000 fc55 	bl	8011324 <TIM_CCxChannelCmd>
      break;
 8010a7a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f042 0201 	orr.w	r2, r2, #1
 8010a8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010a8c:	2300      	movs	r3, #0
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3708      	adds	r7, #8
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}

08010a96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010a96:	b580      	push	{r7, lr}
 8010a98:	b082      	sub	sp, #8
 8010a9a:	af00      	add	r7, sp, #0
 8010a9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	691b      	ldr	r3, [r3, #16]
 8010aa4:	f003 0302 	and.w	r3, r3, #2
 8010aa8:	2b02      	cmp	r3, #2
 8010aaa:	d122      	bne.n	8010af2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	68db      	ldr	r3, [r3, #12]
 8010ab2:	f003 0302 	and.w	r3, r3, #2
 8010ab6:	2b02      	cmp	r3, #2
 8010ab8:	d11b      	bne.n	8010af2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f06f 0202 	mvn.w	r2, #2
 8010ac2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	699b      	ldr	r3, [r3, #24]
 8010ad0:	f003 0303 	and.w	r3, r3, #3
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d003      	beq.n	8010ae0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f000 f9b5 	bl	8010e48 <HAL_TIM_IC_CaptureCallback>
 8010ade:	e005      	b.n	8010aec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f000 f9a7 	bl	8010e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f000 f9b8 	bl	8010e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	691b      	ldr	r3, [r3, #16]
 8010af8:	f003 0304 	and.w	r3, r3, #4
 8010afc:	2b04      	cmp	r3, #4
 8010afe:	d122      	bne.n	8010b46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	f003 0304 	and.w	r3, r3, #4
 8010b0a:	2b04      	cmp	r3, #4
 8010b0c:	d11b      	bne.n	8010b46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	f06f 0204 	mvn.w	r2, #4
 8010b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2202      	movs	r2, #2
 8010b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	699b      	ldr	r3, [r3, #24]
 8010b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d003      	beq.n	8010b34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 f98b 	bl	8010e48 <HAL_TIM_IC_CaptureCallback>
 8010b32:	e005      	b.n	8010b40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f000 f97d 	bl	8010e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 f98e 	bl	8010e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	691b      	ldr	r3, [r3, #16]
 8010b4c:	f003 0308 	and.w	r3, r3, #8
 8010b50:	2b08      	cmp	r3, #8
 8010b52:	d122      	bne.n	8010b9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	68db      	ldr	r3, [r3, #12]
 8010b5a:	f003 0308 	and.w	r3, r3, #8
 8010b5e:	2b08      	cmp	r3, #8
 8010b60:	d11b      	bne.n	8010b9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f06f 0208 	mvn.w	r2, #8
 8010b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2204      	movs	r2, #4
 8010b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	69db      	ldr	r3, [r3, #28]
 8010b78:	f003 0303 	and.w	r3, r3, #3
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d003      	beq.n	8010b88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f000 f961 	bl	8010e48 <HAL_TIM_IC_CaptureCallback>
 8010b86:	e005      	b.n	8010b94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f000 f953 	bl	8010e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f000 f964 	bl	8010e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2200      	movs	r2, #0
 8010b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	691b      	ldr	r3, [r3, #16]
 8010ba0:	f003 0310 	and.w	r3, r3, #16
 8010ba4:	2b10      	cmp	r3, #16
 8010ba6:	d122      	bne.n	8010bee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	f003 0310 	and.w	r3, r3, #16
 8010bb2:	2b10      	cmp	r3, #16
 8010bb4:	d11b      	bne.n	8010bee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f06f 0210 	mvn.w	r2, #16
 8010bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2208      	movs	r2, #8
 8010bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	69db      	ldr	r3, [r3, #28]
 8010bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d003      	beq.n	8010bdc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f000 f937 	bl	8010e48 <HAL_TIM_IC_CaptureCallback>
 8010bda:	e005      	b.n	8010be8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 f929 	bl	8010e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 f93a 	bl	8010e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2200      	movs	r2, #0
 8010bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	691b      	ldr	r3, [r3, #16]
 8010bf4:	f003 0301 	and.w	r3, r3, #1
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d10e      	bne.n	8010c1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	f003 0301 	and.w	r3, r3, #1
 8010c06:	2b01      	cmp	r3, #1
 8010c08:	d107      	bne.n	8010c1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f06f 0201 	mvn.w	r2, #1
 8010c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f7f5 fc8b 	bl	8006530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	691b      	ldr	r3, [r3, #16]
 8010c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c24:	2b80      	cmp	r3, #128	; 0x80
 8010c26:	d10e      	bne.n	8010c46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	68db      	ldr	r3, [r3, #12]
 8010c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c32:	2b80      	cmp	r3, #128	; 0x80
 8010c34:	d107      	bne.n	8010c46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f000 fc6d 	bl	8011520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	691b      	ldr	r3, [r3, #16]
 8010c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c50:	2b40      	cmp	r3, #64	; 0x40
 8010c52:	d10e      	bne.n	8010c72 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	68db      	ldr	r3, [r3, #12]
 8010c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c5e:	2b40      	cmp	r3, #64	; 0x40
 8010c60:	d107      	bne.n	8010c72 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f000 f8ff 	bl	8010e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	691b      	ldr	r3, [r3, #16]
 8010c78:	f003 0320 	and.w	r3, r3, #32
 8010c7c:	2b20      	cmp	r3, #32
 8010c7e:	d10e      	bne.n	8010c9e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	f003 0320 	and.w	r3, r3, #32
 8010c8a:	2b20      	cmp	r3, #32
 8010c8c:	d107      	bne.n	8010c9e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	f06f 0220 	mvn.w	r2, #32
 8010c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f000 fc37 	bl	801150c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010c9e:	bf00      	nop
 8010ca0:	3708      	adds	r7, #8
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
	...

08010ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60f8      	str	r0, [r7, #12]
 8010cb0:	60b9      	str	r1, [r7, #8]
 8010cb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010cba:	2b01      	cmp	r3, #1
 8010cbc:	d101      	bne.n	8010cc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010cbe:	2302      	movs	r3, #2
 8010cc0:	e0b4      	b.n	8010e2c <HAL_TIM_PWM_ConfigChannel+0x184>
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2201      	movs	r2, #1
 8010cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2202      	movs	r2, #2
 8010cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2b0c      	cmp	r3, #12
 8010cd6:	f200 809f 	bhi.w	8010e18 <HAL_TIM_PWM_ConfigChannel+0x170>
 8010cda:	a201      	add	r2, pc, #4	; (adr r2, 8010ce0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8010cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce0:	08010d15 	.word	0x08010d15
 8010ce4:	08010e19 	.word	0x08010e19
 8010ce8:	08010e19 	.word	0x08010e19
 8010cec:	08010e19 	.word	0x08010e19
 8010cf0:	08010d55 	.word	0x08010d55
 8010cf4:	08010e19 	.word	0x08010e19
 8010cf8:	08010e19 	.word	0x08010e19
 8010cfc:	08010e19 	.word	0x08010e19
 8010d00:	08010d97 	.word	0x08010d97
 8010d04:	08010e19 	.word	0x08010e19
 8010d08:	08010e19 	.word	0x08010e19
 8010d0c:	08010e19 	.word	0x08010e19
 8010d10:	08010dd7 	.word	0x08010dd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	68b9      	ldr	r1, [r7, #8]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f000 f952 	bl	8010fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	699a      	ldr	r2, [r3, #24]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f042 0208 	orr.w	r2, r2, #8
 8010d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	699a      	ldr	r2, [r3, #24]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f022 0204 	bic.w	r2, r2, #4
 8010d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	6999      	ldr	r1, [r3, #24]
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	691a      	ldr	r2, [r3, #16]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	430a      	orrs	r2, r1
 8010d50:	619a      	str	r2, [r3, #24]
      break;
 8010d52:	e062      	b.n	8010e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	68b9      	ldr	r1, [r7, #8]
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f000 f9a2 	bl	80110a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	699a      	ldr	r2, [r3, #24]
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	699a      	ldr	r2, [r3, #24]
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	6999      	ldr	r1, [r3, #24]
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	691b      	ldr	r3, [r3, #16]
 8010d8a:	021a      	lsls	r2, r3, #8
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	430a      	orrs	r2, r1
 8010d92:	619a      	str	r2, [r3, #24]
      break;
 8010d94:	e041      	b.n	8010e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	68b9      	ldr	r1, [r7, #8]
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f000 f9f7 	bl	8011190 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	69da      	ldr	r2, [r3, #28]
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f042 0208 	orr.w	r2, r2, #8
 8010db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	69da      	ldr	r2, [r3, #28]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f022 0204 	bic.w	r2, r2, #4
 8010dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	69d9      	ldr	r1, [r3, #28]
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	691a      	ldr	r2, [r3, #16]
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	430a      	orrs	r2, r1
 8010dd2:	61da      	str	r2, [r3, #28]
      break;
 8010dd4:	e021      	b.n	8010e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	68b9      	ldr	r1, [r7, #8]
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f000 fa4b 	bl	8011278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	69da      	ldr	r2, [r3, #28]
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	69da      	ldr	r2, [r3, #28]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	69d9      	ldr	r1, [r3, #28]
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	021a      	lsls	r2, r3, #8
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	430a      	orrs	r2, r1
 8010e14:	61da      	str	r2, [r3, #28]
      break;
 8010e16:	e000      	b.n	8010e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8010e18:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2201      	movs	r2, #1
 8010e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2200      	movs	r2, #0
 8010e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010e2a:	2300      	movs	r3, #0
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3710      	adds	r7, #16
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010e3c:	bf00      	nop
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b083      	sub	sp, #12
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010e50:	bf00      	nop
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010e64:	bf00      	nop
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010e78:	bf00      	nop
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b085      	sub	sp, #20
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	4a40      	ldr	r2, [pc, #256]	; (8010f98 <TIM_Base_SetConfig+0x114>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d013      	beq.n	8010ec4 <TIM_Base_SetConfig+0x40>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ea2:	d00f      	beq.n	8010ec4 <TIM_Base_SetConfig+0x40>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	4a3d      	ldr	r2, [pc, #244]	; (8010f9c <TIM_Base_SetConfig+0x118>)
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d00b      	beq.n	8010ec4 <TIM_Base_SetConfig+0x40>
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	4a3c      	ldr	r2, [pc, #240]	; (8010fa0 <TIM_Base_SetConfig+0x11c>)
 8010eb0:	4293      	cmp	r3, r2
 8010eb2:	d007      	beq.n	8010ec4 <TIM_Base_SetConfig+0x40>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	4a3b      	ldr	r2, [pc, #236]	; (8010fa4 <TIM_Base_SetConfig+0x120>)
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d003      	beq.n	8010ec4 <TIM_Base_SetConfig+0x40>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	4a3a      	ldr	r2, [pc, #232]	; (8010fa8 <TIM_Base_SetConfig+0x124>)
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	d108      	bne.n	8010ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	68fa      	ldr	r2, [r7, #12]
 8010ed2:	4313      	orrs	r3, r2
 8010ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4a2f      	ldr	r2, [pc, #188]	; (8010f98 <TIM_Base_SetConfig+0x114>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d02b      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ee4:	d027      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	4a2c      	ldr	r2, [pc, #176]	; (8010f9c <TIM_Base_SetConfig+0x118>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d023      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	4a2b      	ldr	r2, [pc, #172]	; (8010fa0 <TIM_Base_SetConfig+0x11c>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d01f      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	4a2a      	ldr	r2, [pc, #168]	; (8010fa4 <TIM_Base_SetConfig+0x120>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d01b      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	4a29      	ldr	r2, [pc, #164]	; (8010fa8 <TIM_Base_SetConfig+0x124>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d017      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4a28      	ldr	r2, [pc, #160]	; (8010fac <TIM_Base_SetConfig+0x128>)
 8010f0a:	4293      	cmp	r3, r2
 8010f0c:	d013      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	4a27      	ldr	r2, [pc, #156]	; (8010fb0 <TIM_Base_SetConfig+0x12c>)
 8010f12:	4293      	cmp	r3, r2
 8010f14:	d00f      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4a26      	ldr	r2, [pc, #152]	; (8010fb4 <TIM_Base_SetConfig+0x130>)
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d00b      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	4a25      	ldr	r2, [pc, #148]	; (8010fb8 <TIM_Base_SetConfig+0x134>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d007      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	4a24      	ldr	r2, [pc, #144]	; (8010fbc <TIM_Base_SetConfig+0x138>)
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	d003      	beq.n	8010f36 <TIM_Base_SetConfig+0xb2>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	4a23      	ldr	r2, [pc, #140]	; (8010fc0 <TIM_Base_SetConfig+0x13c>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d108      	bne.n	8010f48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	68fa      	ldr	r2, [r7, #12]
 8010f44:	4313      	orrs	r3, r2
 8010f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	695b      	ldr	r3, [r3, #20]
 8010f52:	4313      	orrs	r3, r2
 8010f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	68fa      	ldr	r2, [r7, #12]
 8010f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	689a      	ldr	r2, [r3, #8]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	681a      	ldr	r2, [r3, #0]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	4a0a      	ldr	r2, [pc, #40]	; (8010f98 <TIM_Base_SetConfig+0x114>)
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d003      	beq.n	8010f7c <TIM_Base_SetConfig+0xf8>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	4a0c      	ldr	r2, [pc, #48]	; (8010fa8 <TIM_Base_SetConfig+0x124>)
 8010f78:	4293      	cmp	r3, r2
 8010f7a:	d103      	bne.n	8010f84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	691a      	ldr	r2, [r3, #16]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2201      	movs	r2, #1
 8010f88:	615a      	str	r2, [r3, #20]
}
 8010f8a:	bf00      	nop
 8010f8c:	3714      	adds	r7, #20
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop
 8010f98:	40010000 	.word	0x40010000
 8010f9c:	40000400 	.word	0x40000400
 8010fa0:	40000800 	.word	0x40000800
 8010fa4:	40000c00 	.word	0x40000c00
 8010fa8:	40010400 	.word	0x40010400
 8010fac:	40014000 	.word	0x40014000
 8010fb0:	40014400 	.word	0x40014400
 8010fb4:	40014800 	.word	0x40014800
 8010fb8:	40001800 	.word	0x40001800
 8010fbc:	40001c00 	.word	0x40001c00
 8010fc0:	40002000 	.word	0x40002000

08010fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b087      	sub	sp, #28
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6a1b      	ldr	r3, [r3, #32]
 8010fd2:	f023 0201 	bic.w	r2, r3, #1
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6a1b      	ldr	r3, [r3, #32]
 8010fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	699b      	ldr	r3, [r3, #24]
 8010fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	f023 0303 	bic.w	r3, r3, #3
 8010ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	68fa      	ldr	r2, [r7, #12]
 8011002:	4313      	orrs	r3, r2
 8011004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	f023 0302 	bic.w	r3, r3, #2
 801100c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	689b      	ldr	r3, [r3, #8]
 8011012:	697a      	ldr	r2, [r7, #20]
 8011014:	4313      	orrs	r3, r2
 8011016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	4a20      	ldr	r2, [pc, #128]	; (801109c <TIM_OC1_SetConfig+0xd8>)
 801101c:	4293      	cmp	r3, r2
 801101e:	d003      	beq.n	8011028 <TIM_OC1_SetConfig+0x64>
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	4a1f      	ldr	r2, [pc, #124]	; (80110a0 <TIM_OC1_SetConfig+0xdc>)
 8011024:	4293      	cmp	r3, r2
 8011026:	d10c      	bne.n	8011042 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	f023 0308 	bic.w	r3, r3, #8
 801102e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	697a      	ldr	r2, [r7, #20]
 8011036:	4313      	orrs	r3, r2
 8011038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	f023 0304 	bic.w	r3, r3, #4
 8011040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4a15      	ldr	r2, [pc, #84]	; (801109c <TIM_OC1_SetConfig+0xd8>)
 8011046:	4293      	cmp	r3, r2
 8011048:	d003      	beq.n	8011052 <TIM_OC1_SetConfig+0x8e>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4a14      	ldr	r2, [pc, #80]	; (80110a0 <TIM_OC1_SetConfig+0xdc>)
 801104e:	4293      	cmp	r3, r2
 8011050:	d111      	bne.n	8011076 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	695b      	ldr	r3, [r3, #20]
 8011066:	693a      	ldr	r2, [r7, #16]
 8011068:	4313      	orrs	r3, r2
 801106a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	699b      	ldr	r3, [r3, #24]
 8011070:	693a      	ldr	r2, [r7, #16]
 8011072:	4313      	orrs	r3, r2
 8011074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	693a      	ldr	r2, [r7, #16]
 801107a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	68fa      	ldr	r2, [r7, #12]
 8011080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	685a      	ldr	r2, [r3, #4]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	697a      	ldr	r2, [r7, #20]
 801108e:	621a      	str	r2, [r3, #32]
}
 8011090:	bf00      	nop
 8011092:	371c      	adds	r7, #28
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr
 801109c:	40010000 	.word	0x40010000
 80110a0:	40010400 	.word	0x40010400

080110a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b087      	sub	sp, #28
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6a1b      	ldr	r3, [r3, #32]
 80110b2:	f023 0210 	bic.w	r2, r3, #16
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6a1b      	ldr	r3, [r3, #32]
 80110be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	699b      	ldr	r3, [r3, #24]
 80110ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	021b      	lsls	r3, r3, #8
 80110e2:	68fa      	ldr	r2, [r7, #12]
 80110e4:	4313      	orrs	r3, r2
 80110e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	f023 0320 	bic.w	r3, r3, #32
 80110ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	011b      	lsls	r3, r3, #4
 80110f6:	697a      	ldr	r2, [r7, #20]
 80110f8:	4313      	orrs	r3, r2
 80110fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	4a22      	ldr	r2, [pc, #136]	; (8011188 <TIM_OC2_SetConfig+0xe4>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d003      	beq.n	801110c <TIM_OC2_SetConfig+0x68>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	4a21      	ldr	r2, [pc, #132]	; (801118c <TIM_OC2_SetConfig+0xe8>)
 8011108:	4293      	cmp	r3, r2
 801110a:	d10d      	bne.n	8011128 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	011b      	lsls	r3, r3, #4
 801111a:	697a      	ldr	r2, [r7, #20]
 801111c:	4313      	orrs	r3, r2
 801111e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	4a17      	ldr	r2, [pc, #92]	; (8011188 <TIM_OC2_SetConfig+0xe4>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d003      	beq.n	8011138 <TIM_OC2_SetConfig+0x94>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	4a16      	ldr	r2, [pc, #88]	; (801118c <TIM_OC2_SetConfig+0xe8>)
 8011134:	4293      	cmp	r3, r2
 8011136:	d113      	bne.n	8011160 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801113e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	695b      	ldr	r3, [r3, #20]
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	693a      	ldr	r2, [r7, #16]
 8011150:	4313      	orrs	r3, r2
 8011152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	699b      	ldr	r3, [r3, #24]
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	693a      	ldr	r2, [r7, #16]
 801115c:	4313      	orrs	r3, r2
 801115e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	693a      	ldr	r2, [r7, #16]
 8011164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	68fa      	ldr	r2, [r7, #12]
 801116a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	685a      	ldr	r2, [r3, #4]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	621a      	str	r2, [r3, #32]
}
 801117a:	bf00      	nop
 801117c:	371c      	adds	r7, #28
 801117e:	46bd      	mov	sp, r7
 8011180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011184:	4770      	bx	lr
 8011186:	bf00      	nop
 8011188:	40010000 	.word	0x40010000
 801118c:	40010400 	.word	0x40010400

08011190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011190:	b480      	push	{r7}
 8011192:	b087      	sub	sp, #28
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6a1b      	ldr	r3, [r3, #32]
 801119e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6a1b      	ldr	r3, [r3, #32]
 80111aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	685b      	ldr	r3, [r3, #4]
 80111b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	69db      	ldr	r3, [r3, #28]
 80111b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f023 0303 	bic.w	r3, r3, #3
 80111c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68fa      	ldr	r2, [r7, #12]
 80111ce:	4313      	orrs	r3, r2
 80111d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80111d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	689b      	ldr	r3, [r3, #8]
 80111de:	021b      	lsls	r3, r3, #8
 80111e0:	697a      	ldr	r2, [r7, #20]
 80111e2:	4313      	orrs	r3, r2
 80111e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4a21      	ldr	r2, [pc, #132]	; (8011270 <TIM_OC3_SetConfig+0xe0>)
 80111ea:	4293      	cmp	r3, r2
 80111ec:	d003      	beq.n	80111f6 <TIM_OC3_SetConfig+0x66>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4a20      	ldr	r2, [pc, #128]	; (8011274 <TIM_OC3_SetConfig+0xe4>)
 80111f2:	4293      	cmp	r3, r2
 80111f4:	d10d      	bne.n	8011212 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80111fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	021b      	lsls	r3, r3, #8
 8011204:	697a      	ldr	r2, [r7, #20]
 8011206:	4313      	orrs	r3, r2
 8011208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4a16      	ldr	r2, [pc, #88]	; (8011270 <TIM_OC3_SetConfig+0xe0>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d003      	beq.n	8011222 <TIM_OC3_SetConfig+0x92>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4a15      	ldr	r2, [pc, #84]	; (8011274 <TIM_OC3_SetConfig+0xe4>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d113      	bne.n	801124a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	695b      	ldr	r3, [r3, #20]
 8011236:	011b      	lsls	r3, r3, #4
 8011238:	693a      	ldr	r2, [r7, #16]
 801123a:	4313      	orrs	r3, r2
 801123c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	699b      	ldr	r3, [r3, #24]
 8011242:	011b      	lsls	r3, r3, #4
 8011244:	693a      	ldr	r2, [r7, #16]
 8011246:	4313      	orrs	r3, r2
 8011248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	693a      	ldr	r2, [r7, #16]
 801124e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	68fa      	ldr	r2, [r7, #12]
 8011254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	685a      	ldr	r2, [r3, #4]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	697a      	ldr	r2, [r7, #20]
 8011262:	621a      	str	r2, [r3, #32]
}
 8011264:	bf00      	nop
 8011266:	371c      	adds	r7, #28
 8011268:	46bd      	mov	sp, r7
 801126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126e:	4770      	bx	lr
 8011270:	40010000 	.word	0x40010000
 8011274:	40010400 	.word	0x40010400

08011278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011278:	b480      	push	{r7}
 801127a:	b087      	sub	sp, #28
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6a1b      	ldr	r3, [r3, #32]
 8011286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6a1b      	ldr	r3, [r3, #32]
 8011292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	685b      	ldr	r3, [r3, #4]
 8011298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	69db      	ldr	r3, [r3, #28]
 801129e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80112a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80112ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	021b      	lsls	r3, r3, #8
 80112b6:	68fa      	ldr	r2, [r7, #12]
 80112b8:	4313      	orrs	r3, r2
 80112ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80112c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	031b      	lsls	r3, r3, #12
 80112ca:	693a      	ldr	r2, [r7, #16]
 80112cc:	4313      	orrs	r3, r2
 80112ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	4a12      	ldr	r2, [pc, #72]	; (801131c <TIM_OC4_SetConfig+0xa4>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d003      	beq.n	80112e0 <TIM_OC4_SetConfig+0x68>
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	4a11      	ldr	r2, [pc, #68]	; (8011320 <TIM_OC4_SetConfig+0xa8>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	d109      	bne.n	80112f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80112e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	695b      	ldr	r3, [r3, #20]
 80112ec:	019b      	lsls	r3, r3, #6
 80112ee:	697a      	ldr	r2, [r7, #20]
 80112f0:	4313      	orrs	r3, r2
 80112f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	697a      	ldr	r2, [r7, #20]
 80112f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	68fa      	ldr	r2, [r7, #12]
 80112fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	685a      	ldr	r2, [r3, #4]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	693a      	ldr	r2, [r7, #16]
 801130c:	621a      	str	r2, [r3, #32]
}
 801130e:	bf00      	nop
 8011310:	371c      	adds	r7, #28
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	40010000 	.word	0x40010000
 8011320:	40010400 	.word	0x40010400

08011324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011324:	b480      	push	{r7}
 8011326:	b087      	sub	sp, #28
 8011328:	af00      	add	r7, sp, #0
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	f003 031f 	and.w	r3, r3, #31
 8011336:	2201      	movs	r2, #1
 8011338:	fa02 f303 	lsl.w	r3, r2, r3
 801133c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	6a1a      	ldr	r2, [r3, #32]
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	43db      	mvns	r3, r3
 8011346:	401a      	ands	r2, r3
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	6a1a      	ldr	r2, [r3, #32]
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	f003 031f 	and.w	r3, r3, #31
 8011356:	6879      	ldr	r1, [r7, #4]
 8011358:	fa01 f303 	lsl.w	r3, r1, r3
 801135c:	431a      	orrs	r2, r3
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	621a      	str	r2, [r3, #32]
}
 8011362:	bf00      	nop
 8011364:	371c      	adds	r7, #28
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr
	...

08011370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011370:	b480      	push	{r7}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011380:	2b01      	cmp	r3, #1
 8011382:	d101      	bne.n	8011388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011384:	2302      	movs	r3, #2
 8011386:	e05a      	b.n	801143e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2201      	movs	r2, #1
 801138c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2202      	movs	r2, #2
 8011394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	689b      	ldr	r3, [r3, #8]
 80113a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	68fa      	ldr	r2, [r7, #12]
 80113b6:	4313      	orrs	r3, r2
 80113b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	4a21      	ldr	r2, [pc, #132]	; (801144c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80113c8:	4293      	cmp	r3, r2
 80113ca:	d022      	beq.n	8011412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113d4:	d01d      	beq.n	8011412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	4a1d      	ldr	r2, [pc, #116]	; (8011450 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80113dc:	4293      	cmp	r3, r2
 80113de:	d018      	beq.n	8011412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4a1b      	ldr	r2, [pc, #108]	; (8011454 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d013      	beq.n	8011412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	4a1a      	ldr	r2, [pc, #104]	; (8011458 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d00e      	beq.n	8011412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4a18      	ldr	r2, [pc, #96]	; (801145c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d009      	beq.n	8011412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	4a17      	ldr	r2, [pc, #92]	; (8011460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8011404:	4293      	cmp	r3, r2
 8011406:	d004      	beq.n	8011412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4a15      	ldr	r2, [pc, #84]	; (8011464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801140e:	4293      	cmp	r3, r2
 8011410:	d10c      	bne.n	801142c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	68ba      	ldr	r2, [r7, #8]
 8011420:	4313      	orrs	r3, r2
 8011422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	68ba      	ldr	r2, [r7, #8]
 801142a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2201      	movs	r2, #1
 8011430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2200      	movs	r2, #0
 8011438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	3714      	adds	r7, #20
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr
 801144a:	bf00      	nop
 801144c:	40010000 	.word	0x40010000
 8011450:	40000400 	.word	0x40000400
 8011454:	40000800 	.word	0x40000800
 8011458:	40000c00 	.word	0x40000c00
 801145c:	40010400 	.word	0x40010400
 8011460:	40014000 	.word	0x40014000
 8011464:	40001800 	.word	0x40001800

08011468 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011468:	b480      	push	{r7}
 801146a:	b085      	sub	sp, #20
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011472:	2300      	movs	r3, #0
 8011474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801147c:	2b01      	cmp	r3, #1
 801147e:	d101      	bne.n	8011484 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011480:	2302      	movs	r3, #2
 8011482:	e03d      	b.n	8011500 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2201      	movs	r2, #1
 8011488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	68db      	ldr	r3, [r3, #12]
 8011496:	4313      	orrs	r3, r2
 8011498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	689b      	ldr	r3, [r3, #8]
 80114a4:	4313      	orrs	r3, r2
 80114a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	4313      	orrs	r3, r2
 80114b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	4313      	orrs	r3, r2
 80114c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	691b      	ldr	r3, [r3, #16]
 80114ce:	4313      	orrs	r3, r2
 80114d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	695b      	ldr	r3, [r3, #20]
 80114dc:	4313      	orrs	r3, r2
 80114de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	69db      	ldr	r3, [r3, #28]
 80114ea:	4313      	orrs	r3, r2
 80114ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	68fa      	ldr	r2, [r7, #12]
 80114f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2200      	movs	r2, #0
 80114fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80114fe:	2300      	movs	r3, #0
}
 8011500:	4618      	mov	r0, r3
 8011502:	3714      	adds	r7, #20
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr

0801150c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801150c:	b480      	push	{r7}
 801150e:	b083      	sub	sp, #12
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011514:	bf00      	nop
 8011516:	370c      	adds	r7, #12
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr

08011520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011528:	bf00      	nop
 801152a:	370c      	adds	r7, #12
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr

08011534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d101      	bne.n	8011546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011542:	2301      	movs	r3, #1
 8011544:	e03f      	b.n	80115c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801154c:	b2db      	uxtb	r3, r3
 801154e:	2b00      	cmp	r3, #0
 8011550:	d106      	bne.n	8011560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2200      	movs	r2, #0
 8011556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7f6 fc3a 	bl	8007dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2224      	movs	r2, #36	; 0x24
 8011564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	68da      	ldr	r2, [r3, #12]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f000 f829 	bl	80115d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	691a      	ldr	r2, [r3, #16]
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801158c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	695a      	ldr	r2, [r3, #20]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801159c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	68da      	ldr	r2, [r3, #12]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80115ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2200      	movs	r2, #0
 80115b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2220      	movs	r2, #32
 80115b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2220      	movs	r2, #32
 80115c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80115c4:	2300      	movs	r3, #0
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
	...

080115d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80115d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d4:	b085      	sub	sp, #20
 80115d6:	af00      	add	r7, sp, #0
 80115d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	691b      	ldr	r3, [r3, #16]
 80115e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	68da      	ldr	r2, [r3, #12]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	430a      	orrs	r2, r1
 80115ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	689a      	ldr	r2, [r3, #8]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	691b      	ldr	r3, [r3, #16]
 80115f8:	431a      	orrs	r2, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	695b      	ldr	r3, [r3, #20]
 80115fe:	431a      	orrs	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	69db      	ldr	r3, [r3, #28]
 8011604:	4313      	orrs	r3, r2
 8011606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	68db      	ldr	r3, [r3, #12]
 801160e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8011612:	f023 030c 	bic.w	r3, r3, #12
 8011616:	687a      	ldr	r2, [r7, #4]
 8011618:	6812      	ldr	r2, [r2, #0]
 801161a:	68f9      	ldr	r1, [r7, #12]
 801161c:	430b      	orrs	r3, r1
 801161e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	695b      	ldr	r3, [r3, #20]
 8011626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	699a      	ldr	r2, [r3, #24]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	430a      	orrs	r2, r1
 8011634:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	69db      	ldr	r3, [r3, #28]
 801163a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801163e:	f040 818b 	bne.w	8011958 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4ac1      	ldr	r2, [pc, #772]	; (801194c <UART_SetConfig+0x37c>)
 8011648:	4293      	cmp	r3, r2
 801164a:	d005      	beq.n	8011658 <UART_SetConfig+0x88>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	4abf      	ldr	r2, [pc, #764]	; (8011950 <UART_SetConfig+0x380>)
 8011652:	4293      	cmp	r3, r2
 8011654:	f040 80bd 	bne.w	80117d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011658:	f7fc fbcc 	bl	800ddf4 <HAL_RCC_GetPCLK2Freq>
 801165c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	461d      	mov	r5, r3
 8011662:	f04f 0600 	mov.w	r6, #0
 8011666:	46a8      	mov	r8, r5
 8011668:	46b1      	mov	r9, r6
 801166a:	eb18 0308 	adds.w	r3, r8, r8
 801166e:	eb49 0409 	adc.w	r4, r9, r9
 8011672:	4698      	mov	r8, r3
 8011674:	46a1      	mov	r9, r4
 8011676:	eb18 0805 	adds.w	r8, r8, r5
 801167a:	eb49 0906 	adc.w	r9, r9, r6
 801167e:	f04f 0100 	mov.w	r1, #0
 8011682:	f04f 0200 	mov.w	r2, #0
 8011686:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801168a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801168e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011692:	4688      	mov	r8, r1
 8011694:	4691      	mov	r9, r2
 8011696:	eb18 0005 	adds.w	r0, r8, r5
 801169a:	eb49 0106 	adc.w	r1, r9, r6
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	461d      	mov	r5, r3
 80116a4:	f04f 0600 	mov.w	r6, #0
 80116a8:	196b      	adds	r3, r5, r5
 80116aa:	eb46 0406 	adc.w	r4, r6, r6
 80116ae:	461a      	mov	r2, r3
 80116b0:	4623      	mov	r3, r4
 80116b2:	f7ef fb01 	bl	8000cb8 <__aeabi_uldivmod>
 80116b6:	4603      	mov	r3, r0
 80116b8:	460c      	mov	r4, r1
 80116ba:	461a      	mov	r2, r3
 80116bc:	4ba5      	ldr	r3, [pc, #660]	; (8011954 <UART_SetConfig+0x384>)
 80116be:	fba3 2302 	umull	r2, r3, r3, r2
 80116c2:	095b      	lsrs	r3, r3, #5
 80116c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	461d      	mov	r5, r3
 80116cc:	f04f 0600 	mov.w	r6, #0
 80116d0:	46a9      	mov	r9, r5
 80116d2:	46b2      	mov	sl, r6
 80116d4:	eb19 0309 	adds.w	r3, r9, r9
 80116d8:	eb4a 040a 	adc.w	r4, sl, sl
 80116dc:	4699      	mov	r9, r3
 80116de:	46a2      	mov	sl, r4
 80116e0:	eb19 0905 	adds.w	r9, r9, r5
 80116e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80116e8:	f04f 0100 	mov.w	r1, #0
 80116ec:	f04f 0200 	mov.w	r2, #0
 80116f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80116f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80116f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80116fc:	4689      	mov	r9, r1
 80116fe:	4692      	mov	sl, r2
 8011700:	eb19 0005 	adds.w	r0, r9, r5
 8011704:	eb4a 0106 	adc.w	r1, sl, r6
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	461d      	mov	r5, r3
 801170e:	f04f 0600 	mov.w	r6, #0
 8011712:	196b      	adds	r3, r5, r5
 8011714:	eb46 0406 	adc.w	r4, r6, r6
 8011718:	461a      	mov	r2, r3
 801171a:	4623      	mov	r3, r4
 801171c:	f7ef facc 	bl	8000cb8 <__aeabi_uldivmod>
 8011720:	4603      	mov	r3, r0
 8011722:	460c      	mov	r4, r1
 8011724:	461a      	mov	r2, r3
 8011726:	4b8b      	ldr	r3, [pc, #556]	; (8011954 <UART_SetConfig+0x384>)
 8011728:	fba3 1302 	umull	r1, r3, r3, r2
 801172c:	095b      	lsrs	r3, r3, #5
 801172e:	2164      	movs	r1, #100	; 0x64
 8011730:	fb01 f303 	mul.w	r3, r1, r3
 8011734:	1ad3      	subs	r3, r2, r3
 8011736:	00db      	lsls	r3, r3, #3
 8011738:	3332      	adds	r3, #50	; 0x32
 801173a:	4a86      	ldr	r2, [pc, #536]	; (8011954 <UART_SetConfig+0x384>)
 801173c:	fba2 2303 	umull	r2, r3, r2, r3
 8011740:	095b      	lsrs	r3, r3, #5
 8011742:	005b      	lsls	r3, r3, #1
 8011744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011748:	4498      	add	r8, r3
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	461d      	mov	r5, r3
 801174e:	f04f 0600 	mov.w	r6, #0
 8011752:	46a9      	mov	r9, r5
 8011754:	46b2      	mov	sl, r6
 8011756:	eb19 0309 	adds.w	r3, r9, r9
 801175a:	eb4a 040a 	adc.w	r4, sl, sl
 801175e:	4699      	mov	r9, r3
 8011760:	46a2      	mov	sl, r4
 8011762:	eb19 0905 	adds.w	r9, r9, r5
 8011766:	eb4a 0a06 	adc.w	sl, sl, r6
 801176a:	f04f 0100 	mov.w	r1, #0
 801176e:	f04f 0200 	mov.w	r2, #0
 8011772:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011776:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801177a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801177e:	4689      	mov	r9, r1
 8011780:	4692      	mov	sl, r2
 8011782:	eb19 0005 	adds.w	r0, r9, r5
 8011786:	eb4a 0106 	adc.w	r1, sl, r6
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	685b      	ldr	r3, [r3, #4]
 801178e:	461d      	mov	r5, r3
 8011790:	f04f 0600 	mov.w	r6, #0
 8011794:	196b      	adds	r3, r5, r5
 8011796:	eb46 0406 	adc.w	r4, r6, r6
 801179a:	461a      	mov	r2, r3
 801179c:	4623      	mov	r3, r4
 801179e:	f7ef fa8b 	bl	8000cb8 <__aeabi_uldivmod>
 80117a2:	4603      	mov	r3, r0
 80117a4:	460c      	mov	r4, r1
 80117a6:	461a      	mov	r2, r3
 80117a8:	4b6a      	ldr	r3, [pc, #424]	; (8011954 <UART_SetConfig+0x384>)
 80117aa:	fba3 1302 	umull	r1, r3, r3, r2
 80117ae:	095b      	lsrs	r3, r3, #5
 80117b0:	2164      	movs	r1, #100	; 0x64
 80117b2:	fb01 f303 	mul.w	r3, r1, r3
 80117b6:	1ad3      	subs	r3, r2, r3
 80117b8:	00db      	lsls	r3, r3, #3
 80117ba:	3332      	adds	r3, #50	; 0x32
 80117bc:	4a65      	ldr	r2, [pc, #404]	; (8011954 <UART_SetConfig+0x384>)
 80117be:	fba2 2303 	umull	r2, r3, r2, r3
 80117c2:	095b      	lsrs	r3, r3, #5
 80117c4:	f003 0207 	and.w	r2, r3, #7
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	4442      	add	r2, r8
 80117ce:	609a      	str	r2, [r3, #8]
 80117d0:	e26f      	b.n	8011cb2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80117d2:	f7fc fafb 	bl	800ddcc <HAL_RCC_GetPCLK1Freq>
 80117d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	461d      	mov	r5, r3
 80117dc:	f04f 0600 	mov.w	r6, #0
 80117e0:	46a8      	mov	r8, r5
 80117e2:	46b1      	mov	r9, r6
 80117e4:	eb18 0308 	adds.w	r3, r8, r8
 80117e8:	eb49 0409 	adc.w	r4, r9, r9
 80117ec:	4698      	mov	r8, r3
 80117ee:	46a1      	mov	r9, r4
 80117f0:	eb18 0805 	adds.w	r8, r8, r5
 80117f4:	eb49 0906 	adc.w	r9, r9, r6
 80117f8:	f04f 0100 	mov.w	r1, #0
 80117fc:	f04f 0200 	mov.w	r2, #0
 8011800:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011804:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011808:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801180c:	4688      	mov	r8, r1
 801180e:	4691      	mov	r9, r2
 8011810:	eb18 0005 	adds.w	r0, r8, r5
 8011814:	eb49 0106 	adc.w	r1, r9, r6
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	461d      	mov	r5, r3
 801181e:	f04f 0600 	mov.w	r6, #0
 8011822:	196b      	adds	r3, r5, r5
 8011824:	eb46 0406 	adc.w	r4, r6, r6
 8011828:	461a      	mov	r2, r3
 801182a:	4623      	mov	r3, r4
 801182c:	f7ef fa44 	bl	8000cb8 <__aeabi_uldivmod>
 8011830:	4603      	mov	r3, r0
 8011832:	460c      	mov	r4, r1
 8011834:	461a      	mov	r2, r3
 8011836:	4b47      	ldr	r3, [pc, #284]	; (8011954 <UART_SetConfig+0x384>)
 8011838:	fba3 2302 	umull	r2, r3, r3, r2
 801183c:	095b      	lsrs	r3, r3, #5
 801183e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	461d      	mov	r5, r3
 8011846:	f04f 0600 	mov.w	r6, #0
 801184a:	46a9      	mov	r9, r5
 801184c:	46b2      	mov	sl, r6
 801184e:	eb19 0309 	adds.w	r3, r9, r9
 8011852:	eb4a 040a 	adc.w	r4, sl, sl
 8011856:	4699      	mov	r9, r3
 8011858:	46a2      	mov	sl, r4
 801185a:	eb19 0905 	adds.w	r9, r9, r5
 801185e:	eb4a 0a06 	adc.w	sl, sl, r6
 8011862:	f04f 0100 	mov.w	r1, #0
 8011866:	f04f 0200 	mov.w	r2, #0
 801186a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801186e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011872:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011876:	4689      	mov	r9, r1
 8011878:	4692      	mov	sl, r2
 801187a:	eb19 0005 	adds.w	r0, r9, r5
 801187e:	eb4a 0106 	adc.w	r1, sl, r6
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	461d      	mov	r5, r3
 8011888:	f04f 0600 	mov.w	r6, #0
 801188c:	196b      	adds	r3, r5, r5
 801188e:	eb46 0406 	adc.w	r4, r6, r6
 8011892:	461a      	mov	r2, r3
 8011894:	4623      	mov	r3, r4
 8011896:	f7ef fa0f 	bl	8000cb8 <__aeabi_uldivmod>
 801189a:	4603      	mov	r3, r0
 801189c:	460c      	mov	r4, r1
 801189e:	461a      	mov	r2, r3
 80118a0:	4b2c      	ldr	r3, [pc, #176]	; (8011954 <UART_SetConfig+0x384>)
 80118a2:	fba3 1302 	umull	r1, r3, r3, r2
 80118a6:	095b      	lsrs	r3, r3, #5
 80118a8:	2164      	movs	r1, #100	; 0x64
 80118aa:	fb01 f303 	mul.w	r3, r1, r3
 80118ae:	1ad3      	subs	r3, r2, r3
 80118b0:	00db      	lsls	r3, r3, #3
 80118b2:	3332      	adds	r3, #50	; 0x32
 80118b4:	4a27      	ldr	r2, [pc, #156]	; (8011954 <UART_SetConfig+0x384>)
 80118b6:	fba2 2303 	umull	r2, r3, r2, r3
 80118ba:	095b      	lsrs	r3, r3, #5
 80118bc:	005b      	lsls	r3, r3, #1
 80118be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80118c2:	4498      	add	r8, r3
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	461d      	mov	r5, r3
 80118c8:	f04f 0600 	mov.w	r6, #0
 80118cc:	46a9      	mov	r9, r5
 80118ce:	46b2      	mov	sl, r6
 80118d0:	eb19 0309 	adds.w	r3, r9, r9
 80118d4:	eb4a 040a 	adc.w	r4, sl, sl
 80118d8:	4699      	mov	r9, r3
 80118da:	46a2      	mov	sl, r4
 80118dc:	eb19 0905 	adds.w	r9, r9, r5
 80118e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80118e4:	f04f 0100 	mov.w	r1, #0
 80118e8:	f04f 0200 	mov.w	r2, #0
 80118ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80118f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80118f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80118f8:	4689      	mov	r9, r1
 80118fa:	4692      	mov	sl, r2
 80118fc:	eb19 0005 	adds.w	r0, r9, r5
 8011900:	eb4a 0106 	adc.w	r1, sl, r6
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	461d      	mov	r5, r3
 801190a:	f04f 0600 	mov.w	r6, #0
 801190e:	196b      	adds	r3, r5, r5
 8011910:	eb46 0406 	adc.w	r4, r6, r6
 8011914:	461a      	mov	r2, r3
 8011916:	4623      	mov	r3, r4
 8011918:	f7ef f9ce 	bl	8000cb8 <__aeabi_uldivmod>
 801191c:	4603      	mov	r3, r0
 801191e:	460c      	mov	r4, r1
 8011920:	461a      	mov	r2, r3
 8011922:	4b0c      	ldr	r3, [pc, #48]	; (8011954 <UART_SetConfig+0x384>)
 8011924:	fba3 1302 	umull	r1, r3, r3, r2
 8011928:	095b      	lsrs	r3, r3, #5
 801192a:	2164      	movs	r1, #100	; 0x64
 801192c:	fb01 f303 	mul.w	r3, r1, r3
 8011930:	1ad3      	subs	r3, r2, r3
 8011932:	00db      	lsls	r3, r3, #3
 8011934:	3332      	adds	r3, #50	; 0x32
 8011936:	4a07      	ldr	r2, [pc, #28]	; (8011954 <UART_SetConfig+0x384>)
 8011938:	fba2 2303 	umull	r2, r3, r2, r3
 801193c:	095b      	lsrs	r3, r3, #5
 801193e:	f003 0207 	and.w	r2, r3, #7
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	4442      	add	r2, r8
 8011948:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801194a:	e1b2      	b.n	8011cb2 <UART_SetConfig+0x6e2>
 801194c:	40011000 	.word	0x40011000
 8011950:	40011400 	.word	0x40011400
 8011954:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	4ad7      	ldr	r2, [pc, #860]	; (8011cbc <UART_SetConfig+0x6ec>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d005      	beq.n	801196e <UART_SetConfig+0x39e>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	4ad6      	ldr	r2, [pc, #856]	; (8011cc0 <UART_SetConfig+0x6f0>)
 8011968:	4293      	cmp	r3, r2
 801196a:	f040 80d1 	bne.w	8011b10 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801196e:	f7fc fa41 	bl	800ddf4 <HAL_RCC_GetPCLK2Freq>
 8011972:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	469a      	mov	sl, r3
 8011978:	f04f 0b00 	mov.w	fp, #0
 801197c:	46d0      	mov	r8, sl
 801197e:	46d9      	mov	r9, fp
 8011980:	eb18 0308 	adds.w	r3, r8, r8
 8011984:	eb49 0409 	adc.w	r4, r9, r9
 8011988:	4698      	mov	r8, r3
 801198a:	46a1      	mov	r9, r4
 801198c:	eb18 080a 	adds.w	r8, r8, sl
 8011990:	eb49 090b 	adc.w	r9, r9, fp
 8011994:	f04f 0100 	mov.w	r1, #0
 8011998:	f04f 0200 	mov.w	r2, #0
 801199c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80119a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80119a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80119a8:	4688      	mov	r8, r1
 80119aa:	4691      	mov	r9, r2
 80119ac:	eb1a 0508 	adds.w	r5, sl, r8
 80119b0:	eb4b 0609 	adc.w	r6, fp, r9
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	4619      	mov	r1, r3
 80119ba:	f04f 0200 	mov.w	r2, #0
 80119be:	f04f 0300 	mov.w	r3, #0
 80119c2:	f04f 0400 	mov.w	r4, #0
 80119c6:	0094      	lsls	r4, r2, #2
 80119c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80119cc:	008b      	lsls	r3, r1, #2
 80119ce:	461a      	mov	r2, r3
 80119d0:	4623      	mov	r3, r4
 80119d2:	4628      	mov	r0, r5
 80119d4:	4631      	mov	r1, r6
 80119d6:	f7ef f96f 	bl	8000cb8 <__aeabi_uldivmod>
 80119da:	4603      	mov	r3, r0
 80119dc:	460c      	mov	r4, r1
 80119de:	461a      	mov	r2, r3
 80119e0:	4bb8      	ldr	r3, [pc, #736]	; (8011cc4 <UART_SetConfig+0x6f4>)
 80119e2:	fba3 2302 	umull	r2, r3, r3, r2
 80119e6:	095b      	lsrs	r3, r3, #5
 80119e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	469b      	mov	fp, r3
 80119f0:	f04f 0c00 	mov.w	ip, #0
 80119f4:	46d9      	mov	r9, fp
 80119f6:	46e2      	mov	sl, ip
 80119f8:	eb19 0309 	adds.w	r3, r9, r9
 80119fc:	eb4a 040a 	adc.w	r4, sl, sl
 8011a00:	4699      	mov	r9, r3
 8011a02:	46a2      	mov	sl, r4
 8011a04:	eb19 090b 	adds.w	r9, r9, fp
 8011a08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011a0c:	f04f 0100 	mov.w	r1, #0
 8011a10:	f04f 0200 	mov.w	r2, #0
 8011a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011a18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011a1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011a20:	4689      	mov	r9, r1
 8011a22:	4692      	mov	sl, r2
 8011a24:	eb1b 0509 	adds.w	r5, fp, r9
 8011a28:	eb4c 060a 	adc.w	r6, ip, sl
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	4619      	mov	r1, r3
 8011a32:	f04f 0200 	mov.w	r2, #0
 8011a36:	f04f 0300 	mov.w	r3, #0
 8011a3a:	f04f 0400 	mov.w	r4, #0
 8011a3e:	0094      	lsls	r4, r2, #2
 8011a40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011a44:	008b      	lsls	r3, r1, #2
 8011a46:	461a      	mov	r2, r3
 8011a48:	4623      	mov	r3, r4
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	4631      	mov	r1, r6
 8011a4e:	f7ef f933 	bl	8000cb8 <__aeabi_uldivmod>
 8011a52:	4603      	mov	r3, r0
 8011a54:	460c      	mov	r4, r1
 8011a56:	461a      	mov	r2, r3
 8011a58:	4b9a      	ldr	r3, [pc, #616]	; (8011cc4 <UART_SetConfig+0x6f4>)
 8011a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8011a5e:	095b      	lsrs	r3, r3, #5
 8011a60:	2164      	movs	r1, #100	; 0x64
 8011a62:	fb01 f303 	mul.w	r3, r1, r3
 8011a66:	1ad3      	subs	r3, r2, r3
 8011a68:	011b      	lsls	r3, r3, #4
 8011a6a:	3332      	adds	r3, #50	; 0x32
 8011a6c:	4a95      	ldr	r2, [pc, #596]	; (8011cc4 <UART_SetConfig+0x6f4>)
 8011a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8011a72:	095b      	lsrs	r3, r3, #5
 8011a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a78:	4498      	add	r8, r3
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	469b      	mov	fp, r3
 8011a7e:	f04f 0c00 	mov.w	ip, #0
 8011a82:	46d9      	mov	r9, fp
 8011a84:	46e2      	mov	sl, ip
 8011a86:	eb19 0309 	adds.w	r3, r9, r9
 8011a8a:	eb4a 040a 	adc.w	r4, sl, sl
 8011a8e:	4699      	mov	r9, r3
 8011a90:	46a2      	mov	sl, r4
 8011a92:	eb19 090b 	adds.w	r9, r9, fp
 8011a96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011a9a:	f04f 0100 	mov.w	r1, #0
 8011a9e:	f04f 0200 	mov.w	r2, #0
 8011aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011aa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011aaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011aae:	4689      	mov	r9, r1
 8011ab0:	4692      	mov	sl, r2
 8011ab2:	eb1b 0509 	adds.w	r5, fp, r9
 8011ab6:	eb4c 060a 	adc.w	r6, ip, sl
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	685b      	ldr	r3, [r3, #4]
 8011abe:	4619      	mov	r1, r3
 8011ac0:	f04f 0200 	mov.w	r2, #0
 8011ac4:	f04f 0300 	mov.w	r3, #0
 8011ac8:	f04f 0400 	mov.w	r4, #0
 8011acc:	0094      	lsls	r4, r2, #2
 8011ace:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011ad2:	008b      	lsls	r3, r1, #2
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	4623      	mov	r3, r4
 8011ad8:	4628      	mov	r0, r5
 8011ada:	4631      	mov	r1, r6
 8011adc:	f7ef f8ec 	bl	8000cb8 <__aeabi_uldivmod>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	460c      	mov	r4, r1
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	4b77      	ldr	r3, [pc, #476]	; (8011cc4 <UART_SetConfig+0x6f4>)
 8011ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8011aec:	095b      	lsrs	r3, r3, #5
 8011aee:	2164      	movs	r1, #100	; 0x64
 8011af0:	fb01 f303 	mul.w	r3, r1, r3
 8011af4:	1ad3      	subs	r3, r2, r3
 8011af6:	011b      	lsls	r3, r3, #4
 8011af8:	3332      	adds	r3, #50	; 0x32
 8011afa:	4a72      	ldr	r2, [pc, #456]	; (8011cc4 <UART_SetConfig+0x6f4>)
 8011afc:	fba2 2303 	umull	r2, r3, r2, r3
 8011b00:	095b      	lsrs	r3, r3, #5
 8011b02:	f003 020f 	and.w	r2, r3, #15
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	4442      	add	r2, r8
 8011b0c:	609a      	str	r2, [r3, #8]
 8011b0e:	e0d0      	b.n	8011cb2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8011b10:	f7fc f95c 	bl	800ddcc <HAL_RCC_GetPCLK1Freq>
 8011b14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	469a      	mov	sl, r3
 8011b1a:	f04f 0b00 	mov.w	fp, #0
 8011b1e:	46d0      	mov	r8, sl
 8011b20:	46d9      	mov	r9, fp
 8011b22:	eb18 0308 	adds.w	r3, r8, r8
 8011b26:	eb49 0409 	adc.w	r4, r9, r9
 8011b2a:	4698      	mov	r8, r3
 8011b2c:	46a1      	mov	r9, r4
 8011b2e:	eb18 080a 	adds.w	r8, r8, sl
 8011b32:	eb49 090b 	adc.w	r9, r9, fp
 8011b36:	f04f 0100 	mov.w	r1, #0
 8011b3a:	f04f 0200 	mov.w	r2, #0
 8011b3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8011b42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8011b46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8011b4a:	4688      	mov	r8, r1
 8011b4c:	4691      	mov	r9, r2
 8011b4e:	eb1a 0508 	adds.w	r5, sl, r8
 8011b52:	eb4b 0609 	adc.w	r6, fp, r9
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	f04f 0200 	mov.w	r2, #0
 8011b60:	f04f 0300 	mov.w	r3, #0
 8011b64:	f04f 0400 	mov.w	r4, #0
 8011b68:	0094      	lsls	r4, r2, #2
 8011b6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011b6e:	008b      	lsls	r3, r1, #2
 8011b70:	461a      	mov	r2, r3
 8011b72:	4623      	mov	r3, r4
 8011b74:	4628      	mov	r0, r5
 8011b76:	4631      	mov	r1, r6
 8011b78:	f7ef f89e 	bl	8000cb8 <__aeabi_uldivmod>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	460c      	mov	r4, r1
 8011b80:	461a      	mov	r2, r3
 8011b82:	4b50      	ldr	r3, [pc, #320]	; (8011cc4 <UART_SetConfig+0x6f4>)
 8011b84:	fba3 2302 	umull	r2, r3, r3, r2
 8011b88:	095b      	lsrs	r3, r3, #5
 8011b8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	469b      	mov	fp, r3
 8011b92:	f04f 0c00 	mov.w	ip, #0
 8011b96:	46d9      	mov	r9, fp
 8011b98:	46e2      	mov	sl, ip
 8011b9a:	eb19 0309 	adds.w	r3, r9, r9
 8011b9e:	eb4a 040a 	adc.w	r4, sl, sl
 8011ba2:	4699      	mov	r9, r3
 8011ba4:	46a2      	mov	sl, r4
 8011ba6:	eb19 090b 	adds.w	r9, r9, fp
 8011baa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011bae:	f04f 0100 	mov.w	r1, #0
 8011bb2:	f04f 0200 	mov.w	r2, #0
 8011bb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011bba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011bbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011bc2:	4689      	mov	r9, r1
 8011bc4:	4692      	mov	sl, r2
 8011bc6:	eb1b 0509 	adds.w	r5, fp, r9
 8011bca:	eb4c 060a 	adc.w	r6, ip, sl
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	f04f 0200 	mov.w	r2, #0
 8011bd8:	f04f 0300 	mov.w	r3, #0
 8011bdc:	f04f 0400 	mov.w	r4, #0
 8011be0:	0094      	lsls	r4, r2, #2
 8011be2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011be6:	008b      	lsls	r3, r1, #2
 8011be8:	461a      	mov	r2, r3
 8011bea:	4623      	mov	r3, r4
 8011bec:	4628      	mov	r0, r5
 8011bee:	4631      	mov	r1, r6
 8011bf0:	f7ef f862 	bl	8000cb8 <__aeabi_uldivmod>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	460c      	mov	r4, r1
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	4b32      	ldr	r3, [pc, #200]	; (8011cc4 <UART_SetConfig+0x6f4>)
 8011bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8011c00:	095b      	lsrs	r3, r3, #5
 8011c02:	2164      	movs	r1, #100	; 0x64
 8011c04:	fb01 f303 	mul.w	r3, r1, r3
 8011c08:	1ad3      	subs	r3, r2, r3
 8011c0a:	011b      	lsls	r3, r3, #4
 8011c0c:	3332      	adds	r3, #50	; 0x32
 8011c0e:	4a2d      	ldr	r2, [pc, #180]	; (8011cc4 <UART_SetConfig+0x6f4>)
 8011c10:	fba2 2303 	umull	r2, r3, r2, r3
 8011c14:	095b      	lsrs	r3, r3, #5
 8011c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c1a:	4498      	add	r8, r3
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	469b      	mov	fp, r3
 8011c20:	f04f 0c00 	mov.w	ip, #0
 8011c24:	46d9      	mov	r9, fp
 8011c26:	46e2      	mov	sl, ip
 8011c28:	eb19 0309 	adds.w	r3, r9, r9
 8011c2c:	eb4a 040a 	adc.w	r4, sl, sl
 8011c30:	4699      	mov	r9, r3
 8011c32:	46a2      	mov	sl, r4
 8011c34:	eb19 090b 	adds.w	r9, r9, fp
 8011c38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8011c3c:	f04f 0100 	mov.w	r1, #0
 8011c40:	f04f 0200 	mov.w	r2, #0
 8011c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011c48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8011c4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8011c50:	4689      	mov	r9, r1
 8011c52:	4692      	mov	sl, r2
 8011c54:	eb1b 0509 	adds.w	r5, fp, r9
 8011c58:	eb4c 060a 	adc.w	r6, ip, sl
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	4619      	mov	r1, r3
 8011c62:	f04f 0200 	mov.w	r2, #0
 8011c66:	f04f 0300 	mov.w	r3, #0
 8011c6a:	f04f 0400 	mov.w	r4, #0
 8011c6e:	0094      	lsls	r4, r2, #2
 8011c70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8011c74:	008b      	lsls	r3, r1, #2
 8011c76:	461a      	mov	r2, r3
 8011c78:	4623      	mov	r3, r4
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	4631      	mov	r1, r6
 8011c7e:	f7ef f81b 	bl	8000cb8 <__aeabi_uldivmod>
 8011c82:	4603      	mov	r3, r0
 8011c84:	460c      	mov	r4, r1
 8011c86:	461a      	mov	r2, r3
 8011c88:	4b0e      	ldr	r3, [pc, #56]	; (8011cc4 <UART_SetConfig+0x6f4>)
 8011c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8011c8e:	095b      	lsrs	r3, r3, #5
 8011c90:	2164      	movs	r1, #100	; 0x64
 8011c92:	fb01 f303 	mul.w	r3, r1, r3
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	011b      	lsls	r3, r3, #4
 8011c9a:	3332      	adds	r3, #50	; 0x32
 8011c9c:	4a09      	ldr	r2, [pc, #36]	; (8011cc4 <UART_SetConfig+0x6f4>)
 8011c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8011ca2:	095b      	lsrs	r3, r3, #5
 8011ca4:	f003 020f 	and.w	r2, r3, #15
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	4442      	add	r2, r8
 8011cae:	609a      	str	r2, [r3, #8]
}
 8011cb0:	e7ff      	b.n	8011cb2 <UART_SetConfig+0x6e2>
 8011cb2:	bf00      	nop
 8011cb4:	3714      	adds	r7, #20
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cbc:	40011000 	.word	0x40011000
 8011cc0:	40011400 	.word	0x40011400
 8011cc4:	51eb851f 	.word	0x51eb851f

08011cc8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8011cc8:	b084      	sub	sp, #16
 8011cca:	b480      	push	{r7}
 8011ccc:	b085      	sub	sp, #20
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	6078      	str	r0, [r7, #4]
 8011cd2:	f107 001c 	add.w	r0, r7, #28
 8011cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011cde:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8011ce0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011ce2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8011ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8011ce6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8011cea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8011cee:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8011cf2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011cf4:	68fa      	ldr	r2, [r7, #12]
 8011cf6:	4313      	orrs	r3, r2
 8011cf8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011d02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011d06:	68fa      	ldr	r2, [r7, #12]
 8011d08:	431a      	orrs	r2, r3
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011d0e:	2300      	movs	r3, #0
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3714      	adds	r7, #20
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	b004      	add	sp, #16
 8011d1c:	4770      	bx	lr

08011d1e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8011d1e:	b480      	push	{r7}
 8011d20:	b083      	sub	sp, #12
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8011d38:	b480      	push	{r7}
 8011d3a:	b083      	sub	sp, #12
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011d4c:	2300      	movs	r3, #0
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	370c      	adds	r7, #12
 8011d52:	46bd      	mov	sp, r7
 8011d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d58:	4770      	bx	lr

08011d5a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8011d5a:	b580      	push	{r7, lr}
 8011d5c:	b082      	sub	sp, #8
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2203      	movs	r2, #3
 8011d66:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8011d68:	2002      	movs	r0, #2
 8011d6a:	f7f9 fbc5 	bl	800b4f8 <HAL_Delay>
  
  return HAL_OK;
 8011d6e:	2300      	movs	r3, #0
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3708      	adds	r7, #8
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8011d78:	b480      	push	{r7}
 8011d7a:	b083      	sub	sp, #12
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f003 0303 	and.w	r3, r3, #3
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	370c      	adds	r7, #12
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b085      	sub	sp, #20
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	681a      	ldr	r2, [r3, #0]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011db2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011db8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011dbe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011dc0:	68fa      	ldr	r2, [r7, #12]
 8011dc2:	4313      	orrs	r3, r2
 8011dc4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011dce:	f023 030f 	bic.w	r3, r3, #15
 8011dd2:	68fa      	ldr	r2, [r7, #12]
 8011dd4:	431a      	orrs	r2, r3
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011dda:	2300      	movs	r3, #0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3714      	adds	r7, #20
 8011de0:	46bd      	mov	sp, r7
 8011de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de6:	4770      	bx	lr

08011de8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	691b      	ldr	r3, [r3, #16]
 8011df4:	b2db      	uxtb	r3, r3
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	370c      	adds	r7, #12
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr

08011e02 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8011e02:	b480      	push	{r7}
 8011e04:	b085      	sub	sp, #20
 8011e06:	af00      	add	r7, sp, #0
 8011e08:	6078      	str	r0, [r7, #4]
 8011e0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	3314      	adds	r3, #20
 8011e10:	461a      	mov	r2, r3
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	4413      	add	r3, r2
 8011e16:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	681b      	ldr	r3, [r3, #0]
}  
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3714      	adds	r7, #20
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr

08011e28 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b085      	sub	sp, #20
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011e32:	2300      	movs	r3, #0
 8011e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	685a      	ldr	r2, [r3, #4]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011e4e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011e54:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011e5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011e5c:	68fa      	ldr	r2, [r7, #12]
 8011e5e:	4313      	orrs	r3, r2
 8011e60:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e66:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	431a      	orrs	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011e72:	2300      	movs	r3, #0

}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3714      	adds	r7, #20
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7e:	4770      	bx	lr

08011e80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b088      	sub	sp, #32
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011e8e:	2310      	movs	r3, #16
 8011e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011e92:	2340      	movs	r3, #64	; 0x40
 8011e94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011e96:	2300      	movs	r3, #0
 8011e98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ea0:	f107 0308 	add.w	r3, r7, #8
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f7ff ff74 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8011eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eb0:	2110      	movs	r1, #16
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f000 fa40 	bl	8012338 <SDMMC_GetCmdResp1>
 8011eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011eba:	69fb      	ldr	r3, [r7, #28]
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3720      	adds	r7, #32
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b088      	sub	sp, #32
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011ed2:	2311      	movs	r3, #17
 8011ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011ed6:	2340      	movs	r3, #64	; 0x40
 8011ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011eda:	2300      	movs	r3, #0
 8011edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ee4:	f107 0308 	add.w	r3, r7, #8
 8011ee8:	4619      	mov	r1, r3
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f7ff ff52 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ef4:	2111      	movs	r1, #17
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f000 fa1e 	bl	8012338 <SDMMC_GetCmdResp1>
 8011efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011efe:	69fb      	ldr	r3, [r7, #28]
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3720      	adds	r7, #32
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}

08011f08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b088      	sub	sp, #32
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011f16:	2312      	movs	r3, #18
 8011f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f1a:	2340      	movs	r3, #64	; 0x40
 8011f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f28:	f107 0308 	add.w	r3, r7, #8
 8011f2c:	4619      	mov	r1, r3
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f7ff ff30 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f38:	2112      	movs	r1, #18
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 f9fc 	bl	8012338 <SDMMC_GetCmdResp1>
 8011f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f42:	69fb      	ldr	r3, [r7, #28]
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3720      	adds	r7, #32
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}

08011f4c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b088      	sub	sp, #32
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011f5a:	2318      	movs	r3, #24
 8011f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011f5e:	2340      	movs	r3, #64	; 0x40
 8011f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011f62:	2300      	movs	r3, #0
 8011f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011f6c:	f107 0308 	add.w	r3, r7, #8
 8011f70:	4619      	mov	r1, r3
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f7ff ff0e 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8011f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f7c:	2118      	movs	r1, #24
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f000 f9da 	bl	8012338 <SDMMC_GetCmdResp1>
 8011f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f86:	69fb      	ldr	r3, [r7, #28]
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3720      	adds	r7, #32
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b088      	sub	sp, #32
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011f9e:	2319      	movs	r3, #25
 8011fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011fa2:	2340      	movs	r3, #64	; 0x40
 8011fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011fb0:	f107 0308 	add.w	r3, r7, #8
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f7ff feec 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8011fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fc0:	2119      	movs	r1, #25
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f000 f9b8 	bl	8012338 <SDMMC_GetCmdResp1>
 8011fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fca:	69fb      	ldr	r3, [r7, #28]
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3720      	adds	r7, #32
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b088      	sub	sp, #32
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011fe0:	230c      	movs	r3, #12
 8011fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011fe4:	2340      	movs	r3, #64	; 0x40
 8011fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011ff2:	f107 0308 	add.w	r3, r7, #8
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f7ff fecb 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8011ffe:	4a05      	ldr	r2, [pc, #20]	; (8012014 <SDMMC_CmdStopTransfer+0x40>)
 8012000:	210c      	movs	r1, #12
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 f998 	bl	8012338 <SDMMC_GetCmdResp1>
 8012008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801200a:	69fb      	ldr	r3, [r7, #28]
}
 801200c:	4618      	mov	r0, r3
 801200e:	3720      	adds	r7, #32
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	05f5e100 	.word	0x05f5e100

08012018 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b08a      	sub	sp, #40	; 0x28
 801201c:	af00      	add	r7, sp, #0
 801201e:	60f8      	str	r0, [r7, #12]
 8012020:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012028:	2307      	movs	r3, #7
 801202a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801202c:	2340      	movs	r3, #64	; 0x40
 801202e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012030:	2300      	movs	r3, #0
 8012032:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012038:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801203a:	f107 0310 	add.w	r3, r7, #16
 801203e:	4619      	mov	r1, r3
 8012040:	68f8      	ldr	r0, [r7, #12]
 8012042:	f7ff fea7 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8012046:	f241 3288 	movw	r2, #5000	; 0x1388
 801204a:	2107      	movs	r1, #7
 801204c:	68f8      	ldr	r0, [r7, #12]
 801204e:	f000 f973 	bl	8012338 <SDMMC_GetCmdResp1>
 8012052:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012056:	4618      	mov	r0, r3
 8012058:	3728      	adds	r7, #40	; 0x28
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}

0801205e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801205e:	b580      	push	{r7, lr}
 8012060:	b088      	sub	sp, #32
 8012062:	af00      	add	r7, sp, #0
 8012064:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8012066:	2300      	movs	r3, #0
 8012068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801206a:	2300      	movs	r3, #0
 801206c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801206e:	2300      	movs	r3, #0
 8012070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012072:	2300      	movs	r3, #0
 8012074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801207a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801207c:	f107 0308 	add.w	r3, r7, #8
 8012080:	4619      	mov	r1, r3
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f7ff fe86 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f000 f92d 	bl	80122e8 <SDMMC_GetCmdError>
 801208e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012090:	69fb      	ldr	r3, [r7, #28]
}
 8012092:	4618      	mov	r0, r3
 8012094:	3720      	adds	r7, #32
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}

0801209a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801209a:	b580      	push	{r7, lr}
 801209c:	b088      	sub	sp, #32
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80120a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80120a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80120a8:	2308      	movs	r3, #8
 80120aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80120ac:	2340      	movs	r3, #64	; 0x40
 80120ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80120b0:	2300      	movs	r3, #0
 80120b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80120b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80120ba:	f107 0308 	add.w	r3, r7, #8
 80120be:	4619      	mov	r1, r3
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f7ff fe67 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f000 fb16 	bl	80126f8 <SDMMC_GetCmdResp7>
 80120cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120ce:	69fb      	ldr	r3, [r7, #28]
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3720      	adds	r7, #32
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b088      	sub	sp, #32
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80120e6:	2337      	movs	r3, #55	; 0x37
 80120e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80120ea:	2340      	movs	r3, #64	; 0x40
 80120ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80120ee:	2300      	movs	r3, #0
 80120f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80120f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80120f8:	f107 0308 	add.w	r3, r7, #8
 80120fc:	4619      	mov	r1, r3
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f7ff fe48 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8012104:	f241 3288 	movw	r2, #5000	; 0x1388
 8012108:	2137      	movs	r1, #55	; 0x37
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f000 f914 	bl	8012338 <SDMMC_GetCmdResp1>
 8012110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012112:	69fb      	ldr	r3, [r7, #28]
}
 8012114:	4618      	mov	r0, r3
 8012116:	3720      	adds	r7, #32
 8012118:	46bd      	mov	sp, r7
 801211a:	bd80      	pop	{r7, pc}

0801211c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b088      	sub	sp, #32
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801212c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012132:	2329      	movs	r3, #41	; 0x29
 8012134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012136:	2340      	movs	r3, #64	; 0x40
 8012138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801213a:	2300      	movs	r3, #0
 801213c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801213e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012142:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012144:	f107 0308 	add.w	r3, r7, #8
 8012148:	4619      	mov	r1, r3
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f7ff fe22 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f000 fa23 	bl	801259c <SDMMC_GetCmdResp3>
 8012156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012158:	69fb      	ldr	r3, [r7, #28]
}
 801215a:	4618      	mov	r0, r3
 801215c:	3720      	adds	r7, #32
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}

08012162 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8012162:	b580      	push	{r7, lr}
 8012164:	b088      	sub	sp, #32
 8012166:	af00      	add	r7, sp, #0
 8012168:	6078      	str	r0, [r7, #4]
 801216a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012170:	2306      	movs	r3, #6
 8012172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012174:	2340      	movs	r3, #64	; 0x40
 8012176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012178:	2300      	movs	r3, #0
 801217a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801217c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012180:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012182:	f107 0308 	add.w	r3, r7, #8
 8012186:	4619      	mov	r1, r3
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f7ff fe03 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012192:	2106      	movs	r1, #6
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f000 f8cf 	bl	8012338 <SDMMC_GetCmdResp1>
 801219a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801219c:	69fb      	ldr	r3, [r7, #28]
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3720      	adds	r7, #32
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}

080121a6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b088      	sub	sp, #32
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80121ae:	2300      	movs	r3, #0
 80121b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80121b2:	2333      	movs	r3, #51	; 0x33
 80121b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80121b6:	2340      	movs	r3, #64	; 0x40
 80121b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80121ba:	2300      	movs	r3, #0
 80121bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80121be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80121c4:	f107 0308 	add.w	r3, r7, #8
 80121c8:	4619      	mov	r1, r3
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7ff fde2 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80121d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80121d4:	2133      	movs	r1, #51	; 0x33
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 f8ae 	bl	8012338 <SDMMC_GetCmdResp1>
 80121dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121de:	69fb      	ldr	r3, [r7, #28]
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3720      	adds	r7, #32
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}

080121e8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b088      	sub	sp, #32
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80121f0:	2300      	movs	r3, #0
 80121f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80121f4:	2302      	movs	r3, #2
 80121f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80121f8:	23c0      	movs	r3, #192	; 0xc0
 80121fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80121fc:	2300      	movs	r3, #0
 80121fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012204:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012206:	f107 0308 	add.w	r3, r7, #8
 801220a:	4619      	mov	r1, r3
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7ff fdc1 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 f97c 	bl	8012510 <SDMMC_GetCmdResp2>
 8012218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801221a:	69fb      	ldr	r3, [r7, #28]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3720      	adds	r7, #32
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b088      	sub	sp, #32
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012232:	2309      	movs	r3, #9
 8012234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8012236:	23c0      	movs	r3, #192	; 0xc0
 8012238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801223a:	2300      	movs	r3, #0
 801223c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801223e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012242:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012244:	f107 0308 	add.w	r3, r7, #8
 8012248:	4619      	mov	r1, r3
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7ff fda2 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 f95d 	bl	8012510 <SDMMC_GetCmdResp2>
 8012256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012258:	69fb      	ldr	r3, [r7, #28]
}
 801225a:	4618      	mov	r0, r3
 801225c:	3720      	adds	r7, #32
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}

08012262 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8012262:	b580      	push	{r7, lr}
 8012264:	b088      	sub	sp, #32
 8012266:	af00      	add	r7, sp, #0
 8012268:	6078      	str	r0, [r7, #4]
 801226a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801226c:	2300      	movs	r3, #0
 801226e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012270:	2303      	movs	r3, #3
 8012272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012274:	2340      	movs	r3, #64	; 0x40
 8012276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012278:	2300      	movs	r3, #0
 801227a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801227c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012280:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012282:	f107 0308 	add.w	r3, r7, #8
 8012286:	4619      	mov	r1, r3
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f7ff fd83 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801228e:	683a      	ldr	r2, [r7, #0]
 8012290:	2103      	movs	r1, #3
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f000 f9bc 	bl	8012610 <SDMMC_GetCmdResp6>
 8012298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801229a:	69fb      	ldr	r3, [r7, #28]
}
 801229c:	4618      	mov	r0, r3
 801229e:	3720      	adds	r7, #32
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b088      	sub	sp, #32
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80122b2:	230d      	movs	r3, #13
 80122b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80122b6:	2340      	movs	r3, #64	; 0x40
 80122b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80122ba:	2300      	movs	r3, #0
 80122bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80122be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80122c4:	f107 0308 	add.w	r3, r7, #8
 80122c8:	4619      	mov	r1, r3
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f7ff fd62 	bl	8011d94 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80122d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80122d4:	210d      	movs	r1, #13
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 f82e 	bl	8012338 <SDMMC_GetCmdResp1>
 80122dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122de:	69fb      	ldr	r3, [r7, #28]
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3720      	adds	r7, #32
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80122e8:	b490      	push	{r4, r7}
 80122ea:	b082      	sub	sp, #8
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80122f0:	4b0f      	ldr	r3, [pc, #60]	; (8012330 <SDMMC_GetCmdError+0x48>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	4a0f      	ldr	r2, [pc, #60]	; (8012334 <SDMMC_GetCmdError+0x4c>)
 80122f6:	fba2 2303 	umull	r2, r3, r2, r3
 80122fa:	0a5b      	lsrs	r3, r3, #9
 80122fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012300:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012304:	4623      	mov	r3, r4
 8012306:	1e5c      	subs	r4, r3, #1
 8012308:	2b00      	cmp	r3, #0
 801230a:	d102      	bne.n	8012312 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801230c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012310:	e009      	b.n	8012326 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801231a:	2b00      	cmp	r3, #0
 801231c:	d0f2      	beq.n	8012304 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	22c5      	movs	r2, #197	; 0xc5
 8012322:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8012324:	2300      	movs	r3, #0
}
 8012326:	4618      	mov	r0, r3
 8012328:	3708      	adds	r7, #8
 801232a:	46bd      	mov	sp, r7
 801232c:	bc90      	pop	{r4, r7}
 801232e:	4770      	bx	lr
 8012330:	20000000 	.word	0x20000000
 8012334:	10624dd3 	.word	0x10624dd3

08012338 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012338:	b590      	push	{r4, r7, lr}
 801233a:	b087      	sub	sp, #28
 801233c:	af00      	add	r7, sp, #0
 801233e:	60f8      	str	r0, [r7, #12]
 8012340:	460b      	mov	r3, r1
 8012342:	607a      	str	r2, [r7, #4]
 8012344:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012346:	4b6f      	ldr	r3, [pc, #444]	; (8012504 <SDMMC_GetCmdResp1+0x1cc>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	4a6f      	ldr	r2, [pc, #444]	; (8012508 <SDMMC_GetCmdResp1+0x1d0>)
 801234c:	fba2 2303 	umull	r2, r3, r2, r3
 8012350:	0a5b      	lsrs	r3, r3, #9
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012358:	4623      	mov	r3, r4
 801235a:	1e5c      	subs	r4, r3, #1
 801235c:	2b00      	cmp	r3, #0
 801235e:	d102      	bne.n	8012366 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012364:	e0c9      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801236a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012372:	2b00      	cmp	r3, #0
 8012374:	d0f0      	beq.n	8012358 <SDMMC_GetCmdResp1+0x20>
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801237c:	2b00      	cmp	r3, #0
 801237e:	d1eb      	bne.n	8012358 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012384:	f003 0304 	and.w	r3, r3, #4
 8012388:	2b00      	cmp	r3, #0
 801238a:	d004      	beq.n	8012396 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2204      	movs	r2, #4
 8012390:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012392:	2304      	movs	r3, #4
 8012394:	e0b1      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801239a:	f003 0301 	and.w	r3, r3, #1
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d004      	beq.n	80123ac <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2201      	movs	r2, #1
 80123a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80123a8:	2301      	movs	r3, #1
 80123aa:	e0a6      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	22c5      	movs	r2, #197	; 0xc5
 80123b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80123b2:	68f8      	ldr	r0, [r7, #12]
 80123b4:	f7ff fd18 	bl	8011de8 <SDIO_GetCommandResponse>
 80123b8:	4603      	mov	r3, r0
 80123ba:	461a      	mov	r2, r3
 80123bc:	7afb      	ldrb	r3, [r7, #11]
 80123be:	4293      	cmp	r3, r2
 80123c0:	d001      	beq.n	80123c6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80123c2:	2301      	movs	r3, #1
 80123c4:	e099      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80123c6:	2100      	movs	r1, #0
 80123c8:	68f8      	ldr	r0, [r7, #12]
 80123ca:	f7ff fd1a 	bl	8011e02 <SDIO_GetResponse>
 80123ce:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80123d0:	693a      	ldr	r2, [r7, #16]
 80123d2:	4b4e      	ldr	r3, [pc, #312]	; (801250c <SDMMC_GetCmdResp1+0x1d4>)
 80123d4:	4013      	ands	r3, r2
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d101      	bne.n	80123de <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80123da:	2300      	movs	r3, #0
 80123dc:	e08d      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80123de:	693b      	ldr	r3, [r7, #16]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	da02      	bge.n	80123ea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80123e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80123e8:	e087      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d001      	beq.n	80123f8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80123f4:	2340      	movs	r3, #64	; 0x40
 80123f6:	e080      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d001      	beq.n	8012406 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012402:	2380      	movs	r3, #128	; 0x80
 8012404:	e079      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801240c:	2b00      	cmp	r3, #0
 801240e:	d002      	beq.n	8012416 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012414:	e071      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801241c:	2b00      	cmp	r3, #0
 801241e:	d002      	beq.n	8012426 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012424:	e069      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801242c:	2b00      	cmp	r3, #0
 801242e:	d002      	beq.n	8012436 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012434:	e061      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801243c:	2b00      	cmp	r3, #0
 801243e:	d002      	beq.n	8012446 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012440:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012444:	e059      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801244c:	2b00      	cmp	r3, #0
 801244e:	d002      	beq.n	8012456 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012454:	e051      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801245c:	2b00      	cmp	r3, #0
 801245e:	d002      	beq.n	8012466 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012464:	e049      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801246c:	2b00      	cmp	r3, #0
 801246e:	d002      	beq.n	8012476 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012470:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012474:	e041      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801247c:	2b00      	cmp	r3, #0
 801247e:	d002      	beq.n	8012486 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8012480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012484:	e039      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801248c:	2b00      	cmp	r3, #0
 801248e:	d002      	beq.n	8012496 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012494:	e031      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801249c:	2b00      	cmp	r3, #0
 801249e:	d002      	beq.n	80124a6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80124a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80124a4:	e029      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d002      	beq.n	80124b6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80124b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80124b4:	e021      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d002      	beq.n	80124c6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80124c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80124c4:	e019      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d002      	beq.n	80124d6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80124d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80124d4:	e011      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80124d6:	693b      	ldr	r3, [r7, #16]
 80124d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d002      	beq.n	80124e6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80124e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80124e4:	e009      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	f003 0308 	and.w	r3, r3, #8
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d002      	beq.n	80124f6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80124f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80124f4:	e001      	b.n	80124fa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80124f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	371c      	adds	r7, #28
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd90      	pop	{r4, r7, pc}
 8012502:	bf00      	nop
 8012504:	20000000 	.word	0x20000000
 8012508:	10624dd3 	.word	0x10624dd3
 801250c:	fdffe008 	.word	0xfdffe008

08012510 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8012510:	b490      	push	{r4, r7}
 8012512:	b084      	sub	sp, #16
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012518:	4b1e      	ldr	r3, [pc, #120]	; (8012594 <SDMMC_GetCmdResp2+0x84>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	4a1e      	ldr	r2, [pc, #120]	; (8012598 <SDMMC_GetCmdResp2+0x88>)
 801251e:	fba2 2303 	umull	r2, r3, r2, r3
 8012522:	0a5b      	lsrs	r3, r3, #9
 8012524:	f241 3288 	movw	r2, #5000	; 0x1388
 8012528:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801252c:	4623      	mov	r3, r4
 801252e:	1e5c      	subs	r4, r3, #1
 8012530:	2b00      	cmp	r3, #0
 8012532:	d102      	bne.n	801253a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012538:	e026      	b.n	8012588 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801253e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8012546:	2b00      	cmp	r3, #0
 8012548:	d0f0      	beq.n	801252c <SDMMC_GetCmdResp2+0x1c>
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012550:	2b00      	cmp	r3, #0
 8012552:	d1eb      	bne.n	801252c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012558:	f003 0304 	and.w	r3, r3, #4
 801255c:	2b00      	cmp	r3, #0
 801255e:	d004      	beq.n	801256a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2204      	movs	r2, #4
 8012564:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012566:	2304      	movs	r3, #4
 8012568:	e00e      	b.n	8012588 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801256e:	f003 0301 	and.w	r3, r3, #1
 8012572:	2b00      	cmp	r3, #0
 8012574:	d004      	beq.n	8012580 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2201      	movs	r2, #1
 801257a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801257c:	2301      	movs	r3, #1
 801257e:	e003      	b.n	8012588 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	22c5      	movs	r2, #197	; 0xc5
 8012584:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012586:	2300      	movs	r3, #0
}
 8012588:	4618      	mov	r0, r3
 801258a:	3710      	adds	r7, #16
 801258c:	46bd      	mov	sp, r7
 801258e:	bc90      	pop	{r4, r7}
 8012590:	4770      	bx	lr
 8012592:	bf00      	nop
 8012594:	20000000 	.word	0x20000000
 8012598:	10624dd3 	.word	0x10624dd3

0801259c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801259c:	b490      	push	{r4, r7}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80125a4:	4b18      	ldr	r3, [pc, #96]	; (8012608 <SDMMC_GetCmdResp3+0x6c>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	4a18      	ldr	r2, [pc, #96]	; (801260c <SDMMC_GetCmdResp3+0x70>)
 80125aa:	fba2 2303 	umull	r2, r3, r2, r3
 80125ae:	0a5b      	lsrs	r3, r3, #9
 80125b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80125b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80125b8:	4623      	mov	r3, r4
 80125ba:	1e5c      	subs	r4, r3, #1
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d102      	bne.n	80125c6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80125c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125c4:	e01b      	b.n	80125fe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125ca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d0f0      	beq.n	80125b8 <SDMMC_GetCmdResp3+0x1c>
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d1eb      	bne.n	80125b8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125e4:	f003 0304 	and.w	r3, r3, #4
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d004      	beq.n	80125f6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2204      	movs	r2, #4
 80125f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80125f2:	2304      	movs	r3, #4
 80125f4:	e003      	b.n	80125fe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	22c5      	movs	r2, #197	; 0xc5
 80125fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80125fc:	2300      	movs	r3, #0
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3710      	adds	r7, #16
 8012602:	46bd      	mov	sp, r7
 8012604:	bc90      	pop	{r4, r7}
 8012606:	4770      	bx	lr
 8012608:	20000000 	.word	0x20000000
 801260c:	10624dd3 	.word	0x10624dd3

08012610 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012610:	b590      	push	{r4, r7, lr}
 8012612:	b087      	sub	sp, #28
 8012614:	af00      	add	r7, sp, #0
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	460b      	mov	r3, r1
 801261a:	607a      	str	r2, [r7, #4]
 801261c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801261e:	4b34      	ldr	r3, [pc, #208]	; (80126f0 <SDMMC_GetCmdResp6+0xe0>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	4a34      	ldr	r2, [pc, #208]	; (80126f4 <SDMMC_GetCmdResp6+0xe4>)
 8012624:	fba2 2303 	umull	r2, r3, r2, r3
 8012628:	0a5b      	lsrs	r3, r3, #9
 801262a:	f241 3288 	movw	r2, #5000	; 0x1388
 801262e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012632:	4623      	mov	r3, r4
 8012634:	1e5c      	subs	r4, r3, #1
 8012636:	2b00      	cmp	r3, #0
 8012638:	d102      	bne.n	8012640 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801263a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801263e:	e052      	b.n	80126e6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012644:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801264c:	2b00      	cmp	r3, #0
 801264e:	d0f0      	beq.n	8012632 <SDMMC_GetCmdResp6+0x22>
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012656:	2b00      	cmp	r3, #0
 8012658:	d1eb      	bne.n	8012632 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801265e:	f003 0304 	and.w	r3, r3, #4
 8012662:	2b00      	cmp	r3, #0
 8012664:	d004      	beq.n	8012670 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	2204      	movs	r2, #4
 801266a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801266c:	2304      	movs	r3, #4
 801266e:	e03a      	b.n	80126e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012674:	f003 0301 	and.w	r3, r3, #1
 8012678:	2b00      	cmp	r3, #0
 801267a:	d004      	beq.n	8012686 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	2201      	movs	r2, #1
 8012680:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012682:	2301      	movs	r3, #1
 8012684:	e02f      	b.n	80126e6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8012686:	68f8      	ldr	r0, [r7, #12]
 8012688:	f7ff fbae 	bl	8011de8 <SDIO_GetCommandResponse>
 801268c:	4603      	mov	r3, r0
 801268e:	461a      	mov	r2, r3
 8012690:	7afb      	ldrb	r3, [r7, #11]
 8012692:	4293      	cmp	r3, r2
 8012694:	d001      	beq.n	801269a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012696:	2301      	movs	r3, #1
 8012698:	e025      	b.n	80126e6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	22c5      	movs	r2, #197	; 0xc5
 801269e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80126a0:	2100      	movs	r1, #0
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	f7ff fbad 	bl	8011e02 <SDIO_GetResponse>
 80126a8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80126aa:	693b      	ldr	r3, [r7, #16]
 80126ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d106      	bne.n	80126c2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	0c1b      	lsrs	r3, r3, #16
 80126b8:	b29a      	uxth	r2, r3
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80126be:	2300      	movs	r3, #0
 80126c0:	e011      	b.n	80126e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d002      	beq.n	80126d2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80126cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126d0:	e009      	b.n	80126e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d002      	beq.n	80126e2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80126dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126e0:	e001      	b.n	80126e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80126e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	371c      	adds	r7, #28
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd90      	pop	{r4, r7, pc}
 80126ee:	bf00      	nop
 80126f0:	20000000 	.word	0x20000000
 80126f4:	10624dd3 	.word	0x10624dd3

080126f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80126f8:	b490      	push	{r4, r7}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012700:	4b21      	ldr	r3, [pc, #132]	; (8012788 <SDMMC_GetCmdResp7+0x90>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	4a21      	ldr	r2, [pc, #132]	; (801278c <SDMMC_GetCmdResp7+0x94>)
 8012706:	fba2 2303 	umull	r2, r3, r2, r3
 801270a:	0a5b      	lsrs	r3, r3, #9
 801270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012710:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8012714:	4623      	mov	r3, r4
 8012716:	1e5c      	subs	r4, r3, #1
 8012718:	2b00      	cmp	r3, #0
 801271a:	d102      	bne.n	8012722 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801271c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012720:	e02c      	b.n	801277c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012726:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801272e:	2b00      	cmp	r3, #0
 8012730:	d0f0      	beq.n	8012714 <SDMMC_GetCmdResp7+0x1c>
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8012738:	2b00      	cmp	r3, #0
 801273a:	d1eb      	bne.n	8012714 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012740:	f003 0304 	and.w	r3, r3, #4
 8012744:	2b00      	cmp	r3, #0
 8012746:	d004      	beq.n	8012752 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2204      	movs	r2, #4
 801274c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801274e:	2304      	movs	r3, #4
 8012750:	e014      	b.n	801277c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012756:	f003 0301 	and.w	r3, r3, #1
 801275a:	2b00      	cmp	r3, #0
 801275c:	d004      	beq.n	8012768 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2201      	movs	r2, #1
 8012762:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012764:	2301      	movs	r3, #1
 8012766:	e009      	b.n	801277c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012770:	2b00      	cmp	r3, #0
 8012772:	d002      	beq.n	801277a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2240      	movs	r2, #64	; 0x40
 8012778:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801277a:	2300      	movs	r3, #0
  
}
 801277c:	4618      	mov	r0, r3
 801277e:	3710      	adds	r7, #16
 8012780:	46bd      	mov	sp, r7
 8012782:	bc90      	pop	{r4, r7}
 8012784:	4770      	bx	lr
 8012786:	bf00      	nop
 8012788:	20000000 	.word	0x20000000
 801278c:	10624dd3 	.word	0x10624dd3

08012790 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012794:	4904      	ldr	r1, [pc, #16]	; (80127a8 <MX_FATFS_Init+0x18>)
 8012796:	4805      	ldr	r0, [pc, #20]	; (80127ac <MX_FATFS_Init+0x1c>)
 8012798:	f003 fb9c 	bl	8015ed4 <FATFS_LinkDriver>
 801279c:	4603      	mov	r3, r0
 801279e:	461a      	mov	r2, r3
 80127a0:	4b03      	ldr	r3, [pc, #12]	; (80127b0 <MX_FATFS_Init+0x20>)
 80127a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80127a4:	bf00      	nop
 80127a6:	bd80      	pop	{r7, pc}
 80127a8:	20047c98 	.word	0x20047c98
 80127ac:	0801a88c 	.word	0x0801a88c
 80127b0:	20047c94 	.word	0x20047c94

080127b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80127ba:	2300      	movs	r3, #0
 80127bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80127be:	f000 f896 	bl	80128ee <BSP_SD_IsDetected>
 80127c2:	4603      	mov	r3, r0
 80127c4:	2b01      	cmp	r3, #1
 80127c6:	d001      	beq.n	80127cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80127c8:	2301      	movs	r3, #1
 80127ca:	e012      	b.n	80127f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80127cc:	480b      	ldr	r0, [pc, #44]	; (80127fc <BSP_SD_Init+0x48>)
 80127ce:	f7fb ffa5 	bl	800e71c <HAL_SD_Init>
 80127d2:	4603      	mov	r3, r0
 80127d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80127d6:	79fb      	ldrb	r3, [r7, #7]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d109      	bne.n	80127f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80127dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80127e0:	4806      	ldr	r0, [pc, #24]	; (80127fc <BSP_SD_Init+0x48>)
 80127e2:	f7fc fd4f 	bl	800f284 <HAL_SD_ConfigWideBusOperation>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d001      	beq.n	80127f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80127ec:	2301      	movs	r3, #1
 80127ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80127f0:	79fb      	ldrb	r3, [r7, #7]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3708      	adds	r7, #8
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	20047a90 	.word	0x20047a90

08012800 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b086      	sub	sp, #24
 8012804:	af00      	add	r7, sp, #0
 8012806:	60f8      	str	r0, [r7, #12]
 8012808:	60b9      	str	r1, [r7, #8]
 801280a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801280c:	2300      	movs	r3, #0
 801280e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	68ba      	ldr	r2, [r7, #8]
 8012814:	68f9      	ldr	r1, [r7, #12]
 8012816:	4806      	ldr	r0, [pc, #24]	; (8012830 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012818:	f7fc f810 	bl	800e83c <HAL_SD_ReadBlocks_DMA>
 801281c:	4603      	mov	r3, r0
 801281e:	2b00      	cmp	r3, #0
 8012820:	d001      	beq.n	8012826 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012822:	2301      	movs	r3, #1
 8012824:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012826:	7dfb      	ldrb	r3, [r7, #23]
}
 8012828:	4618      	mov	r0, r3
 801282a:	3718      	adds	r7, #24
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	20047a90 	.word	0x20047a90

08012834 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b086      	sub	sp, #24
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012840:	2300      	movs	r3, #0
 8012842:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	68ba      	ldr	r2, [r7, #8]
 8012848:	68f9      	ldr	r1, [r7, #12]
 801284a:	4806      	ldr	r0, [pc, #24]	; (8012864 <BSP_SD_WriteBlocks_DMA+0x30>)
 801284c:	f7fc f8de 	bl	800ea0c <HAL_SD_WriteBlocks_DMA>
 8012850:	4603      	mov	r3, r0
 8012852:	2b00      	cmp	r3, #0
 8012854:	d001      	beq.n	801285a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012856:	2301      	movs	r3, #1
 8012858:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801285a:	7dfb      	ldrb	r3, [r7, #23]
}
 801285c:	4618      	mov	r0, r3
 801285e:	3718      	adds	r7, #24
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}
 8012864:	20047a90 	.word	0x20047a90

08012868 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801286c:	4805      	ldr	r0, [pc, #20]	; (8012884 <BSP_SD_GetCardState+0x1c>)
 801286e:	f7fc fd85 	bl	800f37c <HAL_SD_GetCardState>
 8012872:	4603      	mov	r3, r0
 8012874:	2b04      	cmp	r3, #4
 8012876:	bf14      	ite	ne
 8012878:	2301      	movne	r3, #1
 801287a:	2300      	moveq	r3, #0
 801287c:	b2db      	uxtb	r3, r3
}
 801287e:	4618      	mov	r0, r3
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	20047a90 	.word	0x20047a90

08012888 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012890:	6879      	ldr	r1, [r7, #4]
 8012892:	4803      	ldr	r0, [pc, #12]	; (80128a0 <BSP_SD_GetCardInfo+0x18>)
 8012894:	f7fc fcca 	bl	800f22c <HAL_SD_GetCardInfo>
}
 8012898:	bf00      	nop
 801289a:	3708      	adds	r7, #8
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	20047a90 	.word	0x20047a90

080128a4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80128ac:	f000 f818 	bl	80128e0 <BSP_SD_AbortCallback>
}
 80128b0:	bf00      	nop
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}

080128b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80128c0:	f000 f9a8 	bl	8012c14 <BSP_SD_WriteCpltCallback>
}
 80128c4:	bf00      	nop
 80128c6:	3708      	adds	r7, #8
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}

080128cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80128d4:	f000 f9aa 	bl	8012c2c <BSP_SD_ReadCpltCallback>
}
 80128d8:	bf00      	nop
 80128da:	3708      	adds	r7, #8
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80128e0:	b480      	push	{r7}
 80128e2:	af00      	add	r7, sp, #0

}
 80128e4:	bf00      	nop
 80128e6:	46bd      	mov	sp, r7
 80128e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ec:	4770      	bx	lr

080128ee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80128ee:	b580      	push	{r7, lr}
 80128f0:	b082      	sub	sp, #8
 80128f2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80128f4:	2301      	movs	r3, #1
 80128f6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80128f8:	f000 f80c 	bl	8012914 <BSP_PlatformIsDetected>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d101      	bne.n	8012906 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012902:	2300      	movs	r3, #0
 8012904:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012906:	79fb      	ldrb	r3, [r7, #7]
 8012908:	b2db      	uxtb	r3, r3
}
 801290a:	4618      	mov	r0, r3
 801290c:	3708      	adds	r7, #8
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
	...

08012914 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801291a:	2301      	movs	r3, #1
 801291c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801291e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012922:	4806      	ldr	r0, [pc, #24]	; (801293c <BSP_PlatformIsDetected+0x28>)
 8012924:	f7fa f866 	bl	800c9f4 <HAL_GPIO_ReadPin>
 8012928:	4603      	mov	r3, r0
 801292a:	2b00      	cmp	r3, #0
 801292c:	d001      	beq.n	8012932 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801292e:	2300      	movs	r3, #0
 8012930:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012932:	79fb      	ldrb	r3, [r7, #7]
}
 8012934:	4618      	mov	r0, r3
 8012936:	3708      	adds	r7, #8
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}
 801293c:	40020000 	.word	0x40020000

08012940 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b084      	sub	sp, #16
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012948:	f7f8 fdca 	bl	800b4e0 <HAL_GetTick>
 801294c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801294e:	e006      	b.n	801295e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012950:	f7ff ff8a 	bl	8012868 <BSP_SD_GetCardState>
 8012954:	4603      	mov	r3, r0
 8012956:	2b00      	cmp	r3, #0
 8012958:	d101      	bne.n	801295e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801295a:	2300      	movs	r3, #0
 801295c:	e009      	b.n	8012972 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801295e:	f7f8 fdbf 	bl	800b4e0 <HAL_GetTick>
 8012962:	4602      	mov	r2, r0
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	1ad3      	subs	r3, r2, r3
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	429a      	cmp	r2, r3
 801296c:	d8f0      	bhi.n	8012950 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801296e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012972:	4618      	mov	r0, r3
 8012974:	3710      	adds	r7, #16
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
	...

0801297c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	4603      	mov	r3, r0
 8012984:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012986:	4b0b      	ldr	r3, [pc, #44]	; (80129b4 <SD_CheckStatus+0x38>)
 8012988:	2201      	movs	r2, #1
 801298a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801298c:	f7ff ff6c 	bl	8012868 <BSP_SD_GetCardState>
 8012990:	4603      	mov	r3, r0
 8012992:	2b00      	cmp	r3, #0
 8012994:	d107      	bne.n	80129a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012996:	4b07      	ldr	r3, [pc, #28]	; (80129b4 <SD_CheckStatus+0x38>)
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	b2db      	uxtb	r3, r3
 801299c:	f023 0301 	bic.w	r3, r3, #1
 80129a0:	b2da      	uxtb	r2, r3
 80129a2:	4b04      	ldr	r3, [pc, #16]	; (80129b4 <SD_CheckStatus+0x38>)
 80129a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80129a6:	4b03      	ldr	r3, [pc, #12]	; (80129b4 <SD_CheckStatus+0x38>)
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	b2db      	uxtb	r3, r3
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	20000009 	.word	0x20000009

080129b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
 80129be:	4603      	mov	r3, r0
 80129c0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80129c2:	f7ff fef7 	bl	80127b4 <BSP_SD_Init>
 80129c6:	4603      	mov	r3, r0
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d107      	bne.n	80129dc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80129cc:	79fb      	ldrb	r3, [r7, #7]
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7ff ffd4 	bl	801297c <SD_CheckStatus>
 80129d4:	4603      	mov	r3, r0
 80129d6:	461a      	mov	r2, r3
 80129d8:	4b04      	ldr	r3, [pc, #16]	; (80129ec <SD_initialize+0x34>)
 80129da:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80129dc:	4b03      	ldr	r3, [pc, #12]	; (80129ec <SD_initialize+0x34>)
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	b2db      	uxtb	r3, r3
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	20000009 	.word	0x20000009

080129f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	4603      	mov	r3, r0
 80129f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80129fa:	79fb      	ldrb	r3, [r7, #7]
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7ff ffbd 	bl	801297c <SD_CheckStatus>
 8012a02:	4603      	mov	r3, r0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b086      	sub	sp, #24
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	60b9      	str	r1, [r7, #8]
 8012a14:	607a      	str	r2, [r7, #4]
 8012a16:	603b      	str	r3, [r7, #0]
 8012a18:	4603      	mov	r3, r0
 8012a1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012a20:	f247 5030 	movw	r0, #30000	; 0x7530
 8012a24:	f7ff ff8c 	bl	8012940 <SD_CheckStatusWithTimeout>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	da01      	bge.n	8012a32 <SD_read+0x26>
  {
    return res;
 8012a2e:	7dfb      	ldrb	r3, [r7, #23]
 8012a30:	e03b      	b.n	8012aaa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8012a32:	683a      	ldr	r2, [r7, #0]
 8012a34:	6879      	ldr	r1, [r7, #4]
 8012a36:	68b8      	ldr	r0, [r7, #8]
 8012a38:	f7ff fee2 	bl	8012800 <BSP_SD_ReadBlocks_DMA>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d132      	bne.n	8012aa8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8012a42:	4b1c      	ldr	r3, [pc, #112]	; (8012ab4 <SD_read+0xa8>)
 8012a44:	2200      	movs	r2, #0
 8012a46:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012a48:	f7f8 fd4a 	bl	800b4e0 <HAL_GetTick>
 8012a4c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012a4e:	bf00      	nop
 8012a50:	4b18      	ldr	r3, [pc, #96]	; (8012ab4 <SD_read+0xa8>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d108      	bne.n	8012a6a <SD_read+0x5e>
 8012a58:	f7f8 fd42 	bl	800b4e0 <HAL_GetTick>
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	1ad3      	subs	r3, r2, r3
 8012a62:	f247 522f 	movw	r2, #29999	; 0x752f
 8012a66:	4293      	cmp	r3, r2
 8012a68:	d9f2      	bls.n	8012a50 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8012a6a:	4b12      	ldr	r3, [pc, #72]	; (8012ab4 <SD_read+0xa8>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d102      	bne.n	8012a78 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8012a72:	2301      	movs	r3, #1
 8012a74:	75fb      	strb	r3, [r7, #23]
 8012a76:	e017      	b.n	8012aa8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012a78:	4b0e      	ldr	r3, [pc, #56]	; (8012ab4 <SD_read+0xa8>)
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012a7e:	f7f8 fd2f 	bl	800b4e0 <HAL_GetTick>
 8012a82:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012a84:	e007      	b.n	8012a96 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012a86:	f7ff feef 	bl	8012868 <BSP_SD_GetCardState>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d102      	bne.n	8012a96 <SD_read+0x8a>
          {
            res = RES_OK;
 8012a90:	2300      	movs	r3, #0
 8012a92:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012a94:	e008      	b.n	8012aa8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012a96:	f7f8 fd23 	bl	800b4e0 <HAL_GetTick>
 8012a9a:	4602      	mov	r2, r0
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	1ad3      	subs	r3, r2, r3
 8012aa0:	f247 522f 	movw	r2, #29999	; 0x752f
 8012aa4:	4293      	cmp	r3, r2
 8012aa6:	d9ee      	bls.n	8012a86 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3718      	adds	r7, #24
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}
 8012ab2:	bf00      	nop
 8012ab4:	2004532c 	.word	0x2004532c

08012ab8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b086      	sub	sp, #24
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	60b9      	str	r1, [r7, #8]
 8012ac0:	607a      	str	r2, [r7, #4]
 8012ac2:	603b      	str	r3, [r7, #0]
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012acc:	4b24      	ldr	r3, [pc, #144]	; (8012b60 <SD_write+0xa8>)
 8012ace:	2200      	movs	r2, #0
 8012ad0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012ad2:	f247 5030 	movw	r0, #30000	; 0x7530
 8012ad6:	f7ff ff33 	bl	8012940 <SD_CheckStatusWithTimeout>
 8012ada:	4603      	mov	r3, r0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	da01      	bge.n	8012ae4 <SD_write+0x2c>
  {
    return res;
 8012ae0:	7dfb      	ldrb	r3, [r7, #23]
 8012ae2:	e038      	b.n	8012b56 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012ae4:	683a      	ldr	r2, [r7, #0]
 8012ae6:	6879      	ldr	r1, [r7, #4]
 8012ae8:	68b8      	ldr	r0, [r7, #8]
 8012aea:	f7ff fea3 	bl	8012834 <BSP_SD_WriteBlocks_DMA>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d12f      	bne.n	8012b54 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012af4:	f7f8 fcf4 	bl	800b4e0 <HAL_GetTick>
 8012af8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012afa:	bf00      	nop
 8012afc:	4b18      	ldr	r3, [pc, #96]	; (8012b60 <SD_write+0xa8>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d108      	bne.n	8012b16 <SD_write+0x5e>
 8012b04:	f7f8 fcec 	bl	800b4e0 <HAL_GetTick>
 8012b08:	4602      	mov	r2, r0
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	1ad3      	subs	r3, r2, r3
 8012b0e:	f247 522f 	movw	r2, #29999	; 0x752f
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d9f2      	bls.n	8012afc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8012b16:	4b12      	ldr	r3, [pc, #72]	; (8012b60 <SD_write+0xa8>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d102      	bne.n	8012b24 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012b1e:	2301      	movs	r3, #1
 8012b20:	75fb      	strb	r3, [r7, #23]
 8012b22:	e017      	b.n	8012b54 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012b24:	4b0e      	ldr	r3, [pc, #56]	; (8012b60 <SD_write+0xa8>)
 8012b26:	2200      	movs	r2, #0
 8012b28:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012b2a:	f7f8 fcd9 	bl	800b4e0 <HAL_GetTick>
 8012b2e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012b30:	e007      	b.n	8012b42 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012b32:	f7ff fe99 	bl	8012868 <BSP_SD_GetCardState>
 8012b36:	4603      	mov	r3, r0
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d102      	bne.n	8012b42 <SD_write+0x8a>
          {
            res = RES_OK;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	75fb      	strb	r3, [r7, #23]
            break;
 8012b40:	e008      	b.n	8012b54 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012b42:	f7f8 fccd 	bl	800b4e0 <HAL_GetTick>
 8012b46:	4602      	mov	r2, r0
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	1ad3      	subs	r3, r2, r3
 8012b4c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012b50:	4293      	cmp	r3, r2
 8012b52:	d9ee      	bls.n	8012b32 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3718      	adds	r7, #24
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	20045328 	.word	0x20045328

08012b64 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b08c      	sub	sp, #48	; 0x30
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	603a      	str	r2, [r7, #0]
 8012b6e:	71fb      	strb	r3, [r7, #7]
 8012b70:	460b      	mov	r3, r1
 8012b72:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012b74:	2301      	movs	r3, #1
 8012b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012b7a:	4b25      	ldr	r3, [pc, #148]	; (8012c10 <SD_ioctl+0xac>)
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	f003 0301 	and.w	r3, r3, #1
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d001      	beq.n	8012b8c <SD_ioctl+0x28>
 8012b88:	2303      	movs	r3, #3
 8012b8a:	e03c      	b.n	8012c06 <SD_ioctl+0xa2>

  switch (cmd)
 8012b8c:	79bb      	ldrb	r3, [r7, #6]
 8012b8e:	2b03      	cmp	r3, #3
 8012b90:	d834      	bhi.n	8012bfc <SD_ioctl+0x98>
 8012b92:	a201      	add	r2, pc, #4	; (adr r2, 8012b98 <SD_ioctl+0x34>)
 8012b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b98:	08012ba9 	.word	0x08012ba9
 8012b9c:	08012bb1 	.word	0x08012bb1
 8012ba0:	08012bc9 	.word	0x08012bc9
 8012ba4:	08012be3 	.word	0x08012be3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012bae:	e028      	b.n	8012c02 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012bb0:	f107 030c 	add.w	r3, r7, #12
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7ff fe67 	bl	8012888 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012bc6:	e01c      	b.n	8012c02 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012bc8:	f107 030c 	add.w	r3, r7, #12
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7ff fe5b 	bl	8012888 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012be0:	e00f      	b.n	8012c02 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012be2:	f107 030c 	add.w	r3, r7, #12
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7ff fe4e 	bl	8012888 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bee:	0a5a      	lsrs	r2, r3, #9
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012bfa:	e002      	b.n	8012c02 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012bfc:	2304      	movs	r3, #4
 8012bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3730      	adds	r7, #48	; 0x30
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	20000009 	.word	0x20000009

08012c14 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012c14:	b480      	push	{r7}
 8012c16:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012c18:	4b03      	ldr	r3, [pc, #12]	; (8012c28 <BSP_SD_WriteCpltCallback+0x14>)
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	601a      	str	r2, [r3, #0]
}
 8012c1e:	bf00      	nop
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr
 8012c28:	20045328 	.word	0x20045328

08012c2c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012c30:	4b03      	ldr	r3, [pc, #12]	; (8012c40 <BSP_SD_ReadCpltCallback+0x14>)
 8012c32:	2201      	movs	r2, #1
 8012c34:	601a      	str	r2, [r3, #0]
}
 8012c36:	bf00      	nop
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr
 8012c40:	2004532c 	.word	0x2004532c

08012c44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012c4e:	79fb      	ldrb	r3, [r7, #7]
 8012c50:	4a08      	ldr	r2, [pc, #32]	; (8012c74 <disk_status+0x30>)
 8012c52:	009b      	lsls	r3, r3, #2
 8012c54:	4413      	add	r3, r2
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	79fa      	ldrb	r2, [r7, #7]
 8012c5c:	4905      	ldr	r1, [pc, #20]	; (8012c74 <disk_status+0x30>)
 8012c5e:	440a      	add	r2, r1
 8012c60:	7a12      	ldrb	r2, [r2, #8]
 8012c62:	4610      	mov	r0, r2
 8012c64:	4798      	blx	r3
 8012c66:	4603      	mov	r3, r0
 8012c68:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3710      	adds	r7, #16
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	20045358 	.word	0x20045358

08012c78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b084      	sub	sp, #16
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	4603      	mov	r3, r0
 8012c80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012c82:	2300      	movs	r3, #0
 8012c84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012c86:	79fb      	ldrb	r3, [r7, #7]
 8012c88:	4a0d      	ldr	r2, [pc, #52]	; (8012cc0 <disk_initialize+0x48>)
 8012c8a:	5cd3      	ldrb	r3, [r2, r3]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d111      	bne.n	8012cb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012c90:	79fb      	ldrb	r3, [r7, #7]
 8012c92:	4a0b      	ldr	r2, [pc, #44]	; (8012cc0 <disk_initialize+0x48>)
 8012c94:	2101      	movs	r1, #1
 8012c96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012c98:	79fb      	ldrb	r3, [r7, #7]
 8012c9a:	4a09      	ldr	r2, [pc, #36]	; (8012cc0 <disk_initialize+0x48>)
 8012c9c:	009b      	lsls	r3, r3, #2
 8012c9e:	4413      	add	r3, r2
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	79fa      	ldrb	r2, [r7, #7]
 8012ca6:	4906      	ldr	r1, [pc, #24]	; (8012cc0 <disk_initialize+0x48>)
 8012ca8:	440a      	add	r2, r1
 8012caa:	7a12      	ldrb	r2, [r2, #8]
 8012cac:	4610      	mov	r0, r2
 8012cae:	4798      	blx	r3
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
 8012cbe:	bf00      	nop
 8012cc0:	20045358 	.word	0x20045358

08012cc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012cc4:	b590      	push	{r4, r7, lr}
 8012cc6:	b087      	sub	sp, #28
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60b9      	str	r1, [r7, #8]
 8012ccc:	607a      	str	r2, [r7, #4]
 8012cce:	603b      	str	r3, [r7, #0]
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012cd4:	7bfb      	ldrb	r3, [r7, #15]
 8012cd6:	4a0a      	ldr	r2, [pc, #40]	; (8012d00 <disk_read+0x3c>)
 8012cd8:	009b      	lsls	r3, r3, #2
 8012cda:	4413      	add	r3, r2
 8012cdc:	685b      	ldr	r3, [r3, #4]
 8012cde:	689c      	ldr	r4, [r3, #8]
 8012ce0:	7bfb      	ldrb	r3, [r7, #15]
 8012ce2:	4a07      	ldr	r2, [pc, #28]	; (8012d00 <disk_read+0x3c>)
 8012ce4:	4413      	add	r3, r2
 8012ce6:	7a18      	ldrb	r0, [r3, #8]
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	68b9      	ldr	r1, [r7, #8]
 8012cee:	47a0      	blx	r4
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	75fb      	strb	r3, [r7, #23]
  return res;
 8012cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	371c      	adds	r7, #28
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd90      	pop	{r4, r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	20045358 	.word	0x20045358

08012d04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012d04:	b590      	push	{r4, r7, lr}
 8012d06:	b087      	sub	sp, #28
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	60b9      	str	r1, [r7, #8]
 8012d0c:	607a      	str	r2, [r7, #4]
 8012d0e:	603b      	str	r3, [r7, #0]
 8012d10:	4603      	mov	r3, r0
 8012d12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012d14:	7bfb      	ldrb	r3, [r7, #15]
 8012d16:	4a0a      	ldr	r2, [pc, #40]	; (8012d40 <disk_write+0x3c>)
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	4413      	add	r3, r2
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	68dc      	ldr	r4, [r3, #12]
 8012d20:	7bfb      	ldrb	r3, [r7, #15]
 8012d22:	4a07      	ldr	r2, [pc, #28]	; (8012d40 <disk_write+0x3c>)
 8012d24:	4413      	add	r3, r2
 8012d26:	7a18      	ldrb	r0, [r3, #8]
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	687a      	ldr	r2, [r7, #4]
 8012d2c:	68b9      	ldr	r1, [r7, #8]
 8012d2e:	47a0      	blx	r4
 8012d30:	4603      	mov	r3, r0
 8012d32:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	371c      	adds	r7, #28
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd90      	pop	{r4, r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	20045358 	.word	0x20045358

08012d44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	603a      	str	r2, [r7, #0]
 8012d4e:	71fb      	strb	r3, [r7, #7]
 8012d50:	460b      	mov	r3, r1
 8012d52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012d54:	79fb      	ldrb	r3, [r7, #7]
 8012d56:	4a09      	ldr	r2, [pc, #36]	; (8012d7c <disk_ioctl+0x38>)
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	4413      	add	r3, r2
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	691b      	ldr	r3, [r3, #16]
 8012d60:	79fa      	ldrb	r2, [r7, #7]
 8012d62:	4906      	ldr	r1, [pc, #24]	; (8012d7c <disk_ioctl+0x38>)
 8012d64:	440a      	add	r2, r1
 8012d66:	7a10      	ldrb	r0, [r2, #8]
 8012d68:	79b9      	ldrb	r1, [r7, #6]
 8012d6a:	683a      	ldr	r2, [r7, #0]
 8012d6c:	4798      	blx	r3
 8012d6e:	4603      	mov	r3, r0
 8012d70:	73fb      	strb	r3, [r7, #15]
  return res;
 8012d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3710      	adds	r7, #16
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	20045358 	.word	0x20045358

08012d80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012d80:	b480      	push	{r7}
 8012d82:	b085      	sub	sp, #20
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	3301      	adds	r3, #1
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012d90:	89fb      	ldrh	r3, [r7, #14]
 8012d92:	021b      	lsls	r3, r3, #8
 8012d94:	b21a      	sxth	r2, r3
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	b21b      	sxth	r3, r3
 8012d9c:	4313      	orrs	r3, r2
 8012d9e:	b21b      	sxth	r3, r3
 8012da0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012da2:	89fb      	ldrh	r3, [r7, #14]
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3714      	adds	r7, #20
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr

08012db0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012db0:	b480      	push	{r7}
 8012db2:	b085      	sub	sp, #20
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	3303      	adds	r3, #3
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	021b      	lsls	r3, r3, #8
 8012dc4:	687a      	ldr	r2, [r7, #4]
 8012dc6:	3202      	adds	r2, #2
 8012dc8:	7812      	ldrb	r2, [r2, #0]
 8012dca:	4313      	orrs	r3, r2
 8012dcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	021b      	lsls	r3, r3, #8
 8012dd2:	687a      	ldr	r2, [r7, #4]
 8012dd4:	3201      	adds	r2, #1
 8012dd6:	7812      	ldrb	r2, [r2, #0]
 8012dd8:	4313      	orrs	r3, r2
 8012dda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	021b      	lsls	r3, r3, #8
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	7812      	ldrb	r2, [r2, #0]
 8012de4:	4313      	orrs	r3, r2
 8012de6:	60fb      	str	r3, [r7, #12]
	return rv;
 8012de8:	68fb      	ldr	r3, [r7, #12]
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3714      	adds	r7, #20
 8012dee:	46bd      	mov	sp, r7
 8012df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df4:	4770      	bx	lr

08012df6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012df6:	b480      	push	{r7}
 8012df8:	b083      	sub	sp, #12
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	6078      	str	r0, [r7, #4]
 8012dfe:	460b      	mov	r3, r1
 8012e00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	1c5a      	adds	r2, r3, #1
 8012e06:	607a      	str	r2, [r7, #4]
 8012e08:	887a      	ldrh	r2, [r7, #2]
 8012e0a:	b2d2      	uxtb	r2, r2
 8012e0c:	701a      	strb	r2, [r3, #0]
 8012e0e:	887b      	ldrh	r3, [r7, #2]
 8012e10:	0a1b      	lsrs	r3, r3, #8
 8012e12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	1c5a      	adds	r2, r3, #1
 8012e18:	607a      	str	r2, [r7, #4]
 8012e1a:	887a      	ldrh	r2, [r7, #2]
 8012e1c:	b2d2      	uxtb	r2, r2
 8012e1e:	701a      	strb	r2, [r3, #0]
}
 8012e20:	bf00      	nop
 8012e22:	370c      	adds	r7, #12
 8012e24:	46bd      	mov	sp, r7
 8012e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2a:	4770      	bx	lr

08012e2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	b083      	sub	sp, #12
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	1c5a      	adds	r2, r3, #1
 8012e3a:	607a      	str	r2, [r7, #4]
 8012e3c:	683a      	ldr	r2, [r7, #0]
 8012e3e:	b2d2      	uxtb	r2, r2
 8012e40:	701a      	strb	r2, [r3, #0]
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	0a1b      	lsrs	r3, r3, #8
 8012e46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	1c5a      	adds	r2, r3, #1
 8012e4c:	607a      	str	r2, [r7, #4]
 8012e4e:	683a      	ldr	r2, [r7, #0]
 8012e50:	b2d2      	uxtb	r2, r2
 8012e52:	701a      	strb	r2, [r3, #0]
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	0a1b      	lsrs	r3, r3, #8
 8012e58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	1c5a      	adds	r2, r3, #1
 8012e5e:	607a      	str	r2, [r7, #4]
 8012e60:	683a      	ldr	r2, [r7, #0]
 8012e62:	b2d2      	uxtb	r2, r2
 8012e64:	701a      	strb	r2, [r3, #0]
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	0a1b      	lsrs	r3, r3, #8
 8012e6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	1c5a      	adds	r2, r3, #1
 8012e70:	607a      	str	r2, [r7, #4]
 8012e72:	683a      	ldr	r2, [r7, #0]
 8012e74:	b2d2      	uxtb	r2, r2
 8012e76:	701a      	strb	r2, [r3, #0]
}
 8012e78:	bf00      	nop
 8012e7a:	370c      	adds	r7, #12
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr

08012e84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012e84:	b480      	push	{r7}
 8012e86:	b087      	sub	sp, #28
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	60b9      	str	r1, [r7, #8]
 8012e8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d00d      	beq.n	8012eba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012e9e:	693a      	ldr	r2, [r7, #16]
 8012ea0:	1c53      	adds	r3, r2, #1
 8012ea2:	613b      	str	r3, [r7, #16]
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	1c59      	adds	r1, r3, #1
 8012ea8:	6179      	str	r1, [r7, #20]
 8012eaa:	7812      	ldrb	r2, [r2, #0]
 8012eac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	607b      	str	r3, [r7, #4]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d1f1      	bne.n	8012e9e <mem_cpy+0x1a>
	}
}
 8012eba:	bf00      	nop
 8012ebc:	371c      	adds	r7, #28
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec4:	4770      	bx	lr

08012ec6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012ec6:	b480      	push	{r7}
 8012ec8:	b087      	sub	sp, #28
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	60f8      	str	r0, [r7, #12]
 8012ece:	60b9      	str	r1, [r7, #8]
 8012ed0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	1c5a      	adds	r2, r3, #1
 8012eda:	617a      	str	r2, [r7, #20]
 8012edc:	68ba      	ldr	r2, [r7, #8]
 8012ede:	b2d2      	uxtb	r2, r2
 8012ee0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	3b01      	subs	r3, #1
 8012ee6:	607b      	str	r3, [r7, #4]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d1f3      	bne.n	8012ed6 <mem_set+0x10>
}
 8012eee:	bf00      	nop
 8012ef0:	371c      	adds	r7, #28
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef8:	4770      	bx	lr

08012efa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012efa:	b480      	push	{r7}
 8012efc:	b089      	sub	sp, #36	; 0x24
 8012efe:	af00      	add	r7, sp, #0
 8012f00:	60f8      	str	r0, [r7, #12]
 8012f02:	60b9      	str	r1, [r7, #8]
 8012f04:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	61fb      	str	r3, [r7, #28]
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	1c5a      	adds	r2, r3, #1
 8012f16:	61fa      	str	r2, [r7, #28]
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	69bb      	ldr	r3, [r7, #24]
 8012f1e:	1c5a      	adds	r2, r3, #1
 8012f20:	61ba      	str	r2, [r7, #24]
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	1acb      	subs	r3, r1, r3
 8012f26:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	3b01      	subs	r3, #1
 8012f2c:	607b      	str	r3, [r7, #4]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d002      	beq.n	8012f3a <mem_cmp+0x40>
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d0eb      	beq.n	8012f12 <mem_cmp+0x18>

	return r;
 8012f3a:	697b      	ldr	r3, [r7, #20]
}
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	3724      	adds	r7, #36	; 0x24
 8012f40:	46bd      	mov	sp, r7
 8012f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f46:	4770      	bx	lr

08012f48 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012f48:	b480      	push	{r7}
 8012f4a:	b083      	sub	sp, #12
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012f52:	e002      	b.n	8012f5a <chk_chr+0x12>
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	3301      	adds	r3, #1
 8012f58:	607b      	str	r3, [r7, #4]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d005      	beq.n	8012f6e <chk_chr+0x26>
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	781b      	ldrb	r3, [r3, #0]
 8012f66:	461a      	mov	r2, r3
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d1f2      	bne.n	8012f54 <chk_chr+0xc>
	return *str;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	781b      	ldrb	r3, [r3, #0]
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	370c      	adds	r7, #12
 8012f76:	46bd      	mov	sp, r7
 8012f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7c:	4770      	bx	lr
	...

08012f80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012f80:	b480      	push	{r7}
 8012f82:	b085      	sub	sp, #20
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
 8012f88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	60bb      	str	r3, [r7, #8]
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	60fb      	str	r3, [r7, #12]
 8012f92:	e029      	b.n	8012fe8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012f94:	4a27      	ldr	r2, [pc, #156]	; (8013034 <chk_lock+0xb4>)
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	011b      	lsls	r3, r3, #4
 8012f9a:	4413      	add	r3, r2
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d01d      	beq.n	8012fde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012fa2:	4a24      	ldr	r2, [pc, #144]	; (8013034 <chk_lock+0xb4>)
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	011b      	lsls	r3, r3, #4
 8012fa8:	4413      	add	r3, r2
 8012faa:	681a      	ldr	r2, [r3, #0]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d116      	bne.n	8012fe2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012fb4:	4a1f      	ldr	r2, [pc, #124]	; (8013034 <chk_lock+0xb4>)
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	011b      	lsls	r3, r3, #4
 8012fba:	4413      	add	r3, r2
 8012fbc:	3304      	adds	r3, #4
 8012fbe:	681a      	ldr	r2, [r3, #0]
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d10c      	bne.n	8012fe2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012fc8:	4a1a      	ldr	r2, [pc, #104]	; (8013034 <chk_lock+0xb4>)
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	011b      	lsls	r3, r3, #4
 8012fce:	4413      	add	r3, r2
 8012fd0:	3308      	adds	r3, #8
 8012fd2:	681a      	ldr	r2, [r3, #0]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d102      	bne.n	8012fe2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012fdc:	e007      	b.n	8012fee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012fde:	2301      	movs	r3, #1
 8012fe0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	60fb      	str	r3, [r7, #12]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d9d2      	bls.n	8012f94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	2b02      	cmp	r3, #2
 8012ff2:	d109      	bne.n	8013008 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d102      	bne.n	8013000 <chk_lock+0x80>
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	2b02      	cmp	r3, #2
 8012ffe:	d101      	bne.n	8013004 <chk_lock+0x84>
 8013000:	2300      	movs	r3, #0
 8013002:	e010      	b.n	8013026 <chk_lock+0xa6>
 8013004:	2312      	movs	r3, #18
 8013006:	e00e      	b.n	8013026 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d108      	bne.n	8013020 <chk_lock+0xa0>
 801300e:	4a09      	ldr	r2, [pc, #36]	; (8013034 <chk_lock+0xb4>)
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	011b      	lsls	r3, r3, #4
 8013014:	4413      	add	r3, r2
 8013016:	330c      	adds	r3, #12
 8013018:	881b      	ldrh	r3, [r3, #0]
 801301a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801301e:	d101      	bne.n	8013024 <chk_lock+0xa4>
 8013020:	2310      	movs	r3, #16
 8013022:	e000      	b.n	8013026 <chk_lock+0xa6>
 8013024:	2300      	movs	r3, #0
}
 8013026:	4618      	mov	r0, r3
 8013028:	3714      	adds	r7, #20
 801302a:	46bd      	mov	sp, r7
 801302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop
 8013034:	20045338 	.word	0x20045338

08013038 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013038:	b480      	push	{r7}
 801303a:	b083      	sub	sp, #12
 801303c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801303e:	2300      	movs	r3, #0
 8013040:	607b      	str	r3, [r7, #4]
 8013042:	e002      	b.n	801304a <enq_lock+0x12>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	3301      	adds	r3, #1
 8013048:	607b      	str	r3, [r7, #4]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2b01      	cmp	r3, #1
 801304e:	d806      	bhi.n	801305e <enq_lock+0x26>
 8013050:	4a09      	ldr	r2, [pc, #36]	; (8013078 <enq_lock+0x40>)
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	011b      	lsls	r3, r3, #4
 8013056:	4413      	add	r3, r2
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d1f2      	bne.n	8013044 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2b02      	cmp	r3, #2
 8013062:	bf14      	ite	ne
 8013064:	2301      	movne	r3, #1
 8013066:	2300      	moveq	r3, #0
 8013068:	b2db      	uxtb	r3, r3
}
 801306a:	4618      	mov	r0, r3
 801306c:	370c      	adds	r7, #12
 801306e:	46bd      	mov	sp, r7
 8013070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013074:	4770      	bx	lr
 8013076:	bf00      	nop
 8013078:	20045338 	.word	0x20045338

0801307c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801307c:	b480      	push	{r7}
 801307e:	b085      	sub	sp, #20
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013086:	2300      	movs	r3, #0
 8013088:	60fb      	str	r3, [r7, #12]
 801308a:	e01f      	b.n	80130cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801308c:	4a41      	ldr	r2, [pc, #260]	; (8013194 <inc_lock+0x118>)
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	011b      	lsls	r3, r3, #4
 8013092:	4413      	add	r3, r2
 8013094:	681a      	ldr	r2, [r3, #0]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	429a      	cmp	r2, r3
 801309c:	d113      	bne.n	80130c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801309e:	4a3d      	ldr	r2, [pc, #244]	; (8013194 <inc_lock+0x118>)
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	011b      	lsls	r3, r3, #4
 80130a4:	4413      	add	r3, r2
 80130a6:	3304      	adds	r3, #4
 80130a8:	681a      	ldr	r2, [r3, #0]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d109      	bne.n	80130c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80130b2:	4a38      	ldr	r2, [pc, #224]	; (8013194 <inc_lock+0x118>)
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	011b      	lsls	r3, r3, #4
 80130b8:	4413      	add	r3, r2
 80130ba:	3308      	adds	r3, #8
 80130bc:	681a      	ldr	r2, [r3, #0]
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80130c2:	429a      	cmp	r2, r3
 80130c4:	d006      	beq.n	80130d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	3301      	adds	r3, #1
 80130ca:	60fb      	str	r3, [r7, #12]
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2b01      	cmp	r3, #1
 80130d0:	d9dc      	bls.n	801308c <inc_lock+0x10>
 80130d2:	e000      	b.n	80130d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80130d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2b02      	cmp	r3, #2
 80130da:	d132      	bne.n	8013142 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80130dc:	2300      	movs	r3, #0
 80130de:	60fb      	str	r3, [r7, #12]
 80130e0:	e002      	b.n	80130e8 <inc_lock+0x6c>
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	3301      	adds	r3, #1
 80130e6:	60fb      	str	r3, [r7, #12]
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2b01      	cmp	r3, #1
 80130ec:	d806      	bhi.n	80130fc <inc_lock+0x80>
 80130ee:	4a29      	ldr	r2, [pc, #164]	; (8013194 <inc_lock+0x118>)
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	011b      	lsls	r3, r3, #4
 80130f4:	4413      	add	r3, r2
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d1f2      	bne.n	80130e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2b02      	cmp	r3, #2
 8013100:	d101      	bne.n	8013106 <inc_lock+0x8a>
 8013102:	2300      	movs	r3, #0
 8013104:	e040      	b.n	8013188 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	4922      	ldr	r1, [pc, #136]	; (8013194 <inc_lock+0x118>)
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	011b      	lsls	r3, r3, #4
 8013110:	440b      	add	r3, r1
 8013112:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	689a      	ldr	r2, [r3, #8]
 8013118:	491e      	ldr	r1, [pc, #120]	; (8013194 <inc_lock+0x118>)
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	011b      	lsls	r3, r3, #4
 801311e:	440b      	add	r3, r1
 8013120:	3304      	adds	r3, #4
 8013122:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	695a      	ldr	r2, [r3, #20]
 8013128:	491a      	ldr	r1, [pc, #104]	; (8013194 <inc_lock+0x118>)
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	011b      	lsls	r3, r3, #4
 801312e:	440b      	add	r3, r1
 8013130:	3308      	adds	r3, #8
 8013132:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013134:	4a17      	ldr	r2, [pc, #92]	; (8013194 <inc_lock+0x118>)
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	011b      	lsls	r3, r3, #4
 801313a:	4413      	add	r3, r2
 801313c:	330c      	adds	r3, #12
 801313e:	2200      	movs	r2, #0
 8013140:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d009      	beq.n	801315c <inc_lock+0xe0>
 8013148:	4a12      	ldr	r2, [pc, #72]	; (8013194 <inc_lock+0x118>)
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	011b      	lsls	r3, r3, #4
 801314e:	4413      	add	r3, r2
 8013150:	330c      	adds	r3, #12
 8013152:	881b      	ldrh	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d001      	beq.n	801315c <inc_lock+0xe0>
 8013158:	2300      	movs	r3, #0
 801315a:	e015      	b.n	8013188 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d108      	bne.n	8013174 <inc_lock+0xf8>
 8013162:	4a0c      	ldr	r2, [pc, #48]	; (8013194 <inc_lock+0x118>)
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	011b      	lsls	r3, r3, #4
 8013168:	4413      	add	r3, r2
 801316a:	330c      	adds	r3, #12
 801316c:	881b      	ldrh	r3, [r3, #0]
 801316e:	3301      	adds	r3, #1
 8013170:	b29a      	uxth	r2, r3
 8013172:	e001      	b.n	8013178 <inc_lock+0xfc>
 8013174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013178:	4906      	ldr	r1, [pc, #24]	; (8013194 <inc_lock+0x118>)
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	011b      	lsls	r3, r3, #4
 801317e:	440b      	add	r3, r1
 8013180:	330c      	adds	r3, #12
 8013182:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	3301      	adds	r3, #1
}
 8013188:	4618      	mov	r0, r3
 801318a:	3714      	adds	r7, #20
 801318c:	46bd      	mov	sp, r7
 801318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013192:	4770      	bx	lr
 8013194:	20045338 	.word	0x20045338

08013198 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013198:	b480      	push	{r7}
 801319a:	b085      	sub	sp, #20
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	3b01      	subs	r3, #1
 80131a4:	607b      	str	r3, [r7, #4]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d825      	bhi.n	80131f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80131ac:	4a17      	ldr	r2, [pc, #92]	; (801320c <dec_lock+0x74>)
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	011b      	lsls	r3, r3, #4
 80131b2:	4413      	add	r3, r2
 80131b4:	330c      	adds	r3, #12
 80131b6:	881b      	ldrh	r3, [r3, #0]
 80131b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80131ba:	89fb      	ldrh	r3, [r7, #14]
 80131bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80131c0:	d101      	bne.n	80131c6 <dec_lock+0x2e>
 80131c2:	2300      	movs	r3, #0
 80131c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80131c6:	89fb      	ldrh	r3, [r7, #14]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d002      	beq.n	80131d2 <dec_lock+0x3a>
 80131cc:	89fb      	ldrh	r3, [r7, #14]
 80131ce:	3b01      	subs	r3, #1
 80131d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80131d2:	4a0e      	ldr	r2, [pc, #56]	; (801320c <dec_lock+0x74>)
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	011b      	lsls	r3, r3, #4
 80131d8:	4413      	add	r3, r2
 80131da:	330c      	adds	r3, #12
 80131dc:	89fa      	ldrh	r2, [r7, #14]
 80131de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80131e0:	89fb      	ldrh	r3, [r7, #14]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d105      	bne.n	80131f2 <dec_lock+0x5a>
 80131e6:	4a09      	ldr	r2, [pc, #36]	; (801320c <dec_lock+0x74>)
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	011b      	lsls	r3, r3, #4
 80131ec:	4413      	add	r3, r2
 80131ee:	2200      	movs	r2, #0
 80131f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80131f2:	2300      	movs	r3, #0
 80131f4:	737b      	strb	r3, [r7, #13]
 80131f6:	e001      	b.n	80131fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80131f8:	2302      	movs	r3, #2
 80131fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80131fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3714      	adds	r7, #20
 8013202:	46bd      	mov	sp, r7
 8013204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013208:	4770      	bx	lr
 801320a:	bf00      	nop
 801320c:	20045338 	.word	0x20045338

08013210 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013210:	b480      	push	{r7}
 8013212:	b085      	sub	sp, #20
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013218:	2300      	movs	r3, #0
 801321a:	60fb      	str	r3, [r7, #12]
 801321c:	e010      	b.n	8013240 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801321e:	4a0d      	ldr	r2, [pc, #52]	; (8013254 <clear_lock+0x44>)
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	011b      	lsls	r3, r3, #4
 8013224:	4413      	add	r3, r2
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	687a      	ldr	r2, [r7, #4]
 801322a:	429a      	cmp	r2, r3
 801322c:	d105      	bne.n	801323a <clear_lock+0x2a>
 801322e:	4a09      	ldr	r2, [pc, #36]	; (8013254 <clear_lock+0x44>)
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	011b      	lsls	r3, r3, #4
 8013234:	4413      	add	r3, r2
 8013236:	2200      	movs	r2, #0
 8013238:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	3301      	adds	r3, #1
 801323e:	60fb      	str	r3, [r7, #12]
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	2b01      	cmp	r3, #1
 8013244:	d9eb      	bls.n	801321e <clear_lock+0xe>
	}
}
 8013246:	bf00      	nop
 8013248:	3714      	adds	r7, #20
 801324a:	46bd      	mov	sp, r7
 801324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013250:	4770      	bx	lr
 8013252:	bf00      	nop
 8013254:	20045338 	.word	0x20045338

08013258 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b086      	sub	sp, #24
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013260:	2300      	movs	r3, #0
 8013262:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	78db      	ldrb	r3, [r3, #3]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d034      	beq.n	80132d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013270:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	7858      	ldrb	r0, [r3, #1]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801327c:	2301      	movs	r3, #1
 801327e:	697a      	ldr	r2, [r7, #20]
 8013280:	f7ff fd40 	bl	8012d04 <disk_write>
 8013284:	4603      	mov	r3, r0
 8013286:	2b00      	cmp	r3, #0
 8013288:	d002      	beq.n	8013290 <sync_window+0x38>
			res = FR_DISK_ERR;
 801328a:	2301      	movs	r3, #1
 801328c:	73fb      	strb	r3, [r7, #15]
 801328e:	e022      	b.n	80132d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2200      	movs	r2, #0
 8013294:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801329a:	697a      	ldr	r2, [r7, #20]
 801329c:	1ad2      	subs	r2, r2, r3
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6a1b      	ldr	r3, [r3, #32]
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d217      	bcs.n	80132d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	789b      	ldrb	r3, [r3, #2]
 80132aa:	613b      	str	r3, [r7, #16]
 80132ac:	e010      	b.n	80132d0 <sync_window+0x78>
					wsect += fs->fsize;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6a1b      	ldr	r3, [r3, #32]
 80132b2:	697a      	ldr	r2, [r7, #20]
 80132b4:	4413      	add	r3, r2
 80132b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	7858      	ldrb	r0, [r3, #1]
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80132c2:	2301      	movs	r3, #1
 80132c4:	697a      	ldr	r2, [r7, #20]
 80132c6:	f7ff fd1d 	bl	8012d04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	3b01      	subs	r3, #1
 80132ce:	613b      	str	r3, [r7, #16]
 80132d0:	693b      	ldr	r3, [r7, #16]
 80132d2:	2b01      	cmp	r3, #1
 80132d4:	d8eb      	bhi.n	80132ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80132d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3718      	adds	r7, #24
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}

080132e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b084      	sub	sp, #16
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80132ea:	2300      	movs	r3, #0
 80132ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132f2:	683a      	ldr	r2, [r7, #0]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d01b      	beq.n	8013330 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f7ff ffad 	bl	8013258 <sync_window>
 80132fe:	4603      	mov	r3, r0
 8013300:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013302:	7bfb      	ldrb	r3, [r7, #15]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d113      	bne.n	8013330 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	7858      	ldrb	r0, [r3, #1]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013312:	2301      	movs	r3, #1
 8013314:	683a      	ldr	r2, [r7, #0]
 8013316:	f7ff fcd5 	bl	8012cc4 <disk_read>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	d004      	beq.n	801332a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013320:	f04f 33ff 	mov.w	r3, #4294967295
 8013324:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013326:	2301      	movs	r3, #1
 8013328:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	683a      	ldr	r2, [r7, #0]
 801332e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8013330:	7bfb      	ldrb	r3, [r7, #15]
}
 8013332:	4618      	mov	r0, r3
 8013334:	3710      	adds	r7, #16
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
	...

0801333c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ff ff87 	bl	8013258 <sync_window>
 801334a:	4603      	mov	r3, r0
 801334c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801334e:	7bfb      	ldrb	r3, [r7, #15]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d159      	bne.n	8013408 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	2b03      	cmp	r3, #3
 801335a:	d149      	bne.n	80133f0 <sync_fs+0xb4>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	791b      	ldrb	r3, [r3, #4]
 8013360:	2b01      	cmp	r3, #1
 8013362:	d145      	bne.n	80133f0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	899b      	ldrh	r3, [r3, #12]
 801336e:	461a      	mov	r2, r3
 8013370:	2100      	movs	r1, #0
 8013372:	f7ff fda8 	bl	8012ec6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	3338      	adds	r3, #56	; 0x38
 801337a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801337e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013382:	4618      	mov	r0, r3
 8013384:	f7ff fd37 	bl	8012df6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	3338      	adds	r3, #56	; 0x38
 801338c:	4921      	ldr	r1, [pc, #132]	; (8013414 <sync_fs+0xd8>)
 801338e:	4618      	mov	r0, r3
 8013390:	f7ff fd4c 	bl	8012e2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	3338      	adds	r3, #56	; 0x38
 8013398:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801339c:	491e      	ldr	r1, [pc, #120]	; (8013418 <sync_fs+0xdc>)
 801339e:	4618      	mov	r0, r3
 80133a0:	f7ff fd44 	bl	8012e2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	3338      	adds	r3, #56	; 0x38
 80133a8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	695b      	ldr	r3, [r3, #20]
 80133b0:	4619      	mov	r1, r3
 80133b2:	4610      	mov	r0, r2
 80133b4:	f7ff fd3a 	bl	8012e2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	3338      	adds	r3, #56	; 0x38
 80133bc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	691b      	ldr	r3, [r3, #16]
 80133c4:	4619      	mov	r1, r3
 80133c6:	4610      	mov	r0, r2
 80133c8:	f7ff fd30 	bl	8012e2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133d0:	1c5a      	adds	r2, r3, #1
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	7858      	ldrb	r0, [r3, #1]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80133e4:	2301      	movs	r3, #1
 80133e6:	f7ff fc8d 	bl	8012d04 <disk_write>
			fs->fsi_flag = 0;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2200      	movs	r2, #0
 80133ee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	785b      	ldrb	r3, [r3, #1]
 80133f4:	2200      	movs	r2, #0
 80133f6:	2100      	movs	r1, #0
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7ff fca3 	bl	8012d44 <disk_ioctl>
 80133fe:	4603      	mov	r3, r0
 8013400:	2b00      	cmp	r3, #0
 8013402:	d001      	beq.n	8013408 <sync_fs+0xcc>
 8013404:	2301      	movs	r3, #1
 8013406:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013408:	7bfb      	ldrb	r3, [r7, #15]
}
 801340a:	4618      	mov	r0, r3
 801340c:	3710      	adds	r7, #16
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	41615252 	.word	0x41615252
 8013418:	61417272 	.word	0x61417272

0801341c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801341c:	b480      	push	{r7}
 801341e:	b083      	sub	sp, #12
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	3b02      	subs	r3, #2
 801342a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	69db      	ldr	r3, [r3, #28]
 8013430:	3b02      	subs	r3, #2
 8013432:	683a      	ldr	r2, [r7, #0]
 8013434:	429a      	cmp	r2, r3
 8013436:	d301      	bcc.n	801343c <clust2sect+0x20>
 8013438:	2300      	movs	r3, #0
 801343a:	e008      	b.n	801344e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	895b      	ldrh	r3, [r3, #10]
 8013440:	461a      	mov	r2, r3
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	fb03 f202 	mul.w	r2, r3, r2
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801344c:	4413      	add	r3, r2
}
 801344e:	4618      	mov	r0, r3
 8013450:	370c      	adds	r7, #12
 8013452:	46bd      	mov	sp, r7
 8013454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013458:	4770      	bx	lr

0801345a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801345a:	b580      	push	{r7, lr}
 801345c:	b086      	sub	sp, #24
 801345e:	af00      	add	r7, sp, #0
 8013460:	6078      	str	r0, [r7, #4]
 8013462:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	2b01      	cmp	r3, #1
 801346e:	d904      	bls.n	801347a <get_fat+0x20>
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	69db      	ldr	r3, [r3, #28]
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	429a      	cmp	r2, r3
 8013478:	d302      	bcc.n	8013480 <get_fat+0x26>
		val = 1;	/* Internal error */
 801347a:	2301      	movs	r3, #1
 801347c:	617b      	str	r3, [r7, #20]
 801347e:	e0b7      	b.n	80135f0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013480:	f04f 33ff 	mov.w	r3, #4294967295
 8013484:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	2b02      	cmp	r3, #2
 801348c:	d05a      	beq.n	8013544 <get_fat+0xea>
 801348e:	2b03      	cmp	r3, #3
 8013490:	d07d      	beq.n	801358e <get_fat+0x134>
 8013492:	2b01      	cmp	r3, #1
 8013494:	f040 80a2 	bne.w	80135dc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	60fb      	str	r3, [r7, #12]
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	085b      	lsrs	r3, r3, #1
 80134a0:	68fa      	ldr	r2, [r7, #12]
 80134a2:	4413      	add	r3, r2
 80134a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	899b      	ldrh	r3, [r3, #12]
 80134ae:	4619      	mov	r1, r3
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80134b6:	4413      	add	r3, r2
 80134b8:	4619      	mov	r1, r3
 80134ba:	6938      	ldr	r0, [r7, #16]
 80134bc:	f7ff ff10 	bl	80132e0 <move_window>
 80134c0:	4603      	mov	r3, r0
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	f040 808d 	bne.w	80135e2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	1c5a      	adds	r2, r3, #1
 80134cc:	60fa      	str	r2, [r7, #12]
 80134ce:	693a      	ldr	r2, [r7, #16]
 80134d0:	8992      	ldrh	r2, [r2, #12]
 80134d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80134d6:	fb02 f201 	mul.w	r2, r2, r1
 80134da:	1a9b      	subs	r3, r3, r2
 80134dc:	693a      	ldr	r2, [r7, #16]
 80134de:	4413      	add	r3, r2
 80134e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80134e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	899b      	ldrh	r3, [r3, #12]
 80134ee:	4619      	mov	r1, r3
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80134f6:	4413      	add	r3, r2
 80134f8:	4619      	mov	r1, r3
 80134fa:	6938      	ldr	r0, [r7, #16]
 80134fc:	f7ff fef0 	bl	80132e0 <move_window>
 8013500:	4603      	mov	r3, r0
 8013502:	2b00      	cmp	r3, #0
 8013504:	d16f      	bne.n	80135e6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	899b      	ldrh	r3, [r3, #12]
 801350a:	461a      	mov	r2, r3
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013512:	fb02 f201 	mul.w	r2, r2, r1
 8013516:	1a9b      	subs	r3, r3, r2
 8013518:	693a      	ldr	r2, [r7, #16]
 801351a:	4413      	add	r3, r2
 801351c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013520:	021b      	lsls	r3, r3, #8
 8013522:	461a      	mov	r2, r3
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	4313      	orrs	r3, r2
 8013528:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	f003 0301 	and.w	r3, r3, #1
 8013530:	2b00      	cmp	r3, #0
 8013532:	d002      	beq.n	801353a <get_fat+0xe0>
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	091b      	lsrs	r3, r3, #4
 8013538:	e002      	b.n	8013540 <get_fat+0xe6>
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013540:	617b      	str	r3, [r7, #20]
			break;
 8013542:	e055      	b.n	80135f0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013544:	693b      	ldr	r3, [r7, #16]
 8013546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	899b      	ldrh	r3, [r3, #12]
 801354c:	085b      	lsrs	r3, r3, #1
 801354e:	b29b      	uxth	r3, r3
 8013550:	4619      	mov	r1, r3
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	fbb3 f3f1 	udiv	r3, r3, r1
 8013558:	4413      	add	r3, r2
 801355a:	4619      	mov	r1, r3
 801355c:	6938      	ldr	r0, [r7, #16]
 801355e:	f7ff febf 	bl	80132e0 <move_window>
 8013562:	4603      	mov	r3, r0
 8013564:	2b00      	cmp	r3, #0
 8013566:	d140      	bne.n	80135ea <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	005b      	lsls	r3, r3, #1
 8013572:	693a      	ldr	r2, [r7, #16]
 8013574:	8992      	ldrh	r2, [r2, #12]
 8013576:	fbb3 f0f2 	udiv	r0, r3, r2
 801357a:	fb02 f200 	mul.w	r2, r2, r0
 801357e:	1a9b      	subs	r3, r3, r2
 8013580:	440b      	add	r3, r1
 8013582:	4618      	mov	r0, r3
 8013584:	f7ff fbfc 	bl	8012d80 <ld_word>
 8013588:	4603      	mov	r3, r0
 801358a:	617b      	str	r3, [r7, #20]
			break;
 801358c:	e030      	b.n	80135f0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	899b      	ldrh	r3, [r3, #12]
 8013596:	089b      	lsrs	r3, r3, #2
 8013598:	b29b      	uxth	r3, r3
 801359a:	4619      	mov	r1, r3
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	fbb3 f3f1 	udiv	r3, r3, r1
 80135a2:	4413      	add	r3, r2
 80135a4:	4619      	mov	r1, r3
 80135a6:	6938      	ldr	r0, [r7, #16]
 80135a8:	f7ff fe9a 	bl	80132e0 <move_window>
 80135ac:	4603      	mov	r3, r0
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d11d      	bne.n	80135ee <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	693a      	ldr	r2, [r7, #16]
 80135be:	8992      	ldrh	r2, [r2, #12]
 80135c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80135c4:	fb02 f200 	mul.w	r2, r2, r0
 80135c8:	1a9b      	subs	r3, r3, r2
 80135ca:	440b      	add	r3, r1
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7ff fbef 	bl	8012db0 <ld_dword>
 80135d2:	4603      	mov	r3, r0
 80135d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80135d8:	617b      	str	r3, [r7, #20]
			break;
 80135da:	e009      	b.n	80135f0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80135dc:	2301      	movs	r3, #1
 80135de:	617b      	str	r3, [r7, #20]
 80135e0:	e006      	b.n	80135f0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80135e2:	bf00      	nop
 80135e4:	e004      	b.n	80135f0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80135e6:	bf00      	nop
 80135e8:	e002      	b.n	80135f0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80135ea:	bf00      	nop
 80135ec:	e000      	b.n	80135f0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80135ee:	bf00      	nop
		}
	}

	return val;
 80135f0:	697b      	ldr	r3, [r7, #20]
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3718      	adds	r7, #24
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}

080135fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80135fa:	b590      	push	{r4, r7, lr}
 80135fc:	b089      	sub	sp, #36	; 0x24
 80135fe:	af00      	add	r7, sp, #0
 8013600:	60f8      	str	r0, [r7, #12]
 8013602:	60b9      	str	r1, [r7, #8]
 8013604:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013606:	2302      	movs	r3, #2
 8013608:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	2b01      	cmp	r3, #1
 801360e:	f240 8106 	bls.w	801381e <put_fat+0x224>
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	69db      	ldr	r3, [r3, #28]
 8013616:	68ba      	ldr	r2, [r7, #8]
 8013618:	429a      	cmp	r2, r3
 801361a:	f080 8100 	bcs.w	801381e <put_fat+0x224>
		switch (fs->fs_type) {
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	781b      	ldrb	r3, [r3, #0]
 8013622:	2b02      	cmp	r3, #2
 8013624:	f000 8088 	beq.w	8013738 <put_fat+0x13e>
 8013628:	2b03      	cmp	r3, #3
 801362a:	f000 80b0 	beq.w	801378e <put_fat+0x194>
 801362e:	2b01      	cmp	r3, #1
 8013630:	f040 80f5 	bne.w	801381e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	61bb      	str	r3, [r7, #24]
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	085b      	lsrs	r3, r3, #1
 801363c:	69ba      	ldr	r2, [r7, #24]
 801363e:	4413      	add	r3, r2
 8013640:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	899b      	ldrh	r3, [r3, #12]
 801364a:	4619      	mov	r1, r3
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013652:	4413      	add	r3, r2
 8013654:	4619      	mov	r1, r3
 8013656:	68f8      	ldr	r0, [r7, #12]
 8013658:	f7ff fe42 	bl	80132e0 <move_window>
 801365c:	4603      	mov	r3, r0
 801365e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013660:	7ffb      	ldrb	r3, [r7, #31]
 8013662:	2b00      	cmp	r3, #0
 8013664:	f040 80d4 	bne.w	8013810 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	1c5a      	adds	r2, r3, #1
 8013672:	61ba      	str	r2, [r7, #24]
 8013674:	68fa      	ldr	r2, [r7, #12]
 8013676:	8992      	ldrh	r2, [r2, #12]
 8013678:	fbb3 f0f2 	udiv	r0, r3, r2
 801367c:	fb02 f200 	mul.w	r2, r2, r0
 8013680:	1a9b      	subs	r3, r3, r2
 8013682:	440b      	add	r3, r1
 8013684:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	f003 0301 	and.w	r3, r3, #1
 801368c:	2b00      	cmp	r3, #0
 801368e:	d00d      	beq.n	80136ac <put_fat+0xb2>
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	b25b      	sxtb	r3, r3
 8013696:	f003 030f 	and.w	r3, r3, #15
 801369a:	b25a      	sxtb	r2, r3
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	011b      	lsls	r3, r3, #4
 80136a2:	b25b      	sxtb	r3, r3
 80136a4:	4313      	orrs	r3, r2
 80136a6:	b25b      	sxtb	r3, r3
 80136a8:	b2db      	uxtb	r3, r3
 80136aa:	e001      	b.n	80136b0 <put_fat+0xb6>
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	697a      	ldr	r2, [r7, #20]
 80136b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	2201      	movs	r2, #1
 80136b8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	899b      	ldrh	r3, [r3, #12]
 80136c2:	4619      	mov	r1, r3
 80136c4:	69bb      	ldr	r3, [r7, #24]
 80136c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80136ca:	4413      	add	r3, r2
 80136cc:	4619      	mov	r1, r3
 80136ce:	68f8      	ldr	r0, [r7, #12]
 80136d0:	f7ff fe06 	bl	80132e0 <move_window>
 80136d4:	4603      	mov	r3, r0
 80136d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80136d8:	7ffb      	ldrb	r3, [r7, #31]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	f040 809a 	bne.w	8013814 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	899b      	ldrh	r3, [r3, #12]
 80136ea:	461a      	mov	r2, r3
 80136ec:	69bb      	ldr	r3, [r7, #24]
 80136ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80136f2:	fb02 f200 	mul.w	r2, r2, r0
 80136f6:	1a9b      	subs	r3, r3, r2
 80136f8:	440b      	add	r3, r1
 80136fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	f003 0301 	and.w	r3, r3, #1
 8013702:	2b00      	cmp	r3, #0
 8013704:	d003      	beq.n	801370e <put_fat+0x114>
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	091b      	lsrs	r3, r3, #4
 801370a:	b2db      	uxtb	r3, r3
 801370c:	e00e      	b.n	801372c <put_fat+0x132>
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	b25b      	sxtb	r3, r3
 8013714:	f023 030f 	bic.w	r3, r3, #15
 8013718:	b25a      	sxtb	r2, r3
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	0a1b      	lsrs	r3, r3, #8
 801371e:	b25b      	sxtb	r3, r3
 8013720:	f003 030f 	and.w	r3, r3, #15
 8013724:	b25b      	sxtb	r3, r3
 8013726:	4313      	orrs	r3, r2
 8013728:	b25b      	sxtb	r3, r3
 801372a:	b2db      	uxtb	r3, r3
 801372c:	697a      	ldr	r2, [r7, #20]
 801372e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	2201      	movs	r2, #1
 8013734:	70da      	strb	r2, [r3, #3]
			break;
 8013736:	e072      	b.n	801381e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	899b      	ldrh	r3, [r3, #12]
 8013740:	085b      	lsrs	r3, r3, #1
 8013742:	b29b      	uxth	r3, r3
 8013744:	4619      	mov	r1, r3
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	fbb3 f3f1 	udiv	r3, r3, r1
 801374c:	4413      	add	r3, r2
 801374e:	4619      	mov	r1, r3
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	f7ff fdc5 	bl	80132e0 <move_window>
 8013756:	4603      	mov	r3, r0
 8013758:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801375a:	7ffb      	ldrb	r3, [r7, #31]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d15b      	bne.n	8013818 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	005b      	lsls	r3, r3, #1
 801376a:	68fa      	ldr	r2, [r7, #12]
 801376c:	8992      	ldrh	r2, [r2, #12]
 801376e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013772:	fb02 f200 	mul.w	r2, r2, r0
 8013776:	1a9b      	subs	r3, r3, r2
 8013778:	440b      	add	r3, r1
 801377a:	687a      	ldr	r2, [r7, #4]
 801377c:	b292      	uxth	r2, r2
 801377e:	4611      	mov	r1, r2
 8013780:	4618      	mov	r0, r3
 8013782:	f7ff fb38 	bl	8012df6 <st_word>
			fs->wflag = 1;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	2201      	movs	r2, #1
 801378a:	70da      	strb	r2, [r3, #3]
			break;
 801378c:	e047      	b.n	801381e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	899b      	ldrh	r3, [r3, #12]
 8013796:	089b      	lsrs	r3, r3, #2
 8013798:	b29b      	uxth	r3, r3
 801379a:	4619      	mov	r1, r3
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	fbb3 f3f1 	udiv	r3, r3, r1
 80137a2:	4413      	add	r3, r2
 80137a4:	4619      	mov	r1, r3
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	f7ff fd9a 	bl	80132e0 <move_window>
 80137ac:	4603      	mov	r3, r0
 80137ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80137b0:	7ffb      	ldrb	r3, [r7, #31]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d132      	bne.n	801381c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	009b      	lsls	r3, r3, #2
 80137c6:	68fa      	ldr	r2, [r7, #12]
 80137c8:	8992      	ldrh	r2, [r2, #12]
 80137ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80137ce:	fb02 f200 	mul.w	r2, r2, r0
 80137d2:	1a9b      	subs	r3, r3, r2
 80137d4:	440b      	add	r3, r1
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7ff faea 	bl	8012db0 <ld_dword>
 80137dc:	4603      	mov	r3, r0
 80137de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80137e2:	4323      	orrs	r3, r4
 80137e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	009b      	lsls	r3, r3, #2
 80137f0:	68fa      	ldr	r2, [r7, #12]
 80137f2:	8992      	ldrh	r2, [r2, #12]
 80137f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80137f8:	fb02 f200 	mul.w	r2, r2, r0
 80137fc:	1a9b      	subs	r3, r3, r2
 80137fe:	440b      	add	r3, r1
 8013800:	6879      	ldr	r1, [r7, #4]
 8013802:	4618      	mov	r0, r3
 8013804:	f7ff fb12 	bl	8012e2c <st_dword>
			fs->wflag = 1;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2201      	movs	r2, #1
 801380c:	70da      	strb	r2, [r3, #3]
			break;
 801380e:	e006      	b.n	801381e <put_fat+0x224>
			if (res != FR_OK) break;
 8013810:	bf00      	nop
 8013812:	e004      	b.n	801381e <put_fat+0x224>
			if (res != FR_OK) break;
 8013814:	bf00      	nop
 8013816:	e002      	b.n	801381e <put_fat+0x224>
			if (res != FR_OK) break;
 8013818:	bf00      	nop
 801381a:	e000      	b.n	801381e <put_fat+0x224>
			if (res != FR_OK) break;
 801381c:	bf00      	nop
		}
	}
	return res;
 801381e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013820:	4618      	mov	r0, r3
 8013822:	3724      	adds	r7, #36	; 0x24
 8013824:	46bd      	mov	sp, r7
 8013826:	bd90      	pop	{r4, r7, pc}

08013828 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b088      	sub	sp, #32
 801382c:	af00      	add	r7, sp, #0
 801382e:	60f8      	str	r0, [r7, #12]
 8013830:	60b9      	str	r1, [r7, #8]
 8013832:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013834:	2300      	movs	r3, #0
 8013836:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	2b01      	cmp	r3, #1
 8013842:	d904      	bls.n	801384e <remove_chain+0x26>
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	69db      	ldr	r3, [r3, #28]
 8013848:	68ba      	ldr	r2, [r7, #8]
 801384a:	429a      	cmp	r2, r3
 801384c:	d301      	bcc.n	8013852 <remove_chain+0x2a>
 801384e:	2302      	movs	r3, #2
 8013850:	e04b      	b.n	80138ea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00c      	beq.n	8013872 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013858:	f04f 32ff 	mov.w	r2, #4294967295
 801385c:	6879      	ldr	r1, [r7, #4]
 801385e:	69b8      	ldr	r0, [r7, #24]
 8013860:	f7ff fecb 	bl	80135fa <put_fat>
 8013864:	4603      	mov	r3, r0
 8013866:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013868:	7ffb      	ldrb	r3, [r7, #31]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d001      	beq.n	8013872 <remove_chain+0x4a>
 801386e:	7ffb      	ldrb	r3, [r7, #31]
 8013870:	e03b      	b.n	80138ea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013872:	68b9      	ldr	r1, [r7, #8]
 8013874:	68f8      	ldr	r0, [r7, #12]
 8013876:	f7ff fdf0 	bl	801345a <get_fat>
 801387a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d031      	beq.n	80138e6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	2b01      	cmp	r3, #1
 8013886:	d101      	bne.n	801388c <remove_chain+0x64>
 8013888:	2302      	movs	r3, #2
 801388a:	e02e      	b.n	80138ea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013892:	d101      	bne.n	8013898 <remove_chain+0x70>
 8013894:	2301      	movs	r3, #1
 8013896:	e028      	b.n	80138ea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013898:	2200      	movs	r2, #0
 801389a:	68b9      	ldr	r1, [r7, #8]
 801389c:	69b8      	ldr	r0, [r7, #24]
 801389e:	f7ff feac 	bl	80135fa <put_fat>
 80138a2:	4603      	mov	r3, r0
 80138a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80138a6:	7ffb      	ldrb	r3, [r7, #31]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d001      	beq.n	80138b0 <remove_chain+0x88>
 80138ac:	7ffb      	ldrb	r3, [r7, #31]
 80138ae:	e01c      	b.n	80138ea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	695a      	ldr	r2, [r3, #20]
 80138b4:	69bb      	ldr	r3, [r7, #24]
 80138b6:	69db      	ldr	r3, [r3, #28]
 80138b8:	3b02      	subs	r3, #2
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d20b      	bcs.n	80138d6 <remove_chain+0xae>
			fs->free_clst++;
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	695b      	ldr	r3, [r3, #20]
 80138c2:	1c5a      	adds	r2, r3, #1
 80138c4:	69bb      	ldr	r3, [r7, #24]
 80138c6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	791b      	ldrb	r3, [r3, #4]
 80138cc:	f043 0301 	orr.w	r3, r3, #1
 80138d0:	b2da      	uxtb	r2, r3
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	69db      	ldr	r3, [r3, #28]
 80138de:	68ba      	ldr	r2, [r7, #8]
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d3c6      	bcc.n	8013872 <remove_chain+0x4a>
 80138e4:	e000      	b.n	80138e8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80138e6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80138e8:	2300      	movs	r3, #0
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3720      	adds	r7, #32
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}

080138f2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80138f2:	b580      	push	{r7, lr}
 80138f4:	b088      	sub	sp, #32
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
 80138fa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d10d      	bne.n	8013924 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	691b      	ldr	r3, [r3, #16]
 801390c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801390e:	69bb      	ldr	r3, [r7, #24]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d004      	beq.n	801391e <create_chain+0x2c>
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	69db      	ldr	r3, [r3, #28]
 8013918:	69ba      	ldr	r2, [r7, #24]
 801391a:	429a      	cmp	r2, r3
 801391c:	d31b      	bcc.n	8013956 <create_chain+0x64>
 801391e:	2301      	movs	r3, #1
 8013920:	61bb      	str	r3, [r7, #24]
 8013922:	e018      	b.n	8013956 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013924:	6839      	ldr	r1, [r7, #0]
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f7ff fd97 	bl	801345a <get_fat>
 801392c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2b01      	cmp	r3, #1
 8013932:	d801      	bhi.n	8013938 <create_chain+0x46>
 8013934:	2301      	movs	r3, #1
 8013936:	e070      	b.n	8013a1a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801393e:	d101      	bne.n	8013944 <create_chain+0x52>
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	e06a      	b.n	8013a1a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	69db      	ldr	r3, [r3, #28]
 8013948:	68fa      	ldr	r2, [r7, #12]
 801394a:	429a      	cmp	r2, r3
 801394c:	d201      	bcs.n	8013952 <create_chain+0x60>
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	e063      	b.n	8013a1a <create_chain+0x128>
		scl = clst;
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013956:	69bb      	ldr	r3, [r7, #24]
 8013958:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	3301      	adds	r3, #1
 801395e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	69db      	ldr	r3, [r3, #28]
 8013964:	69fa      	ldr	r2, [r7, #28]
 8013966:	429a      	cmp	r2, r3
 8013968:	d307      	bcc.n	801397a <create_chain+0x88>
				ncl = 2;
 801396a:	2302      	movs	r3, #2
 801396c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801396e:	69fa      	ldr	r2, [r7, #28]
 8013970:	69bb      	ldr	r3, [r7, #24]
 8013972:	429a      	cmp	r2, r3
 8013974:	d901      	bls.n	801397a <create_chain+0x88>
 8013976:	2300      	movs	r3, #0
 8013978:	e04f      	b.n	8013a1a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801397a:	69f9      	ldr	r1, [r7, #28]
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f7ff fd6c 	bl	801345a <get_fat>
 8013982:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00e      	beq.n	80139a8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	2b01      	cmp	r3, #1
 801398e:	d003      	beq.n	8013998 <create_chain+0xa6>
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013996:	d101      	bne.n	801399c <create_chain+0xaa>
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	e03e      	b.n	8013a1a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801399c:	69fa      	ldr	r2, [r7, #28]
 801399e:	69bb      	ldr	r3, [r7, #24]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d1da      	bne.n	801395a <create_chain+0x68>
 80139a4:	2300      	movs	r3, #0
 80139a6:	e038      	b.n	8013a1a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80139a8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80139aa:	f04f 32ff 	mov.w	r2, #4294967295
 80139ae:	69f9      	ldr	r1, [r7, #28]
 80139b0:	6938      	ldr	r0, [r7, #16]
 80139b2:	f7ff fe22 	bl	80135fa <put_fat>
 80139b6:	4603      	mov	r3, r0
 80139b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80139ba:	7dfb      	ldrb	r3, [r7, #23]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d109      	bne.n	80139d4 <create_chain+0xe2>
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d006      	beq.n	80139d4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80139c6:	69fa      	ldr	r2, [r7, #28]
 80139c8:	6839      	ldr	r1, [r7, #0]
 80139ca:	6938      	ldr	r0, [r7, #16]
 80139cc:	f7ff fe15 	bl	80135fa <put_fat>
 80139d0:	4603      	mov	r3, r0
 80139d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80139d4:	7dfb      	ldrb	r3, [r7, #23]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d116      	bne.n	8013a08 <create_chain+0x116>
		fs->last_clst = ncl;
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	69fa      	ldr	r2, [r7, #28]
 80139de:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	695a      	ldr	r2, [r3, #20]
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	69db      	ldr	r3, [r3, #28]
 80139e8:	3b02      	subs	r3, #2
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d804      	bhi.n	80139f8 <create_chain+0x106>
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	695b      	ldr	r3, [r3, #20]
 80139f2:	1e5a      	subs	r2, r3, #1
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	791b      	ldrb	r3, [r3, #4]
 80139fc:	f043 0301 	orr.w	r3, r3, #1
 8013a00:	b2da      	uxtb	r2, r3
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	711a      	strb	r2, [r3, #4]
 8013a06:	e007      	b.n	8013a18 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013a08:	7dfb      	ldrb	r3, [r7, #23]
 8013a0a:	2b01      	cmp	r3, #1
 8013a0c:	d102      	bne.n	8013a14 <create_chain+0x122>
 8013a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8013a12:	e000      	b.n	8013a16 <create_chain+0x124>
 8013a14:	2301      	movs	r3, #1
 8013a16:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013a18:	69fb      	ldr	r3, [r7, #28]
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3720      	adds	r7, #32
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}

08013a22 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013a22:	b480      	push	{r7}
 8013a24:	b087      	sub	sp, #28
 8013a26:	af00      	add	r7, sp, #0
 8013a28:	6078      	str	r0, [r7, #4]
 8013a2a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a36:	3304      	adds	r3, #4
 8013a38:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	899b      	ldrh	r3, [r3, #12]
 8013a3e:	461a      	mov	r2, r3
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a46:	68fa      	ldr	r2, [r7, #12]
 8013a48:	8952      	ldrh	r2, [r2, #10]
 8013a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a4e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	1d1a      	adds	r2, r3, #4
 8013a54:	613a      	str	r2, [r7, #16]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013a5a:	68bb      	ldr	r3, [r7, #8]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d101      	bne.n	8013a64 <clmt_clust+0x42>
 8013a60:	2300      	movs	r3, #0
 8013a62:	e010      	b.n	8013a86 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8013a64:	697a      	ldr	r2, [r7, #20]
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d307      	bcc.n	8013a7c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8013a6c:	697a      	ldr	r2, [r7, #20]
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	1ad3      	subs	r3, r2, r3
 8013a72:	617b      	str	r3, [r7, #20]
 8013a74:	693b      	ldr	r3, [r7, #16]
 8013a76:	3304      	adds	r3, #4
 8013a78:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013a7a:	e7e9      	b.n	8013a50 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8013a7c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	681a      	ldr	r2, [r3, #0]
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	4413      	add	r3, r2
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	371c      	adds	r7, #28
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a90:	4770      	bx	lr

08013a92 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013a92:	b580      	push	{r7, lr}
 8013a94:	b086      	sub	sp, #24
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	6078      	str	r0, [r7, #4]
 8013a9a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013aa8:	d204      	bcs.n	8013ab4 <dir_sdi+0x22>
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	f003 031f 	and.w	r3, r3, #31
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d001      	beq.n	8013ab8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013ab4:	2302      	movs	r3, #2
 8013ab6:	e071      	b.n	8013b9c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	683a      	ldr	r2, [r7, #0]
 8013abc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	689b      	ldr	r3, [r3, #8]
 8013ac2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d106      	bne.n	8013ad8 <dir_sdi+0x46>
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	2b02      	cmp	r3, #2
 8013ad0:	d902      	bls.n	8013ad8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d10c      	bne.n	8013af8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	095b      	lsrs	r3, r3, #5
 8013ae2:	693a      	ldr	r2, [r7, #16]
 8013ae4:	8912      	ldrh	r2, [r2, #8]
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	d301      	bcc.n	8013aee <dir_sdi+0x5c>
 8013aea:	2302      	movs	r3, #2
 8013aec:	e056      	b.n	8013b9c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8013aee:	693b      	ldr	r3, [r7, #16]
 8013af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	61da      	str	r2, [r3, #28]
 8013af6:	e02d      	b.n	8013b54 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	895b      	ldrh	r3, [r3, #10]
 8013afc:	461a      	mov	r2, r3
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	899b      	ldrh	r3, [r3, #12]
 8013b02:	fb03 f302 	mul.w	r3, r3, r2
 8013b06:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013b08:	e019      	b.n	8013b3e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6979      	ldr	r1, [r7, #20]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7ff fca3 	bl	801345a <get_fat>
 8013b14:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b1c:	d101      	bne.n	8013b22 <dir_sdi+0x90>
 8013b1e:	2301      	movs	r3, #1
 8013b20:	e03c      	b.n	8013b9c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	d904      	bls.n	8013b32 <dir_sdi+0xa0>
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	69db      	ldr	r3, [r3, #28]
 8013b2c:	697a      	ldr	r2, [r7, #20]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d301      	bcc.n	8013b36 <dir_sdi+0xa4>
 8013b32:	2302      	movs	r3, #2
 8013b34:	e032      	b.n	8013b9c <dir_sdi+0x10a>
			ofs -= csz;
 8013b36:	683a      	ldr	r2, [r7, #0]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	1ad3      	subs	r3, r2, r3
 8013b3c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013b3e:	683a      	ldr	r2, [r7, #0]
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d2e1      	bcs.n	8013b0a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8013b46:	6979      	ldr	r1, [r7, #20]
 8013b48:	6938      	ldr	r0, [r7, #16]
 8013b4a:	f7ff fc67 	bl	801341c <clust2sect>
 8013b4e:	4602      	mov	r2, r0
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	697a      	ldr	r2, [r7, #20]
 8013b58:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	69db      	ldr	r3, [r3, #28]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d101      	bne.n	8013b66 <dir_sdi+0xd4>
 8013b62:	2302      	movs	r3, #2
 8013b64:	e01a      	b.n	8013b9c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	69da      	ldr	r2, [r3, #28]
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	899b      	ldrh	r3, [r3, #12]
 8013b6e:	4619      	mov	r1, r3
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b76:	441a      	add	r2, r3
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013b82:	693b      	ldr	r3, [r7, #16]
 8013b84:	899b      	ldrh	r3, [r3, #12]
 8013b86:	461a      	mov	r2, r3
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8013b8e:	fb02 f200 	mul.w	r2, r2, r0
 8013b92:	1a9b      	subs	r3, r3, r2
 8013b94:	18ca      	adds	r2, r1, r3
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013b9a:	2300      	movs	r3, #0
}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	3718      	adds	r7, #24
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	695b      	ldr	r3, [r3, #20]
 8013bb8:	3320      	adds	r3, #32
 8013bba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	69db      	ldr	r3, [r3, #28]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d003      	beq.n	8013bcc <dir_next+0x28>
 8013bc4:	68bb      	ldr	r3, [r7, #8]
 8013bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013bca:	d301      	bcc.n	8013bd0 <dir_next+0x2c>
 8013bcc:	2304      	movs	r3, #4
 8013bce:	e0bb      	b.n	8013d48 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	899b      	ldrh	r3, [r3, #12]
 8013bd4:	461a      	mov	r2, r3
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bdc:	fb02 f201 	mul.w	r2, r2, r1
 8013be0:	1a9b      	subs	r3, r3, r2
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	f040 809d 	bne.w	8013d22 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	69db      	ldr	r3, [r3, #28]
 8013bec:	1c5a      	adds	r2, r3, #1
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	699b      	ldr	r3, [r3, #24]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d10b      	bne.n	8013c12 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	095b      	lsrs	r3, r3, #5
 8013bfe:	68fa      	ldr	r2, [r7, #12]
 8013c00:	8912      	ldrh	r2, [r2, #8]
 8013c02:	4293      	cmp	r3, r2
 8013c04:	f0c0 808d 	bcc.w	8013d22 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	61da      	str	r2, [r3, #28]
 8013c0e:	2304      	movs	r3, #4
 8013c10:	e09a      	b.n	8013d48 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	899b      	ldrh	r3, [r3, #12]
 8013c16:	461a      	mov	r2, r3
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c1e:	68fa      	ldr	r2, [r7, #12]
 8013c20:	8952      	ldrh	r2, [r2, #10]
 8013c22:	3a01      	subs	r2, #1
 8013c24:	4013      	ands	r3, r2
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d17b      	bne.n	8013d22 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013c2a:	687a      	ldr	r2, [r7, #4]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	699b      	ldr	r3, [r3, #24]
 8013c30:	4619      	mov	r1, r3
 8013c32:	4610      	mov	r0, r2
 8013c34:	f7ff fc11 	bl	801345a <get_fat>
 8013c38:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	2b01      	cmp	r3, #1
 8013c3e:	d801      	bhi.n	8013c44 <dir_next+0xa0>
 8013c40:	2302      	movs	r3, #2
 8013c42:	e081      	b.n	8013d48 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c4a:	d101      	bne.n	8013c50 <dir_next+0xac>
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	e07b      	b.n	8013d48 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	69db      	ldr	r3, [r3, #28]
 8013c54:	697a      	ldr	r2, [r7, #20]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d359      	bcc.n	8013d0e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d104      	bne.n	8013c6a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2200      	movs	r2, #0
 8013c64:	61da      	str	r2, [r3, #28]
 8013c66:	2304      	movs	r3, #4
 8013c68:	e06e      	b.n	8013d48 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013c6a:	687a      	ldr	r2, [r7, #4]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	699b      	ldr	r3, [r3, #24]
 8013c70:	4619      	mov	r1, r3
 8013c72:	4610      	mov	r0, r2
 8013c74:	f7ff fe3d 	bl	80138f2 <create_chain>
 8013c78:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013c7a:	697b      	ldr	r3, [r7, #20]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d101      	bne.n	8013c84 <dir_next+0xe0>
 8013c80:	2307      	movs	r3, #7
 8013c82:	e061      	b.n	8013d48 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	2b01      	cmp	r3, #1
 8013c88:	d101      	bne.n	8013c8e <dir_next+0xea>
 8013c8a:	2302      	movs	r3, #2
 8013c8c:	e05c      	b.n	8013d48 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c94:	d101      	bne.n	8013c9a <dir_next+0xf6>
 8013c96:	2301      	movs	r3, #1
 8013c98:	e056      	b.n	8013d48 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013c9a:	68f8      	ldr	r0, [r7, #12]
 8013c9c:	f7ff fadc 	bl	8013258 <sync_window>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d001      	beq.n	8013caa <dir_next+0x106>
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	e04e      	b.n	8013d48 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	899b      	ldrh	r3, [r3, #12]
 8013cb4:	461a      	mov	r2, r3
 8013cb6:	2100      	movs	r1, #0
 8013cb8:	f7ff f905 	bl	8012ec6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	613b      	str	r3, [r7, #16]
 8013cc0:	6979      	ldr	r1, [r7, #20]
 8013cc2:	68f8      	ldr	r0, [r7, #12]
 8013cc4:	f7ff fbaa 	bl	801341c <clust2sect>
 8013cc8:	4602      	mov	r2, r0
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8013cce:	e012      	b.n	8013cf6 <dir_next+0x152>
						fs->wflag = 1;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	f7ff fabe 	bl	8013258 <sync_window>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d001      	beq.n	8013ce6 <dir_next+0x142>
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	e030      	b.n	8013d48 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013ce6:	693b      	ldr	r3, [r7, #16]
 8013ce8:	3301      	adds	r3, #1
 8013cea:	613b      	str	r3, [r7, #16]
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013cf0:	1c5a      	adds	r2, r3, #1
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	895b      	ldrh	r3, [r3, #10]
 8013cfa:	461a      	mov	r2, r3
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	d3e6      	bcc.n	8013cd0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	1ad2      	subs	r2, r2, r3
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	697a      	ldr	r2, [r7, #20]
 8013d12:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013d14:	6979      	ldr	r1, [r7, #20]
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	f7ff fb80 	bl	801341c <clust2sect>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	68ba      	ldr	r2, [r7, #8]
 8013d26:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	899b      	ldrh	r3, [r3, #12]
 8013d32:	461a      	mov	r2, r3
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d3a:	fb02 f200 	mul.w	r2, r2, r0
 8013d3e:	1a9b      	subs	r3, r3, r2
 8013d40:	18ca      	adds	r2, r1, r3
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013d46:	2300      	movs	r3, #0
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3718      	adds	r7, #24
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	bd80      	pop	{r7, pc}

08013d50 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b086      	sub	sp, #24
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013d60:	2100      	movs	r1, #0
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f7ff fe95 	bl	8013a92 <dir_sdi>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013d6c:	7dfb      	ldrb	r3, [r7, #23]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d12b      	bne.n	8013dca <dir_alloc+0x7a>
		n = 0;
 8013d72:	2300      	movs	r3, #0
 8013d74:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	69db      	ldr	r3, [r3, #28]
 8013d7a:	4619      	mov	r1, r3
 8013d7c:	68f8      	ldr	r0, [r7, #12]
 8013d7e:	f7ff faaf 	bl	80132e0 <move_window>
 8013d82:	4603      	mov	r3, r0
 8013d84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013d86:	7dfb      	ldrb	r3, [r7, #23]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d11d      	bne.n	8013dc8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	6a1b      	ldr	r3, [r3, #32]
 8013d90:	781b      	ldrb	r3, [r3, #0]
 8013d92:	2be5      	cmp	r3, #229	; 0xe5
 8013d94:	d004      	beq.n	8013da0 <dir_alloc+0x50>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6a1b      	ldr	r3, [r3, #32]
 8013d9a:	781b      	ldrb	r3, [r3, #0]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d107      	bne.n	8013db0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	3301      	adds	r3, #1
 8013da4:	613b      	str	r3, [r7, #16]
 8013da6:	693a      	ldr	r2, [r7, #16]
 8013da8:	683b      	ldr	r3, [r7, #0]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d102      	bne.n	8013db4 <dir_alloc+0x64>
 8013dae:	e00c      	b.n	8013dca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013db0:	2300      	movs	r3, #0
 8013db2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013db4:	2101      	movs	r1, #1
 8013db6:	6878      	ldr	r0, [r7, #4]
 8013db8:	f7ff fef4 	bl	8013ba4 <dir_next>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013dc0:	7dfb      	ldrb	r3, [r7, #23]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d0d7      	beq.n	8013d76 <dir_alloc+0x26>
 8013dc6:	e000      	b.n	8013dca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013dc8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013dca:	7dfb      	ldrb	r3, [r7, #23]
 8013dcc:	2b04      	cmp	r3, #4
 8013dce:	d101      	bne.n	8013dd4 <dir_alloc+0x84>
 8013dd0:	2307      	movs	r3, #7
 8013dd2:	75fb      	strb	r3, [r7, #23]
	return res;
 8013dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3718      	adds	r7, #24
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b084      	sub	sp, #16
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
 8013de6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	331a      	adds	r3, #26
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7fe ffc7 	bl	8012d80 <ld_word>
 8013df2:	4603      	mov	r3, r0
 8013df4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	2b03      	cmp	r3, #3
 8013dfc:	d109      	bne.n	8013e12 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	3314      	adds	r3, #20
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fe ffbc 	bl	8012d80 <ld_word>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	041b      	lsls	r3, r3, #16
 8013e0c:	68fa      	ldr	r2, [r7, #12]
 8013e0e:	4313      	orrs	r3, r2
 8013e10:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013e12:	68fb      	ldr	r3, [r7, #12]
}
 8013e14:	4618      	mov	r0, r3
 8013e16:	3710      	adds	r7, #16
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}

08013e1c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	331a      	adds	r3, #26
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	b292      	uxth	r2, r2
 8013e30:	4611      	mov	r1, r2
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7fe ffdf 	bl	8012df6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	2b03      	cmp	r3, #3
 8013e3e:	d109      	bne.n	8013e54 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013e40:	68bb      	ldr	r3, [r7, #8]
 8013e42:	f103 0214 	add.w	r2, r3, #20
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	0c1b      	lsrs	r3, r3, #16
 8013e4a:	b29b      	uxth	r3, r3
 8013e4c:	4619      	mov	r1, r3
 8013e4e:	4610      	mov	r0, r2
 8013e50:	f7fe ffd1 	bl	8012df6 <st_word>
	}
}
 8013e54:	bf00      	nop
 8013e56:	3710      	adds	r7, #16
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b086      	sub	sp, #24
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013e66:	2304      	movs	r3, #4
 8013e68:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8013e70:	e03c      	b.n	8013eec <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	69db      	ldr	r3, [r3, #28]
 8013e76:	4619      	mov	r1, r3
 8013e78:	6938      	ldr	r0, [r7, #16]
 8013e7a:	f7ff fa31 	bl	80132e0 <move_window>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013e82:	7dfb      	ldrb	r3, [r7, #23]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d136      	bne.n	8013ef6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6a1b      	ldr	r3, [r3, #32]
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013e90:	7bfb      	ldrb	r3, [r7, #15]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d102      	bne.n	8013e9c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013e96:	2304      	movs	r3, #4
 8013e98:	75fb      	strb	r3, [r7, #23]
 8013e9a:	e031      	b.n	8013f00 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6a1b      	ldr	r3, [r3, #32]
 8013ea0:	330b      	adds	r3, #11
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ea8:	73bb      	strb	r3, [r7, #14]
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	7bba      	ldrb	r2, [r7, #14]
 8013eae:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8013eb0:	7bfb      	ldrb	r3, [r7, #15]
 8013eb2:	2be5      	cmp	r3, #229	; 0xe5
 8013eb4:	d011      	beq.n	8013eda <dir_read+0x7e>
 8013eb6:	7bfb      	ldrb	r3, [r7, #15]
 8013eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8013eba:	d00e      	beq.n	8013eda <dir_read+0x7e>
 8013ebc:	7bbb      	ldrb	r3, [r7, #14]
 8013ebe:	2b0f      	cmp	r3, #15
 8013ec0:	d00b      	beq.n	8013eda <dir_read+0x7e>
 8013ec2:	7bbb      	ldrb	r3, [r7, #14]
 8013ec4:	f023 0320 	bic.w	r3, r3, #32
 8013ec8:	2b08      	cmp	r3, #8
 8013eca:	bf0c      	ite	eq
 8013ecc:	2301      	moveq	r3, #1
 8013ece:	2300      	movne	r3, #0
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	4293      	cmp	r3, r2
 8013ed8:	d00f      	beq.n	8013efa <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013eda:	2100      	movs	r1, #0
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f7ff fe61 	bl	8013ba4 <dir_next>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013ee6:	7dfb      	ldrb	r3, [r7, #23]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d108      	bne.n	8013efe <dir_read+0xa2>
	while (dp->sect) {
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	69db      	ldr	r3, [r3, #28]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d1be      	bne.n	8013e72 <dir_read+0x16>
 8013ef4:	e004      	b.n	8013f00 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013ef6:	bf00      	nop
 8013ef8:	e002      	b.n	8013f00 <dir_read+0xa4>
				break;
 8013efa:	bf00      	nop
 8013efc:	e000      	b.n	8013f00 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013efe:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013f00:	7dfb      	ldrb	r3, [r7, #23]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d002      	beq.n	8013f0c <dir_read+0xb0>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	61da      	str	r2, [r3, #28]
	return res;
 8013f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	3718      	adds	r7, #24
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}

08013f16 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013f16:	b580      	push	{r7, lr}
 8013f18:	b086      	sub	sp, #24
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013f24:	2100      	movs	r1, #0
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f7ff fdb3 	bl	8013a92 <dir_sdi>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013f30:	7dfb      	ldrb	r3, [r7, #23]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d001      	beq.n	8013f3a <dir_find+0x24>
 8013f36:	7dfb      	ldrb	r3, [r7, #23]
 8013f38:	e03e      	b.n	8013fb8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	69db      	ldr	r3, [r3, #28]
 8013f3e:	4619      	mov	r1, r3
 8013f40:	6938      	ldr	r0, [r7, #16]
 8013f42:	f7ff f9cd 	bl	80132e0 <move_window>
 8013f46:	4603      	mov	r3, r0
 8013f48:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013f4a:	7dfb      	ldrb	r3, [r7, #23]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d12f      	bne.n	8013fb0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6a1b      	ldr	r3, [r3, #32]
 8013f54:	781b      	ldrb	r3, [r3, #0]
 8013f56:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013f58:	7bfb      	ldrb	r3, [r7, #15]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d102      	bne.n	8013f64 <dir_find+0x4e>
 8013f5e:	2304      	movs	r3, #4
 8013f60:	75fb      	strb	r3, [r7, #23]
 8013f62:	e028      	b.n	8013fb6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6a1b      	ldr	r3, [r3, #32]
 8013f68:	330b      	adds	r3, #11
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f70:	b2da      	uxtb	r2, r3
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6a1b      	ldr	r3, [r3, #32]
 8013f7a:	330b      	adds	r3, #11
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	f003 0308 	and.w	r3, r3, #8
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d10a      	bne.n	8013f9c <dir_find+0x86>
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6a18      	ldr	r0, [r3, #32]
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	3324      	adds	r3, #36	; 0x24
 8013f8e:	220b      	movs	r2, #11
 8013f90:	4619      	mov	r1, r3
 8013f92:	f7fe ffb2 	bl	8012efa <mem_cmp>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d00b      	beq.n	8013fb4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013f9c:	2100      	movs	r1, #0
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f7ff fe00 	bl	8013ba4 <dir_next>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013fa8:	7dfb      	ldrb	r3, [r7, #23]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d0c5      	beq.n	8013f3a <dir_find+0x24>
 8013fae:	e002      	b.n	8013fb6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013fb0:	bf00      	nop
 8013fb2:	e000      	b.n	8013fb6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013fb4:	bf00      	nop

	return res;
 8013fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	3718      	adds	r7, #24
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}

08013fc0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013fce:	2101      	movs	r1, #1
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f7ff febd 	bl	8013d50 <dir_alloc>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013fda:	7bfb      	ldrb	r3, [r7, #15]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d11c      	bne.n	801401a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	69db      	ldr	r3, [r3, #28]
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	68b8      	ldr	r0, [r7, #8]
 8013fe8:	f7ff f97a 	bl	80132e0 <move_window>
 8013fec:	4603      	mov	r3, r0
 8013fee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013ff0:	7bfb      	ldrb	r3, [r7, #15]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d111      	bne.n	801401a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6a1b      	ldr	r3, [r3, #32]
 8013ffa:	2220      	movs	r2, #32
 8013ffc:	2100      	movs	r1, #0
 8013ffe:	4618      	mov	r0, r3
 8014000:	f7fe ff61 	bl	8012ec6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6a18      	ldr	r0, [r3, #32]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	3324      	adds	r3, #36	; 0x24
 801400c:	220b      	movs	r2, #11
 801400e:	4619      	mov	r1, r3
 8014010:	f7fe ff38 	bl	8012e84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	2201      	movs	r2, #1
 8014018:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801401a:	7bfb      	ldrb	r3, [r7, #15]
}
 801401c:	4618      	mov	r0, r3
 801401e:	3710      	adds	r7, #16
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}

08014024 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b084      	sub	sp, #16
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	69db      	ldr	r3, [r3, #28]
 8014036:	4619      	mov	r1, r3
 8014038:	68f8      	ldr	r0, [r7, #12]
 801403a:	f7ff f951 	bl	80132e0 <move_window>
 801403e:	4603      	mov	r3, r0
 8014040:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8014042:	7afb      	ldrb	r3, [r7, #11]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d106      	bne.n	8014056 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6a1b      	ldr	r3, [r3, #32]
 801404c:	22e5      	movs	r2, #229	; 0xe5
 801404e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	2201      	movs	r2, #1
 8014054:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8014056:	7afb      	ldrb	r3, [r7, #11]
}
 8014058:	4618      	mov	r0, r3
 801405a:	3710      	adds	r7, #16
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}

08014060 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b088      	sub	sp, #32
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	60fb      	str	r3, [r7, #12]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	3324      	adds	r3, #36	; 0x24
 8014074:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8014076:	220b      	movs	r2, #11
 8014078:	2120      	movs	r1, #32
 801407a:	68b8      	ldr	r0, [r7, #8]
 801407c:	f7fe ff23 	bl	8012ec6 <mem_set>
	si = i = 0; ni = 8;
 8014080:	2300      	movs	r3, #0
 8014082:	613b      	str	r3, [r7, #16]
 8014084:	693b      	ldr	r3, [r7, #16]
 8014086:	617b      	str	r3, [r7, #20]
 8014088:	2308      	movs	r3, #8
 801408a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 801408c:	68fa      	ldr	r2, [r7, #12]
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	4413      	add	r3, r2
 8014092:	781b      	ldrb	r3, [r3, #0]
 8014094:	2b2e      	cmp	r3, #46	; 0x2e
 8014096:	d12f      	bne.n	80140f8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	1c5a      	adds	r2, r3, #1
 801409c:	617a      	str	r2, [r7, #20]
 801409e:	68fa      	ldr	r2, [r7, #12]
 80140a0:	4413      	add	r3, r2
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80140a6:	7ffb      	ldrb	r3, [r7, #31]
 80140a8:	2b2e      	cmp	r3, #46	; 0x2e
 80140aa:	d10a      	bne.n	80140c2 <create_name+0x62>
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	2b02      	cmp	r3, #2
 80140b0:	d807      	bhi.n	80140c2 <create_name+0x62>
			sfn[i++] = c;
 80140b2:	693b      	ldr	r3, [r7, #16]
 80140b4:	1c5a      	adds	r2, r3, #1
 80140b6:	613a      	str	r2, [r7, #16]
 80140b8:	68ba      	ldr	r2, [r7, #8]
 80140ba:	4413      	add	r3, r2
 80140bc:	7ffa      	ldrb	r2, [r7, #31]
 80140be:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80140c0:	e7ea      	b.n	8014098 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80140c2:	7ffb      	ldrb	r3, [r7, #31]
 80140c4:	2b2f      	cmp	r3, #47	; 0x2f
 80140c6:	d007      	beq.n	80140d8 <create_name+0x78>
 80140c8:	7ffb      	ldrb	r3, [r7, #31]
 80140ca:	2b5c      	cmp	r3, #92	; 0x5c
 80140cc:	d004      	beq.n	80140d8 <create_name+0x78>
 80140ce:	7ffb      	ldrb	r3, [r7, #31]
 80140d0:	2b20      	cmp	r3, #32
 80140d2:	d901      	bls.n	80140d8 <create_name+0x78>
 80140d4:	2306      	movs	r3, #6
 80140d6:	e084      	b.n	80141e2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	441a      	add	r2, r3
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80140e2:	7ffb      	ldrb	r3, [r7, #31]
 80140e4:	2b20      	cmp	r3, #32
 80140e6:	d801      	bhi.n	80140ec <create_name+0x8c>
 80140e8:	2224      	movs	r2, #36	; 0x24
 80140ea:	e000      	b.n	80140ee <create_name+0x8e>
 80140ec:	2220      	movs	r2, #32
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	330b      	adds	r3, #11
 80140f2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80140f4:	2300      	movs	r3, #0
 80140f6:	e074      	b.n	80141e2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80140f8:	697b      	ldr	r3, [r7, #20]
 80140fa:	1c5a      	adds	r2, r3, #1
 80140fc:	617a      	str	r2, [r7, #20]
 80140fe:	68fa      	ldr	r2, [r7, #12]
 8014100:	4413      	add	r3, r2
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014106:	7ffb      	ldrb	r3, [r7, #31]
 8014108:	2b20      	cmp	r3, #32
 801410a:	d94e      	bls.n	80141aa <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801410c:	7ffb      	ldrb	r3, [r7, #31]
 801410e:	2b2f      	cmp	r3, #47	; 0x2f
 8014110:	d006      	beq.n	8014120 <create_name+0xc0>
 8014112:	7ffb      	ldrb	r3, [r7, #31]
 8014114:	2b5c      	cmp	r3, #92	; 0x5c
 8014116:	d110      	bne.n	801413a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014118:	e002      	b.n	8014120 <create_name+0xc0>
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	3301      	adds	r3, #1
 801411e:	617b      	str	r3, [r7, #20]
 8014120:	68fa      	ldr	r2, [r7, #12]
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	4413      	add	r3, r2
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	2b2f      	cmp	r3, #47	; 0x2f
 801412a:	d0f6      	beq.n	801411a <create_name+0xba>
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	4413      	add	r3, r2
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	2b5c      	cmp	r3, #92	; 0x5c
 8014136:	d0f0      	beq.n	801411a <create_name+0xba>
			break;
 8014138:	e038      	b.n	80141ac <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801413a:	7ffb      	ldrb	r3, [r7, #31]
 801413c:	2b2e      	cmp	r3, #46	; 0x2e
 801413e:	d003      	beq.n	8014148 <create_name+0xe8>
 8014140:	693a      	ldr	r2, [r7, #16]
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	429a      	cmp	r2, r3
 8014146:	d30c      	bcc.n	8014162 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014148:	69bb      	ldr	r3, [r7, #24]
 801414a:	2b0b      	cmp	r3, #11
 801414c:	d002      	beq.n	8014154 <create_name+0xf4>
 801414e:	7ffb      	ldrb	r3, [r7, #31]
 8014150:	2b2e      	cmp	r3, #46	; 0x2e
 8014152:	d001      	beq.n	8014158 <create_name+0xf8>
 8014154:	2306      	movs	r3, #6
 8014156:	e044      	b.n	80141e2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8014158:	2308      	movs	r3, #8
 801415a:	613b      	str	r3, [r7, #16]
 801415c:	230b      	movs	r3, #11
 801415e:	61bb      	str	r3, [r7, #24]
			continue;
 8014160:	e022      	b.n	80141a8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8014162:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014166:	2b00      	cmp	r3, #0
 8014168:	da04      	bge.n	8014174 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801416a:	7ffb      	ldrb	r3, [r7, #31]
 801416c:	3b80      	subs	r3, #128	; 0x80
 801416e:	4a1f      	ldr	r2, [pc, #124]	; (80141ec <create_name+0x18c>)
 8014170:	5cd3      	ldrb	r3, [r2, r3]
 8014172:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014174:	7ffb      	ldrb	r3, [r7, #31]
 8014176:	4619      	mov	r1, r3
 8014178:	481d      	ldr	r0, [pc, #116]	; (80141f0 <create_name+0x190>)
 801417a:	f7fe fee5 	bl	8012f48 <chk_chr>
 801417e:	4603      	mov	r3, r0
 8014180:	2b00      	cmp	r3, #0
 8014182:	d001      	beq.n	8014188 <create_name+0x128>
 8014184:	2306      	movs	r3, #6
 8014186:	e02c      	b.n	80141e2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014188:	7ffb      	ldrb	r3, [r7, #31]
 801418a:	2b60      	cmp	r3, #96	; 0x60
 801418c:	d905      	bls.n	801419a <create_name+0x13a>
 801418e:	7ffb      	ldrb	r3, [r7, #31]
 8014190:	2b7a      	cmp	r3, #122	; 0x7a
 8014192:	d802      	bhi.n	801419a <create_name+0x13a>
 8014194:	7ffb      	ldrb	r3, [r7, #31]
 8014196:	3b20      	subs	r3, #32
 8014198:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	1c5a      	adds	r2, r3, #1
 801419e:	613a      	str	r2, [r7, #16]
 80141a0:	68ba      	ldr	r2, [r7, #8]
 80141a2:	4413      	add	r3, r2
 80141a4:	7ffa      	ldrb	r2, [r7, #31]
 80141a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80141a8:	e7a6      	b.n	80140f8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80141aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80141ac:	68fa      	ldr	r2, [r7, #12]
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	441a      	add	r2, r3
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d101      	bne.n	80141c0 <create_name+0x160>
 80141bc:	2306      	movs	r3, #6
 80141be:	e010      	b.n	80141e2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	2be5      	cmp	r3, #229	; 0xe5
 80141c6:	d102      	bne.n	80141ce <create_name+0x16e>
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	2205      	movs	r2, #5
 80141cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80141ce:	7ffb      	ldrb	r3, [r7, #31]
 80141d0:	2b20      	cmp	r3, #32
 80141d2:	d801      	bhi.n	80141d8 <create_name+0x178>
 80141d4:	2204      	movs	r2, #4
 80141d6:	e000      	b.n	80141da <create_name+0x17a>
 80141d8:	2200      	movs	r2, #0
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	330b      	adds	r3, #11
 80141de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80141e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3720      	adds	r7, #32
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
 80141ea:	bf00      	nop
 80141ec:	0801a8a0 	.word	0x0801a8a0
 80141f0:	0801a850 	.word	0x0801a850

080141f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b086      	sub	sp, #24
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014202:	693b      	ldr	r3, [r7, #16]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	2b2f      	cmp	r3, #47	; 0x2f
 801420e:	d00b      	beq.n	8014228 <follow_path+0x34>
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	2b5c      	cmp	r3, #92	; 0x5c
 8014216:	d007      	beq.n	8014228 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	699a      	ldr	r2, [r3, #24]
 801421c:	693b      	ldr	r3, [r7, #16]
 801421e:	609a      	str	r2, [r3, #8]
 8014220:	e00d      	b.n	801423e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	3301      	adds	r3, #1
 8014226:	603b      	str	r3, [r7, #0]
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	2b2f      	cmp	r3, #47	; 0x2f
 801422e:	d0f8      	beq.n	8014222 <follow_path+0x2e>
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2b5c      	cmp	r3, #92	; 0x5c
 8014236:	d0f4      	beq.n	8014222 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	2200      	movs	r2, #0
 801423c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	781b      	ldrb	r3, [r3, #0]
 8014242:	2b1f      	cmp	r3, #31
 8014244:	d80a      	bhi.n	801425c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2280      	movs	r2, #128	; 0x80
 801424a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801424e:	2100      	movs	r1, #0
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f7ff fc1e 	bl	8013a92 <dir_sdi>
 8014256:	4603      	mov	r3, r0
 8014258:	75fb      	strb	r3, [r7, #23]
 801425a:	e05b      	b.n	8014314 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801425c:	463b      	mov	r3, r7
 801425e:	4619      	mov	r1, r3
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f7ff fefd 	bl	8014060 <create_name>
 8014266:	4603      	mov	r3, r0
 8014268:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801426a:	7dfb      	ldrb	r3, [r7, #23]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d14c      	bne.n	801430a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f7ff fe50 	bl	8013f16 <dir_find>
 8014276:	4603      	mov	r3, r0
 8014278:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014280:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014282:	7dfb      	ldrb	r3, [r7, #23]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d01b      	beq.n	80142c0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014288:	7dfb      	ldrb	r3, [r7, #23]
 801428a:	2b04      	cmp	r3, #4
 801428c:	d13f      	bne.n	801430e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801428e:	7afb      	ldrb	r3, [r7, #11]
 8014290:	f003 0320 	and.w	r3, r3, #32
 8014294:	2b00      	cmp	r3, #0
 8014296:	d00b      	beq.n	80142b0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8014298:	7afb      	ldrb	r3, [r7, #11]
 801429a:	f003 0304 	and.w	r3, r3, #4
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d031      	beq.n	8014306 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2280      	movs	r2, #128	; 0x80
 80142a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80142aa:	2300      	movs	r3, #0
 80142ac:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80142ae:	e02e      	b.n	801430e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80142b0:	7afb      	ldrb	r3, [r7, #11]
 80142b2:	f003 0304 	and.w	r3, r3, #4
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d129      	bne.n	801430e <follow_path+0x11a>
 80142ba:	2305      	movs	r3, #5
 80142bc:	75fb      	strb	r3, [r7, #23]
				break;
 80142be:	e026      	b.n	801430e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80142c0:	7afb      	ldrb	r3, [r7, #11]
 80142c2:	f003 0304 	and.w	r3, r3, #4
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d123      	bne.n	8014312 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80142ca:	693b      	ldr	r3, [r7, #16]
 80142cc:	799b      	ldrb	r3, [r3, #6]
 80142ce:	f003 0310 	and.w	r3, r3, #16
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d102      	bne.n	80142dc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80142d6:	2305      	movs	r3, #5
 80142d8:	75fb      	strb	r3, [r7, #23]
 80142da:	e01b      	b.n	8014314 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	695b      	ldr	r3, [r3, #20]
 80142e6:	68fa      	ldr	r2, [r7, #12]
 80142e8:	8992      	ldrh	r2, [r2, #12]
 80142ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80142ee:	fb02 f200 	mul.w	r2, r2, r0
 80142f2:	1a9b      	subs	r3, r3, r2
 80142f4:	440b      	add	r3, r1
 80142f6:	4619      	mov	r1, r3
 80142f8:	68f8      	ldr	r0, [r7, #12]
 80142fa:	f7ff fd70 	bl	8013dde <ld_clust>
 80142fe:	4602      	mov	r2, r0
 8014300:	693b      	ldr	r3, [r7, #16]
 8014302:	609a      	str	r2, [r3, #8]
 8014304:	e7aa      	b.n	801425c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8014306:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014308:	e7a8      	b.n	801425c <follow_path+0x68>
			if (res != FR_OK) break;
 801430a:	bf00      	nop
 801430c:	e002      	b.n	8014314 <follow_path+0x120>
				break;
 801430e:	bf00      	nop
 8014310:	e000      	b.n	8014314 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014312:	bf00      	nop
			}
		}
	}

	return res;
 8014314:	7dfb      	ldrb	r3, [r7, #23]
}
 8014316:	4618      	mov	r0, r3
 8014318:	3718      	adds	r7, #24
 801431a:	46bd      	mov	sp, r7
 801431c:	bd80      	pop	{r7, pc}

0801431e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801431e:	b480      	push	{r7}
 8014320:	b087      	sub	sp, #28
 8014322:	af00      	add	r7, sp, #0
 8014324:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014326:	f04f 33ff 	mov.w	r3, #4294967295
 801432a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d031      	beq.n	8014398 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	617b      	str	r3, [r7, #20]
 801433a:	e002      	b.n	8014342 <get_ldnumber+0x24>
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	3301      	adds	r3, #1
 8014340:	617b      	str	r3, [r7, #20]
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	2b20      	cmp	r3, #32
 8014348:	d903      	bls.n	8014352 <get_ldnumber+0x34>
 801434a:	697b      	ldr	r3, [r7, #20]
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	2b3a      	cmp	r3, #58	; 0x3a
 8014350:	d1f4      	bne.n	801433c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014352:	697b      	ldr	r3, [r7, #20]
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	2b3a      	cmp	r3, #58	; 0x3a
 8014358:	d11c      	bne.n	8014394 <get_ldnumber+0x76>
			tp = *path;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	1c5a      	adds	r2, r3, #1
 8014364:	60fa      	str	r2, [r7, #12]
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	3b30      	subs	r3, #48	; 0x30
 801436a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	2b09      	cmp	r3, #9
 8014370:	d80e      	bhi.n	8014390 <get_ldnumber+0x72>
 8014372:	68fa      	ldr	r2, [r7, #12]
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	429a      	cmp	r2, r3
 8014378:	d10a      	bne.n	8014390 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d107      	bne.n	8014390 <get_ldnumber+0x72>
					vol = (int)i;
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	3301      	adds	r3, #1
 8014388:	617b      	str	r3, [r7, #20]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	697a      	ldr	r2, [r7, #20]
 801438e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	e002      	b.n	801439a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014394:	2300      	movs	r3, #0
 8014396:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014398:	693b      	ldr	r3, [r7, #16]
}
 801439a:	4618      	mov	r0, r3
 801439c:	371c      	adds	r7, #28
 801439e:	46bd      	mov	sp, r7
 80143a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a4:	4770      	bx	lr
	...

080143a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	2200      	movs	r2, #0
 80143b6:	70da      	strb	r2, [r3, #3]
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f04f 32ff 	mov.w	r2, #4294967295
 80143be:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80143c0:	6839      	ldr	r1, [r7, #0]
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f7fe ff8c 	bl	80132e0 <move_window>
 80143c8:	4603      	mov	r3, r0
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d001      	beq.n	80143d2 <check_fs+0x2a>
 80143ce:	2304      	movs	r3, #4
 80143d0:	e038      	b.n	8014444 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	3338      	adds	r3, #56	; 0x38
 80143d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80143da:	4618      	mov	r0, r3
 80143dc:	f7fe fcd0 	bl	8012d80 <ld_word>
 80143e0:	4603      	mov	r3, r0
 80143e2:	461a      	mov	r2, r3
 80143e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d001      	beq.n	80143f0 <check_fs+0x48>
 80143ec:	2303      	movs	r3, #3
 80143ee:	e029      	b.n	8014444 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80143f6:	2be9      	cmp	r3, #233	; 0xe9
 80143f8:	d009      	beq.n	801440e <check_fs+0x66>
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014400:	2beb      	cmp	r3, #235	; 0xeb
 8014402:	d11e      	bne.n	8014442 <check_fs+0x9a>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801440a:	2b90      	cmp	r3, #144	; 0x90
 801440c:	d119      	bne.n	8014442 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	3338      	adds	r3, #56	; 0x38
 8014412:	3336      	adds	r3, #54	; 0x36
 8014414:	4618      	mov	r0, r3
 8014416:	f7fe fccb 	bl	8012db0 <ld_dword>
 801441a:	4603      	mov	r3, r0
 801441c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014420:	4a0a      	ldr	r2, [pc, #40]	; (801444c <check_fs+0xa4>)
 8014422:	4293      	cmp	r3, r2
 8014424:	d101      	bne.n	801442a <check_fs+0x82>
 8014426:	2300      	movs	r3, #0
 8014428:	e00c      	b.n	8014444 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	3338      	adds	r3, #56	; 0x38
 801442e:	3352      	adds	r3, #82	; 0x52
 8014430:	4618      	mov	r0, r3
 8014432:	f7fe fcbd 	bl	8012db0 <ld_dword>
 8014436:	4602      	mov	r2, r0
 8014438:	4b05      	ldr	r3, [pc, #20]	; (8014450 <check_fs+0xa8>)
 801443a:	429a      	cmp	r2, r3
 801443c:	d101      	bne.n	8014442 <check_fs+0x9a>
 801443e:	2300      	movs	r3, #0
 8014440:	e000      	b.n	8014444 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014442:	2302      	movs	r3, #2
}
 8014444:	4618      	mov	r0, r3
 8014446:	3708      	adds	r7, #8
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}
 801444c:	00544146 	.word	0x00544146
 8014450:	33544146 	.word	0x33544146

08014454 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b096      	sub	sp, #88	; 0x58
 8014458:	af00      	add	r7, sp, #0
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	4613      	mov	r3, r2
 8014460:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	2200      	movs	r2, #0
 8014466:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014468:	68f8      	ldr	r0, [r7, #12]
 801446a:	f7ff ff58 	bl	801431e <get_ldnumber>
 801446e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014472:	2b00      	cmp	r3, #0
 8014474:	da01      	bge.n	801447a <find_volume+0x26>
 8014476:	230b      	movs	r3, #11
 8014478:	e268      	b.n	801494c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801447a:	4ab0      	ldr	r2, [pc, #704]	; (801473c <find_volume+0x2e8>)
 801447c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014482:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014486:	2b00      	cmp	r3, #0
 8014488:	d101      	bne.n	801448e <find_volume+0x3a>
 801448a:	230c      	movs	r3, #12
 801448c:	e25e      	b.n	801494c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014492:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014494:	79fb      	ldrb	r3, [r7, #7]
 8014496:	f023 0301 	bic.w	r3, r3, #1
 801449a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801449e:	781b      	ldrb	r3, [r3, #0]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d01a      	beq.n	80144da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80144a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144a6:	785b      	ldrb	r3, [r3, #1]
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fe fbcb 	bl	8012c44 <disk_status>
 80144ae:	4603      	mov	r3, r0
 80144b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80144b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144b8:	f003 0301 	and.w	r3, r3, #1
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d10c      	bne.n	80144da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80144c0:	79fb      	ldrb	r3, [r7, #7]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d007      	beq.n	80144d6 <find_volume+0x82>
 80144c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144ca:	f003 0304 	and.w	r3, r3, #4
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d001      	beq.n	80144d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80144d2:	230a      	movs	r3, #10
 80144d4:	e23a      	b.n	801494c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80144d6:	2300      	movs	r3, #0
 80144d8:	e238      	b.n	801494c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80144da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144dc:	2200      	movs	r2, #0
 80144de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80144e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144e2:	b2da      	uxtb	r2, r3
 80144e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80144e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ea:	785b      	ldrb	r3, [r3, #1]
 80144ec:	4618      	mov	r0, r3
 80144ee:	f7fe fbc3 	bl	8012c78 <disk_initialize>
 80144f2:	4603      	mov	r3, r0
 80144f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80144f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144fc:	f003 0301 	and.w	r3, r3, #1
 8014500:	2b00      	cmp	r3, #0
 8014502:	d001      	beq.n	8014508 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014504:	2303      	movs	r3, #3
 8014506:	e221      	b.n	801494c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014508:	79fb      	ldrb	r3, [r7, #7]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d007      	beq.n	801451e <find_volume+0xca>
 801450e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014512:	f003 0304 	and.w	r3, r3, #4
 8014516:	2b00      	cmp	r3, #0
 8014518:	d001      	beq.n	801451e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801451a:	230a      	movs	r3, #10
 801451c:	e216      	b.n	801494c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014520:	7858      	ldrb	r0, [r3, #1]
 8014522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014524:	330c      	adds	r3, #12
 8014526:	461a      	mov	r2, r3
 8014528:	2102      	movs	r1, #2
 801452a:	f7fe fc0b 	bl	8012d44 <disk_ioctl>
 801452e:	4603      	mov	r3, r0
 8014530:	2b00      	cmp	r3, #0
 8014532:	d001      	beq.n	8014538 <find_volume+0xe4>
 8014534:	2301      	movs	r3, #1
 8014536:	e209      	b.n	801494c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8014538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453a:	899b      	ldrh	r3, [r3, #12]
 801453c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014540:	d80d      	bhi.n	801455e <find_volume+0x10a>
 8014542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014544:	899b      	ldrh	r3, [r3, #12]
 8014546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801454a:	d308      	bcc.n	801455e <find_volume+0x10a>
 801454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454e:	899b      	ldrh	r3, [r3, #12]
 8014550:	461a      	mov	r2, r3
 8014552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014554:	899b      	ldrh	r3, [r3, #12]
 8014556:	3b01      	subs	r3, #1
 8014558:	4013      	ands	r3, r2
 801455a:	2b00      	cmp	r3, #0
 801455c:	d001      	beq.n	8014562 <find_volume+0x10e>
 801455e:	2301      	movs	r3, #1
 8014560:	e1f4      	b.n	801494c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014562:	2300      	movs	r3, #0
 8014564:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014568:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801456a:	f7ff ff1d 	bl	80143a8 <check_fs>
 801456e:	4603      	mov	r3, r0
 8014570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014578:	2b02      	cmp	r3, #2
 801457a:	d14b      	bne.n	8014614 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801457c:	2300      	movs	r3, #0
 801457e:	643b      	str	r3, [r7, #64]	; 0x40
 8014580:	e01f      	b.n	80145c2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014584:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801458a:	011b      	lsls	r3, r3, #4
 801458c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014590:	4413      	add	r3, r2
 8014592:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014596:	3304      	adds	r3, #4
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d006      	beq.n	80145ac <find_volume+0x158>
 801459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a0:	3308      	adds	r3, #8
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7fe fc04 	bl	8012db0 <ld_dword>
 80145a8:	4602      	mov	r2, r0
 80145aa:	e000      	b.n	80145ae <find_volume+0x15a>
 80145ac:	2200      	movs	r2, #0
 80145ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80145b6:	440b      	add	r3, r1
 80145b8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80145bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145be:	3301      	adds	r3, #1
 80145c0:	643b      	str	r3, [r7, #64]	; 0x40
 80145c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145c4:	2b03      	cmp	r3, #3
 80145c6:	d9dc      	bls.n	8014582 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80145c8:	2300      	movs	r3, #0
 80145ca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80145cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d002      	beq.n	80145d8 <find_volume+0x184>
 80145d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145d4:	3b01      	subs	r3, #1
 80145d6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80145d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80145e0:	4413      	add	r3, r2
 80145e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80145e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80145e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d005      	beq.n	80145fa <find_volume+0x1a6>
 80145ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80145f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145f2:	f7ff fed9 	bl	80143a8 <check_fs>
 80145f6:	4603      	mov	r3, r0
 80145f8:	e000      	b.n	80145fc <find_volume+0x1a8>
 80145fa:	2303      	movs	r3, #3
 80145fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014604:	2b01      	cmp	r3, #1
 8014606:	d905      	bls.n	8014614 <find_volume+0x1c0>
 8014608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801460a:	3301      	adds	r3, #1
 801460c:	643b      	str	r3, [r7, #64]	; 0x40
 801460e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014610:	2b03      	cmp	r3, #3
 8014612:	d9e1      	bls.n	80145d8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014614:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014618:	2b04      	cmp	r3, #4
 801461a:	d101      	bne.n	8014620 <find_volume+0x1cc>
 801461c:	2301      	movs	r3, #1
 801461e:	e195      	b.n	801494c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014620:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014624:	2b01      	cmp	r3, #1
 8014626:	d901      	bls.n	801462c <find_volume+0x1d8>
 8014628:	230d      	movs	r3, #13
 801462a:	e18f      	b.n	801494c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801462e:	3338      	adds	r3, #56	; 0x38
 8014630:	330b      	adds	r3, #11
 8014632:	4618      	mov	r0, r3
 8014634:	f7fe fba4 	bl	8012d80 <ld_word>
 8014638:	4603      	mov	r3, r0
 801463a:	461a      	mov	r2, r3
 801463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801463e:	899b      	ldrh	r3, [r3, #12]
 8014640:	429a      	cmp	r2, r3
 8014642:	d001      	beq.n	8014648 <find_volume+0x1f4>
 8014644:	230d      	movs	r3, #13
 8014646:	e181      	b.n	801494c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801464a:	3338      	adds	r3, #56	; 0x38
 801464c:	3316      	adds	r3, #22
 801464e:	4618      	mov	r0, r3
 8014650:	f7fe fb96 	bl	8012d80 <ld_word>
 8014654:	4603      	mov	r3, r0
 8014656:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801465a:	2b00      	cmp	r3, #0
 801465c:	d106      	bne.n	801466c <find_volume+0x218>
 801465e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014660:	3338      	adds	r3, #56	; 0x38
 8014662:	3324      	adds	r3, #36	; 0x24
 8014664:	4618      	mov	r0, r3
 8014666:	f7fe fba3 	bl	8012db0 <ld_dword>
 801466a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801466e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014670:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014674:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801467a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801467e:	789b      	ldrb	r3, [r3, #2]
 8014680:	2b01      	cmp	r3, #1
 8014682:	d005      	beq.n	8014690 <find_volume+0x23c>
 8014684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014686:	789b      	ldrb	r3, [r3, #2]
 8014688:	2b02      	cmp	r3, #2
 801468a:	d001      	beq.n	8014690 <find_volume+0x23c>
 801468c:	230d      	movs	r3, #13
 801468e:	e15d      	b.n	801494c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014692:	789b      	ldrb	r3, [r3, #2]
 8014694:	461a      	mov	r2, r3
 8014696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014698:	fb02 f303 	mul.w	r3, r2, r3
 801469c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80146a4:	b29a      	uxth	r2, r3
 80146a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80146aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ac:	895b      	ldrh	r3, [r3, #10]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d008      	beq.n	80146c4 <find_volume+0x270>
 80146b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b4:	895b      	ldrh	r3, [r3, #10]
 80146b6:	461a      	mov	r2, r3
 80146b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ba:	895b      	ldrh	r3, [r3, #10]
 80146bc:	3b01      	subs	r3, #1
 80146be:	4013      	ands	r3, r2
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d001      	beq.n	80146c8 <find_volume+0x274>
 80146c4:	230d      	movs	r3, #13
 80146c6:	e141      	b.n	801494c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80146c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ca:	3338      	adds	r3, #56	; 0x38
 80146cc:	3311      	adds	r3, #17
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7fe fb56 	bl	8012d80 <ld_word>
 80146d4:	4603      	mov	r3, r0
 80146d6:	461a      	mov	r2, r3
 80146d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80146dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146de:	891b      	ldrh	r3, [r3, #8]
 80146e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146e2:	8992      	ldrh	r2, [r2, #12]
 80146e4:	0952      	lsrs	r2, r2, #5
 80146e6:	b292      	uxth	r2, r2
 80146e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80146ec:	fb02 f201 	mul.w	r2, r2, r1
 80146f0:	1a9b      	subs	r3, r3, r2
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d001      	beq.n	80146fc <find_volume+0x2a8>
 80146f8:	230d      	movs	r3, #13
 80146fa:	e127      	b.n	801494c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80146fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fe:	3338      	adds	r3, #56	; 0x38
 8014700:	3313      	adds	r3, #19
 8014702:	4618      	mov	r0, r3
 8014704:	f7fe fb3c 	bl	8012d80 <ld_word>
 8014708:	4603      	mov	r3, r0
 801470a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801470c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801470e:	2b00      	cmp	r3, #0
 8014710:	d106      	bne.n	8014720 <find_volume+0x2cc>
 8014712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014714:	3338      	adds	r3, #56	; 0x38
 8014716:	3320      	adds	r3, #32
 8014718:	4618      	mov	r0, r3
 801471a:	f7fe fb49 	bl	8012db0 <ld_dword>
 801471e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014722:	3338      	adds	r3, #56	; 0x38
 8014724:	330e      	adds	r3, #14
 8014726:	4618      	mov	r0, r3
 8014728:	f7fe fb2a 	bl	8012d80 <ld_word>
 801472c:	4603      	mov	r3, r0
 801472e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014730:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014732:	2b00      	cmp	r3, #0
 8014734:	d104      	bne.n	8014740 <find_volume+0x2ec>
 8014736:	230d      	movs	r3, #13
 8014738:	e108      	b.n	801494c <find_volume+0x4f8>
 801473a:	bf00      	nop
 801473c:	20045330 	.word	0x20045330

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014740:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014744:	4413      	add	r3, r2
 8014746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014748:	8911      	ldrh	r1, [r2, #8]
 801474a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801474c:	8992      	ldrh	r2, [r2, #12]
 801474e:	0952      	lsrs	r2, r2, #5
 8014750:	b292      	uxth	r2, r2
 8014752:	fbb1 f2f2 	udiv	r2, r1, r2
 8014756:	b292      	uxth	r2, r2
 8014758:	4413      	add	r3, r2
 801475a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801475c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014760:	429a      	cmp	r2, r3
 8014762:	d201      	bcs.n	8014768 <find_volume+0x314>
 8014764:	230d      	movs	r3, #13
 8014766:	e0f1      	b.n	801494c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801476c:	1ad3      	subs	r3, r2, r3
 801476e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014770:	8952      	ldrh	r2, [r2, #10]
 8014772:	fbb3 f3f2 	udiv	r3, r3, r2
 8014776:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801477a:	2b00      	cmp	r3, #0
 801477c:	d101      	bne.n	8014782 <find_volume+0x32e>
 801477e:	230d      	movs	r3, #13
 8014780:	e0e4      	b.n	801494c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8014782:	2303      	movs	r3, #3
 8014784:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801478e:	4293      	cmp	r3, r2
 8014790:	d802      	bhi.n	8014798 <find_volume+0x344>
 8014792:	2302      	movs	r3, #2
 8014794:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801479a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801479e:	4293      	cmp	r3, r2
 80147a0:	d802      	bhi.n	80147a8 <find_volume+0x354>
 80147a2:	2301      	movs	r3, #1
 80147a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80147a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147aa:	1c9a      	adds	r2, r3, #2
 80147ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ae:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80147b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80147b4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80147b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80147b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147ba:	441a      	add	r2, r3
 80147bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147be:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80147c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80147c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c4:	441a      	add	r2, r3
 80147c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80147ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147ce:	2b03      	cmp	r3, #3
 80147d0:	d11e      	bne.n	8014810 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80147d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147d4:	3338      	adds	r3, #56	; 0x38
 80147d6:	332a      	adds	r3, #42	; 0x2a
 80147d8:	4618      	mov	r0, r3
 80147da:	f7fe fad1 	bl	8012d80 <ld_word>
 80147de:	4603      	mov	r3, r0
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d001      	beq.n	80147e8 <find_volume+0x394>
 80147e4:	230d      	movs	r3, #13
 80147e6:	e0b1      	b.n	801494c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80147e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ea:	891b      	ldrh	r3, [r3, #8]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d001      	beq.n	80147f4 <find_volume+0x3a0>
 80147f0:	230d      	movs	r3, #13
 80147f2:	e0ab      	b.n	801494c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80147f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f6:	3338      	adds	r3, #56	; 0x38
 80147f8:	332c      	adds	r3, #44	; 0x2c
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7fe fad8 	bl	8012db0 <ld_dword>
 8014800:	4602      	mov	r2, r0
 8014802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014804:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014808:	69db      	ldr	r3, [r3, #28]
 801480a:	009b      	lsls	r3, r3, #2
 801480c:	647b      	str	r3, [r7, #68]	; 0x44
 801480e:	e01f      	b.n	8014850 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014812:	891b      	ldrh	r3, [r3, #8]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d101      	bne.n	801481c <find_volume+0x3c8>
 8014818:	230d      	movs	r3, #13
 801481a:	e097      	b.n	801494c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801481e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014822:	441a      	add	r2, r3
 8014824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014826:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801482c:	2b02      	cmp	r3, #2
 801482e:	d103      	bne.n	8014838 <find_volume+0x3e4>
 8014830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014832:	69db      	ldr	r3, [r3, #28]
 8014834:	005b      	lsls	r3, r3, #1
 8014836:	e00a      	b.n	801484e <find_volume+0x3fa>
 8014838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801483a:	69da      	ldr	r2, [r3, #28]
 801483c:	4613      	mov	r3, r2
 801483e:	005b      	lsls	r3, r3, #1
 8014840:	4413      	add	r3, r2
 8014842:	085a      	lsrs	r2, r3, #1
 8014844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014846:	69db      	ldr	r3, [r3, #28]
 8014848:	f003 0301 	and.w	r3, r3, #1
 801484c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801484e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014852:	6a1a      	ldr	r2, [r3, #32]
 8014854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014856:	899b      	ldrh	r3, [r3, #12]
 8014858:	4619      	mov	r1, r3
 801485a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801485c:	440b      	add	r3, r1
 801485e:	3b01      	subs	r3, #1
 8014860:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014862:	8989      	ldrh	r1, [r1, #12]
 8014864:	fbb3 f3f1 	udiv	r3, r3, r1
 8014868:	429a      	cmp	r2, r3
 801486a:	d201      	bcs.n	8014870 <find_volume+0x41c>
 801486c:	230d      	movs	r3, #13
 801486e:	e06d      	b.n	801494c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014872:	f04f 32ff 	mov.w	r2, #4294967295
 8014876:	615a      	str	r2, [r3, #20]
 8014878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801487a:	695a      	ldr	r2, [r3, #20]
 801487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801487e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014882:	2280      	movs	r2, #128	; 0x80
 8014884:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014886:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801488a:	2b03      	cmp	r3, #3
 801488c:	d149      	bne.n	8014922 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014890:	3338      	adds	r3, #56	; 0x38
 8014892:	3330      	adds	r3, #48	; 0x30
 8014894:	4618      	mov	r0, r3
 8014896:	f7fe fa73 	bl	8012d80 <ld_word>
 801489a:	4603      	mov	r3, r0
 801489c:	2b01      	cmp	r3, #1
 801489e:	d140      	bne.n	8014922 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80148a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148a2:	3301      	adds	r3, #1
 80148a4:	4619      	mov	r1, r3
 80148a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80148a8:	f7fe fd1a 	bl	80132e0 <move_window>
 80148ac:	4603      	mov	r3, r0
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d137      	bne.n	8014922 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80148b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b4:	2200      	movs	r2, #0
 80148b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80148b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ba:	3338      	adds	r3, #56	; 0x38
 80148bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fe fa5d 	bl	8012d80 <ld_word>
 80148c6:	4603      	mov	r3, r0
 80148c8:	461a      	mov	r2, r3
 80148ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80148ce:	429a      	cmp	r2, r3
 80148d0:	d127      	bne.n	8014922 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80148d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d4:	3338      	adds	r3, #56	; 0x38
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7fe fa6a 	bl	8012db0 <ld_dword>
 80148dc:	4602      	mov	r2, r0
 80148de:	4b1d      	ldr	r3, [pc, #116]	; (8014954 <find_volume+0x500>)
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d11e      	bne.n	8014922 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80148e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e6:	3338      	adds	r3, #56	; 0x38
 80148e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7fe fa5f 	bl	8012db0 <ld_dword>
 80148f2:	4602      	mov	r2, r0
 80148f4:	4b18      	ldr	r3, [pc, #96]	; (8014958 <find_volume+0x504>)
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d113      	bne.n	8014922 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80148fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fc:	3338      	adds	r3, #56	; 0x38
 80148fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014902:	4618      	mov	r0, r3
 8014904:	f7fe fa54 	bl	8012db0 <ld_dword>
 8014908:	4602      	mov	r2, r0
 801490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801490c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014910:	3338      	adds	r3, #56	; 0x38
 8014912:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014916:	4618      	mov	r0, r3
 8014918:	f7fe fa4a 	bl	8012db0 <ld_dword>
 801491c:	4602      	mov	r2, r0
 801491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014920:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014924:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014928:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801492a:	4b0c      	ldr	r3, [pc, #48]	; (801495c <find_volume+0x508>)
 801492c:	881b      	ldrh	r3, [r3, #0]
 801492e:	3301      	adds	r3, #1
 8014930:	b29a      	uxth	r2, r3
 8014932:	4b0a      	ldr	r3, [pc, #40]	; (801495c <find_volume+0x508>)
 8014934:	801a      	strh	r2, [r3, #0]
 8014936:	4b09      	ldr	r3, [pc, #36]	; (801495c <find_volume+0x508>)
 8014938:	881a      	ldrh	r2, [r3, #0]
 801493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014940:	2200      	movs	r2, #0
 8014942:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014944:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014946:	f7fe fc63 	bl	8013210 <clear_lock>
#endif
	return FR_OK;
 801494a:	2300      	movs	r3, #0
}
 801494c:	4618      	mov	r0, r3
 801494e:	3758      	adds	r7, #88	; 0x58
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}
 8014954:	41615252 	.word	0x41615252
 8014958:	61417272 	.word	0x61417272
 801495c:	20045334 	.word	0x20045334

08014960 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801496a:	2309      	movs	r3, #9
 801496c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d01c      	beq.n	80149ae <validate+0x4e>
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d018      	beq.n	80149ae <validate+0x4e>
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	781b      	ldrb	r3, [r3, #0]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d013      	beq.n	80149ae <validate+0x4e>
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	889a      	ldrh	r2, [r3, #4]
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	88db      	ldrh	r3, [r3, #6]
 8014990:	429a      	cmp	r2, r3
 8014992:	d10c      	bne.n	80149ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	785b      	ldrb	r3, [r3, #1]
 801499a:	4618      	mov	r0, r3
 801499c:	f7fe f952 	bl	8012c44 <disk_status>
 80149a0:	4603      	mov	r3, r0
 80149a2:	f003 0301 	and.w	r3, r3, #1
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d101      	bne.n	80149ae <validate+0x4e>
			res = FR_OK;
 80149aa:	2300      	movs	r3, #0
 80149ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80149ae:	7bfb      	ldrb	r3, [r7, #15]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d102      	bne.n	80149ba <validate+0x5a>
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	e000      	b.n	80149bc <validate+0x5c>
 80149ba:	2300      	movs	r3, #0
 80149bc:	683a      	ldr	r2, [r7, #0]
 80149be:	6013      	str	r3, [r2, #0]
	return res;
 80149c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	3710      	adds	r7, #16
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}
	...

080149cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b088      	sub	sp, #32
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	4613      	mov	r3, r2
 80149d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80149de:	f107 0310 	add.w	r3, r7, #16
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7ff fc9b 	bl	801431e <get_ldnumber>
 80149e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80149ea:	69fb      	ldr	r3, [r7, #28]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	da01      	bge.n	80149f4 <f_mount+0x28>
 80149f0:	230b      	movs	r3, #11
 80149f2:	e02b      	b.n	8014a4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80149f4:	4a17      	ldr	r2, [pc, #92]	; (8014a54 <f_mount+0x88>)
 80149f6:	69fb      	ldr	r3, [r7, #28]
 80149f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80149fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80149fe:	69bb      	ldr	r3, [r7, #24]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d005      	beq.n	8014a10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014a04:	69b8      	ldr	r0, [r7, #24]
 8014a06:	f7fe fc03 	bl	8013210 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d002      	beq.n	8014a1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014a1c:	68fa      	ldr	r2, [r7, #12]
 8014a1e:	490d      	ldr	r1, [pc, #52]	; (8014a54 <f_mount+0x88>)
 8014a20:	69fb      	ldr	r3, [r7, #28]
 8014a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d002      	beq.n	8014a32 <f_mount+0x66>
 8014a2c:	79fb      	ldrb	r3, [r7, #7]
 8014a2e:	2b01      	cmp	r3, #1
 8014a30:	d001      	beq.n	8014a36 <f_mount+0x6a>
 8014a32:	2300      	movs	r3, #0
 8014a34:	e00a      	b.n	8014a4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014a36:	f107 010c 	add.w	r1, r7, #12
 8014a3a:	f107 0308 	add.w	r3, r7, #8
 8014a3e:	2200      	movs	r2, #0
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7ff fd07 	bl	8014454 <find_volume>
 8014a46:	4603      	mov	r3, r0
 8014a48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3720      	adds	r7, #32
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}
 8014a54:	20045330 	.word	0x20045330

08014a58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b098      	sub	sp, #96	; 0x60
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	60f8      	str	r0, [r7, #12]
 8014a60:	60b9      	str	r1, [r7, #8]
 8014a62:	4613      	mov	r3, r2
 8014a64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d101      	bne.n	8014a70 <f_open+0x18>
 8014a6c:	2309      	movs	r3, #9
 8014a6e:	e1ba      	b.n	8014de6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014a70:	79fb      	ldrb	r3, [r7, #7]
 8014a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014a76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014a78:	79fa      	ldrb	r2, [r7, #7]
 8014a7a:	f107 0110 	add.w	r1, r7, #16
 8014a7e:	f107 0308 	add.w	r3, r7, #8
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7ff fce6 	bl	8014454 <find_volume>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8014a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	f040 819e 	bne.w	8014dd4 <f_open+0x37c>
		dj.obj.fs = fs;
 8014a98:	693b      	ldr	r3, [r7, #16]
 8014a9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014a9c:	68ba      	ldr	r2, [r7, #8]
 8014a9e:	f107 0314 	add.w	r3, r7, #20
 8014aa2:	4611      	mov	r1, r2
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7ff fba5 	bl	80141f4 <follow_path>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d11a      	bne.n	8014aee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014ab8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014abc:	b25b      	sxtb	r3, r3
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	da03      	bge.n	8014aca <f_open+0x72>
				res = FR_INVALID_NAME;
 8014ac2:	2306      	movs	r3, #6
 8014ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014ac8:	e011      	b.n	8014aee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014aca:	79fb      	ldrb	r3, [r7, #7]
 8014acc:	f023 0301 	bic.w	r3, r3, #1
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	bf14      	ite	ne
 8014ad4:	2301      	movne	r3, #1
 8014ad6:	2300      	moveq	r3, #0
 8014ad8:	b2db      	uxtb	r3, r3
 8014ada:	461a      	mov	r2, r3
 8014adc:	f107 0314 	add.w	r3, r7, #20
 8014ae0:	4611      	mov	r1, r2
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fe fa4c 	bl	8012f80 <chk_lock>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014aee:	79fb      	ldrb	r3, [r7, #7]
 8014af0:	f003 031c 	and.w	r3, r3, #28
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d07e      	beq.n	8014bf6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8014af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d017      	beq.n	8014b30 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b04:	2b04      	cmp	r3, #4
 8014b06:	d10e      	bne.n	8014b26 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014b08:	f7fe fa96 	bl	8013038 <enq_lock>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d006      	beq.n	8014b20 <f_open+0xc8>
 8014b12:	f107 0314 	add.w	r3, r7, #20
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7ff fa52 	bl	8013fc0 <dir_register>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	e000      	b.n	8014b22 <f_open+0xca>
 8014b20:	2312      	movs	r3, #18
 8014b22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014b26:	79fb      	ldrb	r3, [r7, #7]
 8014b28:	f043 0308 	orr.w	r3, r3, #8
 8014b2c:	71fb      	strb	r3, [r7, #7]
 8014b2e:	e010      	b.n	8014b52 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014b30:	7ebb      	ldrb	r3, [r7, #26]
 8014b32:	f003 0311 	and.w	r3, r3, #17
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d003      	beq.n	8014b42 <f_open+0xea>
					res = FR_DENIED;
 8014b3a:	2307      	movs	r3, #7
 8014b3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014b40:	e007      	b.n	8014b52 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014b42:	79fb      	ldrb	r3, [r7, #7]
 8014b44:	f003 0304 	and.w	r3, r3, #4
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d002      	beq.n	8014b52 <f_open+0xfa>
 8014b4c:	2308      	movs	r3, #8
 8014b4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d167      	bne.n	8014c2a <f_open+0x1d2>
 8014b5a:	79fb      	ldrb	r3, [r7, #7]
 8014b5c:	f003 0308 	and.w	r3, r3, #8
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d062      	beq.n	8014c2a <f_open+0x1d2>
				dw = GET_FATTIME();
 8014b64:	4ba2      	ldr	r3, [pc, #648]	; (8014df0 <f_open+0x398>)
 8014b66:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b6a:	330e      	adds	r3, #14
 8014b6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fe f95c 	bl	8012e2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b76:	3316      	adds	r3, #22
 8014b78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7fe f956 	bl	8012e2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b82:	330b      	adds	r3, #11
 8014b84:	2220      	movs	r2, #32
 8014b86:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b8c:	4611      	mov	r1, r2
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f7ff f925 	bl	8013dde <ld_clust>
 8014b94:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7ff f93d 	bl	8013e1c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ba4:	331c      	adds	r3, #28
 8014ba6:	2100      	movs	r1, #0
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7fe f93f 	bl	8012e2c <st_dword>
					fs->wflag = 1;
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	2201      	movs	r2, #1
 8014bb2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d037      	beq.n	8014c2a <f_open+0x1d2>
						dw = fs->winsect;
 8014bba:	693b      	ldr	r3, [r7, #16]
 8014bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014bbe:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8014bc0:	f107 0314 	add.w	r3, r7, #20
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7fe fe2d 	bl	8013828 <remove_chain>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8014bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d126      	bne.n	8014c2a <f_open+0x1d2>
							res = move_window(fs, dw);
 8014bdc:	693b      	ldr	r3, [r7, #16]
 8014bde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7fe fb7d 	bl	80132e0 <move_window>
 8014be6:	4603      	mov	r3, r0
 8014be8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014bec:	693b      	ldr	r3, [r7, #16]
 8014bee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014bf0:	3a01      	subs	r2, #1
 8014bf2:	611a      	str	r2, [r3, #16]
 8014bf4:	e019      	b.n	8014c2a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d115      	bne.n	8014c2a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014bfe:	7ebb      	ldrb	r3, [r7, #26]
 8014c00:	f003 0310 	and.w	r3, r3, #16
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d003      	beq.n	8014c10 <f_open+0x1b8>
					res = FR_NO_FILE;
 8014c08:	2304      	movs	r3, #4
 8014c0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014c0e:	e00c      	b.n	8014c2a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014c10:	79fb      	ldrb	r3, [r7, #7]
 8014c12:	f003 0302 	and.w	r3, r3, #2
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d007      	beq.n	8014c2a <f_open+0x1d2>
 8014c1a:	7ebb      	ldrb	r3, [r7, #26]
 8014c1c:	f003 0301 	and.w	r3, r3, #1
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d002      	beq.n	8014c2a <f_open+0x1d2>
						res = FR_DENIED;
 8014c24:	2307      	movs	r3, #7
 8014c26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014c2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d128      	bne.n	8014c84 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014c32:	79fb      	ldrb	r3, [r7, #7]
 8014c34:	f003 0308 	and.w	r3, r3, #8
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d003      	beq.n	8014c44 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8014c3c:	79fb      	ldrb	r3, [r7, #7]
 8014c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c42:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014c52:	79fb      	ldrb	r3, [r7, #7]
 8014c54:	f023 0301 	bic.w	r3, r3, #1
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	bf14      	ite	ne
 8014c5c:	2301      	movne	r3, #1
 8014c5e:	2300      	moveq	r3, #0
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	461a      	mov	r2, r3
 8014c64:	f107 0314 	add.w	r3, r7, #20
 8014c68:	4611      	mov	r1, r2
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7fe fa06 	bl	801307c <inc_lock>
 8014c70:	4602      	mov	r2, r0
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	691b      	ldr	r3, [r3, #16]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d102      	bne.n	8014c84 <f_open+0x22c>
 8014c7e:	2302      	movs	r3, #2
 8014c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014c84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	f040 80a3 	bne.w	8014dd4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c92:	4611      	mov	r1, r2
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7ff f8a2 	bl	8013dde <ld_clust>
 8014c9a:	4602      	mov	r2, r0
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ca2:	331c      	adds	r3, #28
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7fe f883 	bl	8012db0 <ld_dword>
 8014caa:	4602      	mov	r2, r0
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014cb6:	693a      	ldr	r2, [r7, #16]
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	88da      	ldrh	r2, [r3, #6]
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	79fa      	ldrb	r2, [r7, #7]
 8014cc8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2200      	movs	r2, #0
 8014cce:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	3330      	adds	r3, #48	; 0x30
 8014ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014ce4:	2100      	movs	r1, #0
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f7fe f8ed 	bl	8012ec6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014cec:	79fb      	ldrb	r3, [r7, #7]
 8014cee:	f003 0320 	and.w	r3, r3, #32
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d06e      	beq.n	8014dd4 <f_open+0x37c>
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d06a      	beq.n	8014dd4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	68da      	ldr	r2, [r3, #12]
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	895b      	ldrh	r3, [r3, #10]
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	693b      	ldr	r3, [r7, #16]
 8014d0e:	899b      	ldrh	r3, [r3, #12]
 8014d10:	fb03 f302 	mul.w	r3, r3, r2
 8014d14:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	689b      	ldr	r3, [r3, #8]
 8014d1a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	68db      	ldr	r3, [r3, #12]
 8014d20:	657b      	str	r3, [r7, #84]	; 0x54
 8014d22:	e016      	b.n	8014d52 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7fe fb96 	bl	801345a <get_fat>
 8014d2e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8014d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d32:	2b01      	cmp	r3, #1
 8014d34:	d802      	bhi.n	8014d3c <f_open+0x2e4>
 8014d36:	2302      	movs	r3, #2
 8014d38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d42:	d102      	bne.n	8014d4a <f_open+0x2f2>
 8014d44:	2301      	movs	r3, #1
 8014d46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014d4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d4e:	1ad3      	subs	r3, r2, r3
 8014d50:	657b      	str	r3, [r7, #84]	; 0x54
 8014d52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d103      	bne.n	8014d62 <f_open+0x30a>
 8014d5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d8e0      	bhi.n	8014d24 <f_open+0x2cc>
				}
				fp->clust = clst;
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014d66:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d131      	bne.n	8014dd4 <f_open+0x37c>
 8014d70:	693b      	ldr	r3, [r7, #16]
 8014d72:	899b      	ldrh	r3, [r3, #12]
 8014d74:	461a      	mov	r2, r3
 8014d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d78:	fbb3 f1f2 	udiv	r1, r3, r2
 8014d7c:	fb02 f201 	mul.w	r2, r2, r1
 8014d80:	1a9b      	subs	r3, r3, r2
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d026      	beq.n	8014dd4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fe fb46 	bl	801341c <clust2sect>
 8014d90:	6478      	str	r0, [r7, #68]	; 0x44
 8014d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d103      	bne.n	8014da0 <f_open+0x348>
						res = FR_INT_ERR;
 8014d98:	2302      	movs	r3, #2
 8014d9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014d9e:	e019      	b.n	8014dd4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	899b      	ldrh	r3, [r3, #12]
 8014da4:	461a      	mov	r2, r3
 8014da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014da8:	fbb3 f2f2 	udiv	r2, r3, r2
 8014dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014dae:	441a      	add	r2, r3
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	7858      	ldrb	r0, [r3, #1]
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	6a1a      	ldr	r2, [r3, #32]
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	f7fd ff7e 	bl	8012cc4 <disk_read>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d002      	beq.n	8014dd4 <f_open+0x37c>
 8014dce:	2301      	movs	r3, #1
 8014dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d002      	beq.n	8014de2 <f_open+0x38a>
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	2200      	movs	r2, #0
 8014de0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3760      	adds	r7, #96	; 0x60
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	bf00      	nop
 8014df0:	274a0000 	.word	0x274a0000

08014df4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b08e      	sub	sp, #56	; 0x38
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	607a      	str	r2, [r7, #4]
 8014e00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	f107 0214 	add.w	r2, r7, #20
 8014e12:	4611      	mov	r1, r2
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7ff fda3 	bl	8014960 <validate>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014e20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d107      	bne.n	8014e38 <f_read+0x44>
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	7d5b      	ldrb	r3, [r3, #21]
 8014e2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014e30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d002      	beq.n	8014e3e <f_read+0x4a>
 8014e38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e3c:	e135      	b.n	80150aa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	7d1b      	ldrb	r3, [r3, #20]
 8014e42:	f003 0301 	and.w	r3, r3, #1
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d101      	bne.n	8014e4e <f_read+0x5a>
 8014e4a:	2307      	movs	r3, #7
 8014e4c:	e12d      	b.n	80150aa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	68da      	ldr	r2, [r3, #12]
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	699b      	ldr	r3, [r3, #24]
 8014e56:	1ad3      	subs	r3, r2, r3
 8014e58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014e5a:	687a      	ldr	r2, [r7, #4]
 8014e5c:	6a3b      	ldr	r3, [r7, #32]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	f240 811e 	bls.w	80150a0 <f_read+0x2ac>
 8014e64:	6a3b      	ldr	r3, [r7, #32]
 8014e66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014e68:	e11a      	b.n	80150a0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	699b      	ldr	r3, [r3, #24]
 8014e6e:	697a      	ldr	r2, [r7, #20]
 8014e70:	8992      	ldrh	r2, [r2, #12]
 8014e72:	fbb3 f1f2 	udiv	r1, r3, r2
 8014e76:	fb02 f201 	mul.w	r2, r2, r1
 8014e7a:	1a9b      	subs	r3, r3, r2
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	f040 80d5 	bne.w	801502c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	699b      	ldr	r3, [r3, #24]
 8014e86:	697a      	ldr	r2, [r7, #20]
 8014e88:	8992      	ldrh	r2, [r2, #12]
 8014e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e8e:	697a      	ldr	r2, [r7, #20]
 8014e90:	8952      	ldrh	r2, [r2, #10]
 8014e92:	3a01      	subs	r2, #1
 8014e94:	4013      	ands	r3, r2
 8014e96:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d12f      	bne.n	8014efe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	699b      	ldr	r3, [r3, #24]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d103      	bne.n	8014eae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	689b      	ldr	r3, [r3, #8]
 8014eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8014eac:	e013      	b.n	8014ed6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d007      	beq.n	8014ec6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	699b      	ldr	r3, [r3, #24]
 8014eba:	4619      	mov	r1, r3
 8014ebc:	68f8      	ldr	r0, [r7, #12]
 8014ebe:	f7fe fdb0 	bl	8013a22 <clmt_clust>
 8014ec2:	6338      	str	r0, [r7, #48]	; 0x30
 8014ec4:	e007      	b.n	8014ed6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014ec6:	68fa      	ldr	r2, [r7, #12]
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	69db      	ldr	r3, [r3, #28]
 8014ecc:	4619      	mov	r1, r3
 8014ece:	4610      	mov	r0, r2
 8014ed0:	f7fe fac3 	bl	801345a <get_fat>
 8014ed4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed8:	2b01      	cmp	r3, #1
 8014eda:	d804      	bhi.n	8014ee6 <f_read+0xf2>
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	2202      	movs	r2, #2
 8014ee0:	755a      	strb	r2, [r3, #21]
 8014ee2:	2302      	movs	r3, #2
 8014ee4:	e0e1      	b.n	80150aa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eec:	d104      	bne.n	8014ef8 <f_read+0x104>
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	755a      	strb	r2, [r3, #21]
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	e0d8      	b.n	80150aa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014efc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014efe:	697a      	ldr	r2, [r7, #20]
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	69db      	ldr	r3, [r3, #28]
 8014f04:	4619      	mov	r1, r3
 8014f06:	4610      	mov	r0, r2
 8014f08:	f7fe fa88 	bl	801341c <clust2sect>
 8014f0c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014f0e:	69bb      	ldr	r3, [r7, #24]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d104      	bne.n	8014f1e <f_read+0x12a>
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	2202      	movs	r2, #2
 8014f18:	755a      	strb	r2, [r3, #21]
 8014f1a:	2302      	movs	r3, #2
 8014f1c:	e0c5      	b.n	80150aa <f_read+0x2b6>
			sect += csect;
 8014f1e:	69ba      	ldr	r2, [r7, #24]
 8014f20:	69fb      	ldr	r3, [r7, #28]
 8014f22:	4413      	add	r3, r2
 8014f24:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014f26:	697b      	ldr	r3, [r7, #20]
 8014f28:	899b      	ldrh	r3, [r3, #12]
 8014f2a:	461a      	mov	r2, r3
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f32:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d041      	beq.n	8014fbe <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014f3a:	69fa      	ldr	r2, [r7, #28]
 8014f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f3e:	4413      	add	r3, r2
 8014f40:	697a      	ldr	r2, [r7, #20]
 8014f42:	8952      	ldrh	r2, [r2, #10]
 8014f44:	4293      	cmp	r3, r2
 8014f46:	d905      	bls.n	8014f54 <f_read+0x160>
					cc = fs->csize - csect;
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	895b      	ldrh	r3, [r3, #10]
 8014f4c:	461a      	mov	r2, r3
 8014f4e:	69fb      	ldr	r3, [r7, #28]
 8014f50:	1ad3      	subs	r3, r2, r3
 8014f52:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	7858      	ldrb	r0, [r3, #1]
 8014f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f5a:	69ba      	ldr	r2, [r7, #24]
 8014f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014f5e:	f7fd feb1 	bl	8012cc4 <disk_read>
 8014f62:	4603      	mov	r3, r0
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d004      	beq.n	8014f72 <f_read+0x17e>
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2201      	movs	r2, #1
 8014f6c:	755a      	strb	r2, [r3, #21]
 8014f6e:	2301      	movs	r3, #1
 8014f70:	e09b      	b.n	80150aa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	7d1b      	ldrb	r3, [r3, #20]
 8014f76:	b25b      	sxtb	r3, r3
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	da18      	bge.n	8014fae <f_read+0x1ba>
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	6a1a      	ldr	r2, [r3, #32]
 8014f80:	69bb      	ldr	r3, [r7, #24]
 8014f82:	1ad3      	subs	r3, r2, r3
 8014f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d911      	bls.n	8014fae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	6a1a      	ldr	r2, [r3, #32]
 8014f8e:	69bb      	ldr	r3, [r7, #24]
 8014f90:	1ad3      	subs	r3, r2, r3
 8014f92:	697a      	ldr	r2, [r7, #20]
 8014f94:	8992      	ldrh	r2, [r2, #12]
 8014f96:	fb02 f303 	mul.w	r3, r2, r3
 8014f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f9c:	18d0      	adds	r0, r2, r3
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	899b      	ldrh	r3, [r3, #12]
 8014fa8:	461a      	mov	r2, r3
 8014faa:	f7fd ff6b 	bl	8012e84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	899b      	ldrh	r3, [r3, #12]
 8014fb2:	461a      	mov	r2, r3
 8014fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fb6:	fb02 f303 	mul.w	r3, r2, r3
 8014fba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014fbc:	e05c      	b.n	8015078 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	6a1b      	ldr	r3, [r3, #32]
 8014fc2:	69ba      	ldr	r2, [r7, #24]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d02e      	beq.n	8015026 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	7d1b      	ldrb	r3, [r3, #20]
 8014fcc:	b25b      	sxtb	r3, r3
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	da18      	bge.n	8015004 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	7858      	ldrb	r0, [r3, #1]
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	6a1a      	ldr	r2, [r3, #32]
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	f7fd fe8f 	bl	8012d04 <disk_write>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d004      	beq.n	8014ff6 <f_read+0x202>
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	2201      	movs	r2, #1
 8014ff0:	755a      	strb	r2, [r3, #21]
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	e059      	b.n	80150aa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	7d1b      	ldrb	r3, [r3, #20]
 8014ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ffe:	b2da      	uxtb	r2, r3
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	7858      	ldrb	r0, [r3, #1]
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801500e:	2301      	movs	r3, #1
 8015010:	69ba      	ldr	r2, [r7, #24]
 8015012:	f7fd fe57 	bl	8012cc4 <disk_read>
 8015016:	4603      	mov	r3, r0
 8015018:	2b00      	cmp	r3, #0
 801501a:	d004      	beq.n	8015026 <f_read+0x232>
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	2201      	movs	r2, #1
 8015020:	755a      	strb	r2, [r3, #21]
 8015022:	2301      	movs	r3, #1
 8015024:	e041      	b.n	80150aa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	69ba      	ldr	r2, [r7, #24]
 801502a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801502c:	697b      	ldr	r3, [r7, #20]
 801502e:	899b      	ldrh	r3, [r3, #12]
 8015030:	4618      	mov	r0, r3
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	699b      	ldr	r3, [r3, #24]
 8015036:	697a      	ldr	r2, [r7, #20]
 8015038:	8992      	ldrh	r2, [r2, #12]
 801503a:	fbb3 f1f2 	udiv	r1, r3, r2
 801503e:	fb02 f201 	mul.w	r2, r2, r1
 8015042:	1a9b      	subs	r3, r3, r2
 8015044:	1ac3      	subs	r3, r0, r3
 8015046:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8015048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	429a      	cmp	r2, r3
 801504e:	d901      	bls.n	8015054 <f_read+0x260>
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	699b      	ldr	r3, [r3, #24]
 801505e:	697a      	ldr	r2, [r7, #20]
 8015060:	8992      	ldrh	r2, [r2, #12]
 8015062:	fbb3 f0f2 	udiv	r0, r3, r2
 8015066:	fb02 f200 	mul.w	r2, r2, r0
 801506a:	1a9b      	subs	r3, r3, r2
 801506c:	440b      	add	r3, r1
 801506e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015070:	4619      	mov	r1, r3
 8015072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015074:	f7fd ff06 	bl	8012e84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8015078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801507c:	4413      	add	r3, r2
 801507e:	627b      	str	r3, [r7, #36]	; 0x24
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	699a      	ldr	r2, [r3, #24]
 8015084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015086:	441a      	add	r2, r3
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	619a      	str	r2, [r3, #24]
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	681a      	ldr	r2, [r3, #0]
 8015090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015092:	441a      	add	r2, r3
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	601a      	str	r2, [r3, #0]
 8015098:	687a      	ldr	r2, [r7, #4]
 801509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801509c:	1ad3      	subs	r3, r2, r3
 801509e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	f47f aee1 	bne.w	8014e6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80150a8:	2300      	movs	r3, #0
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3738      	adds	r7, #56	; 0x38
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}

080150b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b08c      	sub	sp, #48	; 0x30
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	60f8      	str	r0, [r7, #12]
 80150ba:	60b9      	str	r1, [r7, #8]
 80150bc:	607a      	str	r2, [r7, #4]
 80150be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80150c0:	68bb      	ldr	r3, [r7, #8]
 80150c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	2200      	movs	r2, #0
 80150c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	f107 0210 	add.w	r2, r7, #16
 80150d0:	4611      	mov	r1, r2
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7ff fc44 	bl	8014960 <validate>
 80150d8:	4603      	mov	r3, r0
 80150da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80150de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d107      	bne.n	80150f6 <f_write+0x44>
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	7d5b      	ldrb	r3, [r3, #21]
 80150ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80150ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d002      	beq.n	80150fc <f_write+0x4a>
 80150f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150fa:	e16a      	b.n	80153d2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	7d1b      	ldrb	r3, [r3, #20]
 8015100:	f003 0302 	and.w	r3, r3, #2
 8015104:	2b00      	cmp	r3, #0
 8015106:	d101      	bne.n	801510c <f_write+0x5a>
 8015108:	2307      	movs	r3, #7
 801510a:	e162      	b.n	80153d2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	699a      	ldr	r2, [r3, #24]
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	441a      	add	r2, r3
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	699b      	ldr	r3, [r3, #24]
 8015118:	429a      	cmp	r2, r3
 801511a:	f080 814c 	bcs.w	80153b6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	699b      	ldr	r3, [r3, #24]
 8015122:	43db      	mvns	r3, r3
 8015124:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015126:	e146      	b.n	80153b6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	699b      	ldr	r3, [r3, #24]
 801512c:	693a      	ldr	r2, [r7, #16]
 801512e:	8992      	ldrh	r2, [r2, #12]
 8015130:	fbb3 f1f2 	udiv	r1, r3, r2
 8015134:	fb02 f201 	mul.w	r2, r2, r1
 8015138:	1a9b      	subs	r3, r3, r2
 801513a:	2b00      	cmp	r3, #0
 801513c:	f040 80f1 	bne.w	8015322 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	699b      	ldr	r3, [r3, #24]
 8015144:	693a      	ldr	r2, [r7, #16]
 8015146:	8992      	ldrh	r2, [r2, #12]
 8015148:	fbb3 f3f2 	udiv	r3, r3, r2
 801514c:	693a      	ldr	r2, [r7, #16]
 801514e:	8952      	ldrh	r2, [r2, #10]
 8015150:	3a01      	subs	r2, #1
 8015152:	4013      	ands	r3, r2
 8015154:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d143      	bne.n	80151e4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	699b      	ldr	r3, [r3, #24]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d10c      	bne.n	801517e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	689b      	ldr	r3, [r3, #8]
 8015168:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801516c:	2b00      	cmp	r3, #0
 801516e:	d11a      	bne.n	80151a6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2100      	movs	r1, #0
 8015174:	4618      	mov	r0, r3
 8015176:	f7fe fbbc 	bl	80138f2 <create_chain>
 801517a:	62b8      	str	r0, [r7, #40]	; 0x28
 801517c:	e013      	b.n	80151a6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015182:	2b00      	cmp	r3, #0
 8015184:	d007      	beq.n	8015196 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	699b      	ldr	r3, [r3, #24]
 801518a:	4619      	mov	r1, r3
 801518c:	68f8      	ldr	r0, [r7, #12]
 801518e:	f7fe fc48 	bl	8013a22 <clmt_clust>
 8015192:	62b8      	str	r0, [r7, #40]	; 0x28
 8015194:	e007      	b.n	80151a6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8015196:	68fa      	ldr	r2, [r7, #12]
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	69db      	ldr	r3, [r3, #28]
 801519c:	4619      	mov	r1, r3
 801519e:	4610      	mov	r0, r2
 80151a0:	f7fe fba7 	bl	80138f2 <create_chain>
 80151a4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80151a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	f000 8109 	beq.w	80153c0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80151ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b0:	2b01      	cmp	r3, #1
 80151b2:	d104      	bne.n	80151be <f_write+0x10c>
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	2202      	movs	r2, #2
 80151b8:	755a      	strb	r2, [r3, #21]
 80151ba:	2302      	movs	r3, #2
 80151bc:	e109      	b.n	80153d2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80151be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151c4:	d104      	bne.n	80151d0 <f_write+0x11e>
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	2201      	movs	r2, #1
 80151ca:	755a      	strb	r2, [r3, #21]
 80151cc:	2301      	movs	r3, #1
 80151ce:	e100      	b.n	80153d2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80151d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	689b      	ldr	r3, [r3, #8]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d102      	bne.n	80151e4 <f_write+0x132>
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80151e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	7d1b      	ldrb	r3, [r3, #20]
 80151e8:	b25b      	sxtb	r3, r3
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	da18      	bge.n	8015220 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80151ee:	693b      	ldr	r3, [r7, #16]
 80151f0:	7858      	ldrb	r0, [r3, #1]
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	6a1a      	ldr	r2, [r3, #32]
 80151fc:	2301      	movs	r3, #1
 80151fe:	f7fd fd81 	bl	8012d04 <disk_write>
 8015202:	4603      	mov	r3, r0
 8015204:	2b00      	cmp	r3, #0
 8015206:	d004      	beq.n	8015212 <f_write+0x160>
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	2201      	movs	r2, #1
 801520c:	755a      	strb	r2, [r3, #21]
 801520e:	2301      	movs	r3, #1
 8015210:	e0df      	b.n	80153d2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	7d1b      	ldrb	r3, [r3, #20]
 8015216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801521a:	b2da      	uxtb	r2, r3
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015220:	693a      	ldr	r2, [r7, #16]
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	69db      	ldr	r3, [r3, #28]
 8015226:	4619      	mov	r1, r3
 8015228:	4610      	mov	r0, r2
 801522a:	f7fe f8f7 	bl	801341c <clust2sect>
 801522e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d104      	bne.n	8015240 <f_write+0x18e>
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	2202      	movs	r2, #2
 801523a:	755a      	strb	r2, [r3, #21]
 801523c:	2302      	movs	r3, #2
 801523e:	e0c8      	b.n	80153d2 <f_write+0x320>
			sect += csect;
 8015240:	697a      	ldr	r2, [r7, #20]
 8015242:	69bb      	ldr	r3, [r7, #24]
 8015244:	4413      	add	r3, r2
 8015246:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	899b      	ldrh	r3, [r3, #12]
 801524c:	461a      	mov	r2, r3
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	fbb3 f3f2 	udiv	r3, r3, r2
 8015254:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015256:	6a3b      	ldr	r3, [r7, #32]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d043      	beq.n	80152e4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801525c:	69ba      	ldr	r2, [r7, #24]
 801525e:	6a3b      	ldr	r3, [r7, #32]
 8015260:	4413      	add	r3, r2
 8015262:	693a      	ldr	r2, [r7, #16]
 8015264:	8952      	ldrh	r2, [r2, #10]
 8015266:	4293      	cmp	r3, r2
 8015268:	d905      	bls.n	8015276 <f_write+0x1c4>
					cc = fs->csize - csect;
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	895b      	ldrh	r3, [r3, #10]
 801526e:	461a      	mov	r2, r3
 8015270:	69bb      	ldr	r3, [r7, #24]
 8015272:	1ad3      	subs	r3, r2, r3
 8015274:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015276:	693b      	ldr	r3, [r7, #16]
 8015278:	7858      	ldrb	r0, [r3, #1]
 801527a:	6a3b      	ldr	r3, [r7, #32]
 801527c:	697a      	ldr	r2, [r7, #20]
 801527e:	69f9      	ldr	r1, [r7, #28]
 8015280:	f7fd fd40 	bl	8012d04 <disk_write>
 8015284:	4603      	mov	r3, r0
 8015286:	2b00      	cmp	r3, #0
 8015288:	d004      	beq.n	8015294 <f_write+0x1e2>
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	2201      	movs	r2, #1
 801528e:	755a      	strb	r2, [r3, #21]
 8015290:	2301      	movs	r3, #1
 8015292:	e09e      	b.n	80153d2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	6a1a      	ldr	r2, [r3, #32]
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	1ad3      	subs	r3, r2, r3
 801529c:	6a3a      	ldr	r2, [r7, #32]
 801529e:	429a      	cmp	r2, r3
 80152a0:	d918      	bls.n	80152d4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	6a1a      	ldr	r2, [r3, #32]
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	1ad3      	subs	r3, r2, r3
 80152b0:	693a      	ldr	r2, [r7, #16]
 80152b2:	8992      	ldrh	r2, [r2, #12]
 80152b4:	fb02 f303 	mul.w	r3, r2, r3
 80152b8:	69fa      	ldr	r2, [r7, #28]
 80152ba:	18d1      	adds	r1, r2, r3
 80152bc:	693b      	ldr	r3, [r7, #16]
 80152be:	899b      	ldrh	r3, [r3, #12]
 80152c0:	461a      	mov	r2, r3
 80152c2:	f7fd fddf 	bl	8012e84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	7d1b      	ldrb	r3, [r3, #20]
 80152ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152ce:	b2da      	uxtb	r2, r3
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80152d4:	693b      	ldr	r3, [r7, #16]
 80152d6:	899b      	ldrh	r3, [r3, #12]
 80152d8:	461a      	mov	r2, r3
 80152da:	6a3b      	ldr	r3, [r7, #32]
 80152dc:	fb02 f303 	mul.w	r3, r2, r3
 80152e0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80152e2:	e04b      	b.n	801537c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	6a1b      	ldr	r3, [r3, #32]
 80152e8:	697a      	ldr	r2, [r7, #20]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d016      	beq.n	801531c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	699a      	ldr	r2, [r3, #24]
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d210      	bcs.n	801531c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80152fa:	693b      	ldr	r3, [r7, #16]
 80152fc:	7858      	ldrb	r0, [r3, #1]
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015304:	2301      	movs	r3, #1
 8015306:	697a      	ldr	r2, [r7, #20]
 8015308:	f7fd fcdc 	bl	8012cc4 <disk_read>
 801530c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801530e:	2b00      	cmp	r3, #0
 8015310:	d004      	beq.n	801531c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	2201      	movs	r2, #1
 8015316:	755a      	strb	r2, [r3, #21]
 8015318:	2301      	movs	r3, #1
 801531a:	e05a      	b.n	80153d2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	697a      	ldr	r2, [r7, #20]
 8015320:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015322:	693b      	ldr	r3, [r7, #16]
 8015324:	899b      	ldrh	r3, [r3, #12]
 8015326:	4618      	mov	r0, r3
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	699b      	ldr	r3, [r3, #24]
 801532c:	693a      	ldr	r2, [r7, #16]
 801532e:	8992      	ldrh	r2, [r2, #12]
 8015330:	fbb3 f1f2 	udiv	r1, r3, r2
 8015334:	fb02 f201 	mul.w	r2, r2, r1
 8015338:	1a9b      	subs	r3, r3, r2
 801533a:	1ac3      	subs	r3, r0, r3
 801533c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801533e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	429a      	cmp	r2, r3
 8015344:	d901      	bls.n	801534a <f_write+0x298>
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	699b      	ldr	r3, [r3, #24]
 8015354:	693a      	ldr	r2, [r7, #16]
 8015356:	8992      	ldrh	r2, [r2, #12]
 8015358:	fbb3 f0f2 	udiv	r0, r3, r2
 801535c:	fb02 f200 	mul.w	r2, r2, r0
 8015360:	1a9b      	subs	r3, r3, r2
 8015362:	440b      	add	r3, r1
 8015364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015366:	69f9      	ldr	r1, [r7, #28]
 8015368:	4618      	mov	r0, r3
 801536a:	f7fd fd8b 	bl	8012e84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	7d1b      	ldrb	r3, [r3, #20]
 8015372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015376:	b2da      	uxtb	r2, r3
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801537c:	69fa      	ldr	r2, [r7, #28]
 801537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015380:	4413      	add	r3, r2
 8015382:	61fb      	str	r3, [r7, #28]
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	699a      	ldr	r2, [r3, #24]
 8015388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801538a:	441a      	add	r2, r3
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	619a      	str	r2, [r3, #24]
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	68da      	ldr	r2, [r3, #12]
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	699b      	ldr	r3, [r3, #24]
 8015398:	429a      	cmp	r2, r3
 801539a:	bf38      	it	cc
 801539c:	461a      	movcc	r2, r3
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	60da      	str	r2, [r3, #12]
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	681a      	ldr	r2, [r3, #0]
 80153a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a8:	441a      	add	r2, r3
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	601a      	str	r2, [r3, #0]
 80153ae:	687a      	ldr	r2, [r7, #4]
 80153b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153b2:	1ad3      	subs	r3, r2, r3
 80153b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	f47f aeb5 	bne.w	8015128 <f_write+0x76>
 80153be:	e000      	b.n	80153c2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80153c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	7d1b      	ldrb	r3, [r3, #20]
 80153c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153ca:	b2da      	uxtb	r2, r3
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80153d0:	2300      	movs	r3, #0
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3730      	adds	r7, #48	; 0x30
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
	...

080153dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b086      	sub	sp, #24
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f107 0208 	add.w	r2, r7, #8
 80153ea:	4611      	mov	r1, r2
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7ff fab7 	bl	8014960 <validate>
 80153f2:	4603      	mov	r3, r0
 80153f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80153f6:	7dfb      	ldrb	r3, [r7, #23]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d167      	bne.n	80154cc <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	7d1b      	ldrb	r3, [r3, #20]
 8015400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015404:	2b00      	cmp	r3, #0
 8015406:	d061      	beq.n	80154cc <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	7d1b      	ldrb	r3, [r3, #20]
 801540c:	b25b      	sxtb	r3, r3
 801540e:	2b00      	cmp	r3, #0
 8015410:	da15      	bge.n	801543e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015412:	68bb      	ldr	r3, [r7, #8]
 8015414:	7858      	ldrb	r0, [r3, #1]
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	6a1a      	ldr	r2, [r3, #32]
 8015420:	2301      	movs	r3, #1
 8015422:	f7fd fc6f 	bl	8012d04 <disk_write>
 8015426:	4603      	mov	r3, r0
 8015428:	2b00      	cmp	r3, #0
 801542a:	d001      	beq.n	8015430 <f_sync+0x54>
 801542c:	2301      	movs	r3, #1
 801542e:	e04e      	b.n	80154ce <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	7d1b      	ldrb	r3, [r3, #20]
 8015434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015438:	b2da      	uxtb	r2, r3
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801543e:	4b26      	ldr	r3, [pc, #152]	; (80154d8 <f_sync+0xfc>)
 8015440:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015442:	68ba      	ldr	r2, [r7, #8]
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015448:	4619      	mov	r1, r3
 801544a:	4610      	mov	r0, r2
 801544c:	f7fd ff48 	bl	80132e0 <move_window>
 8015450:	4603      	mov	r3, r0
 8015452:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015454:	7dfb      	ldrb	r3, [r7, #23]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d138      	bne.n	80154cc <f_sync+0xf0>
					dir = fp->dir_ptr;
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801545e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	330b      	adds	r3, #11
 8015464:	781a      	ldrb	r2, [r3, #0]
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	330b      	adds	r3, #11
 801546a:	f042 0220 	orr.w	r2, r2, #32
 801546e:	b2d2      	uxtb	r2, r2
 8015470:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6818      	ldr	r0, [r3, #0]
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	689b      	ldr	r3, [r3, #8]
 801547a:	461a      	mov	r2, r3
 801547c:	68f9      	ldr	r1, [r7, #12]
 801547e:	f7fe fccd 	bl	8013e1c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	f103 021c 	add.w	r2, r3, #28
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	4619      	mov	r1, r3
 801548e:	4610      	mov	r0, r2
 8015490:	f7fd fccc 	bl	8012e2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	3316      	adds	r3, #22
 8015498:	6939      	ldr	r1, [r7, #16]
 801549a:	4618      	mov	r0, r3
 801549c:	f7fd fcc6 	bl	8012e2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	3312      	adds	r3, #18
 80154a4:	2100      	movs	r1, #0
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7fd fca5 	bl	8012df6 <st_word>
					fs->wflag = 1;
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	2201      	movs	r2, #1
 80154b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80154b2:	68bb      	ldr	r3, [r7, #8]
 80154b4:	4618      	mov	r0, r3
 80154b6:	f7fd ff41 	bl	801333c <sync_fs>
 80154ba:	4603      	mov	r3, r0
 80154bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	7d1b      	ldrb	r3, [r3, #20]
 80154c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80154c6:	b2da      	uxtb	r2, r3
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80154cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	3718      	adds	r7, #24
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
 80154d6:	bf00      	nop
 80154d8:	274a0000 	.word	0x274a0000

080154dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b084      	sub	sp, #16
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	f7ff ff79 	bl	80153dc <f_sync>
 80154ea:	4603      	mov	r3, r0
 80154ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80154ee:	7bfb      	ldrb	r3, [r7, #15]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d118      	bne.n	8015526 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f107 0208 	add.w	r2, r7, #8
 80154fa:	4611      	mov	r1, r2
 80154fc:	4618      	mov	r0, r3
 80154fe:	f7ff fa2f 	bl	8014960 <validate>
 8015502:	4603      	mov	r3, r0
 8015504:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015506:	7bfb      	ldrb	r3, [r7, #15]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d10c      	bne.n	8015526 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	691b      	ldr	r3, [r3, #16]
 8015510:	4618      	mov	r0, r3
 8015512:	f7fd fe41 	bl	8013198 <dec_lock>
 8015516:	4603      	mov	r3, r0
 8015518:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801551a:	7bfb      	ldrb	r3, [r7, #15]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d102      	bne.n	8015526 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2200      	movs	r2, #0
 8015524:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015526:	7bfb      	ldrb	r3, [r7, #15]
}
 8015528:	4618      	mov	r0, r3
 801552a:	3710      	adds	r7, #16
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}

08015530 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015530:	b590      	push	{r4, r7, lr}
 8015532:	b091      	sub	sp, #68	; 0x44
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8015538:	f107 0108 	add.w	r1, r7, #8
 801553c:	1d3b      	adds	r3, r7, #4
 801553e:	2200      	movs	r2, #0
 8015540:	4618      	mov	r0, r3
 8015542:	f7fe ff87 	bl	8014454 <find_volume>
 8015546:	4603      	mov	r3, r0
 8015548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801554c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015550:	2b00      	cmp	r3, #0
 8015552:	d131      	bne.n	80155b8 <f_chdir+0x88>
		dj.obj.fs = fs;
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8015558:	687a      	ldr	r2, [r7, #4]
 801555a:	f107 030c 	add.w	r3, r7, #12
 801555e:	4611      	mov	r1, r2
 8015560:	4618      	mov	r0, r3
 8015562:	f7fe fe47 	bl	80141f4 <follow_path>
 8015566:	4603      	mov	r3, r0
 8015568:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 801556c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015570:	2b00      	cmp	r3, #0
 8015572:	d11a      	bne.n	80155aa <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015574:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015578:	b25b      	sxtb	r3, r3
 801557a:	2b00      	cmp	r3, #0
 801557c:	da03      	bge.n	8015586 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	697a      	ldr	r2, [r7, #20]
 8015582:	619a      	str	r2, [r3, #24]
 8015584:	e011      	b.n	80155aa <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8015586:	7cbb      	ldrb	r3, [r7, #18]
 8015588:	f003 0310 	and.w	r3, r3, #16
 801558c:	2b00      	cmp	r3, #0
 801558e:	d009      	beq.n	80155a4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015594:	68bc      	ldr	r4, [r7, #8]
 8015596:	4611      	mov	r1, r2
 8015598:	4618      	mov	r0, r3
 801559a:	f7fe fc20 	bl	8013dde <ld_clust>
 801559e:	4603      	mov	r3, r0
 80155a0:	61a3      	str	r3, [r4, #24]
 80155a2:	e002      	b.n	80155aa <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80155a4:	2305      	movs	r3, #5
 80155a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80155aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155ae:	2b04      	cmp	r3, #4
 80155b0:	d102      	bne.n	80155b8 <f_chdir+0x88>
 80155b2:	2305      	movs	r3, #5
 80155b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80155b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80155bc:	4618      	mov	r0, r3
 80155be:	3744      	adds	r7, #68	; 0x44
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd90      	pop	{r4, r7, pc}

080155c4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b090      	sub	sp, #64	; 0x40
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f107 0208 	add.w	r2, r7, #8
 80155d4:	4611      	mov	r1, r2
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7ff f9c2 	bl	8014960 <validate>
 80155dc:	4603      	mov	r3, r0
 80155de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80155e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d103      	bne.n	80155f2 <f_lseek+0x2e>
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	7d5b      	ldrb	r3, [r3, #21]
 80155ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80155f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d002      	beq.n	8015600 <f_lseek+0x3c>
 80155fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155fe:	e201      	b.n	8015a04 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015604:	2b00      	cmp	r3, #0
 8015606:	f000 80d9 	beq.w	80157bc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015610:	d15a      	bne.n	80156c8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015616:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801561a:	1d1a      	adds	r2, r3, #4
 801561c:	627a      	str	r2, [r7, #36]	; 0x24
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	617b      	str	r3, [r7, #20]
 8015622:	2302      	movs	r3, #2
 8015624:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	689b      	ldr	r3, [r3, #8]
 801562a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801562e:	2b00      	cmp	r3, #0
 8015630:	d03a      	beq.n	80156a8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015634:	613b      	str	r3, [r7, #16]
 8015636:	2300      	movs	r3, #0
 8015638:	62fb      	str	r3, [r7, #44]	; 0x2c
 801563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801563c:	3302      	adds	r3, #2
 801563e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8015640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015642:	60fb      	str	r3, [r7, #12]
 8015644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015646:	3301      	adds	r3, #1
 8015648:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801564e:	4618      	mov	r0, r3
 8015650:	f7fd ff03 	bl	801345a <get_fat>
 8015654:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015658:	2b01      	cmp	r3, #1
 801565a:	d804      	bhi.n	8015666 <f_lseek+0xa2>
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2202      	movs	r2, #2
 8015660:	755a      	strb	r2, [r3, #21]
 8015662:	2302      	movs	r3, #2
 8015664:	e1ce      	b.n	8015a04 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801566c:	d104      	bne.n	8015678 <f_lseek+0xb4>
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2201      	movs	r2, #1
 8015672:	755a      	strb	r2, [r3, #21]
 8015674:	2301      	movs	r3, #1
 8015676:	e1c5      	b.n	8015a04 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	3301      	adds	r3, #1
 801567c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801567e:	429a      	cmp	r2, r3
 8015680:	d0de      	beq.n	8015640 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8015682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	429a      	cmp	r2, r3
 8015688:	d809      	bhi.n	801569e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568c:	1d1a      	adds	r2, r3, #4
 801568e:	627a      	str	r2, [r7, #36]	; 0x24
 8015690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015692:	601a      	str	r2, [r3, #0]
 8015694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015696:	1d1a      	adds	r2, r3, #4
 8015698:	627a      	str	r2, [r7, #36]	; 0x24
 801569a:	693a      	ldr	r2, [r7, #16]
 801569c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	69db      	ldr	r3, [r3, #28]
 80156a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156a4:	429a      	cmp	r2, r3
 80156a6:	d3c4      	bcc.n	8015632 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156ae:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80156b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156b2:	697b      	ldr	r3, [r7, #20]
 80156b4:	429a      	cmp	r2, r3
 80156b6:	d803      	bhi.n	80156c0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80156b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ba:	2200      	movs	r2, #0
 80156bc:	601a      	str	r2, [r3, #0]
 80156be:	e19f      	b.n	8015a00 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80156c0:	2311      	movs	r3, #17
 80156c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80156c6:	e19b      	b.n	8015a00 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	68db      	ldr	r3, [r3, #12]
 80156cc:	683a      	ldr	r2, [r7, #0]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d902      	bls.n	80156d8 <f_lseek+0x114>
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	683a      	ldr	r2, [r7, #0]
 80156dc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	f000 818d 	beq.w	8015a00 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	3b01      	subs	r3, #1
 80156ea:	4619      	mov	r1, r3
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f7fe f998 	bl	8013a22 <clmt_clust>
 80156f2:	4602      	mov	r2, r0
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80156f8:	68ba      	ldr	r2, [r7, #8]
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	69db      	ldr	r3, [r3, #28]
 80156fe:	4619      	mov	r1, r3
 8015700:	4610      	mov	r0, r2
 8015702:	f7fd fe8b 	bl	801341c <clust2sect>
 8015706:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015708:	69bb      	ldr	r3, [r7, #24]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d104      	bne.n	8015718 <f_lseek+0x154>
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2202      	movs	r2, #2
 8015712:	755a      	strb	r2, [r3, #21]
 8015714:	2302      	movs	r3, #2
 8015716:	e175      	b.n	8015a04 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	3b01      	subs	r3, #1
 801571c:	68ba      	ldr	r2, [r7, #8]
 801571e:	8992      	ldrh	r2, [r2, #12]
 8015720:	fbb3 f3f2 	udiv	r3, r3, r2
 8015724:	68ba      	ldr	r2, [r7, #8]
 8015726:	8952      	ldrh	r2, [r2, #10]
 8015728:	3a01      	subs	r2, #1
 801572a:	4013      	ands	r3, r2
 801572c:	69ba      	ldr	r2, [r7, #24]
 801572e:	4413      	add	r3, r2
 8015730:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	699b      	ldr	r3, [r3, #24]
 8015736:	68ba      	ldr	r2, [r7, #8]
 8015738:	8992      	ldrh	r2, [r2, #12]
 801573a:	fbb3 f1f2 	udiv	r1, r3, r2
 801573e:	fb02 f201 	mul.w	r2, r2, r1
 8015742:	1a9b      	subs	r3, r3, r2
 8015744:	2b00      	cmp	r3, #0
 8015746:	f000 815b 	beq.w	8015a00 <f_lseek+0x43c>
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	6a1b      	ldr	r3, [r3, #32]
 801574e:	69ba      	ldr	r2, [r7, #24]
 8015750:	429a      	cmp	r2, r3
 8015752:	f000 8155 	beq.w	8015a00 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	7d1b      	ldrb	r3, [r3, #20]
 801575a:	b25b      	sxtb	r3, r3
 801575c:	2b00      	cmp	r3, #0
 801575e:	da18      	bge.n	8015792 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	7858      	ldrb	r0, [r3, #1]
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	6a1a      	ldr	r2, [r3, #32]
 801576e:	2301      	movs	r3, #1
 8015770:	f7fd fac8 	bl	8012d04 <disk_write>
 8015774:	4603      	mov	r3, r0
 8015776:	2b00      	cmp	r3, #0
 8015778:	d004      	beq.n	8015784 <f_lseek+0x1c0>
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	2201      	movs	r2, #1
 801577e:	755a      	strb	r2, [r3, #21]
 8015780:	2301      	movs	r3, #1
 8015782:	e13f      	b.n	8015a04 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	7d1b      	ldrb	r3, [r3, #20]
 8015788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801578c:	b2da      	uxtb	r2, r3
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	7858      	ldrb	r0, [r3, #1]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801579c:	2301      	movs	r3, #1
 801579e:	69ba      	ldr	r2, [r7, #24]
 80157a0:	f7fd fa90 	bl	8012cc4 <disk_read>
 80157a4:	4603      	mov	r3, r0
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d004      	beq.n	80157b4 <f_lseek+0x1f0>
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2201      	movs	r2, #1
 80157ae:	755a      	strb	r2, [r3, #21]
 80157b0:	2301      	movs	r3, #1
 80157b2:	e127      	b.n	8015a04 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	69ba      	ldr	r2, [r7, #24]
 80157b8:	621a      	str	r2, [r3, #32]
 80157ba:	e121      	b.n	8015a00 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	68db      	ldr	r3, [r3, #12]
 80157c0:	683a      	ldr	r2, [r7, #0]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d908      	bls.n	80157d8 <f_lseek+0x214>
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	7d1b      	ldrb	r3, [r3, #20]
 80157ca:	f003 0302 	and.w	r3, r3, #2
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d102      	bne.n	80157d8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	68db      	ldr	r3, [r3, #12]
 80157d6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	699b      	ldr	r3, [r3, #24]
 80157dc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80157de:	2300      	movs	r3, #0
 80157e0:	637b      	str	r3, [r7, #52]	; 0x34
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157e6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80157e8:	683b      	ldr	r3, [r7, #0]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	f000 80b5 	beq.w	801595a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	895b      	ldrh	r3, [r3, #10]
 80157f4:	461a      	mov	r2, r3
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	899b      	ldrh	r3, [r3, #12]
 80157fa:	fb03 f302 	mul.w	r3, r3, r2
 80157fe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015800:	6a3b      	ldr	r3, [r7, #32]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d01b      	beq.n	801583e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015806:	683b      	ldr	r3, [r7, #0]
 8015808:	1e5a      	subs	r2, r3, #1
 801580a:	69fb      	ldr	r3, [r7, #28]
 801580c:	fbb2 f2f3 	udiv	r2, r2, r3
 8015810:	6a3b      	ldr	r3, [r7, #32]
 8015812:	1e59      	subs	r1, r3, #1
 8015814:	69fb      	ldr	r3, [r7, #28]
 8015816:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801581a:	429a      	cmp	r2, r3
 801581c:	d30f      	bcc.n	801583e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801581e:	6a3b      	ldr	r3, [r7, #32]
 8015820:	1e5a      	subs	r2, r3, #1
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	425b      	negs	r3, r3
 8015826:	401a      	ands	r2, r3
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	699b      	ldr	r3, [r3, #24]
 8015830:	683a      	ldr	r2, [r7, #0]
 8015832:	1ad3      	subs	r3, r2, r3
 8015834:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	69db      	ldr	r3, [r3, #28]
 801583a:	63bb      	str	r3, [r7, #56]	; 0x38
 801583c:	e022      	b.n	8015884 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	689b      	ldr	r3, [r3, #8]
 8015842:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015846:	2b00      	cmp	r3, #0
 8015848:	d119      	bne.n	801587e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	2100      	movs	r1, #0
 801584e:	4618      	mov	r0, r3
 8015850:	f7fe f84f 	bl	80138f2 <create_chain>
 8015854:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015858:	2b01      	cmp	r3, #1
 801585a:	d104      	bne.n	8015866 <f_lseek+0x2a2>
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2202      	movs	r2, #2
 8015860:	755a      	strb	r2, [r3, #21]
 8015862:	2302      	movs	r3, #2
 8015864:	e0ce      	b.n	8015a04 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015868:	f1b3 3fff 	cmp.w	r3, #4294967295
 801586c:	d104      	bne.n	8015878 <f_lseek+0x2b4>
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	2201      	movs	r2, #1
 8015872:	755a      	strb	r2, [r3, #21]
 8015874:	2301      	movs	r3, #1
 8015876:	e0c5      	b.n	8015a04 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801587c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015882:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8015884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015886:	2b00      	cmp	r3, #0
 8015888:	d067      	beq.n	801595a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801588a:	e03a      	b.n	8015902 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801588c:	683a      	ldr	r2, [r7, #0]
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	1ad3      	subs	r3, r2, r3
 8015892:	603b      	str	r3, [r7, #0]
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	699a      	ldr	r2, [r3, #24]
 8015898:	69fb      	ldr	r3, [r7, #28]
 801589a:	441a      	add	r2, r3
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	7d1b      	ldrb	r3, [r3, #20]
 80158a4:	f003 0302 	and.w	r3, r3, #2
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d00b      	beq.n	80158c4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fe f81e 	bl	80138f2 <create_chain>
 80158b6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80158b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d108      	bne.n	80158d0 <f_lseek+0x30c>
							ofs = 0; break;
 80158be:	2300      	movs	r3, #0
 80158c0:	603b      	str	r3, [r7, #0]
 80158c2:	e022      	b.n	801590a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7fd fdc6 	bl	801345a <get_fat>
 80158ce:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158d6:	d104      	bne.n	80158e2 <f_lseek+0x31e>
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2201      	movs	r2, #1
 80158dc:	755a      	strb	r2, [r3, #21]
 80158de:	2301      	movs	r3, #1
 80158e0:	e090      	b.n	8015a04 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80158e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158e4:	2b01      	cmp	r3, #1
 80158e6:	d904      	bls.n	80158f2 <f_lseek+0x32e>
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	69db      	ldr	r3, [r3, #28]
 80158ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d304      	bcc.n	80158fc <f_lseek+0x338>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2202      	movs	r2, #2
 80158f6:	755a      	strb	r2, [r3, #21]
 80158f8:	2302      	movs	r3, #2
 80158fa:	e083      	b.n	8015a04 <f_lseek+0x440>
					fp->clust = clst;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015900:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015902:	683a      	ldr	r2, [r7, #0]
 8015904:	69fb      	ldr	r3, [r7, #28]
 8015906:	429a      	cmp	r2, r3
 8015908:	d8c0      	bhi.n	801588c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	699a      	ldr	r2, [r3, #24]
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	441a      	add	r2, r3
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	899b      	ldrh	r3, [r3, #12]
 801591a:	461a      	mov	r2, r3
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	fbb3 f1f2 	udiv	r1, r3, r2
 8015922:	fb02 f201 	mul.w	r2, r2, r1
 8015926:	1a9b      	subs	r3, r3, r2
 8015928:	2b00      	cmp	r3, #0
 801592a:	d016      	beq.n	801595a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801592c:	68bb      	ldr	r3, [r7, #8]
 801592e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015930:	4618      	mov	r0, r3
 8015932:	f7fd fd73 	bl	801341c <clust2sect>
 8015936:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801593a:	2b00      	cmp	r3, #0
 801593c:	d104      	bne.n	8015948 <f_lseek+0x384>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	2202      	movs	r2, #2
 8015942:	755a      	strb	r2, [r3, #21]
 8015944:	2302      	movs	r3, #2
 8015946:	e05d      	b.n	8015a04 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8015948:	68bb      	ldr	r3, [r7, #8]
 801594a:	899b      	ldrh	r3, [r3, #12]
 801594c:	461a      	mov	r2, r3
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	fbb3 f3f2 	udiv	r3, r3, r2
 8015954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015956:	4413      	add	r3, r2
 8015958:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	699a      	ldr	r2, [r3, #24]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	68db      	ldr	r3, [r3, #12]
 8015962:	429a      	cmp	r2, r3
 8015964:	d90a      	bls.n	801597c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	699a      	ldr	r2, [r3, #24]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	7d1b      	ldrb	r3, [r3, #20]
 8015972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015976:	b2da      	uxtb	r2, r3
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	699b      	ldr	r3, [r3, #24]
 8015980:	68ba      	ldr	r2, [r7, #8]
 8015982:	8992      	ldrh	r2, [r2, #12]
 8015984:	fbb3 f1f2 	udiv	r1, r3, r2
 8015988:	fb02 f201 	mul.w	r2, r2, r1
 801598c:	1a9b      	subs	r3, r3, r2
 801598e:	2b00      	cmp	r3, #0
 8015990:	d036      	beq.n	8015a00 <f_lseek+0x43c>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6a1b      	ldr	r3, [r3, #32]
 8015996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015998:	429a      	cmp	r2, r3
 801599a:	d031      	beq.n	8015a00 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	7d1b      	ldrb	r3, [r3, #20]
 80159a0:	b25b      	sxtb	r3, r3
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	da18      	bge.n	80159d8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80159a6:	68bb      	ldr	r3, [r7, #8]
 80159a8:	7858      	ldrb	r0, [r3, #1]
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6a1a      	ldr	r2, [r3, #32]
 80159b4:	2301      	movs	r3, #1
 80159b6:	f7fd f9a5 	bl	8012d04 <disk_write>
 80159ba:	4603      	mov	r3, r0
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d004      	beq.n	80159ca <f_lseek+0x406>
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2201      	movs	r2, #1
 80159c4:	755a      	strb	r2, [r3, #21]
 80159c6:	2301      	movs	r3, #1
 80159c8:	e01c      	b.n	8015a04 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	7d1b      	ldrb	r3, [r3, #20]
 80159ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159d2:	b2da      	uxtb	r2, r3
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	7858      	ldrb	r0, [r3, #1]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80159e2:	2301      	movs	r3, #1
 80159e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80159e6:	f7fd f96d 	bl	8012cc4 <disk_read>
 80159ea:	4603      	mov	r3, r0
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d004      	beq.n	80159fa <f_lseek+0x436>
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2201      	movs	r2, #1
 80159f4:	755a      	strb	r2, [r3, #21]
 80159f6:	2301      	movs	r3, #1
 80159f8:	e004      	b.n	8015a04 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80159fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	3740      	adds	r7, #64	; 0x40
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}

08015a0c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b09e      	sub	sp, #120	; 0x78
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8015a14:	2300      	movs	r3, #0
 8015a16:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015a18:	f107 010c 	add.w	r1, r7, #12
 8015a1c:	1d3b      	adds	r3, r7, #4
 8015a1e:	2202      	movs	r2, #2
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7fe fd17 	bl	8014454 <find_volume>
 8015a26:	4603      	mov	r3, r0
 8015a28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8015a30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	f040 80a4 	bne.w	8015b82 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8015a3a:	687a      	ldr	r2, [r7, #4]
 8015a3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015a40:	4611      	mov	r1, r2
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7fe fbd6 	bl	80141f4 <follow_path>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8015a4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d108      	bne.n	8015a68 <f_unlink+0x5c>
 8015a56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015a5a:	f003 0320 	and.w	r3, r3, #32
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d002      	beq.n	8015a68 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8015a62:	2306      	movs	r3, #6
 8015a64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8015a68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d108      	bne.n	8015a82 <f_unlink+0x76>
 8015a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015a74:	2102      	movs	r1, #2
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7fd fa82 	bl	8012f80 <chk_lock>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8015a82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d17b      	bne.n	8015b82 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8015a8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8015a8e:	b25b      	sxtb	r3, r3
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	da03      	bge.n	8015a9c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8015a94:	2306      	movs	r3, #6
 8015a96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8015a9a:	e008      	b.n	8015aae <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8015a9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015aa0:	f003 0301 	and.w	r3, r3, #1
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d002      	beq.n	8015aae <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8015aa8:	2307      	movs	r3, #7
 8015aaa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8015aae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d13d      	bne.n	8015b32 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015aba:	4611      	mov	r1, r2
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7fe f98e 	bl	8013dde <ld_clust>
 8015ac2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8015ac4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015ac8:	f003 0310 	and.w	r3, r3, #16
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d030      	beq.n	8015b32 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	699b      	ldr	r3, [r3, #24]
 8015ad4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d103      	bne.n	8015ae2 <f_unlink+0xd6>
						res = FR_DENIED;
 8015ada:	2307      	movs	r3, #7
 8015adc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8015ae0:	e027      	b.n	8015b32 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8015ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015ae8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8015aea:	f107 0310 	add.w	r3, r7, #16
 8015aee:	2100      	movs	r1, #0
 8015af0:	4618      	mov	r0, r3
 8015af2:	f7fd ffce 	bl	8013a92 <dir_sdi>
 8015af6:	4603      	mov	r3, r0
 8015af8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8015afc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d116      	bne.n	8015b32 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8015b04:	f107 0310 	add.w	r3, r7, #16
 8015b08:	2100      	movs	r1, #0
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f7fe f9a6 	bl	8013e5c <dir_read>
 8015b10:	4603      	mov	r3, r0
 8015b12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8015b16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d102      	bne.n	8015b24 <f_unlink+0x118>
 8015b1e:	2307      	movs	r3, #7
 8015b20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8015b24:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b28:	2b04      	cmp	r3, #4
 8015b2a:	d102      	bne.n	8015b32 <f_unlink+0x126>
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8015b32:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d123      	bne.n	8015b82 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8015b3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7fe fa70 	bl	8014024 <dir_remove>
 8015b44:	4603      	mov	r3, r0
 8015b46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8015b4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d10c      	bne.n	8015b6c <f_unlink+0x160>
 8015b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d009      	beq.n	8015b6c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8015b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7fd fe61 	bl	8013828 <remove_chain>
 8015b66:	4603      	mov	r3, r0
 8015b68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8015b6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d106      	bne.n	8015b82 <f_unlink+0x176>
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7fd fbe0 	bl	801333c <sync_fs>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015b82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3778      	adds	r7, #120	; 0x78
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}
	...

08015b90 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b096      	sub	sp, #88	; 0x58
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015b98:	f107 0108 	add.w	r1, r7, #8
 8015b9c:	1d3b      	adds	r3, r7, #4
 8015b9e:	2202      	movs	r2, #2
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7fe fc57 	bl	8014454 <find_volume>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8015bac:	68bb      	ldr	r3, [r7, #8]
 8015bae:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8015bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	f040 80fe 	bne.w	8015db6 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015bba:	687a      	ldr	r2, [r7, #4]
 8015bbc:	f107 030c 	add.w	r3, r7, #12
 8015bc0:	4611      	mov	r1, r2
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7fe fb16 	bl	80141f4 <follow_path>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015bce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d102      	bne.n	8015bdc <f_mkdir+0x4c>
 8015bd6:	2308      	movs	r3, #8
 8015bd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8015bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015be0:	2b04      	cmp	r3, #4
 8015be2:	d108      	bne.n	8015bf6 <f_mkdir+0x66>
 8015be4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015be8:	f003 0320 	and.w	r3, r3, #32
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d002      	beq.n	8015bf6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8015bf0:	2306      	movs	r3, #6
 8015bf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8015bf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015bfa:	2b04      	cmp	r3, #4
 8015bfc:	f040 80db 	bne.w	8015db6 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015c00:	f107 030c 	add.w	r3, r7, #12
 8015c04:	2100      	movs	r1, #0
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7fd fe73 	bl	80138f2 <create_chain>
 8015c0c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015c0e:	68bb      	ldr	r3, [r7, #8]
 8015c10:	895b      	ldrh	r3, [r3, #10]
 8015c12:	461a      	mov	r2, r3
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	899b      	ldrh	r3, [r3, #12]
 8015c18:	fb03 f302 	mul.w	r3, r3, r2
 8015c1c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d102      	bne.n	8015c30 <f_mkdir+0xa0>
 8015c2a:	2307      	movs	r3, #7
 8015c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8015c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c32:	2b01      	cmp	r3, #1
 8015c34:	d102      	bne.n	8015c3c <f_mkdir+0xac>
 8015c36:	2302      	movs	r3, #2
 8015c38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c42:	d102      	bne.n	8015c4a <f_mkdir+0xba>
 8015c44:	2301      	movs	r3, #1
 8015c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d106      	bne.n	8015c60 <f_mkdir+0xd0>
 8015c52:	68bb      	ldr	r3, [r7, #8]
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7fd faff 	bl	8013258 <sync_window>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8015c60:	4b58      	ldr	r3, [pc, #352]	; (8015dc4 <f_mkdir+0x234>)
 8015c62:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015c64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d16c      	bne.n	8015d46 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015c70:	4618      	mov	r0, r3
 8015c72:	f7fd fbd3 	bl	801341c <clust2sect>
 8015c76:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	3338      	adds	r3, #56	; 0x38
 8015c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8015c7e:	68bb      	ldr	r3, [r7, #8]
 8015c80:	899b      	ldrh	r3, [r3, #12]
 8015c82:	461a      	mov	r2, r3
 8015c84:	2100      	movs	r1, #0
 8015c86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015c88:	f7fd f91d 	bl	8012ec6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015c8c:	220b      	movs	r2, #11
 8015c8e:	2120      	movs	r1, #32
 8015c90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015c92:	f7fd f918 	bl	8012ec6 <mem_set>
					dir[DIR_Name] = '.';
 8015c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c98:	222e      	movs	r2, #46	; 0x2e
 8015c9a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c9e:	330b      	adds	r3, #11
 8015ca0:	2210      	movs	r2, #16
 8015ca2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ca6:	3316      	adds	r3, #22
 8015ca8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7fd f8be 	bl	8012e2c <st_dword>
					st_clust(fs, dir, dcl);
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f7fe f8b0 	bl	8013e1c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cbe:	3320      	adds	r3, #32
 8015cc0:	2220      	movs	r2, #32
 8015cc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f7fd f8dd 	bl	8012e84 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ccc:	3321      	adds	r3, #33	; 0x21
 8015cce:	222e      	movs	r2, #46	; 0x2e
 8015cd0:	701a      	strb	r2, [r3, #0]
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	2b03      	cmp	r3, #3
 8015cdc:	d106      	bne.n	8015cec <f_mkdir+0x15c>
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	d101      	bne.n	8015cec <f_mkdir+0x15c>
 8015ce8:	2300      	movs	r3, #0
 8015cea:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8015cec:	68b8      	ldr	r0, [r7, #8]
 8015cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cf0:	3320      	adds	r3, #32
 8015cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015cf4:	4619      	mov	r1, r3
 8015cf6:	f7fe f891 	bl	8013e1c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015cfa:	68bb      	ldr	r3, [r7, #8]
 8015cfc:	895b      	ldrh	r3, [r3, #10]
 8015cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8015d00:	e01c      	b.n	8015d3c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8015d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d04:	1c5a      	adds	r2, r3, #1
 8015d06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015d08:	68ba      	ldr	r2, [r7, #8]
 8015d0a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	2201      	movs	r2, #1
 8015d10:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7fd fa9f 	bl	8013258 <sync_window>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8015d20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d10d      	bne.n	8015d44 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8015d28:	68bb      	ldr	r3, [r7, #8]
 8015d2a:	899b      	ldrh	r3, [r3, #12]
 8015d2c:	461a      	mov	r2, r3
 8015d2e:	2100      	movs	r1, #0
 8015d30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015d32:	f7fd f8c8 	bl	8012ec6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d38:	3b01      	subs	r3, #1
 8015d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8015d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d1df      	bne.n	8015d02 <f_mkdir+0x172>
 8015d42:	e000      	b.n	8015d46 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8015d44:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015d46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d107      	bne.n	8015d5e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015d4e:	f107 030c 	add.w	r3, r7, #12
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7fe f934 	bl	8013fc0 <dir_register>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8015d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d120      	bne.n	8015da8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d68:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d6c:	3316      	adds	r3, #22
 8015d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015d70:	4618      	mov	r0, r3
 8015d72:	f7fd f85b 	bl	8012e2c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015d76:	68bb      	ldr	r3, [r7, #8]
 8015d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7fe f84d 	bl	8013e1c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d84:	330b      	adds	r3, #11
 8015d86:	2210      	movs	r2, #16
 8015d88:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	2201      	movs	r2, #1
 8015d8e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015d90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d10e      	bne.n	8015db6 <f_mkdir+0x226>
					res = sync_fs(fs);
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7fd face 	bl	801333c <sync_fs>
 8015da0:	4603      	mov	r3, r0
 8015da2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8015da6:	e006      	b.n	8015db6 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015da8:	f107 030c 	add.w	r3, r7, #12
 8015dac:	2200      	movs	r2, #0
 8015dae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7fd fd39 	bl	8013828 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015db6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3758      	adds	r7, #88	; 0x58
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}
 8015dc2:	bf00      	nop
 8015dc4:	274a0000 	.word	0x274a0000

08015dc8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b088      	sub	sp, #32
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	60f8      	str	r0, [r7, #12]
 8015dd0:	60b9      	str	r1, [r7, #8]
 8015dd2:	607a      	str	r2, [r7, #4]
	int n = 0;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8015ddc:	e017      	b.n	8015e0e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8015dde:	f107 0310 	add.w	r3, r7, #16
 8015de2:	f107 0114 	add.w	r1, r7, #20
 8015de6:	2201      	movs	r2, #1
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f7ff f803 	bl	8014df4 <f_read>
		if (rc != 1) break;
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	2b01      	cmp	r3, #1
 8015df2:	d112      	bne.n	8015e1a <f_gets+0x52>
		c = s[0];
 8015df4:	7d3b      	ldrb	r3, [r7, #20]
 8015df6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8015df8:	69bb      	ldr	r3, [r7, #24]
 8015dfa:	1c5a      	adds	r2, r3, #1
 8015dfc:	61ba      	str	r2, [r7, #24]
 8015dfe:	7dfa      	ldrb	r2, [r7, #23]
 8015e00:	701a      	strb	r2, [r3, #0]
		n++;
 8015e02:	69fb      	ldr	r3, [r7, #28]
 8015e04:	3301      	adds	r3, #1
 8015e06:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8015e08:	7dfb      	ldrb	r3, [r7, #23]
 8015e0a:	2b0a      	cmp	r3, #10
 8015e0c:	d007      	beq.n	8015e1e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8015e0e:	68bb      	ldr	r3, [r7, #8]
 8015e10:	3b01      	subs	r3, #1
 8015e12:	69fa      	ldr	r2, [r7, #28]
 8015e14:	429a      	cmp	r2, r3
 8015e16:	dbe2      	blt.n	8015dde <f_gets+0x16>
 8015e18:	e002      	b.n	8015e20 <f_gets+0x58>
		if (rc != 1) break;
 8015e1a:	bf00      	nop
 8015e1c:	e000      	b.n	8015e20 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8015e1e:	bf00      	nop
	}
	*p = 0;
 8015e20:	69bb      	ldr	r3, [r7, #24]
 8015e22:	2200      	movs	r2, #0
 8015e24:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8015e26:	69fb      	ldr	r3, [r7, #28]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d001      	beq.n	8015e30 <f_gets+0x68>
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	e000      	b.n	8015e32 <f_gets+0x6a>
 8015e30:	2300      	movs	r3, #0
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3720      	adds	r7, #32
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
	...

08015e3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015e3c:	b480      	push	{r7}
 8015e3e:	b087      	sub	sp, #28
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	4613      	mov	r3, r2
 8015e48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015e4a:	2301      	movs	r3, #1
 8015e4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015e52:	4b1f      	ldr	r3, [pc, #124]	; (8015ed0 <FATFS_LinkDriverEx+0x94>)
 8015e54:	7a5b      	ldrb	r3, [r3, #9]
 8015e56:	b2db      	uxtb	r3, r3
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d131      	bne.n	8015ec0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015e5c:	4b1c      	ldr	r3, [pc, #112]	; (8015ed0 <FATFS_LinkDriverEx+0x94>)
 8015e5e:	7a5b      	ldrb	r3, [r3, #9]
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	461a      	mov	r2, r3
 8015e64:	4b1a      	ldr	r3, [pc, #104]	; (8015ed0 <FATFS_LinkDriverEx+0x94>)
 8015e66:	2100      	movs	r1, #0
 8015e68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015e6a:	4b19      	ldr	r3, [pc, #100]	; (8015ed0 <FATFS_LinkDriverEx+0x94>)
 8015e6c:	7a5b      	ldrb	r3, [r3, #9]
 8015e6e:	b2db      	uxtb	r3, r3
 8015e70:	4a17      	ldr	r2, [pc, #92]	; (8015ed0 <FATFS_LinkDriverEx+0x94>)
 8015e72:	009b      	lsls	r3, r3, #2
 8015e74:	4413      	add	r3, r2
 8015e76:	68fa      	ldr	r2, [r7, #12]
 8015e78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015e7a:	4b15      	ldr	r3, [pc, #84]	; (8015ed0 <FATFS_LinkDriverEx+0x94>)
 8015e7c:	7a5b      	ldrb	r3, [r3, #9]
 8015e7e:	b2db      	uxtb	r3, r3
 8015e80:	461a      	mov	r2, r3
 8015e82:	4b13      	ldr	r3, [pc, #76]	; (8015ed0 <FATFS_LinkDriverEx+0x94>)
 8015e84:	4413      	add	r3, r2
 8015e86:	79fa      	ldrb	r2, [r7, #7]
 8015e88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015e8a:	4b11      	ldr	r3, [pc, #68]	; (8015ed0 <FATFS_LinkDriverEx+0x94>)
 8015e8c:	7a5b      	ldrb	r3, [r3, #9]
 8015e8e:	b2db      	uxtb	r3, r3
 8015e90:	1c5a      	adds	r2, r3, #1
 8015e92:	b2d1      	uxtb	r1, r2
 8015e94:	4a0e      	ldr	r2, [pc, #56]	; (8015ed0 <FATFS_LinkDriverEx+0x94>)
 8015e96:	7251      	strb	r1, [r2, #9]
 8015e98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015e9a:	7dbb      	ldrb	r3, [r7, #22]
 8015e9c:	3330      	adds	r3, #48	; 0x30
 8015e9e:	b2da      	uxtb	r2, r3
 8015ea0:	68bb      	ldr	r3, [r7, #8]
 8015ea2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015ea4:	68bb      	ldr	r3, [r7, #8]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	223a      	movs	r2, #58	; 0x3a
 8015eaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	3302      	adds	r3, #2
 8015eb0:	222f      	movs	r2, #47	; 0x2f
 8015eb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	3303      	adds	r3, #3
 8015eb8:	2200      	movs	r2, #0
 8015eba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	371c      	adds	r7, #28
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ecc:	4770      	bx	lr
 8015ece:	bf00      	nop
 8015ed0:	20045358 	.word	0x20045358

08015ed4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b082      	sub	sp, #8
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
 8015edc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015ede:	2200      	movs	r2, #0
 8015ee0:	6839      	ldr	r1, [r7, #0]
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f7ff ffaa 	bl	8015e3c <FATFS_LinkDriverEx>
 8015ee8:	4603      	mov	r3, r0
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3708      	adds	r7, #8
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}

08015ef2 <__cxa_guard_acquire>:
 8015ef2:	6803      	ldr	r3, [r0, #0]
 8015ef4:	07db      	lsls	r3, r3, #31
 8015ef6:	d406      	bmi.n	8015f06 <__cxa_guard_acquire+0x14>
 8015ef8:	7843      	ldrb	r3, [r0, #1]
 8015efa:	b103      	cbz	r3, 8015efe <__cxa_guard_acquire+0xc>
 8015efc:	deff      	udf	#255	; 0xff
 8015efe:	2301      	movs	r3, #1
 8015f00:	7043      	strb	r3, [r0, #1]
 8015f02:	4618      	mov	r0, r3
 8015f04:	4770      	bx	lr
 8015f06:	2000      	movs	r0, #0
 8015f08:	4770      	bx	lr

08015f0a <__cxa_guard_release>:
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	6003      	str	r3, [r0, #0]
 8015f0e:	4770      	bx	lr

08015f10 <__errno>:
 8015f10:	4b01      	ldr	r3, [pc, #4]	; (8015f18 <__errno+0x8>)
 8015f12:	6818      	ldr	r0, [r3, #0]
 8015f14:	4770      	bx	lr
 8015f16:	bf00      	nop
 8015f18:	2000000c 	.word	0x2000000c

08015f1c <__libc_init_array>:
 8015f1c:	b570      	push	{r4, r5, r6, lr}
 8015f1e:	4e0d      	ldr	r6, [pc, #52]	; (8015f54 <__libc_init_array+0x38>)
 8015f20:	4c0d      	ldr	r4, [pc, #52]	; (8015f58 <__libc_init_array+0x3c>)
 8015f22:	1ba4      	subs	r4, r4, r6
 8015f24:	10a4      	asrs	r4, r4, #2
 8015f26:	2500      	movs	r5, #0
 8015f28:	42a5      	cmp	r5, r4
 8015f2a:	d109      	bne.n	8015f40 <__libc_init_array+0x24>
 8015f2c:	4e0b      	ldr	r6, [pc, #44]	; (8015f5c <__libc_init_array+0x40>)
 8015f2e:	4c0c      	ldr	r4, [pc, #48]	; (8015f60 <__libc_init_array+0x44>)
 8015f30:	f004 f9e8 	bl	801a304 <_init>
 8015f34:	1ba4      	subs	r4, r4, r6
 8015f36:	10a4      	asrs	r4, r4, #2
 8015f38:	2500      	movs	r5, #0
 8015f3a:	42a5      	cmp	r5, r4
 8015f3c:	d105      	bne.n	8015f4a <__libc_init_array+0x2e>
 8015f3e:	bd70      	pop	{r4, r5, r6, pc}
 8015f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f44:	4798      	blx	r3
 8015f46:	3501      	adds	r5, #1
 8015f48:	e7ee      	b.n	8015f28 <__libc_init_array+0xc>
 8015f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015f4e:	4798      	blx	r3
 8015f50:	3501      	adds	r5, #1
 8015f52:	e7f2      	b.n	8015f3a <__libc_init_array+0x1e>
 8015f54:	0801ac54 	.word	0x0801ac54
 8015f58:	0801ac54 	.word	0x0801ac54
 8015f5c:	0801ac54 	.word	0x0801ac54
 8015f60:	0801ac5c 	.word	0x0801ac5c

08015f64 <memset>:
 8015f64:	4402      	add	r2, r0
 8015f66:	4603      	mov	r3, r0
 8015f68:	4293      	cmp	r3, r2
 8015f6a:	d100      	bne.n	8015f6e <memset+0xa>
 8015f6c:	4770      	bx	lr
 8015f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8015f72:	e7f9      	b.n	8015f68 <memset+0x4>

08015f74 <__cvt>:
 8015f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f78:	ec55 4b10 	vmov	r4, r5, d0
 8015f7c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015f7e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015f82:	2d00      	cmp	r5, #0
 8015f84:	460e      	mov	r6, r1
 8015f86:	4691      	mov	r9, r2
 8015f88:	4619      	mov	r1, r3
 8015f8a:	bfb8      	it	lt
 8015f8c:	4622      	movlt	r2, r4
 8015f8e:	462b      	mov	r3, r5
 8015f90:	f027 0720 	bic.w	r7, r7, #32
 8015f94:	bfbb      	ittet	lt
 8015f96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015f9a:	461d      	movlt	r5, r3
 8015f9c:	2300      	movge	r3, #0
 8015f9e:	232d      	movlt	r3, #45	; 0x2d
 8015fa0:	bfb8      	it	lt
 8015fa2:	4614      	movlt	r4, r2
 8015fa4:	2f46      	cmp	r7, #70	; 0x46
 8015fa6:	700b      	strb	r3, [r1, #0]
 8015fa8:	d004      	beq.n	8015fb4 <__cvt+0x40>
 8015faa:	2f45      	cmp	r7, #69	; 0x45
 8015fac:	d100      	bne.n	8015fb0 <__cvt+0x3c>
 8015fae:	3601      	adds	r6, #1
 8015fb0:	2102      	movs	r1, #2
 8015fb2:	e000      	b.n	8015fb6 <__cvt+0x42>
 8015fb4:	2103      	movs	r1, #3
 8015fb6:	ab03      	add	r3, sp, #12
 8015fb8:	9301      	str	r3, [sp, #4]
 8015fba:	ab02      	add	r3, sp, #8
 8015fbc:	9300      	str	r3, [sp, #0]
 8015fbe:	4632      	mov	r2, r6
 8015fc0:	4653      	mov	r3, sl
 8015fc2:	ec45 4b10 	vmov	d0, r4, r5
 8015fc6:	f001 fdff 	bl	8017bc8 <_dtoa_r>
 8015fca:	2f47      	cmp	r7, #71	; 0x47
 8015fcc:	4680      	mov	r8, r0
 8015fce:	d102      	bne.n	8015fd6 <__cvt+0x62>
 8015fd0:	f019 0f01 	tst.w	r9, #1
 8015fd4:	d026      	beq.n	8016024 <__cvt+0xb0>
 8015fd6:	2f46      	cmp	r7, #70	; 0x46
 8015fd8:	eb08 0906 	add.w	r9, r8, r6
 8015fdc:	d111      	bne.n	8016002 <__cvt+0x8e>
 8015fde:	f898 3000 	ldrb.w	r3, [r8]
 8015fe2:	2b30      	cmp	r3, #48	; 0x30
 8015fe4:	d10a      	bne.n	8015ffc <__cvt+0x88>
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	2300      	movs	r3, #0
 8015fea:	4620      	mov	r0, r4
 8015fec:	4629      	mov	r1, r5
 8015fee:	f7ea fd83 	bl	8000af8 <__aeabi_dcmpeq>
 8015ff2:	b918      	cbnz	r0, 8015ffc <__cvt+0x88>
 8015ff4:	f1c6 0601 	rsb	r6, r6, #1
 8015ff8:	f8ca 6000 	str.w	r6, [sl]
 8015ffc:	f8da 3000 	ldr.w	r3, [sl]
 8016000:	4499      	add	r9, r3
 8016002:	2200      	movs	r2, #0
 8016004:	2300      	movs	r3, #0
 8016006:	4620      	mov	r0, r4
 8016008:	4629      	mov	r1, r5
 801600a:	f7ea fd75 	bl	8000af8 <__aeabi_dcmpeq>
 801600e:	b938      	cbnz	r0, 8016020 <__cvt+0xac>
 8016010:	2230      	movs	r2, #48	; 0x30
 8016012:	9b03      	ldr	r3, [sp, #12]
 8016014:	454b      	cmp	r3, r9
 8016016:	d205      	bcs.n	8016024 <__cvt+0xb0>
 8016018:	1c59      	adds	r1, r3, #1
 801601a:	9103      	str	r1, [sp, #12]
 801601c:	701a      	strb	r2, [r3, #0]
 801601e:	e7f8      	b.n	8016012 <__cvt+0x9e>
 8016020:	f8cd 900c 	str.w	r9, [sp, #12]
 8016024:	9b03      	ldr	r3, [sp, #12]
 8016026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016028:	eba3 0308 	sub.w	r3, r3, r8
 801602c:	4640      	mov	r0, r8
 801602e:	6013      	str	r3, [r2, #0]
 8016030:	b004      	add	sp, #16
 8016032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016036 <__exponent>:
 8016036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016038:	2900      	cmp	r1, #0
 801603a:	4604      	mov	r4, r0
 801603c:	bfba      	itte	lt
 801603e:	4249      	neglt	r1, r1
 8016040:	232d      	movlt	r3, #45	; 0x2d
 8016042:	232b      	movge	r3, #43	; 0x2b
 8016044:	2909      	cmp	r1, #9
 8016046:	f804 2b02 	strb.w	r2, [r4], #2
 801604a:	7043      	strb	r3, [r0, #1]
 801604c:	dd20      	ble.n	8016090 <__exponent+0x5a>
 801604e:	f10d 0307 	add.w	r3, sp, #7
 8016052:	461f      	mov	r7, r3
 8016054:	260a      	movs	r6, #10
 8016056:	fb91 f5f6 	sdiv	r5, r1, r6
 801605a:	fb06 1115 	mls	r1, r6, r5, r1
 801605e:	3130      	adds	r1, #48	; 0x30
 8016060:	2d09      	cmp	r5, #9
 8016062:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016066:	f103 32ff 	add.w	r2, r3, #4294967295
 801606a:	4629      	mov	r1, r5
 801606c:	dc09      	bgt.n	8016082 <__exponent+0x4c>
 801606e:	3130      	adds	r1, #48	; 0x30
 8016070:	3b02      	subs	r3, #2
 8016072:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016076:	42bb      	cmp	r3, r7
 8016078:	4622      	mov	r2, r4
 801607a:	d304      	bcc.n	8016086 <__exponent+0x50>
 801607c:	1a10      	subs	r0, r2, r0
 801607e:	b003      	add	sp, #12
 8016080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016082:	4613      	mov	r3, r2
 8016084:	e7e7      	b.n	8016056 <__exponent+0x20>
 8016086:	f813 2b01 	ldrb.w	r2, [r3], #1
 801608a:	f804 2b01 	strb.w	r2, [r4], #1
 801608e:	e7f2      	b.n	8016076 <__exponent+0x40>
 8016090:	2330      	movs	r3, #48	; 0x30
 8016092:	4419      	add	r1, r3
 8016094:	7083      	strb	r3, [r0, #2]
 8016096:	1d02      	adds	r2, r0, #4
 8016098:	70c1      	strb	r1, [r0, #3]
 801609a:	e7ef      	b.n	801607c <__exponent+0x46>

0801609c <_printf_float>:
 801609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160a0:	b08d      	sub	sp, #52	; 0x34
 80160a2:	460c      	mov	r4, r1
 80160a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80160a8:	4616      	mov	r6, r2
 80160aa:	461f      	mov	r7, r3
 80160ac:	4605      	mov	r5, r0
 80160ae:	f002 fe7d 	bl	8018dac <_localeconv_r>
 80160b2:	6803      	ldr	r3, [r0, #0]
 80160b4:	9304      	str	r3, [sp, #16]
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7ea f8a2 	bl	8000200 <strlen>
 80160bc:	2300      	movs	r3, #0
 80160be:	930a      	str	r3, [sp, #40]	; 0x28
 80160c0:	f8d8 3000 	ldr.w	r3, [r8]
 80160c4:	9005      	str	r0, [sp, #20]
 80160c6:	3307      	adds	r3, #7
 80160c8:	f023 0307 	bic.w	r3, r3, #7
 80160cc:	f103 0208 	add.w	r2, r3, #8
 80160d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80160d4:	f8d4 b000 	ldr.w	fp, [r4]
 80160d8:	f8c8 2000 	str.w	r2, [r8]
 80160dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80160e4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80160e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80160ec:	9307      	str	r3, [sp, #28]
 80160ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80160f2:	f04f 32ff 	mov.w	r2, #4294967295
 80160f6:	4ba7      	ldr	r3, [pc, #668]	; (8016394 <_printf_float+0x2f8>)
 80160f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80160fc:	f7ea fd2e 	bl	8000b5c <__aeabi_dcmpun>
 8016100:	bb70      	cbnz	r0, 8016160 <_printf_float+0xc4>
 8016102:	f04f 32ff 	mov.w	r2, #4294967295
 8016106:	4ba3      	ldr	r3, [pc, #652]	; (8016394 <_printf_float+0x2f8>)
 8016108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801610c:	f7ea fd08 	bl	8000b20 <__aeabi_dcmple>
 8016110:	bb30      	cbnz	r0, 8016160 <_printf_float+0xc4>
 8016112:	2200      	movs	r2, #0
 8016114:	2300      	movs	r3, #0
 8016116:	4640      	mov	r0, r8
 8016118:	4649      	mov	r1, r9
 801611a:	f7ea fcf7 	bl	8000b0c <__aeabi_dcmplt>
 801611e:	b110      	cbz	r0, 8016126 <_printf_float+0x8a>
 8016120:	232d      	movs	r3, #45	; 0x2d
 8016122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016126:	4a9c      	ldr	r2, [pc, #624]	; (8016398 <_printf_float+0x2fc>)
 8016128:	4b9c      	ldr	r3, [pc, #624]	; (801639c <_printf_float+0x300>)
 801612a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801612e:	bf8c      	ite	hi
 8016130:	4690      	movhi	r8, r2
 8016132:	4698      	movls	r8, r3
 8016134:	2303      	movs	r3, #3
 8016136:	f02b 0204 	bic.w	r2, fp, #4
 801613a:	6123      	str	r3, [r4, #16]
 801613c:	6022      	str	r2, [r4, #0]
 801613e:	f04f 0900 	mov.w	r9, #0
 8016142:	9700      	str	r7, [sp, #0]
 8016144:	4633      	mov	r3, r6
 8016146:	aa0b      	add	r2, sp, #44	; 0x2c
 8016148:	4621      	mov	r1, r4
 801614a:	4628      	mov	r0, r5
 801614c:	f000 f9e6 	bl	801651c <_printf_common>
 8016150:	3001      	adds	r0, #1
 8016152:	f040 808d 	bne.w	8016270 <_printf_float+0x1d4>
 8016156:	f04f 30ff 	mov.w	r0, #4294967295
 801615a:	b00d      	add	sp, #52	; 0x34
 801615c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016160:	4642      	mov	r2, r8
 8016162:	464b      	mov	r3, r9
 8016164:	4640      	mov	r0, r8
 8016166:	4649      	mov	r1, r9
 8016168:	f7ea fcf8 	bl	8000b5c <__aeabi_dcmpun>
 801616c:	b110      	cbz	r0, 8016174 <_printf_float+0xd8>
 801616e:	4a8c      	ldr	r2, [pc, #560]	; (80163a0 <_printf_float+0x304>)
 8016170:	4b8c      	ldr	r3, [pc, #560]	; (80163a4 <_printf_float+0x308>)
 8016172:	e7da      	b.n	801612a <_printf_float+0x8e>
 8016174:	6861      	ldr	r1, [r4, #4]
 8016176:	1c4b      	adds	r3, r1, #1
 8016178:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801617c:	a80a      	add	r0, sp, #40	; 0x28
 801617e:	d13e      	bne.n	80161fe <_printf_float+0x162>
 8016180:	2306      	movs	r3, #6
 8016182:	6063      	str	r3, [r4, #4]
 8016184:	2300      	movs	r3, #0
 8016186:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801618a:	ab09      	add	r3, sp, #36	; 0x24
 801618c:	9300      	str	r3, [sp, #0]
 801618e:	ec49 8b10 	vmov	d0, r8, r9
 8016192:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016196:	6022      	str	r2, [r4, #0]
 8016198:	f8cd a004 	str.w	sl, [sp, #4]
 801619c:	6861      	ldr	r1, [r4, #4]
 801619e:	4628      	mov	r0, r5
 80161a0:	f7ff fee8 	bl	8015f74 <__cvt>
 80161a4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80161a8:	2b47      	cmp	r3, #71	; 0x47
 80161aa:	4680      	mov	r8, r0
 80161ac:	d109      	bne.n	80161c2 <_printf_float+0x126>
 80161ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161b0:	1cd8      	adds	r0, r3, #3
 80161b2:	db02      	blt.n	80161ba <_printf_float+0x11e>
 80161b4:	6862      	ldr	r2, [r4, #4]
 80161b6:	4293      	cmp	r3, r2
 80161b8:	dd47      	ble.n	801624a <_printf_float+0x1ae>
 80161ba:	f1aa 0a02 	sub.w	sl, sl, #2
 80161be:	fa5f fa8a 	uxtb.w	sl, sl
 80161c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80161c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80161c8:	d824      	bhi.n	8016214 <_printf_float+0x178>
 80161ca:	3901      	subs	r1, #1
 80161cc:	4652      	mov	r2, sl
 80161ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80161d2:	9109      	str	r1, [sp, #36]	; 0x24
 80161d4:	f7ff ff2f 	bl	8016036 <__exponent>
 80161d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161da:	1813      	adds	r3, r2, r0
 80161dc:	2a01      	cmp	r2, #1
 80161de:	4681      	mov	r9, r0
 80161e0:	6123      	str	r3, [r4, #16]
 80161e2:	dc02      	bgt.n	80161ea <_printf_float+0x14e>
 80161e4:	6822      	ldr	r2, [r4, #0]
 80161e6:	07d1      	lsls	r1, r2, #31
 80161e8:	d501      	bpl.n	80161ee <_printf_float+0x152>
 80161ea:	3301      	adds	r3, #1
 80161ec:	6123      	str	r3, [r4, #16]
 80161ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d0a5      	beq.n	8016142 <_printf_float+0xa6>
 80161f6:	232d      	movs	r3, #45	; 0x2d
 80161f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80161fc:	e7a1      	b.n	8016142 <_printf_float+0xa6>
 80161fe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8016202:	f000 8177 	beq.w	80164f4 <_printf_float+0x458>
 8016206:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801620a:	d1bb      	bne.n	8016184 <_printf_float+0xe8>
 801620c:	2900      	cmp	r1, #0
 801620e:	d1b9      	bne.n	8016184 <_printf_float+0xe8>
 8016210:	2301      	movs	r3, #1
 8016212:	e7b6      	b.n	8016182 <_printf_float+0xe6>
 8016214:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8016218:	d119      	bne.n	801624e <_printf_float+0x1b2>
 801621a:	2900      	cmp	r1, #0
 801621c:	6863      	ldr	r3, [r4, #4]
 801621e:	dd0c      	ble.n	801623a <_printf_float+0x19e>
 8016220:	6121      	str	r1, [r4, #16]
 8016222:	b913      	cbnz	r3, 801622a <_printf_float+0x18e>
 8016224:	6822      	ldr	r2, [r4, #0]
 8016226:	07d2      	lsls	r2, r2, #31
 8016228:	d502      	bpl.n	8016230 <_printf_float+0x194>
 801622a:	3301      	adds	r3, #1
 801622c:	440b      	add	r3, r1
 801622e:	6123      	str	r3, [r4, #16]
 8016230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016232:	65a3      	str	r3, [r4, #88]	; 0x58
 8016234:	f04f 0900 	mov.w	r9, #0
 8016238:	e7d9      	b.n	80161ee <_printf_float+0x152>
 801623a:	b913      	cbnz	r3, 8016242 <_printf_float+0x1a6>
 801623c:	6822      	ldr	r2, [r4, #0]
 801623e:	07d0      	lsls	r0, r2, #31
 8016240:	d501      	bpl.n	8016246 <_printf_float+0x1aa>
 8016242:	3302      	adds	r3, #2
 8016244:	e7f3      	b.n	801622e <_printf_float+0x192>
 8016246:	2301      	movs	r3, #1
 8016248:	e7f1      	b.n	801622e <_printf_float+0x192>
 801624a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801624e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016252:	4293      	cmp	r3, r2
 8016254:	db05      	blt.n	8016262 <_printf_float+0x1c6>
 8016256:	6822      	ldr	r2, [r4, #0]
 8016258:	6123      	str	r3, [r4, #16]
 801625a:	07d1      	lsls	r1, r2, #31
 801625c:	d5e8      	bpl.n	8016230 <_printf_float+0x194>
 801625e:	3301      	adds	r3, #1
 8016260:	e7e5      	b.n	801622e <_printf_float+0x192>
 8016262:	2b00      	cmp	r3, #0
 8016264:	bfd4      	ite	le
 8016266:	f1c3 0302 	rsble	r3, r3, #2
 801626a:	2301      	movgt	r3, #1
 801626c:	4413      	add	r3, r2
 801626e:	e7de      	b.n	801622e <_printf_float+0x192>
 8016270:	6823      	ldr	r3, [r4, #0]
 8016272:	055a      	lsls	r2, r3, #21
 8016274:	d407      	bmi.n	8016286 <_printf_float+0x1ea>
 8016276:	6923      	ldr	r3, [r4, #16]
 8016278:	4642      	mov	r2, r8
 801627a:	4631      	mov	r1, r6
 801627c:	4628      	mov	r0, r5
 801627e:	47b8      	blx	r7
 8016280:	3001      	adds	r0, #1
 8016282:	d12b      	bne.n	80162dc <_printf_float+0x240>
 8016284:	e767      	b.n	8016156 <_printf_float+0xba>
 8016286:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801628a:	f240 80dc 	bls.w	8016446 <_printf_float+0x3aa>
 801628e:	2200      	movs	r2, #0
 8016290:	2300      	movs	r3, #0
 8016292:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016296:	f7ea fc2f 	bl	8000af8 <__aeabi_dcmpeq>
 801629a:	2800      	cmp	r0, #0
 801629c:	d033      	beq.n	8016306 <_printf_float+0x26a>
 801629e:	2301      	movs	r3, #1
 80162a0:	4a41      	ldr	r2, [pc, #260]	; (80163a8 <_printf_float+0x30c>)
 80162a2:	4631      	mov	r1, r6
 80162a4:	4628      	mov	r0, r5
 80162a6:	47b8      	blx	r7
 80162a8:	3001      	adds	r0, #1
 80162aa:	f43f af54 	beq.w	8016156 <_printf_float+0xba>
 80162ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162b2:	429a      	cmp	r2, r3
 80162b4:	db02      	blt.n	80162bc <_printf_float+0x220>
 80162b6:	6823      	ldr	r3, [r4, #0]
 80162b8:	07d8      	lsls	r0, r3, #31
 80162ba:	d50f      	bpl.n	80162dc <_printf_float+0x240>
 80162bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162c0:	4631      	mov	r1, r6
 80162c2:	4628      	mov	r0, r5
 80162c4:	47b8      	blx	r7
 80162c6:	3001      	adds	r0, #1
 80162c8:	f43f af45 	beq.w	8016156 <_printf_float+0xba>
 80162cc:	f04f 0800 	mov.w	r8, #0
 80162d0:	f104 091a 	add.w	r9, r4, #26
 80162d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162d6:	3b01      	subs	r3, #1
 80162d8:	4543      	cmp	r3, r8
 80162da:	dc09      	bgt.n	80162f0 <_printf_float+0x254>
 80162dc:	6823      	ldr	r3, [r4, #0]
 80162de:	079b      	lsls	r3, r3, #30
 80162e0:	f100 8103 	bmi.w	80164ea <_printf_float+0x44e>
 80162e4:	68e0      	ldr	r0, [r4, #12]
 80162e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162e8:	4298      	cmp	r0, r3
 80162ea:	bfb8      	it	lt
 80162ec:	4618      	movlt	r0, r3
 80162ee:	e734      	b.n	801615a <_printf_float+0xbe>
 80162f0:	2301      	movs	r3, #1
 80162f2:	464a      	mov	r2, r9
 80162f4:	4631      	mov	r1, r6
 80162f6:	4628      	mov	r0, r5
 80162f8:	47b8      	blx	r7
 80162fa:	3001      	adds	r0, #1
 80162fc:	f43f af2b 	beq.w	8016156 <_printf_float+0xba>
 8016300:	f108 0801 	add.w	r8, r8, #1
 8016304:	e7e6      	b.n	80162d4 <_printf_float+0x238>
 8016306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016308:	2b00      	cmp	r3, #0
 801630a:	dc2b      	bgt.n	8016364 <_printf_float+0x2c8>
 801630c:	2301      	movs	r3, #1
 801630e:	4a26      	ldr	r2, [pc, #152]	; (80163a8 <_printf_float+0x30c>)
 8016310:	4631      	mov	r1, r6
 8016312:	4628      	mov	r0, r5
 8016314:	47b8      	blx	r7
 8016316:	3001      	adds	r0, #1
 8016318:	f43f af1d 	beq.w	8016156 <_printf_float+0xba>
 801631c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801631e:	b923      	cbnz	r3, 801632a <_printf_float+0x28e>
 8016320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016322:	b913      	cbnz	r3, 801632a <_printf_float+0x28e>
 8016324:	6823      	ldr	r3, [r4, #0]
 8016326:	07d9      	lsls	r1, r3, #31
 8016328:	d5d8      	bpl.n	80162dc <_printf_float+0x240>
 801632a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801632e:	4631      	mov	r1, r6
 8016330:	4628      	mov	r0, r5
 8016332:	47b8      	blx	r7
 8016334:	3001      	adds	r0, #1
 8016336:	f43f af0e 	beq.w	8016156 <_printf_float+0xba>
 801633a:	f04f 0900 	mov.w	r9, #0
 801633e:	f104 0a1a 	add.w	sl, r4, #26
 8016342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016344:	425b      	negs	r3, r3
 8016346:	454b      	cmp	r3, r9
 8016348:	dc01      	bgt.n	801634e <_printf_float+0x2b2>
 801634a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801634c:	e794      	b.n	8016278 <_printf_float+0x1dc>
 801634e:	2301      	movs	r3, #1
 8016350:	4652      	mov	r2, sl
 8016352:	4631      	mov	r1, r6
 8016354:	4628      	mov	r0, r5
 8016356:	47b8      	blx	r7
 8016358:	3001      	adds	r0, #1
 801635a:	f43f aefc 	beq.w	8016156 <_printf_float+0xba>
 801635e:	f109 0901 	add.w	r9, r9, #1
 8016362:	e7ee      	b.n	8016342 <_printf_float+0x2a6>
 8016364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016366:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016368:	429a      	cmp	r2, r3
 801636a:	bfa8      	it	ge
 801636c:	461a      	movge	r2, r3
 801636e:	2a00      	cmp	r2, #0
 8016370:	4691      	mov	r9, r2
 8016372:	dd07      	ble.n	8016384 <_printf_float+0x2e8>
 8016374:	4613      	mov	r3, r2
 8016376:	4631      	mov	r1, r6
 8016378:	4642      	mov	r2, r8
 801637a:	4628      	mov	r0, r5
 801637c:	47b8      	blx	r7
 801637e:	3001      	adds	r0, #1
 8016380:	f43f aee9 	beq.w	8016156 <_printf_float+0xba>
 8016384:	f104 031a 	add.w	r3, r4, #26
 8016388:	f04f 0b00 	mov.w	fp, #0
 801638c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016390:	9306      	str	r3, [sp, #24]
 8016392:	e015      	b.n	80163c0 <_printf_float+0x324>
 8016394:	7fefffff 	.word	0x7fefffff
 8016398:	0801a924 	.word	0x0801a924
 801639c:	0801a920 	.word	0x0801a920
 80163a0:	0801a92c 	.word	0x0801a92c
 80163a4:	0801a928 	.word	0x0801a928
 80163a8:	0801aae3 	.word	0x0801aae3
 80163ac:	2301      	movs	r3, #1
 80163ae:	9a06      	ldr	r2, [sp, #24]
 80163b0:	4631      	mov	r1, r6
 80163b2:	4628      	mov	r0, r5
 80163b4:	47b8      	blx	r7
 80163b6:	3001      	adds	r0, #1
 80163b8:	f43f aecd 	beq.w	8016156 <_printf_float+0xba>
 80163bc:	f10b 0b01 	add.w	fp, fp, #1
 80163c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80163c4:	ebaa 0309 	sub.w	r3, sl, r9
 80163c8:	455b      	cmp	r3, fp
 80163ca:	dcef      	bgt.n	80163ac <_printf_float+0x310>
 80163cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80163d0:	429a      	cmp	r2, r3
 80163d2:	44d0      	add	r8, sl
 80163d4:	db15      	blt.n	8016402 <_printf_float+0x366>
 80163d6:	6823      	ldr	r3, [r4, #0]
 80163d8:	07da      	lsls	r2, r3, #31
 80163da:	d412      	bmi.n	8016402 <_printf_float+0x366>
 80163dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163e0:	eba3 020a 	sub.w	r2, r3, sl
 80163e4:	eba3 0a01 	sub.w	sl, r3, r1
 80163e8:	4592      	cmp	sl, r2
 80163ea:	bfa8      	it	ge
 80163ec:	4692      	movge	sl, r2
 80163ee:	f1ba 0f00 	cmp.w	sl, #0
 80163f2:	dc0e      	bgt.n	8016412 <_printf_float+0x376>
 80163f4:	f04f 0800 	mov.w	r8, #0
 80163f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80163fc:	f104 091a 	add.w	r9, r4, #26
 8016400:	e019      	b.n	8016436 <_printf_float+0x39a>
 8016402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016406:	4631      	mov	r1, r6
 8016408:	4628      	mov	r0, r5
 801640a:	47b8      	blx	r7
 801640c:	3001      	adds	r0, #1
 801640e:	d1e5      	bne.n	80163dc <_printf_float+0x340>
 8016410:	e6a1      	b.n	8016156 <_printf_float+0xba>
 8016412:	4653      	mov	r3, sl
 8016414:	4642      	mov	r2, r8
 8016416:	4631      	mov	r1, r6
 8016418:	4628      	mov	r0, r5
 801641a:	47b8      	blx	r7
 801641c:	3001      	adds	r0, #1
 801641e:	d1e9      	bne.n	80163f4 <_printf_float+0x358>
 8016420:	e699      	b.n	8016156 <_printf_float+0xba>
 8016422:	2301      	movs	r3, #1
 8016424:	464a      	mov	r2, r9
 8016426:	4631      	mov	r1, r6
 8016428:	4628      	mov	r0, r5
 801642a:	47b8      	blx	r7
 801642c:	3001      	adds	r0, #1
 801642e:	f43f ae92 	beq.w	8016156 <_printf_float+0xba>
 8016432:	f108 0801 	add.w	r8, r8, #1
 8016436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801643a:	1a9b      	subs	r3, r3, r2
 801643c:	eba3 030a 	sub.w	r3, r3, sl
 8016440:	4543      	cmp	r3, r8
 8016442:	dcee      	bgt.n	8016422 <_printf_float+0x386>
 8016444:	e74a      	b.n	80162dc <_printf_float+0x240>
 8016446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016448:	2a01      	cmp	r2, #1
 801644a:	dc01      	bgt.n	8016450 <_printf_float+0x3b4>
 801644c:	07db      	lsls	r3, r3, #31
 801644e:	d53a      	bpl.n	80164c6 <_printf_float+0x42a>
 8016450:	2301      	movs	r3, #1
 8016452:	4642      	mov	r2, r8
 8016454:	4631      	mov	r1, r6
 8016456:	4628      	mov	r0, r5
 8016458:	47b8      	blx	r7
 801645a:	3001      	adds	r0, #1
 801645c:	f43f ae7b 	beq.w	8016156 <_printf_float+0xba>
 8016460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016464:	4631      	mov	r1, r6
 8016466:	4628      	mov	r0, r5
 8016468:	47b8      	blx	r7
 801646a:	3001      	adds	r0, #1
 801646c:	f108 0801 	add.w	r8, r8, #1
 8016470:	f43f ae71 	beq.w	8016156 <_printf_float+0xba>
 8016474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016476:	2200      	movs	r2, #0
 8016478:	f103 3aff 	add.w	sl, r3, #4294967295
 801647c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016480:	2300      	movs	r3, #0
 8016482:	f7ea fb39 	bl	8000af8 <__aeabi_dcmpeq>
 8016486:	b9c8      	cbnz	r0, 80164bc <_printf_float+0x420>
 8016488:	4653      	mov	r3, sl
 801648a:	4642      	mov	r2, r8
 801648c:	4631      	mov	r1, r6
 801648e:	4628      	mov	r0, r5
 8016490:	47b8      	blx	r7
 8016492:	3001      	adds	r0, #1
 8016494:	d10e      	bne.n	80164b4 <_printf_float+0x418>
 8016496:	e65e      	b.n	8016156 <_printf_float+0xba>
 8016498:	2301      	movs	r3, #1
 801649a:	4652      	mov	r2, sl
 801649c:	4631      	mov	r1, r6
 801649e:	4628      	mov	r0, r5
 80164a0:	47b8      	blx	r7
 80164a2:	3001      	adds	r0, #1
 80164a4:	f43f ae57 	beq.w	8016156 <_printf_float+0xba>
 80164a8:	f108 0801 	add.w	r8, r8, #1
 80164ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164ae:	3b01      	subs	r3, #1
 80164b0:	4543      	cmp	r3, r8
 80164b2:	dcf1      	bgt.n	8016498 <_printf_float+0x3fc>
 80164b4:	464b      	mov	r3, r9
 80164b6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80164ba:	e6de      	b.n	801627a <_printf_float+0x1de>
 80164bc:	f04f 0800 	mov.w	r8, #0
 80164c0:	f104 0a1a 	add.w	sl, r4, #26
 80164c4:	e7f2      	b.n	80164ac <_printf_float+0x410>
 80164c6:	2301      	movs	r3, #1
 80164c8:	e7df      	b.n	801648a <_printf_float+0x3ee>
 80164ca:	2301      	movs	r3, #1
 80164cc:	464a      	mov	r2, r9
 80164ce:	4631      	mov	r1, r6
 80164d0:	4628      	mov	r0, r5
 80164d2:	47b8      	blx	r7
 80164d4:	3001      	adds	r0, #1
 80164d6:	f43f ae3e 	beq.w	8016156 <_printf_float+0xba>
 80164da:	f108 0801 	add.w	r8, r8, #1
 80164de:	68e3      	ldr	r3, [r4, #12]
 80164e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80164e2:	1a9b      	subs	r3, r3, r2
 80164e4:	4543      	cmp	r3, r8
 80164e6:	dcf0      	bgt.n	80164ca <_printf_float+0x42e>
 80164e8:	e6fc      	b.n	80162e4 <_printf_float+0x248>
 80164ea:	f04f 0800 	mov.w	r8, #0
 80164ee:	f104 0919 	add.w	r9, r4, #25
 80164f2:	e7f4      	b.n	80164de <_printf_float+0x442>
 80164f4:	2900      	cmp	r1, #0
 80164f6:	f43f ae8b 	beq.w	8016210 <_printf_float+0x174>
 80164fa:	2300      	movs	r3, #0
 80164fc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016500:	ab09      	add	r3, sp, #36	; 0x24
 8016502:	9300      	str	r3, [sp, #0]
 8016504:	ec49 8b10 	vmov	d0, r8, r9
 8016508:	6022      	str	r2, [r4, #0]
 801650a:	f8cd a004 	str.w	sl, [sp, #4]
 801650e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016512:	4628      	mov	r0, r5
 8016514:	f7ff fd2e 	bl	8015f74 <__cvt>
 8016518:	4680      	mov	r8, r0
 801651a:	e648      	b.n	80161ae <_printf_float+0x112>

0801651c <_printf_common>:
 801651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016520:	4691      	mov	r9, r2
 8016522:	461f      	mov	r7, r3
 8016524:	688a      	ldr	r2, [r1, #8]
 8016526:	690b      	ldr	r3, [r1, #16]
 8016528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801652c:	4293      	cmp	r3, r2
 801652e:	bfb8      	it	lt
 8016530:	4613      	movlt	r3, r2
 8016532:	f8c9 3000 	str.w	r3, [r9]
 8016536:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801653a:	4606      	mov	r6, r0
 801653c:	460c      	mov	r4, r1
 801653e:	b112      	cbz	r2, 8016546 <_printf_common+0x2a>
 8016540:	3301      	adds	r3, #1
 8016542:	f8c9 3000 	str.w	r3, [r9]
 8016546:	6823      	ldr	r3, [r4, #0]
 8016548:	0699      	lsls	r1, r3, #26
 801654a:	bf42      	ittt	mi
 801654c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016550:	3302      	addmi	r3, #2
 8016552:	f8c9 3000 	strmi.w	r3, [r9]
 8016556:	6825      	ldr	r5, [r4, #0]
 8016558:	f015 0506 	ands.w	r5, r5, #6
 801655c:	d107      	bne.n	801656e <_printf_common+0x52>
 801655e:	f104 0a19 	add.w	sl, r4, #25
 8016562:	68e3      	ldr	r3, [r4, #12]
 8016564:	f8d9 2000 	ldr.w	r2, [r9]
 8016568:	1a9b      	subs	r3, r3, r2
 801656a:	42ab      	cmp	r3, r5
 801656c:	dc28      	bgt.n	80165c0 <_printf_common+0xa4>
 801656e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016572:	6822      	ldr	r2, [r4, #0]
 8016574:	3300      	adds	r3, #0
 8016576:	bf18      	it	ne
 8016578:	2301      	movne	r3, #1
 801657a:	0692      	lsls	r2, r2, #26
 801657c:	d42d      	bmi.n	80165da <_printf_common+0xbe>
 801657e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016582:	4639      	mov	r1, r7
 8016584:	4630      	mov	r0, r6
 8016586:	47c0      	blx	r8
 8016588:	3001      	adds	r0, #1
 801658a:	d020      	beq.n	80165ce <_printf_common+0xb2>
 801658c:	6823      	ldr	r3, [r4, #0]
 801658e:	68e5      	ldr	r5, [r4, #12]
 8016590:	f8d9 2000 	ldr.w	r2, [r9]
 8016594:	f003 0306 	and.w	r3, r3, #6
 8016598:	2b04      	cmp	r3, #4
 801659a:	bf08      	it	eq
 801659c:	1aad      	subeq	r5, r5, r2
 801659e:	68a3      	ldr	r3, [r4, #8]
 80165a0:	6922      	ldr	r2, [r4, #16]
 80165a2:	bf0c      	ite	eq
 80165a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80165a8:	2500      	movne	r5, #0
 80165aa:	4293      	cmp	r3, r2
 80165ac:	bfc4      	itt	gt
 80165ae:	1a9b      	subgt	r3, r3, r2
 80165b0:	18ed      	addgt	r5, r5, r3
 80165b2:	f04f 0900 	mov.w	r9, #0
 80165b6:	341a      	adds	r4, #26
 80165b8:	454d      	cmp	r5, r9
 80165ba:	d11a      	bne.n	80165f2 <_printf_common+0xd6>
 80165bc:	2000      	movs	r0, #0
 80165be:	e008      	b.n	80165d2 <_printf_common+0xb6>
 80165c0:	2301      	movs	r3, #1
 80165c2:	4652      	mov	r2, sl
 80165c4:	4639      	mov	r1, r7
 80165c6:	4630      	mov	r0, r6
 80165c8:	47c0      	blx	r8
 80165ca:	3001      	adds	r0, #1
 80165cc:	d103      	bne.n	80165d6 <_printf_common+0xba>
 80165ce:	f04f 30ff 	mov.w	r0, #4294967295
 80165d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d6:	3501      	adds	r5, #1
 80165d8:	e7c3      	b.n	8016562 <_printf_common+0x46>
 80165da:	18e1      	adds	r1, r4, r3
 80165dc:	1c5a      	adds	r2, r3, #1
 80165de:	2030      	movs	r0, #48	; 0x30
 80165e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80165e4:	4422      	add	r2, r4
 80165e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80165ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80165ee:	3302      	adds	r3, #2
 80165f0:	e7c5      	b.n	801657e <_printf_common+0x62>
 80165f2:	2301      	movs	r3, #1
 80165f4:	4622      	mov	r2, r4
 80165f6:	4639      	mov	r1, r7
 80165f8:	4630      	mov	r0, r6
 80165fa:	47c0      	blx	r8
 80165fc:	3001      	adds	r0, #1
 80165fe:	d0e6      	beq.n	80165ce <_printf_common+0xb2>
 8016600:	f109 0901 	add.w	r9, r9, #1
 8016604:	e7d8      	b.n	80165b8 <_printf_common+0x9c>
	...

08016608 <_printf_i>:
 8016608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801660c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016610:	460c      	mov	r4, r1
 8016612:	7e09      	ldrb	r1, [r1, #24]
 8016614:	b085      	sub	sp, #20
 8016616:	296e      	cmp	r1, #110	; 0x6e
 8016618:	4617      	mov	r7, r2
 801661a:	4606      	mov	r6, r0
 801661c:	4698      	mov	r8, r3
 801661e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016620:	f000 80b3 	beq.w	801678a <_printf_i+0x182>
 8016624:	d822      	bhi.n	801666c <_printf_i+0x64>
 8016626:	2963      	cmp	r1, #99	; 0x63
 8016628:	d036      	beq.n	8016698 <_printf_i+0x90>
 801662a:	d80a      	bhi.n	8016642 <_printf_i+0x3a>
 801662c:	2900      	cmp	r1, #0
 801662e:	f000 80b9 	beq.w	80167a4 <_printf_i+0x19c>
 8016632:	2958      	cmp	r1, #88	; 0x58
 8016634:	f000 8083 	beq.w	801673e <_printf_i+0x136>
 8016638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801663c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016640:	e032      	b.n	80166a8 <_printf_i+0xa0>
 8016642:	2964      	cmp	r1, #100	; 0x64
 8016644:	d001      	beq.n	801664a <_printf_i+0x42>
 8016646:	2969      	cmp	r1, #105	; 0x69
 8016648:	d1f6      	bne.n	8016638 <_printf_i+0x30>
 801664a:	6820      	ldr	r0, [r4, #0]
 801664c:	6813      	ldr	r3, [r2, #0]
 801664e:	0605      	lsls	r5, r0, #24
 8016650:	f103 0104 	add.w	r1, r3, #4
 8016654:	d52a      	bpl.n	80166ac <_printf_i+0xa4>
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	6011      	str	r1, [r2, #0]
 801665a:	2b00      	cmp	r3, #0
 801665c:	da03      	bge.n	8016666 <_printf_i+0x5e>
 801665e:	222d      	movs	r2, #45	; 0x2d
 8016660:	425b      	negs	r3, r3
 8016662:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016666:	486f      	ldr	r0, [pc, #444]	; (8016824 <_printf_i+0x21c>)
 8016668:	220a      	movs	r2, #10
 801666a:	e039      	b.n	80166e0 <_printf_i+0xd8>
 801666c:	2973      	cmp	r1, #115	; 0x73
 801666e:	f000 809d 	beq.w	80167ac <_printf_i+0x1a4>
 8016672:	d808      	bhi.n	8016686 <_printf_i+0x7e>
 8016674:	296f      	cmp	r1, #111	; 0x6f
 8016676:	d020      	beq.n	80166ba <_printf_i+0xb2>
 8016678:	2970      	cmp	r1, #112	; 0x70
 801667a:	d1dd      	bne.n	8016638 <_printf_i+0x30>
 801667c:	6823      	ldr	r3, [r4, #0]
 801667e:	f043 0320 	orr.w	r3, r3, #32
 8016682:	6023      	str	r3, [r4, #0]
 8016684:	e003      	b.n	801668e <_printf_i+0x86>
 8016686:	2975      	cmp	r1, #117	; 0x75
 8016688:	d017      	beq.n	80166ba <_printf_i+0xb2>
 801668a:	2978      	cmp	r1, #120	; 0x78
 801668c:	d1d4      	bne.n	8016638 <_printf_i+0x30>
 801668e:	2378      	movs	r3, #120	; 0x78
 8016690:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016694:	4864      	ldr	r0, [pc, #400]	; (8016828 <_printf_i+0x220>)
 8016696:	e055      	b.n	8016744 <_printf_i+0x13c>
 8016698:	6813      	ldr	r3, [r2, #0]
 801669a:	1d19      	adds	r1, r3, #4
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	6011      	str	r1, [r2, #0]
 80166a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80166a8:	2301      	movs	r3, #1
 80166aa:	e08c      	b.n	80167c6 <_printf_i+0x1be>
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	6011      	str	r1, [r2, #0]
 80166b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80166b4:	bf18      	it	ne
 80166b6:	b21b      	sxthne	r3, r3
 80166b8:	e7cf      	b.n	801665a <_printf_i+0x52>
 80166ba:	6813      	ldr	r3, [r2, #0]
 80166bc:	6825      	ldr	r5, [r4, #0]
 80166be:	1d18      	adds	r0, r3, #4
 80166c0:	6010      	str	r0, [r2, #0]
 80166c2:	0628      	lsls	r0, r5, #24
 80166c4:	d501      	bpl.n	80166ca <_printf_i+0xc2>
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	e002      	b.n	80166d0 <_printf_i+0xc8>
 80166ca:	0668      	lsls	r0, r5, #25
 80166cc:	d5fb      	bpl.n	80166c6 <_printf_i+0xbe>
 80166ce:	881b      	ldrh	r3, [r3, #0]
 80166d0:	4854      	ldr	r0, [pc, #336]	; (8016824 <_printf_i+0x21c>)
 80166d2:	296f      	cmp	r1, #111	; 0x6f
 80166d4:	bf14      	ite	ne
 80166d6:	220a      	movne	r2, #10
 80166d8:	2208      	moveq	r2, #8
 80166da:	2100      	movs	r1, #0
 80166dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80166e0:	6865      	ldr	r5, [r4, #4]
 80166e2:	60a5      	str	r5, [r4, #8]
 80166e4:	2d00      	cmp	r5, #0
 80166e6:	f2c0 8095 	blt.w	8016814 <_printf_i+0x20c>
 80166ea:	6821      	ldr	r1, [r4, #0]
 80166ec:	f021 0104 	bic.w	r1, r1, #4
 80166f0:	6021      	str	r1, [r4, #0]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d13d      	bne.n	8016772 <_printf_i+0x16a>
 80166f6:	2d00      	cmp	r5, #0
 80166f8:	f040 808e 	bne.w	8016818 <_printf_i+0x210>
 80166fc:	4665      	mov	r5, ip
 80166fe:	2a08      	cmp	r2, #8
 8016700:	d10b      	bne.n	801671a <_printf_i+0x112>
 8016702:	6823      	ldr	r3, [r4, #0]
 8016704:	07db      	lsls	r3, r3, #31
 8016706:	d508      	bpl.n	801671a <_printf_i+0x112>
 8016708:	6923      	ldr	r3, [r4, #16]
 801670a:	6862      	ldr	r2, [r4, #4]
 801670c:	429a      	cmp	r2, r3
 801670e:	bfde      	ittt	le
 8016710:	2330      	movle	r3, #48	; 0x30
 8016712:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016716:	f105 35ff 	addle.w	r5, r5, #4294967295
 801671a:	ebac 0305 	sub.w	r3, ip, r5
 801671e:	6123      	str	r3, [r4, #16]
 8016720:	f8cd 8000 	str.w	r8, [sp]
 8016724:	463b      	mov	r3, r7
 8016726:	aa03      	add	r2, sp, #12
 8016728:	4621      	mov	r1, r4
 801672a:	4630      	mov	r0, r6
 801672c:	f7ff fef6 	bl	801651c <_printf_common>
 8016730:	3001      	adds	r0, #1
 8016732:	d14d      	bne.n	80167d0 <_printf_i+0x1c8>
 8016734:	f04f 30ff 	mov.w	r0, #4294967295
 8016738:	b005      	add	sp, #20
 801673a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801673e:	4839      	ldr	r0, [pc, #228]	; (8016824 <_printf_i+0x21c>)
 8016740:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016744:	6813      	ldr	r3, [r2, #0]
 8016746:	6821      	ldr	r1, [r4, #0]
 8016748:	1d1d      	adds	r5, r3, #4
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	6015      	str	r5, [r2, #0]
 801674e:	060a      	lsls	r2, r1, #24
 8016750:	d50b      	bpl.n	801676a <_printf_i+0x162>
 8016752:	07ca      	lsls	r2, r1, #31
 8016754:	bf44      	itt	mi
 8016756:	f041 0120 	orrmi.w	r1, r1, #32
 801675a:	6021      	strmi	r1, [r4, #0]
 801675c:	b91b      	cbnz	r3, 8016766 <_printf_i+0x15e>
 801675e:	6822      	ldr	r2, [r4, #0]
 8016760:	f022 0220 	bic.w	r2, r2, #32
 8016764:	6022      	str	r2, [r4, #0]
 8016766:	2210      	movs	r2, #16
 8016768:	e7b7      	b.n	80166da <_printf_i+0xd2>
 801676a:	064d      	lsls	r5, r1, #25
 801676c:	bf48      	it	mi
 801676e:	b29b      	uxthmi	r3, r3
 8016770:	e7ef      	b.n	8016752 <_printf_i+0x14a>
 8016772:	4665      	mov	r5, ip
 8016774:	fbb3 f1f2 	udiv	r1, r3, r2
 8016778:	fb02 3311 	mls	r3, r2, r1, r3
 801677c:	5cc3      	ldrb	r3, [r0, r3]
 801677e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016782:	460b      	mov	r3, r1
 8016784:	2900      	cmp	r1, #0
 8016786:	d1f5      	bne.n	8016774 <_printf_i+0x16c>
 8016788:	e7b9      	b.n	80166fe <_printf_i+0xf6>
 801678a:	6813      	ldr	r3, [r2, #0]
 801678c:	6825      	ldr	r5, [r4, #0]
 801678e:	6961      	ldr	r1, [r4, #20]
 8016790:	1d18      	adds	r0, r3, #4
 8016792:	6010      	str	r0, [r2, #0]
 8016794:	0628      	lsls	r0, r5, #24
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	d501      	bpl.n	801679e <_printf_i+0x196>
 801679a:	6019      	str	r1, [r3, #0]
 801679c:	e002      	b.n	80167a4 <_printf_i+0x19c>
 801679e:	066a      	lsls	r2, r5, #25
 80167a0:	d5fb      	bpl.n	801679a <_printf_i+0x192>
 80167a2:	8019      	strh	r1, [r3, #0]
 80167a4:	2300      	movs	r3, #0
 80167a6:	6123      	str	r3, [r4, #16]
 80167a8:	4665      	mov	r5, ip
 80167aa:	e7b9      	b.n	8016720 <_printf_i+0x118>
 80167ac:	6813      	ldr	r3, [r2, #0]
 80167ae:	1d19      	adds	r1, r3, #4
 80167b0:	6011      	str	r1, [r2, #0]
 80167b2:	681d      	ldr	r5, [r3, #0]
 80167b4:	6862      	ldr	r2, [r4, #4]
 80167b6:	2100      	movs	r1, #0
 80167b8:	4628      	mov	r0, r5
 80167ba:	f7e9 fd29 	bl	8000210 <memchr>
 80167be:	b108      	cbz	r0, 80167c4 <_printf_i+0x1bc>
 80167c0:	1b40      	subs	r0, r0, r5
 80167c2:	6060      	str	r0, [r4, #4]
 80167c4:	6863      	ldr	r3, [r4, #4]
 80167c6:	6123      	str	r3, [r4, #16]
 80167c8:	2300      	movs	r3, #0
 80167ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80167ce:	e7a7      	b.n	8016720 <_printf_i+0x118>
 80167d0:	6923      	ldr	r3, [r4, #16]
 80167d2:	462a      	mov	r2, r5
 80167d4:	4639      	mov	r1, r7
 80167d6:	4630      	mov	r0, r6
 80167d8:	47c0      	blx	r8
 80167da:	3001      	adds	r0, #1
 80167dc:	d0aa      	beq.n	8016734 <_printf_i+0x12c>
 80167de:	6823      	ldr	r3, [r4, #0]
 80167e0:	079b      	lsls	r3, r3, #30
 80167e2:	d413      	bmi.n	801680c <_printf_i+0x204>
 80167e4:	68e0      	ldr	r0, [r4, #12]
 80167e6:	9b03      	ldr	r3, [sp, #12]
 80167e8:	4298      	cmp	r0, r3
 80167ea:	bfb8      	it	lt
 80167ec:	4618      	movlt	r0, r3
 80167ee:	e7a3      	b.n	8016738 <_printf_i+0x130>
 80167f0:	2301      	movs	r3, #1
 80167f2:	464a      	mov	r2, r9
 80167f4:	4639      	mov	r1, r7
 80167f6:	4630      	mov	r0, r6
 80167f8:	47c0      	blx	r8
 80167fa:	3001      	adds	r0, #1
 80167fc:	d09a      	beq.n	8016734 <_printf_i+0x12c>
 80167fe:	3501      	adds	r5, #1
 8016800:	68e3      	ldr	r3, [r4, #12]
 8016802:	9a03      	ldr	r2, [sp, #12]
 8016804:	1a9b      	subs	r3, r3, r2
 8016806:	42ab      	cmp	r3, r5
 8016808:	dcf2      	bgt.n	80167f0 <_printf_i+0x1e8>
 801680a:	e7eb      	b.n	80167e4 <_printf_i+0x1dc>
 801680c:	2500      	movs	r5, #0
 801680e:	f104 0919 	add.w	r9, r4, #25
 8016812:	e7f5      	b.n	8016800 <_printf_i+0x1f8>
 8016814:	2b00      	cmp	r3, #0
 8016816:	d1ac      	bne.n	8016772 <_printf_i+0x16a>
 8016818:	7803      	ldrb	r3, [r0, #0]
 801681a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801681e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016822:	e76c      	b.n	80166fe <_printf_i+0xf6>
 8016824:	0801a930 	.word	0x0801a930
 8016828:	0801a941 	.word	0x0801a941

0801682c <_scanf_float>:
 801682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016830:	469a      	mov	sl, r3
 8016832:	688b      	ldr	r3, [r1, #8]
 8016834:	4616      	mov	r6, r2
 8016836:	1e5a      	subs	r2, r3, #1
 8016838:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801683c:	b087      	sub	sp, #28
 801683e:	bf83      	ittte	hi
 8016840:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016844:	189b      	addhi	r3, r3, r2
 8016846:	9301      	strhi	r3, [sp, #4]
 8016848:	2300      	movls	r3, #0
 801684a:	bf86      	itte	hi
 801684c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016850:	608b      	strhi	r3, [r1, #8]
 8016852:	9301      	strls	r3, [sp, #4]
 8016854:	680b      	ldr	r3, [r1, #0]
 8016856:	4688      	mov	r8, r1
 8016858:	f04f 0b00 	mov.w	fp, #0
 801685c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016860:	f848 3b1c 	str.w	r3, [r8], #28
 8016864:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016868:	4607      	mov	r7, r0
 801686a:	460c      	mov	r4, r1
 801686c:	4645      	mov	r5, r8
 801686e:	465a      	mov	r2, fp
 8016870:	46d9      	mov	r9, fp
 8016872:	f8cd b008 	str.w	fp, [sp, #8]
 8016876:	68a1      	ldr	r1, [r4, #8]
 8016878:	b181      	cbz	r1, 801689c <_scanf_float+0x70>
 801687a:	6833      	ldr	r3, [r6, #0]
 801687c:	781b      	ldrb	r3, [r3, #0]
 801687e:	2b49      	cmp	r3, #73	; 0x49
 8016880:	d071      	beq.n	8016966 <_scanf_float+0x13a>
 8016882:	d84d      	bhi.n	8016920 <_scanf_float+0xf4>
 8016884:	2b39      	cmp	r3, #57	; 0x39
 8016886:	d840      	bhi.n	801690a <_scanf_float+0xde>
 8016888:	2b31      	cmp	r3, #49	; 0x31
 801688a:	f080 8088 	bcs.w	801699e <_scanf_float+0x172>
 801688e:	2b2d      	cmp	r3, #45	; 0x2d
 8016890:	f000 8090 	beq.w	80169b4 <_scanf_float+0x188>
 8016894:	d815      	bhi.n	80168c2 <_scanf_float+0x96>
 8016896:	2b2b      	cmp	r3, #43	; 0x2b
 8016898:	f000 808c 	beq.w	80169b4 <_scanf_float+0x188>
 801689c:	f1b9 0f00 	cmp.w	r9, #0
 80168a0:	d003      	beq.n	80168aa <_scanf_float+0x7e>
 80168a2:	6823      	ldr	r3, [r4, #0]
 80168a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80168a8:	6023      	str	r3, [r4, #0]
 80168aa:	3a01      	subs	r2, #1
 80168ac:	2a01      	cmp	r2, #1
 80168ae:	f200 80ea 	bhi.w	8016a86 <_scanf_float+0x25a>
 80168b2:	4545      	cmp	r5, r8
 80168b4:	f200 80dc 	bhi.w	8016a70 <_scanf_float+0x244>
 80168b8:	2601      	movs	r6, #1
 80168ba:	4630      	mov	r0, r6
 80168bc:	b007      	add	sp, #28
 80168be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168c2:	2b2e      	cmp	r3, #46	; 0x2e
 80168c4:	f000 809f 	beq.w	8016a06 <_scanf_float+0x1da>
 80168c8:	2b30      	cmp	r3, #48	; 0x30
 80168ca:	d1e7      	bne.n	801689c <_scanf_float+0x70>
 80168cc:	6820      	ldr	r0, [r4, #0]
 80168ce:	f410 7f80 	tst.w	r0, #256	; 0x100
 80168d2:	d064      	beq.n	801699e <_scanf_float+0x172>
 80168d4:	9b01      	ldr	r3, [sp, #4]
 80168d6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80168da:	6020      	str	r0, [r4, #0]
 80168dc:	f109 0901 	add.w	r9, r9, #1
 80168e0:	b11b      	cbz	r3, 80168ea <_scanf_float+0xbe>
 80168e2:	3b01      	subs	r3, #1
 80168e4:	3101      	adds	r1, #1
 80168e6:	9301      	str	r3, [sp, #4]
 80168e8:	60a1      	str	r1, [r4, #8]
 80168ea:	68a3      	ldr	r3, [r4, #8]
 80168ec:	3b01      	subs	r3, #1
 80168ee:	60a3      	str	r3, [r4, #8]
 80168f0:	6923      	ldr	r3, [r4, #16]
 80168f2:	3301      	adds	r3, #1
 80168f4:	6123      	str	r3, [r4, #16]
 80168f6:	6873      	ldr	r3, [r6, #4]
 80168f8:	3b01      	subs	r3, #1
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	6073      	str	r3, [r6, #4]
 80168fe:	f340 80ac 	ble.w	8016a5a <_scanf_float+0x22e>
 8016902:	6833      	ldr	r3, [r6, #0]
 8016904:	3301      	adds	r3, #1
 8016906:	6033      	str	r3, [r6, #0]
 8016908:	e7b5      	b.n	8016876 <_scanf_float+0x4a>
 801690a:	2b45      	cmp	r3, #69	; 0x45
 801690c:	f000 8085 	beq.w	8016a1a <_scanf_float+0x1ee>
 8016910:	2b46      	cmp	r3, #70	; 0x46
 8016912:	d06a      	beq.n	80169ea <_scanf_float+0x1be>
 8016914:	2b41      	cmp	r3, #65	; 0x41
 8016916:	d1c1      	bne.n	801689c <_scanf_float+0x70>
 8016918:	2a01      	cmp	r2, #1
 801691a:	d1bf      	bne.n	801689c <_scanf_float+0x70>
 801691c:	2202      	movs	r2, #2
 801691e:	e046      	b.n	80169ae <_scanf_float+0x182>
 8016920:	2b65      	cmp	r3, #101	; 0x65
 8016922:	d07a      	beq.n	8016a1a <_scanf_float+0x1ee>
 8016924:	d818      	bhi.n	8016958 <_scanf_float+0x12c>
 8016926:	2b54      	cmp	r3, #84	; 0x54
 8016928:	d066      	beq.n	80169f8 <_scanf_float+0x1cc>
 801692a:	d811      	bhi.n	8016950 <_scanf_float+0x124>
 801692c:	2b4e      	cmp	r3, #78	; 0x4e
 801692e:	d1b5      	bne.n	801689c <_scanf_float+0x70>
 8016930:	2a00      	cmp	r2, #0
 8016932:	d146      	bne.n	80169c2 <_scanf_float+0x196>
 8016934:	f1b9 0f00 	cmp.w	r9, #0
 8016938:	d145      	bne.n	80169c6 <_scanf_float+0x19a>
 801693a:	6821      	ldr	r1, [r4, #0]
 801693c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016940:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016944:	d13f      	bne.n	80169c6 <_scanf_float+0x19a>
 8016946:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801694a:	6021      	str	r1, [r4, #0]
 801694c:	2201      	movs	r2, #1
 801694e:	e02e      	b.n	80169ae <_scanf_float+0x182>
 8016950:	2b59      	cmp	r3, #89	; 0x59
 8016952:	d01e      	beq.n	8016992 <_scanf_float+0x166>
 8016954:	2b61      	cmp	r3, #97	; 0x61
 8016956:	e7de      	b.n	8016916 <_scanf_float+0xea>
 8016958:	2b6e      	cmp	r3, #110	; 0x6e
 801695a:	d0e9      	beq.n	8016930 <_scanf_float+0x104>
 801695c:	d815      	bhi.n	801698a <_scanf_float+0x15e>
 801695e:	2b66      	cmp	r3, #102	; 0x66
 8016960:	d043      	beq.n	80169ea <_scanf_float+0x1be>
 8016962:	2b69      	cmp	r3, #105	; 0x69
 8016964:	d19a      	bne.n	801689c <_scanf_float+0x70>
 8016966:	f1bb 0f00 	cmp.w	fp, #0
 801696a:	d138      	bne.n	80169de <_scanf_float+0x1b2>
 801696c:	f1b9 0f00 	cmp.w	r9, #0
 8016970:	d197      	bne.n	80168a2 <_scanf_float+0x76>
 8016972:	6821      	ldr	r1, [r4, #0]
 8016974:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016978:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801697c:	d195      	bne.n	80168aa <_scanf_float+0x7e>
 801697e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016982:	6021      	str	r1, [r4, #0]
 8016984:	f04f 0b01 	mov.w	fp, #1
 8016988:	e011      	b.n	80169ae <_scanf_float+0x182>
 801698a:	2b74      	cmp	r3, #116	; 0x74
 801698c:	d034      	beq.n	80169f8 <_scanf_float+0x1cc>
 801698e:	2b79      	cmp	r3, #121	; 0x79
 8016990:	d184      	bne.n	801689c <_scanf_float+0x70>
 8016992:	f1bb 0f07 	cmp.w	fp, #7
 8016996:	d181      	bne.n	801689c <_scanf_float+0x70>
 8016998:	f04f 0b08 	mov.w	fp, #8
 801699c:	e007      	b.n	80169ae <_scanf_float+0x182>
 801699e:	eb12 0f0b 	cmn.w	r2, fp
 80169a2:	f47f af7b 	bne.w	801689c <_scanf_float+0x70>
 80169a6:	6821      	ldr	r1, [r4, #0]
 80169a8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80169ac:	6021      	str	r1, [r4, #0]
 80169ae:	702b      	strb	r3, [r5, #0]
 80169b0:	3501      	adds	r5, #1
 80169b2:	e79a      	b.n	80168ea <_scanf_float+0xbe>
 80169b4:	6821      	ldr	r1, [r4, #0]
 80169b6:	0608      	lsls	r0, r1, #24
 80169b8:	f57f af70 	bpl.w	801689c <_scanf_float+0x70>
 80169bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80169c0:	e7f4      	b.n	80169ac <_scanf_float+0x180>
 80169c2:	2a02      	cmp	r2, #2
 80169c4:	d047      	beq.n	8016a56 <_scanf_float+0x22a>
 80169c6:	f1bb 0f01 	cmp.w	fp, #1
 80169ca:	d003      	beq.n	80169d4 <_scanf_float+0x1a8>
 80169cc:	f1bb 0f04 	cmp.w	fp, #4
 80169d0:	f47f af64 	bne.w	801689c <_scanf_float+0x70>
 80169d4:	f10b 0b01 	add.w	fp, fp, #1
 80169d8:	fa5f fb8b 	uxtb.w	fp, fp
 80169dc:	e7e7      	b.n	80169ae <_scanf_float+0x182>
 80169de:	f1bb 0f03 	cmp.w	fp, #3
 80169e2:	d0f7      	beq.n	80169d4 <_scanf_float+0x1a8>
 80169e4:	f1bb 0f05 	cmp.w	fp, #5
 80169e8:	e7f2      	b.n	80169d0 <_scanf_float+0x1a4>
 80169ea:	f1bb 0f02 	cmp.w	fp, #2
 80169ee:	f47f af55 	bne.w	801689c <_scanf_float+0x70>
 80169f2:	f04f 0b03 	mov.w	fp, #3
 80169f6:	e7da      	b.n	80169ae <_scanf_float+0x182>
 80169f8:	f1bb 0f06 	cmp.w	fp, #6
 80169fc:	f47f af4e 	bne.w	801689c <_scanf_float+0x70>
 8016a00:	f04f 0b07 	mov.w	fp, #7
 8016a04:	e7d3      	b.n	80169ae <_scanf_float+0x182>
 8016a06:	6821      	ldr	r1, [r4, #0]
 8016a08:	0588      	lsls	r0, r1, #22
 8016a0a:	f57f af47 	bpl.w	801689c <_scanf_float+0x70>
 8016a0e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016a12:	6021      	str	r1, [r4, #0]
 8016a14:	f8cd 9008 	str.w	r9, [sp, #8]
 8016a18:	e7c9      	b.n	80169ae <_scanf_float+0x182>
 8016a1a:	6821      	ldr	r1, [r4, #0]
 8016a1c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016a20:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016a24:	d006      	beq.n	8016a34 <_scanf_float+0x208>
 8016a26:	0548      	lsls	r0, r1, #21
 8016a28:	f57f af38 	bpl.w	801689c <_scanf_float+0x70>
 8016a2c:	f1b9 0f00 	cmp.w	r9, #0
 8016a30:	f43f af3b 	beq.w	80168aa <_scanf_float+0x7e>
 8016a34:	0588      	lsls	r0, r1, #22
 8016a36:	bf58      	it	pl
 8016a38:	9802      	ldrpl	r0, [sp, #8]
 8016a3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016a3e:	bf58      	it	pl
 8016a40:	eba9 0000 	subpl.w	r0, r9, r0
 8016a44:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016a48:	bf58      	it	pl
 8016a4a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016a4e:	6021      	str	r1, [r4, #0]
 8016a50:	f04f 0900 	mov.w	r9, #0
 8016a54:	e7ab      	b.n	80169ae <_scanf_float+0x182>
 8016a56:	2203      	movs	r2, #3
 8016a58:	e7a9      	b.n	80169ae <_scanf_float+0x182>
 8016a5a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016a5e:	9205      	str	r2, [sp, #20]
 8016a60:	4631      	mov	r1, r6
 8016a62:	4638      	mov	r0, r7
 8016a64:	4798      	blx	r3
 8016a66:	9a05      	ldr	r2, [sp, #20]
 8016a68:	2800      	cmp	r0, #0
 8016a6a:	f43f af04 	beq.w	8016876 <_scanf_float+0x4a>
 8016a6e:	e715      	b.n	801689c <_scanf_float+0x70>
 8016a70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016a78:	4632      	mov	r2, r6
 8016a7a:	4638      	mov	r0, r7
 8016a7c:	4798      	blx	r3
 8016a7e:	6923      	ldr	r3, [r4, #16]
 8016a80:	3b01      	subs	r3, #1
 8016a82:	6123      	str	r3, [r4, #16]
 8016a84:	e715      	b.n	80168b2 <_scanf_float+0x86>
 8016a86:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016a8a:	2b06      	cmp	r3, #6
 8016a8c:	d80a      	bhi.n	8016aa4 <_scanf_float+0x278>
 8016a8e:	f1bb 0f02 	cmp.w	fp, #2
 8016a92:	d968      	bls.n	8016b66 <_scanf_float+0x33a>
 8016a94:	f1ab 0b03 	sub.w	fp, fp, #3
 8016a98:	fa5f fb8b 	uxtb.w	fp, fp
 8016a9c:	eba5 0b0b 	sub.w	fp, r5, fp
 8016aa0:	455d      	cmp	r5, fp
 8016aa2:	d14b      	bne.n	8016b3c <_scanf_float+0x310>
 8016aa4:	6823      	ldr	r3, [r4, #0]
 8016aa6:	05da      	lsls	r2, r3, #23
 8016aa8:	d51f      	bpl.n	8016aea <_scanf_float+0x2be>
 8016aaa:	055b      	lsls	r3, r3, #21
 8016aac:	d468      	bmi.n	8016b80 <_scanf_float+0x354>
 8016aae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016ab2:	6923      	ldr	r3, [r4, #16]
 8016ab4:	2965      	cmp	r1, #101	; 0x65
 8016ab6:	f103 33ff 	add.w	r3, r3, #4294967295
 8016aba:	f105 3bff 	add.w	fp, r5, #4294967295
 8016abe:	6123      	str	r3, [r4, #16]
 8016ac0:	d00d      	beq.n	8016ade <_scanf_float+0x2b2>
 8016ac2:	2945      	cmp	r1, #69	; 0x45
 8016ac4:	d00b      	beq.n	8016ade <_scanf_float+0x2b2>
 8016ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016aca:	4632      	mov	r2, r6
 8016acc:	4638      	mov	r0, r7
 8016ace:	4798      	blx	r3
 8016ad0:	6923      	ldr	r3, [r4, #16]
 8016ad2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016ad6:	3b01      	subs	r3, #1
 8016ad8:	f1a5 0b02 	sub.w	fp, r5, #2
 8016adc:	6123      	str	r3, [r4, #16]
 8016ade:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016ae2:	4632      	mov	r2, r6
 8016ae4:	4638      	mov	r0, r7
 8016ae6:	4798      	blx	r3
 8016ae8:	465d      	mov	r5, fp
 8016aea:	6826      	ldr	r6, [r4, #0]
 8016aec:	f016 0610 	ands.w	r6, r6, #16
 8016af0:	d17a      	bne.n	8016be8 <_scanf_float+0x3bc>
 8016af2:	702e      	strb	r6, [r5, #0]
 8016af4:	6823      	ldr	r3, [r4, #0]
 8016af6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016afe:	d142      	bne.n	8016b86 <_scanf_float+0x35a>
 8016b00:	9b02      	ldr	r3, [sp, #8]
 8016b02:	eba9 0303 	sub.w	r3, r9, r3
 8016b06:	425a      	negs	r2, r3
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d149      	bne.n	8016ba0 <_scanf_float+0x374>
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	4641      	mov	r1, r8
 8016b10:	4638      	mov	r0, r7
 8016b12:	f000 ff0d 	bl	8017930 <_strtod_r>
 8016b16:	6825      	ldr	r5, [r4, #0]
 8016b18:	f8da 3000 	ldr.w	r3, [sl]
 8016b1c:	f015 0f02 	tst.w	r5, #2
 8016b20:	f103 0204 	add.w	r2, r3, #4
 8016b24:	ec59 8b10 	vmov	r8, r9, d0
 8016b28:	f8ca 2000 	str.w	r2, [sl]
 8016b2c:	d043      	beq.n	8016bb6 <_scanf_float+0x38a>
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	e9c3 8900 	strd	r8, r9, [r3]
 8016b34:	68e3      	ldr	r3, [r4, #12]
 8016b36:	3301      	adds	r3, #1
 8016b38:	60e3      	str	r3, [r4, #12]
 8016b3a:	e6be      	b.n	80168ba <_scanf_float+0x8e>
 8016b3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b44:	4632      	mov	r2, r6
 8016b46:	4638      	mov	r0, r7
 8016b48:	4798      	blx	r3
 8016b4a:	6923      	ldr	r3, [r4, #16]
 8016b4c:	3b01      	subs	r3, #1
 8016b4e:	6123      	str	r3, [r4, #16]
 8016b50:	e7a6      	b.n	8016aa0 <_scanf_float+0x274>
 8016b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b56:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b5a:	4632      	mov	r2, r6
 8016b5c:	4638      	mov	r0, r7
 8016b5e:	4798      	blx	r3
 8016b60:	6923      	ldr	r3, [r4, #16]
 8016b62:	3b01      	subs	r3, #1
 8016b64:	6123      	str	r3, [r4, #16]
 8016b66:	4545      	cmp	r5, r8
 8016b68:	d8f3      	bhi.n	8016b52 <_scanf_float+0x326>
 8016b6a:	e6a5      	b.n	80168b8 <_scanf_float+0x8c>
 8016b6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016b70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016b74:	4632      	mov	r2, r6
 8016b76:	4638      	mov	r0, r7
 8016b78:	4798      	blx	r3
 8016b7a:	6923      	ldr	r3, [r4, #16]
 8016b7c:	3b01      	subs	r3, #1
 8016b7e:	6123      	str	r3, [r4, #16]
 8016b80:	4545      	cmp	r5, r8
 8016b82:	d8f3      	bhi.n	8016b6c <_scanf_float+0x340>
 8016b84:	e698      	b.n	80168b8 <_scanf_float+0x8c>
 8016b86:	9b03      	ldr	r3, [sp, #12]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d0bf      	beq.n	8016b0c <_scanf_float+0x2e0>
 8016b8c:	9904      	ldr	r1, [sp, #16]
 8016b8e:	230a      	movs	r3, #10
 8016b90:	4632      	mov	r2, r6
 8016b92:	3101      	adds	r1, #1
 8016b94:	4638      	mov	r0, r7
 8016b96:	f000 ff57 	bl	8017a48 <_strtol_r>
 8016b9a:	9b03      	ldr	r3, [sp, #12]
 8016b9c:	9d04      	ldr	r5, [sp, #16]
 8016b9e:	1ac2      	subs	r2, r0, r3
 8016ba0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016ba4:	429d      	cmp	r5, r3
 8016ba6:	bf28      	it	cs
 8016ba8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016bac:	490f      	ldr	r1, [pc, #60]	; (8016bec <_scanf_float+0x3c0>)
 8016bae:	4628      	mov	r0, r5
 8016bb0:	f000 f858 	bl	8016c64 <siprintf>
 8016bb4:	e7aa      	b.n	8016b0c <_scanf_float+0x2e0>
 8016bb6:	f015 0504 	ands.w	r5, r5, #4
 8016bba:	d1b8      	bne.n	8016b2e <_scanf_float+0x302>
 8016bbc:	681f      	ldr	r7, [r3, #0]
 8016bbe:	ee10 2a10 	vmov	r2, s0
 8016bc2:	464b      	mov	r3, r9
 8016bc4:	ee10 0a10 	vmov	r0, s0
 8016bc8:	4649      	mov	r1, r9
 8016bca:	f7e9 ffc7 	bl	8000b5c <__aeabi_dcmpun>
 8016bce:	b128      	cbz	r0, 8016bdc <_scanf_float+0x3b0>
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	f000 f80d 	bl	8016bf0 <nanf>
 8016bd6:	ed87 0a00 	vstr	s0, [r7]
 8016bda:	e7ab      	b.n	8016b34 <_scanf_float+0x308>
 8016bdc:	4640      	mov	r0, r8
 8016bde:	4649      	mov	r1, r9
 8016be0:	f7ea f81a 	bl	8000c18 <__aeabi_d2f>
 8016be4:	6038      	str	r0, [r7, #0]
 8016be6:	e7a5      	b.n	8016b34 <_scanf_float+0x308>
 8016be8:	2600      	movs	r6, #0
 8016bea:	e666      	b.n	80168ba <_scanf_float+0x8e>
 8016bec:	0801a952 	.word	0x0801a952

08016bf0 <nanf>:
 8016bf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016bf8 <nanf+0x8>
 8016bf4:	4770      	bx	lr
 8016bf6:	bf00      	nop
 8016bf8:	7fc00000 	.word	0x7fc00000

08016bfc <sniprintf>:
 8016bfc:	b40c      	push	{r2, r3}
 8016bfe:	b530      	push	{r4, r5, lr}
 8016c00:	4b17      	ldr	r3, [pc, #92]	; (8016c60 <sniprintf+0x64>)
 8016c02:	1e0c      	subs	r4, r1, #0
 8016c04:	b09d      	sub	sp, #116	; 0x74
 8016c06:	681d      	ldr	r5, [r3, #0]
 8016c08:	da08      	bge.n	8016c1c <sniprintf+0x20>
 8016c0a:	238b      	movs	r3, #139	; 0x8b
 8016c0c:	602b      	str	r3, [r5, #0]
 8016c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8016c12:	b01d      	add	sp, #116	; 0x74
 8016c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c18:	b002      	add	sp, #8
 8016c1a:	4770      	bx	lr
 8016c1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016c20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016c24:	bf14      	ite	ne
 8016c26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016c2a:	4623      	moveq	r3, r4
 8016c2c:	9304      	str	r3, [sp, #16]
 8016c2e:	9307      	str	r3, [sp, #28]
 8016c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c34:	9002      	str	r0, [sp, #8]
 8016c36:	9006      	str	r0, [sp, #24]
 8016c38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016c3e:	ab21      	add	r3, sp, #132	; 0x84
 8016c40:	a902      	add	r1, sp, #8
 8016c42:	4628      	mov	r0, r5
 8016c44:	9301      	str	r3, [sp, #4]
 8016c46:	f002 fdf3 	bl	8019830 <_svfiprintf_r>
 8016c4a:	1c43      	adds	r3, r0, #1
 8016c4c:	bfbc      	itt	lt
 8016c4e:	238b      	movlt	r3, #139	; 0x8b
 8016c50:	602b      	strlt	r3, [r5, #0]
 8016c52:	2c00      	cmp	r4, #0
 8016c54:	d0dd      	beq.n	8016c12 <sniprintf+0x16>
 8016c56:	9b02      	ldr	r3, [sp, #8]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	701a      	strb	r2, [r3, #0]
 8016c5c:	e7d9      	b.n	8016c12 <sniprintf+0x16>
 8016c5e:	bf00      	nop
 8016c60:	2000000c 	.word	0x2000000c

08016c64 <siprintf>:
 8016c64:	b40e      	push	{r1, r2, r3}
 8016c66:	b500      	push	{lr}
 8016c68:	b09c      	sub	sp, #112	; 0x70
 8016c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8016c6c:	9002      	str	r0, [sp, #8]
 8016c6e:	9006      	str	r0, [sp, #24]
 8016c70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c74:	4809      	ldr	r0, [pc, #36]	; (8016c9c <siprintf+0x38>)
 8016c76:	9107      	str	r1, [sp, #28]
 8016c78:	9104      	str	r1, [sp, #16]
 8016c7a:	4909      	ldr	r1, [pc, #36]	; (8016ca0 <siprintf+0x3c>)
 8016c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c80:	9105      	str	r1, [sp, #20]
 8016c82:	6800      	ldr	r0, [r0, #0]
 8016c84:	9301      	str	r3, [sp, #4]
 8016c86:	a902      	add	r1, sp, #8
 8016c88:	f002 fdd2 	bl	8019830 <_svfiprintf_r>
 8016c8c:	9b02      	ldr	r3, [sp, #8]
 8016c8e:	2200      	movs	r2, #0
 8016c90:	701a      	strb	r2, [r3, #0]
 8016c92:	b01c      	add	sp, #112	; 0x70
 8016c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c98:	b003      	add	sp, #12
 8016c9a:	4770      	bx	lr
 8016c9c:	2000000c 	.word	0x2000000c
 8016ca0:	ffff0208 	.word	0xffff0208

08016ca4 <siscanf>:
 8016ca4:	b40e      	push	{r1, r2, r3}
 8016ca6:	b530      	push	{r4, r5, lr}
 8016ca8:	b09c      	sub	sp, #112	; 0x70
 8016caa:	ac1f      	add	r4, sp, #124	; 0x7c
 8016cac:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016cb0:	f854 5b04 	ldr.w	r5, [r4], #4
 8016cb4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016cb8:	9002      	str	r0, [sp, #8]
 8016cba:	9006      	str	r0, [sp, #24]
 8016cbc:	f7e9 faa0 	bl	8000200 <strlen>
 8016cc0:	4b0b      	ldr	r3, [pc, #44]	; (8016cf0 <siscanf+0x4c>)
 8016cc2:	9003      	str	r0, [sp, #12]
 8016cc4:	9007      	str	r0, [sp, #28]
 8016cc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8016cc8:	480a      	ldr	r0, [pc, #40]	; (8016cf4 <siscanf+0x50>)
 8016cca:	9401      	str	r4, [sp, #4]
 8016ccc:	2300      	movs	r3, #0
 8016cce:	930f      	str	r3, [sp, #60]	; 0x3c
 8016cd0:	9314      	str	r3, [sp, #80]	; 0x50
 8016cd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016cd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016cda:	462a      	mov	r2, r5
 8016cdc:	4623      	mov	r3, r4
 8016cde:	a902      	add	r1, sp, #8
 8016ce0:	6800      	ldr	r0, [r0, #0]
 8016ce2:	f002 fef7 	bl	8019ad4 <__ssvfiscanf_r>
 8016ce6:	b01c      	add	sp, #112	; 0x70
 8016ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016cec:	b003      	add	sp, #12
 8016cee:	4770      	bx	lr
 8016cf0:	08016cf9 	.word	0x08016cf9
 8016cf4:	2000000c 	.word	0x2000000c

08016cf8 <__seofread>:
 8016cf8:	2000      	movs	r0, #0
 8016cfa:	4770      	bx	lr

08016cfc <strcpy>:
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d02:	f803 2b01 	strb.w	r2, [r3], #1
 8016d06:	2a00      	cmp	r2, #0
 8016d08:	d1f9      	bne.n	8016cfe <strcpy+0x2>
 8016d0a:	4770      	bx	lr

08016d0c <sulp>:
 8016d0c:	b570      	push	{r4, r5, r6, lr}
 8016d0e:	4604      	mov	r4, r0
 8016d10:	460d      	mov	r5, r1
 8016d12:	ec45 4b10 	vmov	d0, r4, r5
 8016d16:	4616      	mov	r6, r2
 8016d18:	f002 fb46 	bl	80193a8 <__ulp>
 8016d1c:	ec51 0b10 	vmov	r0, r1, d0
 8016d20:	b17e      	cbz	r6, 8016d42 <sulp+0x36>
 8016d22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016d26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	dd09      	ble.n	8016d42 <sulp+0x36>
 8016d2e:	051b      	lsls	r3, r3, #20
 8016d30:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016d34:	2400      	movs	r4, #0
 8016d36:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016d3a:	4622      	mov	r2, r4
 8016d3c:	462b      	mov	r3, r5
 8016d3e:	f7e9 fc73 	bl	8000628 <__aeabi_dmul>
 8016d42:	bd70      	pop	{r4, r5, r6, pc}
 8016d44:	0000      	movs	r0, r0
	...

08016d48 <_strtod_l>:
 8016d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d4c:	461f      	mov	r7, r3
 8016d4e:	b0a1      	sub	sp, #132	; 0x84
 8016d50:	2300      	movs	r3, #0
 8016d52:	4681      	mov	r9, r0
 8016d54:	4638      	mov	r0, r7
 8016d56:	460e      	mov	r6, r1
 8016d58:	9217      	str	r2, [sp, #92]	; 0x5c
 8016d5a:	931c      	str	r3, [sp, #112]	; 0x70
 8016d5c:	f002 f824 	bl	8018da8 <__localeconv_l>
 8016d60:	4680      	mov	r8, r0
 8016d62:	6800      	ldr	r0, [r0, #0]
 8016d64:	f7e9 fa4c 	bl	8000200 <strlen>
 8016d68:	f04f 0a00 	mov.w	sl, #0
 8016d6c:	4604      	mov	r4, r0
 8016d6e:	f04f 0b00 	mov.w	fp, #0
 8016d72:	961b      	str	r6, [sp, #108]	; 0x6c
 8016d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016d76:	781a      	ldrb	r2, [r3, #0]
 8016d78:	2a0d      	cmp	r2, #13
 8016d7a:	d832      	bhi.n	8016de2 <_strtod_l+0x9a>
 8016d7c:	2a09      	cmp	r2, #9
 8016d7e:	d236      	bcs.n	8016dee <_strtod_l+0xa6>
 8016d80:	2a00      	cmp	r2, #0
 8016d82:	d03e      	beq.n	8016e02 <_strtod_l+0xba>
 8016d84:	2300      	movs	r3, #0
 8016d86:	930d      	str	r3, [sp, #52]	; 0x34
 8016d88:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016d8a:	782b      	ldrb	r3, [r5, #0]
 8016d8c:	2b30      	cmp	r3, #48	; 0x30
 8016d8e:	f040 80ac 	bne.w	8016eea <_strtod_l+0x1a2>
 8016d92:	786b      	ldrb	r3, [r5, #1]
 8016d94:	2b58      	cmp	r3, #88	; 0x58
 8016d96:	d001      	beq.n	8016d9c <_strtod_l+0x54>
 8016d98:	2b78      	cmp	r3, #120	; 0x78
 8016d9a:	d167      	bne.n	8016e6c <_strtod_l+0x124>
 8016d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d9e:	9301      	str	r3, [sp, #4]
 8016da0:	ab1c      	add	r3, sp, #112	; 0x70
 8016da2:	9300      	str	r3, [sp, #0]
 8016da4:	9702      	str	r7, [sp, #8]
 8016da6:	ab1d      	add	r3, sp, #116	; 0x74
 8016da8:	4a88      	ldr	r2, [pc, #544]	; (8016fcc <_strtod_l+0x284>)
 8016daa:	a91b      	add	r1, sp, #108	; 0x6c
 8016dac:	4648      	mov	r0, r9
 8016dae:	f001 fd12 	bl	80187d6 <__gethex>
 8016db2:	f010 0407 	ands.w	r4, r0, #7
 8016db6:	4606      	mov	r6, r0
 8016db8:	d005      	beq.n	8016dc6 <_strtod_l+0x7e>
 8016dba:	2c06      	cmp	r4, #6
 8016dbc:	d12b      	bne.n	8016e16 <_strtod_l+0xce>
 8016dbe:	3501      	adds	r5, #1
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	951b      	str	r5, [sp, #108]	; 0x6c
 8016dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8016dc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	f040 859a 	bne.w	8017902 <_strtod_l+0xbba>
 8016dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016dd0:	b1e3      	cbz	r3, 8016e0c <_strtod_l+0xc4>
 8016dd2:	4652      	mov	r2, sl
 8016dd4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016dd8:	ec43 2b10 	vmov	d0, r2, r3
 8016ddc:	b021      	add	sp, #132	; 0x84
 8016dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016de2:	2a2b      	cmp	r2, #43	; 0x2b
 8016de4:	d015      	beq.n	8016e12 <_strtod_l+0xca>
 8016de6:	2a2d      	cmp	r2, #45	; 0x2d
 8016de8:	d004      	beq.n	8016df4 <_strtod_l+0xac>
 8016dea:	2a20      	cmp	r2, #32
 8016dec:	d1ca      	bne.n	8016d84 <_strtod_l+0x3c>
 8016dee:	3301      	adds	r3, #1
 8016df0:	931b      	str	r3, [sp, #108]	; 0x6c
 8016df2:	e7bf      	b.n	8016d74 <_strtod_l+0x2c>
 8016df4:	2201      	movs	r2, #1
 8016df6:	920d      	str	r2, [sp, #52]	; 0x34
 8016df8:	1c5a      	adds	r2, r3, #1
 8016dfa:	921b      	str	r2, [sp, #108]	; 0x6c
 8016dfc:	785b      	ldrb	r3, [r3, #1]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d1c2      	bne.n	8016d88 <_strtod_l+0x40>
 8016e02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e04:	961b      	str	r6, [sp, #108]	; 0x6c
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	f040 8579 	bne.w	80178fe <_strtod_l+0xbb6>
 8016e0c:	4652      	mov	r2, sl
 8016e0e:	465b      	mov	r3, fp
 8016e10:	e7e2      	b.n	8016dd8 <_strtod_l+0x90>
 8016e12:	2200      	movs	r2, #0
 8016e14:	e7ef      	b.n	8016df6 <_strtod_l+0xae>
 8016e16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016e18:	b13a      	cbz	r2, 8016e2a <_strtod_l+0xe2>
 8016e1a:	2135      	movs	r1, #53	; 0x35
 8016e1c:	a81e      	add	r0, sp, #120	; 0x78
 8016e1e:	f002 fbbb 	bl	8019598 <__copybits>
 8016e22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e24:	4648      	mov	r0, r9
 8016e26:	f002 f828 	bl	8018e7a <_Bfree>
 8016e2a:	3c01      	subs	r4, #1
 8016e2c:	2c04      	cmp	r4, #4
 8016e2e:	d806      	bhi.n	8016e3e <_strtod_l+0xf6>
 8016e30:	e8df f004 	tbb	[pc, r4]
 8016e34:	1714030a 	.word	0x1714030a
 8016e38:	0a          	.byte	0x0a
 8016e39:	00          	.byte	0x00
 8016e3a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016e3e:	0730      	lsls	r0, r6, #28
 8016e40:	d5c1      	bpl.n	8016dc6 <_strtod_l+0x7e>
 8016e42:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016e46:	e7be      	b.n	8016dc6 <_strtod_l+0x7e>
 8016e48:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016e4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016e4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016e52:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016e56:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016e5a:	e7f0      	b.n	8016e3e <_strtod_l+0xf6>
 8016e5c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016fd0 <_strtod_l+0x288>
 8016e60:	e7ed      	b.n	8016e3e <_strtod_l+0xf6>
 8016e62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016e66:	f04f 3aff 	mov.w	sl, #4294967295
 8016e6a:	e7e8      	b.n	8016e3e <_strtod_l+0xf6>
 8016e6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e6e:	1c5a      	adds	r2, r3, #1
 8016e70:	921b      	str	r2, [sp, #108]	; 0x6c
 8016e72:	785b      	ldrb	r3, [r3, #1]
 8016e74:	2b30      	cmp	r3, #48	; 0x30
 8016e76:	d0f9      	beq.n	8016e6c <_strtod_l+0x124>
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d0a4      	beq.n	8016dc6 <_strtod_l+0x7e>
 8016e7c:	2301      	movs	r3, #1
 8016e7e:	2500      	movs	r5, #0
 8016e80:	9306      	str	r3, [sp, #24]
 8016e82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016e84:	9308      	str	r3, [sp, #32]
 8016e86:	9507      	str	r5, [sp, #28]
 8016e88:	9505      	str	r5, [sp, #20]
 8016e8a:	220a      	movs	r2, #10
 8016e8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016e8e:	7807      	ldrb	r7, [r0, #0]
 8016e90:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016e94:	b2d9      	uxtb	r1, r3
 8016e96:	2909      	cmp	r1, #9
 8016e98:	d929      	bls.n	8016eee <_strtod_l+0x1a6>
 8016e9a:	4622      	mov	r2, r4
 8016e9c:	f8d8 1000 	ldr.w	r1, [r8]
 8016ea0:	f003 f902 	bl	801a0a8 <strncmp>
 8016ea4:	2800      	cmp	r0, #0
 8016ea6:	d031      	beq.n	8016f0c <_strtod_l+0x1c4>
 8016ea8:	2000      	movs	r0, #0
 8016eaa:	9c05      	ldr	r4, [sp, #20]
 8016eac:	9004      	str	r0, [sp, #16]
 8016eae:	463b      	mov	r3, r7
 8016eb0:	4602      	mov	r2, r0
 8016eb2:	2b65      	cmp	r3, #101	; 0x65
 8016eb4:	d001      	beq.n	8016eba <_strtod_l+0x172>
 8016eb6:	2b45      	cmp	r3, #69	; 0x45
 8016eb8:	d114      	bne.n	8016ee4 <_strtod_l+0x19c>
 8016eba:	b924      	cbnz	r4, 8016ec6 <_strtod_l+0x17e>
 8016ebc:	b910      	cbnz	r0, 8016ec4 <_strtod_l+0x17c>
 8016ebe:	9b06      	ldr	r3, [sp, #24]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d09e      	beq.n	8016e02 <_strtod_l+0xba>
 8016ec4:	2400      	movs	r4, #0
 8016ec6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016ec8:	1c73      	adds	r3, r6, #1
 8016eca:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ecc:	7873      	ldrb	r3, [r6, #1]
 8016ece:	2b2b      	cmp	r3, #43	; 0x2b
 8016ed0:	d078      	beq.n	8016fc4 <_strtod_l+0x27c>
 8016ed2:	2b2d      	cmp	r3, #45	; 0x2d
 8016ed4:	d070      	beq.n	8016fb8 <_strtod_l+0x270>
 8016ed6:	f04f 0c00 	mov.w	ip, #0
 8016eda:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016ede:	2f09      	cmp	r7, #9
 8016ee0:	d97c      	bls.n	8016fdc <_strtod_l+0x294>
 8016ee2:	961b      	str	r6, [sp, #108]	; 0x6c
 8016ee4:	f04f 0e00 	mov.w	lr, #0
 8016ee8:	e09a      	b.n	8017020 <_strtod_l+0x2d8>
 8016eea:	2300      	movs	r3, #0
 8016eec:	e7c7      	b.n	8016e7e <_strtod_l+0x136>
 8016eee:	9905      	ldr	r1, [sp, #20]
 8016ef0:	2908      	cmp	r1, #8
 8016ef2:	bfdd      	ittte	le
 8016ef4:	9907      	ldrle	r1, [sp, #28]
 8016ef6:	fb02 3301 	mlale	r3, r2, r1, r3
 8016efa:	9307      	strle	r3, [sp, #28]
 8016efc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016f00:	9b05      	ldr	r3, [sp, #20]
 8016f02:	3001      	adds	r0, #1
 8016f04:	3301      	adds	r3, #1
 8016f06:	9305      	str	r3, [sp, #20]
 8016f08:	901b      	str	r0, [sp, #108]	; 0x6c
 8016f0a:	e7bf      	b.n	8016e8c <_strtod_l+0x144>
 8016f0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f0e:	191a      	adds	r2, r3, r4
 8016f10:	921b      	str	r2, [sp, #108]	; 0x6c
 8016f12:	9a05      	ldr	r2, [sp, #20]
 8016f14:	5d1b      	ldrb	r3, [r3, r4]
 8016f16:	2a00      	cmp	r2, #0
 8016f18:	d037      	beq.n	8016f8a <_strtod_l+0x242>
 8016f1a:	9c05      	ldr	r4, [sp, #20]
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016f22:	2909      	cmp	r1, #9
 8016f24:	d913      	bls.n	8016f4e <_strtod_l+0x206>
 8016f26:	2101      	movs	r1, #1
 8016f28:	9104      	str	r1, [sp, #16]
 8016f2a:	e7c2      	b.n	8016eb2 <_strtod_l+0x16a>
 8016f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f2e:	1c5a      	adds	r2, r3, #1
 8016f30:	921b      	str	r2, [sp, #108]	; 0x6c
 8016f32:	785b      	ldrb	r3, [r3, #1]
 8016f34:	3001      	adds	r0, #1
 8016f36:	2b30      	cmp	r3, #48	; 0x30
 8016f38:	d0f8      	beq.n	8016f2c <_strtod_l+0x1e4>
 8016f3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016f3e:	2a08      	cmp	r2, #8
 8016f40:	f200 84e4 	bhi.w	801790c <_strtod_l+0xbc4>
 8016f44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016f46:	9208      	str	r2, [sp, #32]
 8016f48:	4602      	mov	r2, r0
 8016f4a:	2000      	movs	r0, #0
 8016f4c:	4604      	mov	r4, r0
 8016f4e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016f52:	f100 0101 	add.w	r1, r0, #1
 8016f56:	d012      	beq.n	8016f7e <_strtod_l+0x236>
 8016f58:	440a      	add	r2, r1
 8016f5a:	eb00 0c04 	add.w	ip, r0, r4
 8016f5e:	4621      	mov	r1, r4
 8016f60:	270a      	movs	r7, #10
 8016f62:	458c      	cmp	ip, r1
 8016f64:	d113      	bne.n	8016f8e <_strtod_l+0x246>
 8016f66:	1821      	adds	r1, r4, r0
 8016f68:	2908      	cmp	r1, #8
 8016f6a:	f104 0401 	add.w	r4, r4, #1
 8016f6e:	4404      	add	r4, r0
 8016f70:	dc19      	bgt.n	8016fa6 <_strtod_l+0x25e>
 8016f72:	9b07      	ldr	r3, [sp, #28]
 8016f74:	210a      	movs	r1, #10
 8016f76:	fb01 e303 	mla	r3, r1, r3, lr
 8016f7a:	9307      	str	r3, [sp, #28]
 8016f7c:	2100      	movs	r1, #0
 8016f7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f80:	1c58      	adds	r0, r3, #1
 8016f82:	901b      	str	r0, [sp, #108]	; 0x6c
 8016f84:	785b      	ldrb	r3, [r3, #1]
 8016f86:	4608      	mov	r0, r1
 8016f88:	e7c9      	b.n	8016f1e <_strtod_l+0x1d6>
 8016f8a:	9805      	ldr	r0, [sp, #20]
 8016f8c:	e7d3      	b.n	8016f36 <_strtod_l+0x1ee>
 8016f8e:	2908      	cmp	r1, #8
 8016f90:	f101 0101 	add.w	r1, r1, #1
 8016f94:	dc03      	bgt.n	8016f9e <_strtod_l+0x256>
 8016f96:	9b07      	ldr	r3, [sp, #28]
 8016f98:	437b      	muls	r3, r7
 8016f9a:	9307      	str	r3, [sp, #28]
 8016f9c:	e7e1      	b.n	8016f62 <_strtod_l+0x21a>
 8016f9e:	2910      	cmp	r1, #16
 8016fa0:	bfd8      	it	le
 8016fa2:	437d      	mulle	r5, r7
 8016fa4:	e7dd      	b.n	8016f62 <_strtod_l+0x21a>
 8016fa6:	2c10      	cmp	r4, #16
 8016fa8:	bfdc      	itt	le
 8016faa:	210a      	movle	r1, #10
 8016fac:	fb01 e505 	mlale	r5, r1, r5, lr
 8016fb0:	e7e4      	b.n	8016f7c <_strtod_l+0x234>
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	9304      	str	r3, [sp, #16]
 8016fb6:	e781      	b.n	8016ebc <_strtod_l+0x174>
 8016fb8:	f04f 0c01 	mov.w	ip, #1
 8016fbc:	1cb3      	adds	r3, r6, #2
 8016fbe:	931b      	str	r3, [sp, #108]	; 0x6c
 8016fc0:	78b3      	ldrb	r3, [r6, #2]
 8016fc2:	e78a      	b.n	8016eda <_strtod_l+0x192>
 8016fc4:	f04f 0c00 	mov.w	ip, #0
 8016fc8:	e7f8      	b.n	8016fbc <_strtod_l+0x274>
 8016fca:	bf00      	nop
 8016fcc:	0801a958 	.word	0x0801a958
 8016fd0:	7ff00000 	.word	0x7ff00000
 8016fd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016fd6:	1c5f      	adds	r7, r3, #1
 8016fd8:	971b      	str	r7, [sp, #108]	; 0x6c
 8016fda:	785b      	ldrb	r3, [r3, #1]
 8016fdc:	2b30      	cmp	r3, #48	; 0x30
 8016fde:	d0f9      	beq.n	8016fd4 <_strtod_l+0x28c>
 8016fe0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016fe4:	2f08      	cmp	r7, #8
 8016fe6:	f63f af7d 	bhi.w	8016ee4 <_strtod_l+0x19c>
 8016fea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016fee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8016ff2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ff4:	1c5f      	adds	r7, r3, #1
 8016ff6:	971b      	str	r7, [sp, #108]	; 0x6c
 8016ff8:	785b      	ldrb	r3, [r3, #1]
 8016ffa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016ffe:	f1b8 0f09 	cmp.w	r8, #9
 8017002:	d937      	bls.n	8017074 <_strtod_l+0x32c>
 8017004:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017006:	1a7f      	subs	r7, r7, r1
 8017008:	2f08      	cmp	r7, #8
 801700a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801700e:	dc37      	bgt.n	8017080 <_strtod_l+0x338>
 8017010:	45be      	cmp	lr, r7
 8017012:	bfa8      	it	ge
 8017014:	46be      	movge	lr, r7
 8017016:	f1bc 0f00 	cmp.w	ip, #0
 801701a:	d001      	beq.n	8017020 <_strtod_l+0x2d8>
 801701c:	f1ce 0e00 	rsb	lr, lr, #0
 8017020:	2c00      	cmp	r4, #0
 8017022:	d151      	bne.n	80170c8 <_strtod_l+0x380>
 8017024:	2800      	cmp	r0, #0
 8017026:	f47f aece 	bne.w	8016dc6 <_strtod_l+0x7e>
 801702a:	9a06      	ldr	r2, [sp, #24]
 801702c:	2a00      	cmp	r2, #0
 801702e:	f47f aeca 	bne.w	8016dc6 <_strtod_l+0x7e>
 8017032:	9a04      	ldr	r2, [sp, #16]
 8017034:	2a00      	cmp	r2, #0
 8017036:	f47f aee4 	bne.w	8016e02 <_strtod_l+0xba>
 801703a:	2b4e      	cmp	r3, #78	; 0x4e
 801703c:	d027      	beq.n	801708e <_strtod_l+0x346>
 801703e:	dc21      	bgt.n	8017084 <_strtod_l+0x33c>
 8017040:	2b49      	cmp	r3, #73	; 0x49
 8017042:	f47f aede 	bne.w	8016e02 <_strtod_l+0xba>
 8017046:	49a0      	ldr	r1, [pc, #640]	; (80172c8 <_strtod_l+0x580>)
 8017048:	a81b      	add	r0, sp, #108	; 0x6c
 801704a:	f001 fdf7 	bl	8018c3c <__match>
 801704e:	2800      	cmp	r0, #0
 8017050:	f43f aed7 	beq.w	8016e02 <_strtod_l+0xba>
 8017054:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017056:	499d      	ldr	r1, [pc, #628]	; (80172cc <_strtod_l+0x584>)
 8017058:	3b01      	subs	r3, #1
 801705a:	a81b      	add	r0, sp, #108	; 0x6c
 801705c:	931b      	str	r3, [sp, #108]	; 0x6c
 801705e:	f001 fded 	bl	8018c3c <__match>
 8017062:	b910      	cbnz	r0, 801706a <_strtod_l+0x322>
 8017064:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017066:	3301      	adds	r3, #1
 8017068:	931b      	str	r3, [sp, #108]	; 0x6c
 801706a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80172e0 <_strtod_l+0x598>
 801706e:	f04f 0a00 	mov.w	sl, #0
 8017072:	e6a8      	b.n	8016dc6 <_strtod_l+0x7e>
 8017074:	210a      	movs	r1, #10
 8017076:	fb01 3e0e 	mla	lr, r1, lr, r3
 801707a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801707e:	e7b8      	b.n	8016ff2 <_strtod_l+0x2aa>
 8017080:	46be      	mov	lr, r7
 8017082:	e7c8      	b.n	8017016 <_strtod_l+0x2ce>
 8017084:	2b69      	cmp	r3, #105	; 0x69
 8017086:	d0de      	beq.n	8017046 <_strtod_l+0x2fe>
 8017088:	2b6e      	cmp	r3, #110	; 0x6e
 801708a:	f47f aeba 	bne.w	8016e02 <_strtod_l+0xba>
 801708e:	4990      	ldr	r1, [pc, #576]	; (80172d0 <_strtod_l+0x588>)
 8017090:	a81b      	add	r0, sp, #108	; 0x6c
 8017092:	f001 fdd3 	bl	8018c3c <__match>
 8017096:	2800      	cmp	r0, #0
 8017098:	f43f aeb3 	beq.w	8016e02 <_strtod_l+0xba>
 801709c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	2b28      	cmp	r3, #40	; 0x28
 80170a2:	d10e      	bne.n	80170c2 <_strtod_l+0x37a>
 80170a4:	aa1e      	add	r2, sp, #120	; 0x78
 80170a6:	498b      	ldr	r1, [pc, #556]	; (80172d4 <_strtod_l+0x58c>)
 80170a8:	a81b      	add	r0, sp, #108	; 0x6c
 80170aa:	f001 fddb 	bl	8018c64 <__hexnan>
 80170ae:	2805      	cmp	r0, #5
 80170b0:	d107      	bne.n	80170c2 <_strtod_l+0x37a>
 80170b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80170b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80170b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80170bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80170c0:	e681      	b.n	8016dc6 <_strtod_l+0x7e>
 80170c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80172e8 <_strtod_l+0x5a0>
 80170c6:	e7d2      	b.n	801706e <_strtod_l+0x326>
 80170c8:	ebae 0302 	sub.w	r3, lr, r2
 80170cc:	9306      	str	r3, [sp, #24]
 80170ce:	9b05      	ldr	r3, [sp, #20]
 80170d0:	9807      	ldr	r0, [sp, #28]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	bf08      	it	eq
 80170d6:	4623      	moveq	r3, r4
 80170d8:	2c10      	cmp	r4, #16
 80170da:	9305      	str	r3, [sp, #20]
 80170dc:	46a0      	mov	r8, r4
 80170de:	bfa8      	it	ge
 80170e0:	f04f 0810 	movge.w	r8, #16
 80170e4:	f7e9 fa26 	bl	8000534 <__aeabi_ui2d>
 80170e8:	2c09      	cmp	r4, #9
 80170ea:	4682      	mov	sl, r0
 80170ec:	468b      	mov	fp, r1
 80170ee:	dc13      	bgt.n	8017118 <_strtod_l+0x3d0>
 80170f0:	9b06      	ldr	r3, [sp, #24]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	f43f ae67 	beq.w	8016dc6 <_strtod_l+0x7e>
 80170f8:	9b06      	ldr	r3, [sp, #24]
 80170fa:	dd7a      	ble.n	80171f2 <_strtod_l+0x4aa>
 80170fc:	2b16      	cmp	r3, #22
 80170fe:	dc61      	bgt.n	80171c4 <_strtod_l+0x47c>
 8017100:	4a75      	ldr	r2, [pc, #468]	; (80172d8 <_strtod_l+0x590>)
 8017102:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8017106:	e9de 0100 	ldrd	r0, r1, [lr]
 801710a:	4652      	mov	r2, sl
 801710c:	465b      	mov	r3, fp
 801710e:	f7e9 fa8b 	bl	8000628 <__aeabi_dmul>
 8017112:	4682      	mov	sl, r0
 8017114:	468b      	mov	fp, r1
 8017116:	e656      	b.n	8016dc6 <_strtod_l+0x7e>
 8017118:	4b6f      	ldr	r3, [pc, #444]	; (80172d8 <_strtod_l+0x590>)
 801711a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801711e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017122:	f7e9 fa81 	bl	8000628 <__aeabi_dmul>
 8017126:	4606      	mov	r6, r0
 8017128:	4628      	mov	r0, r5
 801712a:	460f      	mov	r7, r1
 801712c:	f7e9 fa02 	bl	8000534 <__aeabi_ui2d>
 8017130:	4602      	mov	r2, r0
 8017132:	460b      	mov	r3, r1
 8017134:	4630      	mov	r0, r6
 8017136:	4639      	mov	r1, r7
 8017138:	f7e9 f8c0 	bl	80002bc <__adddf3>
 801713c:	2c0f      	cmp	r4, #15
 801713e:	4682      	mov	sl, r0
 8017140:	468b      	mov	fp, r1
 8017142:	ddd5      	ble.n	80170f0 <_strtod_l+0x3a8>
 8017144:	9b06      	ldr	r3, [sp, #24]
 8017146:	eba4 0808 	sub.w	r8, r4, r8
 801714a:	4498      	add	r8, r3
 801714c:	f1b8 0f00 	cmp.w	r8, #0
 8017150:	f340 8096 	ble.w	8017280 <_strtod_l+0x538>
 8017154:	f018 030f 	ands.w	r3, r8, #15
 8017158:	d00a      	beq.n	8017170 <_strtod_l+0x428>
 801715a:	495f      	ldr	r1, [pc, #380]	; (80172d8 <_strtod_l+0x590>)
 801715c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017160:	4652      	mov	r2, sl
 8017162:	465b      	mov	r3, fp
 8017164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017168:	f7e9 fa5e 	bl	8000628 <__aeabi_dmul>
 801716c:	4682      	mov	sl, r0
 801716e:	468b      	mov	fp, r1
 8017170:	f038 080f 	bics.w	r8, r8, #15
 8017174:	d073      	beq.n	801725e <_strtod_l+0x516>
 8017176:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801717a:	dd47      	ble.n	801720c <_strtod_l+0x4c4>
 801717c:	2400      	movs	r4, #0
 801717e:	46a0      	mov	r8, r4
 8017180:	9407      	str	r4, [sp, #28]
 8017182:	9405      	str	r4, [sp, #20]
 8017184:	2322      	movs	r3, #34	; 0x22
 8017186:	f8df b158 	ldr.w	fp, [pc, #344]	; 80172e0 <_strtod_l+0x598>
 801718a:	f8c9 3000 	str.w	r3, [r9]
 801718e:	f04f 0a00 	mov.w	sl, #0
 8017192:	9b07      	ldr	r3, [sp, #28]
 8017194:	2b00      	cmp	r3, #0
 8017196:	f43f ae16 	beq.w	8016dc6 <_strtod_l+0x7e>
 801719a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801719c:	4648      	mov	r0, r9
 801719e:	f001 fe6c 	bl	8018e7a <_Bfree>
 80171a2:	9905      	ldr	r1, [sp, #20]
 80171a4:	4648      	mov	r0, r9
 80171a6:	f001 fe68 	bl	8018e7a <_Bfree>
 80171aa:	4641      	mov	r1, r8
 80171ac:	4648      	mov	r0, r9
 80171ae:	f001 fe64 	bl	8018e7a <_Bfree>
 80171b2:	9907      	ldr	r1, [sp, #28]
 80171b4:	4648      	mov	r0, r9
 80171b6:	f001 fe60 	bl	8018e7a <_Bfree>
 80171ba:	4621      	mov	r1, r4
 80171bc:	4648      	mov	r0, r9
 80171be:	f001 fe5c 	bl	8018e7a <_Bfree>
 80171c2:	e600      	b.n	8016dc6 <_strtod_l+0x7e>
 80171c4:	9a06      	ldr	r2, [sp, #24]
 80171c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80171ca:	4293      	cmp	r3, r2
 80171cc:	dbba      	blt.n	8017144 <_strtod_l+0x3fc>
 80171ce:	4d42      	ldr	r5, [pc, #264]	; (80172d8 <_strtod_l+0x590>)
 80171d0:	f1c4 040f 	rsb	r4, r4, #15
 80171d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80171d8:	4652      	mov	r2, sl
 80171da:	465b      	mov	r3, fp
 80171dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80171e0:	f7e9 fa22 	bl	8000628 <__aeabi_dmul>
 80171e4:	9b06      	ldr	r3, [sp, #24]
 80171e6:	1b1c      	subs	r4, r3, r4
 80171e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80171ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80171f0:	e78d      	b.n	801710e <_strtod_l+0x3c6>
 80171f2:	f113 0f16 	cmn.w	r3, #22
 80171f6:	dba5      	blt.n	8017144 <_strtod_l+0x3fc>
 80171f8:	4a37      	ldr	r2, [pc, #220]	; (80172d8 <_strtod_l+0x590>)
 80171fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80171fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8017202:	4650      	mov	r0, sl
 8017204:	4659      	mov	r1, fp
 8017206:	f7e9 fb39 	bl	800087c <__aeabi_ddiv>
 801720a:	e782      	b.n	8017112 <_strtod_l+0x3ca>
 801720c:	2300      	movs	r3, #0
 801720e:	4e33      	ldr	r6, [pc, #204]	; (80172dc <_strtod_l+0x594>)
 8017210:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017214:	4650      	mov	r0, sl
 8017216:	4659      	mov	r1, fp
 8017218:	461d      	mov	r5, r3
 801721a:	f1b8 0f01 	cmp.w	r8, #1
 801721e:	dc21      	bgt.n	8017264 <_strtod_l+0x51c>
 8017220:	b10b      	cbz	r3, 8017226 <_strtod_l+0x4de>
 8017222:	4682      	mov	sl, r0
 8017224:	468b      	mov	fp, r1
 8017226:	4b2d      	ldr	r3, [pc, #180]	; (80172dc <_strtod_l+0x594>)
 8017228:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801722c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017230:	4652      	mov	r2, sl
 8017232:	465b      	mov	r3, fp
 8017234:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017238:	f7e9 f9f6 	bl	8000628 <__aeabi_dmul>
 801723c:	4b28      	ldr	r3, [pc, #160]	; (80172e0 <_strtod_l+0x598>)
 801723e:	460a      	mov	r2, r1
 8017240:	400b      	ands	r3, r1
 8017242:	4928      	ldr	r1, [pc, #160]	; (80172e4 <_strtod_l+0x59c>)
 8017244:	428b      	cmp	r3, r1
 8017246:	4682      	mov	sl, r0
 8017248:	d898      	bhi.n	801717c <_strtod_l+0x434>
 801724a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801724e:	428b      	cmp	r3, r1
 8017250:	bf86      	itte	hi
 8017252:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80172ec <_strtod_l+0x5a4>
 8017256:	f04f 3aff 	movhi.w	sl, #4294967295
 801725a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801725e:	2300      	movs	r3, #0
 8017260:	9304      	str	r3, [sp, #16]
 8017262:	e077      	b.n	8017354 <_strtod_l+0x60c>
 8017264:	f018 0f01 	tst.w	r8, #1
 8017268:	d006      	beq.n	8017278 <_strtod_l+0x530>
 801726a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801726e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017272:	f7e9 f9d9 	bl	8000628 <__aeabi_dmul>
 8017276:	2301      	movs	r3, #1
 8017278:	3501      	adds	r5, #1
 801727a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801727e:	e7cc      	b.n	801721a <_strtod_l+0x4d2>
 8017280:	d0ed      	beq.n	801725e <_strtod_l+0x516>
 8017282:	f1c8 0800 	rsb	r8, r8, #0
 8017286:	f018 020f 	ands.w	r2, r8, #15
 801728a:	d00a      	beq.n	80172a2 <_strtod_l+0x55a>
 801728c:	4b12      	ldr	r3, [pc, #72]	; (80172d8 <_strtod_l+0x590>)
 801728e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017292:	4650      	mov	r0, sl
 8017294:	4659      	mov	r1, fp
 8017296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801729a:	f7e9 faef 	bl	800087c <__aeabi_ddiv>
 801729e:	4682      	mov	sl, r0
 80172a0:	468b      	mov	fp, r1
 80172a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80172a6:	d0da      	beq.n	801725e <_strtod_l+0x516>
 80172a8:	f1b8 0f1f 	cmp.w	r8, #31
 80172ac:	dd20      	ble.n	80172f0 <_strtod_l+0x5a8>
 80172ae:	2400      	movs	r4, #0
 80172b0:	46a0      	mov	r8, r4
 80172b2:	9407      	str	r4, [sp, #28]
 80172b4:	9405      	str	r4, [sp, #20]
 80172b6:	2322      	movs	r3, #34	; 0x22
 80172b8:	f04f 0a00 	mov.w	sl, #0
 80172bc:	f04f 0b00 	mov.w	fp, #0
 80172c0:	f8c9 3000 	str.w	r3, [r9]
 80172c4:	e765      	b.n	8017192 <_strtod_l+0x44a>
 80172c6:	bf00      	nop
 80172c8:	0801a925 	.word	0x0801a925
 80172cc:	0801a9ab 	.word	0x0801a9ab
 80172d0:	0801a92d 	.word	0x0801a92d
 80172d4:	0801a96c 	.word	0x0801a96c
 80172d8:	0801a9e8 	.word	0x0801a9e8
 80172dc:	0801a9c0 	.word	0x0801a9c0
 80172e0:	7ff00000 	.word	0x7ff00000
 80172e4:	7ca00000 	.word	0x7ca00000
 80172e8:	fff80000 	.word	0xfff80000
 80172ec:	7fefffff 	.word	0x7fefffff
 80172f0:	f018 0310 	ands.w	r3, r8, #16
 80172f4:	bf18      	it	ne
 80172f6:	236a      	movne	r3, #106	; 0x6a
 80172f8:	4da0      	ldr	r5, [pc, #640]	; (801757c <_strtod_l+0x834>)
 80172fa:	9304      	str	r3, [sp, #16]
 80172fc:	4650      	mov	r0, sl
 80172fe:	4659      	mov	r1, fp
 8017300:	2300      	movs	r3, #0
 8017302:	f1b8 0f00 	cmp.w	r8, #0
 8017306:	f300 810a 	bgt.w	801751e <_strtod_l+0x7d6>
 801730a:	b10b      	cbz	r3, 8017310 <_strtod_l+0x5c8>
 801730c:	4682      	mov	sl, r0
 801730e:	468b      	mov	fp, r1
 8017310:	9b04      	ldr	r3, [sp, #16]
 8017312:	b1bb      	cbz	r3, 8017344 <_strtod_l+0x5fc>
 8017314:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017318:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801731c:	2b00      	cmp	r3, #0
 801731e:	4659      	mov	r1, fp
 8017320:	dd10      	ble.n	8017344 <_strtod_l+0x5fc>
 8017322:	2b1f      	cmp	r3, #31
 8017324:	f340 8107 	ble.w	8017536 <_strtod_l+0x7ee>
 8017328:	2b34      	cmp	r3, #52	; 0x34
 801732a:	bfde      	ittt	le
 801732c:	3b20      	suble	r3, #32
 801732e:	f04f 32ff 	movle.w	r2, #4294967295
 8017332:	fa02 f303 	lslle.w	r3, r2, r3
 8017336:	f04f 0a00 	mov.w	sl, #0
 801733a:	bfcc      	ite	gt
 801733c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017340:	ea03 0b01 	andle.w	fp, r3, r1
 8017344:	2200      	movs	r2, #0
 8017346:	2300      	movs	r3, #0
 8017348:	4650      	mov	r0, sl
 801734a:	4659      	mov	r1, fp
 801734c:	f7e9 fbd4 	bl	8000af8 <__aeabi_dcmpeq>
 8017350:	2800      	cmp	r0, #0
 8017352:	d1ac      	bne.n	80172ae <_strtod_l+0x566>
 8017354:	9b07      	ldr	r3, [sp, #28]
 8017356:	9300      	str	r3, [sp, #0]
 8017358:	9a05      	ldr	r2, [sp, #20]
 801735a:	9908      	ldr	r1, [sp, #32]
 801735c:	4623      	mov	r3, r4
 801735e:	4648      	mov	r0, r9
 8017360:	f001 fddd 	bl	8018f1e <__s2b>
 8017364:	9007      	str	r0, [sp, #28]
 8017366:	2800      	cmp	r0, #0
 8017368:	f43f af08 	beq.w	801717c <_strtod_l+0x434>
 801736c:	9a06      	ldr	r2, [sp, #24]
 801736e:	9b06      	ldr	r3, [sp, #24]
 8017370:	2a00      	cmp	r2, #0
 8017372:	f1c3 0300 	rsb	r3, r3, #0
 8017376:	bfa8      	it	ge
 8017378:	2300      	movge	r3, #0
 801737a:	930e      	str	r3, [sp, #56]	; 0x38
 801737c:	2400      	movs	r4, #0
 801737e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8017382:	9316      	str	r3, [sp, #88]	; 0x58
 8017384:	46a0      	mov	r8, r4
 8017386:	9b07      	ldr	r3, [sp, #28]
 8017388:	4648      	mov	r0, r9
 801738a:	6859      	ldr	r1, [r3, #4]
 801738c:	f001 fd41 	bl	8018e12 <_Balloc>
 8017390:	9005      	str	r0, [sp, #20]
 8017392:	2800      	cmp	r0, #0
 8017394:	f43f aef6 	beq.w	8017184 <_strtod_l+0x43c>
 8017398:	9b07      	ldr	r3, [sp, #28]
 801739a:	691a      	ldr	r2, [r3, #16]
 801739c:	3202      	adds	r2, #2
 801739e:	f103 010c 	add.w	r1, r3, #12
 80173a2:	0092      	lsls	r2, r2, #2
 80173a4:	300c      	adds	r0, #12
 80173a6:	f001 fd29 	bl	8018dfc <memcpy>
 80173aa:	aa1e      	add	r2, sp, #120	; 0x78
 80173ac:	a91d      	add	r1, sp, #116	; 0x74
 80173ae:	ec4b ab10 	vmov	d0, sl, fp
 80173b2:	4648      	mov	r0, r9
 80173b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80173b8:	f002 f86c 	bl	8019494 <__d2b>
 80173bc:	901c      	str	r0, [sp, #112]	; 0x70
 80173be:	2800      	cmp	r0, #0
 80173c0:	f43f aee0 	beq.w	8017184 <_strtod_l+0x43c>
 80173c4:	2101      	movs	r1, #1
 80173c6:	4648      	mov	r0, r9
 80173c8:	f001 fe35 	bl	8019036 <__i2b>
 80173cc:	4680      	mov	r8, r0
 80173ce:	2800      	cmp	r0, #0
 80173d0:	f43f aed8 	beq.w	8017184 <_strtod_l+0x43c>
 80173d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80173d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80173d8:	2e00      	cmp	r6, #0
 80173da:	bfab      	itete	ge
 80173dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80173de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80173e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80173e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80173e4:	bfac      	ite	ge
 80173e6:	18f7      	addge	r7, r6, r3
 80173e8:	1b9d      	sublt	r5, r3, r6
 80173ea:	9b04      	ldr	r3, [sp, #16]
 80173ec:	1af6      	subs	r6, r6, r3
 80173ee:	4416      	add	r6, r2
 80173f0:	4b63      	ldr	r3, [pc, #396]	; (8017580 <_strtod_l+0x838>)
 80173f2:	3e01      	subs	r6, #1
 80173f4:	429e      	cmp	r6, r3
 80173f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80173fa:	f280 80af 	bge.w	801755c <_strtod_l+0x814>
 80173fe:	1b9b      	subs	r3, r3, r6
 8017400:	2b1f      	cmp	r3, #31
 8017402:	eba2 0203 	sub.w	r2, r2, r3
 8017406:	f04f 0101 	mov.w	r1, #1
 801740a:	f300 809b 	bgt.w	8017544 <_strtod_l+0x7fc>
 801740e:	fa01 f303 	lsl.w	r3, r1, r3
 8017412:	930f      	str	r3, [sp, #60]	; 0x3c
 8017414:	2300      	movs	r3, #0
 8017416:	930a      	str	r3, [sp, #40]	; 0x28
 8017418:	18be      	adds	r6, r7, r2
 801741a:	9b04      	ldr	r3, [sp, #16]
 801741c:	42b7      	cmp	r7, r6
 801741e:	4415      	add	r5, r2
 8017420:	441d      	add	r5, r3
 8017422:	463b      	mov	r3, r7
 8017424:	bfa8      	it	ge
 8017426:	4633      	movge	r3, r6
 8017428:	42ab      	cmp	r3, r5
 801742a:	bfa8      	it	ge
 801742c:	462b      	movge	r3, r5
 801742e:	2b00      	cmp	r3, #0
 8017430:	bfc2      	ittt	gt
 8017432:	1af6      	subgt	r6, r6, r3
 8017434:	1aed      	subgt	r5, r5, r3
 8017436:	1aff      	subgt	r7, r7, r3
 8017438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801743a:	b1bb      	cbz	r3, 801746c <_strtod_l+0x724>
 801743c:	4641      	mov	r1, r8
 801743e:	461a      	mov	r2, r3
 8017440:	4648      	mov	r0, r9
 8017442:	f001 fe97 	bl	8019174 <__pow5mult>
 8017446:	4680      	mov	r8, r0
 8017448:	2800      	cmp	r0, #0
 801744a:	f43f ae9b 	beq.w	8017184 <_strtod_l+0x43c>
 801744e:	4601      	mov	r1, r0
 8017450:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017452:	4648      	mov	r0, r9
 8017454:	f001 fdf8 	bl	8019048 <__multiply>
 8017458:	900c      	str	r0, [sp, #48]	; 0x30
 801745a:	2800      	cmp	r0, #0
 801745c:	f43f ae92 	beq.w	8017184 <_strtod_l+0x43c>
 8017460:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017462:	4648      	mov	r0, r9
 8017464:	f001 fd09 	bl	8018e7a <_Bfree>
 8017468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801746a:	931c      	str	r3, [sp, #112]	; 0x70
 801746c:	2e00      	cmp	r6, #0
 801746e:	dc7a      	bgt.n	8017566 <_strtod_l+0x81e>
 8017470:	9b06      	ldr	r3, [sp, #24]
 8017472:	2b00      	cmp	r3, #0
 8017474:	dd08      	ble.n	8017488 <_strtod_l+0x740>
 8017476:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017478:	9905      	ldr	r1, [sp, #20]
 801747a:	4648      	mov	r0, r9
 801747c:	f001 fe7a 	bl	8019174 <__pow5mult>
 8017480:	9005      	str	r0, [sp, #20]
 8017482:	2800      	cmp	r0, #0
 8017484:	f43f ae7e 	beq.w	8017184 <_strtod_l+0x43c>
 8017488:	2d00      	cmp	r5, #0
 801748a:	dd08      	ble.n	801749e <_strtod_l+0x756>
 801748c:	462a      	mov	r2, r5
 801748e:	9905      	ldr	r1, [sp, #20]
 8017490:	4648      	mov	r0, r9
 8017492:	f001 febd 	bl	8019210 <__lshift>
 8017496:	9005      	str	r0, [sp, #20]
 8017498:	2800      	cmp	r0, #0
 801749a:	f43f ae73 	beq.w	8017184 <_strtod_l+0x43c>
 801749e:	2f00      	cmp	r7, #0
 80174a0:	dd08      	ble.n	80174b4 <_strtod_l+0x76c>
 80174a2:	4641      	mov	r1, r8
 80174a4:	463a      	mov	r2, r7
 80174a6:	4648      	mov	r0, r9
 80174a8:	f001 feb2 	bl	8019210 <__lshift>
 80174ac:	4680      	mov	r8, r0
 80174ae:	2800      	cmp	r0, #0
 80174b0:	f43f ae68 	beq.w	8017184 <_strtod_l+0x43c>
 80174b4:	9a05      	ldr	r2, [sp, #20]
 80174b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80174b8:	4648      	mov	r0, r9
 80174ba:	f001 ff17 	bl	80192ec <__mdiff>
 80174be:	4604      	mov	r4, r0
 80174c0:	2800      	cmp	r0, #0
 80174c2:	f43f ae5f 	beq.w	8017184 <_strtod_l+0x43c>
 80174c6:	68c3      	ldr	r3, [r0, #12]
 80174c8:	930c      	str	r3, [sp, #48]	; 0x30
 80174ca:	2300      	movs	r3, #0
 80174cc:	60c3      	str	r3, [r0, #12]
 80174ce:	4641      	mov	r1, r8
 80174d0:	f001 fef2 	bl	80192b8 <__mcmp>
 80174d4:	2800      	cmp	r0, #0
 80174d6:	da55      	bge.n	8017584 <_strtod_l+0x83c>
 80174d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174da:	b9e3      	cbnz	r3, 8017516 <_strtod_l+0x7ce>
 80174dc:	f1ba 0f00 	cmp.w	sl, #0
 80174e0:	d119      	bne.n	8017516 <_strtod_l+0x7ce>
 80174e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174e6:	b9b3      	cbnz	r3, 8017516 <_strtod_l+0x7ce>
 80174e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80174ec:	0d1b      	lsrs	r3, r3, #20
 80174ee:	051b      	lsls	r3, r3, #20
 80174f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80174f4:	d90f      	bls.n	8017516 <_strtod_l+0x7ce>
 80174f6:	6963      	ldr	r3, [r4, #20]
 80174f8:	b913      	cbnz	r3, 8017500 <_strtod_l+0x7b8>
 80174fa:	6923      	ldr	r3, [r4, #16]
 80174fc:	2b01      	cmp	r3, #1
 80174fe:	dd0a      	ble.n	8017516 <_strtod_l+0x7ce>
 8017500:	4621      	mov	r1, r4
 8017502:	2201      	movs	r2, #1
 8017504:	4648      	mov	r0, r9
 8017506:	f001 fe83 	bl	8019210 <__lshift>
 801750a:	4641      	mov	r1, r8
 801750c:	4604      	mov	r4, r0
 801750e:	f001 fed3 	bl	80192b8 <__mcmp>
 8017512:	2800      	cmp	r0, #0
 8017514:	dc67      	bgt.n	80175e6 <_strtod_l+0x89e>
 8017516:	9b04      	ldr	r3, [sp, #16]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d171      	bne.n	8017600 <_strtod_l+0x8b8>
 801751c:	e63d      	b.n	801719a <_strtod_l+0x452>
 801751e:	f018 0f01 	tst.w	r8, #1
 8017522:	d004      	beq.n	801752e <_strtod_l+0x7e6>
 8017524:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017528:	f7e9 f87e 	bl	8000628 <__aeabi_dmul>
 801752c:	2301      	movs	r3, #1
 801752e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017532:	3508      	adds	r5, #8
 8017534:	e6e5      	b.n	8017302 <_strtod_l+0x5ba>
 8017536:	f04f 32ff 	mov.w	r2, #4294967295
 801753a:	fa02 f303 	lsl.w	r3, r2, r3
 801753e:	ea03 0a0a 	and.w	sl, r3, sl
 8017542:	e6ff      	b.n	8017344 <_strtod_l+0x5fc>
 8017544:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017548:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801754c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017550:	36e2      	adds	r6, #226	; 0xe2
 8017552:	fa01 f306 	lsl.w	r3, r1, r6
 8017556:	930a      	str	r3, [sp, #40]	; 0x28
 8017558:	910f      	str	r1, [sp, #60]	; 0x3c
 801755a:	e75d      	b.n	8017418 <_strtod_l+0x6d0>
 801755c:	2300      	movs	r3, #0
 801755e:	930a      	str	r3, [sp, #40]	; 0x28
 8017560:	2301      	movs	r3, #1
 8017562:	930f      	str	r3, [sp, #60]	; 0x3c
 8017564:	e758      	b.n	8017418 <_strtod_l+0x6d0>
 8017566:	4632      	mov	r2, r6
 8017568:	991c      	ldr	r1, [sp, #112]	; 0x70
 801756a:	4648      	mov	r0, r9
 801756c:	f001 fe50 	bl	8019210 <__lshift>
 8017570:	901c      	str	r0, [sp, #112]	; 0x70
 8017572:	2800      	cmp	r0, #0
 8017574:	f47f af7c 	bne.w	8017470 <_strtod_l+0x728>
 8017578:	e604      	b.n	8017184 <_strtod_l+0x43c>
 801757a:	bf00      	nop
 801757c:	0801a980 	.word	0x0801a980
 8017580:	fffffc02 	.word	0xfffffc02
 8017584:	465d      	mov	r5, fp
 8017586:	f040 8086 	bne.w	8017696 <_strtod_l+0x94e>
 801758a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801758c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017590:	b32a      	cbz	r2, 80175de <_strtod_l+0x896>
 8017592:	4aaf      	ldr	r2, [pc, #700]	; (8017850 <_strtod_l+0xb08>)
 8017594:	4293      	cmp	r3, r2
 8017596:	d153      	bne.n	8017640 <_strtod_l+0x8f8>
 8017598:	9b04      	ldr	r3, [sp, #16]
 801759a:	4650      	mov	r0, sl
 801759c:	b1d3      	cbz	r3, 80175d4 <_strtod_l+0x88c>
 801759e:	4aad      	ldr	r2, [pc, #692]	; (8017854 <_strtod_l+0xb0c>)
 80175a0:	402a      	ands	r2, r5
 80175a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80175a6:	f04f 31ff 	mov.w	r1, #4294967295
 80175aa:	d816      	bhi.n	80175da <_strtod_l+0x892>
 80175ac:	0d12      	lsrs	r2, r2, #20
 80175ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80175b2:	fa01 f303 	lsl.w	r3, r1, r3
 80175b6:	4298      	cmp	r0, r3
 80175b8:	d142      	bne.n	8017640 <_strtod_l+0x8f8>
 80175ba:	4ba7      	ldr	r3, [pc, #668]	; (8017858 <_strtod_l+0xb10>)
 80175bc:	429d      	cmp	r5, r3
 80175be:	d102      	bne.n	80175c6 <_strtod_l+0x87e>
 80175c0:	3001      	adds	r0, #1
 80175c2:	f43f addf 	beq.w	8017184 <_strtod_l+0x43c>
 80175c6:	4ba3      	ldr	r3, [pc, #652]	; (8017854 <_strtod_l+0xb0c>)
 80175c8:	402b      	ands	r3, r5
 80175ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80175ce:	f04f 0a00 	mov.w	sl, #0
 80175d2:	e7a0      	b.n	8017516 <_strtod_l+0x7ce>
 80175d4:	f04f 33ff 	mov.w	r3, #4294967295
 80175d8:	e7ed      	b.n	80175b6 <_strtod_l+0x86e>
 80175da:	460b      	mov	r3, r1
 80175dc:	e7eb      	b.n	80175b6 <_strtod_l+0x86e>
 80175de:	bb7b      	cbnz	r3, 8017640 <_strtod_l+0x8f8>
 80175e0:	f1ba 0f00 	cmp.w	sl, #0
 80175e4:	d12c      	bne.n	8017640 <_strtod_l+0x8f8>
 80175e6:	9904      	ldr	r1, [sp, #16]
 80175e8:	4a9a      	ldr	r2, [pc, #616]	; (8017854 <_strtod_l+0xb0c>)
 80175ea:	465b      	mov	r3, fp
 80175ec:	b1f1      	cbz	r1, 801762c <_strtod_l+0x8e4>
 80175ee:	ea02 010b 	and.w	r1, r2, fp
 80175f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80175f6:	dc19      	bgt.n	801762c <_strtod_l+0x8e4>
 80175f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80175fc:	f77f ae5b 	ble.w	80172b6 <_strtod_l+0x56e>
 8017600:	4a96      	ldr	r2, [pc, #600]	; (801785c <_strtod_l+0xb14>)
 8017602:	2300      	movs	r3, #0
 8017604:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017608:	4650      	mov	r0, sl
 801760a:	4659      	mov	r1, fp
 801760c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017610:	f7e9 f80a 	bl	8000628 <__aeabi_dmul>
 8017614:	4682      	mov	sl, r0
 8017616:	468b      	mov	fp, r1
 8017618:	2900      	cmp	r1, #0
 801761a:	f47f adbe 	bne.w	801719a <_strtod_l+0x452>
 801761e:	2800      	cmp	r0, #0
 8017620:	f47f adbb 	bne.w	801719a <_strtod_l+0x452>
 8017624:	2322      	movs	r3, #34	; 0x22
 8017626:	f8c9 3000 	str.w	r3, [r9]
 801762a:	e5b6      	b.n	801719a <_strtod_l+0x452>
 801762c:	4013      	ands	r3, r2
 801762e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017632:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017636:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801763a:	f04f 3aff 	mov.w	sl, #4294967295
 801763e:	e76a      	b.n	8017516 <_strtod_l+0x7ce>
 8017640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017642:	b193      	cbz	r3, 801766a <_strtod_l+0x922>
 8017644:	422b      	tst	r3, r5
 8017646:	f43f af66 	beq.w	8017516 <_strtod_l+0x7ce>
 801764a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801764c:	9a04      	ldr	r2, [sp, #16]
 801764e:	4650      	mov	r0, sl
 8017650:	4659      	mov	r1, fp
 8017652:	b173      	cbz	r3, 8017672 <_strtod_l+0x92a>
 8017654:	f7ff fb5a 	bl	8016d0c <sulp>
 8017658:	4602      	mov	r2, r0
 801765a:	460b      	mov	r3, r1
 801765c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017660:	f7e8 fe2c 	bl	80002bc <__adddf3>
 8017664:	4682      	mov	sl, r0
 8017666:	468b      	mov	fp, r1
 8017668:	e755      	b.n	8017516 <_strtod_l+0x7ce>
 801766a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801766c:	ea13 0f0a 	tst.w	r3, sl
 8017670:	e7e9      	b.n	8017646 <_strtod_l+0x8fe>
 8017672:	f7ff fb4b 	bl	8016d0c <sulp>
 8017676:	4602      	mov	r2, r0
 8017678:	460b      	mov	r3, r1
 801767a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801767e:	f7e8 fe1b 	bl	80002b8 <__aeabi_dsub>
 8017682:	2200      	movs	r2, #0
 8017684:	2300      	movs	r3, #0
 8017686:	4682      	mov	sl, r0
 8017688:	468b      	mov	fp, r1
 801768a:	f7e9 fa35 	bl	8000af8 <__aeabi_dcmpeq>
 801768e:	2800      	cmp	r0, #0
 8017690:	f47f ae11 	bne.w	80172b6 <_strtod_l+0x56e>
 8017694:	e73f      	b.n	8017516 <_strtod_l+0x7ce>
 8017696:	4641      	mov	r1, r8
 8017698:	4620      	mov	r0, r4
 801769a:	f001 ff4a 	bl	8019532 <__ratio>
 801769e:	ec57 6b10 	vmov	r6, r7, d0
 80176a2:	2200      	movs	r2, #0
 80176a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80176a8:	ee10 0a10 	vmov	r0, s0
 80176ac:	4639      	mov	r1, r7
 80176ae:	f7e9 fa37 	bl	8000b20 <__aeabi_dcmple>
 80176b2:	2800      	cmp	r0, #0
 80176b4:	d077      	beq.n	80177a6 <_strtod_l+0xa5e>
 80176b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d04a      	beq.n	8017752 <_strtod_l+0xa0a>
 80176bc:	4b68      	ldr	r3, [pc, #416]	; (8017860 <_strtod_l+0xb18>)
 80176be:	2200      	movs	r2, #0
 80176c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80176c4:	4f66      	ldr	r7, [pc, #408]	; (8017860 <_strtod_l+0xb18>)
 80176c6:	2600      	movs	r6, #0
 80176c8:	4b62      	ldr	r3, [pc, #392]	; (8017854 <_strtod_l+0xb0c>)
 80176ca:	402b      	ands	r3, r5
 80176cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80176ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80176d0:	4b64      	ldr	r3, [pc, #400]	; (8017864 <_strtod_l+0xb1c>)
 80176d2:	429a      	cmp	r2, r3
 80176d4:	f040 80ce 	bne.w	8017874 <_strtod_l+0xb2c>
 80176d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80176dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80176e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80176e4:	ec4b ab10 	vmov	d0, sl, fp
 80176e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80176ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80176f0:	f001 fe5a 	bl	80193a8 <__ulp>
 80176f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80176f8:	ec53 2b10 	vmov	r2, r3, d0
 80176fc:	f7e8 ff94 	bl	8000628 <__aeabi_dmul>
 8017700:	4652      	mov	r2, sl
 8017702:	465b      	mov	r3, fp
 8017704:	f7e8 fdda 	bl	80002bc <__adddf3>
 8017708:	460b      	mov	r3, r1
 801770a:	4952      	ldr	r1, [pc, #328]	; (8017854 <_strtod_l+0xb0c>)
 801770c:	4a56      	ldr	r2, [pc, #344]	; (8017868 <_strtod_l+0xb20>)
 801770e:	4019      	ands	r1, r3
 8017710:	4291      	cmp	r1, r2
 8017712:	4682      	mov	sl, r0
 8017714:	d95b      	bls.n	80177ce <_strtod_l+0xa86>
 8017716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017718:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801771c:	4293      	cmp	r3, r2
 801771e:	d103      	bne.n	8017728 <_strtod_l+0x9e0>
 8017720:	9b08      	ldr	r3, [sp, #32]
 8017722:	3301      	adds	r3, #1
 8017724:	f43f ad2e 	beq.w	8017184 <_strtod_l+0x43c>
 8017728:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017858 <_strtod_l+0xb10>
 801772c:	f04f 3aff 	mov.w	sl, #4294967295
 8017730:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017732:	4648      	mov	r0, r9
 8017734:	f001 fba1 	bl	8018e7a <_Bfree>
 8017738:	9905      	ldr	r1, [sp, #20]
 801773a:	4648      	mov	r0, r9
 801773c:	f001 fb9d 	bl	8018e7a <_Bfree>
 8017740:	4641      	mov	r1, r8
 8017742:	4648      	mov	r0, r9
 8017744:	f001 fb99 	bl	8018e7a <_Bfree>
 8017748:	4621      	mov	r1, r4
 801774a:	4648      	mov	r0, r9
 801774c:	f001 fb95 	bl	8018e7a <_Bfree>
 8017750:	e619      	b.n	8017386 <_strtod_l+0x63e>
 8017752:	f1ba 0f00 	cmp.w	sl, #0
 8017756:	d11a      	bne.n	801778e <_strtod_l+0xa46>
 8017758:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801775c:	b9eb      	cbnz	r3, 801779a <_strtod_l+0xa52>
 801775e:	2200      	movs	r2, #0
 8017760:	4b3f      	ldr	r3, [pc, #252]	; (8017860 <_strtod_l+0xb18>)
 8017762:	4630      	mov	r0, r6
 8017764:	4639      	mov	r1, r7
 8017766:	f7e9 f9d1 	bl	8000b0c <__aeabi_dcmplt>
 801776a:	b9c8      	cbnz	r0, 80177a0 <_strtod_l+0xa58>
 801776c:	4630      	mov	r0, r6
 801776e:	4639      	mov	r1, r7
 8017770:	2200      	movs	r2, #0
 8017772:	4b3e      	ldr	r3, [pc, #248]	; (801786c <_strtod_l+0xb24>)
 8017774:	f7e8 ff58 	bl	8000628 <__aeabi_dmul>
 8017778:	4606      	mov	r6, r0
 801777a:	460f      	mov	r7, r1
 801777c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017780:	9618      	str	r6, [sp, #96]	; 0x60
 8017782:	9319      	str	r3, [sp, #100]	; 0x64
 8017784:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017788:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801778c:	e79c      	b.n	80176c8 <_strtod_l+0x980>
 801778e:	f1ba 0f01 	cmp.w	sl, #1
 8017792:	d102      	bne.n	801779a <_strtod_l+0xa52>
 8017794:	2d00      	cmp	r5, #0
 8017796:	f43f ad8e 	beq.w	80172b6 <_strtod_l+0x56e>
 801779a:	2200      	movs	r2, #0
 801779c:	4b34      	ldr	r3, [pc, #208]	; (8017870 <_strtod_l+0xb28>)
 801779e:	e78f      	b.n	80176c0 <_strtod_l+0x978>
 80177a0:	2600      	movs	r6, #0
 80177a2:	4f32      	ldr	r7, [pc, #200]	; (801786c <_strtod_l+0xb24>)
 80177a4:	e7ea      	b.n	801777c <_strtod_l+0xa34>
 80177a6:	4b31      	ldr	r3, [pc, #196]	; (801786c <_strtod_l+0xb24>)
 80177a8:	4630      	mov	r0, r6
 80177aa:	4639      	mov	r1, r7
 80177ac:	2200      	movs	r2, #0
 80177ae:	f7e8 ff3b 	bl	8000628 <__aeabi_dmul>
 80177b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80177b4:	4606      	mov	r6, r0
 80177b6:	460f      	mov	r7, r1
 80177b8:	b933      	cbnz	r3, 80177c8 <_strtod_l+0xa80>
 80177ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80177be:	9010      	str	r0, [sp, #64]	; 0x40
 80177c0:	9311      	str	r3, [sp, #68]	; 0x44
 80177c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80177c6:	e7df      	b.n	8017788 <_strtod_l+0xa40>
 80177c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80177cc:	e7f9      	b.n	80177c2 <_strtod_l+0xa7a>
 80177ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80177d2:	9b04      	ldr	r3, [sp, #16]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d1ab      	bne.n	8017730 <_strtod_l+0x9e8>
 80177d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80177dc:	0d1b      	lsrs	r3, r3, #20
 80177de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177e0:	051b      	lsls	r3, r3, #20
 80177e2:	429a      	cmp	r2, r3
 80177e4:	465d      	mov	r5, fp
 80177e6:	d1a3      	bne.n	8017730 <_strtod_l+0x9e8>
 80177e8:	4639      	mov	r1, r7
 80177ea:	4630      	mov	r0, r6
 80177ec:	f7e9 f9cc 	bl	8000b88 <__aeabi_d2iz>
 80177f0:	f7e8 feb0 	bl	8000554 <__aeabi_i2d>
 80177f4:	460b      	mov	r3, r1
 80177f6:	4602      	mov	r2, r0
 80177f8:	4639      	mov	r1, r7
 80177fa:	4630      	mov	r0, r6
 80177fc:	f7e8 fd5c 	bl	80002b8 <__aeabi_dsub>
 8017800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017802:	4606      	mov	r6, r0
 8017804:	460f      	mov	r7, r1
 8017806:	b933      	cbnz	r3, 8017816 <_strtod_l+0xace>
 8017808:	f1ba 0f00 	cmp.w	sl, #0
 801780c:	d103      	bne.n	8017816 <_strtod_l+0xace>
 801780e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017812:	2d00      	cmp	r5, #0
 8017814:	d06d      	beq.n	80178f2 <_strtod_l+0xbaa>
 8017816:	a30a      	add	r3, pc, #40	; (adr r3, 8017840 <_strtod_l+0xaf8>)
 8017818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801781c:	4630      	mov	r0, r6
 801781e:	4639      	mov	r1, r7
 8017820:	f7e9 f974 	bl	8000b0c <__aeabi_dcmplt>
 8017824:	2800      	cmp	r0, #0
 8017826:	f47f acb8 	bne.w	801719a <_strtod_l+0x452>
 801782a:	a307      	add	r3, pc, #28	; (adr r3, 8017848 <_strtod_l+0xb00>)
 801782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017830:	4630      	mov	r0, r6
 8017832:	4639      	mov	r1, r7
 8017834:	f7e9 f988 	bl	8000b48 <__aeabi_dcmpgt>
 8017838:	2800      	cmp	r0, #0
 801783a:	f43f af79 	beq.w	8017730 <_strtod_l+0x9e8>
 801783e:	e4ac      	b.n	801719a <_strtod_l+0x452>
 8017840:	94a03595 	.word	0x94a03595
 8017844:	3fdfffff 	.word	0x3fdfffff
 8017848:	35afe535 	.word	0x35afe535
 801784c:	3fe00000 	.word	0x3fe00000
 8017850:	000fffff 	.word	0x000fffff
 8017854:	7ff00000 	.word	0x7ff00000
 8017858:	7fefffff 	.word	0x7fefffff
 801785c:	39500000 	.word	0x39500000
 8017860:	3ff00000 	.word	0x3ff00000
 8017864:	7fe00000 	.word	0x7fe00000
 8017868:	7c9fffff 	.word	0x7c9fffff
 801786c:	3fe00000 	.word	0x3fe00000
 8017870:	bff00000 	.word	0xbff00000
 8017874:	9b04      	ldr	r3, [sp, #16]
 8017876:	b333      	cbz	r3, 80178c6 <_strtod_l+0xb7e>
 8017878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801787a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801787e:	d822      	bhi.n	80178c6 <_strtod_l+0xb7e>
 8017880:	a327      	add	r3, pc, #156	; (adr r3, 8017920 <_strtod_l+0xbd8>)
 8017882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017886:	4630      	mov	r0, r6
 8017888:	4639      	mov	r1, r7
 801788a:	f7e9 f949 	bl	8000b20 <__aeabi_dcmple>
 801788e:	b1a0      	cbz	r0, 80178ba <_strtod_l+0xb72>
 8017890:	4639      	mov	r1, r7
 8017892:	4630      	mov	r0, r6
 8017894:	f7e9 f9a0 	bl	8000bd8 <__aeabi_d2uiz>
 8017898:	2800      	cmp	r0, #0
 801789a:	bf08      	it	eq
 801789c:	2001      	moveq	r0, #1
 801789e:	f7e8 fe49 	bl	8000534 <__aeabi_ui2d>
 80178a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178a4:	4606      	mov	r6, r0
 80178a6:	460f      	mov	r7, r1
 80178a8:	bb03      	cbnz	r3, 80178ec <_strtod_l+0xba4>
 80178aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80178ae:	9012      	str	r0, [sp, #72]	; 0x48
 80178b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80178b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80178b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80178ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80178be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80178c2:	1a9b      	subs	r3, r3, r2
 80178c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80178c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80178ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80178ce:	f001 fd6b 	bl	80193a8 <__ulp>
 80178d2:	4650      	mov	r0, sl
 80178d4:	ec53 2b10 	vmov	r2, r3, d0
 80178d8:	4659      	mov	r1, fp
 80178da:	f7e8 fea5 	bl	8000628 <__aeabi_dmul>
 80178de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80178e2:	f7e8 fceb 	bl	80002bc <__adddf3>
 80178e6:	4682      	mov	sl, r0
 80178e8:	468b      	mov	fp, r1
 80178ea:	e772      	b.n	80177d2 <_strtod_l+0xa8a>
 80178ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80178f0:	e7df      	b.n	80178b2 <_strtod_l+0xb6a>
 80178f2:	a30d      	add	r3, pc, #52	; (adr r3, 8017928 <_strtod_l+0xbe0>)
 80178f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f8:	f7e9 f908 	bl	8000b0c <__aeabi_dcmplt>
 80178fc:	e79c      	b.n	8017838 <_strtod_l+0xaf0>
 80178fe:	2300      	movs	r3, #0
 8017900:	930d      	str	r3, [sp, #52]	; 0x34
 8017902:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017906:	6013      	str	r3, [r2, #0]
 8017908:	f7ff ba61 	b.w	8016dce <_strtod_l+0x86>
 801790c:	2b65      	cmp	r3, #101	; 0x65
 801790e:	f04f 0200 	mov.w	r2, #0
 8017912:	f43f ab4e 	beq.w	8016fb2 <_strtod_l+0x26a>
 8017916:	2101      	movs	r1, #1
 8017918:	4614      	mov	r4, r2
 801791a:	9104      	str	r1, [sp, #16]
 801791c:	f7ff bacb 	b.w	8016eb6 <_strtod_l+0x16e>
 8017920:	ffc00000 	.word	0xffc00000
 8017924:	41dfffff 	.word	0x41dfffff
 8017928:	94a03595 	.word	0x94a03595
 801792c:	3fcfffff 	.word	0x3fcfffff

08017930 <_strtod_r>:
 8017930:	4b05      	ldr	r3, [pc, #20]	; (8017948 <_strtod_r+0x18>)
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	b410      	push	{r4}
 8017936:	6a1b      	ldr	r3, [r3, #32]
 8017938:	4c04      	ldr	r4, [pc, #16]	; (801794c <_strtod_r+0x1c>)
 801793a:	2b00      	cmp	r3, #0
 801793c:	bf08      	it	eq
 801793e:	4623      	moveq	r3, r4
 8017940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017944:	f7ff ba00 	b.w	8016d48 <_strtod_l>
 8017948:	2000000c 	.word	0x2000000c
 801794c:	20000070 	.word	0x20000070

08017950 <_strtol_l.isra.0>:
 8017950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017954:	4680      	mov	r8, r0
 8017956:	4689      	mov	r9, r1
 8017958:	4692      	mov	sl, r2
 801795a:	461e      	mov	r6, r3
 801795c:	460f      	mov	r7, r1
 801795e:	463d      	mov	r5, r7
 8017960:	9808      	ldr	r0, [sp, #32]
 8017962:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017966:	f001 fa0d 	bl	8018d84 <__locale_ctype_ptr_l>
 801796a:	4420      	add	r0, r4
 801796c:	7843      	ldrb	r3, [r0, #1]
 801796e:	f013 0308 	ands.w	r3, r3, #8
 8017972:	d132      	bne.n	80179da <_strtol_l.isra.0+0x8a>
 8017974:	2c2d      	cmp	r4, #45	; 0x2d
 8017976:	d132      	bne.n	80179de <_strtol_l.isra.0+0x8e>
 8017978:	787c      	ldrb	r4, [r7, #1]
 801797a:	1cbd      	adds	r5, r7, #2
 801797c:	2201      	movs	r2, #1
 801797e:	2e00      	cmp	r6, #0
 8017980:	d05d      	beq.n	8017a3e <_strtol_l.isra.0+0xee>
 8017982:	2e10      	cmp	r6, #16
 8017984:	d109      	bne.n	801799a <_strtol_l.isra.0+0x4a>
 8017986:	2c30      	cmp	r4, #48	; 0x30
 8017988:	d107      	bne.n	801799a <_strtol_l.isra.0+0x4a>
 801798a:	782b      	ldrb	r3, [r5, #0]
 801798c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017990:	2b58      	cmp	r3, #88	; 0x58
 8017992:	d14f      	bne.n	8017a34 <_strtol_l.isra.0+0xe4>
 8017994:	786c      	ldrb	r4, [r5, #1]
 8017996:	2610      	movs	r6, #16
 8017998:	3502      	adds	r5, #2
 801799a:	2a00      	cmp	r2, #0
 801799c:	bf14      	ite	ne
 801799e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80179a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80179a6:	2700      	movs	r7, #0
 80179a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80179ac:	4638      	mov	r0, r7
 80179ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80179b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80179b6:	2b09      	cmp	r3, #9
 80179b8:	d817      	bhi.n	80179ea <_strtol_l.isra.0+0x9a>
 80179ba:	461c      	mov	r4, r3
 80179bc:	42a6      	cmp	r6, r4
 80179be:	dd23      	ble.n	8017a08 <_strtol_l.isra.0+0xb8>
 80179c0:	1c7b      	adds	r3, r7, #1
 80179c2:	d007      	beq.n	80179d4 <_strtol_l.isra.0+0x84>
 80179c4:	4584      	cmp	ip, r0
 80179c6:	d31c      	bcc.n	8017a02 <_strtol_l.isra.0+0xb2>
 80179c8:	d101      	bne.n	80179ce <_strtol_l.isra.0+0x7e>
 80179ca:	45a6      	cmp	lr, r4
 80179cc:	db19      	blt.n	8017a02 <_strtol_l.isra.0+0xb2>
 80179ce:	fb00 4006 	mla	r0, r0, r6, r4
 80179d2:	2701      	movs	r7, #1
 80179d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80179d8:	e7eb      	b.n	80179b2 <_strtol_l.isra.0+0x62>
 80179da:	462f      	mov	r7, r5
 80179dc:	e7bf      	b.n	801795e <_strtol_l.isra.0+0xe>
 80179de:	2c2b      	cmp	r4, #43	; 0x2b
 80179e0:	bf04      	itt	eq
 80179e2:	1cbd      	addeq	r5, r7, #2
 80179e4:	787c      	ldrbeq	r4, [r7, #1]
 80179e6:	461a      	mov	r2, r3
 80179e8:	e7c9      	b.n	801797e <_strtol_l.isra.0+0x2e>
 80179ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80179ee:	2b19      	cmp	r3, #25
 80179f0:	d801      	bhi.n	80179f6 <_strtol_l.isra.0+0xa6>
 80179f2:	3c37      	subs	r4, #55	; 0x37
 80179f4:	e7e2      	b.n	80179bc <_strtol_l.isra.0+0x6c>
 80179f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80179fa:	2b19      	cmp	r3, #25
 80179fc:	d804      	bhi.n	8017a08 <_strtol_l.isra.0+0xb8>
 80179fe:	3c57      	subs	r4, #87	; 0x57
 8017a00:	e7dc      	b.n	80179bc <_strtol_l.isra.0+0x6c>
 8017a02:	f04f 37ff 	mov.w	r7, #4294967295
 8017a06:	e7e5      	b.n	80179d4 <_strtol_l.isra.0+0x84>
 8017a08:	1c7b      	adds	r3, r7, #1
 8017a0a:	d108      	bne.n	8017a1e <_strtol_l.isra.0+0xce>
 8017a0c:	2322      	movs	r3, #34	; 0x22
 8017a0e:	f8c8 3000 	str.w	r3, [r8]
 8017a12:	4608      	mov	r0, r1
 8017a14:	f1ba 0f00 	cmp.w	sl, #0
 8017a18:	d107      	bne.n	8017a2a <_strtol_l.isra.0+0xda>
 8017a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a1e:	b102      	cbz	r2, 8017a22 <_strtol_l.isra.0+0xd2>
 8017a20:	4240      	negs	r0, r0
 8017a22:	f1ba 0f00 	cmp.w	sl, #0
 8017a26:	d0f8      	beq.n	8017a1a <_strtol_l.isra.0+0xca>
 8017a28:	b10f      	cbz	r7, 8017a2e <_strtol_l.isra.0+0xde>
 8017a2a:	f105 39ff 	add.w	r9, r5, #4294967295
 8017a2e:	f8ca 9000 	str.w	r9, [sl]
 8017a32:	e7f2      	b.n	8017a1a <_strtol_l.isra.0+0xca>
 8017a34:	2430      	movs	r4, #48	; 0x30
 8017a36:	2e00      	cmp	r6, #0
 8017a38:	d1af      	bne.n	801799a <_strtol_l.isra.0+0x4a>
 8017a3a:	2608      	movs	r6, #8
 8017a3c:	e7ad      	b.n	801799a <_strtol_l.isra.0+0x4a>
 8017a3e:	2c30      	cmp	r4, #48	; 0x30
 8017a40:	d0a3      	beq.n	801798a <_strtol_l.isra.0+0x3a>
 8017a42:	260a      	movs	r6, #10
 8017a44:	e7a9      	b.n	801799a <_strtol_l.isra.0+0x4a>
	...

08017a48 <_strtol_r>:
 8017a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a4a:	4c06      	ldr	r4, [pc, #24]	; (8017a64 <_strtol_r+0x1c>)
 8017a4c:	4d06      	ldr	r5, [pc, #24]	; (8017a68 <_strtol_r+0x20>)
 8017a4e:	6824      	ldr	r4, [r4, #0]
 8017a50:	6a24      	ldr	r4, [r4, #32]
 8017a52:	2c00      	cmp	r4, #0
 8017a54:	bf08      	it	eq
 8017a56:	462c      	moveq	r4, r5
 8017a58:	9400      	str	r4, [sp, #0]
 8017a5a:	f7ff ff79 	bl	8017950 <_strtol_l.isra.0>
 8017a5e:	b003      	add	sp, #12
 8017a60:	bd30      	pop	{r4, r5, pc}
 8017a62:	bf00      	nop
 8017a64:	2000000c 	.word	0x2000000c
 8017a68:	20000070 	.word	0x20000070

08017a6c <_vsiprintf_r>:
 8017a6c:	b500      	push	{lr}
 8017a6e:	b09b      	sub	sp, #108	; 0x6c
 8017a70:	9100      	str	r1, [sp, #0]
 8017a72:	9104      	str	r1, [sp, #16]
 8017a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017a78:	9105      	str	r1, [sp, #20]
 8017a7a:	9102      	str	r1, [sp, #8]
 8017a7c:	4905      	ldr	r1, [pc, #20]	; (8017a94 <_vsiprintf_r+0x28>)
 8017a7e:	9103      	str	r1, [sp, #12]
 8017a80:	4669      	mov	r1, sp
 8017a82:	f001 fed5 	bl	8019830 <_svfiprintf_r>
 8017a86:	9b00      	ldr	r3, [sp, #0]
 8017a88:	2200      	movs	r2, #0
 8017a8a:	701a      	strb	r2, [r3, #0]
 8017a8c:	b01b      	add	sp, #108	; 0x6c
 8017a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a92:	bf00      	nop
 8017a94:	ffff0208 	.word	0xffff0208

08017a98 <vsiprintf>:
 8017a98:	4613      	mov	r3, r2
 8017a9a:	460a      	mov	r2, r1
 8017a9c:	4601      	mov	r1, r0
 8017a9e:	4802      	ldr	r0, [pc, #8]	; (8017aa8 <vsiprintf+0x10>)
 8017aa0:	6800      	ldr	r0, [r0, #0]
 8017aa2:	f7ff bfe3 	b.w	8017a6c <_vsiprintf_r>
 8017aa6:	bf00      	nop
 8017aa8:	2000000c 	.word	0x2000000c

08017aac <quorem>:
 8017aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ab0:	6903      	ldr	r3, [r0, #16]
 8017ab2:	690c      	ldr	r4, [r1, #16]
 8017ab4:	42a3      	cmp	r3, r4
 8017ab6:	4680      	mov	r8, r0
 8017ab8:	f2c0 8082 	blt.w	8017bc0 <quorem+0x114>
 8017abc:	3c01      	subs	r4, #1
 8017abe:	f101 0714 	add.w	r7, r1, #20
 8017ac2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017ac6:	f100 0614 	add.w	r6, r0, #20
 8017aca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017ace:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017ad2:	eb06 030c 	add.w	r3, r6, ip
 8017ad6:	3501      	adds	r5, #1
 8017ad8:	eb07 090c 	add.w	r9, r7, ip
 8017adc:	9301      	str	r3, [sp, #4]
 8017ade:	fbb0 f5f5 	udiv	r5, r0, r5
 8017ae2:	b395      	cbz	r5, 8017b4a <quorem+0x9e>
 8017ae4:	f04f 0a00 	mov.w	sl, #0
 8017ae8:	4638      	mov	r0, r7
 8017aea:	46b6      	mov	lr, r6
 8017aec:	46d3      	mov	fp, sl
 8017aee:	f850 2b04 	ldr.w	r2, [r0], #4
 8017af2:	b293      	uxth	r3, r2
 8017af4:	fb05 a303 	mla	r3, r5, r3, sl
 8017af8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017afc:	b29b      	uxth	r3, r3
 8017afe:	ebab 0303 	sub.w	r3, fp, r3
 8017b02:	0c12      	lsrs	r2, r2, #16
 8017b04:	f8de b000 	ldr.w	fp, [lr]
 8017b08:	fb05 a202 	mla	r2, r5, r2, sl
 8017b0c:	fa13 f38b 	uxtah	r3, r3, fp
 8017b10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017b14:	fa1f fb82 	uxth.w	fp, r2
 8017b18:	f8de 2000 	ldr.w	r2, [lr]
 8017b1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017b20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b24:	b29b      	uxth	r3, r3
 8017b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b2a:	4581      	cmp	r9, r0
 8017b2c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017b30:	f84e 3b04 	str.w	r3, [lr], #4
 8017b34:	d2db      	bcs.n	8017aee <quorem+0x42>
 8017b36:	f856 300c 	ldr.w	r3, [r6, ip]
 8017b3a:	b933      	cbnz	r3, 8017b4a <quorem+0x9e>
 8017b3c:	9b01      	ldr	r3, [sp, #4]
 8017b3e:	3b04      	subs	r3, #4
 8017b40:	429e      	cmp	r6, r3
 8017b42:	461a      	mov	r2, r3
 8017b44:	d330      	bcc.n	8017ba8 <quorem+0xfc>
 8017b46:	f8c8 4010 	str.w	r4, [r8, #16]
 8017b4a:	4640      	mov	r0, r8
 8017b4c:	f001 fbb4 	bl	80192b8 <__mcmp>
 8017b50:	2800      	cmp	r0, #0
 8017b52:	db25      	blt.n	8017ba0 <quorem+0xf4>
 8017b54:	3501      	adds	r5, #1
 8017b56:	4630      	mov	r0, r6
 8017b58:	f04f 0c00 	mov.w	ip, #0
 8017b5c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017b60:	f8d0 e000 	ldr.w	lr, [r0]
 8017b64:	b293      	uxth	r3, r2
 8017b66:	ebac 0303 	sub.w	r3, ip, r3
 8017b6a:	0c12      	lsrs	r2, r2, #16
 8017b6c:	fa13 f38e 	uxtah	r3, r3, lr
 8017b70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017b74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b78:	b29b      	uxth	r3, r3
 8017b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b7e:	45b9      	cmp	r9, r7
 8017b80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017b84:	f840 3b04 	str.w	r3, [r0], #4
 8017b88:	d2e8      	bcs.n	8017b5c <quorem+0xb0>
 8017b8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017b8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017b92:	b92a      	cbnz	r2, 8017ba0 <quorem+0xf4>
 8017b94:	3b04      	subs	r3, #4
 8017b96:	429e      	cmp	r6, r3
 8017b98:	461a      	mov	r2, r3
 8017b9a:	d30b      	bcc.n	8017bb4 <quorem+0x108>
 8017b9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8017ba0:	4628      	mov	r0, r5
 8017ba2:	b003      	add	sp, #12
 8017ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ba8:	6812      	ldr	r2, [r2, #0]
 8017baa:	3b04      	subs	r3, #4
 8017bac:	2a00      	cmp	r2, #0
 8017bae:	d1ca      	bne.n	8017b46 <quorem+0x9a>
 8017bb0:	3c01      	subs	r4, #1
 8017bb2:	e7c5      	b.n	8017b40 <quorem+0x94>
 8017bb4:	6812      	ldr	r2, [r2, #0]
 8017bb6:	3b04      	subs	r3, #4
 8017bb8:	2a00      	cmp	r2, #0
 8017bba:	d1ef      	bne.n	8017b9c <quorem+0xf0>
 8017bbc:	3c01      	subs	r4, #1
 8017bbe:	e7ea      	b.n	8017b96 <quorem+0xea>
 8017bc0:	2000      	movs	r0, #0
 8017bc2:	e7ee      	b.n	8017ba2 <quorem+0xf6>
 8017bc4:	0000      	movs	r0, r0
	...

08017bc8 <_dtoa_r>:
 8017bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bcc:	ec57 6b10 	vmov	r6, r7, d0
 8017bd0:	b097      	sub	sp, #92	; 0x5c
 8017bd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017bd4:	9106      	str	r1, [sp, #24]
 8017bd6:	4604      	mov	r4, r0
 8017bd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8017bda:	9312      	str	r3, [sp, #72]	; 0x48
 8017bdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017be0:	e9cd 6700 	strd	r6, r7, [sp]
 8017be4:	b93d      	cbnz	r5, 8017bf6 <_dtoa_r+0x2e>
 8017be6:	2010      	movs	r0, #16
 8017be8:	f001 f8ee 	bl	8018dc8 <malloc>
 8017bec:	6260      	str	r0, [r4, #36]	; 0x24
 8017bee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017bf2:	6005      	str	r5, [r0, #0]
 8017bf4:	60c5      	str	r5, [r0, #12]
 8017bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017bf8:	6819      	ldr	r1, [r3, #0]
 8017bfa:	b151      	cbz	r1, 8017c12 <_dtoa_r+0x4a>
 8017bfc:	685a      	ldr	r2, [r3, #4]
 8017bfe:	604a      	str	r2, [r1, #4]
 8017c00:	2301      	movs	r3, #1
 8017c02:	4093      	lsls	r3, r2
 8017c04:	608b      	str	r3, [r1, #8]
 8017c06:	4620      	mov	r0, r4
 8017c08:	f001 f937 	bl	8018e7a <_Bfree>
 8017c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017c0e:	2200      	movs	r2, #0
 8017c10:	601a      	str	r2, [r3, #0]
 8017c12:	1e3b      	subs	r3, r7, #0
 8017c14:	bfbb      	ittet	lt
 8017c16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017c1a:	9301      	strlt	r3, [sp, #4]
 8017c1c:	2300      	movge	r3, #0
 8017c1e:	2201      	movlt	r2, #1
 8017c20:	bfac      	ite	ge
 8017c22:	f8c8 3000 	strge.w	r3, [r8]
 8017c26:	f8c8 2000 	strlt.w	r2, [r8]
 8017c2a:	4baf      	ldr	r3, [pc, #700]	; (8017ee8 <_dtoa_r+0x320>)
 8017c2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017c30:	ea33 0308 	bics.w	r3, r3, r8
 8017c34:	d114      	bne.n	8017c60 <_dtoa_r+0x98>
 8017c36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c38:	f242 730f 	movw	r3, #9999	; 0x270f
 8017c3c:	6013      	str	r3, [r2, #0]
 8017c3e:	9b00      	ldr	r3, [sp, #0]
 8017c40:	b923      	cbnz	r3, 8017c4c <_dtoa_r+0x84>
 8017c42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017c46:	2800      	cmp	r0, #0
 8017c48:	f000 8542 	beq.w	80186d0 <_dtoa_r+0xb08>
 8017c4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017efc <_dtoa_r+0x334>
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	f000 8544 	beq.w	80186e0 <_dtoa_r+0xb18>
 8017c58:	f10b 0303 	add.w	r3, fp, #3
 8017c5c:	f000 bd3e 	b.w	80186dc <_dtoa_r+0xb14>
 8017c60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017c64:	2200      	movs	r2, #0
 8017c66:	2300      	movs	r3, #0
 8017c68:	4630      	mov	r0, r6
 8017c6a:	4639      	mov	r1, r7
 8017c6c:	f7e8 ff44 	bl	8000af8 <__aeabi_dcmpeq>
 8017c70:	4681      	mov	r9, r0
 8017c72:	b168      	cbz	r0, 8017c90 <_dtoa_r+0xc8>
 8017c74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c76:	2301      	movs	r3, #1
 8017c78:	6013      	str	r3, [r2, #0]
 8017c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	f000 8524 	beq.w	80186ca <_dtoa_r+0xb02>
 8017c82:	4b9a      	ldr	r3, [pc, #616]	; (8017eec <_dtoa_r+0x324>)
 8017c84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017c86:	f103 3bff 	add.w	fp, r3, #4294967295
 8017c8a:	6013      	str	r3, [r2, #0]
 8017c8c:	f000 bd28 	b.w	80186e0 <_dtoa_r+0xb18>
 8017c90:	aa14      	add	r2, sp, #80	; 0x50
 8017c92:	a915      	add	r1, sp, #84	; 0x54
 8017c94:	ec47 6b10 	vmov	d0, r6, r7
 8017c98:	4620      	mov	r0, r4
 8017c9a:	f001 fbfb 	bl	8019494 <__d2b>
 8017c9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017ca2:	9004      	str	r0, [sp, #16]
 8017ca4:	2d00      	cmp	r5, #0
 8017ca6:	d07c      	beq.n	8017da2 <_dtoa_r+0x1da>
 8017ca8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017cac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017cb0:	46b2      	mov	sl, r6
 8017cb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017cb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017cba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	4b8b      	ldr	r3, [pc, #556]	; (8017ef0 <_dtoa_r+0x328>)
 8017cc2:	4650      	mov	r0, sl
 8017cc4:	4659      	mov	r1, fp
 8017cc6:	f7e8 faf7 	bl	80002b8 <__aeabi_dsub>
 8017cca:	a381      	add	r3, pc, #516	; (adr r3, 8017ed0 <_dtoa_r+0x308>)
 8017ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cd0:	f7e8 fcaa 	bl	8000628 <__aeabi_dmul>
 8017cd4:	a380      	add	r3, pc, #512	; (adr r3, 8017ed8 <_dtoa_r+0x310>)
 8017cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cda:	f7e8 faef 	bl	80002bc <__adddf3>
 8017cde:	4606      	mov	r6, r0
 8017ce0:	4628      	mov	r0, r5
 8017ce2:	460f      	mov	r7, r1
 8017ce4:	f7e8 fc36 	bl	8000554 <__aeabi_i2d>
 8017ce8:	a37d      	add	r3, pc, #500	; (adr r3, 8017ee0 <_dtoa_r+0x318>)
 8017cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cee:	f7e8 fc9b 	bl	8000628 <__aeabi_dmul>
 8017cf2:	4602      	mov	r2, r0
 8017cf4:	460b      	mov	r3, r1
 8017cf6:	4630      	mov	r0, r6
 8017cf8:	4639      	mov	r1, r7
 8017cfa:	f7e8 fadf 	bl	80002bc <__adddf3>
 8017cfe:	4606      	mov	r6, r0
 8017d00:	460f      	mov	r7, r1
 8017d02:	f7e8 ff41 	bl	8000b88 <__aeabi_d2iz>
 8017d06:	2200      	movs	r2, #0
 8017d08:	4682      	mov	sl, r0
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	4630      	mov	r0, r6
 8017d0e:	4639      	mov	r1, r7
 8017d10:	f7e8 fefc 	bl	8000b0c <__aeabi_dcmplt>
 8017d14:	b148      	cbz	r0, 8017d2a <_dtoa_r+0x162>
 8017d16:	4650      	mov	r0, sl
 8017d18:	f7e8 fc1c 	bl	8000554 <__aeabi_i2d>
 8017d1c:	4632      	mov	r2, r6
 8017d1e:	463b      	mov	r3, r7
 8017d20:	f7e8 feea 	bl	8000af8 <__aeabi_dcmpeq>
 8017d24:	b908      	cbnz	r0, 8017d2a <_dtoa_r+0x162>
 8017d26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d2a:	f1ba 0f16 	cmp.w	sl, #22
 8017d2e:	d859      	bhi.n	8017de4 <_dtoa_r+0x21c>
 8017d30:	4970      	ldr	r1, [pc, #448]	; (8017ef4 <_dtoa_r+0x32c>)
 8017d32:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d3e:	f7e8 ff03 	bl	8000b48 <__aeabi_dcmpgt>
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d050      	beq.n	8017de8 <_dtoa_r+0x220>
 8017d46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d50:	1b5d      	subs	r5, r3, r5
 8017d52:	f1b5 0801 	subs.w	r8, r5, #1
 8017d56:	bf49      	itett	mi
 8017d58:	f1c5 0301 	rsbmi	r3, r5, #1
 8017d5c:	2300      	movpl	r3, #0
 8017d5e:	9305      	strmi	r3, [sp, #20]
 8017d60:	f04f 0800 	movmi.w	r8, #0
 8017d64:	bf58      	it	pl
 8017d66:	9305      	strpl	r3, [sp, #20]
 8017d68:	f1ba 0f00 	cmp.w	sl, #0
 8017d6c:	db3e      	blt.n	8017dec <_dtoa_r+0x224>
 8017d6e:	2300      	movs	r3, #0
 8017d70:	44d0      	add	r8, sl
 8017d72:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017d76:	9307      	str	r3, [sp, #28]
 8017d78:	9b06      	ldr	r3, [sp, #24]
 8017d7a:	2b09      	cmp	r3, #9
 8017d7c:	f200 8090 	bhi.w	8017ea0 <_dtoa_r+0x2d8>
 8017d80:	2b05      	cmp	r3, #5
 8017d82:	bfc4      	itt	gt
 8017d84:	3b04      	subgt	r3, #4
 8017d86:	9306      	strgt	r3, [sp, #24]
 8017d88:	9b06      	ldr	r3, [sp, #24]
 8017d8a:	f1a3 0302 	sub.w	r3, r3, #2
 8017d8e:	bfcc      	ite	gt
 8017d90:	2500      	movgt	r5, #0
 8017d92:	2501      	movle	r5, #1
 8017d94:	2b03      	cmp	r3, #3
 8017d96:	f200 808f 	bhi.w	8017eb8 <_dtoa_r+0x2f0>
 8017d9a:	e8df f003 	tbb	[pc, r3]
 8017d9e:	7f7d      	.short	0x7f7d
 8017da0:	7131      	.short	0x7131
 8017da2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017da6:	441d      	add	r5, r3
 8017da8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017dac:	2820      	cmp	r0, #32
 8017dae:	dd13      	ble.n	8017dd8 <_dtoa_r+0x210>
 8017db0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017db4:	9b00      	ldr	r3, [sp, #0]
 8017db6:	fa08 f800 	lsl.w	r8, r8, r0
 8017dba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017dbe:	fa23 f000 	lsr.w	r0, r3, r0
 8017dc2:	ea48 0000 	orr.w	r0, r8, r0
 8017dc6:	f7e8 fbb5 	bl	8000534 <__aeabi_ui2d>
 8017dca:	2301      	movs	r3, #1
 8017dcc:	4682      	mov	sl, r0
 8017dce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017dd2:	3d01      	subs	r5, #1
 8017dd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8017dd6:	e772      	b.n	8017cbe <_dtoa_r+0xf6>
 8017dd8:	9b00      	ldr	r3, [sp, #0]
 8017dda:	f1c0 0020 	rsb	r0, r0, #32
 8017dde:	fa03 f000 	lsl.w	r0, r3, r0
 8017de2:	e7f0      	b.n	8017dc6 <_dtoa_r+0x1fe>
 8017de4:	2301      	movs	r3, #1
 8017de6:	e7b1      	b.n	8017d4c <_dtoa_r+0x184>
 8017de8:	900f      	str	r0, [sp, #60]	; 0x3c
 8017dea:	e7b0      	b.n	8017d4e <_dtoa_r+0x186>
 8017dec:	9b05      	ldr	r3, [sp, #20]
 8017dee:	eba3 030a 	sub.w	r3, r3, sl
 8017df2:	9305      	str	r3, [sp, #20]
 8017df4:	f1ca 0300 	rsb	r3, sl, #0
 8017df8:	9307      	str	r3, [sp, #28]
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	930e      	str	r3, [sp, #56]	; 0x38
 8017dfe:	e7bb      	b.n	8017d78 <_dtoa_r+0x1b0>
 8017e00:	2301      	movs	r3, #1
 8017e02:	930a      	str	r3, [sp, #40]	; 0x28
 8017e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	dd59      	ble.n	8017ebe <_dtoa_r+0x2f6>
 8017e0a:	9302      	str	r3, [sp, #8]
 8017e0c:	4699      	mov	r9, r3
 8017e0e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017e10:	2200      	movs	r2, #0
 8017e12:	6072      	str	r2, [r6, #4]
 8017e14:	2204      	movs	r2, #4
 8017e16:	f102 0014 	add.w	r0, r2, #20
 8017e1a:	4298      	cmp	r0, r3
 8017e1c:	6871      	ldr	r1, [r6, #4]
 8017e1e:	d953      	bls.n	8017ec8 <_dtoa_r+0x300>
 8017e20:	4620      	mov	r0, r4
 8017e22:	f000 fff6 	bl	8018e12 <_Balloc>
 8017e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e28:	6030      	str	r0, [r6, #0]
 8017e2a:	f1b9 0f0e 	cmp.w	r9, #14
 8017e2e:	f8d3 b000 	ldr.w	fp, [r3]
 8017e32:	f200 80e6 	bhi.w	8018002 <_dtoa_r+0x43a>
 8017e36:	2d00      	cmp	r5, #0
 8017e38:	f000 80e3 	beq.w	8018002 <_dtoa_r+0x43a>
 8017e3c:	ed9d 7b00 	vldr	d7, [sp]
 8017e40:	f1ba 0f00 	cmp.w	sl, #0
 8017e44:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017e48:	dd74      	ble.n	8017f34 <_dtoa_r+0x36c>
 8017e4a:	4a2a      	ldr	r2, [pc, #168]	; (8017ef4 <_dtoa_r+0x32c>)
 8017e4c:	f00a 030f 	and.w	r3, sl, #15
 8017e50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017e54:	ed93 7b00 	vldr	d7, [r3]
 8017e58:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017e5c:	06f0      	lsls	r0, r6, #27
 8017e5e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017e62:	d565      	bpl.n	8017f30 <_dtoa_r+0x368>
 8017e64:	4b24      	ldr	r3, [pc, #144]	; (8017ef8 <_dtoa_r+0x330>)
 8017e66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017e6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017e6e:	f7e8 fd05 	bl	800087c <__aeabi_ddiv>
 8017e72:	e9cd 0100 	strd	r0, r1, [sp]
 8017e76:	f006 060f 	and.w	r6, r6, #15
 8017e7a:	2503      	movs	r5, #3
 8017e7c:	4f1e      	ldr	r7, [pc, #120]	; (8017ef8 <_dtoa_r+0x330>)
 8017e7e:	e04c      	b.n	8017f1a <_dtoa_r+0x352>
 8017e80:	2301      	movs	r3, #1
 8017e82:	930a      	str	r3, [sp, #40]	; 0x28
 8017e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e86:	4453      	add	r3, sl
 8017e88:	f103 0901 	add.w	r9, r3, #1
 8017e8c:	9302      	str	r3, [sp, #8]
 8017e8e:	464b      	mov	r3, r9
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	bfb8      	it	lt
 8017e94:	2301      	movlt	r3, #1
 8017e96:	e7ba      	b.n	8017e0e <_dtoa_r+0x246>
 8017e98:	2300      	movs	r3, #0
 8017e9a:	e7b2      	b.n	8017e02 <_dtoa_r+0x23a>
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	e7f0      	b.n	8017e82 <_dtoa_r+0x2ba>
 8017ea0:	2501      	movs	r5, #1
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	9306      	str	r3, [sp, #24]
 8017ea6:	950a      	str	r5, [sp, #40]	; 0x28
 8017ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8017eac:	9302      	str	r3, [sp, #8]
 8017eae:	4699      	mov	r9, r3
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	2312      	movs	r3, #18
 8017eb4:	920b      	str	r2, [sp, #44]	; 0x2c
 8017eb6:	e7aa      	b.n	8017e0e <_dtoa_r+0x246>
 8017eb8:	2301      	movs	r3, #1
 8017eba:	930a      	str	r3, [sp, #40]	; 0x28
 8017ebc:	e7f4      	b.n	8017ea8 <_dtoa_r+0x2e0>
 8017ebe:	2301      	movs	r3, #1
 8017ec0:	9302      	str	r3, [sp, #8]
 8017ec2:	4699      	mov	r9, r3
 8017ec4:	461a      	mov	r2, r3
 8017ec6:	e7f5      	b.n	8017eb4 <_dtoa_r+0x2ec>
 8017ec8:	3101      	adds	r1, #1
 8017eca:	6071      	str	r1, [r6, #4]
 8017ecc:	0052      	lsls	r2, r2, #1
 8017ece:	e7a2      	b.n	8017e16 <_dtoa_r+0x24e>
 8017ed0:	636f4361 	.word	0x636f4361
 8017ed4:	3fd287a7 	.word	0x3fd287a7
 8017ed8:	8b60c8b3 	.word	0x8b60c8b3
 8017edc:	3fc68a28 	.word	0x3fc68a28
 8017ee0:	509f79fb 	.word	0x509f79fb
 8017ee4:	3fd34413 	.word	0x3fd34413
 8017ee8:	7ff00000 	.word	0x7ff00000
 8017eec:	0801aae4 	.word	0x0801aae4
 8017ef0:	3ff80000 	.word	0x3ff80000
 8017ef4:	0801a9e8 	.word	0x0801a9e8
 8017ef8:	0801a9c0 	.word	0x0801a9c0
 8017efc:	0801a9b1 	.word	0x0801a9b1
 8017f00:	07f1      	lsls	r1, r6, #31
 8017f02:	d508      	bpl.n	8017f16 <_dtoa_r+0x34e>
 8017f04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f0c:	f7e8 fb8c 	bl	8000628 <__aeabi_dmul>
 8017f10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017f14:	3501      	adds	r5, #1
 8017f16:	1076      	asrs	r6, r6, #1
 8017f18:	3708      	adds	r7, #8
 8017f1a:	2e00      	cmp	r6, #0
 8017f1c:	d1f0      	bne.n	8017f00 <_dtoa_r+0x338>
 8017f1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017f22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f26:	f7e8 fca9 	bl	800087c <__aeabi_ddiv>
 8017f2a:	e9cd 0100 	strd	r0, r1, [sp]
 8017f2e:	e01a      	b.n	8017f66 <_dtoa_r+0x39e>
 8017f30:	2502      	movs	r5, #2
 8017f32:	e7a3      	b.n	8017e7c <_dtoa_r+0x2b4>
 8017f34:	f000 80a0 	beq.w	8018078 <_dtoa_r+0x4b0>
 8017f38:	f1ca 0600 	rsb	r6, sl, #0
 8017f3c:	4b9f      	ldr	r3, [pc, #636]	; (80181bc <_dtoa_r+0x5f4>)
 8017f3e:	4fa0      	ldr	r7, [pc, #640]	; (80181c0 <_dtoa_r+0x5f8>)
 8017f40:	f006 020f 	and.w	r2, r6, #15
 8017f44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017f50:	f7e8 fb6a 	bl	8000628 <__aeabi_dmul>
 8017f54:	e9cd 0100 	strd	r0, r1, [sp]
 8017f58:	1136      	asrs	r6, r6, #4
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	2502      	movs	r5, #2
 8017f5e:	2e00      	cmp	r6, #0
 8017f60:	d17f      	bne.n	8018062 <_dtoa_r+0x49a>
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d1e1      	bne.n	8017f2a <_dtoa_r+0x362>
 8017f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	f000 8087 	beq.w	801807c <_dtoa_r+0x4b4>
 8017f6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017f72:	2200      	movs	r2, #0
 8017f74:	4b93      	ldr	r3, [pc, #588]	; (80181c4 <_dtoa_r+0x5fc>)
 8017f76:	4630      	mov	r0, r6
 8017f78:	4639      	mov	r1, r7
 8017f7a:	f7e8 fdc7 	bl	8000b0c <__aeabi_dcmplt>
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	d07c      	beq.n	801807c <_dtoa_r+0x4b4>
 8017f82:	f1b9 0f00 	cmp.w	r9, #0
 8017f86:	d079      	beq.n	801807c <_dtoa_r+0x4b4>
 8017f88:	9b02      	ldr	r3, [sp, #8]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	dd35      	ble.n	8017ffa <_dtoa_r+0x432>
 8017f8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017f92:	9308      	str	r3, [sp, #32]
 8017f94:	4639      	mov	r1, r7
 8017f96:	2200      	movs	r2, #0
 8017f98:	4b8b      	ldr	r3, [pc, #556]	; (80181c8 <_dtoa_r+0x600>)
 8017f9a:	4630      	mov	r0, r6
 8017f9c:	f7e8 fb44 	bl	8000628 <__aeabi_dmul>
 8017fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8017fa4:	9f02      	ldr	r7, [sp, #8]
 8017fa6:	3501      	adds	r5, #1
 8017fa8:	4628      	mov	r0, r5
 8017faa:	f7e8 fad3 	bl	8000554 <__aeabi_i2d>
 8017fae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017fb2:	f7e8 fb39 	bl	8000628 <__aeabi_dmul>
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	4b84      	ldr	r3, [pc, #528]	; (80181cc <_dtoa_r+0x604>)
 8017fba:	f7e8 f97f 	bl	80002bc <__adddf3>
 8017fbe:	4605      	mov	r5, r0
 8017fc0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017fc4:	2f00      	cmp	r7, #0
 8017fc6:	d15d      	bne.n	8018084 <_dtoa_r+0x4bc>
 8017fc8:	2200      	movs	r2, #0
 8017fca:	4b81      	ldr	r3, [pc, #516]	; (80181d0 <_dtoa_r+0x608>)
 8017fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017fd0:	f7e8 f972 	bl	80002b8 <__aeabi_dsub>
 8017fd4:	462a      	mov	r2, r5
 8017fd6:	4633      	mov	r3, r6
 8017fd8:	e9cd 0100 	strd	r0, r1, [sp]
 8017fdc:	f7e8 fdb4 	bl	8000b48 <__aeabi_dcmpgt>
 8017fe0:	2800      	cmp	r0, #0
 8017fe2:	f040 8288 	bne.w	80184f6 <_dtoa_r+0x92e>
 8017fe6:	462a      	mov	r2, r5
 8017fe8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017fec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ff0:	f7e8 fd8c 	bl	8000b0c <__aeabi_dcmplt>
 8017ff4:	2800      	cmp	r0, #0
 8017ff6:	f040 827c 	bne.w	80184f2 <_dtoa_r+0x92a>
 8017ffa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017ffe:	e9cd 2300 	strd	r2, r3, [sp]
 8018002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018004:	2b00      	cmp	r3, #0
 8018006:	f2c0 8150 	blt.w	80182aa <_dtoa_r+0x6e2>
 801800a:	f1ba 0f0e 	cmp.w	sl, #14
 801800e:	f300 814c 	bgt.w	80182aa <_dtoa_r+0x6e2>
 8018012:	4b6a      	ldr	r3, [pc, #424]	; (80181bc <_dtoa_r+0x5f4>)
 8018014:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018018:	ed93 7b00 	vldr	d7, [r3]
 801801c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801801e:	2b00      	cmp	r3, #0
 8018020:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018024:	f280 80d8 	bge.w	80181d8 <_dtoa_r+0x610>
 8018028:	f1b9 0f00 	cmp.w	r9, #0
 801802c:	f300 80d4 	bgt.w	80181d8 <_dtoa_r+0x610>
 8018030:	f040 825e 	bne.w	80184f0 <_dtoa_r+0x928>
 8018034:	2200      	movs	r2, #0
 8018036:	4b66      	ldr	r3, [pc, #408]	; (80181d0 <_dtoa_r+0x608>)
 8018038:	ec51 0b17 	vmov	r0, r1, d7
 801803c:	f7e8 faf4 	bl	8000628 <__aeabi_dmul>
 8018040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018044:	f7e8 fd76 	bl	8000b34 <__aeabi_dcmpge>
 8018048:	464f      	mov	r7, r9
 801804a:	464e      	mov	r6, r9
 801804c:	2800      	cmp	r0, #0
 801804e:	f040 8234 	bne.w	80184ba <_dtoa_r+0x8f2>
 8018052:	2331      	movs	r3, #49	; 0x31
 8018054:	f10b 0501 	add.w	r5, fp, #1
 8018058:	f88b 3000 	strb.w	r3, [fp]
 801805c:	f10a 0a01 	add.w	sl, sl, #1
 8018060:	e22f      	b.n	80184c2 <_dtoa_r+0x8fa>
 8018062:	07f2      	lsls	r2, r6, #31
 8018064:	d505      	bpl.n	8018072 <_dtoa_r+0x4aa>
 8018066:	e9d7 2300 	ldrd	r2, r3, [r7]
 801806a:	f7e8 fadd 	bl	8000628 <__aeabi_dmul>
 801806e:	3501      	adds	r5, #1
 8018070:	2301      	movs	r3, #1
 8018072:	1076      	asrs	r6, r6, #1
 8018074:	3708      	adds	r7, #8
 8018076:	e772      	b.n	8017f5e <_dtoa_r+0x396>
 8018078:	2502      	movs	r5, #2
 801807a:	e774      	b.n	8017f66 <_dtoa_r+0x39e>
 801807c:	f8cd a020 	str.w	sl, [sp, #32]
 8018080:	464f      	mov	r7, r9
 8018082:	e791      	b.n	8017fa8 <_dtoa_r+0x3e0>
 8018084:	4b4d      	ldr	r3, [pc, #308]	; (80181bc <_dtoa_r+0x5f4>)
 8018086:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801808a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801808e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018090:	2b00      	cmp	r3, #0
 8018092:	d047      	beq.n	8018124 <_dtoa_r+0x55c>
 8018094:	4602      	mov	r2, r0
 8018096:	460b      	mov	r3, r1
 8018098:	2000      	movs	r0, #0
 801809a:	494e      	ldr	r1, [pc, #312]	; (80181d4 <_dtoa_r+0x60c>)
 801809c:	f7e8 fbee 	bl	800087c <__aeabi_ddiv>
 80180a0:	462a      	mov	r2, r5
 80180a2:	4633      	mov	r3, r6
 80180a4:	f7e8 f908 	bl	80002b8 <__aeabi_dsub>
 80180a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80180ac:	465d      	mov	r5, fp
 80180ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180b2:	f7e8 fd69 	bl	8000b88 <__aeabi_d2iz>
 80180b6:	4606      	mov	r6, r0
 80180b8:	f7e8 fa4c 	bl	8000554 <__aeabi_i2d>
 80180bc:	4602      	mov	r2, r0
 80180be:	460b      	mov	r3, r1
 80180c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80180c4:	f7e8 f8f8 	bl	80002b8 <__aeabi_dsub>
 80180c8:	3630      	adds	r6, #48	; 0x30
 80180ca:	f805 6b01 	strb.w	r6, [r5], #1
 80180ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80180d2:	e9cd 0100 	strd	r0, r1, [sp]
 80180d6:	f7e8 fd19 	bl	8000b0c <__aeabi_dcmplt>
 80180da:	2800      	cmp	r0, #0
 80180dc:	d163      	bne.n	80181a6 <_dtoa_r+0x5de>
 80180de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80180e2:	2000      	movs	r0, #0
 80180e4:	4937      	ldr	r1, [pc, #220]	; (80181c4 <_dtoa_r+0x5fc>)
 80180e6:	f7e8 f8e7 	bl	80002b8 <__aeabi_dsub>
 80180ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80180ee:	f7e8 fd0d 	bl	8000b0c <__aeabi_dcmplt>
 80180f2:	2800      	cmp	r0, #0
 80180f4:	f040 80b7 	bne.w	8018266 <_dtoa_r+0x69e>
 80180f8:	eba5 030b 	sub.w	r3, r5, fp
 80180fc:	429f      	cmp	r7, r3
 80180fe:	f77f af7c 	ble.w	8017ffa <_dtoa_r+0x432>
 8018102:	2200      	movs	r2, #0
 8018104:	4b30      	ldr	r3, [pc, #192]	; (80181c8 <_dtoa_r+0x600>)
 8018106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801810a:	f7e8 fa8d 	bl	8000628 <__aeabi_dmul>
 801810e:	2200      	movs	r2, #0
 8018110:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018114:	4b2c      	ldr	r3, [pc, #176]	; (80181c8 <_dtoa_r+0x600>)
 8018116:	e9dd 0100 	ldrd	r0, r1, [sp]
 801811a:	f7e8 fa85 	bl	8000628 <__aeabi_dmul>
 801811e:	e9cd 0100 	strd	r0, r1, [sp]
 8018122:	e7c4      	b.n	80180ae <_dtoa_r+0x4e6>
 8018124:	462a      	mov	r2, r5
 8018126:	4633      	mov	r3, r6
 8018128:	f7e8 fa7e 	bl	8000628 <__aeabi_dmul>
 801812c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018130:	eb0b 0507 	add.w	r5, fp, r7
 8018134:	465e      	mov	r6, fp
 8018136:	e9dd 0100 	ldrd	r0, r1, [sp]
 801813a:	f7e8 fd25 	bl	8000b88 <__aeabi_d2iz>
 801813e:	4607      	mov	r7, r0
 8018140:	f7e8 fa08 	bl	8000554 <__aeabi_i2d>
 8018144:	3730      	adds	r7, #48	; 0x30
 8018146:	4602      	mov	r2, r0
 8018148:	460b      	mov	r3, r1
 801814a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801814e:	f7e8 f8b3 	bl	80002b8 <__aeabi_dsub>
 8018152:	f806 7b01 	strb.w	r7, [r6], #1
 8018156:	42ae      	cmp	r6, r5
 8018158:	e9cd 0100 	strd	r0, r1, [sp]
 801815c:	f04f 0200 	mov.w	r2, #0
 8018160:	d126      	bne.n	80181b0 <_dtoa_r+0x5e8>
 8018162:	4b1c      	ldr	r3, [pc, #112]	; (80181d4 <_dtoa_r+0x60c>)
 8018164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018168:	f7e8 f8a8 	bl	80002bc <__adddf3>
 801816c:	4602      	mov	r2, r0
 801816e:	460b      	mov	r3, r1
 8018170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018174:	f7e8 fce8 	bl	8000b48 <__aeabi_dcmpgt>
 8018178:	2800      	cmp	r0, #0
 801817a:	d174      	bne.n	8018266 <_dtoa_r+0x69e>
 801817c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018180:	2000      	movs	r0, #0
 8018182:	4914      	ldr	r1, [pc, #80]	; (80181d4 <_dtoa_r+0x60c>)
 8018184:	f7e8 f898 	bl	80002b8 <__aeabi_dsub>
 8018188:	4602      	mov	r2, r0
 801818a:	460b      	mov	r3, r1
 801818c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018190:	f7e8 fcbc 	bl	8000b0c <__aeabi_dcmplt>
 8018194:	2800      	cmp	r0, #0
 8018196:	f43f af30 	beq.w	8017ffa <_dtoa_r+0x432>
 801819a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801819e:	2b30      	cmp	r3, #48	; 0x30
 80181a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80181a4:	d002      	beq.n	80181ac <_dtoa_r+0x5e4>
 80181a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80181aa:	e04a      	b.n	8018242 <_dtoa_r+0x67a>
 80181ac:	4615      	mov	r5, r2
 80181ae:	e7f4      	b.n	801819a <_dtoa_r+0x5d2>
 80181b0:	4b05      	ldr	r3, [pc, #20]	; (80181c8 <_dtoa_r+0x600>)
 80181b2:	f7e8 fa39 	bl	8000628 <__aeabi_dmul>
 80181b6:	e9cd 0100 	strd	r0, r1, [sp]
 80181ba:	e7bc      	b.n	8018136 <_dtoa_r+0x56e>
 80181bc:	0801a9e8 	.word	0x0801a9e8
 80181c0:	0801a9c0 	.word	0x0801a9c0
 80181c4:	3ff00000 	.word	0x3ff00000
 80181c8:	40240000 	.word	0x40240000
 80181cc:	401c0000 	.word	0x401c0000
 80181d0:	40140000 	.word	0x40140000
 80181d4:	3fe00000 	.word	0x3fe00000
 80181d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80181dc:	465d      	mov	r5, fp
 80181de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80181e2:	4630      	mov	r0, r6
 80181e4:	4639      	mov	r1, r7
 80181e6:	f7e8 fb49 	bl	800087c <__aeabi_ddiv>
 80181ea:	f7e8 fccd 	bl	8000b88 <__aeabi_d2iz>
 80181ee:	4680      	mov	r8, r0
 80181f0:	f7e8 f9b0 	bl	8000554 <__aeabi_i2d>
 80181f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80181f8:	f7e8 fa16 	bl	8000628 <__aeabi_dmul>
 80181fc:	4602      	mov	r2, r0
 80181fe:	460b      	mov	r3, r1
 8018200:	4630      	mov	r0, r6
 8018202:	4639      	mov	r1, r7
 8018204:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8018208:	f7e8 f856 	bl	80002b8 <__aeabi_dsub>
 801820c:	f805 6b01 	strb.w	r6, [r5], #1
 8018210:	eba5 060b 	sub.w	r6, r5, fp
 8018214:	45b1      	cmp	r9, r6
 8018216:	4602      	mov	r2, r0
 8018218:	460b      	mov	r3, r1
 801821a:	d139      	bne.n	8018290 <_dtoa_r+0x6c8>
 801821c:	f7e8 f84e 	bl	80002bc <__adddf3>
 8018220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018224:	4606      	mov	r6, r0
 8018226:	460f      	mov	r7, r1
 8018228:	f7e8 fc8e 	bl	8000b48 <__aeabi_dcmpgt>
 801822c:	b9c8      	cbnz	r0, 8018262 <_dtoa_r+0x69a>
 801822e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018232:	4630      	mov	r0, r6
 8018234:	4639      	mov	r1, r7
 8018236:	f7e8 fc5f 	bl	8000af8 <__aeabi_dcmpeq>
 801823a:	b110      	cbz	r0, 8018242 <_dtoa_r+0x67a>
 801823c:	f018 0f01 	tst.w	r8, #1
 8018240:	d10f      	bne.n	8018262 <_dtoa_r+0x69a>
 8018242:	9904      	ldr	r1, [sp, #16]
 8018244:	4620      	mov	r0, r4
 8018246:	f000 fe18 	bl	8018e7a <_Bfree>
 801824a:	2300      	movs	r3, #0
 801824c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801824e:	702b      	strb	r3, [r5, #0]
 8018250:	f10a 0301 	add.w	r3, sl, #1
 8018254:	6013      	str	r3, [r2, #0]
 8018256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018258:	2b00      	cmp	r3, #0
 801825a:	f000 8241 	beq.w	80186e0 <_dtoa_r+0xb18>
 801825e:	601d      	str	r5, [r3, #0]
 8018260:	e23e      	b.n	80186e0 <_dtoa_r+0xb18>
 8018262:	f8cd a020 	str.w	sl, [sp, #32]
 8018266:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801826a:	2a39      	cmp	r2, #57	; 0x39
 801826c:	f105 33ff 	add.w	r3, r5, #4294967295
 8018270:	d108      	bne.n	8018284 <_dtoa_r+0x6bc>
 8018272:	459b      	cmp	fp, r3
 8018274:	d10a      	bne.n	801828c <_dtoa_r+0x6c4>
 8018276:	9b08      	ldr	r3, [sp, #32]
 8018278:	3301      	adds	r3, #1
 801827a:	9308      	str	r3, [sp, #32]
 801827c:	2330      	movs	r3, #48	; 0x30
 801827e:	f88b 3000 	strb.w	r3, [fp]
 8018282:	465b      	mov	r3, fp
 8018284:	781a      	ldrb	r2, [r3, #0]
 8018286:	3201      	adds	r2, #1
 8018288:	701a      	strb	r2, [r3, #0]
 801828a:	e78c      	b.n	80181a6 <_dtoa_r+0x5de>
 801828c:	461d      	mov	r5, r3
 801828e:	e7ea      	b.n	8018266 <_dtoa_r+0x69e>
 8018290:	2200      	movs	r2, #0
 8018292:	4b9b      	ldr	r3, [pc, #620]	; (8018500 <_dtoa_r+0x938>)
 8018294:	f7e8 f9c8 	bl	8000628 <__aeabi_dmul>
 8018298:	2200      	movs	r2, #0
 801829a:	2300      	movs	r3, #0
 801829c:	4606      	mov	r6, r0
 801829e:	460f      	mov	r7, r1
 80182a0:	f7e8 fc2a 	bl	8000af8 <__aeabi_dcmpeq>
 80182a4:	2800      	cmp	r0, #0
 80182a6:	d09a      	beq.n	80181de <_dtoa_r+0x616>
 80182a8:	e7cb      	b.n	8018242 <_dtoa_r+0x67a>
 80182aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80182ac:	2a00      	cmp	r2, #0
 80182ae:	f000 808b 	beq.w	80183c8 <_dtoa_r+0x800>
 80182b2:	9a06      	ldr	r2, [sp, #24]
 80182b4:	2a01      	cmp	r2, #1
 80182b6:	dc6e      	bgt.n	8018396 <_dtoa_r+0x7ce>
 80182b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80182ba:	2a00      	cmp	r2, #0
 80182bc:	d067      	beq.n	801838e <_dtoa_r+0x7c6>
 80182be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80182c2:	9f07      	ldr	r7, [sp, #28]
 80182c4:	9d05      	ldr	r5, [sp, #20]
 80182c6:	9a05      	ldr	r2, [sp, #20]
 80182c8:	2101      	movs	r1, #1
 80182ca:	441a      	add	r2, r3
 80182cc:	4620      	mov	r0, r4
 80182ce:	9205      	str	r2, [sp, #20]
 80182d0:	4498      	add	r8, r3
 80182d2:	f000 feb0 	bl	8019036 <__i2b>
 80182d6:	4606      	mov	r6, r0
 80182d8:	2d00      	cmp	r5, #0
 80182da:	dd0c      	ble.n	80182f6 <_dtoa_r+0x72e>
 80182dc:	f1b8 0f00 	cmp.w	r8, #0
 80182e0:	dd09      	ble.n	80182f6 <_dtoa_r+0x72e>
 80182e2:	4545      	cmp	r5, r8
 80182e4:	9a05      	ldr	r2, [sp, #20]
 80182e6:	462b      	mov	r3, r5
 80182e8:	bfa8      	it	ge
 80182ea:	4643      	movge	r3, r8
 80182ec:	1ad2      	subs	r2, r2, r3
 80182ee:	9205      	str	r2, [sp, #20]
 80182f0:	1aed      	subs	r5, r5, r3
 80182f2:	eba8 0803 	sub.w	r8, r8, r3
 80182f6:	9b07      	ldr	r3, [sp, #28]
 80182f8:	b1eb      	cbz	r3, 8018336 <_dtoa_r+0x76e>
 80182fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d067      	beq.n	80183d0 <_dtoa_r+0x808>
 8018300:	b18f      	cbz	r7, 8018326 <_dtoa_r+0x75e>
 8018302:	4631      	mov	r1, r6
 8018304:	463a      	mov	r2, r7
 8018306:	4620      	mov	r0, r4
 8018308:	f000 ff34 	bl	8019174 <__pow5mult>
 801830c:	9a04      	ldr	r2, [sp, #16]
 801830e:	4601      	mov	r1, r0
 8018310:	4606      	mov	r6, r0
 8018312:	4620      	mov	r0, r4
 8018314:	f000 fe98 	bl	8019048 <__multiply>
 8018318:	9904      	ldr	r1, [sp, #16]
 801831a:	9008      	str	r0, [sp, #32]
 801831c:	4620      	mov	r0, r4
 801831e:	f000 fdac 	bl	8018e7a <_Bfree>
 8018322:	9b08      	ldr	r3, [sp, #32]
 8018324:	9304      	str	r3, [sp, #16]
 8018326:	9b07      	ldr	r3, [sp, #28]
 8018328:	1bda      	subs	r2, r3, r7
 801832a:	d004      	beq.n	8018336 <_dtoa_r+0x76e>
 801832c:	9904      	ldr	r1, [sp, #16]
 801832e:	4620      	mov	r0, r4
 8018330:	f000 ff20 	bl	8019174 <__pow5mult>
 8018334:	9004      	str	r0, [sp, #16]
 8018336:	2101      	movs	r1, #1
 8018338:	4620      	mov	r0, r4
 801833a:	f000 fe7c 	bl	8019036 <__i2b>
 801833e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018340:	4607      	mov	r7, r0
 8018342:	2b00      	cmp	r3, #0
 8018344:	f000 81d0 	beq.w	80186e8 <_dtoa_r+0xb20>
 8018348:	461a      	mov	r2, r3
 801834a:	4601      	mov	r1, r0
 801834c:	4620      	mov	r0, r4
 801834e:	f000 ff11 	bl	8019174 <__pow5mult>
 8018352:	9b06      	ldr	r3, [sp, #24]
 8018354:	2b01      	cmp	r3, #1
 8018356:	4607      	mov	r7, r0
 8018358:	dc40      	bgt.n	80183dc <_dtoa_r+0x814>
 801835a:	9b00      	ldr	r3, [sp, #0]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d139      	bne.n	80183d4 <_dtoa_r+0x80c>
 8018360:	9b01      	ldr	r3, [sp, #4]
 8018362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018366:	2b00      	cmp	r3, #0
 8018368:	d136      	bne.n	80183d8 <_dtoa_r+0x810>
 801836a:	9b01      	ldr	r3, [sp, #4]
 801836c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018370:	0d1b      	lsrs	r3, r3, #20
 8018372:	051b      	lsls	r3, r3, #20
 8018374:	b12b      	cbz	r3, 8018382 <_dtoa_r+0x7ba>
 8018376:	9b05      	ldr	r3, [sp, #20]
 8018378:	3301      	adds	r3, #1
 801837a:	9305      	str	r3, [sp, #20]
 801837c:	f108 0801 	add.w	r8, r8, #1
 8018380:	2301      	movs	r3, #1
 8018382:	9307      	str	r3, [sp, #28]
 8018384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018386:	2b00      	cmp	r3, #0
 8018388:	d12a      	bne.n	80183e0 <_dtoa_r+0x818>
 801838a:	2001      	movs	r0, #1
 801838c:	e030      	b.n	80183f0 <_dtoa_r+0x828>
 801838e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018390:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018394:	e795      	b.n	80182c2 <_dtoa_r+0x6fa>
 8018396:	9b07      	ldr	r3, [sp, #28]
 8018398:	f109 37ff 	add.w	r7, r9, #4294967295
 801839c:	42bb      	cmp	r3, r7
 801839e:	bfbf      	itttt	lt
 80183a0:	9b07      	ldrlt	r3, [sp, #28]
 80183a2:	9707      	strlt	r7, [sp, #28]
 80183a4:	1afa      	sublt	r2, r7, r3
 80183a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80183a8:	bfbb      	ittet	lt
 80183aa:	189b      	addlt	r3, r3, r2
 80183ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80183ae:	1bdf      	subge	r7, r3, r7
 80183b0:	2700      	movlt	r7, #0
 80183b2:	f1b9 0f00 	cmp.w	r9, #0
 80183b6:	bfb5      	itete	lt
 80183b8:	9b05      	ldrlt	r3, [sp, #20]
 80183ba:	9d05      	ldrge	r5, [sp, #20]
 80183bc:	eba3 0509 	sublt.w	r5, r3, r9
 80183c0:	464b      	movge	r3, r9
 80183c2:	bfb8      	it	lt
 80183c4:	2300      	movlt	r3, #0
 80183c6:	e77e      	b.n	80182c6 <_dtoa_r+0x6fe>
 80183c8:	9f07      	ldr	r7, [sp, #28]
 80183ca:	9d05      	ldr	r5, [sp, #20]
 80183cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80183ce:	e783      	b.n	80182d8 <_dtoa_r+0x710>
 80183d0:	9a07      	ldr	r2, [sp, #28]
 80183d2:	e7ab      	b.n	801832c <_dtoa_r+0x764>
 80183d4:	2300      	movs	r3, #0
 80183d6:	e7d4      	b.n	8018382 <_dtoa_r+0x7ba>
 80183d8:	9b00      	ldr	r3, [sp, #0]
 80183da:	e7d2      	b.n	8018382 <_dtoa_r+0x7ba>
 80183dc:	2300      	movs	r3, #0
 80183de:	9307      	str	r3, [sp, #28]
 80183e0:	693b      	ldr	r3, [r7, #16]
 80183e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80183e6:	6918      	ldr	r0, [r3, #16]
 80183e8:	f000 fdd7 	bl	8018f9a <__hi0bits>
 80183ec:	f1c0 0020 	rsb	r0, r0, #32
 80183f0:	4440      	add	r0, r8
 80183f2:	f010 001f 	ands.w	r0, r0, #31
 80183f6:	d047      	beq.n	8018488 <_dtoa_r+0x8c0>
 80183f8:	f1c0 0320 	rsb	r3, r0, #32
 80183fc:	2b04      	cmp	r3, #4
 80183fe:	dd3b      	ble.n	8018478 <_dtoa_r+0x8b0>
 8018400:	9b05      	ldr	r3, [sp, #20]
 8018402:	f1c0 001c 	rsb	r0, r0, #28
 8018406:	4403      	add	r3, r0
 8018408:	9305      	str	r3, [sp, #20]
 801840a:	4405      	add	r5, r0
 801840c:	4480      	add	r8, r0
 801840e:	9b05      	ldr	r3, [sp, #20]
 8018410:	2b00      	cmp	r3, #0
 8018412:	dd05      	ble.n	8018420 <_dtoa_r+0x858>
 8018414:	461a      	mov	r2, r3
 8018416:	9904      	ldr	r1, [sp, #16]
 8018418:	4620      	mov	r0, r4
 801841a:	f000 fef9 	bl	8019210 <__lshift>
 801841e:	9004      	str	r0, [sp, #16]
 8018420:	f1b8 0f00 	cmp.w	r8, #0
 8018424:	dd05      	ble.n	8018432 <_dtoa_r+0x86a>
 8018426:	4639      	mov	r1, r7
 8018428:	4642      	mov	r2, r8
 801842a:	4620      	mov	r0, r4
 801842c:	f000 fef0 	bl	8019210 <__lshift>
 8018430:	4607      	mov	r7, r0
 8018432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018434:	b353      	cbz	r3, 801848c <_dtoa_r+0x8c4>
 8018436:	4639      	mov	r1, r7
 8018438:	9804      	ldr	r0, [sp, #16]
 801843a:	f000 ff3d 	bl	80192b8 <__mcmp>
 801843e:	2800      	cmp	r0, #0
 8018440:	da24      	bge.n	801848c <_dtoa_r+0x8c4>
 8018442:	2300      	movs	r3, #0
 8018444:	220a      	movs	r2, #10
 8018446:	9904      	ldr	r1, [sp, #16]
 8018448:	4620      	mov	r0, r4
 801844a:	f000 fd2d 	bl	8018ea8 <__multadd>
 801844e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018450:	9004      	str	r0, [sp, #16]
 8018452:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018456:	2b00      	cmp	r3, #0
 8018458:	f000 814d 	beq.w	80186f6 <_dtoa_r+0xb2e>
 801845c:	2300      	movs	r3, #0
 801845e:	4631      	mov	r1, r6
 8018460:	220a      	movs	r2, #10
 8018462:	4620      	mov	r0, r4
 8018464:	f000 fd20 	bl	8018ea8 <__multadd>
 8018468:	9b02      	ldr	r3, [sp, #8]
 801846a:	2b00      	cmp	r3, #0
 801846c:	4606      	mov	r6, r0
 801846e:	dc4f      	bgt.n	8018510 <_dtoa_r+0x948>
 8018470:	9b06      	ldr	r3, [sp, #24]
 8018472:	2b02      	cmp	r3, #2
 8018474:	dd4c      	ble.n	8018510 <_dtoa_r+0x948>
 8018476:	e011      	b.n	801849c <_dtoa_r+0x8d4>
 8018478:	d0c9      	beq.n	801840e <_dtoa_r+0x846>
 801847a:	9a05      	ldr	r2, [sp, #20]
 801847c:	331c      	adds	r3, #28
 801847e:	441a      	add	r2, r3
 8018480:	9205      	str	r2, [sp, #20]
 8018482:	441d      	add	r5, r3
 8018484:	4498      	add	r8, r3
 8018486:	e7c2      	b.n	801840e <_dtoa_r+0x846>
 8018488:	4603      	mov	r3, r0
 801848a:	e7f6      	b.n	801847a <_dtoa_r+0x8b2>
 801848c:	f1b9 0f00 	cmp.w	r9, #0
 8018490:	dc38      	bgt.n	8018504 <_dtoa_r+0x93c>
 8018492:	9b06      	ldr	r3, [sp, #24]
 8018494:	2b02      	cmp	r3, #2
 8018496:	dd35      	ble.n	8018504 <_dtoa_r+0x93c>
 8018498:	f8cd 9008 	str.w	r9, [sp, #8]
 801849c:	9b02      	ldr	r3, [sp, #8]
 801849e:	b963      	cbnz	r3, 80184ba <_dtoa_r+0x8f2>
 80184a0:	4639      	mov	r1, r7
 80184a2:	2205      	movs	r2, #5
 80184a4:	4620      	mov	r0, r4
 80184a6:	f000 fcff 	bl	8018ea8 <__multadd>
 80184aa:	4601      	mov	r1, r0
 80184ac:	4607      	mov	r7, r0
 80184ae:	9804      	ldr	r0, [sp, #16]
 80184b0:	f000 ff02 	bl	80192b8 <__mcmp>
 80184b4:	2800      	cmp	r0, #0
 80184b6:	f73f adcc 	bgt.w	8018052 <_dtoa_r+0x48a>
 80184ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184bc:	465d      	mov	r5, fp
 80184be:	ea6f 0a03 	mvn.w	sl, r3
 80184c2:	f04f 0900 	mov.w	r9, #0
 80184c6:	4639      	mov	r1, r7
 80184c8:	4620      	mov	r0, r4
 80184ca:	f000 fcd6 	bl	8018e7a <_Bfree>
 80184ce:	2e00      	cmp	r6, #0
 80184d0:	f43f aeb7 	beq.w	8018242 <_dtoa_r+0x67a>
 80184d4:	f1b9 0f00 	cmp.w	r9, #0
 80184d8:	d005      	beq.n	80184e6 <_dtoa_r+0x91e>
 80184da:	45b1      	cmp	r9, r6
 80184dc:	d003      	beq.n	80184e6 <_dtoa_r+0x91e>
 80184de:	4649      	mov	r1, r9
 80184e0:	4620      	mov	r0, r4
 80184e2:	f000 fcca 	bl	8018e7a <_Bfree>
 80184e6:	4631      	mov	r1, r6
 80184e8:	4620      	mov	r0, r4
 80184ea:	f000 fcc6 	bl	8018e7a <_Bfree>
 80184ee:	e6a8      	b.n	8018242 <_dtoa_r+0x67a>
 80184f0:	2700      	movs	r7, #0
 80184f2:	463e      	mov	r6, r7
 80184f4:	e7e1      	b.n	80184ba <_dtoa_r+0x8f2>
 80184f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80184fa:	463e      	mov	r6, r7
 80184fc:	e5a9      	b.n	8018052 <_dtoa_r+0x48a>
 80184fe:	bf00      	nop
 8018500:	40240000 	.word	0x40240000
 8018504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018506:	f8cd 9008 	str.w	r9, [sp, #8]
 801850a:	2b00      	cmp	r3, #0
 801850c:	f000 80fa 	beq.w	8018704 <_dtoa_r+0xb3c>
 8018510:	2d00      	cmp	r5, #0
 8018512:	dd05      	ble.n	8018520 <_dtoa_r+0x958>
 8018514:	4631      	mov	r1, r6
 8018516:	462a      	mov	r2, r5
 8018518:	4620      	mov	r0, r4
 801851a:	f000 fe79 	bl	8019210 <__lshift>
 801851e:	4606      	mov	r6, r0
 8018520:	9b07      	ldr	r3, [sp, #28]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d04c      	beq.n	80185c0 <_dtoa_r+0x9f8>
 8018526:	6871      	ldr	r1, [r6, #4]
 8018528:	4620      	mov	r0, r4
 801852a:	f000 fc72 	bl	8018e12 <_Balloc>
 801852e:	6932      	ldr	r2, [r6, #16]
 8018530:	3202      	adds	r2, #2
 8018532:	4605      	mov	r5, r0
 8018534:	0092      	lsls	r2, r2, #2
 8018536:	f106 010c 	add.w	r1, r6, #12
 801853a:	300c      	adds	r0, #12
 801853c:	f000 fc5e 	bl	8018dfc <memcpy>
 8018540:	2201      	movs	r2, #1
 8018542:	4629      	mov	r1, r5
 8018544:	4620      	mov	r0, r4
 8018546:	f000 fe63 	bl	8019210 <__lshift>
 801854a:	9b00      	ldr	r3, [sp, #0]
 801854c:	f8cd b014 	str.w	fp, [sp, #20]
 8018550:	f003 0301 	and.w	r3, r3, #1
 8018554:	46b1      	mov	r9, r6
 8018556:	9307      	str	r3, [sp, #28]
 8018558:	4606      	mov	r6, r0
 801855a:	4639      	mov	r1, r7
 801855c:	9804      	ldr	r0, [sp, #16]
 801855e:	f7ff faa5 	bl	8017aac <quorem>
 8018562:	4649      	mov	r1, r9
 8018564:	4605      	mov	r5, r0
 8018566:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801856a:	9804      	ldr	r0, [sp, #16]
 801856c:	f000 fea4 	bl	80192b8 <__mcmp>
 8018570:	4632      	mov	r2, r6
 8018572:	9000      	str	r0, [sp, #0]
 8018574:	4639      	mov	r1, r7
 8018576:	4620      	mov	r0, r4
 8018578:	f000 feb8 	bl	80192ec <__mdiff>
 801857c:	68c3      	ldr	r3, [r0, #12]
 801857e:	4602      	mov	r2, r0
 8018580:	bb03      	cbnz	r3, 80185c4 <_dtoa_r+0x9fc>
 8018582:	4601      	mov	r1, r0
 8018584:	9008      	str	r0, [sp, #32]
 8018586:	9804      	ldr	r0, [sp, #16]
 8018588:	f000 fe96 	bl	80192b8 <__mcmp>
 801858c:	9a08      	ldr	r2, [sp, #32]
 801858e:	4603      	mov	r3, r0
 8018590:	4611      	mov	r1, r2
 8018592:	4620      	mov	r0, r4
 8018594:	9308      	str	r3, [sp, #32]
 8018596:	f000 fc70 	bl	8018e7a <_Bfree>
 801859a:	9b08      	ldr	r3, [sp, #32]
 801859c:	b9a3      	cbnz	r3, 80185c8 <_dtoa_r+0xa00>
 801859e:	9a06      	ldr	r2, [sp, #24]
 80185a0:	b992      	cbnz	r2, 80185c8 <_dtoa_r+0xa00>
 80185a2:	9a07      	ldr	r2, [sp, #28]
 80185a4:	b982      	cbnz	r2, 80185c8 <_dtoa_r+0xa00>
 80185a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80185aa:	d029      	beq.n	8018600 <_dtoa_r+0xa38>
 80185ac:	9b00      	ldr	r3, [sp, #0]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	dd01      	ble.n	80185b6 <_dtoa_r+0x9ee>
 80185b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80185b6:	9b05      	ldr	r3, [sp, #20]
 80185b8:	1c5d      	adds	r5, r3, #1
 80185ba:	f883 8000 	strb.w	r8, [r3]
 80185be:	e782      	b.n	80184c6 <_dtoa_r+0x8fe>
 80185c0:	4630      	mov	r0, r6
 80185c2:	e7c2      	b.n	801854a <_dtoa_r+0x982>
 80185c4:	2301      	movs	r3, #1
 80185c6:	e7e3      	b.n	8018590 <_dtoa_r+0x9c8>
 80185c8:	9a00      	ldr	r2, [sp, #0]
 80185ca:	2a00      	cmp	r2, #0
 80185cc:	db04      	blt.n	80185d8 <_dtoa_r+0xa10>
 80185ce:	d125      	bne.n	801861c <_dtoa_r+0xa54>
 80185d0:	9a06      	ldr	r2, [sp, #24]
 80185d2:	bb1a      	cbnz	r2, 801861c <_dtoa_r+0xa54>
 80185d4:	9a07      	ldr	r2, [sp, #28]
 80185d6:	bb0a      	cbnz	r2, 801861c <_dtoa_r+0xa54>
 80185d8:	2b00      	cmp	r3, #0
 80185da:	ddec      	ble.n	80185b6 <_dtoa_r+0x9ee>
 80185dc:	2201      	movs	r2, #1
 80185de:	9904      	ldr	r1, [sp, #16]
 80185e0:	4620      	mov	r0, r4
 80185e2:	f000 fe15 	bl	8019210 <__lshift>
 80185e6:	4639      	mov	r1, r7
 80185e8:	9004      	str	r0, [sp, #16]
 80185ea:	f000 fe65 	bl	80192b8 <__mcmp>
 80185ee:	2800      	cmp	r0, #0
 80185f0:	dc03      	bgt.n	80185fa <_dtoa_r+0xa32>
 80185f2:	d1e0      	bne.n	80185b6 <_dtoa_r+0x9ee>
 80185f4:	f018 0f01 	tst.w	r8, #1
 80185f8:	d0dd      	beq.n	80185b6 <_dtoa_r+0x9ee>
 80185fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80185fe:	d1d8      	bne.n	80185b2 <_dtoa_r+0x9ea>
 8018600:	9b05      	ldr	r3, [sp, #20]
 8018602:	9a05      	ldr	r2, [sp, #20]
 8018604:	1c5d      	adds	r5, r3, #1
 8018606:	2339      	movs	r3, #57	; 0x39
 8018608:	7013      	strb	r3, [r2, #0]
 801860a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801860e:	2b39      	cmp	r3, #57	; 0x39
 8018610:	f105 32ff 	add.w	r2, r5, #4294967295
 8018614:	d04f      	beq.n	80186b6 <_dtoa_r+0xaee>
 8018616:	3301      	adds	r3, #1
 8018618:	7013      	strb	r3, [r2, #0]
 801861a:	e754      	b.n	80184c6 <_dtoa_r+0x8fe>
 801861c:	9a05      	ldr	r2, [sp, #20]
 801861e:	2b00      	cmp	r3, #0
 8018620:	f102 0501 	add.w	r5, r2, #1
 8018624:	dd06      	ble.n	8018634 <_dtoa_r+0xa6c>
 8018626:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801862a:	d0e9      	beq.n	8018600 <_dtoa_r+0xa38>
 801862c:	f108 0801 	add.w	r8, r8, #1
 8018630:	9b05      	ldr	r3, [sp, #20]
 8018632:	e7c2      	b.n	80185ba <_dtoa_r+0x9f2>
 8018634:	9a02      	ldr	r2, [sp, #8]
 8018636:	f805 8c01 	strb.w	r8, [r5, #-1]
 801863a:	eba5 030b 	sub.w	r3, r5, fp
 801863e:	4293      	cmp	r3, r2
 8018640:	d021      	beq.n	8018686 <_dtoa_r+0xabe>
 8018642:	2300      	movs	r3, #0
 8018644:	220a      	movs	r2, #10
 8018646:	9904      	ldr	r1, [sp, #16]
 8018648:	4620      	mov	r0, r4
 801864a:	f000 fc2d 	bl	8018ea8 <__multadd>
 801864e:	45b1      	cmp	r9, r6
 8018650:	9004      	str	r0, [sp, #16]
 8018652:	f04f 0300 	mov.w	r3, #0
 8018656:	f04f 020a 	mov.w	r2, #10
 801865a:	4649      	mov	r1, r9
 801865c:	4620      	mov	r0, r4
 801865e:	d105      	bne.n	801866c <_dtoa_r+0xaa4>
 8018660:	f000 fc22 	bl	8018ea8 <__multadd>
 8018664:	4681      	mov	r9, r0
 8018666:	4606      	mov	r6, r0
 8018668:	9505      	str	r5, [sp, #20]
 801866a:	e776      	b.n	801855a <_dtoa_r+0x992>
 801866c:	f000 fc1c 	bl	8018ea8 <__multadd>
 8018670:	4631      	mov	r1, r6
 8018672:	4681      	mov	r9, r0
 8018674:	2300      	movs	r3, #0
 8018676:	220a      	movs	r2, #10
 8018678:	4620      	mov	r0, r4
 801867a:	f000 fc15 	bl	8018ea8 <__multadd>
 801867e:	4606      	mov	r6, r0
 8018680:	e7f2      	b.n	8018668 <_dtoa_r+0xaa0>
 8018682:	f04f 0900 	mov.w	r9, #0
 8018686:	2201      	movs	r2, #1
 8018688:	9904      	ldr	r1, [sp, #16]
 801868a:	4620      	mov	r0, r4
 801868c:	f000 fdc0 	bl	8019210 <__lshift>
 8018690:	4639      	mov	r1, r7
 8018692:	9004      	str	r0, [sp, #16]
 8018694:	f000 fe10 	bl	80192b8 <__mcmp>
 8018698:	2800      	cmp	r0, #0
 801869a:	dcb6      	bgt.n	801860a <_dtoa_r+0xa42>
 801869c:	d102      	bne.n	80186a4 <_dtoa_r+0xadc>
 801869e:	f018 0f01 	tst.w	r8, #1
 80186a2:	d1b2      	bne.n	801860a <_dtoa_r+0xa42>
 80186a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80186a8:	2b30      	cmp	r3, #48	; 0x30
 80186aa:	f105 32ff 	add.w	r2, r5, #4294967295
 80186ae:	f47f af0a 	bne.w	80184c6 <_dtoa_r+0x8fe>
 80186b2:	4615      	mov	r5, r2
 80186b4:	e7f6      	b.n	80186a4 <_dtoa_r+0xadc>
 80186b6:	4593      	cmp	fp, r2
 80186b8:	d105      	bne.n	80186c6 <_dtoa_r+0xafe>
 80186ba:	2331      	movs	r3, #49	; 0x31
 80186bc:	f10a 0a01 	add.w	sl, sl, #1
 80186c0:	f88b 3000 	strb.w	r3, [fp]
 80186c4:	e6ff      	b.n	80184c6 <_dtoa_r+0x8fe>
 80186c6:	4615      	mov	r5, r2
 80186c8:	e79f      	b.n	801860a <_dtoa_r+0xa42>
 80186ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018730 <_dtoa_r+0xb68>
 80186ce:	e007      	b.n	80186e0 <_dtoa_r+0xb18>
 80186d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80186d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018734 <_dtoa_r+0xb6c>
 80186d6:	b11b      	cbz	r3, 80186e0 <_dtoa_r+0xb18>
 80186d8:	f10b 0308 	add.w	r3, fp, #8
 80186dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80186de:	6013      	str	r3, [r2, #0]
 80186e0:	4658      	mov	r0, fp
 80186e2:	b017      	add	sp, #92	; 0x5c
 80186e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186e8:	9b06      	ldr	r3, [sp, #24]
 80186ea:	2b01      	cmp	r3, #1
 80186ec:	f77f ae35 	ble.w	801835a <_dtoa_r+0x792>
 80186f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80186f2:	9307      	str	r3, [sp, #28]
 80186f4:	e649      	b.n	801838a <_dtoa_r+0x7c2>
 80186f6:	9b02      	ldr	r3, [sp, #8]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	dc03      	bgt.n	8018704 <_dtoa_r+0xb3c>
 80186fc:	9b06      	ldr	r3, [sp, #24]
 80186fe:	2b02      	cmp	r3, #2
 8018700:	f73f aecc 	bgt.w	801849c <_dtoa_r+0x8d4>
 8018704:	465d      	mov	r5, fp
 8018706:	4639      	mov	r1, r7
 8018708:	9804      	ldr	r0, [sp, #16]
 801870a:	f7ff f9cf 	bl	8017aac <quorem>
 801870e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018712:	f805 8b01 	strb.w	r8, [r5], #1
 8018716:	9a02      	ldr	r2, [sp, #8]
 8018718:	eba5 030b 	sub.w	r3, r5, fp
 801871c:	429a      	cmp	r2, r3
 801871e:	ddb0      	ble.n	8018682 <_dtoa_r+0xaba>
 8018720:	2300      	movs	r3, #0
 8018722:	220a      	movs	r2, #10
 8018724:	9904      	ldr	r1, [sp, #16]
 8018726:	4620      	mov	r0, r4
 8018728:	f000 fbbe 	bl	8018ea8 <__multadd>
 801872c:	9004      	str	r0, [sp, #16]
 801872e:	e7ea      	b.n	8018706 <_dtoa_r+0xb3e>
 8018730:	0801aae3 	.word	0x0801aae3
 8018734:	0801a9a8 	.word	0x0801a9a8

08018738 <rshift>:
 8018738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801873a:	6906      	ldr	r6, [r0, #16]
 801873c:	114b      	asrs	r3, r1, #5
 801873e:	429e      	cmp	r6, r3
 8018740:	f100 0414 	add.w	r4, r0, #20
 8018744:	dd30      	ble.n	80187a8 <rshift+0x70>
 8018746:	f011 011f 	ands.w	r1, r1, #31
 801874a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801874e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018752:	d108      	bne.n	8018766 <rshift+0x2e>
 8018754:	4621      	mov	r1, r4
 8018756:	42b2      	cmp	r2, r6
 8018758:	460b      	mov	r3, r1
 801875a:	d211      	bcs.n	8018780 <rshift+0x48>
 801875c:	f852 3b04 	ldr.w	r3, [r2], #4
 8018760:	f841 3b04 	str.w	r3, [r1], #4
 8018764:	e7f7      	b.n	8018756 <rshift+0x1e>
 8018766:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801876a:	f1c1 0c20 	rsb	ip, r1, #32
 801876e:	40cd      	lsrs	r5, r1
 8018770:	3204      	adds	r2, #4
 8018772:	4623      	mov	r3, r4
 8018774:	42b2      	cmp	r2, r6
 8018776:	4617      	mov	r7, r2
 8018778:	d30c      	bcc.n	8018794 <rshift+0x5c>
 801877a:	601d      	str	r5, [r3, #0]
 801877c:	b105      	cbz	r5, 8018780 <rshift+0x48>
 801877e:	3304      	adds	r3, #4
 8018780:	1b1a      	subs	r2, r3, r4
 8018782:	42a3      	cmp	r3, r4
 8018784:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018788:	bf08      	it	eq
 801878a:	2300      	moveq	r3, #0
 801878c:	6102      	str	r2, [r0, #16]
 801878e:	bf08      	it	eq
 8018790:	6143      	streq	r3, [r0, #20]
 8018792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018794:	683f      	ldr	r7, [r7, #0]
 8018796:	fa07 f70c 	lsl.w	r7, r7, ip
 801879a:	433d      	orrs	r5, r7
 801879c:	f843 5b04 	str.w	r5, [r3], #4
 80187a0:	f852 5b04 	ldr.w	r5, [r2], #4
 80187a4:	40cd      	lsrs	r5, r1
 80187a6:	e7e5      	b.n	8018774 <rshift+0x3c>
 80187a8:	4623      	mov	r3, r4
 80187aa:	e7e9      	b.n	8018780 <rshift+0x48>

080187ac <__hexdig_fun>:
 80187ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80187b0:	2b09      	cmp	r3, #9
 80187b2:	d802      	bhi.n	80187ba <__hexdig_fun+0xe>
 80187b4:	3820      	subs	r0, #32
 80187b6:	b2c0      	uxtb	r0, r0
 80187b8:	4770      	bx	lr
 80187ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80187be:	2b05      	cmp	r3, #5
 80187c0:	d801      	bhi.n	80187c6 <__hexdig_fun+0x1a>
 80187c2:	3847      	subs	r0, #71	; 0x47
 80187c4:	e7f7      	b.n	80187b6 <__hexdig_fun+0xa>
 80187c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80187ca:	2b05      	cmp	r3, #5
 80187cc:	d801      	bhi.n	80187d2 <__hexdig_fun+0x26>
 80187ce:	3827      	subs	r0, #39	; 0x27
 80187d0:	e7f1      	b.n	80187b6 <__hexdig_fun+0xa>
 80187d2:	2000      	movs	r0, #0
 80187d4:	4770      	bx	lr

080187d6 <__gethex>:
 80187d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187da:	b08b      	sub	sp, #44	; 0x2c
 80187dc:	468a      	mov	sl, r1
 80187de:	9002      	str	r0, [sp, #8]
 80187e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80187e2:	9306      	str	r3, [sp, #24]
 80187e4:	4690      	mov	r8, r2
 80187e6:	f000 fadf 	bl	8018da8 <__localeconv_l>
 80187ea:	6803      	ldr	r3, [r0, #0]
 80187ec:	9303      	str	r3, [sp, #12]
 80187ee:	4618      	mov	r0, r3
 80187f0:	f7e7 fd06 	bl	8000200 <strlen>
 80187f4:	9b03      	ldr	r3, [sp, #12]
 80187f6:	9001      	str	r0, [sp, #4]
 80187f8:	4403      	add	r3, r0
 80187fa:	f04f 0b00 	mov.w	fp, #0
 80187fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018802:	9307      	str	r3, [sp, #28]
 8018804:	f8da 3000 	ldr.w	r3, [sl]
 8018808:	3302      	adds	r3, #2
 801880a:	461f      	mov	r7, r3
 801880c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018810:	2830      	cmp	r0, #48	; 0x30
 8018812:	d06c      	beq.n	80188ee <__gethex+0x118>
 8018814:	f7ff ffca 	bl	80187ac <__hexdig_fun>
 8018818:	4604      	mov	r4, r0
 801881a:	2800      	cmp	r0, #0
 801881c:	d16a      	bne.n	80188f4 <__gethex+0x11e>
 801881e:	9a01      	ldr	r2, [sp, #4]
 8018820:	9903      	ldr	r1, [sp, #12]
 8018822:	4638      	mov	r0, r7
 8018824:	f001 fc40 	bl	801a0a8 <strncmp>
 8018828:	2800      	cmp	r0, #0
 801882a:	d166      	bne.n	80188fa <__gethex+0x124>
 801882c:	9b01      	ldr	r3, [sp, #4]
 801882e:	5cf8      	ldrb	r0, [r7, r3]
 8018830:	18fe      	adds	r6, r7, r3
 8018832:	f7ff ffbb 	bl	80187ac <__hexdig_fun>
 8018836:	2800      	cmp	r0, #0
 8018838:	d062      	beq.n	8018900 <__gethex+0x12a>
 801883a:	4633      	mov	r3, r6
 801883c:	7818      	ldrb	r0, [r3, #0]
 801883e:	2830      	cmp	r0, #48	; 0x30
 8018840:	461f      	mov	r7, r3
 8018842:	f103 0301 	add.w	r3, r3, #1
 8018846:	d0f9      	beq.n	801883c <__gethex+0x66>
 8018848:	f7ff ffb0 	bl	80187ac <__hexdig_fun>
 801884c:	fab0 f580 	clz	r5, r0
 8018850:	096d      	lsrs	r5, r5, #5
 8018852:	4634      	mov	r4, r6
 8018854:	f04f 0b01 	mov.w	fp, #1
 8018858:	463a      	mov	r2, r7
 801885a:	4616      	mov	r6, r2
 801885c:	3201      	adds	r2, #1
 801885e:	7830      	ldrb	r0, [r6, #0]
 8018860:	f7ff ffa4 	bl	80187ac <__hexdig_fun>
 8018864:	2800      	cmp	r0, #0
 8018866:	d1f8      	bne.n	801885a <__gethex+0x84>
 8018868:	9a01      	ldr	r2, [sp, #4]
 801886a:	9903      	ldr	r1, [sp, #12]
 801886c:	4630      	mov	r0, r6
 801886e:	f001 fc1b 	bl	801a0a8 <strncmp>
 8018872:	b950      	cbnz	r0, 801888a <__gethex+0xb4>
 8018874:	b954      	cbnz	r4, 801888c <__gethex+0xb6>
 8018876:	9b01      	ldr	r3, [sp, #4]
 8018878:	18f4      	adds	r4, r6, r3
 801887a:	4622      	mov	r2, r4
 801887c:	4616      	mov	r6, r2
 801887e:	3201      	adds	r2, #1
 8018880:	7830      	ldrb	r0, [r6, #0]
 8018882:	f7ff ff93 	bl	80187ac <__hexdig_fun>
 8018886:	2800      	cmp	r0, #0
 8018888:	d1f8      	bne.n	801887c <__gethex+0xa6>
 801888a:	b10c      	cbz	r4, 8018890 <__gethex+0xba>
 801888c:	1ba4      	subs	r4, r4, r6
 801888e:	00a4      	lsls	r4, r4, #2
 8018890:	7833      	ldrb	r3, [r6, #0]
 8018892:	2b50      	cmp	r3, #80	; 0x50
 8018894:	d001      	beq.n	801889a <__gethex+0xc4>
 8018896:	2b70      	cmp	r3, #112	; 0x70
 8018898:	d140      	bne.n	801891c <__gethex+0x146>
 801889a:	7873      	ldrb	r3, [r6, #1]
 801889c:	2b2b      	cmp	r3, #43	; 0x2b
 801889e:	d031      	beq.n	8018904 <__gethex+0x12e>
 80188a0:	2b2d      	cmp	r3, #45	; 0x2d
 80188a2:	d033      	beq.n	801890c <__gethex+0x136>
 80188a4:	1c71      	adds	r1, r6, #1
 80188a6:	f04f 0900 	mov.w	r9, #0
 80188aa:	7808      	ldrb	r0, [r1, #0]
 80188ac:	f7ff ff7e 	bl	80187ac <__hexdig_fun>
 80188b0:	1e43      	subs	r3, r0, #1
 80188b2:	b2db      	uxtb	r3, r3
 80188b4:	2b18      	cmp	r3, #24
 80188b6:	d831      	bhi.n	801891c <__gethex+0x146>
 80188b8:	f1a0 0210 	sub.w	r2, r0, #16
 80188bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80188c0:	f7ff ff74 	bl	80187ac <__hexdig_fun>
 80188c4:	1e43      	subs	r3, r0, #1
 80188c6:	b2db      	uxtb	r3, r3
 80188c8:	2b18      	cmp	r3, #24
 80188ca:	d922      	bls.n	8018912 <__gethex+0x13c>
 80188cc:	f1b9 0f00 	cmp.w	r9, #0
 80188d0:	d000      	beq.n	80188d4 <__gethex+0xfe>
 80188d2:	4252      	negs	r2, r2
 80188d4:	4414      	add	r4, r2
 80188d6:	f8ca 1000 	str.w	r1, [sl]
 80188da:	b30d      	cbz	r5, 8018920 <__gethex+0x14a>
 80188dc:	f1bb 0f00 	cmp.w	fp, #0
 80188e0:	bf0c      	ite	eq
 80188e2:	2706      	moveq	r7, #6
 80188e4:	2700      	movne	r7, #0
 80188e6:	4638      	mov	r0, r7
 80188e8:	b00b      	add	sp, #44	; 0x2c
 80188ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ee:	f10b 0b01 	add.w	fp, fp, #1
 80188f2:	e78a      	b.n	801880a <__gethex+0x34>
 80188f4:	2500      	movs	r5, #0
 80188f6:	462c      	mov	r4, r5
 80188f8:	e7ae      	b.n	8018858 <__gethex+0x82>
 80188fa:	463e      	mov	r6, r7
 80188fc:	2501      	movs	r5, #1
 80188fe:	e7c7      	b.n	8018890 <__gethex+0xba>
 8018900:	4604      	mov	r4, r0
 8018902:	e7fb      	b.n	80188fc <__gethex+0x126>
 8018904:	f04f 0900 	mov.w	r9, #0
 8018908:	1cb1      	adds	r1, r6, #2
 801890a:	e7ce      	b.n	80188aa <__gethex+0xd4>
 801890c:	f04f 0901 	mov.w	r9, #1
 8018910:	e7fa      	b.n	8018908 <__gethex+0x132>
 8018912:	230a      	movs	r3, #10
 8018914:	fb03 0202 	mla	r2, r3, r2, r0
 8018918:	3a10      	subs	r2, #16
 801891a:	e7cf      	b.n	80188bc <__gethex+0xe6>
 801891c:	4631      	mov	r1, r6
 801891e:	e7da      	b.n	80188d6 <__gethex+0x100>
 8018920:	1bf3      	subs	r3, r6, r7
 8018922:	3b01      	subs	r3, #1
 8018924:	4629      	mov	r1, r5
 8018926:	2b07      	cmp	r3, #7
 8018928:	dc49      	bgt.n	80189be <__gethex+0x1e8>
 801892a:	9802      	ldr	r0, [sp, #8]
 801892c:	f000 fa71 	bl	8018e12 <_Balloc>
 8018930:	9b01      	ldr	r3, [sp, #4]
 8018932:	f100 0914 	add.w	r9, r0, #20
 8018936:	f04f 0b00 	mov.w	fp, #0
 801893a:	f1c3 0301 	rsb	r3, r3, #1
 801893e:	4605      	mov	r5, r0
 8018940:	f8cd 9010 	str.w	r9, [sp, #16]
 8018944:	46da      	mov	sl, fp
 8018946:	9308      	str	r3, [sp, #32]
 8018948:	42b7      	cmp	r7, r6
 801894a:	d33b      	bcc.n	80189c4 <__gethex+0x1ee>
 801894c:	9804      	ldr	r0, [sp, #16]
 801894e:	f840 ab04 	str.w	sl, [r0], #4
 8018952:	eba0 0009 	sub.w	r0, r0, r9
 8018956:	1080      	asrs	r0, r0, #2
 8018958:	6128      	str	r0, [r5, #16]
 801895a:	0147      	lsls	r7, r0, #5
 801895c:	4650      	mov	r0, sl
 801895e:	f000 fb1c 	bl	8018f9a <__hi0bits>
 8018962:	f8d8 6000 	ldr.w	r6, [r8]
 8018966:	1a3f      	subs	r7, r7, r0
 8018968:	42b7      	cmp	r7, r6
 801896a:	dd64      	ble.n	8018a36 <__gethex+0x260>
 801896c:	1bbf      	subs	r7, r7, r6
 801896e:	4639      	mov	r1, r7
 8018970:	4628      	mov	r0, r5
 8018972:	f000 fe2b 	bl	80195cc <__any_on>
 8018976:	4682      	mov	sl, r0
 8018978:	b178      	cbz	r0, 801899a <__gethex+0x1c4>
 801897a:	1e7b      	subs	r3, r7, #1
 801897c:	1159      	asrs	r1, r3, #5
 801897e:	f003 021f 	and.w	r2, r3, #31
 8018982:	f04f 0a01 	mov.w	sl, #1
 8018986:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801898a:	fa0a f202 	lsl.w	r2, sl, r2
 801898e:	420a      	tst	r2, r1
 8018990:	d003      	beq.n	801899a <__gethex+0x1c4>
 8018992:	4553      	cmp	r3, sl
 8018994:	dc46      	bgt.n	8018a24 <__gethex+0x24e>
 8018996:	f04f 0a02 	mov.w	sl, #2
 801899a:	4639      	mov	r1, r7
 801899c:	4628      	mov	r0, r5
 801899e:	f7ff fecb 	bl	8018738 <rshift>
 80189a2:	443c      	add	r4, r7
 80189a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80189a8:	42a3      	cmp	r3, r4
 80189aa:	da52      	bge.n	8018a52 <__gethex+0x27c>
 80189ac:	4629      	mov	r1, r5
 80189ae:	9802      	ldr	r0, [sp, #8]
 80189b0:	f000 fa63 	bl	8018e7a <_Bfree>
 80189b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80189b6:	2300      	movs	r3, #0
 80189b8:	6013      	str	r3, [r2, #0]
 80189ba:	27a3      	movs	r7, #163	; 0xa3
 80189bc:	e793      	b.n	80188e6 <__gethex+0x110>
 80189be:	3101      	adds	r1, #1
 80189c0:	105b      	asrs	r3, r3, #1
 80189c2:	e7b0      	b.n	8018926 <__gethex+0x150>
 80189c4:	1e73      	subs	r3, r6, #1
 80189c6:	9305      	str	r3, [sp, #20]
 80189c8:	9a07      	ldr	r2, [sp, #28]
 80189ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80189ce:	4293      	cmp	r3, r2
 80189d0:	d018      	beq.n	8018a04 <__gethex+0x22e>
 80189d2:	f1bb 0f20 	cmp.w	fp, #32
 80189d6:	d107      	bne.n	80189e8 <__gethex+0x212>
 80189d8:	9b04      	ldr	r3, [sp, #16]
 80189da:	f8c3 a000 	str.w	sl, [r3]
 80189de:	3304      	adds	r3, #4
 80189e0:	f04f 0a00 	mov.w	sl, #0
 80189e4:	9304      	str	r3, [sp, #16]
 80189e6:	46d3      	mov	fp, sl
 80189e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80189ec:	f7ff fede 	bl	80187ac <__hexdig_fun>
 80189f0:	f000 000f 	and.w	r0, r0, #15
 80189f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80189f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80189fc:	f10b 0b04 	add.w	fp, fp, #4
 8018a00:	9b05      	ldr	r3, [sp, #20]
 8018a02:	e00d      	b.n	8018a20 <__gethex+0x24a>
 8018a04:	9b05      	ldr	r3, [sp, #20]
 8018a06:	9a08      	ldr	r2, [sp, #32]
 8018a08:	4413      	add	r3, r2
 8018a0a:	42bb      	cmp	r3, r7
 8018a0c:	d3e1      	bcc.n	80189d2 <__gethex+0x1fc>
 8018a0e:	4618      	mov	r0, r3
 8018a10:	9a01      	ldr	r2, [sp, #4]
 8018a12:	9903      	ldr	r1, [sp, #12]
 8018a14:	9309      	str	r3, [sp, #36]	; 0x24
 8018a16:	f001 fb47 	bl	801a0a8 <strncmp>
 8018a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a1c:	2800      	cmp	r0, #0
 8018a1e:	d1d8      	bne.n	80189d2 <__gethex+0x1fc>
 8018a20:	461e      	mov	r6, r3
 8018a22:	e791      	b.n	8018948 <__gethex+0x172>
 8018a24:	1eb9      	subs	r1, r7, #2
 8018a26:	4628      	mov	r0, r5
 8018a28:	f000 fdd0 	bl	80195cc <__any_on>
 8018a2c:	2800      	cmp	r0, #0
 8018a2e:	d0b2      	beq.n	8018996 <__gethex+0x1c0>
 8018a30:	f04f 0a03 	mov.w	sl, #3
 8018a34:	e7b1      	b.n	801899a <__gethex+0x1c4>
 8018a36:	da09      	bge.n	8018a4c <__gethex+0x276>
 8018a38:	1bf7      	subs	r7, r6, r7
 8018a3a:	4629      	mov	r1, r5
 8018a3c:	463a      	mov	r2, r7
 8018a3e:	9802      	ldr	r0, [sp, #8]
 8018a40:	f000 fbe6 	bl	8019210 <__lshift>
 8018a44:	1be4      	subs	r4, r4, r7
 8018a46:	4605      	mov	r5, r0
 8018a48:	f100 0914 	add.w	r9, r0, #20
 8018a4c:	f04f 0a00 	mov.w	sl, #0
 8018a50:	e7a8      	b.n	80189a4 <__gethex+0x1ce>
 8018a52:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018a56:	42a0      	cmp	r0, r4
 8018a58:	dd6a      	ble.n	8018b30 <__gethex+0x35a>
 8018a5a:	1b04      	subs	r4, r0, r4
 8018a5c:	42a6      	cmp	r6, r4
 8018a5e:	dc2e      	bgt.n	8018abe <__gethex+0x2e8>
 8018a60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a64:	2b02      	cmp	r3, #2
 8018a66:	d022      	beq.n	8018aae <__gethex+0x2d8>
 8018a68:	2b03      	cmp	r3, #3
 8018a6a:	d024      	beq.n	8018ab6 <__gethex+0x2e0>
 8018a6c:	2b01      	cmp	r3, #1
 8018a6e:	d115      	bne.n	8018a9c <__gethex+0x2c6>
 8018a70:	42a6      	cmp	r6, r4
 8018a72:	d113      	bne.n	8018a9c <__gethex+0x2c6>
 8018a74:	2e01      	cmp	r6, #1
 8018a76:	dc0b      	bgt.n	8018a90 <__gethex+0x2ba>
 8018a78:	9a06      	ldr	r2, [sp, #24]
 8018a7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018a7e:	6013      	str	r3, [r2, #0]
 8018a80:	2301      	movs	r3, #1
 8018a82:	612b      	str	r3, [r5, #16]
 8018a84:	f8c9 3000 	str.w	r3, [r9]
 8018a88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018a8a:	2762      	movs	r7, #98	; 0x62
 8018a8c:	601d      	str	r5, [r3, #0]
 8018a8e:	e72a      	b.n	80188e6 <__gethex+0x110>
 8018a90:	1e71      	subs	r1, r6, #1
 8018a92:	4628      	mov	r0, r5
 8018a94:	f000 fd9a 	bl	80195cc <__any_on>
 8018a98:	2800      	cmp	r0, #0
 8018a9a:	d1ed      	bne.n	8018a78 <__gethex+0x2a2>
 8018a9c:	4629      	mov	r1, r5
 8018a9e:	9802      	ldr	r0, [sp, #8]
 8018aa0:	f000 f9eb 	bl	8018e7a <_Bfree>
 8018aa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	6013      	str	r3, [r2, #0]
 8018aaa:	2750      	movs	r7, #80	; 0x50
 8018aac:	e71b      	b.n	80188e6 <__gethex+0x110>
 8018aae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d0e1      	beq.n	8018a78 <__gethex+0x2a2>
 8018ab4:	e7f2      	b.n	8018a9c <__gethex+0x2c6>
 8018ab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d1dd      	bne.n	8018a78 <__gethex+0x2a2>
 8018abc:	e7ee      	b.n	8018a9c <__gethex+0x2c6>
 8018abe:	1e67      	subs	r7, r4, #1
 8018ac0:	f1ba 0f00 	cmp.w	sl, #0
 8018ac4:	d131      	bne.n	8018b2a <__gethex+0x354>
 8018ac6:	b127      	cbz	r7, 8018ad2 <__gethex+0x2fc>
 8018ac8:	4639      	mov	r1, r7
 8018aca:	4628      	mov	r0, r5
 8018acc:	f000 fd7e 	bl	80195cc <__any_on>
 8018ad0:	4682      	mov	sl, r0
 8018ad2:	117a      	asrs	r2, r7, #5
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	f007 071f 	and.w	r7, r7, #31
 8018ada:	fa03 f707 	lsl.w	r7, r3, r7
 8018ade:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018ae2:	4621      	mov	r1, r4
 8018ae4:	421f      	tst	r7, r3
 8018ae6:	4628      	mov	r0, r5
 8018ae8:	bf18      	it	ne
 8018aea:	f04a 0a02 	orrne.w	sl, sl, #2
 8018aee:	1b36      	subs	r6, r6, r4
 8018af0:	f7ff fe22 	bl	8018738 <rshift>
 8018af4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018af8:	2702      	movs	r7, #2
 8018afa:	f1ba 0f00 	cmp.w	sl, #0
 8018afe:	d048      	beq.n	8018b92 <__gethex+0x3bc>
 8018b00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b04:	2b02      	cmp	r3, #2
 8018b06:	d015      	beq.n	8018b34 <__gethex+0x35e>
 8018b08:	2b03      	cmp	r3, #3
 8018b0a:	d017      	beq.n	8018b3c <__gethex+0x366>
 8018b0c:	2b01      	cmp	r3, #1
 8018b0e:	d109      	bne.n	8018b24 <__gethex+0x34e>
 8018b10:	f01a 0f02 	tst.w	sl, #2
 8018b14:	d006      	beq.n	8018b24 <__gethex+0x34e>
 8018b16:	f8d9 3000 	ldr.w	r3, [r9]
 8018b1a:	ea4a 0a03 	orr.w	sl, sl, r3
 8018b1e:	f01a 0f01 	tst.w	sl, #1
 8018b22:	d10e      	bne.n	8018b42 <__gethex+0x36c>
 8018b24:	f047 0710 	orr.w	r7, r7, #16
 8018b28:	e033      	b.n	8018b92 <__gethex+0x3bc>
 8018b2a:	f04f 0a01 	mov.w	sl, #1
 8018b2e:	e7d0      	b.n	8018ad2 <__gethex+0x2fc>
 8018b30:	2701      	movs	r7, #1
 8018b32:	e7e2      	b.n	8018afa <__gethex+0x324>
 8018b34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b36:	f1c3 0301 	rsb	r3, r3, #1
 8018b3a:	9315      	str	r3, [sp, #84]	; 0x54
 8018b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d0f0      	beq.n	8018b24 <__gethex+0x34e>
 8018b42:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018b46:	f105 0314 	add.w	r3, r5, #20
 8018b4a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018b4e:	eb03 010a 	add.w	r1, r3, sl
 8018b52:	f04f 0c00 	mov.w	ip, #0
 8018b56:	4618      	mov	r0, r3
 8018b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018b60:	d01c      	beq.n	8018b9c <__gethex+0x3c6>
 8018b62:	3201      	adds	r2, #1
 8018b64:	6002      	str	r2, [r0, #0]
 8018b66:	2f02      	cmp	r7, #2
 8018b68:	f105 0314 	add.w	r3, r5, #20
 8018b6c:	d138      	bne.n	8018be0 <__gethex+0x40a>
 8018b6e:	f8d8 2000 	ldr.w	r2, [r8]
 8018b72:	3a01      	subs	r2, #1
 8018b74:	42b2      	cmp	r2, r6
 8018b76:	d10a      	bne.n	8018b8e <__gethex+0x3b8>
 8018b78:	1171      	asrs	r1, r6, #5
 8018b7a:	2201      	movs	r2, #1
 8018b7c:	f006 061f 	and.w	r6, r6, #31
 8018b80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018b84:	fa02 f606 	lsl.w	r6, r2, r6
 8018b88:	421e      	tst	r6, r3
 8018b8a:	bf18      	it	ne
 8018b8c:	4617      	movne	r7, r2
 8018b8e:	f047 0720 	orr.w	r7, r7, #32
 8018b92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b94:	601d      	str	r5, [r3, #0]
 8018b96:	9b06      	ldr	r3, [sp, #24]
 8018b98:	601c      	str	r4, [r3, #0]
 8018b9a:	e6a4      	b.n	80188e6 <__gethex+0x110>
 8018b9c:	4299      	cmp	r1, r3
 8018b9e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018ba2:	d8d8      	bhi.n	8018b56 <__gethex+0x380>
 8018ba4:	68ab      	ldr	r3, [r5, #8]
 8018ba6:	4599      	cmp	r9, r3
 8018ba8:	db12      	blt.n	8018bd0 <__gethex+0x3fa>
 8018baa:	6869      	ldr	r1, [r5, #4]
 8018bac:	9802      	ldr	r0, [sp, #8]
 8018bae:	3101      	adds	r1, #1
 8018bb0:	f000 f92f 	bl	8018e12 <_Balloc>
 8018bb4:	692a      	ldr	r2, [r5, #16]
 8018bb6:	3202      	adds	r2, #2
 8018bb8:	f105 010c 	add.w	r1, r5, #12
 8018bbc:	4683      	mov	fp, r0
 8018bbe:	0092      	lsls	r2, r2, #2
 8018bc0:	300c      	adds	r0, #12
 8018bc2:	f000 f91b 	bl	8018dfc <memcpy>
 8018bc6:	4629      	mov	r1, r5
 8018bc8:	9802      	ldr	r0, [sp, #8]
 8018bca:	f000 f956 	bl	8018e7a <_Bfree>
 8018bce:	465d      	mov	r5, fp
 8018bd0:	692b      	ldr	r3, [r5, #16]
 8018bd2:	1c5a      	adds	r2, r3, #1
 8018bd4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018bd8:	612a      	str	r2, [r5, #16]
 8018bda:	2201      	movs	r2, #1
 8018bdc:	615a      	str	r2, [r3, #20]
 8018bde:	e7c2      	b.n	8018b66 <__gethex+0x390>
 8018be0:	692a      	ldr	r2, [r5, #16]
 8018be2:	454a      	cmp	r2, r9
 8018be4:	dd0b      	ble.n	8018bfe <__gethex+0x428>
 8018be6:	2101      	movs	r1, #1
 8018be8:	4628      	mov	r0, r5
 8018bea:	f7ff fda5 	bl	8018738 <rshift>
 8018bee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018bf2:	3401      	adds	r4, #1
 8018bf4:	42a3      	cmp	r3, r4
 8018bf6:	f6ff aed9 	blt.w	80189ac <__gethex+0x1d6>
 8018bfa:	2701      	movs	r7, #1
 8018bfc:	e7c7      	b.n	8018b8e <__gethex+0x3b8>
 8018bfe:	f016 061f 	ands.w	r6, r6, #31
 8018c02:	d0fa      	beq.n	8018bfa <__gethex+0x424>
 8018c04:	449a      	add	sl, r3
 8018c06:	f1c6 0620 	rsb	r6, r6, #32
 8018c0a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018c0e:	f000 f9c4 	bl	8018f9a <__hi0bits>
 8018c12:	42b0      	cmp	r0, r6
 8018c14:	dbe7      	blt.n	8018be6 <__gethex+0x410>
 8018c16:	e7f0      	b.n	8018bfa <__gethex+0x424>

08018c18 <L_shift>:
 8018c18:	f1c2 0208 	rsb	r2, r2, #8
 8018c1c:	0092      	lsls	r2, r2, #2
 8018c1e:	b570      	push	{r4, r5, r6, lr}
 8018c20:	f1c2 0620 	rsb	r6, r2, #32
 8018c24:	6843      	ldr	r3, [r0, #4]
 8018c26:	6804      	ldr	r4, [r0, #0]
 8018c28:	fa03 f506 	lsl.w	r5, r3, r6
 8018c2c:	432c      	orrs	r4, r5
 8018c2e:	40d3      	lsrs	r3, r2
 8018c30:	6004      	str	r4, [r0, #0]
 8018c32:	f840 3f04 	str.w	r3, [r0, #4]!
 8018c36:	4288      	cmp	r0, r1
 8018c38:	d3f4      	bcc.n	8018c24 <L_shift+0xc>
 8018c3a:	bd70      	pop	{r4, r5, r6, pc}

08018c3c <__match>:
 8018c3c:	b530      	push	{r4, r5, lr}
 8018c3e:	6803      	ldr	r3, [r0, #0]
 8018c40:	3301      	adds	r3, #1
 8018c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c46:	b914      	cbnz	r4, 8018c4e <__match+0x12>
 8018c48:	6003      	str	r3, [r0, #0]
 8018c4a:	2001      	movs	r0, #1
 8018c4c:	bd30      	pop	{r4, r5, pc}
 8018c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018c56:	2d19      	cmp	r5, #25
 8018c58:	bf98      	it	ls
 8018c5a:	3220      	addls	r2, #32
 8018c5c:	42a2      	cmp	r2, r4
 8018c5e:	d0f0      	beq.n	8018c42 <__match+0x6>
 8018c60:	2000      	movs	r0, #0
 8018c62:	e7f3      	b.n	8018c4c <__match+0x10>

08018c64 <__hexnan>:
 8018c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c68:	680b      	ldr	r3, [r1, #0]
 8018c6a:	6801      	ldr	r1, [r0, #0]
 8018c6c:	115f      	asrs	r7, r3, #5
 8018c6e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018c72:	f013 031f 	ands.w	r3, r3, #31
 8018c76:	b087      	sub	sp, #28
 8018c78:	bf18      	it	ne
 8018c7a:	3704      	addne	r7, #4
 8018c7c:	2500      	movs	r5, #0
 8018c7e:	1f3e      	subs	r6, r7, #4
 8018c80:	4682      	mov	sl, r0
 8018c82:	4690      	mov	r8, r2
 8018c84:	9301      	str	r3, [sp, #4]
 8018c86:	f847 5c04 	str.w	r5, [r7, #-4]
 8018c8a:	46b1      	mov	r9, r6
 8018c8c:	4634      	mov	r4, r6
 8018c8e:	9502      	str	r5, [sp, #8]
 8018c90:	46ab      	mov	fp, r5
 8018c92:	784a      	ldrb	r2, [r1, #1]
 8018c94:	1c4b      	adds	r3, r1, #1
 8018c96:	9303      	str	r3, [sp, #12]
 8018c98:	b342      	cbz	r2, 8018cec <__hexnan+0x88>
 8018c9a:	4610      	mov	r0, r2
 8018c9c:	9105      	str	r1, [sp, #20]
 8018c9e:	9204      	str	r2, [sp, #16]
 8018ca0:	f7ff fd84 	bl	80187ac <__hexdig_fun>
 8018ca4:	2800      	cmp	r0, #0
 8018ca6:	d143      	bne.n	8018d30 <__hexnan+0xcc>
 8018ca8:	9a04      	ldr	r2, [sp, #16]
 8018caa:	9905      	ldr	r1, [sp, #20]
 8018cac:	2a20      	cmp	r2, #32
 8018cae:	d818      	bhi.n	8018ce2 <__hexnan+0x7e>
 8018cb0:	9b02      	ldr	r3, [sp, #8]
 8018cb2:	459b      	cmp	fp, r3
 8018cb4:	dd13      	ble.n	8018cde <__hexnan+0x7a>
 8018cb6:	454c      	cmp	r4, r9
 8018cb8:	d206      	bcs.n	8018cc8 <__hexnan+0x64>
 8018cba:	2d07      	cmp	r5, #7
 8018cbc:	dc04      	bgt.n	8018cc8 <__hexnan+0x64>
 8018cbe:	462a      	mov	r2, r5
 8018cc0:	4649      	mov	r1, r9
 8018cc2:	4620      	mov	r0, r4
 8018cc4:	f7ff ffa8 	bl	8018c18 <L_shift>
 8018cc8:	4544      	cmp	r4, r8
 8018cca:	d944      	bls.n	8018d56 <__hexnan+0xf2>
 8018ccc:	2300      	movs	r3, #0
 8018cce:	f1a4 0904 	sub.w	r9, r4, #4
 8018cd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8018cd6:	f8cd b008 	str.w	fp, [sp, #8]
 8018cda:	464c      	mov	r4, r9
 8018cdc:	461d      	mov	r5, r3
 8018cde:	9903      	ldr	r1, [sp, #12]
 8018ce0:	e7d7      	b.n	8018c92 <__hexnan+0x2e>
 8018ce2:	2a29      	cmp	r2, #41	; 0x29
 8018ce4:	d14a      	bne.n	8018d7c <__hexnan+0x118>
 8018ce6:	3102      	adds	r1, #2
 8018ce8:	f8ca 1000 	str.w	r1, [sl]
 8018cec:	f1bb 0f00 	cmp.w	fp, #0
 8018cf0:	d044      	beq.n	8018d7c <__hexnan+0x118>
 8018cf2:	454c      	cmp	r4, r9
 8018cf4:	d206      	bcs.n	8018d04 <__hexnan+0xa0>
 8018cf6:	2d07      	cmp	r5, #7
 8018cf8:	dc04      	bgt.n	8018d04 <__hexnan+0xa0>
 8018cfa:	462a      	mov	r2, r5
 8018cfc:	4649      	mov	r1, r9
 8018cfe:	4620      	mov	r0, r4
 8018d00:	f7ff ff8a 	bl	8018c18 <L_shift>
 8018d04:	4544      	cmp	r4, r8
 8018d06:	d928      	bls.n	8018d5a <__hexnan+0xf6>
 8018d08:	4643      	mov	r3, r8
 8018d0a:	f854 2b04 	ldr.w	r2, [r4], #4
 8018d0e:	f843 2b04 	str.w	r2, [r3], #4
 8018d12:	42a6      	cmp	r6, r4
 8018d14:	d2f9      	bcs.n	8018d0a <__hexnan+0xa6>
 8018d16:	2200      	movs	r2, #0
 8018d18:	f843 2b04 	str.w	r2, [r3], #4
 8018d1c:	429e      	cmp	r6, r3
 8018d1e:	d2fb      	bcs.n	8018d18 <__hexnan+0xb4>
 8018d20:	6833      	ldr	r3, [r6, #0]
 8018d22:	b91b      	cbnz	r3, 8018d2c <__hexnan+0xc8>
 8018d24:	4546      	cmp	r6, r8
 8018d26:	d127      	bne.n	8018d78 <__hexnan+0x114>
 8018d28:	2301      	movs	r3, #1
 8018d2a:	6033      	str	r3, [r6, #0]
 8018d2c:	2005      	movs	r0, #5
 8018d2e:	e026      	b.n	8018d7e <__hexnan+0x11a>
 8018d30:	3501      	adds	r5, #1
 8018d32:	2d08      	cmp	r5, #8
 8018d34:	f10b 0b01 	add.w	fp, fp, #1
 8018d38:	dd06      	ble.n	8018d48 <__hexnan+0xe4>
 8018d3a:	4544      	cmp	r4, r8
 8018d3c:	d9cf      	bls.n	8018cde <__hexnan+0x7a>
 8018d3e:	2300      	movs	r3, #0
 8018d40:	f844 3c04 	str.w	r3, [r4, #-4]
 8018d44:	2501      	movs	r5, #1
 8018d46:	3c04      	subs	r4, #4
 8018d48:	6822      	ldr	r2, [r4, #0]
 8018d4a:	f000 000f 	and.w	r0, r0, #15
 8018d4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018d52:	6020      	str	r0, [r4, #0]
 8018d54:	e7c3      	b.n	8018cde <__hexnan+0x7a>
 8018d56:	2508      	movs	r5, #8
 8018d58:	e7c1      	b.n	8018cde <__hexnan+0x7a>
 8018d5a:	9b01      	ldr	r3, [sp, #4]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d0df      	beq.n	8018d20 <__hexnan+0xbc>
 8018d60:	f04f 32ff 	mov.w	r2, #4294967295
 8018d64:	f1c3 0320 	rsb	r3, r3, #32
 8018d68:	fa22 f303 	lsr.w	r3, r2, r3
 8018d6c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018d70:	401a      	ands	r2, r3
 8018d72:	f847 2c04 	str.w	r2, [r7, #-4]
 8018d76:	e7d3      	b.n	8018d20 <__hexnan+0xbc>
 8018d78:	3e04      	subs	r6, #4
 8018d7a:	e7d1      	b.n	8018d20 <__hexnan+0xbc>
 8018d7c:	2004      	movs	r0, #4
 8018d7e:	b007      	add	sp, #28
 8018d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d84 <__locale_ctype_ptr_l>:
 8018d84:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018d88:	4770      	bx	lr
	...

08018d8c <__locale_ctype_ptr>:
 8018d8c:	4b04      	ldr	r3, [pc, #16]	; (8018da0 <__locale_ctype_ptr+0x14>)
 8018d8e:	4a05      	ldr	r2, [pc, #20]	; (8018da4 <__locale_ctype_ptr+0x18>)
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	6a1b      	ldr	r3, [r3, #32]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	bf08      	it	eq
 8018d98:	4613      	moveq	r3, r2
 8018d9a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018d9e:	4770      	bx	lr
 8018da0:	2000000c 	.word	0x2000000c
 8018da4:	20000070 	.word	0x20000070

08018da8 <__localeconv_l>:
 8018da8:	30f0      	adds	r0, #240	; 0xf0
 8018daa:	4770      	bx	lr

08018dac <_localeconv_r>:
 8018dac:	4b04      	ldr	r3, [pc, #16]	; (8018dc0 <_localeconv_r+0x14>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	6a18      	ldr	r0, [r3, #32]
 8018db2:	4b04      	ldr	r3, [pc, #16]	; (8018dc4 <_localeconv_r+0x18>)
 8018db4:	2800      	cmp	r0, #0
 8018db6:	bf08      	it	eq
 8018db8:	4618      	moveq	r0, r3
 8018dba:	30f0      	adds	r0, #240	; 0xf0
 8018dbc:	4770      	bx	lr
 8018dbe:	bf00      	nop
 8018dc0:	2000000c 	.word	0x2000000c
 8018dc4:	20000070 	.word	0x20000070

08018dc8 <malloc>:
 8018dc8:	4b02      	ldr	r3, [pc, #8]	; (8018dd4 <malloc+0xc>)
 8018dca:	4601      	mov	r1, r0
 8018dcc:	6818      	ldr	r0, [r3, #0]
 8018dce:	f000 bc7b 	b.w	80196c8 <_malloc_r>
 8018dd2:	bf00      	nop
 8018dd4:	2000000c 	.word	0x2000000c

08018dd8 <__ascii_mbtowc>:
 8018dd8:	b082      	sub	sp, #8
 8018dda:	b901      	cbnz	r1, 8018dde <__ascii_mbtowc+0x6>
 8018ddc:	a901      	add	r1, sp, #4
 8018dde:	b142      	cbz	r2, 8018df2 <__ascii_mbtowc+0x1a>
 8018de0:	b14b      	cbz	r3, 8018df6 <__ascii_mbtowc+0x1e>
 8018de2:	7813      	ldrb	r3, [r2, #0]
 8018de4:	600b      	str	r3, [r1, #0]
 8018de6:	7812      	ldrb	r2, [r2, #0]
 8018de8:	1c10      	adds	r0, r2, #0
 8018dea:	bf18      	it	ne
 8018dec:	2001      	movne	r0, #1
 8018dee:	b002      	add	sp, #8
 8018df0:	4770      	bx	lr
 8018df2:	4610      	mov	r0, r2
 8018df4:	e7fb      	b.n	8018dee <__ascii_mbtowc+0x16>
 8018df6:	f06f 0001 	mvn.w	r0, #1
 8018dfa:	e7f8      	b.n	8018dee <__ascii_mbtowc+0x16>

08018dfc <memcpy>:
 8018dfc:	b510      	push	{r4, lr}
 8018dfe:	1e43      	subs	r3, r0, #1
 8018e00:	440a      	add	r2, r1
 8018e02:	4291      	cmp	r1, r2
 8018e04:	d100      	bne.n	8018e08 <memcpy+0xc>
 8018e06:	bd10      	pop	{r4, pc}
 8018e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018e10:	e7f7      	b.n	8018e02 <memcpy+0x6>

08018e12 <_Balloc>:
 8018e12:	b570      	push	{r4, r5, r6, lr}
 8018e14:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018e16:	4604      	mov	r4, r0
 8018e18:	460e      	mov	r6, r1
 8018e1a:	b93d      	cbnz	r5, 8018e2c <_Balloc+0x1a>
 8018e1c:	2010      	movs	r0, #16
 8018e1e:	f7ff ffd3 	bl	8018dc8 <malloc>
 8018e22:	6260      	str	r0, [r4, #36]	; 0x24
 8018e24:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018e28:	6005      	str	r5, [r0, #0]
 8018e2a:	60c5      	str	r5, [r0, #12]
 8018e2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018e2e:	68eb      	ldr	r3, [r5, #12]
 8018e30:	b183      	cbz	r3, 8018e54 <_Balloc+0x42>
 8018e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e34:	68db      	ldr	r3, [r3, #12]
 8018e36:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018e3a:	b9b8      	cbnz	r0, 8018e6c <_Balloc+0x5a>
 8018e3c:	2101      	movs	r1, #1
 8018e3e:	fa01 f506 	lsl.w	r5, r1, r6
 8018e42:	1d6a      	adds	r2, r5, #5
 8018e44:	0092      	lsls	r2, r2, #2
 8018e46:	4620      	mov	r0, r4
 8018e48:	f000 fbe1 	bl	801960e <_calloc_r>
 8018e4c:	b160      	cbz	r0, 8018e68 <_Balloc+0x56>
 8018e4e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018e52:	e00e      	b.n	8018e72 <_Balloc+0x60>
 8018e54:	2221      	movs	r2, #33	; 0x21
 8018e56:	2104      	movs	r1, #4
 8018e58:	4620      	mov	r0, r4
 8018e5a:	f000 fbd8 	bl	801960e <_calloc_r>
 8018e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e60:	60e8      	str	r0, [r5, #12]
 8018e62:	68db      	ldr	r3, [r3, #12]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d1e4      	bne.n	8018e32 <_Balloc+0x20>
 8018e68:	2000      	movs	r0, #0
 8018e6a:	bd70      	pop	{r4, r5, r6, pc}
 8018e6c:	6802      	ldr	r2, [r0, #0]
 8018e6e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018e72:	2300      	movs	r3, #0
 8018e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018e78:	e7f7      	b.n	8018e6a <_Balloc+0x58>

08018e7a <_Bfree>:
 8018e7a:	b570      	push	{r4, r5, r6, lr}
 8018e7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018e7e:	4606      	mov	r6, r0
 8018e80:	460d      	mov	r5, r1
 8018e82:	b93c      	cbnz	r4, 8018e94 <_Bfree+0x1a>
 8018e84:	2010      	movs	r0, #16
 8018e86:	f7ff ff9f 	bl	8018dc8 <malloc>
 8018e8a:	6270      	str	r0, [r6, #36]	; 0x24
 8018e8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018e90:	6004      	str	r4, [r0, #0]
 8018e92:	60c4      	str	r4, [r0, #12]
 8018e94:	b13d      	cbz	r5, 8018ea6 <_Bfree+0x2c>
 8018e96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018e98:	686a      	ldr	r2, [r5, #4]
 8018e9a:	68db      	ldr	r3, [r3, #12]
 8018e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ea0:	6029      	str	r1, [r5, #0]
 8018ea2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018ea6:	bd70      	pop	{r4, r5, r6, pc}

08018ea8 <__multadd>:
 8018ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018eac:	690d      	ldr	r5, [r1, #16]
 8018eae:	461f      	mov	r7, r3
 8018eb0:	4606      	mov	r6, r0
 8018eb2:	460c      	mov	r4, r1
 8018eb4:	f101 0c14 	add.w	ip, r1, #20
 8018eb8:	2300      	movs	r3, #0
 8018eba:	f8dc 0000 	ldr.w	r0, [ip]
 8018ebe:	b281      	uxth	r1, r0
 8018ec0:	fb02 7101 	mla	r1, r2, r1, r7
 8018ec4:	0c0f      	lsrs	r7, r1, #16
 8018ec6:	0c00      	lsrs	r0, r0, #16
 8018ec8:	fb02 7000 	mla	r0, r2, r0, r7
 8018ecc:	b289      	uxth	r1, r1
 8018ece:	3301      	adds	r3, #1
 8018ed0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018ed4:	429d      	cmp	r5, r3
 8018ed6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018eda:	f84c 1b04 	str.w	r1, [ip], #4
 8018ede:	dcec      	bgt.n	8018eba <__multadd+0x12>
 8018ee0:	b1d7      	cbz	r7, 8018f18 <__multadd+0x70>
 8018ee2:	68a3      	ldr	r3, [r4, #8]
 8018ee4:	42ab      	cmp	r3, r5
 8018ee6:	dc12      	bgt.n	8018f0e <__multadd+0x66>
 8018ee8:	6861      	ldr	r1, [r4, #4]
 8018eea:	4630      	mov	r0, r6
 8018eec:	3101      	adds	r1, #1
 8018eee:	f7ff ff90 	bl	8018e12 <_Balloc>
 8018ef2:	6922      	ldr	r2, [r4, #16]
 8018ef4:	3202      	adds	r2, #2
 8018ef6:	f104 010c 	add.w	r1, r4, #12
 8018efa:	4680      	mov	r8, r0
 8018efc:	0092      	lsls	r2, r2, #2
 8018efe:	300c      	adds	r0, #12
 8018f00:	f7ff ff7c 	bl	8018dfc <memcpy>
 8018f04:	4621      	mov	r1, r4
 8018f06:	4630      	mov	r0, r6
 8018f08:	f7ff ffb7 	bl	8018e7a <_Bfree>
 8018f0c:	4644      	mov	r4, r8
 8018f0e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018f12:	3501      	adds	r5, #1
 8018f14:	615f      	str	r7, [r3, #20]
 8018f16:	6125      	str	r5, [r4, #16]
 8018f18:	4620      	mov	r0, r4
 8018f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f1e <__s2b>:
 8018f1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f22:	460c      	mov	r4, r1
 8018f24:	4615      	mov	r5, r2
 8018f26:	461f      	mov	r7, r3
 8018f28:	2209      	movs	r2, #9
 8018f2a:	3308      	adds	r3, #8
 8018f2c:	4606      	mov	r6, r0
 8018f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8018f32:	2100      	movs	r1, #0
 8018f34:	2201      	movs	r2, #1
 8018f36:	429a      	cmp	r2, r3
 8018f38:	db20      	blt.n	8018f7c <__s2b+0x5e>
 8018f3a:	4630      	mov	r0, r6
 8018f3c:	f7ff ff69 	bl	8018e12 <_Balloc>
 8018f40:	9b08      	ldr	r3, [sp, #32]
 8018f42:	6143      	str	r3, [r0, #20]
 8018f44:	2d09      	cmp	r5, #9
 8018f46:	f04f 0301 	mov.w	r3, #1
 8018f4a:	6103      	str	r3, [r0, #16]
 8018f4c:	dd19      	ble.n	8018f82 <__s2b+0x64>
 8018f4e:	f104 0809 	add.w	r8, r4, #9
 8018f52:	46c1      	mov	r9, r8
 8018f54:	442c      	add	r4, r5
 8018f56:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018f5a:	4601      	mov	r1, r0
 8018f5c:	3b30      	subs	r3, #48	; 0x30
 8018f5e:	220a      	movs	r2, #10
 8018f60:	4630      	mov	r0, r6
 8018f62:	f7ff ffa1 	bl	8018ea8 <__multadd>
 8018f66:	45a1      	cmp	r9, r4
 8018f68:	d1f5      	bne.n	8018f56 <__s2b+0x38>
 8018f6a:	eb08 0405 	add.w	r4, r8, r5
 8018f6e:	3c08      	subs	r4, #8
 8018f70:	1b2d      	subs	r5, r5, r4
 8018f72:	1963      	adds	r3, r4, r5
 8018f74:	42bb      	cmp	r3, r7
 8018f76:	db07      	blt.n	8018f88 <__s2b+0x6a>
 8018f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f7c:	0052      	lsls	r2, r2, #1
 8018f7e:	3101      	adds	r1, #1
 8018f80:	e7d9      	b.n	8018f36 <__s2b+0x18>
 8018f82:	340a      	adds	r4, #10
 8018f84:	2509      	movs	r5, #9
 8018f86:	e7f3      	b.n	8018f70 <__s2b+0x52>
 8018f88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018f8c:	4601      	mov	r1, r0
 8018f8e:	3b30      	subs	r3, #48	; 0x30
 8018f90:	220a      	movs	r2, #10
 8018f92:	4630      	mov	r0, r6
 8018f94:	f7ff ff88 	bl	8018ea8 <__multadd>
 8018f98:	e7eb      	b.n	8018f72 <__s2b+0x54>

08018f9a <__hi0bits>:
 8018f9a:	0c02      	lsrs	r2, r0, #16
 8018f9c:	0412      	lsls	r2, r2, #16
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	b9b2      	cbnz	r2, 8018fd0 <__hi0bits+0x36>
 8018fa2:	0403      	lsls	r3, r0, #16
 8018fa4:	2010      	movs	r0, #16
 8018fa6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018faa:	bf04      	itt	eq
 8018fac:	021b      	lsleq	r3, r3, #8
 8018fae:	3008      	addeq	r0, #8
 8018fb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018fb4:	bf04      	itt	eq
 8018fb6:	011b      	lsleq	r3, r3, #4
 8018fb8:	3004      	addeq	r0, #4
 8018fba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018fbe:	bf04      	itt	eq
 8018fc0:	009b      	lsleq	r3, r3, #2
 8018fc2:	3002      	addeq	r0, #2
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	db06      	blt.n	8018fd6 <__hi0bits+0x3c>
 8018fc8:	005b      	lsls	r3, r3, #1
 8018fca:	d503      	bpl.n	8018fd4 <__hi0bits+0x3a>
 8018fcc:	3001      	adds	r0, #1
 8018fce:	4770      	bx	lr
 8018fd0:	2000      	movs	r0, #0
 8018fd2:	e7e8      	b.n	8018fa6 <__hi0bits+0xc>
 8018fd4:	2020      	movs	r0, #32
 8018fd6:	4770      	bx	lr

08018fd8 <__lo0bits>:
 8018fd8:	6803      	ldr	r3, [r0, #0]
 8018fda:	f013 0207 	ands.w	r2, r3, #7
 8018fde:	4601      	mov	r1, r0
 8018fe0:	d00b      	beq.n	8018ffa <__lo0bits+0x22>
 8018fe2:	07da      	lsls	r2, r3, #31
 8018fe4:	d423      	bmi.n	801902e <__lo0bits+0x56>
 8018fe6:	0798      	lsls	r0, r3, #30
 8018fe8:	bf49      	itett	mi
 8018fea:	085b      	lsrmi	r3, r3, #1
 8018fec:	089b      	lsrpl	r3, r3, #2
 8018fee:	2001      	movmi	r0, #1
 8018ff0:	600b      	strmi	r3, [r1, #0]
 8018ff2:	bf5c      	itt	pl
 8018ff4:	600b      	strpl	r3, [r1, #0]
 8018ff6:	2002      	movpl	r0, #2
 8018ff8:	4770      	bx	lr
 8018ffa:	b298      	uxth	r0, r3
 8018ffc:	b9a8      	cbnz	r0, 801902a <__lo0bits+0x52>
 8018ffe:	0c1b      	lsrs	r3, r3, #16
 8019000:	2010      	movs	r0, #16
 8019002:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019006:	bf04      	itt	eq
 8019008:	0a1b      	lsreq	r3, r3, #8
 801900a:	3008      	addeq	r0, #8
 801900c:	071a      	lsls	r2, r3, #28
 801900e:	bf04      	itt	eq
 8019010:	091b      	lsreq	r3, r3, #4
 8019012:	3004      	addeq	r0, #4
 8019014:	079a      	lsls	r2, r3, #30
 8019016:	bf04      	itt	eq
 8019018:	089b      	lsreq	r3, r3, #2
 801901a:	3002      	addeq	r0, #2
 801901c:	07da      	lsls	r2, r3, #31
 801901e:	d402      	bmi.n	8019026 <__lo0bits+0x4e>
 8019020:	085b      	lsrs	r3, r3, #1
 8019022:	d006      	beq.n	8019032 <__lo0bits+0x5a>
 8019024:	3001      	adds	r0, #1
 8019026:	600b      	str	r3, [r1, #0]
 8019028:	4770      	bx	lr
 801902a:	4610      	mov	r0, r2
 801902c:	e7e9      	b.n	8019002 <__lo0bits+0x2a>
 801902e:	2000      	movs	r0, #0
 8019030:	4770      	bx	lr
 8019032:	2020      	movs	r0, #32
 8019034:	4770      	bx	lr

08019036 <__i2b>:
 8019036:	b510      	push	{r4, lr}
 8019038:	460c      	mov	r4, r1
 801903a:	2101      	movs	r1, #1
 801903c:	f7ff fee9 	bl	8018e12 <_Balloc>
 8019040:	2201      	movs	r2, #1
 8019042:	6144      	str	r4, [r0, #20]
 8019044:	6102      	str	r2, [r0, #16]
 8019046:	bd10      	pop	{r4, pc}

08019048 <__multiply>:
 8019048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801904c:	4614      	mov	r4, r2
 801904e:	690a      	ldr	r2, [r1, #16]
 8019050:	6923      	ldr	r3, [r4, #16]
 8019052:	429a      	cmp	r2, r3
 8019054:	bfb8      	it	lt
 8019056:	460b      	movlt	r3, r1
 8019058:	4688      	mov	r8, r1
 801905a:	bfbc      	itt	lt
 801905c:	46a0      	movlt	r8, r4
 801905e:	461c      	movlt	r4, r3
 8019060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019064:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019068:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801906c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019070:	eb07 0609 	add.w	r6, r7, r9
 8019074:	42b3      	cmp	r3, r6
 8019076:	bfb8      	it	lt
 8019078:	3101      	addlt	r1, #1
 801907a:	f7ff feca 	bl	8018e12 <_Balloc>
 801907e:	f100 0514 	add.w	r5, r0, #20
 8019082:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8019086:	462b      	mov	r3, r5
 8019088:	2200      	movs	r2, #0
 801908a:	4573      	cmp	r3, lr
 801908c:	d316      	bcc.n	80190bc <__multiply+0x74>
 801908e:	f104 0214 	add.w	r2, r4, #20
 8019092:	f108 0114 	add.w	r1, r8, #20
 8019096:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801909a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801909e:	9300      	str	r3, [sp, #0]
 80190a0:	9b00      	ldr	r3, [sp, #0]
 80190a2:	9201      	str	r2, [sp, #4]
 80190a4:	4293      	cmp	r3, r2
 80190a6:	d80c      	bhi.n	80190c2 <__multiply+0x7a>
 80190a8:	2e00      	cmp	r6, #0
 80190aa:	dd03      	ble.n	80190b4 <__multiply+0x6c>
 80190ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d05d      	beq.n	8019170 <__multiply+0x128>
 80190b4:	6106      	str	r6, [r0, #16]
 80190b6:	b003      	add	sp, #12
 80190b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190bc:	f843 2b04 	str.w	r2, [r3], #4
 80190c0:	e7e3      	b.n	801908a <__multiply+0x42>
 80190c2:	f8b2 b000 	ldrh.w	fp, [r2]
 80190c6:	f1bb 0f00 	cmp.w	fp, #0
 80190ca:	d023      	beq.n	8019114 <__multiply+0xcc>
 80190cc:	4689      	mov	r9, r1
 80190ce:	46ac      	mov	ip, r5
 80190d0:	f04f 0800 	mov.w	r8, #0
 80190d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80190d8:	f8dc a000 	ldr.w	sl, [ip]
 80190dc:	b2a3      	uxth	r3, r4
 80190de:	fa1f fa8a 	uxth.w	sl, sl
 80190e2:	fb0b a303 	mla	r3, fp, r3, sl
 80190e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80190ea:	f8dc 4000 	ldr.w	r4, [ip]
 80190ee:	4443      	add	r3, r8
 80190f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80190f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80190f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80190fc:	46e2      	mov	sl, ip
 80190fe:	b29b      	uxth	r3, r3
 8019100:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019104:	454f      	cmp	r7, r9
 8019106:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801910a:	f84a 3b04 	str.w	r3, [sl], #4
 801910e:	d82b      	bhi.n	8019168 <__multiply+0x120>
 8019110:	f8cc 8004 	str.w	r8, [ip, #4]
 8019114:	9b01      	ldr	r3, [sp, #4]
 8019116:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801911a:	3204      	adds	r2, #4
 801911c:	f1ba 0f00 	cmp.w	sl, #0
 8019120:	d020      	beq.n	8019164 <__multiply+0x11c>
 8019122:	682b      	ldr	r3, [r5, #0]
 8019124:	4689      	mov	r9, r1
 8019126:	46a8      	mov	r8, r5
 8019128:	f04f 0b00 	mov.w	fp, #0
 801912c:	f8b9 c000 	ldrh.w	ip, [r9]
 8019130:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8019134:	fb0a 440c 	mla	r4, sl, ip, r4
 8019138:	445c      	add	r4, fp
 801913a:	46c4      	mov	ip, r8
 801913c:	b29b      	uxth	r3, r3
 801913e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8019142:	f84c 3b04 	str.w	r3, [ip], #4
 8019146:	f859 3b04 	ldr.w	r3, [r9], #4
 801914a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801914e:	0c1b      	lsrs	r3, r3, #16
 8019150:	fb0a b303 	mla	r3, sl, r3, fp
 8019154:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8019158:	454f      	cmp	r7, r9
 801915a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801915e:	d805      	bhi.n	801916c <__multiply+0x124>
 8019160:	f8c8 3004 	str.w	r3, [r8, #4]
 8019164:	3504      	adds	r5, #4
 8019166:	e79b      	b.n	80190a0 <__multiply+0x58>
 8019168:	46d4      	mov	ip, sl
 801916a:	e7b3      	b.n	80190d4 <__multiply+0x8c>
 801916c:	46e0      	mov	r8, ip
 801916e:	e7dd      	b.n	801912c <__multiply+0xe4>
 8019170:	3e01      	subs	r6, #1
 8019172:	e799      	b.n	80190a8 <__multiply+0x60>

08019174 <__pow5mult>:
 8019174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019178:	4615      	mov	r5, r2
 801917a:	f012 0203 	ands.w	r2, r2, #3
 801917e:	4606      	mov	r6, r0
 8019180:	460f      	mov	r7, r1
 8019182:	d007      	beq.n	8019194 <__pow5mult+0x20>
 8019184:	3a01      	subs	r2, #1
 8019186:	4c21      	ldr	r4, [pc, #132]	; (801920c <__pow5mult+0x98>)
 8019188:	2300      	movs	r3, #0
 801918a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801918e:	f7ff fe8b 	bl	8018ea8 <__multadd>
 8019192:	4607      	mov	r7, r0
 8019194:	10ad      	asrs	r5, r5, #2
 8019196:	d035      	beq.n	8019204 <__pow5mult+0x90>
 8019198:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801919a:	b93c      	cbnz	r4, 80191ac <__pow5mult+0x38>
 801919c:	2010      	movs	r0, #16
 801919e:	f7ff fe13 	bl	8018dc8 <malloc>
 80191a2:	6270      	str	r0, [r6, #36]	; 0x24
 80191a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80191a8:	6004      	str	r4, [r0, #0]
 80191aa:	60c4      	str	r4, [r0, #12]
 80191ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80191b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80191b4:	b94c      	cbnz	r4, 80191ca <__pow5mult+0x56>
 80191b6:	f240 2171 	movw	r1, #625	; 0x271
 80191ba:	4630      	mov	r0, r6
 80191bc:	f7ff ff3b 	bl	8019036 <__i2b>
 80191c0:	2300      	movs	r3, #0
 80191c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80191c6:	4604      	mov	r4, r0
 80191c8:	6003      	str	r3, [r0, #0]
 80191ca:	f04f 0800 	mov.w	r8, #0
 80191ce:	07eb      	lsls	r3, r5, #31
 80191d0:	d50a      	bpl.n	80191e8 <__pow5mult+0x74>
 80191d2:	4639      	mov	r1, r7
 80191d4:	4622      	mov	r2, r4
 80191d6:	4630      	mov	r0, r6
 80191d8:	f7ff ff36 	bl	8019048 <__multiply>
 80191dc:	4639      	mov	r1, r7
 80191de:	4681      	mov	r9, r0
 80191e0:	4630      	mov	r0, r6
 80191e2:	f7ff fe4a 	bl	8018e7a <_Bfree>
 80191e6:	464f      	mov	r7, r9
 80191e8:	106d      	asrs	r5, r5, #1
 80191ea:	d00b      	beq.n	8019204 <__pow5mult+0x90>
 80191ec:	6820      	ldr	r0, [r4, #0]
 80191ee:	b938      	cbnz	r0, 8019200 <__pow5mult+0x8c>
 80191f0:	4622      	mov	r2, r4
 80191f2:	4621      	mov	r1, r4
 80191f4:	4630      	mov	r0, r6
 80191f6:	f7ff ff27 	bl	8019048 <__multiply>
 80191fa:	6020      	str	r0, [r4, #0]
 80191fc:	f8c0 8000 	str.w	r8, [r0]
 8019200:	4604      	mov	r4, r0
 8019202:	e7e4      	b.n	80191ce <__pow5mult+0x5a>
 8019204:	4638      	mov	r0, r7
 8019206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801920a:	bf00      	nop
 801920c:	0801aab0 	.word	0x0801aab0

08019210 <__lshift>:
 8019210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019214:	460c      	mov	r4, r1
 8019216:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801921a:	6923      	ldr	r3, [r4, #16]
 801921c:	6849      	ldr	r1, [r1, #4]
 801921e:	eb0a 0903 	add.w	r9, sl, r3
 8019222:	68a3      	ldr	r3, [r4, #8]
 8019224:	4607      	mov	r7, r0
 8019226:	4616      	mov	r6, r2
 8019228:	f109 0501 	add.w	r5, r9, #1
 801922c:	42ab      	cmp	r3, r5
 801922e:	db32      	blt.n	8019296 <__lshift+0x86>
 8019230:	4638      	mov	r0, r7
 8019232:	f7ff fdee 	bl	8018e12 <_Balloc>
 8019236:	2300      	movs	r3, #0
 8019238:	4680      	mov	r8, r0
 801923a:	f100 0114 	add.w	r1, r0, #20
 801923e:	461a      	mov	r2, r3
 8019240:	4553      	cmp	r3, sl
 8019242:	db2b      	blt.n	801929c <__lshift+0x8c>
 8019244:	6920      	ldr	r0, [r4, #16]
 8019246:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801924a:	f104 0314 	add.w	r3, r4, #20
 801924e:	f016 021f 	ands.w	r2, r6, #31
 8019252:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019256:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801925a:	d025      	beq.n	80192a8 <__lshift+0x98>
 801925c:	f1c2 0e20 	rsb	lr, r2, #32
 8019260:	2000      	movs	r0, #0
 8019262:	681e      	ldr	r6, [r3, #0]
 8019264:	468a      	mov	sl, r1
 8019266:	4096      	lsls	r6, r2
 8019268:	4330      	orrs	r0, r6
 801926a:	f84a 0b04 	str.w	r0, [sl], #4
 801926e:	f853 0b04 	ldr.w	r0, [r3], #4
 8019272:	459c      	cmp	ip, r3
 8019274:	fa20 f00e 	lsr.w	r0, r0, lr
 8019278:	d814      	bhi.n	80192a4 <__lshift+0x94>
 801927a:	6048      	str	r0, [r1, #4]
 801927c:	b108      	cbz	r0, 8019282 <__lshift+0x72>
 801927e:	f109 0502 	add.w	r5, r9, #2
 8019282:	3d01      	subs	r5, #1
 8019284:	4638      	mov	r0, r7
 8019286:	f8c8 5010 	str.w	r5, [r8, #16]
 801928a:	4621      	mov	r1, r4
 801928c:	f7ff fdf5 	bl	8018e7a <_Bfree>
 8019290:	4640      	mov	r0, r8
 8019292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019296:	3101      	adds	r1, #1
 8019298:	005b      	lsls	r3, r3, #1
 801929a:	e7c7      	b.n	801922c <__lshift+0x1c>
 801929c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80192a0:	3301      	adds	r3, #1
 80192a2:	e7cd      	b.n	8019240 <__lshift+0x30>
 80192a4:	4651      	mov	r1, sl
 80192a6:	e7dc      	b.n	8019262 <__lshift+0x52>
 80192a8:	3904      	subs	r1, #4
 80192aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80192ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80192b2:	459c      	cmp	ip, r3
 80192b4:	d8f9      	bhi.n	80192aa <__lshift+0x9a>
 80192b6:	e7e4      	b.n	8019282 <__lshift+0x72>

080192b8 <__mcmp>:
 80192b8:	6903      	ldr	r3, [r0, #16]
 80192ba:	690a      	ldr	r2, [r1, #16]
 80192bc:	1a9b      	subs	r3, r3, r2
 80192be:	b530      	push	{r4, r5, lr}
 80192c0:	d10c      	bne.n	80192dc <__mcmp+0x24>
 80192c2:	0092      	lsls	r2, r2, #2
 80192c4:	3014      	adds	r0, #20
 80192c6:	3114      	adds	r1, #20
 80192c8:	1884      	adds	r4, r0, r2
 80192ca:	4411      	add	r1, r2
 80192cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80192d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80192d4:	4295      	cmp	r5, r2
 80192d6:	d003      	beq.n	80192e0 <__mcmp+0x28>
 80192d8:	d305      	bcc.n	80192e6 <__mcmp+0x2e>
 80192da:	2301      	movs	r3, #1
 80192dc:	4618      	mov	r0, r3
 80192de:	bd30      	pop	{r4, r5, pc}
 80192e0:	42a0      	cmp	r0, r4
 80192e2:	d3f3      	bcc.n	80192cc <__mcmp+0x14>
 80192e4:	e7fa      	b.n	80192dc <__mcmp+0x24>
 80192e6:	f04f 33ff 	mov.w	r3, #4294967295
 80192ea:	e7f7      	b.n	80192dc <__mcmp+0x24>

080192ec <__mdiff>:
 80192ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192f0:	460d      	mov	r5, r1
 80192f2:	4607      	mov	r7, r0
 80192f4:	4611      	mov	r1, r2
 80192f6:	4628      	mov	r0, r5
 80192f8:	4614      	mov	r4, r2
 80192fa:	f7ff ffdd 	bl	80192b8 <__mcmp>
 80192fe:	1e06      	subs	r6, r0, #0
 8019300:	d108      	bne.n	8019314 <__mdiff+0x28>
 8019302:	4631      	mov	r1, r6
 8019304:	4638      	mov	r0, r7
 8019306:	f7ff fd84 	bl	8018e12 <_Balloc>
 801930a:	2301      	movs	r3, #1
 801930c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8019310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019314:	bfa4      	itt	ge
 8019316:	4623      	movge	r3, r4
 8019318:	462c      	movge	r4, r5
 801931a:	4638      	mov	r0, r7
 801931c:	6861      	ldr	r1, [r4, #4]
 801931e:	bfa6      	itte	ge
 8019320:	461d      	movge	r5, r3
 8019322:	2600      	movge	r6, #0
 8019324:	2601      	movlt	r6, #1
 8019326:	f7ff fd74 	bl	8018e12 <_Balloc>
 801932a:	692b      	ldr	r3, [r5, #16]
 801932c:	60c6      	str	r6, [r0, #12]
 801932e:	6926      	ldr	r6, [r4, #16]
 8019330:	f105 0914 	add.w	r9, r5, #20
 8019334:	f104 0214 	add.w	r2, r4, #20
 8019338:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801933c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8019340:	f100 0514 	add.w	r5, r0, #20
 8019344:	f04f 0e00 	mov.w	lr, #0
 8019348:	f852 ab04 	ldr.w	sl, [r2], #4
 801934c:	f859 4b04 	ldr.w	r4, [r9], #4
 8019350:	fa1e f18a 	uxtah	r1, lr, sl
 8019354:	b2a3      	uxth	r3, r4
 8019356:	1ac9      	subs	r1, r1, r3
 8019358:	0c23      	lsrs	r3, r4, #16
 801935a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801935e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8019362:	b289      	uxth	r1, r1
 8019364:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8019368:	45c8      	cmp	r8, r9
 801936a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801936e:	4694      	mov	ip, r2
 8019370:	f845 3b04 	str.w	r3, [r5], #4
 8019374:	d8e8      	bhi.n	8019348 <__mdiff+0x5c>
 8019376:	45bc      	cmp	ip, r7
 8019378:	d304      	bcc.n	8019384 <__mdiff+0x98>
 801937a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801937e:	b183      	cbz	r3, 80193a2 <__mdiff+0xb6>
 8019380:	6106      	str	r6, [r0, #16]
 8019382:	e7c5      	b.n	8019310 <__mdiff+0x24>
 8019384:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019388:	fa1e f381 	uxtah	r3, lr, r1
 801938c:	141a      	asrs	r2, r3, #16
 801938e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019392:	b29b      	uxth	r3, r3
 8019394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019398:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801939c:	f845 3b04 	str.w	r3, [r5], #4
 80193a0:	e7e9      	b.n	8019376 <__mdiff+0x8a>
 80193a2:	3e01      	subs	r6, #1
 80193a4:	e7e9      	b.n	801937a <__mdiff+0x8e>
	...

080193a8 <__ulp>:
 80193a8:	4b12      	ldr	r3, [pc, #72]	; (80193f4 <__ulp+0x4c>)
 80193aa:	ee10 2a90 	vmov	r2, s1
 80193ae:	401a      	ands	r2, r3
 80193b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	dd04      	ble.n	80193c2 <__ulp+0x1a>
 80193b8:	2000      	movs	r0, #0
 80193ba:	4619      	mov	r1, r3
 80193bc:	ec41 0b10 	vmov	d0, r0, r1
 80193c0:	4770      	bx	lr
 80193c2:	425b      	negs	r3, r3
 80193c4:	151b      	asrs	r3, r3, #20
 80193c6:	2b13      	cmp	r3, #19
 80193c8:	f04f 0000 	mov.w	r0, #0
 80193cc:	f04f 0100 	mov.w	r1, #0
 80193d0:	dc04      	bgt.n	80193dc <__ulp+0x34>
 80193d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80193d6:	fa42 f103 	asr.w	r1, r2, r3
 80193da:	e7ef      	b.n	80193bc <__ulp+0x14>
 80193dc:	3b14      	subs	r3, #20
 80193de:	2b1e      	cmp	r3, #30
 80193e0:	f04f 0201 	mov.w	r2, #1
 80193e4:	bfda      	itte	le
 80193e6:	f1c3 031f 	rsble	r3, r3, #31
 80193ea:	fa02 f303 	lslle.w	r3, r2, r3
 80193ee:	4613      	movgt	r3, r2
 80193f0:	4618      	mov	r0, r3
 80193f2:	e7e3      	b.n	80193bc <__ulp+0x14>
 80193f4:	7ff00000 	.word	0x7ff00000

080193f8 <__b2d>:
 80193f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193fa:	6905      	ldr	r5, [r0, #16]
 80193fc:	f100 0714 	add.w	r7, r0, #20
 8019400:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019404:	1f2e      	subs	r6, r5, #4
 8019406:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801940a:	4620      	mov	r0, r4
 801940c:	f7ff fdc5 	bl	8018f9a <__hi0bits>
 8019410:	f1c0 0320 	rsb	r3, r0, #32
 8019414:	280a      	cmp	r0, #10
 8019416:	600b      	str	r3, [r1, #0]
 8019418:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019490 <__b2d+0x98>
 801941c:	dc14      	bgt.n	8019448 <__b2d+0x50>
 801941e:	f1c0 0e0b 	rsb	lr, r0, #11
 8019422:	fa24 f10e 	lsr.w	r1, r4, lr
 8019426:	42b7      	cmp	r7, r6
 8019428:	ea41 030c 	orr.w	r3, r1, ip
 801942c:	bf34      	ite	cc
 801942e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019432:	2100      	movcs	r1, #0
 8019434:	3015      	adds	r0, #21
 8019436:	fa04 f000 	lsl.w	r0, r4, r0
 801943a:	fa21 f10e 	lsr.w	r1, r1, lr
 801943e:	ea40 0201 	orr.w	r2, r0, r1
 8019442:	ec43 2b10 	vmov	d0, r2, r3
 8019446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019448:	42b7      	cmp	r7, r6
 801944a:	bf3a      	itte	cc
 801944c:	f1a5 0608 	subcc.w	r6, r5, #8
 8019450:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019454:	2100      	movcs	r1, #0
 8019456:	380b      	subs	r0, #11
 8019458:	d015      	beq.n	8019486 <__b2d+0x8e>
 801945a:	4084      	lsls	r4, r0
 801945c:	f1c0 0520 	rsb	r5, r0, #32
 8019460:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019464:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8019468:	42be      	cmp	r6, r7
 801946a:	fa21 fc05 	lsr.w	ip, r1, r5
 801946e:	ea44 030c 	orr.w	r3, r4, ip
 8019472:	bf8c      	ite	hi
 8019474:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019478:	2400      	movls	r4, #0
 801947a:	fa01 f000 	lsl.w	r0, r1, r0
 801947e:	40ec      	lsrs	r4, r5
 8019480:	ea40 0204 	orr.w	r2, r0, r4
 8019484:	e7dd      	b.n	8019442 <__b2d+0x4a>
 8019486:	ea44 030c 	orr.w	r3, r4, ip
 801948a:	460a      	mov	r2, r1
 801948c:	e7d9      	b.n	8019442 <__b2d+0x4a>
 801948e:	bf00      	nop
 8019490:	3ff00000 	.word	0x3ff00000

08019494 <__d2b>:
 8019494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019498:	460e      	mov	r6, r1
 801949a:	2101      	movs	r1, #1
 801949c:	ec59 8b10 	vmov	r8, r9, d0
 80194a0:	4615      	mov	r5, r2
 80194a2:	f7ff fcb6 	bl	8018e12 <_Balloc>
 80194a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80194aa:	4607      	mov	r7, r0
 80194ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80194b0:	bb34      	cbnz	r4, 8019500 <__d2b+0x6c>
 80194b2:	9301      	str	r3, [sp, #4]
 80194b4:	f1b8 0300 	subs.w	r3, r8, #0
 80194b8:	d027      	beq.n	801950a <__d2b+0x76>
 80194ba:	a802      	add	r0, sp, #8
 80194bc:	f840 3d08 	str.w	r3, [r0, #-8]!
 80194c0:	f7ff fd8a 	bl	8018fd8 <__lo0bits>
 80194c4:	9900      	ldr	r1, [sp, #0]
 80194c6:	b1f0      	cbz	r0, 8019506 <__d2b+0x72>
 80194c8:	9a01      	ldr	r2, [sp, #4]
 80194ca:	f1c0 0320 	rsb	r3, r0, #32
 80194ce:	fa02 f303 	lsl.w	r3, r2, r3
 80194d2:	430b      	orrs	r3, r1
 80194d4:	40c2      	lsrs	r2, r0
 80194d6:	617b      	str	r3, [r7, #20]
 80194d8:	9201      	str	r2, [sp, #4]
 80194da:	9b01      	ldr	r3, [sp, #4]
 80194dc:	61bb      	str	r3, [r7, #24]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	bf14      	ite	ne
 80194e2:	2102      	movne	r1, #2
 80194e4:	2101      	moveq	r1, #1
 80194e6:	6139      	str	r1, [r7, #16]
 80194e8:	b1c4      	cbz	r4, 801951c <__d2b+0x88>
 80194ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80194ee:	4404      	add	r4, r0
 80194f0:	6034      	str	r4, [r6, #0]
 80194f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80194f6:	6028      	str	r0, [r5, #0]
 80194f8:	4638      	mov	r0, r7
 80194fa:	b003      	add	sp, #12
 80194fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019504:	e7d5      	b.n	80194b2 <__d2b+0x1e>
 8019506:	6179      	str	r1, [r7, #20]
 8019508:	e7e7      	b.n	80194da <__d2b+0x46>
 801950a:	a801      	add	r0, sp, #4
 801950c:	f7ff fd64 	bl	8018fd8 <__lo0bits>
 8019510:	9b01      	ldr	r3, [sp, #4]
 8019512:	617b      	str	r3, [r7, #20]
 8019514:	2101      	movs	r1, #1
 8019516:	6139      	str	r1, [r7, #16]
 8019518:	3020      	adds	r0, #32
 801951a:	e7e5      	b.n	80194e8 <__d2b+0x54>
 801951c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019520:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019524:	6030      	str	r0, [r6, #0]
 8019526:	6918      	ldr	r0, [r3, #16]
 8019528:	f7ff fd37 	bl	8018f9a <__hi0bits>
 801952c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019530:	e7e1      	b.n	80194f6 <__d2b+0x62>

08019532 <__ratio>:
 8019532:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019536:	4688      	mov	r8, r1
 8019538:	4669      	mov	r1, sp
 801953a:	4681      	mov	r9, r0
 801953c:	f7ff ff5c 	bl	80193f8 <__b2d>
 8019540:	a901      	add	r1, sp, #4
 8019542:	4640      	mov	r0, r8
 8019544:	ec57 6b10 	vmov	r6, r7, d0
 8019548:	f7ff ff56 	bl	80193f8 <__b2d>
 801954c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019550:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019554:	eba3 0c02 	sub.w	ip, r3, r2
 8019558:	e9dd 3200 	ldrd	r3, r2, [sp]
 801955c:	1a9b      	subs	r3, r3, r2
 801955e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019562:	ec5b ab10 	vmov	sl, fp, d0
 8019566:	2b00      	cmp	r3, #0
 8019568:	bfce      	itee	gt
 801956a:	463a      	movgt	r2, r7
 801956c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019570:	465a      	movle	r2, fp
 8019572:	4659      	mov	r1, fp
 8019574:	463d      	mov	r5, r7
 8019576:	bfd4      	ite	le
 8019578:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801957c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8019580:	4630      	mov	r0, r6
 8019582:	ee10 2a10 	vmov	r2, s0
 8019586:	460b      	mov	r3, r1
 8019588:	4629      	mov	r1, r5
 801958a:	f7e7 f977 	bl	800087c <__aeabi_ddiv>
 801958e:	ec41 0b10 	vmov	d0, r0, r1
 8019592:	b003      	add	sp, #12
 8019594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019598 <__copybits>:
 8019598:	3901      	subs	r1, #1
 801959a:	b510      	push	{r4, lr}
 801959c:	1149      	asrs	r1, r1, #5
 801959e:	6914      	ldr	r4, [r2, #16]
 80195a0:	3101      	adds	r1, #1
 80195a2:	f102 0314 	add.w	r3, r2, #20
 80195a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80195aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80195ae:	42a3      	cmp	r3, r4
 80195b0:	4602      	mov	r2, r0
 80195b2:	d303      	bcc.n	80195bc <__copybits+0x24>
 80195b4:	2300      	movs	r3, #0
 80195b6:	428a      	cmp	r2, r1
 80195b8:	d305      	bcc.n	80195c6 <__copybits+0x2e>
 80195ba:	bd10      	pop	{r4, pc}
 80195bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80195c0:	f840 2b04 	str.w	r2, [r0], #4
 80195c4:	e7f3      	b.n	80195ae <__copybits+0x16>
 80195c6:	f842 3b04 	str.w	r3, [r2], #4
 80195ca:	e7f4      	b.n	80195b6 <__copybits+0x1e>

080195cc <__any_on>:
 80195cc:	f100 0214 	add.w	r2, r0, #20
 80195d0:	6900      	ldr	r0, [r0, #16]
 80195d2:	114b      	asrs	r3, r1, #5
 80195d4:	4298      	cmp	r0, r3
 80195d6:	b510      	push	{r4, lr}
 80195d8:	db11      	blt.n	80195fe <__any_on+0x32>
 80195da:	dd0a      	ble.n	80195f2 <__any_on+0x26>
 80195dc:	f011 011f 	ands.w	r1, r1, #31
 80195e0:	d007      	beq.n	80195f2 <__any_on+0x26>
 80195e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80195e6:	fa24 f001 	lsr.w	r0, r4, r1
 80195ea:	fa00 f101 	lsl.w	r1, r0, r1
 80195ee:	428c      	cmp	r4, r1
 80195f0:	d10b      	bne.n	801960a <__any_on+0x3e>
 80195f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80195f6:	4293      	cmp	r3, r2
 80195f8:	d803      	bhi.n	8019602 <__any_on+0x36>
 80195fa:	2000      	movs	r0, #0
 80195fc:	bd10      	pop	{r4, pc}
 80195fe:	4603      	mov	r3, r0
 8019600:	e7f7      	b.n	80195f2 <__any_on+0x26>
 8019602:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019606:	2900      	cmp	r1, #0
 8019608:	d0f5      	beq.n	80195f6 <__any_on+0x2a>
 801960a:	2001      	movs	r0, #1
 801960c:	e7f6      	b.n	80195fc <__any_on+0x30>

0801960e <_calloc_r>:
 801960e:	b538      	push	{r3, r4, r5, lr}
 8019610:	fb02 f401 	mul.w	r4, r2, r1
 8019614:	4621      	mov	r1, r4
 8019616:	f000 f857 	bl	80196c8 <_malloc_r>
 801961a:	4605      	mov	r5, r0
 801961c:	b118      	cbz	r0, 8019626 <_calloc_r+0x18>
 801961e:	4622      	mov	r2, r4
 8019620:	2100      	movs	r1, #0
 8019622:	f7fc fc9f 	bl	8015f64 <memset>
 8019626:	4628      	mov	r0, r5
 8019628:	bd38      	pop	{r3, r4, r5, pc}
	...

0801962c <_free_r>:
 801962c:	b538      	push	{r3, r4, r5, lr}
 801962e:	4605      	mov	r5, r0
 8019630:	2900      	cmp	r1, #0
 8019632:	d045      	beq.n	80196c0 <_free_r+0x94>
 8019634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019638:	1f0c      	subs	r4, r1, #4
 801963a:	2b00      	cmp	r3, #0
 801963c:	bfb8      	it	lt
 801963e:	18e4      	addlt	r4, r4, r3
 8019640:	f000 fe30 	bl	801a2a4 <__malloc_lock>
 8019644:	4a1f      	ldr	r2, [pc, #124]	; (80196c4 <_free_r+0x98>)
 8019646:	6813      	ldr	r3, [r2, #0]
 8019648:	4610      	mov	r0, r2
 801964a:	b933      	cbnz	r3, 801965a <_free_r+0x2e>
 801964c:	6063      	str	r3, [r4, #4]
 801964e:	6014      	str	r4, [r2, #0]
 8019650:	4628      	mov	r0, r5
 8019652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019656:	f000 be26 	b.w	801a2a6 <__malloc_unlock>
 801965a:	42a3      	cmp	r3, r4
 801965c:	d90c      	bls.n	8019678 <_free_r+0x4c>
 801965e:	6821      	ldr	r1, [r4, #0]
 8019660:	1862      	adds	r2, r4, r1
 8019662:	4293      	cmp	r3, r2
 8019664:	bf04      	itt	eq
 8019666:	681a      	ldreq	r2, [r3, #0]
 8019668:	685b      	ldreq	r3, [r3, #4]
 801966a:	6063      	str	r3, [r4, #4]
 801966c:	bf04      	itt	eq
 801966e:	1852      	addeq	r2, r2, r1
 8019670:	6022      	streq	r2, [r4, #0]
 8019672:	6004      	str	r4, [r0, #0]
 8019674:	e7ec      	b.n	8019650 <_free_r+0x24>
 8019676:	4613      	mov	r3, r2
 8019678:	685a      	ldr	r2, [r3, #4]
 801967a:	b10a      	cbz	r2, 8019680 <_free_r+0x54>
 801967c:	42a2      	cmp	r2, r4
 801967e:	d9fa      	bls.n	8019676 <_free_r+0x4a>
 8019680:	6819      	ldr	r1, [r3, #0]
 8019682:	1858      	adds	r0, r3, r1
 8019684:	42a0      	cmp	r0, r4
 8019686:	d10b      	bne.n	80196a0 <_free_r+0x74>
 8019688:	6820      	ldr	r0, [r4, #0]
 801968a:	4401      	add	r1, r0
 801968c:	1858      	adds	r0, r3, r1
 801968e:	4282      	cmp	r2, r0
 8019690:	6019      	str	r1, [r3, #0]
 8019692:	d1dd      	bne.n	8019650 <_free_r+0x24>
 8019694:	6810      	ldr	r0, [r2, #0]
 8019696:	6852      	ldr	r2, [r2, #4]
 8019698:	605a      	str	r2, [r3, #4]
 801969a:	4401      	add	r1, r0
 801969c:	6019      	str	r1, [r3, #0]
 801969e:	e7d7      	b.n	8019650 <_free_r+0x24>
 80196a0:	d902      	bls.n	80196a8 <_free_r+0x7c>
 80196a2:	230c      	movs	r3, #12
 80196a4:	602b      	str	r3, [r5, #0]
 80196a6:	e7d3      	b.n	8019650 <_free_r+0x24>
 80196a8:	6820      	ldr	r0, [r4, #0]
 80196aa:	1821      	adds	r1, r4, r0
 80196ac:	428a      	cmp	r2, r1
 80196ae:	bf04      	itt	eq
 80196b0:	6811      	ldreq	r1, [r2, #0]
 80196b2:	6852      	ldreq	r2, [r2, #4]
 80196b4:	6062      	str	r2, [r4, #4]
 80196b6:	bf04      	itt	eq
 80196b8:	1809      	addeq	r1, r1, r0
 80196ba:	6021      	streq	r1, [r4, #0]
 80196bc:	605c      	str	r4, [r3, #4]
 80196be:	e7c7      	b.n	8019650 <_free_r+0x24>
 80196c0:	bd38      	pop	{r3, r4, r5, pc}
 80196c2:	bf00      	nop
 80196c4:	20045364 	.word	0x20045364

080196c8 <_malloc_r>:
 80196c8:	b570      	push	{r4, r5, r6, lr}
 80196ca:	1ccd      	adds	r5, r1, #3
 80196cc:	f025 0503 	bic.w	r5, r5, #3
 80196d0:	3508      	adds	r5, #8
 80196d2:	2d0c      	cmp	r5, #12
 80196d4:	bf38      	it	cc
 80196d6:	250c      	movcc	r5, #12
 80196d8:	2d00      	cmp	r5, #0
 80196da:	4606      	mov	r6, r0
 80196dc:	db01      	blt.n	80196e2 <_malloc_r+0x1a>
 80196de:	42a9      	cmp	r1, r5
 80196e0:	d903      	bls.n	80196ea <_malloc_r+0x22>
 80196e2:	230c      	movs	r3, #12
 80196e4:	6033      	str	r3, [r6, #0]
 80196e6:	2000      	movs	r0, #0
 80196e8:	bd70      	pop	{r4, r5, r6, pc}
 80196ea:	f000 fddb 	bl	801a2a4 <__malloc_lock>
 80196ee:	4a21      	ldr	r2, [pc, #132]	; (8019774 <_malloc_r+0xac>)
 80196f0:	6814      	ldr	r4, [r2, #0]
 80196f2:	4621      	mov	r1, r4
 80196f4:	b991      	cbnz	r1, 801971c <_malloc_r+0x54>
 80196f6:	4c20      	ldr	r4, [pc, #128]	; (8019778 <_malloc_r+0xb0>)
 80196f8:	6823      	ldr	r3, [r4, #0]
 80196fa:	b91b      	cbnz	r3, 8019704 <_malloc_r+0x3c>
 80196fc:	4630      	mov	r0, r6
 80196fe:	f000 fc91 	bl	801a024 <_sbrk_r>
 8019702:	6020      	str	r0, [r4, #0]
 8019704:	4629      	mov	r1, r5
 8019706:	4630      	mov	r0, r6
 8019708:	f000 fc8c 	bl	801a024 <_sbrk_r>
 801970c:	1c43      	adds	r3, r0, #1
 801970e:	d124      	bne.n	801975a <_malloc_r+0x92>
 8019710:	230c      	movs	r3, #12
 8019712:	6033      	str	r3, [r6, #0]
 8019714:	4630      	mov	r0, r6
 8019716:	f000 fdc6 	bl	801a2a6 <__malloc_unlock>
 801971a:	e7e4      	b.n	80196e6 <_malloc_r+0x1e>
 801971c:	680b      	ldr	r3, [r1, #0]
 801971e:	1b5b      	subs	r3, r3, r5
 8019720:	d418      	bmi.n	8019754 <_malloc_r+0x8c>
 8019722:	2b0b      	cmp	r3, #11
 8019724:	d90f      	bls.n	8019746 <_malloc_r+0x7e>
 8019726:	600b      	str	r3, [r1, #0]
 8019728:	50cd      	str	r5, [r1, r3]
 801972a:	18cc      	adds	r4, r1, r3
 801972c:	4630      	mov	r0, r6
 801972e:	f000 fdba 	bl	801a2a6 <__malloc_unlock>
 8019732:	f104 000b 	add.w	r0, r4, #11
 8019736:	1d23      	adds	r3, r4, #4
 8019738:	f020 0007 	bic.w	r0, r0, #7
 801973c:	1ac3      	subs	r3, r0, r3
 801973e:	d0d3      	beq.n	80196e8 <_malloc_r+0x20>
 8019740:	425a      	negs	r2, r3
 8019742:	50e2      	str	r2, [r4, r3]
 8019744:	e7d0      	b.n	80196e8 <_malloc_r+0x20>
 8019746:	428c      	cmp	r4, r1
 8019748:	684b      	ldr	r3, [r1, #4]
 801974a:	bf16      	itet	ne
 801974c:	6063      	strne	r3, [r4, #4]
 801974e:	6013      	streq	r3, [r2, #0]
 8019750:	460c      	movne	r4, r1
 8019752:	e7eb      	b.n	801972c <_malloc_r+0x64>
 8019754:	460c      	mov	r4, r1
 8019756:	6849      	ldr	r1, [r1, #4]
 8019758:	e7cc      	b.n	80196f4 <_malloc_r+0x2c>
 801975a:	1cc4      	adds	r4, r0, #3
 801975c:	f024 0403 	bic.w	r4, r4, #3
 8019760:	42a0      	cmp	r0, r4
 8019762:	d005      	beq.n	8019770 <_malloc_r+0xa8>
 8019764:	1a21      	subs	r1, r4, r0
 8019766:	4630      	mov	r0, r6
 8019768:	f000 fc5c 	bl	801a024 <_sbrk_r>
 801976c:	3001      	adds	r0, #1
 801976e:	d0cf      	beq.n	8019710 <_malloc_r+0x48>
 8019770:	6025      	str	r5, [r4, #0]
 8019772:	e7db      	b.n	801972c <_malloc_r+0x64>
 8019774:	20045364 	.word	0x20045364
 8019778:	20045368 	.word	0x20045368

0801977c <__ssputs_r>:
 801977c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019780:	688e      	ldr	r6, [r1, #8]
 8019782:	429e      	cmp	r6, r3
 8019784:	4682      	mov	sl, r0
 8019786:	460c      	mov	r4, r1
 8019788:	4690      	mov	r8, r2
 801978a:	4699      	mov	r9, r3
 801978c:	d837      	bhi.n	80197fe <__ssputs_r+0x82>
 801978e:	898a      	ldrh	r2, [r1, #12]
 8019790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019794:	d031      	beq.n	80197fa <__ssputs_r+0x7e>
 8019796:	6825      	ldr	r5, [r4, #0]
 8019798:	6909      	ldr	r1, [r1, #16]
 801979a:	1a6f      	subs	r7, r5, r1
 801979c:	6965      	ldr	r5, [r4, #20]
 801979e:	2302      	movs	r3, #2
 80197a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80197a8:	f109 0301 	add.w	r3, r9, #1
 80197ac:	443b      	add	r3, r7
 80197ae:	429d      	cmp	r5, r3
 80197b0:	bf38      	it	cc
 80197b2:	461d      	movcc	r5, r3
 80197b4:	0553      	lsls	r3, r2, #21
 80197b6:	d530      	bpl.n	801981a <__ssputs_r+0x9e>
 80197b8:	4629      	mov	r1, r5
 80197ba:	f7ff ff85 	bl	80196c8 <_malloc_r>
 80197be:	4606      	mov	r6, r0
 80197c0:	b950      	cbnz	r0, 80197d8 <__ssputs_r+0x5c>
 80197c2:	230c      	movs	r3, #12
 80197c4:	f8ca 3000 	str.w	r3, [sl]
 80197c8:	89a3      	ldrh	r3, [r4, #12]
 80197ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197ce:	81a3      	strh	r3, [r4, #12]
 80197d0:	f04f 30ff 	mov.w	r0, #4294967295
 80197d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197d8:	463a      	mov	r2, r7
 80197da:	6921      	ldr	r1, [r4, #16]
 80197dc:	f7ff fb0e 	bl	8018dfc <memcpy>
 80197e0:	89a3      	ldrh	r3, [r4, #12]
 80197e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80197e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197ea:	81a3      	strh	r3, [r4, #12]
 80197ec:	6126      	str	r6, [r4, #16]
 80197ee:	6165      	str	r5, [r4, #20]
 80197f0:	443e      	add	r6, r7
 80197f2:	1bed      	subs	r5, r5, r7
 80197f4:	6026      	str	r6, [r4, #0]
 80197f6:	60a5      	str	r5, [r4, #8]
 80197f8:	464e      	mov	r6, r9
 80197fa:	454e      	cmp	r6, r9
 80197fc:	d900      	bls.n	8019800 <__ssputs_r+0x84>
 80197fe:	464e      	mov	r6, r9
 8019800:	4632      	mov	r2, r6
 8019802:	4641      	mov	r1, r8
 8019804:	6820      	ldr	r0, [r4, #0]
 8019806:	f000 fd34 	bl	801a272 <memmove>
 801980a:	68a3      	ldr	r3, [r4, #8]
 801980c:	1b9b      	subs	r3, r3, r6
 801980e:	60a3      	str	r3, [r4, #8]
 8019810:	6823      	ldr	r3, [r4, #0]
 8019812:	441e      	add	r6, r3
 8019814:	6026      	str	r6, [r4, #0]
 8019816:	2000      	movs	r0, #0
 8019818:	e7dc      	b.n	80197d4 <__ssputs_r+0x58>
 801981a:	462a      	mov	r2, r5
 801981c:	f000 fd44 	bl	801a2a8 <_realloc_r>
 8019820:	4606      	mov	r6, r0
 8019822:	2800      	cmp	r0, #0
 8019824:	d1e2      	bne.n	80197ec <__ssputs_r+0x70>
 8019826:	6921      	ldr	r1, [r4, #16]
 8019828:	4650      	mov	r0, sl
 801982a:	f7ff feff 	bl	801962c <_free_r>
 801982e:	e7c8      	b.n	80197c2 <__ssputs_r+0x46>

08019830 <_svfiprintf_r>:
 8019830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019834:	461d      	mov	r5, r3
 8019836:	898b      	ldrh	r3, [r1, #12]
 8019838:	061f      	lsls	r7, r3, #24
 801983a:	b09d      	sub	sp, #116	; 0x74
 801983c:	4680      	mov	r8, r0
 801983e:	460c      	mov	r4, r1
 8019840:	4616      	mov	r6, r2
 8019842:	d50f      	bpl.n	8019864 <_svfiprintf_r+0x34>
 8019844:	690b      	ldr	r3, [r1, #16]
 8019846:	b96b      	cbnz	r3, 8019864 <_svfiprintf_r+0x34>
 8019848:	2140      	movs	r1, #64	; 0x40
 801984a:	f7ff ff3d 	bl	80196c8 <_malloc_r>
 801984e:	6020      	str	r0, [r4, #0]
 8019850:	6120      	str	r0, [r4, #16]
 8019852:	b928      	cbnz	r0, 8019860 <_svfiprintf_r+0x30>
 8019854:	230c      	movs	r3, #12
 8019856:	f8c8 3000 	str.w	r3, [r8]
 801985a:	f04f 30ff 	mov.w	r0, #4294967295
 801985e:	e0c8      	b.n	80199f2 <_svfiprintf_r+0x1c2>
 8019860:	2340      	movs	r3, #64	; 0x40
 8019862:	6163      	str	r3, [r4, #20]
 8019864:	2300      	movs	r3, #0
 8019866:	9309      	str	r3, [sp, #36]	; 0x24
 8019868:	2320      	movs	r3, #32
 801986a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801986e:	2330      	movs	r3, #48	; 0x30
 8019870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019874:	9503      	str	r5, [sp, #12]
 8019876:	f04f 0b01 	mov.w	fp, #1
 801987a:	4637      	mov	r7, r6
 801987c:	463d      	mov	r5, r7
 801987e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019882:	b10b      	cbz	r3, 8019888 <_svfiprintf_r+0x58>
 8019884:	2b25      	cmp	r3, #37	; 0x25
 8019886:	d13e      	bne.n	8019906 <_svfiprintf_r+0xd6>
 8019888:	ebb7 0a06 	subs.w	sl, r7, r6
 801988c:	d00b      	beq.n	80198a6 <_svfiprintf_r+0x76>
 801988e:	4653      	mov	r3, sl
 8019890:	4632      	mov	r2, r6
 8019892:	4621      	mov	r1, r4
 8019894:	4640      	mov	r0, r8
 8019896:	f7ff ff71 	bl	801977c <__ssputs_r>
 801989a:	3001      	adds	r0, #1
 801989c:	f000 80a4 	beq.w	80199e8 <_svfiprintf_r+0x1b8>
 80198a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198a2:	4453      	add	r3, sl
 80198a4:	9309      	str	r3, [sp, #36]	; 0x24
 80198a6:	783b      	ldrb	r3, [r7, #0]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	f000 809d 	beq.w	80199e8 <_svfiprintf_r+0x1b8>
 80198ae:	2300      	movs	r3, #0
 80198b0:	f04f 32ff 	mov.w	r2, #4294967295
 80198b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198b8:	9304      	str	r3, [sp, #16]
 80198ba:	9307      	str	r3, [sp, #28]
 80198bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198c0:	931a      	str	r3, [sp, #104]	; 0x68
 80198c2:	462f      	mov	r7, r5
 80198c4:	2205      	movs	r2, #5
 80198c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80198ca:	4850      	ldr	r0, [pc, #320]	; (8019a0c <_svfiprintf_r+0x1dc>)
 80198cc:	f7e6 fca0 	bl	8000210 <memchr>
 80198d0:	9b04      	ldr	r3, [sp, #16]
 80198d2:	b9d0      	cbnz	r0, 801990a <_svfiprintf_r+0xda>
 80198d4:	06d9      	lsls	r1, r3, #27
 80198d6:	bf44      	itt	mi
 80198d8:	2220      	movmi	r2, #32
 80198da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80198de:	071a      	lsls	r2, r3, #28
 80198e0:	bf44      	itt	mi
 80198e2:	222b      	movmi	r2, #43	; 0x2b
 80198e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80198e8:	782a      	ldrb	r2, [r5, #0]
 80198ea:	2a2a      	cmp	r2, #42	; 0x2a
 80198ec:	d015      	beq.n	801991a <_svfiprintf_r+0xea>
 80198ee:	9a07      	ldr	r2, [sp, #28]
 80198f0:	462f      	mov	r7, r5
 80198f2:	2000      	movs	r0, #0
 80198f4:	250a      	movs	r5, #10
 80198f6:	4639      	mov	r1, r7
 80198f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198fc:	3b30      	subs	r3, #48	; 0x30
 80198fe:	2b09      	cmp	r3, #9
 8019900:	d94d      	bls.n	801999e <_svfiprintf_r+0x16e>
 8019902:	b1b8      	cbz	r0, 8019934 <_svfiprintf_r+0x104>
 8019904:	e00f      	b.n	8019926 <_svfiprintf_r+0xf6>
 8019906:	462f      	mov	r7, r5
 8019908:	e7b8      	b.n	801987c <_svfiprintf_r+0x4c>
 801990a:	4a40      	ldr	r2, [pc, #256]	; (8019a0c <_svfiprintf_r+0x1dc>)
 801990c:	1a80      	subs	r0, r0, r2
 801990e:	fa0b f000 	lsl.w	r0, fp, r0
 8019912:	4318      	orrs	r0, r3
 8019914:	9004      	str	r0, [sp, #16]
 8019916:	463d      	mov	r5, r7
 8019918:	e7d3      	b.n	80198c2 <_svfiprintf_r+0x92>
 801991a:	9a03      	ldr	r2, [sp, #12]
 801991c:	1d11      	adds	r1, r2, #4
 801991e:	6812      	ldr	r2, [r2, #0]
 8019920:	9103      	str	r1, [sp, #12]
 8019922:	2a00      	cmp	r2, #0
 8019924:	db01      	blt.n	801992a <_svfiprintf_r+0xfa>
 8019926:	9207      	str	r2, [sp, #28]
 8019928:	e004      	b.n	8019934 <_svfiprintf_r+0x104>
 801992a:	4252      	negs	r2, r2
 801992c:	f043 0302 	orr.w	r3, r3, #2
 8019930:	9207      	str	r2, [sp, #28]
 8019932:	9304      	str	r3, [sp, #16]
 8019934:	783b      	ldrb	r3, [r7, #0]
 8019936:	2b2e      	cmp	r3, #46	; 0x2e
 8019938:	d10c      	bne.n	8019954 <_svfiprintf_r+0x124>
 801993a:	787b      	ldrb	r3, [r7, #1]
 801993c:	2b2a      	cmp	r3, #42	; 0x2a
 801993e:	d133      	bne.n	80199a8 <_svfiprintf_r+0x178>
 8019940:	9b03      	ldr	r3, [sp, #12]
 8019942:	1d1a      	adds	r2, r3, #4
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	9203      	str	r2, [sp, #12]
 8019948:	2b00      	cmp	r3, #0
 801994a:	bfb8      	it	lt
 801994c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019950:	3702      	adds	r7, #2
 8019952:	9305      	str	r3, [sp, #20]
 8019954:	4d2e      	ldr	r5, [pc, #184]	; (8019a10 <_svfiprintf_r+0x1e0>)
 8019956:	7839      	ldrb	r1, [r7, #0]
 8019958:	2203      	movs	r2, #3
 801995a:	4628      	mov	r0, r5
 801995c:	f7e6 fc58 	bl	8000210 <memchr>
 8019960:	b138      	cbz	r0, 8019972 <_svfiprintf_r+0x142>
 8019962:	2340      	movs	r3, #64	; 0x40
 8019964:	1b40      	subs	r0, r0, r5
 8019966:	fa03 f000 	lsl.w	r0, r3, r0
 801996a:	9b04      	ldr	r3, [sp, #16]
 801996c:	4303      	orrs	r3, r0
 801996e:	3701      	adds	r7, #1
 8019970:	9304      	str	r3, [sp, #16]
 8019972:	7839      	ldrb	r1, [r7, #0]
 8019974:	4827      	ldr	r0, [pc, #156]	; (8019a14 <_svfiprintf_r+0x1e4>)
 8019976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801997a:	2206      	movs	r2, #6
 801997c:	1c7e      	adds	r6, r7, #1
 801997e:	f7e6 fc47 	bl	8000210 <memchr>
 8019982:	2800      	cmp	r0, #0
 8019984:	d038      	beq.n	80199f8 <_svfiprintf_r+0x1c8>
 8019986:	4b24      	ldr	r3, [pc, #144]	; (8019a18 <_svfiprintf_r+0x1e8>)
 8019988:	bb13      	cbnz	r3, 80199d0 <_svfiprintf_r+0x1a0>
 801998a:	9b03      	ldr	r3, [sp, #12]
 801998c:	3307      	adds	r3, #7
 801998e:	f023 0307 	bic.w	r3, r3, #7
 8019992:	3308      	adds	r3, #8
 8019994:	9303      	str	r3, [sp, #12]
 8019996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019998:	444b      	add	r3, r9
 801999a:	9309      	str	r3, [sp, #36]	; 0x24
 801999c:	e76d      	b.n	801987a <_svfiprintf_r+0x4a>
 801999e:	fb05 3202 	mla	r2, r5, r2, r3
 80199a2:	2001      	movs	r0, #1
 80199a4:	460f      	mov	r7, r1
 80199a6:	e7a6      	b.n	80198f6 <_svfiprintf_r+0xc6>
 80199a8:	2300      	movs	r3, #0
 80199aa:	3701      	adds	r7, #1
 80199ac:	9305      	str	r3, [sp, #20]
 80199ae:	4619      	mov	r1, r3
 80199b0:	250a      	movs	r5, #10
 80199b2:	4638      	mov	r0, r7
 80199b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199b8:	3a30      	subs	r2, #48	; 0x30
 80199ba:	2a09      	cmp	r2, #9
 80199bc:	d903      	bls.n	80199c6 <_svfiprintf_r+0x196>
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d0c8      	beq.n	8019954 <_svfiprintf_r+0x124>
 80199c2:	9105      	str	r1, [sp, #20]
 80199c4:	e7c6      	b.n	8019954 <_svfiprintf_r+0x124>
 80199c6:	fb05 2101 	mla	r1, r5, r1, r2
 80199ca:	2301      	movs	r3, #1
 80199cc:	4607      	mov	r7, r0
 80199ce:	e7f0      	b.n	80199b2 <_svfiprintf_r+0x182>
 80199d0:	ab03      	add	r3, sp, #12
 80199d2:	9300      	str	r3, [sp, #0]
 80199d4:	4622      	mov	r2, r4
 80199d6:	4b11      	ldr	r3, [pc, #68]	; (8019a1c <_svfiprintf_r+0x1ec>)
 80199d8:	a904      	add	r1, sp, #16
 80199da:	4640      	mov	r0, r8
 80199dc:	f7fc fb5e 	bl	801609c <_printf_float>
 80199e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80199e4:	4681      	mov	r9, r0
 80199e6:	d1d6      	bne.n	8019996 <_svfiprintf_r+0x166>
 80199e8:	89a3      	ldrh	r3, [r4, #12]
 80199ea:	065b      	lsls	r3, r3, #25
 80199ec:	f53f af35 	bmi.w	801985a <_svfiprintf_r+0x2a>
 80199f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199f2:	b01d      	add	sp, #116	; 0x74
 80199f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199f8:	ab03      	add	r3, sp, #12
 80199fa:	9300      	str	r3, [sp, #0]
 80199fc:	4622      	mov	r2, r4
 80199fe:	4b07      	ldr	r3, [pc, #28]	; (8019a1c <_svfiprintf_r+0x1ec>)
 8019a00:	a904      	add	r1, sp, #16
 8019a02:	4640      	mov	r0, r8
 8019a04:	f7fc fe00 	bl	8016608 <_printf_i>
 8019a08:	e7ea      	b.n	80199e0 <_svfiprintf_r+0x1b0>
 8019a0a:	bf00      	nop
 8019a0c:	0801aabc 	.word	0x0801aabc
 8019a10:	0801aac2 	.word	0x0801aac2
 8019a14:	0801aac6 	.word	0x0801aac6
 8019a18:	0801609d 	.word	0x0801609d
 8019a1c:	0801977d 	.word	0x0801977d

08019a20 <_sungetc_r>:
 8019a20:	b538      	push	{r3, r4, r5, lr}
 8019a22:	1c4b      	adds	r3, r1, #1
 8019a24:	4614      	mov	r4, r2
 8019a26:	d103      	bne.n	8019a30 <_sungetc_r+0x10>
 8019a28:	f04f 35ff 	mov.w	r5, #4294967295
 8019a2c:	4628      	mov	r0, r5
 8019a2e:	bd38      	pop	{r3, r4, r5, pc}
 8019a30:	8993      	ldrh	r3, [r2, #12]
 8019a32:	f023 0320 	bic.w	r3, r3, #32
 8019a36:	8193      	strh	r3, [r2, #12]
 8019a38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a3a:	6852      	ldr	r2, [r2, #4]
 8019a3c:	b2cd      	uxtb	r5, r1
 8019a3e:	b18b      	cbz	r3, 8019a64 <_sungetc_r+0x44>
 8019a40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019a42:	4293      	cmp	r3, r2
 8019a44:	dd08      	ble.n	8019a58 <_sungetc_r+0x38>
 8019a46:	6823      	ldr	r3, [r4, #0]
 8019a48:	1e5a      	subs	r2, r3, #1
 8019a4a:	6022      	str	r2, [r4, #0]
 8019a4c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019a50:	6863      	ldr	r3, [r4, #4]
 8019a52:	3301      	adds	r3, #1
 8019a54:	6063      	str	r3, [r4, #4]
 8019a56:	e7e9      	b.n	8019a2c <_sungetc_r+0xc>
 8019a58:	4621      	mov	r1, r4
 8019a5a:	f000 fbc3 	bl	801a1e4 <__submore>
 8019a5e:	2800      	cmp	r0, #0
 8019a60:	d0f1      	beq.n	8019a46 <_sungetc_r+0x26>
 8019a62:	e7e1      	b.n	8019a28 <_sungetc_r+0x8>
 8019a64:	6921      	ldr	r1, [r4, #16]
 8019a66:	6823      	ldr	r3, [r4, #0]
 8019a68:	b151      	cbz	r1, 8019a80 <_sungetc_r+0x60>
 8019a6a:	4299      	cmp	r1, r3
 8019a6c:	d208      	bcs.n	8019a80 <_sungetc_r+0x60>
 8019a6e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019a72:	42a9      	cmp	r1, r5
 8019a74:	d104      	bne.n	8019a80 <_sungetc_r+0x60>
 8019a76:	3b01      	subs	r3, #1
 8019a78:	3201      	adds	r2, #1
 8019a7a:	6023      	str	r3, [r4, #0]
 8019a7c:	6062      	str	r2, [r4, #4]
 8019a7e:	e7d5      	b.n	8019a2c <_sungetc_r+0xc>
 8019a80:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a88:	6363      	str	r3, [r4, #52]	; 0x34
 8019a8a:	2303      	movs	r3, #3
 8019a8c:	63a3      	str	r3, [r4, #56]	; 0x38
 8019a8e:	4623      	mov	r3, r4
 8019a90:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019a94:	6023      	str	r3, [r4, #0]
 8019a96:	2301      	movs	r3, #1
 8019a98:	e7dc      	b.n	8019a54 <_sungetc_r+0x34>

08019a9a <__ssrefill_r>:
 8019a9a:	b510      	push	{r4, lr}
 8019a9c:	460c      	mov	r4, r1
 8019a9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019aa0:	b169      	cbz	r1, 8019abe <__ssrefill_r+0x24>
 8019aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019aa6:	4299      	cmp	r1, r3
 8019aa8:	d001      	beq.n	8019aae <__ssrefill_r+0x14>
 8019aaa:	f7ff fdbf 	bl	801962c <_free_r>
 8019aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019ab0:	6063      	str	r3, [r4, #4]
 8019ab2:	2000      	movs	r0, #0
 8019ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8019ab6:	b113      	cbz	r3, 8019abe <__ssrefill_r+0x24>
 8019ab8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019aba:	6023      	str	r3, [r4, #0]
 8019abc:	bd10      	pop	{r4, pc}
 8019abe:	6923      	ldr	r3, [r4, #16]
 8019ac0:	6023      	str	r3, [r4, #0]
 8019ac2:	2300      	movs	r3, #0
 8019ac4:	6063      	str	r3, [r4, #4]
 8019ac6:	89a3      	ldrh	r3, [r4, #12]
 8019ac8:	f043 0320 	orr.w	r3, r3, #32
 8019acc:	81a3      	strh	r3, [r4, #12]
 8019ace:	f04f 30ff 	mov.w	r0, #4294967295
 8019ad2:	e7f3      	b.n	8019abc <__ssrefill_r+0x22>

08019ad4 <__ssvfiscanf_r>:
 8019ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ad8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019adc:	460c      	mov	r4, r1
 8019ade:	2100      	movs	r1, #0
 8019ae0:	9144      	str	r1, [sp, #272]	; 0x110
 8019ae2:	9145      	str	r1, [sp, #276]	; 0x114
 8019ae4:	499f      	ldr	r1, [pc, #636]	; (8019d64 <__ssvfiscanf_r+0x290>)
 8019ae6:	91a0      	str	r1, [sp, #640]	; 0x280
 8019ae8:	f10d 0804 	add.w	r8, sp, #4
 8019aec:	499e      	ldr	r1, [pc, #632]	; (8019d68 <__ssvfiscanf_r+0x294>)
 8019aee:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019d6c <__ssvfiscanf_r+0x298>
 8019af2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019af6:	4606      	mov	r6, r0
 8019af8:	4692      	mov	sl, r2
 8019afa:	91a1      	str	r1, [sp, #644]	; 0x284
 8019afc:	9300      	str	r3, [sp, #0]
 8019afe:	270a      	movs	r7, #10
 8019b00:	f89a 3000 	ldrb.w	r3, [sl]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	f000 812a 	beq.w	8019d5e <__ssvfiscanf_r+0x28a>
 8019b0a:	4655      	mov	r5, sl
 8019b0c:	f7ff f93e 	bl	8018d8c <__locale_ctype_ptr>
 8019b10:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019b14:	4458      	add	r0, fp
 8019b16:	7843      	ldrb	r3, [r0, #1]
 8019b18:	f013 0308 	ands.w	r3, r3, #8
 8019b1c:	d01c      	beq.n	8019b58 <__ssvfiscanf_r+0x84>
 8019b1e:	6863      	ldr	r3, [r4, #4]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	dd12      	ble.n	8019b4a <__ssvfiscanf_r+0x76>
 8019b24:	f7ff f932 	bl	8018d8c <__locale_ctype_ptr>
 8019b28:	6823      	ldr	r3, [r4, #0]
 8019b2a:	781a      	ldrb	r2, [r3, #0]
 8019b2c:	4410      	add	r0, r2
 8019b2e:	7842      	ldrb	r2, [r0, #1]
 8019b30:	0712      	lsls	r2, r2, #28
 8019b32:	d401      	bmi.n	8019b38 <__ssvfiscanf_r+0x64>
 8019b34:	46aa      	mov	sl, r5
 8019b36:	e7e3      	b.n	8019b00 <__ssvfiscanf_r+0x2c>
 8019b38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019b3a:	3201      	adds	r2, #1
 8019b3c:	9245      	str	r2, [sp, #276]	; 0x114
 8019b3e:	6862      	ldr	r2, [r4, #4]
 8019b40:	3301      	adds	r3, #1
 8019b42:	3a01      	subs	r2, #1
 8019b44:	6062      	str	r2, [r4, #4]
 8019b46:	6023      	str	r3, [r4, #0]
 8019b48:	e7e9      	b.n	8019b1e <__ssvfiscanf_r+0x4a>
 8019b4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019b4c:	4621      	mov	r1, r4
 8019b4e:	4630      	mov	r0, r6
 8019b50:	4798      	blx	r3
 8019b52:	2800      	cmp	r0, #0
 8019b54:	d0e6      	beq.n	8019b24 <__ssvfiscanf_r+0x50>
 8019b56:	e7ed      	b.n	8019b34 <__ssvfiscanf_r+0x60>
 8019b58:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019b5c:	f040 8082 	bne.w	8019c64 <__ssvfiscanf_r+0x190>
 8019b60:	9343      	str	r3, [sp, #268]	; 0x10c
 8019b62:	9341      	str	r3, [sp, #260]	; 0x104
 8019b64:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019b68:	2b2a      	cmp	r3, #42	; 0x2a
 8019b6a:	d103      	bne.n	8019b74 <__ssvfiscanf_r+0xa0>
 8019b6c:	2310      	movs	r3, #16
 8019b6e:	9341      	str	r3, [sp, #260]	; 0x104
 8019b70:	f10a 0502 	add.w	r5, sl, #2
 8019b74:	46aa      	mov	sl, r5
 8019b76:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019b7a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019b7e:	2a09      	cmp	r2, #9
 8019b80:	d922      	bls.n	8019bc8 <__ssvfiscanf_r+0xf4>
 8019b82:	2203      	movs	r2, #3
 8019b84:	4879      	ldr	r0, [pc, #484]	; (8019d6c <__ssvfiscanf_r+0x298>)
 8019b86:	f7e6 fb43 	bl	8000210 <memchr>
 8019b8a:	b138      	cbz	r0, 8019b9c <__ssvfiscanf_r+0xc8>
 8019b8c:	eba0 0309 	sub.w	r3, r0, r9
 8019b90:	2001      	movs	r0, #1
 8019b92:	4098      	lsls	r0, r3
 8019b94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019b96:	4318      	orrs	r0, r3
 8019b98:	9041      	str	r0, [sp, #260]	; 0x104
 8019b9a:	46aa      	mov	sl, r5
 8019b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8019ba0:	2b67      	cmp	r3, #103	; 0x67
 8019ba2:	f10a 0501 	add.w	r5, sl, #1
 8019ba6:	d82b      	bhi.n	8019c00 <__ssvfiscanf_r+0x12c>
 8019ba8:	2b65      	cmp	r3, #101	; 0x65
 8019baa:	f080 809f 	bcs.w	8019cec <__ssvfiscanf_r+0x218>
 8019bae:	2b47      	cmp	r3, #71	; 0x47
 8019bb0:	d810      	bhi.n	8019bd4 <__ssvfiscanf_r+0x100>
 8019bb2:	2b45      	cmp	r3, #69	; 0x45
 8019bb4:	f080 809a 	bcs.w	8019cec <__ssvfiscanf_r+0x218>
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d06c      	beq.n	8019c96 <__ssvfiscanf_r+0x1c2>
 8019bbc:	2b25      	cmp	r3, #37	; 0x25
 8019bbe:	d051      	beq.n	8019c64 <__ssvfiscanf_r+0x190>
 8019bc0:	2303      	movs	r3, #3
 8019bc2:	9347      	str	r3, [sp, #284]	; 0x11c
 8019bc4:	9742      	str	r7, [sp, #264]	; 0x108
 8019bc6:	e027      	b.n	8019c18 <__ssvfiscanf_r+0x144>
 8019bc8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019bca:	fb07 1303 	mla	r3, r7, r3, r1
 8019bce:	3b30      	subs	r3, #48	; 0x30
 8019bd0:	9343      	str	r3, [sp, #268]	; 0x10c
 8019bd2:	e7cf      	b.n	8019b74 <__ssvfiscanf_r+0xa0>
 8019bd4:	2b5b      	cmp	r3, #91	; 0x5b
 8019bd6:	d06a      	beq.n	8019cae <__ssvfiscanf_r+0x1da>
 8019bd8:	d80c      	bhi.n	8019bf4 <__ssvfiscanf_r+0x120>
 8019bda:	2b58      	cmp	r3, #88	; 0x58
 8019bdc:	d1f0      	bne.n	8019bc0 <__ssvfiscanf_r+0xec>
 8019bde:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019be4:	9241      	str	r2, [sp, #260]	; 0x104
 8019be6:	2210      	movs	r2, #16
 8019be8:	9242      	str	r2, [sp, #264]	; 0x108
 8019bea:	2b6e      	cmp	r3, #110	; 0x6e
 8019bec:	bf8c      	ite	hi
 8019bee:	2304      	movhi	r3, #4
 8019bf0:	2303      	movls	r3, #3
 8019bf2:	e010      	b.n	8019c16 <__ssvfiscanf_r+0x142>
 8019bf4:	2b63      	cmp	r3, #99	; 0x63
 8019bf6:	d065      	beq.n	8019cc4 <__ssvfiscanf_r+0x1f0>
 8019bf8:	2b64      	cmp	r3, #100	; 0x64
 8019bfa:	d1e1      	bne.n	8019bc0 <__ssvfiscanf_r+0xec>
 8019bfc:	9742      	str	r7, [sp, #264]	; 0x108
 8019bfe:	e7f4      	b.n	8019bea <__ssvfiscanf_r+0x116>
 8019c00:	2b70      	cmp	r3, #112	; 0x70
 8019c02:	d04b      	beq.n	8019c9c <__ssvfiscanf_r+0x1c8>
 8019c04:	d826      	bhi.n	8019c54 <__ssvfiscanf_r+0x180>
 8019c06:	2b6e      	cmp	r3, #110	; 0x6e
 8019c08:	d062      	beq.n	8019cd0 <__ssvfiscanf_r+0x1fc>
 8019c0a:	d84c      	bhi.n	8019ca6 <__ssvfiscanf_r+0x1d2>
 8019c0c:	2b69      	cmp	r3, #105	; 0x69
 8019c0e:	d1d7      	bne.n	8019bc0 <__ssvfiscanf_r+0xec>
 8019c10:	2300      	movs	r3, #0
 8019c12:	9342      	str	r3, [sp, #264]	; 0x108
 8019c14:	2303      	movs	r3, #3
 8019c16:	9347      	str	r3, [sp, #284]	; 0x11c
 8019c18:	6863      	ldr	r3, [r4, #4]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	dd68      	ble.n	8019cf0 <__ssvfiscanf_r+0x21c>
 8019c1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019c20:	0659      	lsls	r1, r3, #25
 8019c22:	d407      	bmi.n	8019c34 <__ssvfiscanf_r+0x160>
 8019c24:	f7ff f8b2 	bl	8018d8c <__locale_ctype_ptr>
 8019c28:	6823      	ldr	r3, [r4, #0]
 8019c2a:	781a      	ldrb	r2, [r3, #0]
 8019c2c:	4410      	add	r0, r2
 8019c2e:	7842      	ldrb	r2, [r0, #1]
 8019c30:	0712      	lsls	r2, r2, #28
 8019c32:	d464      	bmi.n	8019cfe <__ssvfiscanf_r+0x22a>
 8019c34:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019c36:	2b02      	cmp	r3, #2
 8019c38:	dc73      	bgt.n	8019d22 <__ssvfiscanf_r+0x24e>
 8019c3a:	466b      	mov	r3, sp
 8019c3c:	4622      	mov	r2, r4
 8019c3e:	a941      	add	r1, sp, #260	; 0x104
 8019c40:	4630      	mov	r0, r6
 8019c42:	f000 f897 	bl	8019d74 <_scanf_chars>
 8019c46:	2801      	cmp	r0, #1
 8019c48:	f000 8089 	beq.w	8019d5e <__ssvfiscanf_r+0x28a>
 8019c4c:	2802      	cmp	r0, #2
 8019c4e:	f47f af71 	bne.w	8019b34 <__ssvfiscanf_r+0x60>
 8019c52:	e01d      	b.n	8019c90 <__ssvfiscanf_r+0x1bc>
 8019c54:	2b75      	cmp	r3, #117	; 0x75
 8019c56:	d0d1      	beq.n	8019bfc <__ssvfiscanf_r+0x128>
 8019c58:	2b78      	cmp	r3, #120	; 0x78
 8019c5a:	d0c0      	beq.n	8019bde <__ssvfiscanf_r+0x10a>
 8019c5c:	2b73      	cmp	r3, #115	; 0x73
 8019c5e:	d1af      	bne.n	8019bc0 <__ssvfiscanf_r+0xec>
 8019c60:	2302      	movs	r3, #2
 8019c62:	e7d8      	b.n	8019c16 <__ssvfiscanf_r+0x142>
 8019c64:	6863      	ldr	r3, [r4, #4]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	dd0c      	ble.n	8019c84 <__ssvfiscanf_r+0x1b0>
 8019c6a:	6823      	ldr	r3, [r4, #0]
 8019c6c:	781a      	ldrb	r2, [r3, #0]
 8019c6e:	455a      	cmp	r2, fp
 8019c70:	d175      	bne.n	8019d5e <__ssvfiscanf_r+0x28a>
 8019c72:	3301      	adds	r3, #1
 8019c74:	6862      	ldr	r2, [r4, #4]
 8019c76:	6023      	str	r3, [r4, #0]
 8019c78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019c7a:	3a01      	subs	r2, #1
 8019c7c:	3301      	adds	r3, #1
 8019c7e:	6062      	str	r2, [r4, #4]
 8019c80:	9345      	str	r3, [sp, #276]	; 0x114
 8019c82:	e757      	b.n	8019b34 <__ssvfiscanf_r+0x60>
 8019c84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019c86:	4621      	mov	r1, r4
 8019c88:	4630      	mov	r0, r6
 8019c8a:	4798      	blx	r3
 8019c8c:	2800      	cmp	r0, #0
 8019c8e:	d0ec      	beq.n	8019c6a <__ssvfiscanf_r+0x196>
 8019c90:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019c92:	2800      	cmp	r0, #0
 8019c94:	d159      	bne.n	8019d4a <__ssvfiscanf_r+0x276>
 8019c96:	f04f 30ff 	mov.w	r0, #4294967295
 8019c9a:	e05c      	b.n	8019d56 <__ssvfiscanf_r+0x282>
 8019c9c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019c9e:	f042 0220 	orr.w	r2, r2, #32
 8019ca2:	9241      	str	r2, [sp, #260]	; 0x104
 8019ca4:	e79b      	b.n	8019bde <__ssvfiscanf_r+0x10a>
 8019ca6:	2308      	movs	r3, #8
 8019ca8:	9342      	str	r3, [sp, #264]	; 0x108
 8019caa:	2304      	movs	r3, #4
 8019cac:	e7b3      	b.n	8019c16 <__ssvfiscanf_r+0x142>
 8019cae:	4629      	mov	r1, r5
 8019cb0:	4640      	mov	r0, r8
 8019cb2:	f000 f9c7 	bl	801a044 <__sccl>
 8019cb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cbc:	9341      	str	r3, [sp, #260]	; 0x104
 8019cbe:	4605      	mov	r5, r0
 8019cc0:	2301      	movs	r3, #1
 8019cc2:	e7a8      	b.n	8019c16 <__ssvfiscanf_r+0x142>
 8019cc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cca:	9341      	str	r3, [sp, #260]	; 0x104
 8019ccc:	2300      	movs	r3, #0
 8019cce:	e7a2      	b.n	8019c16 <__ssvfiscanf_r+0x142>
 8019cd0:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019cd2:	06c3      	lsls	r3, r0, #27
 8019cd4:	f53f af2e 	bmi.w	8019b34 <__ssvfiscanf_r+0x60>
 8019cd8:	9b00      	ldr	r3, [sp, #0]
 8019cda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019cdc:	1d19      	adds	r1, r3, #4
 8019cde:	9100      	str	r1, [sp, #0]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	07c0      	lsls	r0, r0, #31
 8019ce4:	bf4c      	ite	mi
 8019ce6:	801a      	strhmi	r2, [r3, #0]
 8019ce8:	601a      	strpl	r2, [r3, #0]
 8019cea:	e723      	b.n	8019b34 <__ssvfiscanf_r+0x60>
 8019cec:	2305      	movs	r3, #5
 8019cee:	e792      	b.n	8019c16 <__ssvfiscanf_r+0x142>
 8019cf0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019cf2:	4621      	mov	r1, r4
 8019cf4:	4630      	mov	r0, r6
 8019cf6:	4798      	blx	r3
 8019cf8:	2800      	cmp	r0, #0
 8019cfa:	d090      	beq.n	8019c1e <__ssvfiscanf_r+0x14a>
 8019cfc:	e7c8      	b.n	8019c90 <__ssvfiscanf_r+0x1bc>
 8019cfe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019d00:	3201      	adds	r2, #1
 8019d02:	9245      	str	r2, [sp, #276]	; 0x114
 8019d04:	6862      	ldr	r2, [r4, #4]
 8019d06:	3a01      	subs	r2, #1
 8019d08:	2a00      	cmp	r2, #0
 8019d0a:	6062      	str	r2, [r4, #4]
 8019d0c:	dd02      	ble.n	8019d14 <__ssvfiscanf_r+0x240>
 8019d0e:	3301      	adds	r3, #1
 8019d10:	6023      	str	r3, [r4, #0]
 8019d12:	e787      	b.n	8019c24 <__ssvfiscanf_r+0x150>
 8019d14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019d16:	4621      	mov	r1, r4
 8019d18:	4630      	mov	r0, r6
 8019d1a:	4798      	blx	r3
 8019d1c:	2800      	cmp	r0, #0
 8019d1e:	d081      	beq.n	8019c24 <__ssvfiscanf_r+0x150>
 8019d20:	e7b6      	b.n	8019c90 <__ssvfiscanf_r+0x1bc>
 8019d22:	2b04      	cmp	r3, #4
 8019d24:	dc06      	bgt.n	8019d34 <__ssvfiscanf_r+0x260>
 8019d26:	466b      	mov	r3, sp
 8019d28:	4622      	mov	r2, r4
 8019d2a:	a941      	add	r1, sp, #260	; 0x104
 8019d2c:	4630      	mov	r0, r6
 8019d2e:	f000 f885 	bl	8019e3c <_scanf_i>
 8019d32:	e788      	b.n	8019c46 <__ssvfiscanf_r+0x172>
 8019d34:	4b0e      	ldr	r3, [pc, #56]	; (8019d70 <__ssvfiscanf_r+0x29c>)
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	f43f aefc 	beq.w	8019b34 <__ssvfiscanf_r+0x60>
 8019d3c:	466b      	mov	r3, sp
 8019d3e:	4622      	mov	r2, r4
 8019d40:	a941      	add	r1, sp, #260	; 0x104
 8019d42:	4630      	mov	r0, r6
 8019d44:	f7fc fd72 	bl	801682c <_scanf_float>
 8019d48:	e77d      	b.n	8019c46 <__ssvfiscanf_r+0x172>
 8019d4a:	89a3      	ldrh	r3, [r4, #12]
 8019d4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019d50:	bf18      	it	ne
 8019d52:	f04f 30ff 	movne.w	r0, #4294967295
 8019d56:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d5e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019d60:	e7f9      	b.n	8019d56 <__ssvfiscanf_r+0x282>
 8019d62:	bf00      	nop
 8019d64:	08019a21 	.word	0x08019a21
 8019d68:	08019a9b 	.word	0x08019a9b
 8019d6c:	0801aac2 	.word	0x0801aac2
 8019d70:	0801682d 	.word	0x0801682d

08019d74 <_scanf_chars>:
 8019d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d78:	4615      	mov	r5, r2
 8019d7a:	688a      	ldr	r2, [r1, #8]
 8019d7c:	4680      	mov	r8, r0
 8019d7e:	460c      	mov	r4, r1
 8019d80:	b932      	cbnz	r2, 8019d90 <_scanf_chars+0x1c>
 8019d82:	698a      	ldr	r2, [r1, #24]
 8019d84:	2a00      	cmp	r2, #0
 8019d86:	bf14      	ite	ne
 8019d88:	f04f 32ff 	movne.w	r2, #4294967295
 8019d8c:	2201      	moveq	r2, #1
 8019d8e:	608a      	str	r2, [r1, #8]
 8019d90:	6822      	ldr	r2, [r4, #0]
 8019d92:	06d1      	lsls	r1, r2, #27
 8019d94:	bf5f      	itttt	pl
 8019d96:	681a      	ldrpl	r2, [r3, #0]
 8019d98:	1d11      	addpl	r1, r2, #4
 8019d9a:	6019      	strpl	r1, [r3, #0]
 8019d9c:	6817      	ldrpl	r7, [r2, #0]
 8019d9e:	2600      	movs	r6, #0
 8019da0:	69a3      	ldr	r3, [r4, #24]
 8019da2:	b1db      	cbz	r3, 8019ddc <_scanf_chars+0x68>
 8019da4:	2b01      	cmp	r3, #1
 8019da6:	d107      	bne.n	8019db8 <_scanf_chars+0x44>
 8019da8:	682b      	ldr	r3, [r5, #0]
 8019daa:	6962      	ldr	r2, [r4, #20]
 8019dac:	781b      	ldrb	r3, [r3, #0]
 8019dae:	5cd3      	ldrb	r3, [r2, r3]
 8019db0:	b9a3      	cbnz	r3, 8019ddc <_scanf_chars+0x68>
 8019db2:	2e00      	cmp	r6, #0
 8019db4:	d132      	bne.n	8019e1c <_scanf_chars+0xa8>
 8019db6:	e006      	b.n	8019dc6 <_scanf_chars+0x52>
 8019db8:	2b02      	cmp	r3, #2
 8019dba:	d007      	beq.n	8019dcc <_scanf_chars+0x58>
 8019dbc:	2e00      	cmp	r6, #0
 8019dbe:	d12d      	bne.n	8019e1c <_scanf_chars+0xa8>
 8019dc0:	69a3      	ldr	r3, [r4, #24]
 8019dc2:	2b01      	cmp	r3, #1
 8019dc4:	d12a      	bne.n	8019e1c <_scanf_chars+0xa8>
 8019dc6:	2001      	movs	r0, #1
 8019dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dcc:	f7fe ffde 	bl	8018d8c <__locale_ctype_ptr>
 8019dd0:	682b      	ldr	r3, [r5, #0]
 8019dd2:	781b      	ldrb	r3, [r3, #0]
 8019dd4:	4418      	add	r0, r3
 8019dd6:	7843      	ldrb	r3, [r0, #1]
 8019dd8:	071b      	lsls	r3, r3, #28
 8019dda:	d4ef      	bmi.n	8019dbc <_scanf_chars+0x48>
 8019ddc:	6823      	ldr	r3, [r4, #0]
 8019dde:	06da      	lsls	r2, r3, #27
 8019de0:	bf5e      	ittt	pl
 8019de2:	682b      	ldrpl	r3, [r5, #0]
 8019de4:	781b      	ldrbpl	r3, [r3, #0]
 8019de6:	703b      	strbpl	r3, [r7, #0]
 8019de8:	682a      	ldr	r2, [r5, #0]
 8019dea:	686b      	ldr	r3, [r5, #4]
 8019dec:	f102 0201 	add.w	r2, r2, #1
 8019df0:	602a      	str	r2, [r5, #0]
 8019df2:	68a2      	ldr	r2, [r4, #8]
 8019df4:	f103 33ff 	add.w	r3, r3, #4294967295
 8019df8:	f102 32ff 	add.w	r2, r2, #4294967295
 8019dfc:	606b      	str	r3, [r5, #4]
 8019dfe:	f106 0601 	add.w	r6, r6, #1
 8019e02:	bf58      	it	pl
 8019e04:	3701      	addpl	r7, #1
 8019e06:	60a2      	str	r2, [r4, #8]
 8019e08:	b142      	cbz	r2, 8019e1c <_scanf_chars+0xa8>
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	dcc8      	bgt.n	8019da0 <_scanf_chars+0x2c>
 8019e0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019e12:	4629      	mov	r1, r5
 8019e14:	4640      	mov	r0, r8
 8019e16:	4798      	blx	r3
 8019e18:	2800      	cmp	r0, #0
 8019e1a:	d0c1      	beq.n	8019da0 <_scanf_chars+0x2c>
 8019e1c:	6823      	ldr	r3, [r4, #0]
 8019e1e:	f013 0310 	ands.w	r3, r3, #16
 8019e22:	d105      	bne.n	8019e30 <_scanf_chars+0xbc>
 8019e24:	68e2      	ldr	r2, [r4, #12]
 8019e26:	3201      	adds	r2, #1
 8019e28:	60e2      	str	r2, [r4, #12]
 8019e2a:	69a2      	ldr	r2, [r4, #24]
 8019e2c:	b102      	cbz	r2, 8019e30 <_scanf_chars+0xbc>
 8019e2e:	703b      	strb	r3, [r7, #0]
 8019e30:	6923      	ldr	r3, [r4, #16]
 8019e32:	441e      	add	r6, r3
 8019e34:	6126      	str	r6, [r4, #16]
 8019e36:	2000      	movs	r0, #0
 8019e38:	e7c6      	b.n	8019dc8 <_scanf_chars+0x54>
	...

08019e3c <_scanf_i>:
 8019e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e40:	469a      	mov	sl, r3
 8019e42:	4b74      	ldr	r3, [pc, #464]	; (801a014 <_scanf_i+0x1d8>)
 8019e44:	460c      	mov	r4, r1
 8019e46:	4683      	mov	fp, r0
 8019e48:	4616      	mov	r6, r2
 8019e4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019e4e:	b087      	sub	sp, #28
 8019e50:	ab03      	add	r3, sp, #12
 8019e52:	68a7      	ldr	r7, [r4, #8]
 8019e54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019e58:	4b6f      	ldr	r3, [pc, #444]	; (801a018 <_scanf_i+0x1dc>)
 8019e5a:	69a1      	ldr	r1, [r4, #24]
 8019e5c:	4a6f      	ldr	r2, [pc, #444]	; (801a01c <_scanf_i+0x1e0>)
 8019e5e:	2903      	cmp	r1, #3
 8019e60:	bf08      	it	eq
 8019e62:	461a      	moveq	r2, r3
 8019e64:	1e7b      	subs	r3, r7, #1
 8019e66:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019e6a:	bf84      	itt	hi
 8019e6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019e70:	60a3      	strhi	r3, [r4, #8]
 8019e72:	6823      	ldr	r3, [r4, #0]
 8019e74:	9200      	str	r2, [sp, #0]
 8019e76:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019e7a:	bf88      	it	hi
 8019e7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019e80:	f104 091c 	add.w	r9, r4, #28
 8019e84:	6023      	str	r3, [r4, #0]
 8019e86:	bf8c      	ite	hi
 8019e88:	197f      	addhi	r7, r7, r5
 8019e8a:	2700      	movls	r7, #0
 8019e8c:	464b      	mov	r3, r9
 8019e8e:	f04f 0800 	mov.w	r8, #0
 8019e92:	9301      	str	r3, [sp, #4]
 8019e94:	6831      	ldr	r1, [r6, #0]
 8019e96:	ab03      	add	r3, sp, #12
 8019e98:	2202      	movs	r2, #2
 8019e9a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019e9e:	7809      	ldrb	r1, [r1, #0]
 8019ea0:	f7e6 f9b6 	bl	8000210 <memchr>
 8019ea4:	9b01      	ldr	r3, [sp, #4]
 8019ea6:	b330      	cbz	r0, 8019ef6 <_scanf_i+0xba>
 8019ea8:	f1b8 0f01 	cmp.w	r8, #1
 8019eac:	d15a      	bne.n	8019f64 <_scanf_i+0x128>
 8019eae:	6862      	ldr	r2, [r4, #4]
 8019eb0:	b92a      	cbnz	r2, 8019ebe <_scanf_i+0x82>
 8019eb2:	6822      	ldr	r2, [r4, #0]
 8019eb4:	2108      	movs	r1, #8
 8019eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019eba:	6061      	str	r1, [r4, #4]
 8019ebc:	6022      	str	r2, [r4, #0]
 8019ebe:	6822      	ldr	r2, [r4, #0]
 8019ec0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019ec4:	6022      	str	r2, [r4, #0]
 8019ec6:	68a2      	ldr	r2, [r4, #8]
 8019ec8:	1e51      	subs	r1, r2, #1
 8019eca:	60a1      	str	r1, [r4, #8]
 8019ecc:	b19a      	cbz	r2, 8019ef6 <_scanf_i+0xba>
 8019ece:	6832      	ldr	r2, [r6, #0]
 8019ed0:	1c51      	adds	r1, r2, #1
 8019ed2:	6031      	str	r1, [r6, #0]
 8019ed4:	7812      	ldrb	r2, [r2, #0]
 8019ed6:	701a      	strb	r2, [r3, #0]
 8019ed8:	1c5d      	adds	r5, r3, #1
 8019eda:	6873      	ldr	r3, [r6, #4]
 8019edc:	3b01      	subs	r3, #1
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	6073      	str	r3, [r6, #4]
 8019ee2:	dc07      	bgt.n	8019ef4 <_scanf_i+0xb8>
 8019ee4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019ee8:	4631      	mov	r1, r6
 8019eea:	4658      	mov	r0, fp
 8019eec:	4798      	blx	r3
 8019eee:	2800      	cmp	r0, #0
 8019ef0:	f040 8086 	bne.w	801a000 <_scanf_i+0x1c4>
 8019ef4:	462b      	mov	r3, r5
 8019ef6:	f108 0801 	add.w	r8, r8, #1
 8019efa:	f1b8 0f03 	cmp.w	r8, #3
 8019efe:	d1c8      	bne.n	8019e92 <_scanf_i+0x56>
 8019f00:	6862      	ldr	r2, [r4, #4]
 8019f02:	b90a      	cbnz	r2, 8019f08 <_scanf_i+0xcc>
 8019f04:	220a      	movs	r2, #10
 8019f06:	6062      	str	r2, [r4, #4]
 8019f08:	6862      	ldr	r2, [r4, #4]
 8019f0a:	4945      	ldr	r1, [pc, #276]	; (801a020 <_scanf_i+0x1e4>)
 8019f0c:	6960      	ldr	r0, [r4, #20]
 8019f0e:	9301      	str	r3, [sp, #4]
 8019f10:	1a89      	subs	r1, r1, r2
 8019f12:	f000 f897 	bl	801a044 <__sccl>
 8019f16:	9b01      	ldr	r3, [sp, #4]
 8019f18:	f04f 0800 	mov.w	r8, #0
 8019f1c:	461d      	mov	r5, r3
 8019f1e:	68a3      	ldr	r3, [r4, #8]
 8019f20:	6822      	ldr	r2, [r4, #0]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d03a      	beq.n	8019f9c <_scanf_i+0x160>
 8019f26:	6831      	ldr	r1, [r6, #0]
 8019f28:	6960      	ldr	r0, [r4, #20]
 8019f2a:	f891 c000 	ldrb.w	ip, [r1]
 8019f2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019f32:	2800      	cmp	r0, #0
 8019f34:	d032      	beq.n	8019f9c <_scanf_i+0x160>
 8019f36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019f3a:	d121      	bne.n	8019f80 <_scanf_i+0x144>
 8019f3c:	0510      	lsls	r0, r2, #20
 8019f3e:	d51f      	bpl.n	8019f80 <_scanf_i+0x144>
 8019f40:	f108 0801 	add.w	r8, r8, #1
 8019f44:	b117      	cbz	r7, 8019f4c <_scanf_i+0x110>
 8019f46:	3301      	adds	r3, #1
 8019f48:	3f01      	subs	r7, #1
 8019f4a:	60a3      	str	r3, [r4, #8]
 8019f4c:	6873      	ldr	r3, [r6, #4]
 8019f4e:	3b01      	subs	r3, #1
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	6073      	str	r3, [r6, #4]
 8019f54:	dd1b      	ble.n	8019f8e <_scanf_i+0x152>
 8019f56:	6833      	ldr	r3, [r6, #0]
 8019f58:	3301      	adds	r3, #1
 8019f5a:	6033      	str	r3, [r6, #0]
 8019f5c:	68a3      	ldr	r3, [r4, #8]
 8019f5e:	3b01      	subs	r3, #1
 8019f60:	60a3      	str	r3, [r4, #8]
 8019f62:	e7dc      	b.n	8019f1e <_scanf_i+0xe2>
 8019f64:	f1b8 0f02 	cmp.w	r8, #2
 8019f68:	d1ad      	bne.n	8019ec6 <_scanf_i+0x8a>
 8019f6a:	6822      	ldr	r2, [r4, #0]
 8019f6c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019f70:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019f74:	d1bf      	bne.n	8019ef6 <_scanf_i+0xba>
 8019f76:	2110      	movs	r1, #16
 8019f78:	6061      	str	r1, [r4, #4]
 8019f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019f7e:	e7a1      	b.n	8019ec4 <_scanf_i+0x88>
 8019f80:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019f84:	6022      	str	r2, [r4, #0]
 8019f86:	780b      	ldrb	r3, [r1, #0]
 8019f88:	702b      	strb	r3, [r5, #0]
 8019f8a:	3501      	adds	r5, #1
 8019f8c:	e7de      	b.n	8019f4c <_scanf_i+0x110>
 8019f8e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019f92:	4631      	mov	r1, r6
 8019f94:	4658      	mov	r0, fp
 8019f96:	4798      	blx	r3
 8019f98:	2800      	cmp	r0, #0
 8019f9a:	d0df      	beq.n	8019f5c <_scanf_i+0x120>
 8019f9c:	6823      	ldr	r3, [r4, #0]
 8019f9e:	05d9      	lsls	r1, r3, #23
 8019fa0:	d50c      	bpl.n	8019fbc <_scanf_i+0x180>
 8019fa2:	454d      	cmp	r5, r9
 8019fa4:	d908      	bls.n	8019fb8 <_scanf_i+0x17c>
 8019fa6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019fae:	4632      	mov	r2, r6
 8019fb0:	4658      	mov	r0, fp
 8019fb2:	4798      	blx	r3
 8019fb4:	1e6f      	subs	r7, r5, #1
 8019fb6:	463d      	mov	r5, r7
 8019fb8:	454d      	cmp	r5, r9
 8019fba:	d029      	beq.n	801a010 <_scanf_i+0x1d4>
 8019fbc:	6822      	ldr	r2, [r4, #0]
 8019fbe:	f012 0210 	ands.w	r2, r2, #16
 8019fc2:	d113      	bne.n	8019fec <_scanf_i+0x1b0>
 8019fc4:	702a      	strb	r2, [r5, #0]
 8019fc6:	6863      	ldr	r3, [r4, #4]
 8019fc8:	9e00      	ldr	r6, [sp, #0]
 8019fca:	4649      	mov	r1, r9
 8019fcc:	4658      	mov	r0, fp
 8019fce:	47b0      	blx	r6
 8019fd0:	f8da 3000 	ldr.w	r3, [sl]
 8019fd4:	6821      	ldr	r1, [r4, #0]
 8019fd6:	1d1a      	adds	r2, r3, #4
 8019fd8:	f8ca 2000 	str.w	r2, [sl]
 8019fdc:	f011 0f20 	tst.w	r1, #32
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	d010      	beq.n	801a006 <_scanf_i+0x1ca>
 8019fe4:	6018      	str	r0, [r3, #0]
 8019fe6:	68e3      	ldr	r3, [r4, #12]
 8019fe8:	3301      	adds	r3, #1
 8019fea:	60e3      	str	r3, [r4, #12]
 8019fec:	eba5 0509 	sub.w	r5, r5, r9
 8019ff0:	44a8      	add	r8, r5
 8019ff2:	6925      	ldr	r5, [r4, #16]
 8019ff4:	4445      	add	r5, r8
 8019ff6:	6125      	str	r5, [r4, #16]
 8019ff8:	2000      	movs	r0, #0
 8019ffa:	b007      	add	sp, #28
 8019ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a000:	f04f 0800 	mov.w	r8, #0
 801a004:	e7ca      	b.n	8019f9c <_scanf_i+0x160>
 801a006:	07ca      	lsls	r2, r1, #31
 801a008:	bf4c      	ite	mi
 801a00a:	8018      	strhmi	r0, [r3, #0]
 801a00c:	6018      	strpl	r0, [r3, #0]
 801a00e:	e7ea      	b.n	8019fe6 <_scanf_i+0x1aa>
 801a010:	2001      	movs	r0, #1
 801a012:	e7f2      	b.n	8019ffa <_scanf_i+0x1be>
 801a014:	0801a860 	.word	0x0801a860
 801a018:	08017a49 	.word	0x08017a49
 801a01c:	0801a1c1 	.word	0x0801a1c1
 801a020:	0801aadd 	.word	0x0801aadd

0801a024 <_sbrk_r>:
 801a024:	b538      	push	{r3, r4, r5, lr}
 801a026:	4c06      	ldr	r4, [pc, #24]	; (801a040 <_sbrk_r+0x1c>)
 801a028:	2300      	movs	r3, #0
 801a02a:	4605      	mov	r5, r0
 801a02c:	4608      	mov	r0, r1
 801a02e:	6023      	str	r3, [r4, #0]
 801a030:	f7ed ff9c 	bl	8007f6c <_sbrk>
 801a034:	1c43      	adds	r3, r0, #1
 801a036:	d102      	bne.n	801a03e <_sbrk_r+0x1a>
 801a038:	6823      	ldr	r3, [r4, #0]
 801a03a:	b103      	cbz	r3, 801a03e <_sbrk_r+0x1a>
 801a03c:	602b      	str	r3, [r5, #0]
 801a03e:	bd38      	pop	{r3, r4, r5, pc}
 801a040:	20049d04 	.word	0x20049d04

0801a044 <__sccl>:
 801a044:	b570      	push	{r4, r5, r6, lr}
 801a046:	780b      	ldrb	r3, [r1, #0]
 801a048:	2b5e      	cmp	r3, #94	; 0x5e
 801a04a:	bf13      	iteet	ne
 801a04c:	1c4a      	addne	r2, r1, #1
 801a04e:	1c8a      	addeq	r2, r1, #2
 801a050:	784b      	ldrbeq	r3, [r1, #1]
 801a052:	2100      	movne	r1, #0
 801a054:	bf08      	it	eq
 801a056:	2101      	moveq	r1, #1
 801a058:	1e44      	subs	r4, r0, #1
 801a05a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801a05e:	f804 1f01 	strb.w	r1, [r4, #1]!
 801a062:	42ac      	cmp	r4, r5
 801a064:	d1fb      	bne.n	801a05e <__sccl+0x1a>
 801a066:	b913      	cbnz	r3, 801a06e <__sccl+0x2a>
 801a068:	3a01      	subs	r2, #1
 801a06a:	4610      	mov	r0, r2
 801a06c:	bd70      	pop	{r4, r5, r6, pc}
 801a06e:	f081 0401 	eor.w	r4, r1, #1
 801a072:	54c4      	strb	r4, [r0, r3]
 801a074:	1c51      	adds	r1, r2, #1
 801a076:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801a07a:	2d2d      	cmp	r5, #45	; 0x2d
 801a07c:	f101 36ff 	add.w	r6, r1, #4294967295
 801a080:	460a      	mov	r2, r1
 801a082:	d006      	beq.n	801a092 <__sccl+0x4e>
 801a084:	2d5d      	cmp	r5, #93	; 0x5d
 801a086:	d0f0      	beq.n	801a06a <__sccl+0x26>
 801a088:	b90d      	cbnz	r5, 801a08e <__sccl+0x4a>
 801a08a:	4632      	mov	r2, r6
 801a08c:	e7ed      	b.n	801a06a <__sccl+0x26>
 801a08e:	462b      	mov	r3, r5
 801a090:	e7ef      	b.n	801a072 <__sccl+0x2e>
 801a092:	780e      	ldrb	r6, [r1, #0]
 801a094:	2e5d      	cmp	r6, #93	; 0x5d
 801a096:	d0fa      	beq.n	801a08e <__sccl+0x4a>
 801a098:	42b3      	cmp	r3, r6
 801a09a:	dcf8      	bgt.n	801a08e <__sccl+0x4a>
 801a09c:	3301      	adds	r3, #1
 801a09e:	429e      	cmp	r6, r3
 801a0a0:	54c4      	strb	r4, [r0, r3]
 801a0a2:	dcfb      	bgt.n	801a09c <__sccl+0x58>
 801a0a4:	3102      	adds	r1, #2
 801a0a6:	e7e6      	b.n	801a076 <__sccl+0x32>

0801a0a8 <strncmp>:
 801a0a8:	b510      	push	{r4, lr}
 801a0aa:	b16a      	cbz	r2, 801a0c8 <strncmp+0x20>
 801a0ac:	3901      	subs	r1, #1
 801a0ae:	1884      	adds	r4, r0, r2
 801a0b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a0b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a0b8:	4293      	cmp	r3, r2
 801a0ba:	d103      	bne.n	801a0c4 <strncmp+0x1c>
 801a0bc:	42a0      	cmp	r0, r4
 801a0be:	d001      	beq.n	801a0c4 <strncmp+0x1c>
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d1f5      	bne.n	801a0b0 <strncmp+0x8>
 801a0c4:	1a98      	subs	r0, r3, r2
 801a0c6:	bd10      	pop	{r4, pc}
 801a0c8:	4610      	mov	r0, r2
 801a0ca:	e7fc      	b.n	801a0c6 <strncmp+0x1e>

0801a0cc <_strtoul_l.isra.0>:
 801a0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0d0:	4680      	mov	r8, r0
 801a0d2:	4689      	mov	r9, r1
 801a0d4:	4692      	mov	sl, r2
 801a0d6:	461e      	mov	r6, r3
 801a0d8:	460f      	mov	r7, r1
 801a0da:	463d      	mov	r5, r7
 801a0dc:	9808      	ldr	r0, [sp, #32]
 801a0de:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a0e2:	f7fe fe4f 	bl	8018d84 <__locale_ctype_ptr_l>
 801a0e6:	4420      	add	r0, r4
 801a0e8:	7843      	ldrb	r3, [r0, #1]
 801a0ea:	f013 0308 	ands.w	r3, r3, #8
 801a0ee:	d130      	bne.n	801a152 <_strtoul_l.isra.0+0x86>
 801a0f0:	2c2d      	cmp	r4, #45	; 0x2d
 801a0f2:	d130      	bne.n	801a156 <_strtoul_l.isra.0+0x8a>
 801a0f4:	787c      	ldrb	r4, [r7, #1]
 801a0f6:	1cbd      	adds	r5, r7, #2
 801a0f8:	2101      	movs	r1, #1
 801a0fa:	2e00      	cmp	r6, #0
 801a0fc:	d05c      	beq.n	801a1b8 <_strtoul_l.isra.0+0xec>
 801a0fe:	2e10      	cmp	r6, #16
 801a100:	d109      	bne.n	801a116 <_strtoul_l.isra.0+0x4a>
 801a102:	2c30      	cmp	r4, #48	; 0x30
 801a104:	d107      	bne.n	801a116 <_strtoul_l.isra.0+0x4a>
 801a106:	782b      	ldrb	r3, [r5, #0]
 801a108:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a10c:	2b58      	cmp	r3, #88	; 0x58
 801a10e:	d14e      	bne.n	801a1ae <_strtoul_l.isra.0+0xe2>
 801a110:	786c      	ldrb	r4, [r5, #1]
 801a112:	2610      	movs	r6, #16
 801a114:	3502      	adds	r5, #2
 801a116:	f04f 32ff 	mov.w	r2, #4294967295
 801a11a:	2300      	movs	r3, #0
 801a11c:	fbb2 f2f6 	udiv	r2, r2, r6
 801a120:	fb06 fc02 	mul.w	ip, r6, r2
 801a124:	ea6f 0c0c 	mvn.w	ip, ip
 801a128:	4618      	mov	r0, r3
 801a12a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801a12e:	2f09      	cmp	r7, #9
 801a130:	d817      	bhi.n	801a162 <_strtoul_l.isra.0+0x96>
 801a132:	463c      	mov	r4, r7
 801a134:	42a6      	cmp	r6, r4
 801a136:	dd23      	ble.n	801a180 <_strtoul_l.isra.0+0xb4>
 801a138:	2b00      	cmp	r3, #0
 801a13a:	db1e      	blt.n	801a17a <_strtoul_l.isra.0+0xae>
 801a13c:	4282      	cmp	r2, r0
 801a13e:	d31c      	bcc.n	801a17a <_strtoul_l.isra.0+0xae>
 801a140:	d101      	bne.n	801a146 <_strtoul_l.isra.0+0x7a>
 801a142:	45a4      	cmp	ip, r4
 801a144:	db19      	blt.n	801a17a <_strtoul_l.isra.0+0xae>
 801a146:	fb00 4006 	mla	r0, r0, r6, r4
 801a14a:	2301      	movs	r3, #1
 801a14c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a150:	e7eb      	b.n	801a12a <_strtoul_l.isra.0+0x5e>
 801a152:	462f      	mov	r7, r5
 801a154:	e7c1      	b.n	801a0da <_strtoul_l.isra.0+0xe>
 801a156:	2c2b      	cmp	r4, #43	; 0x2b
 801a158:	bf04      	itt	eq
 801a15a:	1cbd      	addeq	r5, r7, #2
 801a15c:	787c      	ldrbeq	r4, [r7, #1]
 801a15e:	4619      	mov	r1, r3
 801a160:	e7cb      	b.n	801a0fa <_strtoul_l.isra.0+0x2e>
 801a162:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801a166:	2f19      	cmp	r7, #25
 801a168:	d801      	bhi.n	801a16e <_strtoul_l.isra.0+0xa2>
 801a16a:	3c37      	subs	r4, #55	; 0x37
 801a16c:	e7e2      	b.n	801a134 <_strtoul_l.isra.0+0x68>
 801a16e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801a172:	2f19      	cmp	r7, #25
 801a174:	d804      	bhi.n	801a180 <_strtoul_l.isra.0+0xb4>
 801a176:	3c57      	subs	r4, #87	; 0x57
 801a178:	e7dc      	b.n	801a134 <_strtoul_l.isra.0+0x68>
 801a17a:	f04f 33ff 	mov.w	r3, #4294967295
 801a17e:	e7e5      	b.n	801a14c <_strtoul_l.isra.0+0x80>
 801a180:	2b00      	cmp	r3, #0
 801a182:	da09      	bge.n	801a198 <_strtoul_l.isra.0+0xcc>
 801a184:	2322      	movs	r3, #34	; 0x22
 801a186:	f8c8 3000 	str.w	r3, [r8]
 801a18a:	f04f 30ff 	mov.w	r0, #4294967295
 801a18e:	f1ba 0f00 	cmp.w	sl, #0
 801a192:	d107      	bne.n	801a1a4 <_strtoul_l.isra.0+0xd8>
 801a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a198:	b101      	cbz	r1, 801a19c <_strtoul_l.isra.0+0xd0>
 801a19a:	4240      	negs	r0, r0
 801a19c:	f1ba 0f00 	cmp.w	sl, #0
 801a1a0:	d0f8      	beq.n	801a194 <_strtoul_l.isra.0+0xc8>
 801a1a2:	b10b      	cbz	r3, 801a1a8 <_strtoul_l.isra.0+0xdc>
 801a1a4:	f105 39ff 	add.w	r9, r5, #4294967295
 801a1a8:	f8ca 9000 	str.w	r9, [sl]
 801a1ac:	e7f2      	b.n	801a194 <_strtoul_l.isra.0+0xc8>
 801a1ae:	2430      	movs	r4, #48	; 0x30
 801a1b0:	2e00      	cmp	r6, #0
 801a1b2:	d1b0      	bne.n	801a116 <_strtoul_l.isra.0+0x4a>
 801a1b4:	2608      	movs	r6, #8
 801a1b6:	e7ae      	b.n	801a116 <_strtoul_l.isra.0+0x4a>
 801a1b8:	2c30      	cmp	r4, #48	; 0x30
 801a1ba:	d0a4      	beq.n	801a106 <_strtoul_l.isra.0+0x3a>
 801a1bc:	260a      	movs	r6, #10
 801a1be:	e7aa      	b.n	801a116 <_strtoul_l.isra.0+0x4a>

0801a1c0 <_strtoul_r>:
 801a1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1c2:	4c06      	ldr	r4, [pc, #24]	; (801a1dc <_strtoul_r+0x1c>)
 801a1c4:	4d06      	ldr	r5, [pc, #24]	; (801a1e0 <_strtoul_r+0x20>)
 801a1c6:	6824      	ldr	r4, [r4, #0]
 801a1c8:	6a24      	ldr	r4, [r4, #32]
 801a1ca:	2c00      	cmp	r4, #0
 801a1cc:	bf08      	it	eq
 801a1ce:	462c      	moveq	r4, r5
 801a1d0:	9400      	str	r4, [sp, #0]
 801a1d2:	f7ff ff7b 	bl	801a0cc <_strtoul_l.isra.0>
 801a1d6:	b003      	add	sp, #12
 801a1d8:	bd30      	pop	{r4, r5, pc}
 801a1da:	bf00      	nop
 801a1dc:	2000000c 	.word	0x2000000c
 801a1e0:	20000070 	.word	0x20000070

0801a1e4 <__submore>:
 801a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e8:	460c      	mov	r4, r1
 801a1ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a1ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1f0:	4299      	cmp	r1, r3
 801a1f2:	d11d      	bne.n	801a230 <__submore+0x4c>
 801a1f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a1f8:	f7ff fa66 	bl	80196c8 <_malloc_r>
 801a1fc:	b918      	cbnz	r0, 801a206 <__submore+0x22>
 801a1fe:	f04f 30ff 	mov.w	r0, #4294967295
 801a202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a20a:	63a3      	str	r3, [r4, #56]	; 0x38
 801a20c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a210:	6360      	str	r0, [r4, #52]	; 0x34
 801a212:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a216:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a21a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a21e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a222:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a226:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a22a:	6020      	str	r0, [r4, #0]
 801a22c:	2000      	movs	r0, #0
 801a22e:	e7e8      	b.n	801a202 <__submore+0x1e>
 801a230:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a232:	0077      	lsls	r7, r6, #1
 801a234:	463a      	mov	r2, r7
 801a236:	f000 f837 	bl	801a2a8 <_realloc_r>
 801a23a:	4605      	mov	r5, r0
 801a23c:	2800      	cmp	r0, #0
 801a23e:	d0de      	beq.n	801a1fe <__submore+0x1a>
 801a240:	eb00 0806 	add.w	r8, r0, r6
 801a244:	4601      	mov	r1, r0
 801a246:	4632      	mov	r2, r6
 801a248:	4640      	mov	r0, r8
 801a24a:	f7fe fdd7 	bl	8018dfc <memcpy>
 801a24e:	f8c4 8000 	str.w	r8, [r4]
 801a252:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a256:	e7e9      	b.n	801a22c <__submore+0x48>

0801a258 <__ascii_wctomb>:
 801a258:	b149      	cbz	r1, 801a26e <__ascii_wctomb+0x16>
 801a25a:	2aff      	cmp	r2, #255	; 0xff
 801a25c:	bf85      	ittet	hi
 801a25e:	238a      	movhi	r3, #138	; 0x8a
 801a260:	6003      	strhi	r3, [r0, #0]
 801a262:	700a      	strbls	r2, [r1, #0]
 801a264:	f04f 30ff 	movhi.w	r0, #4294967295
 801a268:	bf98      	it	ls
 801a26a:	2001      	movls	r0, #1
 801a26c:	4770      	bx	lr
 801a26e:	4608      	mov	r0, r1
 801a270:	4770      	bx	lr

0801a272 <memmove>:
 801a272:	4288      	cmp	r0, r1
 801a274:	b510      	push	{r4, lr}
 801a276:	eb01 0302 	add.w	r3, r1, r2
 801a27a:	d807      	bhi.n	801a28c <memmove+0x1a>
 801a27c:	1e42      	subs	r2, r0, #1
 801a27e:	4299      	cmp	r1, r3
 801a280:	d00a      	beq.n	801a298 <memmove+0x26>
 801a282:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a286:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a28a:	e7f8      	b.n	801a27e <memmove+0xc>
 801a28c:	4283      	cmp	r3, r0
 801a28e:	d9f5      	bls.n	801a27c <memmove+0xa>
 801a290:	1881      	adds	r1, r0, r2
 801a292:	1ad2      	subs	r2, r2, r3
 801a294:	42d3      	cmn	r3, r2
 801a296:	d100      	bne.n	801a29a <memmove+0x28>
 801a298:	bd10      	pop	{r4, pc}
 801a29a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a29e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a2a2:	e7f7      	b.n	801a294 <memmove+0x22>

0801a2a4 <__malloc_lock>:
 801a2a4:	4770      	bx	lr

0801a2a6 <__malloc_unlock>:
 801a2a6:	4770      	bx	lr

0801a2a8 <_realloc_r>:
 801a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2aa:	4607      	mov	r7, r0
 801a2ac:	4614      	mov	r4, r2
 801a2ae:	460e      	mov	r6, r1
 801a2b0:	b921      	cbnz	r1, 801a2bc <_realloc_r+0x14>
 801a2b2:	4611      	mov	r1, r2
 801a2b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a2b8:	f7ff ba06 	b.w	80196c8 <_malloc_r>
 801a2bc:	b922      	cbnz	r2, 801a2c8 <_realloc_r+0x20>
 801a2be:	f7ff f9b5 	bl	801962c <_free_r>
 801a2c2:	4625      	mov	r5, r4
 801a2c4:	4628      	mov	r0, r5
 801a2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2c8:	f000 f814 	bl	801a2f4 <_malloc_usable_size_r>
 801a2cc:	42a0      	cmp	r0, r4
 801a2ce:	d20f      	bcs.n	801a2f0 <_realloc_r+0x48>
 801a2d0:	4621      	mov	r1, r4
 801a2d2:	4638      	mov	r0, r7
 801a2d4:	f7ff f9f8 	bl	80196c8 <_malloc_r>
 801a2d8:	4605      	mov	r5, r0
 801a2da:	2800      	cmp	r0, #0
 801a2dc:	d0f2      	beq.n	801a2c4 <_realloc_r+0x1c>
 801a2de:	4631      	mov	r1, r6
 801a2e0:	4622      	mov	r2, r4
 801a2e2:	f7fe fd8b 	bl	8018dfc <memcpy>
 801a2e6:	4631      	mov	r1, r6
 801a2e8:	4638      	mov	r0, r7
 801a2ea:	f7ff f99f 	bl	801962c <_free_r>
 801a2ee:	e7e9      	b.n	801a2c4 <_realloc_r+0x1c>
 801a2f0:	4635      	mov	r5, r6
 801a2f2:	e7e7      	b.n	801a2c4 <_realloc_r+0x1c>

0801a2f4 <_malloc_usable_size_r>:
 801a2f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a2f8:	1f18      	subs	r0, r3, #4
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	bfbc      	itt	lt
 801a2fe:	580b      	ldrlt	r3, [r1, r0]
 801a300:	18c0      	addlt	r0, r0, r3
 801a302:	4770      	bx	lr

0801a304 <_init>:
 801a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a306:	bf00      	nop
 801a308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a30a:	bc08      	pop	{r3}
 801a30c:	469e      	mov	lr, r3
 801a30e:	4770      	bx	lr

0801a310 <_fini>:
 801a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a312:	bf00      	nop
 801a314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a316:	bc08      	pop	{r3}
 801a318:	469e      	mov	lr, r3
 801a31a:	4770      	bx	lr
