
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000176d0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  08017890  08017890  00027890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018374  08018374  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018374  08018374  00028374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801837c  0801837c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801837c  0801837c  0002837c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018384  08018384  00028384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018388  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037df0  200001e0  08018564  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20037fd0  08018564  00037fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037b8b  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000078b5  00000000  00000000  00067d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021d8  00000000  00000000  0006f650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f18  00000000  00000000  00071828  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036f26  00000000  00000000  00073740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025748  00000000  00000000  000aa666  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011024e  00000000  00000000  000cfdae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dfffc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0d0  00000000  00000000  001e0078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017878 	.word	0x08017878

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017878 	.word	0x08017878

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f008 f8f0 	bl	80091bc <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20035ac4 	.word	0x20035ac4

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f008 f8d8 	bl	80091bc <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20035ac4 	.word	0x20035ac4

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 ff61 	bl	8008ee8 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 fcc8 	bl	80079bc <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fcc2 	bl	80079bc <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fcbc 	bl	80079bc <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fcb6 	bl	80079bc <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 fcb0 	bl	80079bc <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 fcaa 	bl	80079bc <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 fca4 	bl	80079bc <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fc9e 	bl	80079bc <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fc98 	bl	80079bc <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 fc92 	bl	80079bc <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fc86 	bl	80079bc <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 fc80 	bl	80079bc <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 ff79 	bl	8015020 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <_ZN7Encoder4initEv+0x30>)
 80011b0:	f00b fe9c 	bl	800ceec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <_ZN7Encoder4initEv+0x34>)
 80011b8:	f00b fe98 	bl	800ceec <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_ZN7Encoder4initEv+0x38>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <_ZN7Encoder4initEv+0x3c>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20035d18 	.word	0x20035d18
 80011d8:	200359fc 	.word	0x200359fc
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40010400 	.word	0x40010400
 80011e4:	00000000 	.word	0x00000000

080011e8 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f0:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1c8>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fc:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <_ZN7Encoder9updateCntEv+0x1d4>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001224:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <_ZN7Encoder9updateCntEv+0x1d8>)
 8001234:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f99d 	bl	8000578 <__aeabi_f2d>
 800123e:	a356      	add	r3, pc, #344	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9f0 	bl	8000628 <__aeabi_dmul>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4625      	mov	r5, r4
 800124e:	461c      	mov	r4, r3
 8001250:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f98f 	bl	8000578 <__aeabi_f2d>
 800125a:	a351      	add	r3, pc, #324	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9e2 	bl	8000628 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f826 	bl	80002bc <__adddf3>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f7ff fcce 	bl	8000c18 <__aeabi_d2f>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f977 	bl	8000578 <__aeabi_f2d>
 800128a:	a343      	add	r3, pc, #268	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f9ca 	bl	8000628 <__aeabi_dmul>
 8001294:	4603      	mov	r3, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4625      	mov	r5, r4
 800129a:	461c      	mov	r4, r3
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f969 	bl	8000578 <__aeabi_f2d>
 80012a6:	a33e      	add	r3, pc, #248	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9bc 	bl	8000628 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7ff f800 	bl	80002bc <__adddf3>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4618      	mov	r0, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	f7ff fca8 	bl	8000c18 <__aeabi_d2f>
 80012c8:	4602      	mov	r2, r0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a3e      	ldr	r2, [pc, #248]	; (80013cc <_ZN7Encoder9updateCntEv+0x1e4>)
 80012d4:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 80012dc:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a39      	ldr	r2, [pc, #228]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 80012e4:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edd3 7a01 	vldr	s15, [r3, #4]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	ed93 7a00 	vldr	s14, [r3]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edd3 7a01 	vldr	s15, [r3, #4]
 800131e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff f927 	bl	8000578 <__aeabi_f2d>
 800132a:	a31f      	add	r3, pc, #124	; (adr r3, 80013a8 <_ZN7Encoder9updateCntEv+0x1c0>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f97a 	bl	8000628 <__aeabi_dmul>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	4618      	mov	r0, r3
 800133a:	4621      	mov	r1, r4
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001344:	f7ff fa9a 	bl	800087c <__aeabi_ddiv>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff fc62 	bl	8000c18 <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edd3 7a02 	vldr	s15, [r3, #8]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	edc3 7a05 	vstr	s15, [r3, #20]
	cross_line_ignore_distance_ += distance_;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed93 7a06 	vldr	s14, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edd3 7a02 	vldr	s15, [r3, #8]
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	edc3 7a06 	vstr	s15, [r3, #24]
	monitor_distance = total_distance_;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <_ZN7Encoder9updateCntEv+0x1e8>)
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	bf00      	nop
 8001398:	9999999a 	.word	0x9999999a
 800139c:	3fa99999 	.word	0x3fa99999
 80013a0:	66666666 	.word	0x66666666
 80013a4:	3fee6666 	.word	0x3fee6666
 80013a8:	ce73a049 	.word	0xce73a049
 80013ac:	3f77a3f6 	.word	0x3f77a3f6
 80013b0:	40010000 	.word	0x40010000
 80013b4:	47000000 	.word	0x47000000
 80013b8:	3f912547 	.word	0x3f912547
 80013bc:	40010400 	.word	0x40010400
 80013c0:	20000200 	.word	0x20000200
 80013c4:	20000208 	.word	0x20000208
 80013c8:	2000020c 	.word	0x2000020c
 80013cc:	20000204 	.word	0x20000204
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	return distance_;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	ee07 3a90 	vmov	s15, r3
}
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	ee07 3a90 	vmov	s15, r3
}
 800142a:	eeb0 0a67 	vmov.f32	s0, s15
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <_ZN7Encoder8clearCntEv+0x3c>)
 800146e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_ZN7Encoder8clearCntEv+0x40>)
 8001476:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40010000 	.word	0x40010000
 8001494:	40010400 	.word	0x40010400

08001498 <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	ee07 3a90 	vmov	s15, r3
}
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f978 	bl	8001804 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001514:	f000 f98c 	bl	8001830 <fopen_folder_and_file>

	return ret;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <user_fclose+0x1c>)
 8001530:	f010 fa36 	bl	80119a0 <f_close>

	return ret;
 8001534:	79fb      	ldrb	r3, [r7, #7]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20034908 	.word	0x20034908

08001544 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af02      	add	r7, sp, #8
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	80fb      	strh	r3, [r7, #6]
 8001550:	4613      	mov	r3, r2
 8001552:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001558:	2300      	movs	r3, #0
 800155a:	81fb      	strh	r3, [r7, #14]
 800155c:	e030      	b.n	80015c0 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800155e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f804 	bl	8000578 <__aeabi_f2d>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	e9cd 3400 	strd	r3, r4, [sp]
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <sd_write_float+0x94>)
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4817      	ldr	r0, [pc, #92]	; (80015dc <sd_write_float+0x98>)
 800157e:	f012 fe03 	bl	8014188 <sniprintf>

		if(state == ADD_WRITE){
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <sd_write_float+0x9c>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4619      	mov	r1, r3
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <sd_write_float+0x9c>)
 8001590:	f010 fa7a 	bl	8011a88 <f_lseek>
 8001594:	e003      	b.n	800159e <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001596:	2100      	movs	r1, #0
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <sd_write_float+0x9c>)
 800159a:	f010 fa75 	bl	8011a88 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800159e:	480f      	ldr	r0, [pc, #60]	; (80015dc <sd_write_float+0x98>)
 80015a0:	f7fe fe2e 	bl	8000200 <strlen>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <sd_write_float+0xa0>)
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <sd_write_float+0x98>)
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <sd_write_float+0x9c>)
 80015ac:	f00f ffe3 	bl	8011576 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015b0:	f000 f958 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	81fb      	strh	r3, [r7, #14]
 80015c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbc8      	blt.n	800155e <sd_write_float+0x1a>
	}
	return ret;
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08017890 	.word	0x08017890
 80015dc:	20034878 	.word	0x20034878
 80015e0:	20034908 	.word	0x20034908
 80015e4:	200348f8 	.word	0x200348f8

080015e8 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f900 	bl	8001804 <create_path>

	if(state == OVER_WRITE){
 8001604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <sd_write_array_float+0x36>
		f_chdir(dirpath);
 800160c:	4822      	ldr	r0, [pc, #136]	; (8001698 <sd_write_array_float+0xb0>)
 800160e:	f010 f9f1 	bl	80119f4 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <sd_write_array_float+0xb4>)
 8001614:	f010 fc5c 	bl	8011ed0 <f_unlink>
		f_chdir("..");
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <sd_write_array_float+0xb8>)
 800161a:	f010 f9eb 	bl	80119f4 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800161e:	f000 f907 	bl	8001830 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001622:	2300      	movs	r3, #0
 8001624:	82fb      	strh	r3, [r7, #22]
 8001626:	e028      	b.n	800167a <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001628:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff9f 	bl	8000578 <__aeabi_f2d>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	e9cd 3400 	strd	r3, r4, [sp]
 8001642:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <sd_write_array_float+0xbc>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <sd_write_array_float+0xc0>)
 8001648:	f012 fd9e 	bl	8014188 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <sd_write_array_float+0xc4>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4619      	mov	r1, r3
 8001652:	4816      	ldr	r0, [pc, #88]	; (80016ac <sd_write_array_float+0xc4>)
 8001654:	f010 fa18 	bl	8011a88 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <sd_write_array_float+0xc0>)
 800165a:	f7fe fdd1 	bl	8000200 <strlen>
 800165e:	4602      	mov	r2, r0
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <sd_write_array_float+0xc8>)
 8001662:	4911      	ldr	r1, [pc, #68]	; (80016a8 <sd_write_array_float+0xc0>)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <sd_write_array_float+0xc4>)
 8001666:	f00f ff86 	bl	8011576 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800166a:	f000 f8fb 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 800166e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001672:	b29b      	uxth	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	82fb      	strh	r3, [r7, #22]
 800167a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbd0      	blt.n	8001628 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <sd_write_array_float+0xc4>)
 8001688:	f010 f98a 	bl	80119a0 <f_close>

	return ret;
 800168c:	7d7b      	ldrb	r3, [r7, #21]
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	20034778 	.word	0x20034778
 800169c:	20033638 	.word	0x20033638
 80016a0:	080178ac 	.word	0x080178ac
 80016a4:	08017890 	.word	0x08017890
 80016a8:	20034878 	.word	0x20034878
 80016ac:	20034908 	.word	0x20034908
 80016b0:	200348f8 	.word	0x200348f8

080016b4 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f898 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016d4:	f000 f8ac 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016d8:	e019      	b.n	800170e <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4913      	ldr	r1, [pc, #76]	; (8001734 <sd_read_array_float+0x80>)
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <sd_read_array_float+0x84>)
 80016ea:	f012 fda1 	bl	8014230 <siscanf>
		i++;
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	429a      	cmp	r2, r3
 8001704:	db03      	blt.n	800170e <sd_read_array_float+0x5a>
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	3b01      	subs	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <sd_read_array_float+0x88>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <sd_read_array_float+0x84>)
 8001714:	f010 fdba 	bl	801228c <f_gets>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1dd      	bne.n	80016da <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800171e:	f000 f8a1 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <sd_read_array_float+0x88>)
 8001724:	f010 f93c 	bl	80119a0 <f_close>

	return ret;
 8001728:	7d7b      	ldrb	r3, [r7, #21]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	0801789c 	.word	0x0801789c
 8001738:	20034878 	.word	0x20034878
 800173c:	20034908 	.word	0x20034908

08001740 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f852 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001760:	f000 f866 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001764:	e019      	b.n	800179a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4913      	ldr	r1, [pc, #76]	; (80017c0 <sd_read_array_double+0x80>)
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <sd_read_array_double+0x84>)
 8001776:	f012 fd5b 	bl	8014230 <siscanf>
		i++;
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	b29b      	uxth	r3, r3
 8001780:	3301      	adds	r3, #1
 8001782:	b29b      	uxth	r3, r3
 8001784:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178e:	429a      	cmp	r2, r3
 8001790:	db03      	blt.n	800179a <sd_read_array_double+0x5a>
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	3b01      	subs	r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <sd_read_array_double+0x88>)
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <sd_read_array_double+0x84>)
 80017a0:	f010 fd74 	bl	801228c <f_gets>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1dd      	bne.n	8001766 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017aa:	f000 f85b 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <sd_read_array_double+0x88>)
 80017b0:	f010 f8f6 	bl	80119a0 <f_close>

	return ret;
 80017b4:	7d7b      	ldrb	r3, [r7, #21]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	080178a8 	.word	0x080178a8
 80017c4:	20034878 	.word	0x20034878
 80017c8:	20034908 	.word	0x20034908

080017cc <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017d6:	2201      	movs	r2, #1
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <sd_mount+0x30>)
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <sd_mount+0x34>)
 80017dc:	f00f fb58 	bl	8010e90 <f_mount>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <sd_mount+0x20>
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <sd_mount+0x24>
	else ret = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	71fb      	strb	r3, [r7, #7]

	return ret;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	080178b8 	.word	0x080178b8
 8001800:	20033738 	.word	0x20033738

08001804 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <create_path+0x24>)
 8001812:	f012 fd39 	bl	8014288 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <create_path+0x28>)
 800181a:	f012 fd35 	bl	8014288 <strcpy>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20034778 	.word	0x20034778
 800182c:	20033638 	.word	0x20033638

08001830 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <fopen_folder_and_file+0x24>)
 8001836:	f010 fc0d 	bl	8012054 <f_mkdir>

	f_chdir(dirpath);
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <fopen_folder_and_file+0x24>)
 800183c:	f010 f8da 	bl	80119f4 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001840:	2213      	movs	r2, #19
 8001842:	4905      	ldr	r1, [pc, #20]	; (8001858 <fopen_folder_and_file+0x28>)
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <fopen_folder_and_file+0x2c>)
 8001846:	f00f fb69 	bl	8010f1c <f_open>

	f_chdir("..");
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <fopen_folder_and_file+0x30>)
 800184c:	f010 f8d2 	bl	80119f4 <f_chdir>


}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20034778 	.word	0x20034778
 8001858:	20033638 	.word	0x20033638
 800185c:	20034908 	.word	0x20034908
 8001860:	080178ac 	.word	0x080178ac

08001864 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e007      	b.n	8001880 <bufclear+0x1c>
		buffer[i] = '\0';
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <bufclear+0x30>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3301      	adds	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	ddf4      	ble.n	8001870 <bufclear+0xc>
	}
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20034878 	.word	0x20034878

08001898 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <read_byte+0x54>)
 80018b4:	f007 fb18 	bl	8008ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018b8:	f107 010f 	add.w	r1, r7, #15
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	2201      	movs	r2, #1
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <read_byte+0x58>)
 80018c2:	f00a fcd9 	bl	800c278 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018c6:	f107 010e 	add.w	r1, r7, #14
 80018ca:	2364      	movs	r3, #100	; 0x64
 80018cc:	2201      	movs	r2, #1
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <read_byte+0x58>)
 80018d0:	f00a fe06 	bl	800c4e0 <HAL_SPI_Receive>
	CS_SET;
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <read_byte+0x54>)
 80018dc:	f007 fb04 	bl	8008ee8 <HAL_GPIO_WritePin>

	return val;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020400 	.word	0x40020400
 80018f0:	200359a4 	.word	0x200359a4

080018f4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <write_byte+0x54>)
 8001916:	f007 fae7 	bl	8008ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800191a:	f107 010f 	add.w	r1, r7, #15
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	2201      	movs	r2, #1
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <write_byte+0x58>)
 8001924:	f00a fca8 	bl	800c278 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001928:	1db9      	adds	r1, r7, #6
 800192a:	2364      	movs	r3, #100	; 0x64
 800192c:	2201      	movs	r2, #1
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <write_byte+0x58>)
 8001930:	f00a fca2 	bl	800c278 <HAL_SPI_Transmit>
	CS_SET;
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <write_byte+0x54>)
 800193c:	f007 fad4 	bl	8008ee8 <HAL_GPIO_WritePin>
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020400 	.word	0x40020400
 800194c:	200359a4 	.word	0x200359a4

08001950 <IMU_init>:

uint16_t IMU_init() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff ff9c 	bl	8001898 <read_byte>
 8001960:	4603      	mov	r3, r0
 8001962:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	2be0      	cmp	r3, #224	; 0xe0
 8001968:	d119      	bne.n	800199e <IMU_init+0x4e>
		ret = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800196e:	2101      	movs	r1, #1
 8001970:	2006      	movs	r0, #6
 8001972:	f7ff ffbf 	bl	80018f4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001976:	2110      	movs	r1, #16
 8001978:	2003      	movs	r0, #3
 800197a:	f7ff ffbb 	bl	80018f4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800197e:	2120      	movs	r1, #32
 8001980:	207f      	movs	r0, #127	; 0x7f
 8001982:	f7ff ffb7 	bl	80018f4 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001986:	2106      	movs	r1, #6
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff ffb3 	bl	80018f4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800198e:	2106      	movs	r1, #6
 8001990:	2014      	movs	r0, #20
 8001992:	f7ff ffaf 	bl	80018f4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001996:	2100      	movs	r1, #0
 8001998:	207f      	movs	r0, #127	; 0x7f
 800199a:	f7ff ffab 	bl	80018f4 <write_byte>
	}
	return ret;
 800199e:	88fb      	ldrh	r3, [r7, #6]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <read_gyro_data>:

void read_gyro_data() {
 80019a8:	b598      	push	{r3, r4, r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019ac:	2033      	movs	r0, #51	; 0x33
 80019ae:	f7ff ff73 	bl	8001898 <read_byte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21c      	sxth	r4, r3
 80019b8:	2034      	movs	r0, #52	; 0x34
 80019ba:	f7ff ff6d 	bl	8001898 <read_byte>
 80019be:	4603      	mov	r3, r0
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4323      	orrs	r3, r4
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <read_gyro_data+0x64>)
 80019c8:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019ca:	2035      	movs	r0, #53	; 0x35
 80019cc:	f7ff ff64 	bl	8001898 <read_byte>
 80019d0:	4603      	mov	r3, r0
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21c      	sxth	r4, r3
 80019d6:	2036      	movs	r0, #54	; 0x36
 80019d8:	f7ff ff5e 	bl	8001898 <read_byte>
 80019dc:	4603      	mov	r3, r0
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4323      	orrs	r3, r4
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <read_gyro_data+0x68>)
 80019e6:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80019e8:	2037      	movs	r0, #55	; 0x37
 80019ea:	f7ff ff55 	bl	8001898 <read_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	2038      	movs	r0, #56	; 0x38
 80019f6:	f7ff ff4f 	bl	8001898 <read_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4323      	orrs	r3, r4
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <read_gyro_data+0x6c>)
 8001a04:	801a      	strh	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	bd98      	pop	{r3, r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20035940 	.word	0x20035940
 8001a10:	2003593e 	.word	0x2003593e
 8001a14:	20035938 	.word	0x20035938

08001a18 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	805a      	strh	r2, [r3, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	809a      	strh	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	80da      	strh	r2, [r3, #6]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	811a      	strh	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	815a      	strh	r2, [r3, #10]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
{

}
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a64:	f7ff ff74 	bl	8001950 <IMU_init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a6c:	f7ff fb18 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a70:	2100      	movs	r1, #0
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fb24 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <_ZN3IMU4initEv+0x44>)
 8001a7a:	f7ff fb4b 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff fb1d 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <_ZN3IMU4initEv+0x48>)
 8001a8c:	f7ff fb42 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001a90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a94:	f005 ff92 	bl	80079bc <HAL_Delay>

}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	080178bc 	.word	0x080178bc
 8001aa4:	080178c8 	.word	0x080178c8

08001aa8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ab0:	f7ff ff7a 	bl	80019a8 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd3b 	bl	8000554 <__aeabi_i2d>
 8001ade:	a316      	add	r3, pc, #88	; (adr r3, 8001b38 <_ZN3IMU12updateValuesEv+0x90>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fda0 	bl	8000628 <__aeabi_dmul>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	4625      	mov	r5, r4
 8001aee:	461c      	mov	r4, r3
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <_ZN3IMU12updateValuesEv+0xac>)
 8001af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd2c 	bl	8000554 <__aeabi_i2d>
 8001afc:	a310      	add	r3, pc, #64	; (adr r3, 8001b40 <_ZN3IMU12updateValuesEv+0x98>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fd91 	bl	8000628 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fbd5 	bl	80002bc <__adddf3>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	4618      	mov	r0, r3
 8001b18:	4621      	mov	r1, r4
 8001b1a:	f7ff f835 	bl	8000b88 <__aeabi_d2iz>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <_ZN3IMU12updateValuesEv+0xac>)
 8001b2e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bdb0      	pop	{r4, r5, r7, pc}
 8001b38:	eb851eb8 	.word	0xeb851eb8
 8001b3c:	3f9eb851 	.word	0x3f9eb851
 8001b40:	70a3d70a 	.word	0x70a3d70a
 8001b44:	3fef0a3d 	.word	0x3fef0a3d
 8001b48:	20035940 	.word	0x20035940
 8001b4c:	2003593e 	.word	0x2003593e
 8001b50:	20035938 	.word	0x20035938
 8001b54:	20000210 	.word	0x20000210

08001b58 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7fe fcfb 	bl	8000578 <__aeabi_f2d>
 8001b82:	a316      	add	r3, pc, #88	; (adr r3, 8001bdc <_ZN3IMU8getOmegaEv+0x84>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fe78 	bl	800087c <__aeabi_ddiv>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4614      	mov	r4, r2
 8001b92:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b96:	a313      	add	r3, pc, #76	; (adr r3, 8001be4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f7fe fd42 	bl	8000628 <__aeabi_dmul>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	4621      	mov	r1, r4
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bb2:	f7fe fe63 	bl	800087c <__aeabi_ddiv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460c      	mov	r4, r1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	f7ff f82b 	bl	8000c18 <__aeabi_d2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	ee07 3a90 	vmov	s15, r3
}
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	40668000 	.word	0x40668000
 8001bdc:	66666666 	.word	0x66666666
 8001be0:	40306666 	.word	0x40306666
 8001be4:	54411744 	.word	0x54411744
 8001be8:	400921fb 	.word	0x400921fb

08001bec <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001bf4:	466b      	mov	r3, sp
 8001bf6:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bfc:	f005 fede 	bl	80079bc <HAL_Delay>
	lcd_clear();
 8001c00:	f7ff fa4e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c04:	2100      	movs	r1, #0
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fa5a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c0c:	4840      	ldr	r0, [pc, #256]	; (8001d10 <_ZN3IMU11calibrationEv+0x124>)
 8001c0e:	f7ff fa81 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c12:	2101      	movs	r1, #1
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fa53 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c1a:	483e      	ldr	r0, [pc, #248]	; (8001d14 <_ZN3IMU11calibrationEv+0x128>)
 8001c1c:	f7ff fa7a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c24:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c26:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c2a:	1e5d      	subs	r5, r3, #1
 8001c2c:	61bd      	str	r5, [r7, #24]
 8001c2e:	462b      	mov	r3, r5
 8001c30:	3301      	adds	r3, #1
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	f04f 0400 	mov.w	r4, #0
 8001c40:	0154      	lsls	r4, r2, #5
 8001c42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c46:	014b      	lsls	r3, r1, #5
 8001c48:	462b      	mov	r3, r5
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	f04f 0400 	mov.w	r4, #0
 8001c5a:	0154      	lsls	r4, r2, #5
 8001c5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c60:	014b      	lsls	r3, r1, #5
 8001c62:	462b      	mov	r3, r5
 8001c64:	3301      	adds	r3, #1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	3303      	adds	r3, #3
 8001c6a:	3307      	adds	r3, #7
 8001c6c:	08db      	lsrs	r3, r3, #3
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	ebad 0d03 	sub.w	sp, sp, r3
 8001c74:	466b      	mov	r3, sp
 8001c76:	3303      	adds	r3, #3
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c7e:	2300      	movs	r3, #0
 8001c80:	83fb      	strh	r3, [r7, #30]
 8001c82:	8bfa      	ldrh	r2, [r7, #30]
 8001c84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	da13      	bge.n	8001cb4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c92:	8bfb      	ldrh	r3, [r7, #30]
 8001c94:	ee07 2a90 	vmov	s15, r2
 8001c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f005 fe88 	bl	80079bc <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cac:	8bfb      	ldrh	r3, [r7, #30]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	83fb      	strh	r3, [r7, #30]
 8001cb2:	e7e6      	b.n	8001c82 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	462b      	mov	r3, r5
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d00e      	beq.n	8001cea <_ZN3IMU11calibrationEv+0xfe>
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cde:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	e7ec      	b.n	8001cc4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001cea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d04:	46b5      	mov	sp, r6
}
 8001d06:	bf00      	nop
 8001d08:	372c      	adds	r7, #44	; 0x2c
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	080178cc 	.word	0x080178cc
 8001d14:	080178d8 	.word	0x080178d8

08001d18 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	b299      	uxth	r1, r3
 8001d2c:	1dfa      	adds	r2, r7, #7
 8001d2e:	2364      	movs	r3, #100	; 0x64
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2301      	movs	r3, #1
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <INA260_read+0x50>)
 8001d36:	f007 fa41 	bl	80091bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2302      	movs	r3, #2
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <INA260_read+0x50>)
 8001d4a:	f007 fb35 	bl	80093b8 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d4e:	7b3b      	ldrb	r3, [r7, #12]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	7b7b      	ldrb	r3, [r7, #13]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20035b58 	.word	0x20035b58

08001d6c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	4604      	mov	r4, r0
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71bb      	strb	r3, [r7, #6]
 8001d82:	460b      	mov	r3, r1
 8001d84:	717b      	strb	r3, [r7, #5]
 8001d86:	4613      	mov	r3, r2
 8001d88:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	733b      	strb	r3, [r7, #12]
 8001d8e:	79bb      	ldrb	r3, [r7, #6]
 8001d90:	737b      	strb	r3, [r7, #13]
 8001d92:	797b      	ldrb	r3, [r7, #5]
 8001d94:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d96:	793b      	ldrb	r3, [r7, #4]
 8001d98:	b299      	uxth	r1, r3
 8001d9a:	f107 020c 	add.w	r2, r7, #12
 8001d9e:	2364      	movs	r3, #100	; 0x64
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2303      	movs	r3, #3
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <INA260_write+0x48>)
 8001da6:	f007 fa09 	bl	80091bc <HAL_I2C_Master_Transmit>
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20035b58 	.word	0x20035b58

08001db8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	71bb      	strb	r3, [r7, #6]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dca:	797b      	ldrb	r3, [r7, #5]
 8001dcc:	79ba      	ldrb	r2, [r7, #6]
 8001dce:	79f9      	ldrb	r1, [r7, #7]
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff ffcb 	bl	8001d6c <INA260_write>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	461a      	mov	r2, r3
 8001dec:	21df      	movs	r1, #223	; 0xdf
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff ffe2 	bl	8001db8 <setConfig>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
{

}
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e24:	482a      	ldr	r0, [pc, #168]	; (8001ed0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e26:	f007 f847 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <_ZN8JoyStick8getValueEv+0x2e>
 8001e3a:	89fb      	ldrh	r3, [r7, #14]
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e42:	2101      	movs	r1, #1
 8001e44:	4823      	ldr	r0, [pc, #140]	; (8001ed4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e46:	f007 f837 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x4e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e66:	481a      	ldr	r0, [pc, #104]	; (8001ed0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e68:	f007 f826 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <_ZN8JoyStick8getValueEv+0x70>
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e84:	2104      	movs	r1, #4
 8001e86:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e88:	f007 f816 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x90>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ea8:	f007 f806 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0xb0>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0310 	orr.w	r3, r3, #16
 8001ec2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40020400 	.word	0x40020400

08001edc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	2b52      	cmp	r3, #82	; 0x52
 8001eec:	d112      	bne.n	8001f14 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef4:	4856      	ldr	r0, [pc, #344]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001ef6:	f006 fff7 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f00:	4853      	ldr	r0, [pc, #332]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f02:	f006 fff1 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f0c:	4850      	ldr	r0, [pc, #320]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f0e:	f006 ffeb 	bl	8008ee8 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f12:	e098      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2b47      	cmp	r3, #71	; 0x47
 8001f18:	d112      	bne.n	8001f40 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f20:	484b      	ldr	r0, [pc, #300]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f006 ffe1 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f2c:	4848      	ldr	r0, [pc, #288]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f006 ffdb 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f38:	4845      	ldr	r0, [pc, #276]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f3a:	f006 ffd5 	bl	8008ee8 <HAL_GPIO_WritePin>
}
 8001f3e:	e082      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b42      	cmp	r3, #66	; 0x42
 8001f44:	d112      	bne.n	8001f6c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4c:	4840      	ldr	r0, [pc, #256]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f006 ffcb 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f58:	483d      	ldr	r0, [pc, #244]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f006 ffc5 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f64:	483a      	ldr	r0, [pc, #232]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f66:	f006 ffbf 	bl	8008ee8 <HAL_GPIO_WritePin>
}
 8001f6a:	e06c      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	2b43      	cmp	r3, #67	; 0x43
 8001f70:	d112      	bne.n	8001f98 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f78:	4835      	ldr	r0, [pc, #212]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f006 ffb5 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f84:	4832      	ldr	r0, [pc, #200]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f006 ffaf 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f90:	482f      	ldr	r0, [pc, #188]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f92:	f006 ffa9 	bl	8008ee8 <HAL_GPIO_WritePin>
}
 8001f96:	e056      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	2b4d      	cmp	r3, #77	; 0x4d
 8001f9c:	d112      	bne.n	8001fc4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa4:	482a      	ldr	r0, [pc, #168]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f006 ff9f 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb0:	4827      	ldr	r0, [pc, #156]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f006 ff99 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fbc:	4824      	ldr	r0, [pc, #144]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fbe:	f006 ff93 	bl	8008ee8 <HAL_GPIO_WritePin>
}
 8001fc2:	e040      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b59      	cmp	r3, #89	; 0x59
 8001fc8:	d112      	bne.n	8001ff0 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd0:	481f      	ldr	r0, [pc, #124]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f006 ff89 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fdc:	481c      	ldr	r0, [pc, #112]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f006 ff83 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe8:	4819      	ldr	r0, [pc, #100]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fea:	f006 ff7d 	bl	8008ee8 <HAL_GPIO_WritePin>
}
 8001fee:	e02a      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	2b57      	cmp	r3, #87	; 0x57
 8001ff4:	d112      	bne.n	800201c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffc:	4814      	ldr	r0, [pc, #80]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f006 ff73 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002008:	4811      	ldr	r0, [pc, #68]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f006 ff6d 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002014:	480e      	ldr	r0, [pc, #56]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8002016:	f006 ff67 	bl	8008ee8 <HAL_GPIO_WritePin>
}
 800201a:	e014      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	2b7e      	cmp	r3, #126	; 0x7e
 8002020:	d111      	bne.n	8002046 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	4809      	ldr	r0, [pc, #36]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f006 ff5d 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002034:	4806      	ldr	r0, [pc, #24]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f006 ff57 	bl	8008ee8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8002042:	f006 ff51 	bl	8008ee8 <HAL_GPIO_WritePin>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40020000 	.word	0x40020000

08002054 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	4613      	mov	r3, r2
 8002062:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002072:	4813      	ldr	r0, [pc, #76]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 8002074:	f006 ff38 	bl	8008ee8 <HAL_GPIO_WritePin>
 8002078:	e009      	b.n	800208e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800207a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d105      	bne.n	800208e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 800208a:	f006 ff2d 	bl	8008ee8 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800208e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d106      	bne.n	80020a4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002096:	2201      	movs	r2, #1
 8002098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209c:	4808      	ldr	r0, [pc, #32]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 800209e:	f006 ff23 	bl	8008ee8 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020a2:	e009      	b.n	80020b8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b2:	4803      	ldr	r0, [pc, #12]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 80020b4:	f006 ff18 	bl	8008ee8 <HAL_GPIO_WritePin>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40020000 	.word	0x40020000

080020c4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b092      	sub	sp, #72	; 0x48
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fe92 	bl	8001dfc <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	331c      	adds	r3, #28
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
 80020e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d008      	beq.n	8002100 <_ZN10LineSensorC1Ev+0x3c>
 80020ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	2200      	movs	r2, #0
 80020f6:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fa:	3302      	adds	r3, #2
 80020fc:	647b      	str	r3, [r7, #68]	; 0x44
 80020fe:	e7f2      	b.n	80020e6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	643b      	str	r3, [r7, #64]	; 0x40
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	3338      	adds	r3, #56	; 0x38
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	429a      	cmp	r2, r3
 8002118:	d009      	beq.n	800212e <_ZN10LineSensorC1Ev+0x6a>
 800211a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211c:	623b      	str	r3, [r7, #32]
		s = 0;
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002128:	3304      	adds	r3, #4
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	e7f1      	b.n	8002112 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3338      	adds	r3, #56	; 0x38
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	429a      	cmp	r2, r3
 8002146:	d009      	beq.n	800215c <_ZN10LineSensorC1Ev+0x98>
 8002148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214a:	617b      	str	r3, [r7, #20]
		m = 0;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002156:	3304      	adds	r3, #4
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	e7f1      	b.n	8002140 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	63bb      	str	r3, [r7, #56]	; 0x38
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	3338      	adds	r3, #56	; 0x38
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	429a      	cmp	r2, r3
 8002174:	d009      	beq.n	800218a <_ZN10LineSensorC1Ev+0xc6>
 8002176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002178:	60bb      	str	r3, [r7, #8]
		s = 1;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002180:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	3304      	adds	r3, #4
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	e7f1      	b.n	800216e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4618      	mov	r0, r3
 800218e:	3748      	adds	r7, #72	; 0x48
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	220e      	movs	r2, #14
 80021a0:	4619      	mov	r1, r3
 80021a2:	4803      	ldr	r0, [pc, #12]	; (80021b0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021a4:	f005 fc70 	bl	8007a88 <HAL_ADC_Start_DMA>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20035a7c 	.word	0x20035a7c

080021b4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b0d      	cmp	r3, #13
 80021c4:	dc2f      	bgt.n	8002226 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3392      	adds	r3, #146	; 0x92
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	ed93 7a00 	vldr	s14, [r3]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	33a0      	adds	r3, #160	; 0xa0
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	1a5b      	subs	r3, r3, r1
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	68f9      	ldr	r1, [r7, #12]
 8002210:	440b      	add	r3, r1
 8002212:	3306      	adds	r3, #6
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e7cc      	b.n	80021c0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	3301      	adds	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002230:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b09      	cmp	r3, #9
 8002238:	d902      	bls.n	8002240 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]


}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	2000021c 	.word	0x2000021c

08002250 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b08e      	sub	sp, #56	; 0x38
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800225e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002262:	2b0d      	cmp	r3, #13
 8002264:	f200 80b8 	bhi.w	80023d8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800226e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002272:	2b09      	cmp	r3, #9
 8002274:	d81c      	bhi.n	80022b0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002276:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800227a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800227e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4423      	add	r3, r4
 800228e:	3306      	adds	r3, #6
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4403      	add	r3, r0
 8002294:	3304      	adds	r3, #4
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	008b      	lsls	r3, r1, #2
 800229a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800229e:	440b      	add	r3, r1
 80022a0:	3b30      	subs	r3, #48	; 0x30
 80022a2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022a8:	3301      	adds	r3, #1
 80022aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ae:	e7de      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d84d      	bhi.n	800235a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022c2:	3301      	adds	r3, #1
 80022c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d83e      	bhi.n	800234e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022da:	4413      	add	r3, r2
 80022dc:	3b30      	subs	r3, #48	; 0x30
 80022de:	ed93 7a00 	vldr	s14, [r3]
 80022e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ec:	4413      	add	r3, r2
 80022ee:	3b30      	subs	r3, #48	; 0x30
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	d521      	bpl.n	8002342 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002308:	4413      	add	r3, r2
 800230a:	3b30      	subs	r3, #48	; 0x30
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002310:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002314:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800231e:	440a      	add	r2, r1
 8002320:	3a30      	subs	r2, #48	; 0x30
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800232a:	440b      	add	r3, r1
 800232c:	3b30      	subs	r3, #48	; 0x30
 800232e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002330:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800233a:	4413      	add	r3, r2
 800233c:	3b30      	subs	r3, #48	; 0x30
 800233e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002340:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002342:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002346:	3301      	adds	r3, #1
 8002348:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800234c:	e7bc      	b.n	80022c8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800234e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002352:	3301      	adds	r3, #1
 8002354:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002358:	e7ad      	b.n	80022b6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f90b 	bl	8000578 <__aeabi_f2d>
 8002362:	a32a      	add	r3, pc, #168	; (adr r3, 800240c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe f95e 	bl	8000628 <__aeabi_dmul>
 800236c:	4603      	mov	r3, r0
 800236e:	460c      	mov	r4, r1
 8002370:	4625      	mov	r5, r4
 8002372:	461c      	mov	r4, r3
 8002374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8f9 	bl	8000578 <__aeabi_f2d>
 8002386:	a31c      	add	r3, pc, #112	; (adr r3, 80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe f94c 	bl	8000628 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fd ff90 	bl	80002bc <__adddf3>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	461a      	mov	r2, r3
 80023a2:	4623      	mov	r3, r4
 80023a4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fc34 	bl	8000c18 <__aeabi_d2f>
 80023b0:	4601      	mov	r1, r0
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023d0:	3301      	adds	r3, #1
 80023d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023d6:	e742      	b.n	800225e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80023e0:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	3738      	adds	r7, #56	; 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	f3af 8000 	nop.w
 80023f8:	66666666 	.word	0x66666666
 80023fc:	3fee6666 	.word	0x3fee6666
 8002400:	20000220 	.word	0x20000220
 8002404:	20000214 	.word	0x20000214
 8002408:	20000218 	.word	0x20000218
 800240c:	9999999a 	.word	0x9999999a
 8002410:	3fa99999 	.word	0x3fa99999

08002414 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0a0      	sub	sp, #128	; 0x80
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800241c:	2064      	movs	r0, #100	; 0x64
 800241e:	f005 facd 	bl	80079bc <HAL_Delay>

	lcd_clear();
 8002422:	f7fe fe3d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002426:	2100      	movs	r1, #0
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fe49 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800242e:	4886      	ldr	r0, [pc, #536]	; (8002648 <_ZN10LineSensor11calibrationEv+0x234>)
 8002430:	f7fe fe70 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002434:	2101      	movs	r1, #1
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe fe42 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800243c:	4883      	ldr	r0, [pc, #524]	; (800264c <_ZN10LineSensor11calibrationEv+0x238>)
 800243e:	f7fe fe69 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002442:	2300      	movs	r3, #0
 8002444:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002448:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800244c:	2b0d      	cmp	r3, #13
 800244e:	d823      	bhi.n	8002498 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002450:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002454:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	32b0      	adds	r2, #176	; 0xb0
 800245c:	0092      	lsls	r2, r2, #2
 800245e:	440a      	add	r2, r1
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002468:	440b      	add	r3, r1
 800246a:	3b40      	subs	r3, #64	; 0x40
 800246c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800246e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002472:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	32b0      	adds	r2, #176	; 0xb0
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	440a      	add	r2, r1
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002486:	440b      	add	r3, r1
 8002488:	3b78      	subs	r3, #120	; 0x78
 800248a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800248c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002490:	3301      	adds	r3, #1
 8002492:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002496:	e7d7      	b.n	8002448 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fcb8 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d079      	beq.n	80025a8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024ba:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024be:	2b0d      	cmp	r3, #13
 80024c0:	d850      	bhi.n	8002564 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024c2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024cc:	4413      	add	r3, r2
 80024ce:	3b40      	subs	r3, #64	; 0x40
 80024d0:	ed93 7a00 	vldr	s14, [r3]
 80024d4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	33b0      	adds	r3, #176	; 0xb0
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	d50f      	bpl.n	800250e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024ee:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80024f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	32b0      	adds	r2, #176	; 0xb0
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	440a      	add	r2, r1
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002506:	440b      	add	r3, r1
 8002508:	3b40      	subs	r3, #64	; 0x40
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e024      	b.n	8002558 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800250e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002518:	4413      	add	r3, r2
 800251a:	3b78      	subs	r3, #120	; 0x78
 800251c:	ed93 7a00 	vldr	s14, [r3]
 8002520:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	33b0      	adds	r3, #176	; 0xb0
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	dd0e      	ble.n	8002558 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800253a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800253e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	32b0      	adds	r2, #176	; 0xb0
 8002546:	0092      	lsls	r2, r2, #2
 8002548:	440a      	add	r2, r1
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002552:	440b      	add	r3, r1
 8002554:	3b78      	subs	r3, #120	; 0x78
 8002556:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002558:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800255c:	3301      	adds	r3, #1
 800255e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002562:	e7aa      	b.n	80024ba <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800256a:	4618      	mov	r0, r3
 800256c:	f001 fca6 	bl	8003ebc <_ZN12RotarySwitch8getValueEv>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002586:	2201      	movs	r2, #1
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fd61 	bl	8002054 <_ZN3LED2LREaa>
 8002592:	e781      	b.n	8002498 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800259a:	2200      	movs	r2, #0
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fd57 	bl	8002054 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025a6:	e777      	b.n	8002498 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025b2:	2b0d      	cmp	r3, #13
 80025b4:	d826      	bhi.n	8002604 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025c0:	4413      	add	r3, r2
 80025c2:	3b40      	subs	r3, #64	; 0x40
 80025c4:	ed93 7a00 	vldr	s14, [r3]
 80025c8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025d2:	4413      	add	r3, r2
 80025d4:	3b78      	subs	r3, #120	; 0x78
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025e2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002650 <_ZN10LineSensor11calibrationEv+0x23c>
 80025e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	3392      	adds	r3, #146	; 0x92
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3304      	adds	r3, #4
 80025f4:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025f8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025fc:	3301      	adds	r3, #1
 80025fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002602:	e7d4      	b.n	80025ae <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002604:	2300      	movs	r3, #0
 8002606:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800260a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800260e:	2b0d      	cmp	r3, #13
 8002610:	d815      	bhi.n	800263e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002612:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002616:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002620:	440a      	add	r2, r1
 8002622:	3a78      	subs	r2, #120	; 0x78
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	33a0      	adds	r3, #160	; 0xa0
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3304      	adds	r3, #4
 8002630:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002632:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002636:	3301      	adds	r3, #1
 8002638:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800263c:	e7e5      	b.n	800260a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800263e:	bf00      	nop
 8002640:	3780      	adds	r7, #128	; 0x80
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	080178e4 	.word	0x080178e4
 800264c:	080178f0 	.word	0x080178f0
 8002650:	447a0000 	.word	0x447a0000

08002654 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3338      	adds	r3, #56	; 0x38
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	d012      	beq.n	80026a0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80026f4 <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	db02      	blt.n	8002698 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002692:	8bfb      	ldrh	r3, [r7, #30]
 8002694:	3301      	adds	r3, #1
 8002696:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	3304      	adds	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e7e8      	b.n	8002672 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026a0:	8bfb      	ldrh	r3, [r7, #30]
 80026a2:	2b0d      	cmp	r3, #13
 80026a4:	d906      	bls.n	80026b4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	e002      	b.n	80026ba <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b31      	cmp	r3, #49	; 0x31
 80026c0:	d903      	bls.n	80026ca <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e002      	b.n	80026d0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026d8:	4293      	cmp	r3, r2
 80026da:	d903      	bls.n	80026e4 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026de:	f242 7210 	movw	r2, #10000	; 0x2710
 80026e2:	801a      	strh	r2, [r3, #0]

	return flag;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e6:	781b      	ldrb	r3, [r3, #0]

}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3724      	adds	r7, #36	; 0x24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	442f0000 	.word	0x442f0000
 80026f8:	20000258 	.word	0x20000258
 80026fc:	2000025a 	.word	0x2000025a

08002700 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	ed87 0a01 	vstr	s0, [r7, #4]
 800270a:	edd7 7a01 	vldr	s15, [r7, #4]
 800270e:	eef0 7ae7 	vabs.f32	s15, s15
 8002712:	eeb0 0a67 	vmov.f32	s0, s15
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>:

uint16_t mon_store_cnt;
float mon_pdis;
float mon_ave_l, mon_ave_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger) :
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0), logging_flag_(false), velocity_play_flag_(false), velocity_table_idx_(0)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	675a      	str	r2, [r3, #116]	; 0x74
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800278c:	333c      	adds	r3, #60	; 0x3c
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002798:	333e      	adds	r3, #62	; 0x3e
 800279a:	2200      	movs	r2, #0
 800279c:	801a      	strh	r2, [r3, #0]
{
	motor_ = motor;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a3a      	ldr	r2, [r7, #32]
 80027b4:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027c0:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c6:	61da      	str	r2, [r3, #28]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027c8:	2300      	movs	r3, #0
 80027ca:	82fb      	strh	r3, [r7, #22]
 80027cc:	8afb      	ldrh	r3, [r7, #22]
 80027ce:	f241 726f 	movw	r2, #5999	; 0x176f
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d80c      	bhi.n	80027f0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xd0>
		velocity_table_[i] = 0;
 80027d6:	8afb      	ldrh	r3, [r7, #22]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	331e      	adds	r3, #30
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027e8:	8afb      	ldrh	r3, [r7, #22]
 80027ea:	3301      	adds	r3, #1
 80027ec:	82fb      	strh	r3, [r7, #22]
 80027ee:	e7ed      	b.n	80027cc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xac>
	}
}
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4618      	mov	r0, r3
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002854:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002868:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002874:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002880:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800288c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002898:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80028a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028a8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80028ac:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <_ZN9LineTrace9calcErrorEv+0x130>)
 80028b4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fe5d 	bl	8000578 <__aeabi_f2d>
 80028be:	a318      	add	r3, pc, #96	; (adr r3, 8002920 <_ZN9LineTrace9calcErrorEv+0x120>)
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	f7fd feb0 	bl	8000628 <__aeabi_dmul>
 80028c8:	4603      	mov	r3, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	4625      	mov	r5, r4
 80028ce:	461c      	mov	r4, r3
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <_ZN9LineTrace9calcErrorEv+0x134>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fe4f 	bl	8000578 <__aeabi_f2d>
 80028da:	a313      	add	r3, pc, #76	; (adr r3, 8002928 <_ZN9LineTrace9calcErrorEv+0x128>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd fea2 	bl	8000628 <__aeabi_dmul>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4620      	mov	r0, r4
 80028ea:	4629      	mov	r1, r5
 80028ec:	f7fd fce6 	bl	80002bc <__adddf3>
 80028f0:	4603      	mov	r3, r0
 80028f2:	460c      	mov	r4, r1
 80028f4:	4618      	mov	r0, r3
 80028f6:	4621      	mov	r1, r4
 80028f8:	f7fe f98e 	bl	8000c18 <__aeabi_d2f>
 80028fc:	4603      	mov	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002904:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <_ZN9LineTrace9calcErrorEv+0x134>)
 800290a:	6013      	str	r3, [r2, #0]

	return diff;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	ee07 3a90 	vmov	s15, r3

}
 8002912:	eeb0 0a67 	vmov.f32	s0, s15
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bdb0      	pop	{r4, r5, r7, pc}
 800291c:	f3af 8000 	nop.w
 8002920:	47ae147b 	.word	0x47ae147b
 8002924:	3fb47ae1 	.word	0x3fb47ae1
 8002928:	d70a3d71 	.word	0xd70a3d71
 800292c:	3fed70a3 	.word	0x3fed70a3
 8002930:	2000025c 	.word	0x2000025c
 8002934:	20000270 	.word	0x20000270
 8002938:	20000260 	.word	0x20000260
 800293c:	00000000 	.word	0x00000000

08002940 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff59 	bl	8002800 <_ZN9LineTrace9calcErrorEv>
 800294e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 800295c:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <_ZN9LineTrace8pidTraceEv+0x110>)
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	p = kp_ * diff;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002972:	ed97 7a05 	vldr	s14, [r7, #20]
 8002976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002984:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	edd7 6a05 	vldr	s13, [r7, #20]
 800298e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	ee17 0a90 	vmov	r0, s15
 800299a:	f7fd fded 	bl	8000578 <__aeabi_f2d>
 800299e:	a32a      	add	r3, pc, #168	; (adr r3, 8002a48 <_ZN9LineTrace8pidTraceEv+0x108>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd ff6a 	bl	800087c <__aeabi_ddiv>
 80029a8:	4603      	mov	r3, r0
 80029aa:	460c      	mov	r4, r1
 80029ac:	4618      	mov	r0, r3
 80029ae:	4621      	mov	r1, r4
 80029b0:	f7fe f932 	bl	8000c18 <__aeabi_d2f>
 80029b4:	4603      	mov	r3, r0
 80029b6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fddb 	bl	8000578 <__aeabi_f2d>
 80029c2:	4604      	mov	r4, r0
 80029c4:	460d      	mov	r5, r1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80029cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80029d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d4:	ee17 0a90 	vmov	r0, s15
 80029d8:	f7fd fdce 	bl	8000578 <__aeabi_f2d>
 80029dc:	a31a      	add	r3, pc, #104	; (adr r3, 8002a48 <_ZN9LineTrace8pidTraceEv+0x108>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fe21 	bl	8000628 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4620      	mov	r0, r4
 80029ec:	4629      	mov	r1, r5
 80029ee:	f7fd fc65 	bl	80002bc <__adddf3>
 80029f2:	4603      	mov	r3, r0
 80029f4:	460c      	mov	r4, r1
 80029f6:	4618      	mov	r0, r3
 80029f8:	4621      	mov	r1, r4
 80029fa:	f7fe f90d 	bl	8000c18 <__aeabi_d2f>
 80029fe:	4602      	mov	r2, r0
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a02:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002a04:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002a28:	edd7 0a02 	vldr	s1, [r7, #8]
 8002a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a30:	4610      	mov	r0, r2
 8002a32:	f001 fdf5 	bl	8004620 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	6013      	str	r3, [r2, #0]

}
 8002a3c:	bf00      	nop
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bdb0      	pop	{r4, r5, r7, pc}
 8002a44:	f3af 8000 	nop.w
 8002a48:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a4c:	3f50624d 	.word	0x3f50624d
 8002a50:	20000278 	.word	0x20000278
 8002a54:	20000274 	.word	0x20000274

08002a58 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fd17 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f876 	bl	8003b60 <_ZN8Odometry13clearPotitionEv>
	//logger_->start();

	logging_flag_ = true;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fe0d 	bl	80036b0 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad8:	edc7 7a04 	vstr	s15, [r7, #16]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002afc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b04:	edc7 7a03 	vstr	s15, [r7, #12]
	bool flag = false;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	75fb      	strb	r3, [r7, #23]
	mon_ave_l = sensor_edge_val_l;
 8002b0c:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <_ZN9LineTrace11isCrossLineEv+0xc4>)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002b12:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <_ZN9LineTrace11isCrossLineEv+0xc8>)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6013      	str	r3, [r2, #0]

	if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002b18:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b1c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002b74 <_ZN9LineTrace11isCrossLineEv+0xcc>
 8002b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b28:	d50f      	bpl.n	8002b4a <_ZN9LineTrace11isCrossLineEv+0xa2>
 8002b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b2e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b74 <_ZN9LineTrace11isCrossLineEv+0xcc>
 8002b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3a:	d506      	bpl.n	8002b4a <_ZN9LineTrace11isCrossLineEv+0xa2>
		cnt++;
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b46:	801a      	strh	r2, [r3, #0]
 8002b48:	e002      	b.n	8002b50 <_ZN9LineTrace11isCrossLineEv+0xa8>
	}
	else{
		cnt = 0;
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <_ZN9LineTrace11isCrossLineEv+0xb4>
		flag = true;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
		//cnt = 0;
	}

	return flag;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	20000268 	.word	0x20000268
 8002b70:	2000026c 	.word	0x2000026c
 8002b74:	44160000 	.word	0x44160000
 8002b78:	2000027c 	.word	0x2000027c

08002b7c <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(radius < 130) velocity = 1.0;
 8002b88:	edd7 7a00 	vldr	s15, [r7]
 8002b8c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002bd4 <_ZN9LineTrace15radius2VelocityEf+0x58>
 8002b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b98:	d503      	bpl.n	8002ba2 <_ZN9LineTrace15radius2VelocityEf+0x26>
 8002b9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e00e      	b.n	8002bc0 <_ZN9LineTrace15radius2VelocityEf+0x44>
	else if(radius < 250) velocity = 1.3;
 8002ba2:	edd7 7a00 	vldr	s15, [r7]
 8002ba6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002bd8 <_ZN9LineTrace15radius2VelocityEf+0x5c>
 8002baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	d502      	bpl.n	8002bba <_ZN9LineTrace15radius2VelocityEf+0x3e>
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <_ZN9LineTrace15radius2VelocityEf+0x60>)
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e002      	b.n	8002bc0 <_ZN9LineTrace15radius2VelocityEf+0x44>
	else velocity = 1.5;
 8002bba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002bbe:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	ee07 3a90 	vmov	s15, r3
}
 8002bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	43020000 	.word	0x43020000
 8002bd8:	437a0000 	.word	0x437a0000
 8002bdc:	3fa66666 	.word	0x3fa66666

08002be0 <_ZN9LineTrace20createVelocityTabeleEv>:
void LineTrace::createVelocityTabele()
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b08b      	sub	sp, #44	; 0x2c
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69d8      	ldr	r0, [r3, #28]
 8002bec:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <_ZN9LineTrace20createVelocityTabeleEv+0xdc>)
 8002bee:	4a34      	ldr	r2, [pc, #208]	; (8002cc0 <_ZN9LineTrace20createVelocityTabeleEv+0xe0>)
 8002bf0:	4934      	ldr	r1, [pc, #208]	; (8002cc4 <_ZN9LineTrace20createVelocityTabeleEv+0xe4>)
 8002bf2:	f000 fcb2 	bl	800355a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fc45 	bl	800348a <_ZN6Logger23getDistanceArrayPointerEv>
 8002c00:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fc4d 	bl	80034a6 <_ZN6Logger20getThetaArrayPointerEv>
 8002c0c:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c0e:	2300      	movs	r3, #0
 8002c10:	837b      	strh	r3, [r7, #26]
 8002c12:	8b7b      	ldrh	r3, [r7, #26]
 8002c14:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d83f      	bhi.n	8002c9c <_ZN9LineTrace20createVelocityTabeleEv+0xbc>
		temp_distance = p_distance[i];
 8002c1c:	8b7b      	ldrh	r3, [r7, #26]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002c34:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c40:	d101      	bne.n	8002c46 <_ZN9LineTrace20createVelocityTabeleEv+0x66>
 8002c42:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <_ZN9LineTrace20createVelocityTabeleEv+0xe8>)
 8002c44:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002c46:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c52:	eeb0 0a66 	vmov.f32	s0, s13
 8002c56:	f7ff fd53 	bl	8002700 <_ZSt3absf>
 8002c5a:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002c5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c62:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002ccc <_ZN9LineTrace20createVelocityTabeleEv+0xec>
 8002c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6e:	db01      	blt.n	8002c74 <_ZN9LineTrace20createVelocityTabeleEv+0x94>
 8002c70:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <_ZN9LineTrace20createVelocityTabeleEv+0xf0>)
 8002c72:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002c74:	8b7c      	ldrh	r4, [r7, #26]
 8002c76:	ed97 0a05 	vldr	s0, [r7, #20]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff7e 	bl	8002b7c <_ZN9LineTrace15radius2VelocityEf>
 8002c80:	eef0 7a40 	vmov.f32	s15, s0
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	f104 031e 	add.w	r3, r4, #30
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3304      	adds	r3, #4
 8002c90:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c94:	8b7b      	ldrh	r3, [r7, #26]
 8002c96:	3301      	adds	r3, #1
 8002c98:	837b      	strh	r3, [r7, #26]
 8002c9a:	e7ba      	b.n	8002c12 <_ZN9LineTrace20createVelocityTabeleEv+0x32>
		//velocity_table_[i] = radius;
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	f241 7270 	movw	r2, #6000	; 0x1770
 8002cac:	4909      	ldr	r1, [pc, #36]	; (8002cd4 <_ZN9LineTrace20createVelocityTabeleEv+0xf4>)
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <_ZN9LineTrace20createVelocityTabeleEv+0xe4>)
 8002cb0:	f7fe fc9a 	bl	80015e8 <sd_write_array_float>

}
 8002cb4:	bf00      	nop
 8002cb6:	3724      	adds	r7, #36	; 0x24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	08017934 	.word	0x08017934
 8002cc0:	08017940 	.word	0x08017940
 8002cc4:	08017950 	.word	0x08017950
 8002cc8:	3727c5ac 	.word	0x3727c5ac
 8002ccc:	459c4000 	.word	0x459c4000
 8002cd0:	459c4000 	.word	0x459c4000
 8002cd4:	0801795c 	.word	0x0801795c

08002cd8 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true && encoder_->getTotalDistance() >= 10){
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002ce6:	333c      	adds	r3, #60	; 0x3c
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00f      	beq.n	8002d0e <_ZN9LineTrace20updateTargetVelocityEv+0x36>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fb91 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8002cf8:	eeb0 7a40 	vmov.f32	s14, s0
 8002cfc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d08:	db01      	blt.n	8002d0e <_ZN9LineTrace20updateTargetVelocityEv+0x36>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <_ZN9LineTrace20updateTargetVelocityEv+0x38>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d026      	beq.n	8002d62 <_ZN9LineTrace20updateTargetVelocityEv+0x8a>
		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002d1a:	333e      	adds	r3, #62	; 0x3e
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	331e      	adds	r3, #30
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3304      	adds	r3, #4
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f8a4 	bl	8002e7e <_ZN9LineTrace17setTargetVelocityEf>
		encoder_->clearTotalCnt();
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe fbac 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
		odometry_->clearPotition();
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 ff0b 	bl	8003b60 <_ZN8Odometry13clearPotitionEv>
		velocity_table_idx_++;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002d50:	333e      	adds	r3, #62	; 0x3e
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002d5e:	333e      	adds	r3, #62	; 0x3e
 8002d60:	801a      	strh	r2, [r3, #0]
	}

}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	2201      	movs	r2, #1
 8002d7a:	4912      	ldr	r1, [pc, #72]	; (8002dc4 <_ZN9LineTrace4initEv+0x58>)
 8002d7c:	4812      	ldr	r0, [pc, #72]	; (8002dc8 <_ZN9LineTrace4initEv+0x5c>)
 8002d7e:	f7fe fc99 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8002d82:	f107 0310 	add.w	r3, r7, #16
 8002d86:	2201      	movs	r2, #1
 8002d88:	4910      	ldr	r1, [pc, #64]	; (8002dcc <_ZN9LineTrace4initEv+0x60>)
 8002d8a:	480f      	ldr	r0, [pc, #60]	; (8002dc8 <_ZN9LineTrace4initEv+0x5c>)
 8002d8c:	f7fe fc92 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	2201      	movs	r2, #1
 8002d96:	490e      	ldr	r1, [pc, #56]	; (8002dd0 <_ZN9LineTrace4initEv+0x64>)
 8002d98:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <_ZN9LineTrace4initEv+0x5c>)
 8002d9a:	f7fe fc8b 	bl	80016b4 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002d9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002da2:	ed97 7a04 	vldr	s14, [r7, #16]
 8002da6:	edd7 6a03 	vldr	s13, [r7, #12]
 8002daa:	eeb0 1a66 	vmov.f32	s2, s13
 8002dae:	eef0 0a47 	vmov.f32	s1, s14
 8002db2:	eeb0 0a67 	vmov.f32	s0, s15
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f80c 	bl	8002dd4 <_ZN9LineTrace7setGainEfff>

}
 8002dbc:	bf00      	nop
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	0801796c 	.word	0x0801796c
 8002dc8:	08017974 	.word	0x08017974
 8002dcc:	0801797c 	.word	0x0801797c
 8002dd0:	08017984 	.word	0x08017984

08002dd4 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002de0:	edc7 0a01 	vstr	s1, [r7, #4]
 8002de4:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	621a      	str	r2, [r3, #32]
	ki_ = ki;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
	kd_ = kd;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
	return kp_;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	ee07 3a90 	vmov	s15, r3
}
 8002e16:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	return ki_;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	ee07 3a90 	vmov	s15, r3
}
 8002e34:	eeb0 0a67 	vmov.f32	s0, s15
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
	return kd_;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	ee07 3a90 	vmov	s15, r3
}
 8002e52:	eeb0 0a67 	vmov.f32	s0, s15
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d056      	beq.n	8002f5c <_ZN9LineTrace4flipEv+0xc0>
		// ---- line following processing -----//
		pidTrace();
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff fd46 	bl	8002940 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff0f 	bl	8002cd8 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff fdf4 	bl	8002aa8 <_ZN9LineTrace11isCrossLineEv>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d011      	beq.n	8002eea <_ZN9LineTrace4flipEv+0x4e>
			led_.LR(1, -1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	f04f 32ff 	mov.w	r2, #4294967295
 8002ece:	2101      	movs	r1, #1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff f8bf 	bl	8002054 <_ZN3LED2LREaa>
			side_sensor_->enableIgnore();
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 f938 	bl	8004150 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fafc 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}
		else{
		}
		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 f948 	bl	8004184 <_ZN10SideSensor13getIgnoreFlagEv>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00f      	beq.n	8002f1a <_ZN9LineTrace4flipEv+0x7e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fae0 	bl	80014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8002f04:	eeb0 7a40 	vmov.f32	s14, s0
 8002f08:	eddf 7a16 	vldr	s15, [pc, #88]	; 8002f64 <_ZN9LineTrace4flipEv+0xc8>
 8002f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f14:	db01      	blt.n	8002f1a <_ZN9LineTrace4flipEv+0x7e>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <_ZN9LineTrace4flipEv+0x80>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00c      	beq.n	8002f3a <_ZN9LineTrace4flipEv+0x9e>
			side_sensor_->disableIgnore();
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 f920 	bl	800416a <_ZN10SideSensor13disableIgnoreEv>
			led_.LR(0, -1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f88d 	bl	8002054 <_ZN3LED2LREaa>
		}

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fb88 	bl	8002654 <_ZN10LineSensor13emergencyStopEv>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <_ZN9LineTrace4flipEv+0xc0>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	eddf 0a06 	vldr	s1, [pc, #24]	; 8002f68 <_ZN9LineTrace4flipEv+0xcc>
 8002f52:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002f68 <_ZN9LineTrace4flipEv+0xcc>
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 fb62 	bl	8004620 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	43480000 	.word	0x43480000
 8002f68:	00000000 	.word	0x00000000

08002f6c <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i_reset_flag_ = true;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	velocity_ctrl_->start();
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 fba2 	bl	80046d2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f001 f8cc 	bl	8004130 <_ZN10SideSensor17resetWhiteLineCntEv>
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	velocity_ctrl_->stop();
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 fb9f 	bl	80046f8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff f845 	bl	8002054 <_ZN3LED2LREaa>
	logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69d8      	ldr	r0, [r3, #28]
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <_ZN9LineTrace4stopEv+0x5c>)
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <_ZN9LineTrace4stopEv+0x60>)
 8002fd2:	490c      	ldr	r1, [pc, #48]	; (8003004 <_ZN9LineTrace4stopEv+0x64>)
 8002fd4:	f000 fa9e 	bl	8003514 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
	led_.LR(-1, 0);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff f836 	bl	8002054 <_ZN3LED2LREaa>
	logger_->resetLogs();
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fad2 	bl	8003596 <_ZN6Logger9resetLogsEv>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	08017934 	.word	0x08017934
 8003000:	08017940 	.word	0x08017940
 8003004:	08017950 	.word	0x08017950

08003008 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003014:	2300      	movs	r3, #0
 8003016:	737b      	strb	r3, [r7, #13]
	start();
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ffa7 	bl	8002f6c <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800301e:	7b7b      	ldrb	r3, [r7, #13]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d15f      	bne.n	80030e4 <_ZN9LineTrace7runningEv+0xdc>
		switch(stage){
 8003024:	89fb      	ldrh	r3, [r7, #14]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <_ZN9LineTrace7runningEv+0x28>
 800302a:	2b0a      	cmp	r3, #10
 800302c:	d034      	beq.n	8003098 <_ZN9LineTrace7runningEv+0x90>
 800302e:	e058      	b.n	80030e2 <_ZN9LineTrace7runningEv+0xda>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	4618      	mov	r0, r3
 8003036:	f001 f86f 	bl	8004118 <_ZN10SideSensor16getWhiteLineCntREv>
 800303a:	4603      	mov	r3, r0
 800303c:	2b01      	cmp	r3, #1
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d048      	beq.n	80030dc <_ZN9LineTrace7runningEv+0xd4>
				if(mode_selector_ == 1){
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003050:	3340      	adds	r3, #64	; 0x40
 8003052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d103      	bne.n	8003062 <_ZN9LineTrace7runningEv+0x5a>
					loggerStart();
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fcfc 	bl	8002a58 <_ZN9LineTrace11loggerStartEv>
 8003060:	e00a      	b.n	8003078 <_ZN9LineTrace7runningEv+0x70>
				}
				else if(mode_selector_ == 2){
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003068:	3340      	adds	r3, #64	; 0x40
 800306a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d102      	bne.n	8003078 <_ZN9LineTrace7runningEv+0x70>
					startVelocityPlay();
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f892 	bl	800319c <_ZN9LineTrace17startVelocityPlayEv>

				}
				encoder_->clearCrossLineIgnoreDistance();
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fa30 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				led_.LR(1, -1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	330c      	adds	r3, #12
 8003086:	f04f 32ff 	mov.w	r2, #4294967295
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe ffe1 	bl	8002054 <_ZN3LED2LREaa>
				stage = 10;
 8003092:	230a      	movs	r3, #10
 8003094:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003096:	e021      	b.n	80030dc <_ZN9LineTrace7runningEv+0xd4>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	4618      	mov	r0, r3
 800309e:	f001 f83b 	bl	8004118 <_ZN10SideSensor16getWhiteLineCntREv>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <_ZN9LineTrace7runningEv+0xd8>
				loggerStop();
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fce6 	bl	8002a84 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f887 	bl	80031cc <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80030be:	2064      	movs	r0, #100	; 0x64
 80030c0:	f004 fc7c 	bl	80079bc <HAL_Delay>

				setTargetVelocity(0);
 80030c4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80030f4 <_ZN9LineTrace7runningEv+0xec>
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff fed8 	bl	8002e7e <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80030ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030d2:	f004 fc73 	bl	80079bc <HAL_Delay>

				goal_flag = true;
 80030d6:	2301      	movs	r3, #1
 80030d8:	737b      	strb	r3, [r7, #13]

			}

			break;
 80030da:	e001      	b.n	80030e0 <_ZN9LineTrace7runningEv+0xd8>
			break;
 80030dc:	bf00      	nop
 80030de:	e79e      	b.n	800301e <_ZN9LineTrace7runningEv+0x16>
			break;
 80030e0:	bf00      	nop
	while(goal_flag == false){
 80030e2:	e79c      	b.n	800301e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ff5b 	bl	8002fa0 <_ZN9LineTrace4stopEv>
}
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	00000000 	.word	0x00000000

080030f8 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	ed2d 8b02 	vpush	{d8}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true && encoder_->getTotalDistance() >= 10){
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00f      	beq.n	800312e <_ZN9LineTrace9storeLogsEv+0x36>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe f981 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8003118:	eeb0 7a40 	vmov.f32	s14, s0
 800311c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003128:	db01      	blt.n	800312e <_ZN9LineTrace9storeLogsEv+0x36>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <_ZN9LineTrace9storeLogsEv+0x38>
 800312e:	2300      	movs	r3, #0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d02b      	beq.n	800318c <_ZN9LineTrace9storeLogsEv+0x94>
		logger_->storeDistanceAndTheta(encoder_->getTotalDistance(), odometry_->getTheta());
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69dc      	ldr	r4, [r3, #28]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe f96c 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8003142:	eeb0 8a40 	vmov.f32	s16, s0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fcf7 	bl	8003b3e <_ZN8Odometry8getThetaEv>
 8003150:	ec53 2b10 	vmov	r2, r3, d0
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	f7fd fd5e 	bl	8000c18 <__aeabi_d2f>
 800315c:	4603      	mov	r3, r0
 800315e:	ee00 3a90 	vmov	s1, r3
 8003162:	eeb0 0a48 	vmov.f32	s0, s16
 8003166:	4620      	mov	r0, r4
 8003168:	f000 f947 	bl	80033fa <_ZN6Logger21storeDistanceAndThetaEff>
		encoder_->clearTotalCnt();
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe f991 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
		odometry_->clearPotition();
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fcf0 	bl	8003b60 <_ZN8Odometry13clearPotitionEv>
		mon_store_cnt++;
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <_ZN9LineTrace9storeLogsEv+0xa0>)
 800318a:	801a      	strh	r2, [r3, #0]
	}
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	ecbd 8b02 	vpop	{d8}
 8003196:	bd90      	pop	{r4, r7, pc}
 8003198:	20000264 	.word	0x20000264

0800319c <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe f975 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fcd4 	bl	8003b60 <_ZN8Odometry13clearPotitionEv>
	velocity_play_flag_ = true;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031be:	333c      	adds	r3, #60	; 0x3c
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031da:	333c      	adds	r3, #60	; 0x3c
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031e6:	333e      	adds	r3, #62	; 0x3e
 80031e8:	2200      	movs	r2, #0
 80031ea:	801a      	strh	r2, [r3, #0]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800320a:	3340      	adds	r3, #64	; 0x40
 800320c:	887a      	ldrh	r2, [r7, #2]
 800320e:	801a      	strh	r2, [r3, #0]
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800322a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003238:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800323c:	2200      	movs	r2, #0
 800323e:	801a      	strh	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003246:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800324a:	2200      	movs	r2, #0
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003254:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003258:	2200      	movs	r2, #0
 800325a:	801a      	strh	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8003278:	f7fe faa8 	bl	80017cc <sd_mount>
 800327c:	4603      	mov	r3, r0
 800327e:	2b01      	cmp	r3, #1
 8003280:	bf0c      	ite	eq
 8003282:	2301      	moveq	r3, #1
 8003284:	2300      	movne	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d016      	beq.n	80032ba <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 800328c:	f7fd ff08 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003290:	2100      	movs	r1, #0
 8003292:	2000      	movs	r0, #0
 8003294:	f7fd ff14 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003298:	4815      	ldr	r0, [pc, #84]	; (80032f0 <_ZN6Logger10sdCardInitEv+0x84>)
 800329a:	f7fd ff3b 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800329e:	2101      	movs	r1, #1
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7fd ff0d 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80032a6:	4813      	ldr	r0, [pc, #76]	; (80032f4 <_ZN6Logger10sdCardInitEv+0x88>)
 80032a8:	f7fd ff34 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80032ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032b0:	f004 fb84 	bl	80079bc <HAL_Delay>

	  ret = true;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	e015      	b.n	80032e6 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80032ba:	f7fd fef1 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80032be:	2100      	movs	r1, #0
 80032c0:	2000      	movs	r0, #0
 80032c2:	f7fd fefd 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80032c6:	480a      	ldr	r0, [pc, #40]	; (80032f0 <_ZN6Logger10sdCardInitEv+0x84>)
 80032c8:	f7fd ff24 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80032cc:	2101      	movs	r1, #1
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7fd fef6 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80032d4:	4808      	ldr	r0, [pc, #32]	; (80032f8 <_ZN6Logger10sdCardInitEv+0x8c>)
 80032d6:	f7fd ff1d 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80032da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032de:	f004 fb6d 	bl	80079bc <HAL_Delay>

	  ret = false;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	0801798c 	.word	0x0801798c
 80032f4:	08017998 	.word	0x08017998
 80032f8:	080179a0 	.word	0x080179a0

080032fc <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800330e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d029      	beq.n	800336c <_ZN6Logger8storeLogEf+0x70>
		store_data_float_[log_index_tim_] = data;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800331e:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003334:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003344:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003348:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003350:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	f241 3287 	movw	r2, #4999	; 0x1387
 800335a:	4293      	cmp	r3, r2
 800335c:	d906      	bls.n	800336c <_ZN6Logger8storeLogEf+0x70>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003364:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003368:	2200      	movs	r2, #0
 800336a:	801a      	strh	r2, [r3, #0]
	}
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800338a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d02c      	beq.n	80033ee <_ZN6Logger9storeLog2Ef+0x76>
		store_data_float2_[log_index_tim2_] = data;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800339a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80033a6:	3308      	adds	r3, #8
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033b6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033c6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80033ca:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033d2:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80033dc:	4293      	cmp	r3, r2
 80033de:	d906      	bls.n	80033ee <_ZN6Logger9storeLog2Ef+0x76>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033e6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80033ea:	2200      	movs	r2, #0
 80033ec:	801a      	strh	r2, [r3, #0]
	}
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	ed87 0a02 	vstr	s0, [r7, #8]
 8003406:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003410:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800341c:	3310      	adds	r3, #16
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800342c:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003446:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003456:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800345a:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003462:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	f241 726f 	movw	r2, #5999	; 0x176f
 800346c:	4293      	cmp	r3, r2
 800346e:	d906      	bls.n	800347e <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003476:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800347a:	2200      	movs	r2, #0
 800347c:	801a      	strh	r2, [r3, #0]
	//}
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <_ZN6Logger23getDistanceArrayPointerEv>:

const float *Logger::getDistanceArrayPointer()
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003498:	3340      	adds	r3, #64	; 0x40
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
	return store_theta_;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	2300      	movs	r3, #0
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	4613      	mov	r3, r2
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	68b8      	ldr	r0, [r7, #8]
 80034dc:	f7fe f884 	bl	80015e8 <sd_write_array_float>
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80034fa:	3320      	adds	r3, #32
 80034fc:	2200      	movs	r2, #0
 80034fe:	9200      	str	r2, [sp, #0]
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68b8      	ldr	r0, [r7, #8]
 8003508:	f7fe f86e 	bl	80015e8 <sd_write_array_float>
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003528:	3340      	adds	r3, #64	; 0x40
 800352a:	2200      	movs	r2, #0
 800352c:	9200      	str	r2, [sp, #0]
 800352e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	68b8      	ldr	r0, [r7, #8]
 8003536:	f7fe f857 	bl	80015e8 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 8003540:	2300      	movs	r3, #0
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	f241 7270 	movw	r2, #6000	; 0x1770
 800354a:	6839      	ldr	r1, [r7, #0]
 800354c:	68b8      	ldr	r0, [r7, #8]
 800354e:	f7fe f84b 	bl	80015e8 <sd_write_array_float>
}
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800356e:	3340      	adds	r3, #64	; 0x40
 8003570:	f241 7270 	movw	r2, #6000	; 0x1770
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	68b8      	ldr	r0, [r7, #8]
 8003578:	f7fe f89c 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8003582:	f241 7270 	movw	r2, #6000	; 0x1770
 8003586:	6839      	ldr	r1, [r7, #0]
 8003588:	68b8      	ldr	r0, [r7, #8]
 800358a:	f7fe f893 	bl	80016b4 <sd_read_array_float>
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <_ZN6Logger9resetLogsEv>:
	user_fclose();
}
*/

void Logger::resetLogs()
{
 8003596:	b480      	push	{r7}
 8003598:	b093      	sub	sp, #76	; 0x4c
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
 80035a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a4:	647b      	str	r3, [r7, #68]	; 0x44
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80035ac:	3320      	adds	r3, #32
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
 80035b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d009      	beq.n	80035cc <_ZN6Logger9resetLogsEv+0x36>
 80035b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		log = 0;
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 80035c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c6:	3304      	adds	r3, #4
 80035c8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ca:	e7f1      	b.n	80035b0 <_ZN6Logger9resetLogsEv+0x1a>
	}
	for(auto &log : store_data_float2_){
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80035d2:	3320      	adds	r3, #32
 80035d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	643b      	str	r3, [r7, #64]	; 0x40
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80035e0:	3320      	adds	r3, #32
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
 80035e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d009      	beq.n	8003600 <_ZN6Logger9resetLogsEv+0x6a>
 80035ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ee:	623b      	str	r3, [r7, #32]
		log = 0;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 80035f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fa:	3304      	adds	r3, #4
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
 80035fe:	e7f1      	b.n	80035e4 <_ZN6Logger9resetLogsEv+0x4e>
	/*
	for(auto &log : store_data_uint16_){
		log = 0;
	}
	*/
	for(auto &log : store_distance_){
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003606:	3340      	adds	r3, #64	; 0x40
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003614:	3340      	adds	r3, #64	; 0x40
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	429a      	cmp	r2, r3
 800361e:	d009      	beq.n	8003634 <_ZN6Logger9resetLogsEv+0x9e>
 8003620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003622:	617b      	str	r3, [r7, #20]
		log = 0;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance_){
 800362c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362e:	3304      	adds	r3, #4
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003632:	e7f1      	b.n	8003618 <_ZN6Logger9resetLogsEv+0x82>
	}
	for(auto &log : store_theta_){
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003646:	3340      	adds	r3, #64	; 0x40
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	429a      	cmp	r2, r3
 8003650:	d009      	beq.n	8003666 <_ZN6Logger9resetLogsEv+0xd0>
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	60bb      	str	r3, [r7, #8]
		log = 0;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta_){
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	3304      	adds	r3, #4
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
 8003664:	e7f1      	b.n	800364a <_ZN6Logger9resetLogsEv+0xb4>
	}

	log_index_tim_ = 0;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800366c:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003670:	2200      	movs	r2, #0
 8003672:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800367a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800367e:	2200      	movs	r2, #0
 8003680:	801a      	strh	r2, [r3, #0]
}
 8003682:	bf00      	nop
 8003684:	374c      	adds	r7, #76	; 0x4c
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_ZN6Logger5startEv>:

void Logger::start()
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800369c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80036be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	801a      	strh	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	805a      	strh	r2, [r3, #2]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <_ZN5Motor4initEv>:

void Motor::init()
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80036fc:	2108      	movs	r1, #8
 80036fe:	4805      	ldr	r0, [pc, #20]	; (8003714 <_ZN5Motor4initEv+0x20>)
 8003700:	f009 fb24 	bl	800cd4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003704:	210c      	movs	r1, #12
 8003706:	4803      	ldr	r0, [pc, #12]	; (8003714 <_ZN5Motor4initEv+0x20>)
 8003708:	f009 fb20 	bl	800cd4c <HAL_TIM_PWM_Start>

}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20035a3c 	.word	0x20035a3c

08003718 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003726:	2b00      	cmp	r3, #0
 8003728:	da0d      	bge.n	8003746 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800372a:	2200      	movs	r2, #0
 800372c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003730:	481f      	ldr	r0, [pc, #124]	; (80037b0 <_ZN5Motor9motorCtrlEv+0x98>)
 8003732:	f005 fbd9 	bl	8008ee8 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800373c:	b29b      	uxth	r3, r3
 800373e:	425b      	negs	r3, r3
 8003740:	b29b      	uxth	r3, r3
 8003742:	81fb      	strh	r3, [r7, #14]
 8003744:	e00a      	b.n	800375c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8003746:	2201      	movs	r2, #1
 8003748:	f44f 7100 	mov.w	r1, #512	; 0x200
 800374c:	4818      	ldr	r0, [pc, #96]	; (80037b0 <_ZN5Motor9motorCtrlEv+0x98>)
 800374e:	f005 fbcb 	bl	8008ee8 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003758:	b29b      	uxth	r3, r3
 800375a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003762:	2b00      	cmp	r3, #0
 8003764:	da0d      	bge.n	8003782 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8003766:	2201      	movs	r2, #1
 8003768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800376c:	4810      	ldr	r0, [pc, #64]	; (80037b0 <_ZN5Motor9motorCtrlEv+0x98>)
 800376e:	f005 fbbb 	bl	8008ee8 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003778:	b29b      	uxth	r3, r3
 800377a:	425b      	negs	r3, r3
 800377c:	b29b      	uxth	r3, r3
 800377e:	81bb      	strh	r3, [r7, #12]
 8003780:	e00a      	b.n	8003798 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8003782:	2200      	movs	r2, #0
 8003784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003788:	4809      	ldr	r0, [pc, #36]	; (80037b0 <_ZN5Motor9motorCtrlEv+0x98>)
 800378a:	f005 fbad 	bl	8008ee8 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003794:	b29b      	uxth	r3, r3
 8003796:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8003798:	89fa      	ldrh	r2, [r7, #14]
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <_ZN5Motor9motorCtrlEv+0x9c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80037a0:	89ba      	ldrh	r2, [r7, #12]
 80037a2:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <_ZN5Motor9motorCtrlEv+0x9c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40020c00 	.word	0x40020c00
 80037b4:	20035a3c 	.word	0x20035a3c

080037b8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6178      	str	r0, [r7, #20]
 80037c0:	ed87 0b02 	vstr	d0, [r7, #8]
 80037c4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	4b30      	ldr	r3, [pc, #192]	; (8003890 <_ZN5Motor8setRatioEdd+0xd8>)
 80037ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037d2:	f7fd f9b9 	bl	8000b48 <__aeabi_dcmpgt>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <_ZN5Motor8setRatioEdd+0x30>
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	4c2b      	ldr	r4, [pc, #172]	; (8003890 <_ZN5Motor8setRatioEdd+0xd8>)
 80037e2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80037e6:	e00e      	b.n	8003806 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	4b29      	ldr	r3, [pc, #164]	; (8003894 <_ZN5Motor8setRatioEdd+0xdc>)
 80037ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037f2:	f7fd f98b 	bl	8000b0c <__aeabi_dcmplt>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <_ZN5Motor8setRatioEdd+0x4e>
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	4c24      	ldr	r4, [pc, #144]	; (8003894 <_ZN5Motor8setRatioEdd+0xdc>)
 8003802:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4b21      	ldr	r3, [pc, #132]	; (8003890 <_ZN5Motor8setRatioEdd+0xd8>)
 800380c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003810:	f7fd f99a 	bl	8000b48 <__aeabi_dcmpgt>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <_ZN5Motor8setRatioEdd+0x6e>
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	4c1c      	ldr	r4, [pc, #112]	; (8003890 <_ZN5Motor8setRatioEdd+0xd8>)
 8003820:	e9c7 3400 	strd	r3, r4, [r7]
 8003824:	e00e      	b.n	8003844 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <_ZN5Motor8setRatioEdd+0xdc>)
 800382c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003830:	f7fd f96c 	bl	8000b0c <__aeabi_dcmplt>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <_ZN5Motor8setRatioEdd+0x8c>
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	4c15      	ldr	r4, [pc, #84]	; (8003894 <_ZN5Motor8setRatioEdd+0xdc>)
 8003840:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <_ZN5Motor8setRatioEdd+0xe0>)
 800384a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800384e:	f7fc feeb 	bl	8000628 <__aeabi_dmul>
 8003852:	4603      	mov	r3, r0
 8003854:	460c      	mov	r4, r1
 8003856:	4618      	mov	r0, r3
 8003858:	4621      	mov	r1, r4
 800385a:	f7fd f995 	bl	8000b88 <__aeabi_d2iz>
 800385e:	4603      	mov	r3, r0
 8003860:	b21a      	sxth	r2, r3
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <_ZN5Motor8setRatioEdd+0xe0>)
 800386c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003870:	f7fc feda 	bl	8000628 <__aeabi_dmul>
 8003874:	4603      	mov	r3, r0
 8003876:	460c      	mov	r4, r1
 8003878:	4618      	mov	r0, r3
 800387a:	4621      	mov	r1, r4
 800387c:	f7fd f984 	bl	8000b88 <__aeabi_d2iz>
 8003880:	4603      	mov	r3, r0
 8003882:	b21a      	sxth	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	805a      	strh	r2, [r3, #2]

}
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd90      	pop	{r4, r7, pc}
 8003890:	3ff00000 	.word	0x3ff00000
 8003894:	bff00000 	.word	0xbff00000
 8003898:	409c2000 	.word	0x409c2000

0800389c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 800389c:	b490      	push	{r4, r7}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	f04f 0400 	mov.w	r4, #0
 80038b4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	f04f 0400 	mov.w	r4, #0
 80038c2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	f04f 0400 	mov.w	r4, #0
 80038d0:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	f04f 0400 	mov.w	r4, #0
 80038de:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	f04f 0400 	mov.w	r4, #0
 80038ec:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	609a      	str	r2, [r3, #8]
}
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bc90      	pop	{r4, r7}
 800390c:	4770      	bx	lr
	...

08003910 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8003910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe f91a 	bl	8001b58 <_ZN3IMU8getOmegaEv>
 8003924:	ee10 3a10 	vmov	r3, s0
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fe25 	bl	8000578 <__aeabi_f2d>
 800392e:	4603      	mov	r3, r0
 8003930:	460c      	mov	r4, r1
 8003932:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd fd5e 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 8003940:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8003944:	a376      	add	r3, pc, #472	; (adr r3, 8003b20 <_ZN8Odometry12calcPotitionEv+0x210>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800394e:	f7fc fe6b 	bl	8000628 <__aeabi_dmul>
 8003952:	4603      	mov	r3, r0
 8003954:	460c      	mov	r4, r1
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7fc fe08 	bl	8000578 <__aeabi_f2d>
 8003968:	4682      	mov	sl, r0
 800396a:	468b      	mov	fp, r1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003980:	f7fc ff7c 	bl	800087c <__aeabi_ddiv>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4640      	mov	r0, r8
 800398a:	4649      	mov	r1, r9
 800398c:	f7fc fc96 	bl	80002bc <__adddf3>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	ec43 2b17 	vmov	d7, r2, r3
 8003998:	eeb0 0a47 	vmov.f32	s0, s14
 800399c:	eef0 0a67 	vmov.f32	s1, s15
 80039a0:	f00e fd1a 	bl	80123d8 <cos>
 80039a4:	ec53 2b10 	vmov	r2, r3, d0
 80039a8:	4650      	mov	r0, sl
 80039aa:	4659      	mov	r1, fp
 80039ac:	f7fc fe3c 	bl	8000628 <__aeabi_dmul>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4620      	mov	r0, r4
 80039b6:	4629      	mov	r1, r5
 80039b8:	f7fc fc80 	bl	80002bc <__adddf3>
 80039bc:	4603      	mov	r3, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7fc fdd3 	bl	8000578 <__aeabi_f2d>
 80039d2:	4682      	mov	sl, r0
 80039d4:	468b      	mov	fp, r1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039ea:	f7fc ff47 	bl	800087c <__aeabi_ddiv>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4640      	mov	r0, r8
 80039f4:	4649      	mov	r1, r9
 80039f6:	f7fc fc61 	bl	80002bc <__adddf3>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	ec43 2b17 	vmov	d7, r2, r3
 8003a02:	eeb0 0a47 	vmov.f32	s0, s14
 8003a06:	eef0 0a67 	vmov.f32	s1, s15
 8003a0a:	f00e fd29 	bl	8012460 <sin>
 8003a0e:	ec53 2b10 	vmov	r2, r3, d0
 8003a12:	4650      	mov	r0, sl
 8003a14:	4659      	mov	r1, fp
 8003a16:	f7fc fe07 	bl	8000628 <__aeabi_dmul>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4620      	mov	r0, r4
 8003a20:	4629      	mov	r1, r5
 8003a22:	f7fc fc4b 	bl	80002bc <__adddf3>
 8003a26:	4603      	mov	r3, r0
 8003a28:	460c      	mov	r4, r1
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4623      	mov	r3, r4
 8003a40:	f7fc fc3c 	bl	80002bc <__adddf3>
 8003a44:	4603      	mov	r3, r0
 8003a46:	460c      	mov	r4, r1
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	ed93 7b08 	vldr	d7, [r3, #32]
 8003a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a5e:	eef0 0a67 	vmov.f32	s1, s15
 8003a62:	f00e fcb9 	bl	80123d8 <cos>
 8003a66:	ec51 0b10 	vmov	r0, r1, d0
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <_ZN8Odometry12calcPotitionEv+0x200>)
 8003a70:	f7fc fdda 	bl	8000628 <__aeabi_dmul>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4620      	mov	r0, r4
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	f7fc fc1e 	bl	80002bc <__adddf3>
 8003a80:	4603      	mov	r3, r0
 8003a82:	460c      	mov	r4, r1
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	ed93 7b08 	vldr	d7, [r3, #32]
 8003a96:	eeb0 0a47 	vmov.f32	s0, s14
 8003a9a:	eef0 0a67 	vmov.f32	s1, s15
 8003a9e:	f00e fcdf 	bl	8012460 <sin>
 8003aa2:	ec51 0b10 	vmov	r0, r1, d0
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <_ZN8Odometry12calcPotitionEv+0x200>)
 8003aac:	f7fc fdbc 	bl	8000628 <__aeabi_dmul>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fc00 	bl	80002bc <__adddf3>
 8003abc:	4603      	mov	r3, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003acc:	4618      	mov	r0, r3
 8003ace:	4621      	mov	r1, r4
 8003ad0:	f7fd f8a2 	bl	8000c18 <__aeabi_d2f>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <_ZN8Odometry12calcPotitionEv+0x204>)
 8003ad8:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	f7fd f898 	bl	8000c18 <__aeabi_d2f>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <_ZN8Odometry12calcPotitionEv+0x208>)
 8003aec:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003af4:	4618      	mov	r0, r3
 8003af6:	4621      	mov	r1, r4
 8003af8:	f7fd f88e 	bl	8000c18 <__aeabi_d2f>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8003b00:	601a      	str	r2, [r3, #0]
}
 8003b02:	bf00      	nop
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b0c:	f3af 8000 	nop.w
 8003b10:	405b8000 	.word	0x405b8000
 8003b14:	20000280 	.word	0x20000280
 8003b18:	20000284 	.word	0x20000284
 8003b1c:	20000288 	.word	0x20000288
 8003b20:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b24:	3f50624d 	.word	0x3f50624d

08003b28 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff feed 	bl	8003910 <_ZN8Odometry12calcPotitionEv>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8003b3e:	b490      	push	{r4, r7}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
	return theta_;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003b4c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003b50:	eeb0 0a47 	vmov.f32	s0, s14
 8003b54:	eef0 0a67 	vmov.f32	s1, s15
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc90      	pop	{r4, r7}
 8003b5e:	4770      	bx	lr

08003b60 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8003b60:	b490      	push	{r4, r7}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	f04f 0400 	mov.w	r4, #0
 8003b72:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	f04f 0400 	mov.w	r4, #0
 8003b80:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	f04f 0400 	mov.w	r4, #0
 8003b8e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc90      	pop	{r4, r7}
 8003b9a:	4770      	bx	lr

08003b9c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8003b9c:	b490      	push	{r4, r7}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	f04f 0400 	mov.w	r4, #0
 8003bb4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	f04f 0400 	mov.w	r4, #0
 8003bc2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	f04f 0400 	mov.w	r4, #0
 8003bd0:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003bda:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003bde:	2200      	movs	r2, #0
 8003be0:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8003be2:	4a29      	ldr	r2, [pc, #164]	; (8003c88 <_ZN13PathFollowingC1Ev+0xec>)
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	f04f 0400 	mov.w	r4, #0
 8003bec:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8003bf0:	4a25      	ldr	r2, [pc, #148]	; (8003c88 <_ZN13PathFollowingC1Ev+0xec>)
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	f04f 0400 	mov.w	r4, #0
 8003bfa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003bfe:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <_ZN13PathFollowingC1Ev+0xec>)
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	f04f 0400 	mov.w	r4, #0
 8003c08:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003c0c:	4a1f      	ldr	r2, [pc, #124]	; (8003c8c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	f04f 0400 	mov.w	r4, #0
 8003c16:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	f04f 0400 	mov.w	r4, #0
 8003c24:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8003c28:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	f04f 0400 	mov.w	r4, #0
 8003c32:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	f04f 0400 	mov.w	r4, #0
 8003c40:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003c44:	4a11      	ldr	r2, [pc, #68]	; (8003c8c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	f04f 0400 	mov.w	r4, #0
 8003c4e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003c52:	4a0e      	ldr	r2, [pc, #56]	; (8003c8c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	f04f 0400 	mov.w	r4, #0
 8003c5c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003c60:	4a0b      	ldr	r2, [pc, #44]	; (8003c90 <_ZN13PathFollowingC1Ev+0xf4>)
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	f04f 0400 	mov.w	r4, #0
 8003c6a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003c6e:	4a08      	ldr	r2, [pc, #32]	; (8003c90 <_ZN13PathFollowingC1Ev+0xf4>)
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	f04f 0400 	mov.w	r4, #0
 8003c78:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc90      	pop	{r4, r7}
 8003c86:	4770      	bx	lr
 8003c88:	20035f40 	.word	0x20035f40
 8003c8c:	20035ed0 	.word	0x20035ed0
 8003c90:	20035f30 	.word	0x20035f30

08003c94 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8003c9c:	f001 fce2 	bl	8005664 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8003ca0:	f107 0318 	add.w	r3, r7, #24
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	4915      	ldr	r1, [pc, #84]	; (8003cfc <_ZN13PathFollowing4initEv+0x68>)
 8003ca8:	4815      	ldr	r0, [pc, #84]	; (8003d00 <_ZN13PathFollowing4initEv+0x6c>)
 8003caa:	f7fd fd49 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8003cae:	f107 0310 	add.w	r3, r7, #16
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4913      	ldr	r1, [pc, #76]	; (8003d04 <_ZN13PathFollowing4initEv+0x70>)
 8003cb6:	4812      	ldr	r0, [pc, #72]	; (8003d00 <_ZN13PathFollowing4initEv+0x6c>)
 8003cb8:	f7fd fd42 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4911      	ldr	r1, [pc, #68]	; (8003d08 <_ZN13PathFollowing4initEv+0x74>)
 8003cc4:	480e      	ldr	r0, [pc, #56]	; (8003d00 <_ZN13PathFollowing4initEv+0x6c>)
 8003cc6:	f7fd fd3b 	bl	8001740 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8003cca:	ed97 7b06 	vldr	d7, [r7, #24]
 8003cce:	ed97 6b04 	vldr	d6, [r7, #16]
 8003cd2:	ed97 5b02 	vldr	d5, [r7, #8]
 8003cd6:	eeb0 2a45 	vmov.f32	s4, s10
 8003cda:	eef0 2a65 	vmov.f32	s5, s11
 8003cde:	eeb0 1a46 	vmov.f32	s2, s12
 8003ce2:	eef0 1a66 	vmov.f32	s3, s13
 8003ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8003cea:	eef0 0a67 	vmov.f32	s1, s15
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f80c 	bl	8003d0c <_ZN13PathFollowing7setGainEddd>
}
 8003cf4:	bf00      	nop
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	080179a8 	.word	0x080179a8
 8003d00:	080179b0 	.word	0x080179b0
 8003d04:	080179b8 	.word	0x080179b8
 8003d08:	080179c0 	.word	0x080179c0

08003d0c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003d0c:	b490      	push	{r4, r7}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	61f8      	str	r0, [r7, #28]
 8003d14:	ed87 0b04 	vstr	d0, [r7, #16]
 8003d18:	ed87 1b02 	vstr	d1, [r7, #8]
 8003d1c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003d20:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003d22:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003d26:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8003d2a:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003d2c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003d30:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003d36:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003d3a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003d3e:	bf00      	nop
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc90      	pop	{r4, r7}
 8003d46:	4770      	bx	lr
 8003d48:	20035f40 	.word	0x20035f40

08003d4c <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003d4c:	b490      	push	{r4, r7}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <_ZN13PathFollowing8getKxValEv+0x24>)
 8003d56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d5a:	ec44 3b17 	vmov	d7, r3, r4
}
 8003d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d62:	eef0 0a67 	vmov.f32	s1, s15
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc90      	pop	{r4, r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20035f40 	.word	0x20035f40

08003d74 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003d74:	b490      	push	{r4, r7}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <_ZN13PathFollowing8getKyValEv+0x24>)
 8003d7e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003d82:	ec44 3b17 	vmov	d7, r3, r4
}
 8003d86:	eeb0 0a47 	vmov.f32	s0, s14
 8003d8a:	eef0 0a67 	vmov.f32	s1, s15
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc90      	pop	{r4, r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20035f40 	.word	0x20035f40

08003d9c <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003d9c:	b490      	push	{r4, r7}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <_ZN13PathFollowing8getKtValEv+0x24>)
 8003da6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003daa:	ec44 3b17 	vmov	d7, r3, r4
}
 8003dae:	eeb0 0a47 	vmov.f32	s0, s14
 8003db2:	eef0 0a67 	vmov.f32	s1, s15
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc90      	pop	{r4, r7}
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20035f40 	.word	0x20035f40

08003dc4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003dcc:	2088      	movs	r0, #136	; 0x88
 8003dce:	f7fe f806 	bl	8001dde <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003dd2:	2080      	movs	r0, #128	; 0x80
 8003dd4:	f7fe f803 	bl	8001dde <INA260_init>
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003de8:	2188      	movs	r1, #136	; 0x88
 8003dea:	2002      	movs	r0, #2
 8003dec:	f7fd ff94 	bl	8001d18 <INA260_read>
 8003df0:	4603      	mov	r3, r0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc fbae 	bl	8000554 <__aeabi_i2d>
 8003df8:	a30c      	add	r3, pc, #48	; (adr r3, 8003e2c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f7fc fc13 	bl	8000628 <__aeabi_dmul>
 8003e02:	4603      	mov	r3, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	4618      	mov	r0, r3
 8003e08:	4621      	mov	r1, r4
 8003e0a:	f7fc ff05 	bl	8000c18 <__aeabi_d2f>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4a03      	ldr	r2, [pc, #12]	; (8003e28 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003e1a:	6013      	str	r3, [r2, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd90      	pop	{r4, r7, pc}
 8003e24:	f3af 8000 	nop.w
 8003e28:	2000028c 	.word	0x2000028c
 8003e2c:	47ae147b 	.word	0x47ae147b
 8003e30:	3f547ae1 	.word	0x3f547ae1

08003e34 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	ee07 3a90 	vmov	s15, r3

}
 8003e44:	eeb0 0a67 	vmov.f32	s0, s15
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	0000      	movs	r0, r0
 8003e54:	0000      	movs	r0, r0
	...

08003e58 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fc fb85 	bl	8000578 <__aeabi_f2d>
 8003e6e:	a311      	add	r3, pc, #68	; (adr r3, 8003eb4 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f7fc fe4a 	bl	8000b0c <__aeabi_dcmplt>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d006      	beq.n	8003e8c <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	3301      	adds	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003e88:	801a      	strh	r2, [r3, #0]
 8003e8a:	e002      	b.n	8003e92 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003e8c:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003e92:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000290 	.word	0x20000290
 8003eb4:	9999999a 	.word	0x9999999a
 8003eb8:	401d9999 	.word	0x401d9999

08003ebc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003ec8:	2102      	movs	r1, #2
 8003eca:	4822      	ldr	r0, [pc, #136]	; (8003f54 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003ecc:	f004 fff4 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003ee0:	89fb      	ldrh	r3, [r7, #14]
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003ee8:	2108      	movs	r1, #8
 8003eea:	481a      	ldr	r0, [pc, #104]	; (8003f54 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003eec:	f004 ffe4 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bf0c      	ite	eq
 8003ef6:	2301      	moveq	r3, #1
 8003ef8:	2300      	movne	r3, #0
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003f00:	89fb      	ldrh	r3, [r7, #14]
 8003f02:	f043 0302 	orr.w	r3, r3, #2
 8003f06:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003f08:	2110      	movs	r1, #16
 8003f0a:	4812      	ldr	r0, [pc, #72]	; (8003f54 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003f0c:	f004 ffd4 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003f20:	89fb      	ldrh	r3, [r7, #14]
 8003f22:	f043 0304 	orr.w	r3, r3, #4
 8003f26:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003f28:	2180      	movs	r1, #128	; 0x80
 8003f2a:	480a      	ldr	r0, [pc, #40]	; (8003f54 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003f2c:	f004 ffc4 	bl	8008eb8 <HAL_GPIO_ReadPin>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf0c      	ite	eq
 8003f36:	2301      	moveq	r3, #1
 8003f38:	2300      	movne	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003f40:	89fb      	ldrh	r3, [r7, #14]
 8003f42:	f043 0308 	orr.w	r3, r3, #8
 8003f46:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003f48:	89fb      	ldrh	r3, [r7, #14]

}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40020c00 	.word	0x40020c00

08003f58 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	801a      	strh	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	805a      	strh	r2, [r3, #2]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	809a      	strh	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	719a      	strb	r2, [r3, #6]
{

}
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <_ZN10SideSensor12updateStatusEt>:

void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	799b      	ldrb	r3, [r3, #6]
 8003f98:	f083 0301 	eor.w	r3, r3, #1
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80a7 	beq.w	80040f2 <_ZN10SideSensor12updateStatusEt+0x16a>

		if(white_flag1 == false){
 8003fa4:	4b56      	ldr	r3, [pc, #344]	; (8004100 <_ZN10SideSensor12updateStatusEt+0x178>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	f083 0301 	eor.w	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01e      	beq.n	8003ff0 <_ZN10SideSensor12updateStatusEt+0x68>
			if (gpio_pin == GPIO_PIN_2){
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d106      	bne.n	8003fc6 <_ZN10SideSensor12updateStatusEt+0x3e>
				cnt_r++;
 8003fb8:	4b52      	ldr	r3, [pc, #328]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	4b50      	ldr	r3, [pc, #320]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	e002      	b.n	8003fcc <_ZN10SideSensor12updateStatusEt+0x44>
			}
			else{
				cnt_r = 0;
 8003fc6:	4b4f      	ldr	r3, [pc, #316]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8003fcc:	4b4d      	ldr	r3, [pc, #308]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d93a      	bls.n	800404a <_ZN10SideSensor12updateStatusEt+0xc2>
				status_ |= 0x01;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8003fe2:	4b47      	ldr	r3, [pc, #284]	; (8004100 <_ZN10SideSensor12updateStatusEt+0x178>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8003fe8:	4b46      	ldr	r3, [pc, #280]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	e02c      	b.n	800404a <_ZN10SideSensor12updateStatusEt+0xc2>
			}

		}
		else if(white_flag1 == true){
 8003ff0:	4b43      	ldr	r3, [pc, #268]	; (8004100 <_ZN10SideSensor12updateStatusEt+0x178>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d028      	beq.n	800404a <_ZN10SideSensor12updateStatusEt+0xc2>
			if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d10a      	bne.n	8004014 <_ZN10SideSensor12updateStatusEt+0x8c>
 8003ffe:	4b40      	ldr	r3, [pc, #256]	; (8004100 <_ZN10SideSensor12updateStatusEt+0x178>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d006      	beq.n	8004014 <_ZN10SideSensor12updateStatusEt+0x8c>
				cnt_r++;
 8004006:	4b3f      	ldr	r3, [pc, #252]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8004010:	801a      	strh	r2, [r3, #0]
 8004012:	e002      	b.n	800401a <_ZN10SideSensor12updateStatusEt+0x92>
			}
			else{
				cnt_r = 0;
 8004014:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8004016:	2200      	movs	r2, #0
 8004018:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800401a:	4b3a      	ldr	r3, [pc, #232]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	2b04      	cmp	r3, #4
 8004020:	d913      	bls.n	800404a <_ZN10SideSensor12updateStatusEt+0xc2>
				status_ ^= 0x01;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	f083 0301 	eor.w	r3, r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004030:	4b33      	ldr	r3, [pc, #204]	; (8004100 <_ZN10SideSensor12updateStatusEt+0x178>)
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	889b      	ldrh	r3, [r3, #4]
 800403a:	3301      	adds	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	889a      	ldrh	r2, [r3, #4]
 8004046:	4b30      	ldr	r3, [pc, #192]	; (8004108 <_ZN10SideSensor12updateStatusEt+0x180>)
 8004048:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800404a:	4b30      	ldr	r3, [pc, #192]	; (800410c <_ZN10SideSensor12updateStatusEt+0x184>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	f083 0301 	eor.w	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01e      	beq.n	8004096 <_ZN10SideSensor12updateStatusEt+0x10e>
			if(gpio_pin == GPIO_PIN_8){
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405e:	d106      	bne.n	800406e <_ZN10SideSensor12updateStatusEt+0xe6>
				cnt_r++;
 8004060:	4b28      	ldr	r3, [pc, #160]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	4b26      	ldr	r3, [pc, #152]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	e002      	b.n	8004074 <_ZN10SideSensor12updateStatusEt+0xec>
			}
			else{
				cnt_r = 0;
 800406e:	4b25      	ldr	r3, [pc, #148]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8004070:	2200      	movs	r2, #0
 8004072:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004074:	4b23      	ldr	r3, [pc, #140]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d90c      	bls.n	8004096 <_ZN10SideSensor12updateStatusEt+0x10e>
				status_ |= 0x02;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 800408a:	4b20      	ldr	r3, [pc, #128]	; (800410c <_ZN10SideSensor12updateStatusEt+0x184>)
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004090:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 8004092:	2200      	movs	r2, #0
 8004094:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <_ZN10SideSensor12updateStatusEt+0x184>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d025      	beq.n	80040ea <_ZN10SideSensor12updateStatusEt+0x162>
			if(gpio_pin == GPIO_PIN_8){
 800409e:	887b      	ldrh	r3, [r7, #2]
 80040a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a4:	d106      	bne.n	80040b4 <_ZN10SideSensor12updateStatusEt+0x12c>
				cnt_r++;
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4b15      	ldr	r3, [pc, #84]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 80040b0:	801a      	strh	r2, [r3, #0]
 80040b2:	e002      	b.n	80040ba <_ZN10SideSensor12updateStatusEt+0x132>
			}
			else{
				cnt_r = 0;
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <_ZN10SideSensor12updateStatusEt+0x17c>)
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d913      	bls.n	80040ea <_ZN10SideSensor12updateStatusEt+0x162>
				status_ ^= 0x02;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	f083 0302 	eor.w	r3, r3, #2
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80040d0:	4b0e      	ldr	r3, [pc, #56]	; (800410c <_ZN10SideSensor12updateStatusEt+0x184>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	885b      	ldrh	r3, [r3, #2]
 80040da:	3301      	adds	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	885a      	ldrh	r2, [r3, #2]
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <_ZN10SideSensor12updateStatusEt+0x188>)
 80040e8:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	881a      	ldrh	r2, [r3, #0]
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <_ZN10SideSensor12updateStatusEt+0x18c>)
 80040f0:	801a      	strh	r2, [r3, #0]
	}

}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000298 	.word	0x20000298
 8004104:	2000029a 	.word	0x2000029a
 8004108:	20000296 	.word	0x20000296
 800410c:	20000299 	.word	0x20000299
 8004110:	20000294 	.word	0x20000294
 8004114:	20000292 	.word	0x20000292

08004118 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	889b      	ldrh	r3, [r3, #4]
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	809a      	strh	r2, [r3, #4]
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	719a      	strb	r2, [r3, #6]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	719a      	strb	r2, [r3, #6]
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	799b      	ldrb	r3, [r3, #6]
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a10      	ldr	r2, [pc, #64]	; (80041ec <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80041ac:	3308      	adds	r3, #8
 80041ae:	4611      	mov	r1, r2
 80041b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041b4:	4618      	mov	r0, r3
 80041b6:	f00f f98f 	bl	80134d8 <memcpy>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	080179e4 	.word	0x080179e4

080041f0 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	ed97 0a00 	vldr	s0, [r7]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff f874 	bl	80032fc <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800421e:	eeb0 0a67 	vmov.f32	s0, s15
 8004222:	4610      	mov	r0, r2
 8004224:	f7ff f8a8 	bl	8003378 <_ZN6Logger9storeLog2Ef>
	}

}
 8004228:	bf00      	nop
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 800423e:	4908      	ldr	r1, [pc, #32]	; (8004260 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff f93d 	bl	80034c0 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a06      	ldr	r2, [pc, #24]	; (8004264 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 800424c:	4904      	ldr	r1, [pc, #16]	; (8004260 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff f94a 	bl	80034e8 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	08017bd8 	.word	0x08017bd8
 8004260:	08017be4 	.word	0x08017be4
 8004264:	08017bf0 	.word	0x08017bf0

08004268 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8004268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004276:	2b00      	cmp	r3, #0
 8004278:	d046      	beq.n	8004308 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004286:	461a      	mov	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3204      	adds	r2, #4
 800428c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004290:	ee07 3a90 	vmov	s15, r3
 8004294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80042a8:	3301      	adds	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042b8:	4a15      	ldr	r2, [pc, #84]	; (8004310 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 80042ba:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80042c2:	2bf9      	cmp	r3, #249	; 0xf9
 80042c4:	d903      	bls.n	80042ce <_ZN20SystemIdentification10updateMsigEv+0x66>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	22fa      	movs	r2, #250	; 0xfa
 80042ca:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685c      	ldr	r4, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc f94d 	bl	8000578 <__aeabi_f2d>
 80042de:	4605      	mov	r5, r0
 80042e0:	460e      	mov	r6, r1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80042e8:	eef1 7a67 	vneg.f32	s15, s15
 80042ec:	ee17 3a90 	vmov	r3, s15
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fc f941 	bl	8000578 <__aeabi_f2d>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	ec43 2b11 	vmov	d1, r2, r3
 80042fe:	ec46 5b10 	vmov	d0, r5, r6
 8004302:	4620      	mov	r0, r4
 8004304:	f7ff fa58 	bl	80037b8 <_ZN5Motor8setRatioEdd>

	}

}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004310:	2000029c 	.word	0x2000029c

08004314 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff f9a4 	bl	800368e <_ZN6Logger5startEv>
	processing_flag_ = true;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff f9a3 	bl	80036b0 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004398 <_ZN20SystemIdentification4stopEv+0x40>
 8004382:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004398 <_ZN20SystemIdentification4stopEv+0x40>
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fa16 	bl	80037b8 <_ZN5Motor8setRatioEdd>
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	f3af 8000 	nop.w
	...

080043a0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	615a      	str	r2, [r3, #20]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	619a      	str	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	61da      	str	r2, [r3, #28]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	621a      	str	r2, [r3, #32]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004444:	f107 020c 	add.w	r2, r7, #12
 8004448:	f107 0110 	add.w	r1, r7, #16
 800444c:	4618      	mov	r0, r3
 800444e:	f7fc ffc1 	bl	80013d4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8004452:	ed97 7a04 	vldr	s14, [r7, #16]
 8004456:	edd7 7a03 	vldr	s15, [r7, #12]
 800445a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800445e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004466:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800446a:	6978      	ldr	r0, [r7, #20]
 800446c:	f7fc f884 	bl	8000578 <__aeabi_f2d>
 8004470:	a30b      	add	r3, pc, #44	; (adr r3, 80044a0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f7fc f8d7 	bl	8000628 <__aeabi_dmul>
 800447a:	4603      	mov	r3, r0
 800447c:	460c      	mov	r4, r1
 800447e:	4618      	mov	r0, r3
 8004480:	4621      	mov	r1, r4
 8004482:	f7fc fbc9 	bl	8000c18 <__aeabi_d2f>
 8004486:	4602      	mov	r2, r0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	ee07 3a90 	vmov	s15, r3
}
 8004494:	eeb0 0a67 	vmov.f32	s0, s15
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}
 800449e:	bf00      	nop
 80044a0:	1ab1d998 	.word	0x1ab1d998
 80044a4:	3f7830b5 	.word	0x3f7830b5

080044a8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80044a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	ed93 7a00 	vldr	s14, [r3]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80044bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044c0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 80044ce:	4b48      	ldr	r3, [pc, #288]	; (80045f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80044e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80044e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ec:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80044f0:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fc f83f 	bl	8000578 <__aeabi_f2d>
 80044fa:	4604      	mov	r4, r0
 80044fc:	460d      	mov	r5, r1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	ed93 7a06 	vldr	s14, [r3, #24]
 8004504:	edd7 7a05 	vldr	s15, [r7, #20]
 8004508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450c:	ee17 0a90 	vmov	r0, s15
 8004510:	f7fc f832 	bl	8000578 <__aeabi_f2d>
 8004514:	a334      	add	r3, pc, #208	; (adr r3, 80045e8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	f7fc f885 	bl	8000628 <__aeabi_dmul>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f7fb fec9 	bl	80002bc <__adddf3>
 800452a:	4603      	mov	r3, r0
 800452c:	460c      	mov	r4, r1
 800452e:	4618      	mov	r0, r3
 8004530:	4621      	mov	r1, r4
 8004532:	f7fc fb71 	bl	8000c18 <__aeabi_d2f>
 8004536:	4602      	mov	r2, r0
 8004538:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800453a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004542:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8004544:	edd3 7a00 	vldr	s15, [r3]
 8004548:	edd7 6a05 	vldr	s13, [r7, #20]
 800454c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004554:	ee17 0a90 	vmov	r0, s15
 8004558:	f7fc f80e 	bl	8000578 <__aeabi_f2d>
 800455c:	a322      	add	r3, pc, #136	; (adr r3, 80045e8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f7fc f98b 	bl	800087c <__aeabi_ddiv>
 8004566:	4603      	mov	r3, r0
 8004568:	460c      	mov	r4, r1
 800456a:	4618      	mov	r0, r3
 800456c:	4621      	mov	r1, r4
 800456e:	f7fc fb53 	bl	8000c18 <__aeabi_d2f>
 8004572:	4603      	mov	r3, r0
 8004574:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8004576:	ed97 7a04 	vldr	s14, [r7, #16]
 800457a:	edd7 7a03 	vldr	s15, [r7, #12]
 800457e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004582:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004584:	edd3 7a00 	vldr	s15, [r3]
 8004588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800458c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800459a:	edd7 7a02 	vldr	s15, [r7, #8]
 800459e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045a2:	ee17 0a90 	vmov	r0, s15
 80045a6:	f7fb ffe7 	bl	8000578 <__aeabi_f2d>
 80045aa:	4605      	mov	r5, r0
 80045ac:	460e      	mov	r6, r1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80045b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80045b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045bc:	ee17 0a90 	vmov	r0, s15
 80045c0:	f7fb ffda 	bl	8000578 <__aeabi_f2d>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	ec43 2b11 	vmov	d1, r2, r3
 80045cc:	ec46 5b10 	vmov	d0, r5, r6
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7ff f8f1 	bl	80037b8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80045d6:	4a07      	ldr	r2, [pc, #28]	; (80045f4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	6013      	str	r3, [r2, #0]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e4:	f3af 8000 	nop.w
 80045e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80045ec:	3f50624d 	.word	0x3f50624d
 80045f0:	200002a4 	.word	0x200002a4
 80045f4:	200002a0 	.word	0x200002a0

080045f8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	ed87 0a02 	vstr	s0, [r7, #8]
 8004604:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	605a      	str	r2, [r3, #4]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	ed87 0a02 	vstr	s0, [r7, #8]
 800462c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	ed87 0a02 	vstr	s0, [r7, #8]
 8004654:	edc7 0a01 	vstr	s1, [r7, #4]
 8004658:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	615a      	str	r2, [r3, #20]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	ed87 0a02 	vstr	s0, [r7, #8]
 8004686:	edc7 0a01 	vstr	s1, [r7, #4]
 800468a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	621a      	str	r2, [r3, #32]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff febf 	bl	8004438 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff feef 	bl	80044a8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004728 <_ZN12VelocityCtrl4stopEv+0x30>
 8004710:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004728 <_ZN12VelocityCtrl4stopEv+0x30>
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff f84f 	bl	80037b8 <_ZN5Motor8setRatioEdd>

}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	f3af 8000 	nop.w
	...

08004730 <HAL_GPIO_EXTI_Callback>:
  return len;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 800473a:	88fb      	ldrh	r3, [r7, #6]
 800473c:	4618      	mov	r0, r3
 800473e:	f001 fec3 	bl	80064c8 <cppExit>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d10e      	bne.n	800477c <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 800475e:	f001 fe43 	bl	80063e8 <cppFlip1ms>

		tim6_timer++;
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800476a:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 800476c:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d902      	bls.n	800477c <HAL_TIM_PeriodElapsedCallback+0x30>
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d10e      	bne.n	80047a4 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8004786:	f001 fe77 	bl	8006478 <cppFlip100ns>

		tim7_timer++;
 800478a:	4b16      	ldr	r3, [pc, #88]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3301      	adds	r3, #1
 8004790:	4a14      	ldr	r2, [pc, #80]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004792:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8004794:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a10      	ldr	r2, [pc, #64]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d902      	bls.n	80047a4 <HAL_TIM_PeriodElapsedCallback+0x58>
 800479e:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a0f      	ldr	r2, [pc, #60]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d10e      	bne.n	80047cc <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80047ae:	f001 fe6d 	bl	800648c <cppFlip10ms>

		tim13_timer++;
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3301      	adds	r3, #1
 80047b8:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80047ba:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a06      	ldr	r2, [pc, #24]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d902      	bls.n	80047cc <HAL_TIM_PeriodElapsedCallback+0x80>
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
	}

}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40001000 	.word	0x40001000
 80047d8:	20035bac 	.word	0x20035bac
 80047dc:	0001869f 	.word	0x0001869f
 80047e0:	40001400 	.word	0x40001400
 80047e4:	20035bf0 	.word	0x20035bf0
 80047e8:	40001c00 	.word	0x40001c00
 80047ec:	20035bf4 	.word	0x20035bf4

080047f0 <init>:

void init()
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80047f4:	2201      	movs	r2, #1
 80047f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047fa:	4808      	ldr	r0, [pc, #32]	; (800481c <init+0x2c>)
 80047fc:	f004 fb74 	bl	8008ee8 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8004800:	4807      	ldr	r0, [pc, #28]	; (8004820 <init+0x30>)
 8004802:	f008 fa54 	bl	800ccae <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8004806:	4807      	ldr	r0, [pc, #28]	; (8004824 <init+0x34>)
 8004808:	f008 fa51 	bl	800ccae <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 800480c:	4806      	ldr	r0, [pc, #24]	; (8004828 <init+0x38>)
 800480e:	f008 fa4e 	bl	800ccae <HAL_TIM_Base_Start_IT>

	cppInit();
 8004812:	f001 fd3f 	bl	8006294 <cppInit>

	//path_following_initialize();

}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000
 8004820:	20035cd8 	.word	0x20035cd8
 8004824:	20035e7c 	.word	0x20035e7c
 8004828:	20035bf8 	.word	0x20035bf8

0800482c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004830:	f003 f852 	bl	80078d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004834:	f000 f82a 	bl	800488c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004838:	f000 fdbc 	bl	80053b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800483c:	f000 fd8a 	bl	8005354 <MX_DMA_Init>
  MX_I2C2_Init();
 8004840:	f000 f9e8 	bl	8004c14 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004844:	f000 fa14 	bl	8004c70 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8004848:	f000 fa32 	bl	8004cb0 <MX_SPI2_Init>
  MX_TIM1_Init();
 800484c:	f000 fa66 	bl	8004d1c <MX_TIM1_Init>
  MX_TIM4_Init();
 8004850:	f000 fb70 	bl	8004f34 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004854:	f000 fc3c 	bl	80050d0 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8004858:	f000 fd52 	bl	8005300 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800485c:	f00a f9fa 	bl	800ec54 <MX_FATFS_Init>
  MX_TIM6_Init();
 8004860:	f000 fbcc 	bl	8004ffc <MX_TIM6_Init>
  MX_I2C1_Init();
 8004864:	f000 f9a8 	bl	8004bb8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8004868:	f000 fb00 	bl	8004e6c <MX_TIM3_Init>
  MX_TIM10_Init();
 800486c:	f000 fc88 	bl	8005180 <MX_TIM10_Init>
  MX_TIM11_Init();
 8004870:	f000 fcd4 	bl	800521c <MX_TIM11_Init>
  MX_ADC2_Init();
 8004874:	f000 f898 	bl	80049a8 <MX_ADC2_Init>
  MX_TIM7_Init();
 8004878:	f000 fbf6 	bl	8005068 <MX_TIM7_Init>
  MX_TIM13_Init();
 800487c:	f000 fd1c 	bl	80052b8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8004880:	f7ff ffb6 	bl	80047f0 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8004884:	f001 fe30 	bl	80064e8 <cppLoop>
 8004888:	e7fc      	b.n	8004884 <main+0x58>
	...

0800488c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b0a4      	sub	sp, #144	; 0x90
 8004890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004892:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004896:	2234      	movs	r2, #52	; 0x34
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f00e fe27 	bl	80134ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048b0:	f107 030c 	add.w	r3, r7, #12
 80048b4:	223c      	movs	r2, #60	; 0x3c
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f00e fe18 	bl	80134ee <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	4b37      	ldr	r3, [pc, #220]	; (80049a0 <SystemClock_Config+0x114>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	4a36      	ldr	r2, [pc, #216]	; (80049a0 <SystemClock_Config+0x114>)
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6413      	str	r3, [r2, #64]	; 0x40
 80048ce:	4b34      	ldr	r3, [pc, #208]	; (80049a0 <SystemClock_Config+0x114>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	4b31      	ldr	r3, [pc, #196]	; (80049a4 <SystemClock_Config+0x118>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a30      	ldr	r2, [pc, #192]	; (80049a4 <SystemClock_Config+0x118>)
 80048e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	4b2e      	ldr	r3, [pc, #184]	; (80049a4 <SystemClock_Config+0x118>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048f6:	2301      	movs	r3, #1
 80048f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004900:	2302      	movs	r3, #2
 8004902:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004904:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004908:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800490a:	2308      	movs	r3, #8
 800490c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800490e:	23b4      	movs	r3, #180	; 0xb4
 8004910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004914:	2302      	movs	r3, #2
 8004916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800491a:	2308      	movs	r3, #8
 800491c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004920:	2302      	movs	r3, #2
 8004922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004926:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800492a:	4618      	mov	r0, r3
 800492c:	f005 ff16 	bl	800a75c <HAL_RCC_OscConfig>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004936:	f000 fe91 	bl	800565c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800493a:	f005 fa91 	bl	8009e60 <HAL_PWREx_EnableOverDrive>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004944:	f000 fe8a 	bl	800565c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004948:	230f      	movs	r3, #15
 800494a:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800494c:	2302      	movs	r3, #2
 800494e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004950:	2300      	movs	r3, #0
 8004952:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004954:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004958:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800495a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800495e:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004960:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004964:	2105      	movs	r1, #5
 8004966:	4618      	mov	r0, r3
 8004968:	f005 faca 	bl	8009f00 <HAL_RCC_ClockConfig>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004972:	f000 fe73 	bl	800565c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004976:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800497a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800497c:	2300      	movs	r3, #0
 800497e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8004980:	2300      	movs	r3, #0
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	4618      	mov	r0, r3
 800498a:	f005 fca9 	bl	800a2e0 <HAL_RCCEx_PeriphCLKConfig>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8004994:	f000 fe62 	bl	800565c <Error_Handler>
  }
}
 8004998:	bf00      	nop
 800499a:	3790      	adds	r7, #144	; 0x90
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40023800 	.word	0x40023800
 80049a4:	40007000 	.word	0x40007000

080049a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80049ae:	463b      	mov	r3, r7
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80049ba:	4b7c      	ldr	r3, [pc, #496]	; (8004bac <MX_ADC2_Init+0x204>)
 80049bc:	4a7c      	ldr	r2, [pc, #496]	; (8004bb0 <MX_ADC2_Init+0x208>)
 80049be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80049c0:	4b7a      	ldr	r3, [pc, #488]	; (8004bac <MX_ADC2_Init+0x204>)
 80049c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80049c8:	4b78      	ldr	r3, [pc, #480]	; (8004bac <MX_ADC2_Init+0x204>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80049ce:	4b77      	ldr	r3, [pc, #476]	; (8004bac <MX_ADC2_Init+0x204>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80049d4:	4b75      	ldr	r3, [pc, #468]	; (8004bac <MX_ADC2_Init+0x204>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80049da:	4b74      	ldr	r3, [pc, #464]	; (8004bac <MX_ADC2_Init+0x204>)
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80049e2:	4b72      	ldr	r3, [pc, #456]	; (8004bac <MX_ADC2_Init+0x204>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80049e8:	4b70      	ldr	r3, [pc, #448]	; (8004bac <MX_ADC2_Init+0x204>)
 80049ea:	4a72      	ldr	r2, [pc, #456]	; (8004bb4 <MX_ADC2_Init+0x20c>)
 80049ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80049ee:	4b6f      	ldr	r3, [pc, #444]	; (8004bac <MX_ADC2_Init+0x204>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80049f4:	4b6d      	ldr	r3, [pc, #436]	; (8004bac <MX_ADC2_Init+0x204>)
 80049f6:	220e      	movs	r2, #14
 80049f8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80049fa:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <MX_ADC2_Init+0x204>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004a02:	4b6a      	ldr	r3, [pc, #424]	; (8004bac <MX_ADC2_Init+0x204>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004a08:	4868      	ldr	r0, [pc, #416]	; (8004bac <MX_ADC2_Init+0x204>)
 8004a0a:	f002 fff9 	bl	8007a00 <HAL_ADC_Init>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004a14:	f000 fe22 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004a18:	230a      	movs	r3, #10
 8004a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004a20:	2306      	movs	r3, #6
 8004a22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a24:	463b      	mov	r3, r7
 8004a26:	4619      	mov	r1, r3
 8004a28:	4860      	ldr	r0, [pc, #384]	; (8004bac <MX_ADC2_Init+0x204>)
 8004a2a:	f003 f93d 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004a34:	f000 fe12 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004a38:	230b      	movs	r3, #11
 8004a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a40:	463b      	mov	r3, r7
 8004a42:	4619      	mov	r1, r3
 8004a44:	4859      	ldr	r0, [pc, #356]	; (8004bac <MX_ADC2_Init+0x204>)
 8004a46:	f003 f92f 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004a50:	f000 fe04 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004a54:	230c      	movs	r3, #12
 8004a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4852      	ldr	r0, [pc, #328]	; (8004bac <MX_ADC2_Init+0x204>)
 8004a62:	f003 f921 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004a6c:	f000 fdf6 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004a70:	230d      	movs	r3, #13
 8004a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004a74:	2304      	movs	r3, #4
 8004a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a78:	463b      	mov	r3, r7
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	484b      	ldr	r0, [pc, #300]	; (8004bac <MX_ADC2_Init+0x204>)
 8004a7e:	f003 f913 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004a88:	f000 fde8 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004a90:	2305      	movs	r3, #5
 8004a92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a94:	463b      	mov	r3, r7
 8004a96:	4619      	mov	r1, r3
 8004a98:	4844      	ldr	r0, [pc, #272]	; (8004bac <MX_ADC2_Init+0x204>)
 8004a9a:	f003 f905 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004aa4:	f000 fdda 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004aac:	2306      	movs	r3, #6
 8004aae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	483d      	ldr	r0, [pc, #244]	; (8004bac <MX_ADC2_Init+0x204>)
 8004ab6:	f003 f8f7 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004ac0:	f000 fdcc 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004ac8:	2307      	movs	r3, #7
 8004aca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004acc:	463b      	mov	r3, r7
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4836      	ldr	r0, [pc, #216]	; (8004bac <MX_ADC2_Init+0x204>)
 8004ad2:	f003 f8e9 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004adc:	f000 fdbe 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ae8:	463b      	mov	r3, r7
 8004aea:	4619      	mov	r1, r3
 8004aec:	482f      	ldr	r0, [pc, #188]	; (8004bac <MX_ADC2_Init+0x204>)
 8004aee:	f003 f8db 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004af8:	f000 fdb0 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004afc:	2304      	movs	r3, #4
 8004afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004b00:	2309      	movs	r3, #9
 8004b02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b04:	463b      	mov	r3, r7
 8004b06:	4619      	mov	r1, r3
 8004b08:	4828      	ldr	r0, [pc, #160]	; (8004bac <MX_ADC2_Init+0x204>)
 8004b0a:	f003 f8cd 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004b14:	f000 fda2 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004b18:	2305      	movs	r3, #5
 8004b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004b1c:	230a      	movs	r3, #10
 8004b1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b20:	463b      	mov	r3, r7
 8004b22:	4619      	mov	r1, r3
 8004b24:	4821      	ldr	r0, [pc, #132]	; (8004bac <MX_ADC2_Init+0x204>)
 8004b26:	f003 f8bf 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004b30:	f000 fd94 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004b34:	2306      	movs	r3, #6
 8004b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004b38:	230b      	movs	r3, #11
 8004b3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	4619      	mov	r1, r3
 8004b40:	481a      	ldr	r0, [pc, #104]	; (8004bac <MX_ADC2_Init+0x204>)
 8004b42:	f003 f8b1 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004b4c:	f000 fd86 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004b50:	2307      	movs	r3, #7
 8004b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004b54:	230c      	movs	r3, #12
 8004b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b58:	463b      	mov	r3, r7
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4813      	ldr	r0, [pc, #76]	; (8004bac <MX_ADC2_Init+0x204>)
 8004b5e:	f003 f8a3 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004b68:	f000 fd78 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8004b70:	230d      	movs	r3, #13
 8004b72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b74:	463b      	mov	r3, r7
 8004b76:	4619      	mov	r1, r3
 8004b78:	480c      	ldr	r0, [pc, #48]	; (8004bac <MX_ADC2_Init+0x204>)
 8004b7a:	f003 f895 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004b84:	f000 fd6a 	bl	800565c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004b88:	2309      	movs	r3, #9
 8004b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004b8c:	230e      	movs	r3, #14
 8004b8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b90:	463b      	mov	r3, r7
 8004b92:	4619      	mov	r1, r3
 8004b94:	4805      	ldr	r0, [pc, #20]	; (8004bac <MX_ADC2_Init+0x204>)
 8004b96:	f003 f887 	bl	8007ca8 <HAL_ADC_ConfigChannel>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8004ba0:	f000 fd5c 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20035a7c 	.word	0x20035a7c
 8004bb0:	40012100 	.word	0x40012100
 8004bb4:	0f000001 	.word	0x0f000001

08004bb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004bbc:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <MX_I2C1_Init+0x50>)
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <MX_I2C1_Init+0x54>)
 8004bc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <MX_I2C1_Init+0x50>)
 8004bc4:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <MX_I2C1_Init+0x58>)
 8004bc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004bc8:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <MX_I2C1_Init+0x50>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <MX_I2C1_Init+0x50>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <MX_I2C1_Init+0x50>)
 8004bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <MX_I2C1_Init+0x50>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004be2:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <MX_I2C1_Init+0x50>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <MX_I2C1_Init+0x50>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <MX_I2C1_Init+0x50>)
 8004bf0:	2280      	movs	r2, #128	; 0x80
 8004bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004bf4:	4804      	ldr	r0, [pc, #16]	; (8004c08 <MX_I2C1_Init+0x50>)
 8004bf6:	f004 f9a9 	bl	8008f4c <HAL_I2C_Init>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004c00:	f000 fd2c 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004c04:	bf00      	nop
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20035ac4 	.word	0x20035ac4
 8004c0c:	40005400 	.word	0x40005400
 8004c10:	000186a0 	.word	0x000186a0

08004c14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <MX_I2C2_Init+0x50>)
 8004c1a:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <MX_I2C2_Init+0x54>)
 8004c1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <MX_I2C2_Init+0x50>)
 8004c20:	4a12      	ldr	r2, [pc, #72]	; (8004c6c <MX_I2C2_Init+0x58>)
 8004c22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <MX_I2C2_Init+0x50>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <MX_I2C2_Init+0x50>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <MX_I2C2_Init+0x50>)
 8004c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <MX_I2C2_Init+0x50>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <MX_I2C2_Init+0x50>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c44:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <MX_I2C2_Init+0x50>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <MX_I2C2_Init+0x50>)
 8004c4c:	2280      	movs	r2, #128	; 0x80
 8004c4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004c50:	4804      	ldr	r0, [pc, #16]	; (8004c64 <MX_I2C2_Init+0x50>)
 8004c52:	f004 f97b 	bl	8008f4c <HAL_I2C_Init>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004c5c:	f000 fcfe 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004c60:	bf00      	nop
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20035b58 	.word	0x20035b58
 8004c68:	40005800 	.word	0x40005800
 8004c6c:	000186a0 	.word	0x000186a0

08004c70 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <MX_SDIO_SD_Init+0x38>)
 8004c76:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <MX_SDIO_SD_Init+0x3c>)
 8004c78:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <MX_SDIO_SD_Init+0x38>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <MX_SDIO_SD_Init+0x38>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004c86:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <MX_SDIO_SD_Init+0x38>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <MX_SDIO_SD_Init+0x38>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <MX_SDIO_SD_Init+0x38>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004c98:	4b03      	ldr	r3, [pc, #12]	; (8004ca8 <MX_SDIO_SD_Init+0x38>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004c9e:	bf00      	nop
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	20035d58 	.word	0x20035d58
 8004cac:	40012c00 	.word	0x40012c00

08004cb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004cb4:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cb6:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <MX_SPI2_Init+0x68>)
 8004cb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004cba:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004cc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004cd4:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004cda:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ce0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004ce4:	2228      	movs	r2, #40	; 0x28
 8004ce6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cf4:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004cfc:	220a      	movs	r2, #10
 8004cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004d00:	4804      	ldr	r0, [pc, #16]	; (8004d14 <MX_SPI2_Init+0x64>)
 8004d02:	f007 fa55 	bl	800c1b0 <HAL_SPI_Init>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004d0c:	f000 fca6 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004d10:	bf00      	nop
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	200359a4 	.word	0x200359a4
 8004d18:	40003800 	.word	0x40003800

08004d1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b09a      	sub	sp, #104	; 0x68
 8004d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d26:	2224      	movs	r2, #36	; 0x24
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f00e fbdf 	bl	80134ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d3a:	f107 0320 	add.w	r3, r7, #32
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	609a      	str	r2, [r3, #8]
 8004d46:	60da      	str	r2, [r3, #12]
 8004d48:	611a      	str	r2, [r3, #16]
 8004d4a:	615a      	str	r2, [r3, #20]
 8004d4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d4e:	463b      	mov	r3, r7
 8004d50:	2220      	movs	r2, #32
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f00e fbca 	bl	80134ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d5a:	4b42      	ldr	r3, [pc, #264]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004d5c:	4a42      	ldr	r2, [pc, #264]	; (8004e68 <MX_TIM1_Init+0x14c>)
 8004d5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004d60:	4b40      	ldr	r3, [pc, #256]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d66:	4b3f      	ldr	r3, [pc, #252]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004d6c:	4b3d      	ldr	r3, [pc, #244]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d74:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d7a:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d80:	4b38      	ldr	r3, [pc, #224]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004d86:	4837      	ldr	r0, [pc, #220]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004d88:	f007 ffb5 	bl	800ccf6 <HAL_TIM_PWM_Init>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004d92:	f000 fc63 	bl	800565c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004d96:	2303      	movs	r3, #3
 8004d98:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004da2:	2300      	movs	r3, #0
 8004da4:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004daa:	2300      	movs	r3, #0
 8004dac:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004dae:	2301      	movs	r3, #1
 8004db0:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004db2:	2300      	movs	r3, #0
 8004db4:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004dba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4828      	ldr	r0, [pc, #160]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004dc2:	f008 f801 	bl	800cdc8 <HAL_TIM_Encoder_Init>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004dcc:	f000 fc46 	bl	800565c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004dd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4821      	ldr	r0, [pc, #132]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004de0:	f008 fd28 	bl	800d834 <HAL_TIMEx_MasterConfigSynchronization>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004dea:	f000 fc37 	bl	800565c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dee:	2360      	movs	r3, #96	; 0x60
 8004df0:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004df6:	2300      	movs	r3, #0
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e02:	2300      	movs	r3, #0
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e0a:	f107 0320 	add.w	r3, r7, #32
 8004e0e:	2208      	movs	r2, #8
 8004e10:	4619      	mov	r1, r3
 8004e12:	4814      	ldr	r0, [pc, #80]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004e14:	f008 f9aa 	bl	800d16c <HAL_TIM_PWM_ConfigChannel>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004e1e:	f000 fc1d 	bl	800565c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e40:	463b      	mov	r3, r7
 8004e42:	4619      	mov	r1, r3
 8004e44:	4807      	ldr	r0, [pc, #28]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004e46:	f008 fd71 	bl	800d92c <HAL_TIMEx_ConfigBreakDeadTime>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004e50:	f000 fc04 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e54:	4803      	ldr	r0, [pc, #12]	; (8004e64 <MX_TIM1_Init+0x148>)
 8004e56:	f000 fff1 	bl	8005e3c <HAL_TIM_MspPostInit>

}
 8004e5a:	bf00      	nop
 8004e5c:	3768      	adds	r7, #104	; 0x68
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20035d18 	.word	0x20035d18
 8004e68:	40010000 	.word	0x40010000

08004e6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e72:	f107 0320 	add.w	r3, r7, #32
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e7c:	1d3b      	adds	r3, r7, #4
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	609a      	str	r2, [r3, #8]
 8004e86:	60da      	str	r2, [r3, #12]
 8004e88:	611a      	str	r2, [r3, #16]
 8004e8a:	615a      	str	r2, [r3, #20]
 8004e8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004e8e:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004e90:	4a27      	ldr	r2, [pc, #156]	; (8004f30 <MX_TIM3_Init+0xc4>)
 8004e92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004e94:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e9a:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004ea0:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ea6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ea8:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eae:	4b1f      	ldr	r3, [pc, #124]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004eb4:	481d      	ldr	r0, [pc, #116]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004eb6:	f007 ff1e 	bl	800ccf6 <HAL_TIM_PWM_Init>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004ec0:	f000 fbcc 	bl	800565c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ecc:	f107 0320 	add.w	r3, r7, #32
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4816      	ldr	r0, [pc, #88]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004ed4:	f008 fcae 	bl	800d834 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004ede:	f000 fbbd 	bl	800565c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ee2:	2360      	movs	r3, #96	; 0x60
 8004ee4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	480c      	ldr	r0, [pc, #48]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004efa:	f008 f937 	bl	800d16c <HAL_TIM_PWM_ConfigChannel>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004f04:	f000 fbaa 	bl	800565c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f08:	1d3b      	adds	r3, r7, #4
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4807      	ldr	r0, [pc, #28]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004f10:	f008 f92c 	bl	800d16c <HAL_TIM_PWM_ConfigChannel>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004f1a:	f000 fb9f 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004f1e:	4803      	ldr	r0, [pc, #12]	; (8004f2c <MX_TIM3_Init+0xc0>)
 8004f20:	f000 ff8c 	bl	8005e3c <HAL_TIM_MspPostInit>

}
 8004f24:	bf00      	nop
 8004f26:	3728      	adds	r7, #40	; 0x28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20035bb0 	.word	0x20035bb0
 8004f30:	40000400 	.word	0x40000400

08004f34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
 8004f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f3a:	f107 0320 	add.w	r3, r7, #32
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	605a      	str	r2, [r3, #4]
 8004f4c:	609a      	str	r2, [r3, #8]
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	611a      	str	r2, [r3, #16]
 8004f52:	615a      	str	r2, [r3, #20]
 8004f54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f56:	4b27      	ldr	r3, [pc, #156]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004f58:	4a27      	ldr	r2, [pc, #156]	; (8004ff8 <MX_TIM4_Init+0xc4>)
 8004f5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f5c:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f62:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004f68:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004f6a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004f6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f70:	4b20      	ldr	r3, [pc, #128]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f76:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004f7c:	481d      	ldr	r0, [pc, #116]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004f7e:	f007 feba 	bl	800ccf6 <HAL_TIM_PWM_Init>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004f88:	f000 fb68 	bl	800565c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f94:	f107 0320 	add.w	r3, r7, #32
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4816      	ldr	r0, [pc, #88]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004f9c:	f008 fc4a 	bl	800d834 <HAL_TIMEx_MasterConfigSynchronization>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004fa6:	f000 fb59 	bl	800565c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004faa:	2360      	movs	r3, #96	; 0x60
 8004fac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004fba:	1d3b      	adds	r3, r7, #4
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	480c      	ldr	r0, [pc, #48]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004fc2:	f008 f8d3 	bl	800d16c <HAL_TIM_PWM_ConfigChannel>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004fcc:	f000 fb46 	bl	800565c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	220c      	movs	r2, #12
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4807      	ldr	r0, [pc, #28]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004fd8:	f008 f8c8 	bl	800d16c <HAL_TIM_PWM_ConfigChannel>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004fe2:	f000 fb3b 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004fe6:	4803      	ldr	r0, [pc, #12]	; (8004ff4 <MX_TIM4_Init+0xc0>)
 8004fe8:	f000 ff28 	bl	8005e3c <HAL_TIM_MspPostInit>

}
 8004fec:	bf00      	nop
 8004fee:	3728      	adds	r7, #40	; 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20035a3c 	.word	0x20035a3c
 8004ff8:	40000800 	.word	0x40000800

08004ffc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005002:	463b      	mov	r3, r7
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800500a:	4b15      	ldr	r3, [pc, #84]	; (8005060 <MX_TIM6_Init+0x64>)
 800500c:	4a15      	ldr	r2, [pc, #84]	; (8005064 <MX_TIM6_Init+0x68>)
 800500e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005010:	4b13      	ldr	r3, [pc, #76]	; (8005060 <MX_TIM6_Init+0x64>)
 8005012:	2259      	movs	r2, #89	; 0x59
 8005014:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <MX_TIM6_Init+0x64>)
 8005018:	2200      	movs	r2, #0
 800501a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800501c:	4b10      	ldr	r3, [pc, #64]	; (8005060 <MX_TIM6_Init+0x64>)
 800501e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005022:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <MX_TIM6_Init+0x64>)
 8005026:	2280      	movs	r2, #128	; 0x80
 8005028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800502a:	480d      	ldr	r0, [pc, #52]	; (8005060 <MX_TIM6_Init+0x64>)
 800502c:	f007 fe14 	bl	800cc58 <HAL_TIM_Base_Init>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005036:	f000 fb11 	bl	800565c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800503e:	2300      	movs	r3, #0
 8005040:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005042:	463b      	mov	r3, r7
 8005044:	4619      	mov	r1, r3
 8005046:	4806      	ldr	r0, [pc, #24]	; (8005060 <MX_TIM6_Init+0x64>)
 8005048:	f008 fbf4 	bl	800d834 <HAL_TIMEx_MasterConfigSynchronization>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005052:	f000 fb03 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20035cd8 	.word	0x20035cd8
 8005064:	40001000 	.word	0x40001000

08005068 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800506e:	463b      	mov	r3, r7
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005076:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <MX_TIM7_Init+0x60>)
 8005078:	4a14      	ldr	r2, [pc, #80]	; (80050cc <MX_TIM7_Init+0x64>)
 800507a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 800507c:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <MX_TIM7_Init+0x60>)
 800507e:	22b3      	movs	r2, #179	; 0xb3
 8005080:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005082:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <MX_TIM7_Init+0x60>)
 8005084:	2200      	movs	r2, #0
 8005086:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <MX_TIM7_Init+0x60>)
 800508a:	2231      	movs	r2, #49	; 0x31
 800508c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800508e:	4b0e      	ldr	r3, [pc, #56]	; (80050c8 <MX_TIM7_Init+0x60>)
 8005090:	2280      	movs	r2, #128	; 0x80
 8005092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005094:	480c      	ldr	r0, [pc, #48]	; (80050c8 <MX_TIM7_Init+0x60>)
 8005096:	f007 fddf 	bl	800cc58 <HAL_TIM_Base_Init>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80050a0:	f000 fadc 	bl	800565c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050a4:	2300      	movs	r3, #0
 80050a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80050ac:	463b      	mov	r3, r7
 80050ae:	4619      	mov	r1, r3
 80050b0:	4805      	ldr	r0, [pc, #20]	; (80050c8 <MX_TIM7_Init+0x60>)
 80050b2:	f008 fbbf 	bl	800d834 <HAL_TIMEx_MasterConfigSynchronization>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80050bc:	f000 face 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20035e7c 	.word	0x20035e7c
 80050cc:	40001400 	.word	0x40001400

080050d0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08c      	sub	sp, #48	; 0x30
 80050d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80050d6:	f107 030c 	add.w	r3, r7, #12
 80050da:	2224      	movs	r2, #36	; 0x24
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f00e fa05 	bl	80134ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050e4:	1d3b      	adds	r3, r7, #4
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80050ec:	4b22      	ldr	r3, [pc, #136]	; (8005178 <MX_TIM8_Init+0xa8>)
 80050ee:	4a23      	ldr	r2, [pc, #140]	; (800517c <MX_TIM8_Init+0xac>)
 80050f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80050f2:	4b21      	ldr	r3, [pc, #132]	; (8005178 <MX_TIM8_Init+0xa8>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80050f8:	4b1f      	ldr	r3, [pc, #124]	; (8005178 <MX_TIM8_Init+0xa8>)
 80050fa:	2210      	movs	r2, #16
 80050fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80050fe:	4b1e      	ldr	r3, [pc, #120]	; (8005178 <MX_TIM8_Init+0xa8>)
 8005100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005104:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005106:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <MX_TIM8_Init+0xa8>)
 8005108:	2200      	movs	r2, #0
 800510a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800510c:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <MX_TIM8_Init+0xa8>)
 800510e:	2200      	movs	r2, #0
 8005110:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005112:	4b19      	ldr	r3, [pc, #100]	; (8005178 <MX_TIM8_Init+0xa8>)
 8005114:	2200      	movs	r2, #0
 8005116:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005118:	2303      	movs	r3, #3
 800511a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005120:	2301      	movs	r3, #1
 8005122:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005124:	2300      	movs	r3, #0
 8005126:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800512c:	2300      	movs	r3, #0
 800512e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005130:	2301      	movs	r3, #1
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005134:	2300      	movs	r3, #0
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800513c:	f107 030c 	add.w	r3, r7, #12
 8005140:	4619      	mov	r1, r3
 8005142:	480d      	ldr	r0, [pc, #52]	; (8005178 <MX_TIM8_Init+0xa8>)
 8005144:	f007 fe40 	bl	800cdc8 <HAL_TIM_Encoder_Init>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800514e:	f000 fa85 	bl	800565c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005152:	2300      	movs	r3, #0
 8005154:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4806      	ldr	r0, [pc, #24]	; (8005178 <MX_TIM8_Init+0xa8>)
 8005160:	f008 fb68 	bl	800d834 <HAL_TIMEx_MasterConfigSynchronization>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800516a:	f000 fa77 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800516e:	bf00      	nop
 8005170:	3730      	adds	r7, #48	; 0x30
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200359fc 	.word	0x200359fc
 800517c:	40010400 	.word	0x40010400

08005180 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	611a      	str	r2, [r3, #16]
 8005194:	615a      	str	r2, [r3, #20]
 8005196:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005198:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <MX_TIM10_Init+0x94>)
 800519a:	4a1f      	ldr	r2, [pc, #124]	; (8005218 <MX_TIM10_Init+0x98>)
 800519c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800519e:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <MX_TIM10_Init+0x94>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051a4:	4b1b      	ldr	r3, [pc, #108]	; (8005214 <MX_TIM10_Init+0x94>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80051aa:	4b1a      	ldr	r3, [pc, #104]	; (8005214 <MX_TIM10_Init+0x94>)
 80051ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051b0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051b2:	4b18      	ldr	r3, [pc, #96]	; (8005214 <MX_TIM10_Init+0x94>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051b8:	4b16      	ldr	r3, [pc, #88]	; (8005214 <MX_TIM10_Init+0x94>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80051be:	4815      	ldr	r0, [pc, #84]	; (8005214 <MX_TIM10_Init+0x94>)
 80051c0:	f007 fd4a 	bl	800cc58 <HAL_TIM_Base_Init>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80051ca:	f000 fa47 	bl	800565c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80051ce:	4811      	ldr	r0, [pc, #68]	; (8005214 <MX_TIM10_Init+0x94>)
 80051d0:	f007 fd91 	bl	800ccf6 <HAL_TIM_PWM_Init>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80051da:	f000 fa3f 	bl	800565c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051de:	2360      	movs	r3, #96	; 0x60
 80051e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051ee:	1d3b      	adds	r3, r7, #4
 80051f0:	2200      	movs	r2, #0
 80051f2:	4619      	mov	r1, r3
 80051f4:	4807      	ldr	r0, [pc, #28]	; (8005214 <MX_TIM10_Init+0x94>)
 80051f6:	f007 ffb9 	bl	800d16c <HAL_TIM_PWM_ConfigChannel>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005200:	f000 fa2c 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8005204:	4803      	ldr	r0, [pc, #12]	; (8005214 <MX_TIM10_Init+0x94>)
 8005206:	f000 fe19 	bl	8005e3c <HAL_TIM_MspPostInit>

}
 800520a:	bf00      	nop
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20035b18 	.word	0x20035b18
 8005218:	40014400 	.word	0x40014400

0800521c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005222:	1d3b      	adds	r3, r7, #4
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	605a      	str	r2, [r3, #4]
 800522a:	609a      	str	r2, [r3, #8]
 800522c:	60da      	str	r2, [r3, #12]
 800522e:	611a      	str	r2, [r3, #16]
 8005230:	615a      	str	r2, [r3, #20]
 8005232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005234:	4b1e      	ldr	r3, [pc, #120]	; (80052b0 <MX_TIM11_Init+0x94>)
 8005236:	4a1f      	ldr	r2, [pc, #124]	; (80052b4 <MX_TIM11_Init+0x98>)
 8005238:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800523a:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <MX_TIM11_Init+0x94>)
 800523c:	2200      	movs	r2, #0
 800523e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005240:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <MX_TIM11_Init+0x94>)
 8005242:	2200      	movs	r2, #0
 8005244:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8005246:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <MX_TIM11_Init+0x94>)
 8005248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800524e:	4b18      	ldr	r3, [pc, #96]	; (80052b0 <MX_TIM11_Init+0x94>)
 8005250:	2200      	movs	r2, #0
 8005252:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005254:	4b16      	ldr	r3, [pc, #88]	; (80052b0 <MX_TIM11_Init+0x94>)
 8005256:	2200      	movs	r2, #0
 8005258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800525a:	4815      	ldr	r0, [pc, #84]	; (80052b0 <MX_TIM11_Init+0x94>)
 800525c:	f007 fcfc 	bl	800cc58 <HAL_TIM_Base_Init>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8005266:	f000 f9f9 	bl	800565c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800526a:	4811      	ldr	r0, [pc, #68]	; (80052b0 <MX_TIM11_Init+0x94>)
 800526c:	f007 fd43 	bl	800ccf6 <HAL_TIM_PWM_Init>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8005276:	f000 f9f1 	bl	800565c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800527a:	2360      	movs	r3, #96	; 0x60
 800527c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	2200      	movs	r2, #0
 800528e:	4619      	mov	r1, r3
 8005290:	4807      	ldr	r0, [pc, #28]	; (80052b0 <MX_TIM11_Init+0x94>)
 8005292:	f007 ff6b 	bl	800d16c <HAL_TIM_PWM_ConfigChannel>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800529c:	f000 f9de 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80052a0:	4803      	ldr	r0, [pc, #12]	; (80052b0 <MX_TIM11_Init+0x94>)
 80052a2:	f000 fdcb 	bl	8005e3c <HAL_TIM_MspPostInit>

}
 80052a6:	bf00      	nop
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20035c38 	.word	0x20035c38
 80052b4:	40014800 	.word	0x40014800

080052b8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <MX_TIM13_Init+0x40>)
 80052be:	4a0f      	ldr	r2, [pc, #60]	; (80052fc <MX_TIM13_Init+0x44>)
 80052c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <MX_TIM13_Init+0x40>)
 80052c4:	2259      	movs	r2, #89	; 0x59
 80052c6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <MX_TIM13_Init+0x40>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80052ce:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <MX_TIM13_Init+0x40>)
 80052d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80052d4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052d6:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <MX_TIM13_Init+0x40>)
 80052d8:	2200      	movs	r2, #0
 80052da:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <MX_TIM13_Init+0x40>)
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80052e2:	4805      	ldr	r0, [pc, #20]	; (80052f8 <MX_TIM13_Init+0x40>)
 80052e4:	f007 fcb8 	bl	800cc58 <HAL_TIM_Base_Init>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80052ee:	f000 f9b5 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80052f2:	bf00      	nop
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20035bf8 	.word	0x20035bf8
 80052fc:	40001c00 	.word	0x40001c00

08005300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005304:	4b11      	ldr	r3, [pc, #68]	; (800534c <MX_USART2_UART_Init+0x4c>)
 8005306:	4a12      	ldr	r2, [pc, #72]	; (8005350 <MX_USART2_UART_Init+0x50>)
 8005308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800530a:	4b10      	ldr	r3, [pc, #64]	; (800534c <MX_USART2_UART_Init+0x4c>)
 800530c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005312:	4b0e      	ldr	r3, [pc, #56]	; (800534c <MX_USART2_UART_Init+0x4c>)
 8005314:	2200      	movs	r2, #0
 8005316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <MX_USART2_UART_Init+0x4c>)
 800531a:	2200      	movs	r2, #0
 800531c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <MX_USART2_UART_Init+0x4c>)
 8005320:	2200      	movs	r2, #0
 8005322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <MX_USART2_UART_Init+0x4c>)
 8005326:	220c      	movs	r2, #12
 8005328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <MX_USART2_UART_Init+0x4c>)
 800532c:	2200      	movs	r2, #0
 800532e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <MX_USART2_UART_Init+0x4c>)
 8005332:	2200      	movs	r2, #0
 8005334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005336:	4805      	ldr	r0, [pc, #20]	; (800534c <MX_USART2_UART_Init+0x4c>)
 8005338:	f008 fb5e 	bl	800d9f8 <HAL_UART_Init>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005342:	f000 f98b 	bl	800565c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005346:	bf00      	nop
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20035ddc 	.word	0x20035ddc
 8005350:	40004400 	.word	0x40004400

08005354 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <MX_DMA_Init+0x5c>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	4a13      	ldr	r2, [pc, #76]	; (80053b0 <MX_DMA_Init+0x5c>)
 8005364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005368:	6313      	str	r3, [r2, #48]	; 0x30
 800536a:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <MX_DMA_Init+0x5c>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005376:	2200      	movs	r2, #0
 8005378:	2100      	movs	r1, #0
 800537a:	203a      	movs	r0, #58	; 0x3a
 800537c:	f003 f81f 	bl	80083be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005380:	203a      	movs	r0, #58	; 0x3a
 8005382:	f003 f838 	bl	80083f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005386:	2200      	movs	r2, #0
 8005388:	2100      	movs	r1, #0
 800538a:	203b      	movs	r0, #59	; 0x3b
 800538c:	f003 f817 	bl	80083be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005390:	203b      	movs	r0, #59	; 0x3b
 8005392:	f003 f830 	bl	80083f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8005396:	2200      	movs	r2, #0
 8005398:	2100      	movs	r1, #0
 800539a:	2045      	movs	r0, #69	; 0x45
 800539c:	f003 f80f 	bl	80083be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80053a0:	2045      	movs	r0, #69	; 0x45
 80053a2:	f003 f828 	bl	80083f6 <HAL_NVIC_EnableIRQ>

}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800

080053b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08c      	sub	sp, #48	; 0x30
 80053b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ba:	f107 031c 	add.w	r3, r7, #28
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	605a      	str	r2, [r3, #4]
 80053c4:	609a      	str	r2, [r3, #8]
 80053c6:	60da      	str	r2, [r3, #12]
 80053c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	4b9c      	ldr	r3, [pc, #624]	; (8005640 <MX_GPIO_Init+0x28c>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	4a9b      	ldr	r2, [pc, #620]	; (8005640 <MX_GPIO_Init+0x28c>)
 80053d4:	f043 0310 	orr.w	r3, r3, #16
 80053d8:	6313      	str	r3, [r2, #48]	; 0x30
 80053da:	4b99      	ldr	r3, [pc, #612]	; (8005640 <MX_GPIO_Init+0x28c>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	61bb      	str	r3, [r7, #24]
 80053e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	4b95      	ldr	r3, [pc, #596]	; (8005640 <MX_GPIO_Init+0x28c>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	4a94      	ldr	r2, [pc, #592]	; (8005640 <MX_GPIO_Init+0x28c>)
 80053f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f4:	6313      	str	r3, [r2, #48]	; 0x30
 80053f6:	4b92      	ldr	r3, [pc, #584]	; (8005640 <MX_GPIO_Init+0x28c>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	4b8e      	ldr	r3, [pc, #568]	; (8005640 <MX_GPIO_Init+0x28c>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	4a8d      	ldr	r2, [pc, #564]	; (8005640 <MX_GPIO_Init+0x28c>)
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	6313      	str	r3, [r2, #48]	; 0x30
 8005412:	4b8b      	ldr	r3, [pc, #556]	; (8005640 <MX_GPIO_Init+0x28c>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4b87      	ldr	r3, [pc, #540]	; (8005640 <MX_GPIO_Init+0x28c>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	4a86      	ldr	r2, [pc, #536]	; (8005640 <MX_GPIO_Init+0x28c>)
 8005428:	f043 0301 	orr.w	r3, r3, #1
 800542c:	6313      	str	r3, [r2, #48]	; 0x30
 800542e:	4b84      	ldr	r3, [pc, #528]	; (8005640 <MX_GPIO_Init+0x28c>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	4b80      	ldr	r3, [pc, #512]	; (8005640 <MX_GPIO_Init+0x28c>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	4a7f      	ldr	r2, [pc, #508]	; (8005640 <MX_GPIO_Init+0x28c>)
 8005444:	f043 0302 	orr.w	r3, r3, #2
 8005448:	6313      	str	r3, [r2, #48]	; 0x30
 800544a:	4b7d      	ldr	r3, [pc, #500]	; (8005640 <MX_GPIO_Init+0x28c>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	4b79      	ldr	r3, [pc, #484]	; (8005640 <MX_GPIO_Init+0x28c>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a78      	ldr	r2, [pc, #480]	; (8005640 <MX_GPIO_Init+0x28c>)
 8005460:	f043 0308 	orr.w	r3, r3, #8
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b76      	ldr	r3, [pc, #472]	; (8005640 <MX_GPIO_Init+0x28c>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8005472:	2200      	movs	r2, #0
 8005474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005478:	4872      	ldr	r0, [pc, #456]	; (8005644 <MX_GPIO_Init+0x290>)
 800547a:	f003 fd35 	bl	8008ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800547e:	2200      	movs	r2, #0
 8005480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005484:	4870      	ldr	r0, [pc, #448]	; (8005648 <MX_GPIO_Init+0x294>)
 8005486:	f003 fd2f 	bl	8008ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800548a:	2200      	movs	r2, #0
 800548c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005490:	486e      	ldr	r0, [pc, #440]	; (800564c <MX_GPIO_Init+0x298>)
 8005492:	f003 fd29 	bl	8008ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005496:	2200      	movs	r2, #0
 8005498:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800549c:	486c      	ldr	r0, [pc, #432]	; (8005650 <MX_GPIO_Init+0x29c>)
 800549e:	f003 fd23 	bl	8008ee8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80054a2:	2304      	movs	r3, #4
 80054a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80054a6:	4b6b      	ldr	r3, [pc, #428]	; (8005654 <MX_GPIO_Init+0x2a0>)
 80054a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054ae:	f107 031c 	add.w	r3, r7, #28
 80054b2:	4619      	mov	r1, r3
 80054b4:	4863      	ldr	r0, [pc, #396]	; (8005644 <MX_GPIO_Init+0x290>)
 80054b6:	f003 fb55 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80054ba:	230f      	movs	r3, #15
 80054bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054be:	2303      	movs	r3, #3
 80054c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054c6:	f107 031c 	add.w	r3, r7, #28
 80054ca:	4619      	mov	r1, r3
 80054cc:	4862      	ldr	r0, [pc, #392]	; (8005658 <MX_GPIO_Init+0x2a4>)
 80054ce:	f003 fb49 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80054d2:	23e1      	movs	r3, #225	; 0xe1
 80054d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054d6:	2303      	movs	r3, #3
 80054d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054de:	f107 031c 	add.w	r3, r7, #28
 80054e2:	4619      	mov	r1, r3
 80054e4:	485a      	ldr	r0, [pc, #360]	; (8005650 <MX_GPIO_Init+0x29c>)
 80054e6:	f003 fb3d 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054ea:	2303      	movs	r3, #3
 80054ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054ee:	2303      	movs	r3, #3
 80054f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f6:	f107 031c 	add.w	r3, r7, #28
 80054fa:	4619      	mov	r1, r3
 80054fc:	4852      	ldr	r0, [pc, #328]	; (8005648 <MX_GPIO_Init+0x294>)
 80054fe:	f003 fb31 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005502:	2304      	movs	r3, #4
 8005504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005506:	2300      	movs	r3, #0
 8005508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800550a:	2301      	movs	r3, #1
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800550e:	f107 031c 	add.w	r3, r7, #28
 8005512:	4619      	mov	r1, r3
 8005514:	484c      	ldr	r0, [pc, #304]	; (8005648 <MX_GPIO_Init+0x294>)
 8005516:	f003 fb25 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800551a:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800551e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005520:	2300      	movs	r3, #0
 8005522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005524:	2301      	movs	r3, #1
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005528:	f107 031c 	add.w	r3, r7, #28
 800552c:	4619      	mov	r1, r3
 800552e:	4845      	ldr	r0, [pc, #276]	; (8005644 <MX_GPIO_Init+0x290>)
 8005530:	f003 fb18 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005534:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800553a:	2301      	movs	r3, #1
 800553c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800553e:	2300      	movs	r3, #0
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005542:	2300      	movs	r3, #0
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005546:	f107 031c 	add.w	r3, r7, #28
 800554a:	4619      	mov	r1, r3
 800554c:	483d      	ldr	r0, [pc, #244]	; (8005644 <MX_GPIO_Init+0x290>)
 800554e:	f003 fb09 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005558:	2301      	movs	r3, #1
 800555a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555c:	2300      	movs	r3, #0
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005560:	2300      	movs	r3, #0
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005564:	f107 031c 	add.w	r3, r7, #28
 8005568:	4619      	mov	r1, r3
 800556a:	4837      	ldr	r0, [pc, #220]	; (8005648 <MX_GPIO_Init+0x294>)
 800556c:	f003 fafa 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005576:	4b37      	ldr	r3, [pc, #220]	; (8005654 <MX_GPIO_Init+0x2a0>)
 8005578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557a:	2300      	movs	r3, #0
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800557e:	f107 031c 	add.w	r3, r7, #28
 8005582:	4619      	mov	r1, r3
 8005584:	4831      	ldr	r0, [pc, #196]	; (800564c <MX_GPIO_Init+0x298>)
 8005586:	f003 faed 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800558a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800558e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005590:	2301      	movs	r3, #1
 8005592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005594:	2300      	movs	r3, #0
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005598:	2300      	movs	r3, #0
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800559c:	f107 031c 	add.w	r3, r7, #28
 80055a0:	4619      	mov	r1, r3
 80055a2:	482a      	ldr	r0, [pc, #168]	; (800564c <MX_GPIO_Init+0x298>)
 80055a4:	f003 fade 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80055a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055ae:	2301      	movs	r3, #1
 80055b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055b2:	2301      	movs	r3, #1
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b6:	2300      	movs	r3, #0
 80055b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055ba:	f107 031c 	add.w	r3, r7, #28
 80055be:	4619      	mov	r1, r3
 80055c0:	4822      	ldr	r0, [pc, #136]	; (800564c <MX_GPIO_Init+0x298>)
 80055c2:	f003 facf 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80055c6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80055ca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055cc:	2301      	movs	r3, #1
 80055ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d4:	2300      	movs	r3, #0
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d8:	f107 031c 	add.w	r3, r7, #28
 80055dc:	4619      	mov	r1, r3
 80055de:	481c      	ldr	r0, [pc, #112]	; (8005650 <MX_GPIO_Init+0x29c>)
 80055e0:	f003 fac0 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80055e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055ea:	2300      	movs	r3, #0
 80055ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f2:	f107 031c 	add.w	r3, r7, #28
 80055f6:	4619      	mov	r1, r3
 80055f8:	4815      	ldr	r0, [pc, #84]	; (8005650 <MX_GPIO_Init+0x29c>)
 80055fa:	f003 fab3 	bl	8008b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80055fe:	239b      	movs	r3, #155	; 0x9b
 8005600:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005602:	2300      	movs	r3, #0
 8005604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005606:	2301      	movs	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800560a:	f107 031c 	add.w	r3, r7, #28
 800560e:	4619      	mov	r1, r3
 8005610:	480e      	ldr	r0, [pc, #56]	; (800564c <MX_GPIO_Init+0x298>)
 8005612:	f003 faa7 	bl	8008b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005616:	2200      	movs	r2, #0
 8005618:	2100      	movs	r1, #0
 800561a:	2008      	movs	r0, #8
 800561c:	f002 fecf 	bl	80083be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005620:	2008      	movs	r0, #8
 8005622:	f002 fee8 	bl	80083f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005626:	2200      	movs	r2, #0
 8005628:	2100      	movs	r1, #0
 800562a:	2017      	movs	r0, #23
 800562c:	f002 fec7 	bl	80083be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005630:	2017      	movs	r0, #23
 8005632:	f002 fee0 	bl	80083f6 <HAL_NVIC_EnableIRQ>

}
 8005636:	bf00      	nop
 8005638:	3730      	adds	r7, #48	; 0x30
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40023800 	.word	0x40023800
 8005644:	40021000 	.word	0x40021000
 8005648:	40020400 	.word	0x40020400
 800564c:	40020c00 	.word	0x40020c00
 8005650:	40020000 	.word	0x40020000
 8005654:	10310000 	.word	0x10310000
 8005658:	40020800 	.word	0x40020800

0800565c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005660:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005662:	e7fe      	b.n	8005662 <Error_Handler+0x6>

08005664 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <HAL_MspInit+0x4c>)
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	4a0f      	ldr	r2, [pc, #60]	; (80056c0 <HAL_MspInit+0x4c>)
 8005684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005688:	6453      	str	r3, [r2, #68]	; 0x44
 800568a:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <HAL_MspInit+0x4c>)
 800568c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005692:	607b      	str	r3, [r7, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005696:	2300      	movs	r3, #0
 8005698:	603b      	str	r3, [r7, #0]
 800569a:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <HAL_MspInit+0x4c>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <HAL_MspInit+0x4c>)
 80056a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a4:	6413      	str	r3, [r2, #64]	; 0x40
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <HAL_MspInit+0x4c>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800

080056c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08c      	sub	sp, #48	; 0x30
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056cc:	f107 031c 	add.w	r3, r7, #28
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	605a      	str	r2, [r3, #4]
 80056d6:	609a      	str	r2, [r3, #8]
 80056d8:	60da      	str	r2, [r3, #12]
 80056da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a4a      	ldr	r2, [pc, #296]	; (800580c <HAL_ADC_MspInit+0x148>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	f040 808e 	bne.w	8005804 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80056e8:	2300      	movs	r3, #0
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	4b48      	ldr	r3, [pc, #288]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 80056ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f0:	4a47      	ldr	r2, [pc, #284]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 80056f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056f6:	6453      	str	r3, [r2, #68]	; 0x44
 80056f8:	4b45      	ldr	r3, [pc, #276]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 80056fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	4b41      	ldr	r3, [pc, #260]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	4a40      	ldr	r2, [pc, #256]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 800570e:	f043 0304 	orr.w	r3, r3, #4
 8005712:	6313      	str	r3, [r2, #48]	; 0x30
 8005714:	4b3e      	ldr	r3, [pc, #248]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005720:	2300      	movs	r3, #0
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	4a39      	ldr	r2, [pc, #228]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	6313      	str	r3, [r2, #48]	; 0x30
 8005730:	4b37      	ldr	r3, [pc, #220]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800573c:	2300      	movs	r3, #0
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	4b33      	ldr	r3, [pc, #204]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	4a32      	ldr	r2, [pc, #200]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 8005746:	f043 0302 	orr.w	r3, r3, #2
 800574a:	6313      	str	r3, [r2, #48]	; 0x30
 800574c:	4b30      	ldr	r3, [pc, #192]	; (8005810 <HAL_ADC_MspInit+0x14c>)
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005758:	230f      	movs	r3, #15
 800575a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800575c:	2303      	movs	r3, #3
 800575e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005760:	2300      	movs	r3, #0
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005764:	f107 031c 	add.w	r3, r7, #28
 8005768:	4619      	mov	r1, r3
 800576a:	482a      	ldr	r0, [pc, #168]	; (8005814 <HAL_ADC_MspInit+0x150>)
 800576c:	f003 f9fa 	bl	8008b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005770:	23ff      	movs	r3, #255	; 0xff
 8005772:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005774:	2303      	movs	r3, #3
 8005776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005778:	2300      	movs	r3, #0
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800577c:	f107 031c 	add.w	r3, r7, #28
 8005780:	4619      	mov	r1, r3
 8005782:	4825      	ldr	r0, [pc, #148]	; (8005818 <HAL_ADC_MspInit+0x154>)
 8005784:	f003 f9ee 	bl	8008b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005788:	2303      	movs	r3, #3
 800578a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800578c:	2303      	movs	r3, #3
 800578e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005794:	f107 031c 	add.w	r3, r7, #28
 8005798:	4619      	mov	r1, r3
 800579a:	4820      	ldr	r0, [pc, #128]	; (800581c <HAL_ADC_MspInit+0x158>)
 800579c:	f003 f9e2 	bl	8008b64 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80057a0:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057a2:	4a20      	ldr	r2, [pc, #128]	; (8005824 <HAL_ADC_MspInit+0x160>)
 80057a4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80057a6:	4b1e      	ldr	r3, [pc, #120]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057ac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057ae:	4b1c      	ldr	r3, [pc, #112]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80057b4:	4b1a      	ldr	r3, [pc, #104]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80057ba:	4b19      	ldr	r3, [pc, #100]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057c0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80057c2:	4b17      	ldr	r3, [pc, #92]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80057ca:	4b15      	ldr	r3, [pc, #84]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057d0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80057da:	4b11      	ldr	r3, [pc, #68]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80057e0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057e2:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80057e8:	480d      	ldr	r0, [pc, #52]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057ea:	f002 fe1f 	bl	800842c <HAL_DMA_Init>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80057f4:	f7ff ff32 	bl	800565c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a09      	ldr	r2, [pc, #36]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
 80057fe:	4a08      	ldr	r2, [pc, #32]	; (8005820 <HAL_ADC_MspInit+0x15c>)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005804:	bf00      	nop
 8005806:	3730      	adds	r7, #48	; 0x30
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40012100 	.word	0x40012100
 8005810:	40023800 	.word	0x40023800
 8005814:	40020800 	.word	0x40020800
 8005818:	40020000 	.word	0x40020000
 800581c:	40020400 	.word	0x40020400
 8005820:	20035e1c 	.word	0x20035e1c
 8005824:	40026440 	.word	0x40026440

08005828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08c      	sub	sp, #48	; 0x30
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005830:	f107 031c 	add.w	r3, r7, #28
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	609a      	str	r2, [r3, #8]
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a32      	ldr	r2, [pc, #200]	; (8005910 <HAL_I2C_MspInit+0xe8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d12c      	bne.n	80058a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	4b31      	ldr	r3, [pc, #196]	; (8005914 <HAL_I2C_MspInit+0xec>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	4a30      	ldr	r2, [pc, #192]	; (8005914 <HAL_I2C_MspInit+0xec>)
 8005854:	f043 0302 	orr.w	r3, r3, #2
 8005858:	6313      	str	r3, [r2, #48]	; 0x30
 800585a:	4b2e      	ldr	r3, [pc, #184]	; (8005914 <HAL_I2C_MspInit+0xec>)
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	61bb      	str	r3, [r7, #24]
 8005864:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005866:	23c0      	movs	r3, #192	; 0xc0
 8005868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800586a:	2312      	movs	r3, #18
 800586c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800586e:	2301      	movs	r3, #1
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005872:	2303      	movs	r3, #3
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005876:	2304      	movs	r3, #4
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800587a:	f107 031c 	add.w	r3, r7, #28
 800587e:	4619      	mov	r1, r3
 8005880:	4825      	ldr	r0, [pc, #148]	; (8005918 <HAL_I2C_MspInit+0xf0>)
 8005882:	f003 f96f 	bl	8008b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <HAL_I2C_MspInit+0xec>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	4a21      	ldr	r2, [pc, #132]	; (8005914 <HAL_I2C_MspInit+0xec>)
 8005890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005894:	6413      	str	r3, [r2, #64]	; 0x40
 8005896:	4b1f      	ldr	r3, [pc, #124]	; (8005914 <HAL_I2C_MspInit+0xec>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80058a2:	e031      	b.n	8005908 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1c      	ldr	r2, [pc, #112]	; (800591c <HAL_I2C_MspInit+0xf4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d12c      	bne.n	8005908 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	4b18      	ldr	r3, [pc, #96]	; (8005914 <HAL_I2C_MspInit+0xec>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	4a17      	ldr	r2, [pc, #92]	; (8005914 <HAL_I2C_MspInit+0xec>)
 80058b8:	f043 0302 	orr.w	r3, r3, #2
 80058bc:	6313      	str	r3, [r2, #48]	; 0x30
 80058be:	4b15      	ldr	r3, [pc, #84]	; (8005914 <HAL_I2C_MspInit+0xec>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80058ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80058ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058d0:	2312      	movs	r3, #18
 80058d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058d4:	2301      	movs	r3, #1
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d8:	2303      	movs	r3, #3
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80058dc:	2304      	movs	r3, #4
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058e0:	f107 031c 	add.w	r3, r7, #28
 80058e4:	4619      	mov	r1, r3
 80058e6:	480c      	ldr	r0, [pc, #48]	; (8005918 <HAL_I2C_MspInit+0xf0>)
 80058e8:	f003 f93c 	bl	8008b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	4b08      	ldr	r3, [pc, #32]	; (8005914 <HAL_I2C_MspInit+0xec>)
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	4a07      	ldr	r2, [pc, #28]	; (8005914 <HAL_I2C_MspInit+0xec>)
 80058f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058fa:	6413      	str	r3, [r2, #64]	; 0x40
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_I2C_MspInit+0xec>)
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
}
 8005908:	bf00      	nop
 800590a:	3730      	adds	r7, #48	; 0x30
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40005400 	.word	0x40005400
 8005914:	40023800 	.word	0x40023800
 8005918:	40020400 	.word	0x40020400
 800591c:	40005800 	.word	0x40005800

08005920 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08a      	sub	sp, #40	; 0x28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005928:	f107 0314 	add.w	r3, r7, #20
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	605a      	str	r2, [r3, #4]
 8005932:	609a      	str	r2, [r3, #8]
 8005934:	60da      	str	r2, [r3, #12]
 8005936:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a69      	ldr	r2, [pc, #420]	; (8005ae4 <HAL_SD_MspInit+0x1c4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	f040 80cb 	bne.w	8005ada <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005944:	2300      	movs	r3, #0
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	4b67      	ldr	r3, [pc, #412]	; (8005ae8 <HAL_SD_MspInit+0x1c8>)
 800594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594c:	4a66      	ldr	r2, [pc, #408]	; (8005ae8 <HAL_SD_MspInit+0x1c8>)
 800594e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005952:	6453      	str	r3, [r2, #68]	; 0x44
 8005954:	4b64      	ldr	r3, [pc, #400]	; (8005ae8 <HAL_SD_MspInit+0x1c8>)
 8005956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	4b60      	ldr	r3, [pc, #384]	; (8005ae8 <HAL_SD_MspInit+0x1c8>)
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	4a5f      	ldr	r2, [pc, #380]	; (8005ae8 <HAL_SD_MspInit+0x1c8>)
 800596a:	f043 0304 	orr.w	r3, r3, #4
 800596e:	6313      	str	r3, [r2, #48]	; 0x30
 8005970:	4b5d      	ldr	r3, [pc, #372]	; (8005ae8 <HAL_SD_MspInit+0x1c8>)
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]
 8005980:	4b59      	ldr	r3, [pc, #356]	; (8005ae8 <HAL_SD_MspInit+0x1c8>)
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	4a58      	ldr	r2, [pc, #352]	; (8005ae8 <HAL_SD_MspInit+0x1c8>)
 8005986:	f043 0308 	orr.w	r3, r3, #8
 800598a:	6313      	str	r3, [r2, #48]	; 0x30
 800598c:	4b56      	ldr	r3, [pc, #344]	; (8005ae8 <HAL_SD_MspInit+0x1c8>)
 800598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005998:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800599c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800599e:	2302      	movs	r3, #2
 80059a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059a6:	2303      	movs	r3, #3
 80059a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80059aa:	230c      	movs	r3, #12
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059ae:	f107 0314 	add.w	r3, r7, #20
 80059b2:	4619      	mov	r1, r3
 80059b4:	484d      	ldr	r0, [pc, #308]	; (8005aec <HAL_SD_MspInit+0x1cc>)
 80059b6:	f003 f8d5 	bl	8008b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80059ba:	2304      	movs	r3, #4
 80059bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059be:	2302      	movs	r3, #2
 80059c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059c6:	2303      	movs	r3, #3
 80059c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80059ca:	230c      	movs	r3, #12
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059ce:	f107 0314 	add.w	r3, r7, #20
 80059d2:	4619      	mov	r1, r3
 80059d4:	4846      	ldr	r0, [pc, #280]	; (8005af0 <HAL_SD_MspInit+0x1d0>)
 80059d6:	f003 f8c5 	bl	8008b64 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80059da:	4b46      	ldr	r3, [pc, #280]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 80059dc:	4a46      	ldr	r2, [pc, #280]	; (8005af8 <HAL_SD_MspInit+0x1d8>)
 80059de:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80059e0:	4b44      	ldr	r3, [pc, #272]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 80059e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059e6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059e8:	4b42      	ldr	r3, [pc, #264]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059ee:	4b41      	ldr	r3, [pc, #260]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059f4:	4b3f      	ldr	r3, [pc, #252]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 80059f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059fa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80059fc:	4b3d      	ldr	r3, [pc, #244]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 80059fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a02:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a04:	4b3b      	ldr	r3, [pc, #236]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 8005a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a0a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005a0c:	4b39      	ldr	r3, [pc, #228]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 8005a0e:	2220      	movs	r2, #32
 8005a10:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a12:	4b38      	ldr	r3, [pc, #224]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 8005a14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005a18:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a1a:	4b36      	ldr	r3, [pc, #216]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 8005a1c:	2204      	movs	r2, #4
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a20:	4b34      	ldr	r3, [pc, #208]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 8005a22:	2203      	movs	r2, #3
 8005a24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005a26:	4b33      	ldr	r3, [pc, #204]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 8005a28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005a2e:	4b31      	ldr	r3, [pc, #196]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 8005a30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005a36:	482f      	ldr	r0, [pc, #188]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 8005a38:	f002 fcf8 	bl	800842c <HAL_DMA_Init>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005a42:	f7ff fe0b 	bl	800565c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2a      	ldr	r2, [pc, #168]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8005a4c:	4a29      	ldr	r2, [pc, #164]	; (8005af4 <HAL_SD_MspInit+0x1d4>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005a52:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a54:	4a2a      	ldr	r2, [pc, #168]	; (8005b00 <HAL_SD_MspInit+0x1e0>)
 8005a56:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005a58:	4b28      	ldr	r3, [pc, #160]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a5e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a60:	4b26      	ldr	r3, [pc, #152]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a62:	2240      	movs	r2, #64	; 0x40
 8005a64:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a66:	4b25      	ldr	r3, [pc, #148]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a6c:	4b23      	ldr	r3, [pc, #140]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a72:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a74:	4b21      	ldr	r3, [pc, #132]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a7a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a7c:	4b1f      	ldr	r3, [pc, #124]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a82:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a86:	2220      	movs	r2, #32
 8005a88:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a8a:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005a90:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a92:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a94:	2204      	movs	r2, #4
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a98:	4b18      	ldr	r3, [pc, #96]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005a9e:	4b17      	ldr	r3, [pc, #92]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005aa0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005aa8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005aae:	4813      	ldr	r0, [pc, #76]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005ab0:	f002 fcbc 	bl	800842c <HAL_DMA_Init>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005aba:	f7ff fdcf 	bl	800565c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a0e      	ldr	r2, [pc, #56]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005ac2:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <HAL_SD_MspInit+0x1dc>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005aca:	2200      	movs	r2, #0
 8005acc:	2100      	movs	r1, #0
 8005ace:	2031      	movs	r0, #49	; 0x31
 8005ad0:	f002 fc75 	bl	80083be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005ad4:	2031      	movs	r0, #49	; 0x31
 8005ad6:	f002 fc8e 	bl	80083f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005ada:	bf00      	nop
 8005adc:	3728      	adds	r7, #40	; 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	40020800 	.word	0x40020800
 8005af0:	40020c00 	.word	0x40020c00
 8005af4:	20035944 	.word	0x20035944
 8005af8:	40026458 	.word	0x40026458
 8005afc:	20035c78 	.word	0x20035c78
 8005b00:	400264a0 	.word	0x400264a0

08005b04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08a      	sub	sp, #40	; 0x28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	605a      	str	r2, [r3, #4]
 8005b16:	609a      	str	r2, [r3, #8]
 8005b18:	60da      	str	r2, [r3, #12]
 8005b1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a19      	ldr	r2, [pc, #100]	; (8005b88 <HAL_SPI_MspInit+0x84>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d12c      	bne.n	8005b80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005b26:	2300      	movs	r3, #0
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b34:	6413      	str	r3, [r2, #64]	; 0x40
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	4a10      	ldr	r2, [pc, #64]	; (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b4c:	f043 0302 	orr.w	r3, r3, #2
 8005b50:	6313      	str	r3, [r2, #48]	; 0x30
 8005b52:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <HAL_SPI_MspInit+0x88>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005b5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b64:	2302      	movs	r3, #2
 8005b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005b70:	2305      	movs	r3, #5
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b74:	f107 0314 	add.w	r3, r7, #20
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4805      	ldr	r0, [pc, #20]	; (8005b90 <HAL_SPI_MspInit+0x8c>)
 8005b7c:	f002 fff2 	bl	8008b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005b80:	bf00      	nop
 8005b82:	3728      	adds	r7, #40	; 0x28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40003800 	.word	0x40003800
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	40020400 	.word	0x40020400

08005b94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08c      	sub	sp, #48	; 0x30
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9c:	f107 031c 	add.w	r3, r7, #28
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a2d      	ldr	r2, [pc, #180]	; (8005c68 <HAL_TIM_PWM_MspInit+0xd4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d12d      	bne.n	8005c12 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	4b2c      	ldr	r3, [pc, #176]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	4a2b      	ldr	r2, [pc, #172]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8005bc6:	4b29      	ldr	r3, [pc, #164]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	61bb      	str	r3, [r7, #24]
 8005bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	4b25      	ldr	r3, [pc, #148]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005bdc:	f043 0310 	orr.w	r3, r3, #16
 8005be0:	6313      	str	r3, [r2, #48]	; 0x30
 8005be2:	4b22      	ldr	r3, [pc, #136]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8005bee:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005c00:	2301      	movs	r3, #1
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c04:	f107 031c 	add.w	r3, r7, #28
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4819      	ldr	r0, [pc, #100]	; (8005c70 <HAL_TIM_PWM_MspInit+0xdc>)
 8005c0c:	f002 ffaa 	bl	8008b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005c10:	e026      	b.n	8005c60 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a17      	ldr	r2, [pc, #92]	; (8005c74 <HAL_TIM_PWM_MspInit+0xe0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d10e      	bne.n	8005c3a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	4a11      	ldr	r2, [pc, #68]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005c26:	f043 0302 	orr.w	r3, r3, #2
 8005c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2c:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	693b      	ldr	r3, [r7, #16]
}
 8005c38:	e012      	b.n	8005c60 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a0e      	ldr	r2, [pc, #56]	; (8005c78 <HAL_TIM_PWM_MspInit+0xe4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10d      	bne.n	8005c60 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	4a07      	ldr	r2, [pc, #28]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005c4e:	f043 0304 	orr.w	r3, r3, #4
 8005c52:	6413      	str	r3, [r2, #64]	; 0x40
 8005c54:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <HAL_TIM_PWM_MspInit+0xd8>)
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
}
 8005c60:	bf00      	nop
 8005c62:	3730      	adds	r7, #48	; 0x30
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	40021000 	.word	0x40021000
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800

08005c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a3e      	ldr	r2, [pc, #248]	; (8005d84 <HAL_TIM_Base_MspInit+0x108>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d116      	bne.n	8005cbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
 8005c92:	4b3d      	ldr	r3, [pc, #244]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	4a3c      	ldr	r2, [pc, #240]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005c98:	f043 0310 	orr.w	r3, r3, #16
 8005c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c9e:	4b3a      	ldr	r3, [pc, #232]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005caa:	2200      	movs	r2, #0
 8005cac:	2101      	movs	r1, #1
 8005cae:	2036      	movs	r0, #54	; 0x36
 8005cb0:	f002 fb85 	bl	80083be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005cb4:	2036      	movs	r0, #54	; 0x36
 8005cb6:	f002 fb9e 	bl	80083f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005cba:	e05e      	b.n	8005d7a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a32      	ldr	r2, [pc, #200]	; (8005d8c <HAL_TIM_Base_MspInit+0x110>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d116      	bne.n	8005cf4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	4a2e      	ldr	r2, [pc, #184]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005cd0:	f043 0320 	orr.w	r3, r3, #32
 8005cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd6:	4b2c      	ldr	r3, [pc, #176]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	2037      	movs	r0, #55	; 0x37
 8005ce8:	f002 fb69 	bl	80083be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005cec:	2037      	movs	r0, #55	; 0x37
 8005cee:	f002 fb82 	bl	80083f6 <HAL_NVIC_EnableIRQ>
}
 8005cf2:	e042      	b.n	8005d7a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <HAL_TIM_Base_MspInit+0x114>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d10e      	bne.n	8005d1c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	4b21      	ldr	r3, [pc, #132]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	4a20      	ldr	r2, [pc, #128]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d0e:	4b1e      	ldr	r3, [pc, #120]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	697b      	ldr	r3, [r7, #20]
}
 8005d1a:	e02e      	b.n	8005d7a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1c      	ldr	r2, [pc, #112]	; (8005d94 <HAL_TIM_Base_MspInit+0x118>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d10e      	bne.n	8005d44 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005d26:	2300      	movs	r3, #0
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	4b17      	ldr	r3, [pc, #92]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	4a16      	ldr	r2, [pc, #88]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d34:	6453      	str	r3, [r2, #68]	; 0x44
 8005d36:	4b14      	ldr	r3, [pc, #80]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	693b      	ldr	r3, [r7, #16]
}
 8005d42:	e01a      	b.n	8005d7a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <HAL_TIM_Base_MspInit+0x11c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d115      	bne.n	8005d7a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <HAL_TIM_Base_MspInit+0x10c>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	202c      	movs	r0, #44	; 0x2c
 8005d70:	f002 fb25 	bl	80083be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005d74:	202c      	movs	r0, #44	; 0x2c
 8005d76:	f002 fb3e 	bl	80083f6 <HAL_NVIC_EnableIRQ>
}
 8005d7a:	bf00      	nop
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	40001000 	.word	0x40001000
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40001400 	.word	0x40001400
 8005d90:	40014400 	.word	0x40014400
 8005d94:	40014800 	.word	0x40014800
 8005d98:	40001c00 	.word	0x40001c00

08005d9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	609a      	str	r2, [r3, #8]
 8005db0:	60da      	str	r2, [r3, #12]
 8005db2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <HAL_TIM_Encoder_MspInit+0x94>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d133      	bne.n	8005e26 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc6:	4a1b      	ldr	r2, [pc, #108]	; (8005e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8005dce:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	4b15      	ldr	r3, [pc, #84]	; (8005e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	4a14      	ldr	r2, [pc, #80]	; (8005e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8005de4:	f043 0304 	orr.w	r3, r3, #4
 8005de8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <HAL_TIM_Encoder_MspInit+0x98>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005df6:	23c0      	movs	r3, #192	; 0xc0
 8005df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e02:	2300      	movs	r3, #0
 8005e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005e06:	2303      	movs	r3, #3
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4809      	ldr	r0, [pc, #36]	; (8005e38 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005e12:	f002 fea7 	bl	8008b64 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005e16:	2200      	movs	r2, #0
 8005e18:	2100      	movs	r1, #0
 8005e1a:	202c      	movs	r0, #44	; 0x2c
 8005e1c:	f002 facf 	bl	80083be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005e20:	202c      	movs	r0, #44	; 0x2c
 8005e22:	f002 fae8 	bl	80083f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005e26:	bf00      	nop
 8005e28:	3728      	adds	r7, #40	; 0x28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40010400 	.word	0x40010400
 8005e34:	40023800 	.word	0x40023800
 8005e38:	40020800 	.word	0x40020800

08005e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08c      	sub	sp, #48	; 0x30
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e44:	f107 031c 	add.w	r3, r7, #28
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
 8005e50:	60da      	str	r2, [r3, #12]
 8005e52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a5c      	ldr	r2, [pc, #368]	; (8005fcc <HAL_TIM_MspPostInit+0x190>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d11f      	bne.n	8005e9e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	4b5b      	ldr	r3, [pc, #364]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	4a5a      	ldr	r2, [pc, #360]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005e68:	f043 0310 	orr.w	r3, r3, #16
 8005e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e6e:	4b58      	ldr	r3, [pc, #352]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	61bb      	str	r3, [r7, #24]
 8005e78:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e80:	2302      	movs	r3, #2
 8005e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e90:	f107 031c 	add.w	r3, r7, #28
 8005e94:	4619      	mov	r1, r3
 8005e96:	484f      	ldr	r0, [pc, #316]	; (8005fd4 <HAL_TIM_MspPostInit+0x198>)
 8005e98:	f002 fe64 	bl	8008b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005e9c:	e091      	b.n	8005fc2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a4d      	ldr	r2, [pc, #308]	; (8005fd8 <HAL_TIM_MspPostInit+0x19c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d11e      	bne.n	8005ee6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	4b48      	ldr	r3, [pc, #288]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	4a47      	ldr	r2, [pc, #284]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005eb2:	f043 0302 	orr.w	r3, r3, #2
 8005eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8005eb8:	4b45      	ldr	r3, [pc, #276]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ec4:	2330      	movs	r3, #48	; 0x30
 8005ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ed8:	f107 031c 	add.w	r3, r7, #28
 8005edc:	4619      	mov	r1, r3
 8005ede:	483f      	ldr	r0, [pc, #252]	; (8005fdc <HAL_TIM_MspPostInit+0x1a0>)
 8005ee0:	f002 fe40 	bl	8008b64 <HAL_GPIO_Init>
}
 8005ee4:	e06d      	b.n	8005fc2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a3d      	ldr	r2, [pc, #244]	; (8005fe0 <HAL_TIM_MspPostInit+0x1a4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d11f      	bne.n	8005f30 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	4b36      	ldr	r3, [pc, #216]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef8:	4a35      	ldr	r2, [pc, #212]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005efa:	f043 0308 	orr.w	r3, r3, #8
 8005efe:	6313      	str	r3, [r2, #48]	; 0x30
 8005f00:	4b33      	ldr	r3, [pc, #204]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005f0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f12:	2302      	movs	r3, #2
 8005f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005f1e:	2302      	movs	r3, #2
 8005f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f22:	f107 031c 	add.w	r3, r7, #28
 8005f26:	4619      	mov	r1, r3
 8005f28:	482e      	ldr	r0, [pc, #184]	; (8005fe4 <HAL_TIM_MspPostInit+0x1a8>)
 8005f2a:	f002 fe1b 	bl	8008b64 <HAL_GPIO_Init>
}
 8005f2e:	e048      	b.n	8005fc2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2c      	ldr	r2, [pc, #176]	; (8005fe8 <HAL_TIM_MspPostInit+0x1ac>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d11f      	bne.n	8005f7a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	4b24      	ldr	r3, [pc, #144]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	4a23      	ldr	r2, [pc, #140]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005f44:	f043 0302 	orr.w	r3, r3, #2
 8005f48:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4a:	4b21      	ldr	r3, [pc, #132]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f64:	2300      	movs	r3, #0
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f6c:	f107 031c 	add.w	r3, r7, #28
 8005f70:	4619      	mov	r1, r3
 8005f72:	481a      	ldr	r0, [pc, #104]	; (8005fdc <HAL_TIM_MspPostInit+0x1a0>)
 8005f74:	f002 fdf6 	bl	8008b64 <HAL_GPIO_Init>
}
 8005f78:	e023      	b.n	8005fc2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <HAL_TIM_MspPostInit+0x1b0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d11e      	bne.n	8005fc2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f84:	2300      	movs	r3, #0
 8005f86:	60bb      	str	r3, [r7, #8]
 8005f88:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005f8e:	f043 0302 	orr.w	r3, r3, #2
 8005f92:	6313      	str	r3, [r2, #48]	; 0x30
 8005f94:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <HAL_TIM_MspPostInit+0x194>)
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fb6:	f107 031c 	add.w	r3, r7, #28
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4807      	ldr	r0, [pc, #28]	; (8005fdc <HAL_TIM_MspPostInit+0x1a0>)
 8005fbe:	f002 fdd1 	bl	8008b64 <HAL_GPIO_Init>
}
 8005fc2:	bf00      	nop
 8005fc4:	3730      	adds	r7, #48	; 0x30
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40020400 	.word	0x40020400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40020c00 	.word	0x40020c00
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	; 0x28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	609a      	str	r2, [r3, #8]
 8006004:	60da      	str	r2, [r3, #12]
 8006006:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a19      	ldr	r2, [pc, #100]	; (8006074 <HAL_UART_MspInit+0x84>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d12b      	bne.n	800606a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	4b18      	ldr	r3, [pc, #96]	; (8006078 <HAL_UART_MspInit+0x88>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <HAL_UART_MspInit+0x88>)
 800601c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006020:	6413      	str	r3, [r2, #64]	; 0x40
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <HAL_UART_MspInit+0x88>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	4b11      	ldr	r3, [pc, #68]	; (8006078 <HAL_UART_MspInit+0x88>)
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	4a10      	ldr	r2, [pc, #64]	; (8006078 <HAL_UART_MspInit+0x88>)
 8006038:	f043 0308 	orr.w	r3, r3, #8
 800603c:	6313      	str	r3, [r2, #48]	; 0x30
 800603e:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <HAL_UART_MspInit+0x88>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800604a:	2360      	movs	r3, #96	; 0x60
 800604c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604e:	2302      	movs	r3, #2
 8006050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006056:	2303      	movs	r3, #3
 8006058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800605a:	2307      	movs	r3, #7
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800605e:	f107 0314 	add.w	r3, r7, #20
 8006062:	4619      	mov	r1, r3
 8006064:	4805      	ldr	r0, [pc, #20]	; (800607c <HAL_UART_MspInit+0x8c>)
 8006066:	f002 fd7d 	bl	8008b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800606a:	bf00      	nop
 800606c:	3728      	adds	r7, #40	; 0x28
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40004400 	.word	0x40004400
 8006078:	40023800 	.word	0x40023800
 800607c:	40020c00 	.word	0x40020c00

08006080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006084:	e7fe      	b.n	8006084 <NMI_Handler+0x4>

08006086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006086:	b480      	push	{r7}
 8006088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800608a:	e7fe      	b.n	800608a <HardFault_Handler+0x4>

0800608c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006090:	e7fe      	b.n	8006090 <MemManage_Handler+0x4>

08006092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006092:	b480      	push	{r7}
 8006094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006096:	e7fe      	b.n	8006096 <BusFault_Handler+0x4>

08006098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800609c:	e7fe      	b.n	800609c <UsageFault_Handler+0x4>

0800609e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800609e:	b480      	push	{r7}
 80060a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060a2:	bf00      	nop
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060b0:	bf00      	nop
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80060ba:	b480      	push	{r7}
 80060bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060be:	bf00      	nop
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060cc:	f001 fc56 	bl	800797c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060d0:	bf00      	nop
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80060d8:	2004      	movs	r0, #4
 80060da:	f002 ff1f 	bl	8008f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80060e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80060ea:	f002 ff17 	bl	8008f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80060ee:	bf00      	nop
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80060f8:	4803      	ldr	r0, [pc, #12]	; (8006108 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80060fa:	f006 ff2e 	bl	800cf5a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80060fe:	4803      	ldr	r0, [pc, #12]	; (800610c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006100:	f006 ff2b 	bl	800cf5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006104:	bf00      	nop
 8006106:	bd80      	pop	{r7, pc}
 8006108:	200359fc 	.word	0x200359fc
 800610c:	20035bf8 	.word	0x20035bf8

08006110 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006114:	4802      	ldr	r0, [pc, #8]	; (8006120 <SDIO_IRQHandler+0x10>)
 8006116:	f004 ffc7 	bl	800b0a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20035d58 	.word	0x20035d58

08006124 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006128:	4802      	ldr	r0, [pc, #8]	; (8006134 <TIM6_DAC_IRQHandler+0x10>)
 800612a:	f006 ff16 	bl	800cf5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20035cd8 	.word	0x20035cd8

08006138 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800613c:	4802      	ldr	r0, [pc, #8]	; (8006148 <TIM7_IRQHandler+0x10>)
 800613e:	f006 ff0c 	bl	800cf5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006142:	bf00      	nop
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20035e7c 	.word	0x20035e7c

0800614c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006150:	4802      	ldr	r0, [pc, #8]	; (800615c <DMA2_Stream2_IRQHandler+0x10>)
 8006152:	f002 fa93 	bl	800867c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006156:	bf00      	nop
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20035e1c 	.word	0x20035e1c

08006160 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006164:	4802      	ldr	r0, [pc, #8]	; (8006170 <DMA2_Stream3_IRQHandler+0x10>)
 8006166:	f002 fa89 	bl	800867c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800616a:	bf00      	nop
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20035944 	.word	0x20035944

08006174 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006178:	4802      	ldr	r0, [pc, #8]	; (8006184 <DMA2_Stream6_IRQHandler+0x10>)
 800617a:	f002 fa7f 	bl	800867c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800617e:	bf00      	nop
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20035c78 	.word	0x20035c78

08006188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006190:	4a14      	ldr	r2, [pc, #80]	; (80061e4 <_sbrk+0x5c>)
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <_sbrk+0x60>)
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800619c:	4b13      	ldr	r3, [pc, #76]	; (80061ec <_sbrk+0x64>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80061a4:	4b11      	ldr	r3, [pc, #68]	; (80061ec <_sbrk+0x64>)
 80061a6:	4a12      	ldr	r2, [pc, #72]	; (80061f0 <_sbrk+0x68>)
 80061a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80061aa:	4b10      	ldr	r3, [pc, #64]	; (80061ec <_sbrk+0x64>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4413      	add	r3, r2
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d207      	bcs.n	80061c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80061b8:	f00d f964 	bl	8013484 <__errno>
 80061bc:	4602      	mov	r2, r0
 80061be:	230c      	movs	r3, #12
 80061c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80061c2:	f04f 33ff 	mov.w	r3, #4294967295
 80061c6:	e009      	b.n	80061dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80061c8:	4b08      	ldr	r3, [pc, #32]	; (80061ec <_sbrk+0x64>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80061ce:	4b07      	ldr	r3, [pc, #28]	; (80061ec <_sbrk+0x64>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4413      	add	r3, r2
 80061d6:	4a05      	ldr	r2, [pc, #20]	; (80061ec <_sbrk+0x64>)
 80061d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80061da:	68fb      	ldr	r3, [r7, #12]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20050000 	.word	0x20050000
 80061e8:	00000800 	.word	0x00000800
 80061ec:	200002a8 	.word	0x200002a8
 80061f0:	20037fd0 	.word	0x20037fd0

080061f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <SystemInit+0x28>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	4a07      	ldr	r2, [pc, #28]	; (800621c <SystemInit+0x28>)
 8006200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <SystemInit+0x28>)
 800620a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800620e:	609a      	str	r2, [r3, #8]
#endif
}
 8006210:	bf00      	nop
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	e000ed00 	.word	0xe000ed00

08006220 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
	lcd_clear();
 8006224:	f7fa ff3c 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8006228:	2100      	movs	r1, #0
 800622a:	2000      	movs	r0, #0
 800622c:	f7fa ff48 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8006230:	4814      	ldr	r0, [pc, #80]	; (8006284 <batteryLowMode+0x64>)
 8006232:	f7fa ff6f 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8006236:	2101      	movs	r1, #1
 8006238:	2000      	movs	r0, #0
 800623a:	f7fa ff41 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 800623e:	4812      	ldr	r0, [pc, #72]	; (8006288 <batteryLowMode+0x68>)
 8006240:	f7fa ff68 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8006244:	2152      	movs	r1, #82	; 0x52
 8006246:	4811      	ldr	r0, [pc, #68]	; (800628c <batteryLowMode+0x6c>)
 8006248:	f7fb fe48 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800624c:	2064      	movs	r0, #100	; 0x64
 800624e:	f001 fbb5 	bl	80079bc <HAL_Delay>
		led.fullColor('Y');
 8006252:	2159      	movs	r1, #89	; 0x59
 8006254:	480d      	ldr	r0, [pc, #52]	; (800628c <batteryLowMode+0x6c>)
 8006256:	f7fb fe41 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800625a:	2064      	movs	r0, #100	; 0x64
 800625c:	f001 fbae 	bl	80079bc <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8006260:	480b      	ldr	r0, [pc, #44]	; (8006290 <batteryLowMode+0x70>)
 8006262:	f7fb fdd7 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006266:	4603      	mov	r3, r0
 8006268:	2b02      	cmp	r3, #2
 800626a:	bf0c      	ite	eq
 800626c:	2301      	moveq	r3, #1
 800626e:	2300      	movne	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0e6      	beq.n	8006244 <batteryLowMode+0x24>
			HAL_Delay(500);
 8006276:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800627a:	f001 fb9f 	bl	80079bc <HAL_Delay>
			break;
 800627e:	bf00      	nop
		}
	}
}
 8006280:	bf00      	nop
 8006282:	bd80      	pop	{r7, pc}
 8006284:	08017bfc 	.word	0x08017bfc
 8006288:	08017c04 	.word	0x08017c04
 800628c:	200005b8 	.word	0x200005b8
 8006290:	200005ac 	.word	0x200005ac

08006294 <cppInit>:

void cppInit(void)
{
 8006294:	b598      	push	{r3, r4, r7, lr}
 8006296:	af00      	add	r7, sp, #0
	lcd_init();
 8006298:	f7fa febe 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 800629c:	483f      	ldr	r0, [pc, #252]	; (800639c <cppInit+0x108>)
 800629e:	f7fd fd91 	bl	8003dc4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80062a2:	2064      	movs	r0, #100	; 0x64
 80062a4:	f001 fb8a 	bl	80079bc <HAL_Delay>
	power_sensor.updateValues();
 80062a8:	483c      	ldr	r0, [pc, #240]	; (800639c <cppInit+0x108>)
 80062aa:	f7fd fd99 	bl	8003de0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80062ae:	f7fa fef7 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80062b2:	2100      	movs	r1, #0
 80062b4:	2000      	movs	r0, #0
 80062b6:	f7fa ff03 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80062ba:	4839      	ldr	r0, [pc, #228]	; (80063a0 <cppInit+0x10c>)
 80062bc:	f7fa ff2a 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80062c0:	2101      	movs	r1, #1
 80062c2:	2000      	movs	r0, #0
 80062c4:	f7fa fefc 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80062c8:	4834      	ldr	r0, [pc, #208]	; (800639c <cppInit+0x108>)
 80062ca:	f7fd fdb3 	bl	8003e34 <_ZN11PowerSensor17getButteryVoltageEv>
 80062ce:	ee10 3a10 	vmov	r3, s0
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fa f950 	bl	8000578 <__aeabi_f2d>
 80062d8:	4603      	mov	r3, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	461a      	mov	r2, r3
 80062de:	4623      	mov	r3, r4
 80062e0:	4830      	ldr	r0, [pc, #192]	; (80063a4 <cppInit+0x110>)
 80062e2:	f7fa ff17 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80062e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062ea:	f001 fb67 	bl	80079bc <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 80062ee:	482b      	ldr	r0, [pc, #172]	; (800639c <cppInit+0x108>)
 80062f0:	f7fd fdb2 	bl	8003e58 <_ZN11PowerSensor12butteryCheckEv>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <cppInit+0x6a>
 80062fa:	f7ff ff91 	bl	8006220 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80062fe:	482a      	ldr	r0, [pc, #168]	; (80063a8 <cppInit+0x114>)
 8006300:	f7fc ffb4 	bl	800326c <_ZN6Logger10sdCardInitEv>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <cppInit+0x86>
		led.fullColor('G');
 800630a:	2147      	movs	r1, #71	; 0x47
 800630c:	4827      	ldr	r0, [pc, #156]	; (80063ac <cppInit+0x118>)
 800630e:	f7fb fde5 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006312:	2064      	movs	r0, #100	; 0x64
 8006314:	f001 fb52 	bl	80079bc <HAL_Delay>
 8006318:	e006      	b.n	8006328 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800631a:	2152      	movs	r1, #82	; 0x52
 800631c:	4823      	ldr	r0, [pc, #140]	; (80063ac <cppInit+0x118>)
 800631e:	f7fb fddd 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006322:	2064      	movs	r0, #100	; 0x64
 8006324:	f001 fb4a 	bl	80079bc <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006328:	4821      	ldr	r0, [pc, #132]	; (80063b0 <cppInit+0x11c>)
 800632a:	f7fb ff33 	bl	8002194 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800632e:	4821      	ldr	r0, [pc, #132]	; (80063b4 <cppInit+0x120>)
 8006330:	f7fd f9e0 	bl	80036f4 <_ZN5Motor4initEv>
	encoder.init();
 8006334:	4820      	ldr	r0, [pc, #128]	; (80063b8 <cppInit+0x124>)
 8006336:	f7fa ff35 	bl	80011a4 <_ZN7Encoder4initEv>
	imu.init();
 800633a:	4820      	ldr	r0, [pc, #128]	; (80063bc <cppInit+0x128>)
 800633c:	f7fb fb8e 	bl	8001a5c <_ZN3IMU4initEv>
	line_trace.init();
 8006340:	481f      	ldr	r0, [pc, #124]	; (80063c0 <cppInit+0x12c>)
 8006342:	f7fc fd13 	bl	8002d6c <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8006346:	481a      	ldr	r0, [pc, #104]	; (80063b0 <cppInit+0x11c>)
 8006348:	f7fc f864 	bl	8002414 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 800634c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006350:	f001 fb34 	bl	80079bc <HAL_Delay>

	led.fullColor('M');
 8006354:	214d      	movs	r1, #77	; 0x4d
 8006356:	4815      	ldr	r0, [pc, #84]	; (80063ac <cppInit+0x118>)
 8006358:	f7fb fdc0 	bl	8001edc <_ZN3LED9fullColorEc>
	imu.calibration();
 800635c:	4817      	ldr	r0, [pc, #92]	; (80063bc <cppInit+0x128>)
 800635e:	f7fb fc45 	bl	8001bec <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8006362:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80063c4 <cppInit+0x130>
 8006366:	eddf 0a18 	vldr	s1, [pc, #96]	; 80063c8 <cppInit+0x134>
 800636a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80063cc <cppInit+0x138>
 800636e:	4818      	ldr	r0, [pc, #96]	; (80063d0 <cppInit+0x13c>)
 8006370:	f7fe f96a 	bl	8004648 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8006374:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80063d4 <cppInit+0x140>
 8006378:	eddf 0a17 	vldr	s1, [pc, #92]	; 80063d8 <cppInit+0x144>
 800637c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80063dc <cppInit+0x148>
 8006380:	4813      	ldr	r0, [pc, #76]	; (80063d0 <cppInit+0x13c>)
 8006382:	f7fe f97a 	bl	800467a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8006386:	480c      	ldr	r0, [pc, #48]	; (80063b8 <cppInit+0x124>)
 8006388:	f7fb f856 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 800638c:	4814      	ldr	r0, [pc, #80]	; (80063e0 <cppInit+0x14c>)
 800638e:	f7fd fbe7 	bl	8003b60 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8006392:	4814      	ldr	r0, [pc, #80]	; (80063e4 <cppInit+0x150>)
 8006394:	f7fd fc7e 	bl	8003c94 <_ZN13PathFollowing4initEv>

}
 8006398:	bf00      	nop
 800639a:	bd98      	pop	{r3, r4, r7, pc}
 800639c:	200005bc 	.word	0x200005bc
 80063a0:	08017c08 	.word	0x08017c08
 80063a4:	08017c10 	.word	0x08017c10
 80063a8:	200005dc 	.word	0x200005dc
 80063ac:	200005b8 	.word	0x200005b8
 80063b0:	200002ac 	.word	0x200002ac
 80063b4:	200005b4 	.word	0x200005b4
 80063b8:	20015da4 	.word	0x20015da4
 80063bc:	200005c8 	.word	0x200005c8
 80063c0:	20015e40 	.word	0x20015e40
 80063c4:	3cceca68 	.word	0x3cceca68
 80063c8:	4180f06f 	.word	0x4180f06f
 80063cc:	3fea2d0e 	.word	0x3fea2d0e
 80063d0:	20015dc0 	.word	0x20015dc0
 80063d4:	3ab7dacd 	.word	0x3ab7dacd
 80063d8:	3f5e3fbc 	.word	0x3f5e3fbc
 80063dc:	3d8eefa2 	.word	0x3d8eefa2
 80063e0:	20015e00 	.word	0x20015e00
 80063e4:	2001be90 	.word	0x2001be90

080063e8 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80063ec:	4819      	ldr	r0, [pc, #100]	; (8006454 <cppFlip1ms+0x6c>)
 80063ee:	f7fb ff2f 	bl	8002250 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80063f2:	4819      	ldr	r0, [pc, #100]	; (8006458 <cppFlip1ms+0x70>)
 80063f4:	f7fb fb58 	bl	8001aa8 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 80063f8:	4818      	ldr	r0, [pc, #96]	; (800645c <cppFlip1ms+0x74>)
 80063fa:	f7fa fef5 	bl	80011e8 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 80063fe:	4818      	ldr	r0, [pc, #96]	; (8006460 <cppFlip1ms+0x78>)
 8006400:	f7fc fd4c 	bl	8002e9c <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8006404:	4817      	ldr	r0, [pc, #92]	; (8006464 <cppFlip1ms+0x7c>)
 8006406:	f7fe f951 	bl	80046ac <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800640a:	4817      	ldr	r0, [pc, #92]	; (8006468 <cppFlip1ms+0x80>)
 800640c:	f7fd fb8c 	bl	8003b28 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8006410:	4816      	ldr	r0, [pc, #88]	; (800646c <cppFlip1ms+0x84>)
 8006412:	f7fd f981 	bl	8003718 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8006416:	4b16      	ldr	r3, [pc, #88]	; (8006470 <cppFlip1ms+0x88>)
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	3301      	adds	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <cppFlip1ms+0x88>)
 8006420:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006422:	4b13      	ldr	r3, [pc, #76]	; (8006470 <cppFlip1ms+0x88>)
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d90c      	bls.n	8006444 <cppFlip1ms+0x5c>
		sys_ident.inOutputStore(imu.getOmega());
 800642a:	480b      	ldr	r0, [pc, #44]	; (8006458 <cppFlip1ms+0x70>)
 800642c:	f7fb fb94 	bl	8001b58 <_ZN3IMU8getOmegaEv>
 8006430:	eef0 7a40 	vmov.f32	s15, s0
 8006434:	eeb0 0a67 	vmov.f32	s0, s15
 8006438:	480e      	ldr	r0, [pc, #56]	; (8006474 <cppFlip1ms+0x8c>)
 800643a:	f7fd fed9 	bl	80041f0 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800643e:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <cppFlip1ms+0x88>)
 8006440:	2200      	movs	r2, #0
 8006442:	801a      	strh	r2, [r3, #0]
	}

	line_trace.storeLogs();
 8006444:	4806      	ldr	r0, [pc, #24]	; (8006460 <cppFlip1ms+0x78>)
 8006446:	f7fc fe57 	bl	80030f8 <_ZN9LineTrace9storeLogsEv>

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clearCnt();
 800644a:	4804      	ldr	r0, [pc, #16]	; (800645c <cppFlip1ms+0x74>)
 800644c:	f7fb f802 	bl	8001454 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8006450:	bf00      	nop
 8006452:	bd80      	pop	{r7, pc}
 8006454:	200002ac 	.word	0x200002ac
 8006458:	200005c8 	.word	0x200005c8
 800645c:	20015da4 	.word	0x20015da4
 8006460:	20015e40 	.word	0x20015e40
 8006464:	20015dc0 	.word	0x20015dc0
 8006468:	20015e00 	.word	0x20015e00
 800646c:	200005b4 	.word	0x200005b4
 8006470:	200335ba 	.word	0x200335ba
 8006474:	2001bc84 	.word	0x2001bc84

08006478 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 800647c:	4802      	ldr	r0, [pc, #8]	; (8006488 <cppFlip100ns+0x10>)
 800647e:	f7fb fe99 	bl	80021b4 <_ZN10LineSensor17storeSensorValuesEv>
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	200002ac 	.word	0x200002ac

0800648c <cppFlip10ms>:

void cppFlip10ms(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8006490:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <cppFlip10ms+0x30>)
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	3301      	adds	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	4b08      	ldr	r3, [pc, #32]	; (80064bc <cppFlip10ms+0x30>)
 800649a:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 800649c:	4b07      	ldr	r3, [pc, #28]	; (80064bc <cppFlip10ms+0x30>)
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	2b06      	cmp	r3, #6
 80064a2:	d905      	bls.n	80064b0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80064a4:	4806      	ldr	r0, [pc, #24]	; (80064c0 <cppFlip10ms+0x34>)
 80064a6:	f7fd fedf 	bl	8004268 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80064aa:	4b04      	ldr	r3, [pc, #16]	; (80064bc <cppFlip10ms+0x30>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 80064b0:	4b02      	ldr	r3, [pc, #8]	; (80064bc <cppFlip10ms+0x30>)
 80064b2:	881a      	ldrh	r2, [r3, #0]
 80064b4:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <cppFlip10ms+0x38>)
 80064b6:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80064b8:	bf00      	nop
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	200335bc 	.word	0x200335bc
 80064c0:	2001bc84 	.word	0x2001bc84
 80064c4:	200335b8 	.word	0x200335b8

080064c8 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	4619      	mov	r1, r3
 80064d6:	4803      	ldr	r0, [pc, #12]	; (80064e4 <cppExit+0x1c>)
 80064d8:	f7fd fd56 	bl	8003f88 <_ZN10SideSensor12updateStatusEt>
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	200005a4 	.word	0x200005a4

080064e8 <cppLoop>:

void cppLoop(void)
{
 80064e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064ec:	b08b      	sub	sp, #44	; 0x2c
 80064ee:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 80064f0:	48bf      	ldr	r0, [pc, #764]	; (80067f0 <cppLoop+0x308>)
 80064f2:	f7fd fce3 	bl	8003ebc <_ZN12RotarySwitch8getValueEv>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b0f      	cmp	r3, #15
 80064fa:	f201 80fb 	bhi.w	80076f4 <cppLoop+0x120c>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <cppLoop+0x1c>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	08006545 	.word	0x08006545
 8006508:	08006a1f 	.word	0x08006a1f
 800650c:	08006a9b 	.word	0x08006a9b
 8006510:	08006b69 	.word	0x08006b69
 8006514:	08006c19 	.word	0x08006c19
 8006518:	08006ca7 	.word	0x08006ca7
 800651c:	08006d6d 	.word	0x08006d6d
 8006520:	08006e81 	.word	0x08006e81
 8006524:	08006f21 	.word	0x08006f21
 8006528:	08007455 	.word	0x08007455
 800652c:	080074f1 	.word	0x080074f1
 8006530:	0800758b 	.word	0x0800758b
 8006534:	080075f3 	.word	0x080075f3
 8006538:	08007677 	.word	0x08007677
 800653c:	080076a1 	.word	0x080076a1
 8006540:	080076cb 	.word	0x080076cb
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8006544:	2152      	movs	r1, #82	; 0x52
 8006546:	48ab      	ldr	r0, [pc, #684]	; (80067f4 <cppLoop+0x30c>)
 8006548:	f7fb fcc8 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 800654c:	f7fa fda8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006550:	2100      	movs	r1, #0
 8006552:	2000      	movs	r0, #0
 8006554:	f7fa fdb4 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8006558:	48a7      	ldr	r0, [pc, #668]	; (80067f8 <cppLoop+0x310>)
 800655a:	f7fc fc54 	bl	8002e06 <_ZN9LineTrace5getKpEv>
 800655e:	eeb0 7a40 	vmov.f32	s14, s0
 8006562:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80067fc <cppLoop+0x314>
 8006566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800656a:	ee17 0a90 	vmov	r0, s15
 800656e:	f7fa f803 	bl	8000578 <__aeabi_f2d>
 8006572:	4603      	mov	r3, r0
 8006574:	460c      	mov	r4, r1
 8006576:	461a      	mov	r2, r3
 8006578:	4623      	mov	r3, r4
 800657a:	48a1      	ldr	r0, [pc, #644]	; (8006800 <cppLoop+0x318>)
 800657c:	f7fa fdca 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006580:	2101      	movs	r1, #1
 8006582:	2000      	movs	r0, #0
 8006584:	f7fa fd9c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8006588:	489b      	ldr	r0, [pc, #620]	; (80067f8 <cppLoop+0x310>)
 800658a:	f7fc fc4b 	bl	8002e24 <_ZN9LineTrace5getKiEv>
 800658e:	eeb0 7a40 	vmov.f32	s14, s0
 8006592:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8006804 <cppLoop+0x31c>
 8006596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659a:	ee17 0a90 	vmov	r0, s15
 800659e:	f7f9 ffeb 	bl	8000578 <__aeabi_f2d>
 80065a2:	4605      	mov	r5, r0
 80065a4:	460e      	mov	r6, r1
 80065a6:	4894      	ldr	r0, [pc, #592]	; (80067f8 <cppLoop+0x310>)
 80065a8:	f7fc fc4b 	bl	8002e42 <_ZN9LineTrace5getKdEv>
 80065ac:	eeb0 7a40 	vmov.f32	s14, s0
 80065b0:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006808 <cppLoop+0x320>
 80065b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b8:	ee17 0a90 	vmov	r0, s15
 80065bc:	f7f9 ffdc 	bl	8000578 <__aeabi_f2d>
 80065c0:	4603      	mov	r3, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	e9cd 3400 	strd	r3, r4, [sp]
 80065c8:	462a      	mov	r2, r5
 80065ca:	4633      	mov	r3, r6
 80065cc:	488f      	ldr	r0, [pc, #572]	; (800680c <cppLoop+0x324>)
 80065ce:	f7fa fda1 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 80065d2:	4b8f      	ldr	r3, [pc, #572]	; (8006810 <cppLoop+0x328>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	f3bf 8f5b 	dmb	ish
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf0c      	ite	eq
 80065e4:	2301      	moveq	r3, #1
 80065e6:	2300      	movne	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d015      	beq.n	800661a <cppLoop+0x132>
 80065ee:	4888      	ldr	r0, [pc, #544]	; (8006810 <cppLoop+0x328>)
 80065f0:	f00b fee1 	bl	80123b6 <__cxa_guard_acquire>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bf14      	ite	ne
 80065fa:	2301      	movne	r3, #1
 80065fc:	2300      	moveq	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <cppLoop+0x132>
 8006604:	487c      	ldr	r0, [pc, #496]	; (80067f8 <cppLoop+0x310>)
 8006606:	f7fc fbfe 	bl	8002e06 <_ZN9LineTrace5getKpEv>
 800660a:	eef0 7a40 	vmov.f32	s15, s0
 800660e:	4b81      	ldr	r3, [pc, #516]	; (8006814 <cppLoop+0x32c>)
 8006610:	edc3 7a00 	vstr	s15, [r3]
 8006614:	487e      	ldr	r0, [pc, #504]	; (8006810 <cppLoop+0x328>)
 8006616:	f00b feda 	bl	80123ce <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 800661a:	4b7f      	ldr	r3, [pc, #508]	; (8006818 <cppLoop+0x330>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	f3bf 8f5b 	dmb	ish
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	bf0c      	ite	eq
 800662c:	2301      	moveq	r3, #1
 800662e:	2300      	movne	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d015      	beq.n	8006662 <cppLoop+0x17a>
 8006636:	4878      	ldr	r0, [pc, #480]	; (8006818 <cppLoop+0x330>)
 8006638:	f00b febd 	bl	80123b6 <__cxa_guard_acquire>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	bf14      	ite	ne
 8006642:	2301      	movne	r3, #1
 8006644:	2300      	moveq	r3, #0
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <cppLoop+0x17a>
 800664c:	486a      	ldr	r0, [pc, #424]	; (80067f8 <cppLoop+0x310>)
 800664e:	f7fc fbe9 	bl	8002e24 <_ZN9LineTrace5getKiEv>
 8006652:	eef0 7a40 	vmov.f32	s15, s0
 8006656:	4b71      	ldr	r3, [pc, #452]	; (800681c <cppLoop+0x334>)
 8006658:	edc3 7a00 	vstr	s15, [r3]
 800665c:	486e      	ldr	r0, [pc, #440]	; (8006818 <cppLoop+0x330>)
 800665e:	f00b feb6 	bl	80123ce <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 8006662:	4b6f      	ldr	r3, [pc, #444]	; (8006820 <cppLoop+0x338>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f3bf 8f5b 	dmb	ish
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	bf0c      	ite	eq
 8006674:	2301      	moveq	r3, #1
 8006676:	2300      	movne	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d015      	beq.n	80066aa <cppLoop+0x1c2>
 800667e:	4868      	ldr	r0, [pc, #416]	; (8006820 <cppLoop+0x338>)
 8006680:	f00b fe99 	bl	80123b6 <__cxa_guard_acquire>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	bf14      	ite	ne
 800668a:	2301      	movne	r3, #1
 800668c:	2300      	moveq	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <cppLoop+0x1c2>
 8006694:	4858      	ldr	r0, [pc, #352]	; (80067f8 <cppLoop+0x310>)
 8006696:	f7fc fbd4 	bl	8002e42 <_ZN9LineTrace5getKdEv>
 800669a:	eef0 7a40 	vmov.f32	s15, s0
 800669e:	4b61      	ldr	r3, [pc, #388]	; (8006824 <cppLoop+0x33c>)
 80066a0:	edc3 7a00 	vstr	s15, [r3]
 80066a4:	485e      	ldr	r0, [pc, #376]	; (8006820 <cppLoop+0x338>)
 80066a6:	f00b fe92 	bl	80123ce <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80066aa:	485f      	ldr	r0, [pc, #380]	; (8006828 <cppLoop+0x340>)
 80066ac:	f7fb fbb2 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	bf0c      	ite	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	2300      	movne	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d022      	beq.n	8006706 <cppLoop+0x21e>
			led.LR(-1, 1);
 80066c0:	2201      	movs	r2, #1
 80066c2:	f04f 31ff 	mov.w	r1, #4294967295
 80066c6:	484b      	ldr	r0, [pc, #300]	; (80067f4 <cppLoop+0x30c>)
 80066c8:	f7fb fcc4 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80066cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80066d0:	f001 f974 	bl	80079bc <HAL_Delay>

			selector++;
 80066d4:	4b55      	ldr	r3, [pc, #340]	; (800682c <cppLoop+0x344>)
 80066d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3301      	adds	r3, #1
 80066de:	b29b      	uxth	r3, r3
 80066e0:	b21a      	sxth	r2, r3
 80066e2:	4b52      	ldr	r3, [pc, #328]	; (800682c <cppLoop+0x344>)
 80066e4:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80066e6:	4b51      	ldr	r3, [pc, #324]	; (800682c <cppLoop+0x344>)
 80066e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	dd02      	ble.n	80066f6 <cppLoop+0x20e>
 80066f0:	4b4e      	ldr	r3, [pc, #312]	; (800682c <cppLoop+0x344>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80066f6:	2200      	movs	r2, #0
 80066f8:	f04f 31ff 	mov.w	r1, #4294967295
 80066fc:	483d      	ldr	r0, [pc, #244]	; (80067f4 <cppLoop+0x30c>)
 80066fe:	f7fb fca9 	bl	8002054 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8006702:	f000 bff9 	b.w	80076f8 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_R){
 8006706:	4848      	ldr	r0, [pc, #288]	; (8006828 <cppLoop+0x340>)
 8006708:	f7fb fb84 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 800670c:	4603      	mov	r3, r0
 800670e:	2b10      	cmp	r3, #16
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8089 	beq.w	8006830 <cppLoop+0x348>
			led.LR(-1, 1);
 800671e:	2201      	movs	r2, #1
 8006720:	f04f 31ff 	mov.w	r1, #4294967295
 8006724:	4833      	ldr	r0, [pc, #204]	; (80067f4 <cppLoop+0x30c>)
 8006726:	f7fb fc95 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800672a:	2064      	movs	r0, #100	; 0x64
 800672c:	f001 f946 	bl	80079bc <HAL_Delay>
			if(selector == 0){
 8006730:	4b3e      	ldr	r3, [pc, #248]	; (800682c <cppLoop+0x344>)
 8006732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d113      	bne.n	8006762 <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 800673a:	4b36      	ldr	r3, [pc, #216]	; (8006814 <cppLoop+0x32c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7f9 ff1a 	bl	8000578 <__aeabi_f2d>
 8006744:	a324      	add	r3, pc, #144	; (adr r3, 80067d8 <cppLoop+0x2f0>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f7f9 fdb7 	bl	80002bc <__adddf3>
 800674e:	4603      	mov	r3, r0
 8006750:	460c      	mov	r4, r1
 8006752:	4618      	mov	r0, r3
 8006754:	4621      	mov	r1, r4
 8006756:	f7fa fa5f 	bl	8000c18 <__aeabi_d2f>
 800675a:	4602      	mov	r2, r0
 800675c:	4b2d      	ldr	r3, [pc, #180]	; (8006814 <cppLoop+0x32c>)
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e02b      	b.n	80067ba <cppLoop+0x2d2>
			else if(selector == 1){
 8006762:	4b32      	ldr	r3, [pc, #200]	; (800682c <cppLoop+0x344>)
 8006764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d113      	bne.n	8006794 <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 800676c:	4b2b      	ldr	r3, [pc, #172]	; (800681c <cppLoop+0x334>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f7f9 ff01 	bl	8000578 <__aeabi_f2d>
 8006776:	a31a      	add	r3, pc, #104	; (adr r3, 80067e0 <cppLoop+0x2f8>)
 8006778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677c:	f7f9 fd9e 	bl	80002bc <__adddf3>
 8006780:	4603      	mov	r3, r0
 8006782:	460c      	mov	r4, r1
 8006784:	4618      	mov	r0, r3
 8006786:	4621      	mov	r1, r4
 8006788:	f7fa fa46 	bl	8000c18 <__aeabi_d2f>
 800678c:	4602      	mov	r2, r0
 800678e:	4b23      	ldr	r3, [pc, #140]	; (800681c <cppLoop+0x334>)
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e012      	b.n	80067ba <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 8006794:	4b23      	ldr	r3, [pc, #140]	; (8006824 <cppLoop+0x33c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f7f9 feed 	bl	8000578 <__aeabi_f2d>
 800679e:	a312      	add	r3, pc, #72	; (adr r3, 80067e8 <cppLoop+0x300>)
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f7f9 fd8a 	bl	80002bc <__adddf3>
 80067a8:	4603      	mov	r3, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	4618      	mov	r0, r3
 80067ae:	4621      	mov	r1, r4
 80067b0:	f7fa fa32 	bl	8000c18 <__aeabi_d2f>
 80067b4:	4602      	mov	r2, r0
 80067b6:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <cppLoop+0x33c>)
 80067b8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80067ba:	2152      	movs	r1, #82	; 0x52
 80067bc:	480d      	ldr	r0, [pc, #52]	; (80067f4 <cppLoop+0x30c>)
 80067be:	f7fb fb8d 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80067c2:	2200      	movs	r2, #0
 80067c4:	f04f 31ff 	mov.w	r1, #4294967295
 80067c8:	480a      	ldr	r0, [pc, #40]	; (80067f4 <cppLoop+0x30c>)
 80067ca:	f7fb fc43 	bl	8002054 <_ZN3LED2LREaa>
		break;
 80067ce:	f000 bf93 	b.w	80076f8 <cppLoop+0x1210>
 80067d2:	bf00      	nop
 80067d4:	f3af 8000 	nop.w
 80067d8:	88e368f1 	.word	0x88e368f1
 80067dc:	3ee4f8b5 	.word	0x3ee4f8b5
 80067e0:	eb1c432d 	.word	0xeb1c432d
 80067e4:	3f1a36e2 	.word	0x3f1a36e2
 80067e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80067ec:	3eb0c6f7 	.word	0x3eb0c6f7
 80067f0:	200005b0 	.word	0x200005b0
 80067f4:	200005b8 	.word	0x200005b8
 80067f8:	20015e40 	.word	0x20015e40
 80067fc:	447a0000 	.word	0x447a0000
 8006800:	08017c14 	.word	0x08017c14
 8006804:	42c80000 	.word	0x42c80000
 8006808:	461c4000 	.word	0x461c4000
 800680c:	08017c20 	.word	0x08017c20
 8006810:	200335c4 	.word	0x200335c4
 8006814:	200335c0 	.word	0x200335c0
 8006818:	200335cc 	.word	0x200335cc
 800681c:	200335c8 	.word	0x200335c8
 8006820:	200335d4 	.word	0x200335d4
 8006824:	200335d0 	.word	0x200335d0
 8006828:	200005ac 	.word	0x200005ac
 800682c:	200335be 	.word	0x200335be
		else if(joy_stick.getValue() == JOY_L){
 8006830:	48bf      	ldr	r0, [pc, #764]	; (8006b30 <cppLoop+0x648>)
 8006832:	f7fb faef 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006836:	4603      	mov	r3, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	bf0c      	ite	eq
 800683c:	2301      	moveq	r3, #1
 800683e:	2300      	movne	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d059      	beq.n	80068fa <cppLoop+0x412>
			led.LR(-1, 1);
 8006846:	2201      	movs	r2, #1
 8006848:	f04f 31ff 	mov.w	r1, #4294967295
 800684c:	48b9      	ldr	r0, [pc, #740]	; (8006b34 <cppLoop+0x64c>)
 800684e:	f7fb fc01 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006852:	2064      	movs	r0, #100	; 0x64
 8006854:	f001 f8b2 	bl	80079bc <HAL_Delay>
			if(selector == 0){
 8006858:	4bb7      	ldr	r3, [pc, #732]	; (8006b38 <cppLoop+0x650>)
 800685a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d113      	bne.n	800688a <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 8006862:	4bb6      	ldr	r3, [pc, #728]	; (8006b3c <cppLoop+0x654>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7f9 fe86 	bl	8000578 <__aeabi_f2d>
 800686c:	a3aa      	add	r3, pc, #680	; (adr r3, 8006b18 <cppLoop+0x630>)
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	f7f9 fd21 	bl	80002b8 <__aeabi_dsub>
 8006876:	4603      	mov	r3, r0
 8006878:	460c      	mov	r4, r1
 800687a:	4618      	mov	r0, r3
 800687c:	4621      	mov	r1, r4
 800687e:	f7fa f9cb 	bl	8000c18 <__aeabi_d2f>
 8006882:	4602      	mov	r2, r0
 8006884:	4bad      	ldr	r3, [pc, #692]	; (8006b3c <cppLoop+0x654>)
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	e02b      	b.n	80068e2 <cppLoop+0x3fa>
			else if(selector == 1){
 800688a:	4bab      	ldr	r3, [pc, #684]	; (8006b38 <cppLoop+0x650>)
 800688c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d113      	bne.n	80068bc <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 8006894:	4baa      	ldr	r3, [pc, #680]	; (8006b40 <cppLoop+0x658>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f7f9 fe6d 	bl	8000578 <__aeabi_f2d>
 800689e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006b20 <cppLoop+0x638>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7f9 fd08 	bl	80002b8 <__aeabi_dsub>
 80068a8:	4603      	mov	r3, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	4618      	mov	r0, r3
 80068ae:	4621      	mov	r1, r4
 80068b0:	f7fa f9b2 	bl	8000c18 <__aeabi_d2f>
 80068b4:	4602      	mov	r2, r0
 80068b6:	4ba2      	ldr	r3, [pc, #648]	; (8006b40 <cppLoop+0x658>)
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e012      	b.n	80068e2 <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 80068bc:	4ba1      	ldr	r3, [pc, #644]	; (8006b44 <cppLoop+0x65c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7f9 fe59 	bl	8000578 <__aeabi_f2d>
 80068c6:	a398      	add	r3, pc, #608	; (adr r3, 8006b28 <cppLoop+0x640>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f7f9 fcf4 	bl	80002b8 <__aeabi_dsub>
 80068d0:	4603      	mov	r3, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	4618      	mov	r0, r3
 80068d6:	4621      	mov	r1, r4
 80068d8:	f7fa f99e 	bl	8000c18 <__aeabi_d2f>
 80068dc:	4602      	mov	r2, r0
 80068de:	4b99      	ldr	r3, [pc, #612]	; (8006b44 <cppLoop+0x65c>)
 80068e0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80068e2:	2152      	movs	r1, #82	; 0x52
 80068e4:	4893      	ldr	r0, [pc, #588]	; (8006b34 <cppLoop+0x64c>)
 80068e6:	f7fb faf9 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80068ea:	2200      	movs	r2, #0
 80068ec:	f04f 31ff 	mov.w	r1, #4294967295
 80068f0:	4890      	ldr	r0, [pc, #576]	; (8006b34 <cppLoop+0x64c>)
 80068f2:	f7fb fbaf 	bl	8002054 <_ZN3LED2LREaa>
		break;
 80068f6:	f000 beff 	b.w	80076f8 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_D){
 80068fa:	488d      	ldr	r0, [pc, #564]	; (8006b30 <cppLoop+0x648>)
 80068fc:	f7fb fa8a 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006900:	4603      	mov	r3, r0
 8006902:	2b04      	cmp	r3, #4
 8006904:	bf0c      	ite	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	2300      	movne	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d03e      	beq.n	800698e <cppLoop+0x4a6>
			led.LR(-1, 1);
 8006910:	2201      	movs	r2, #1
 8006912:	f04f 31ff 	mov.w	r1, #4294967295
 8006916:	4887      	ldr	r0, [pc, #540]	; (8006b34 <cppLoop+0x64c>)
 8006918:	f7fb fb9c 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800691c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006920:	f001 f84c 	bl	80079bc <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8006924:	f107 031c 	add.w	r3, r7, #28
 8006928:	2201      	movs	r2, #1
 800692a:	4987      	ldr	r1, [pc, #540]	; (8006b48 <cppLoop+0x660>)
 800692c:	4887      	ldr	r0, [pc, #540]	; (8006b4c <cppLoop+0x664>)
 800692e:	f7fa fec1 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8006932:	f107 0318 	add.w	r3, r7, #24
 8006936:	2201      	movs	r2, #1
 8006938:	4985      	ldr	r1, [pc, #532]	; (8006b50 <cppLoop+0x668>)
 800693a:	4884      	ldr	r0, [pc, #528]	; (8006b4c <cppLoop+0x664>)
 800693c:	f7fa feba 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006940:	f107 0314 	add.w	r3, r7, #20
 8006944:	2201      	movs	r2, #1
 8006946:	4983      	ldr	r1, [pc, #524]	; (8006b54 <cppLoop+0x66c>)
 8006948:	4880      	ldr	r0, [pc, #512]	; (8006b4c <cppLoop+0x664>)
 800694a:	f7fa feb3 	bl	80016b4 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 800694e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006952:	ed97 7a06 	vldr	s14, [r7, #24]
 8006956:	edd7 6a05 	vldr	s13, [r7, #20]
 800695a:	eeb0 1a66 	vmov.f32	s2, s13
 800695e:	eef0 0a47 	vmov.f32	s1, s14
 8006962:	eeb0 0a67 	vmov.f32	s0, s15
 8006966:	487c      	ldr	r0, [pc, #496]	; (8006b58 <cppLoop+0x670>)
 8006968:	f7fc fa34 	bl	8002dd4 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	4a73      	ldr	r2, [pc, #460]	; (8006b3c <cppLoop+0x654>)
 8006970:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4a72      	ldr	r2, [pc, #456]	; (8006b40 <cppLoop+0x658>)
 8006976:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4a72      	ldr	r2, [pc, #456]	; (8006b44 <cppLoop+0x65c>)
 800697c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800697e:	2200      	movs	r2, #0
 8006980:	f04f 31ff 	mov.w	r1, #4294967295
 8006984:	486b      	ldr	r0, [pc, #428]	; (8006b34 <cppLoop+0x64c>)
 8006986:	f7fb fb65 	bl	8002054 <_ZN3LED2LREaa>
		break;
 800698a:	f000 beb5 	b.w	80076f8 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_C){
 800698e:	4868      	ldr	r0, [pc, #416]	; (8006b30 <cppLoop+0x648>)
 8006990:	f7fb fa40 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006994:	4603      	mov	r3, r0
 8006996:	2b02      	cmp	r3, #2
 8006998:	bf0c      	ite	eq
 800699a:	2301      	moveq	r3, #1
 800699c:	2300      	movne	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 86a9 	beq.w	80076f8 <cppLoop+0x1210>
			led.LR(-1, 1);
 80069a6:	2201      	movs	r2, #1
 80069a8:	f04f 31ff 	mov.w	r1, #4294967295
 80069ac:	4861      	ldr	r0, [pc, #388]	; (8006b34 <cppLoop+0x64c>)
 80069ae:	f7fb fb51 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80069b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80069b6:	f001 f801 	bl	80079bc <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80069ba:	2300      	movs	r3, #0
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	4b5f      	ldr	r3, [pc, #380]	; (8006b3c <cppLoop+0x654>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	4961      	ldr	r1, [pc, #388]	; (8006b48 <cppLoop+0x660>)
 80069c4:	4861      	ldr	r0, [pc, #388]	; (8006b4c <cppLoop+0x664>)
 80069c6:	f7fa fe0f 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80069ca:	2300      	movs	r3, #0
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4b5c      	ldr	r3, [pc, #368]	; (8006b40 <cppLoop+0x658>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	495f      	ldr	r1, [pc, #380]	; (8006b50 <cppLoop+0x668>)
 80069d4:	485d      	ldr	r0, [pc, #372]	; (8006b4c <cppLoop+0x664>)
 80069d6:	f7fa fe07 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80069da:	2300      	movs	r3, #0
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	4b59      	ldr	r3, [pc, #356]	; (8006b44 <cppLoop+0x65c>)
 80069e0:	2201      	movs	r2, #1
 80069e2:	495c      	ldr	r1, [pc, #368]	; (8006b54 <cppLoop+0x66c>)
 80069e4:	4859      	ldr	r0, [pc, #356]	; (8006b4c <cppLoop+0x664>)
 80069e6:	f7fa fdff 	bl	80015e8 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80069ea:	4b54      	ldr	r3, [pc, #336]	; (8006b3c <cppLoop+0x654>)
 80069ec:	edd3 7a00 	vldr	s15, [r3]
 80069f0:	4b53      	ldr	r3, [pc, #332]	; (8006b40 <cppLoop+0x658>)
 80069f2:	ed93 7a00 	vldr	s14, [r3]
 80069f6:	4b53      	ldr	r3, [pc, #332]	; (8006b44 <cppLoop+0x65c>)
 80069f8:	edd3 6a00 	vldr	s13, [r3]
 80069fc:	eeb0 1a66 	vmov.f32	s2, s13
 8006a00:	eef0 0a47 	vmov.f32	s1, s14
 8006a04:	eeb0 0a67 	vmov.f32	s0, s15
 8006a08:	4853      	ldr	r0, [pc, #332]	; (8006b58 <cppLoop+0x670>)
 8006a0a:	f7fc f9e3 	bl	8002dd4 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f04f 31ff 	mov.w	r1, #4294967295
 8006a14:	4847      	ldr	r0, [pc, #284]	; (8006b34 <cppLoop+0x64c>)
 8006a16:	f7fb fb1d 	bl	8002054 <_ZN3LED2LREaa>
		break;
 8006a1a:	f000 be6d 	b.w	80076f8 <cppLoop+0x1210>

	case 1:
		led.fullColor('B');
 8006a1e:	2142      	movs	r1, #66	; 0x42
 8006a20:	4844      	ldr	r0, [pc, #272]	; (8006b34 <cppLoop+0x64c>)
 8006a22:	f7fb fa5b 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006a26:	f7fa fb3b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	f7fa fb47 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006a32:	484a      	ldr	r0, [pc, #296]	; (8006b5c <cppLoop+0x674>)
 8006a34:	f7fa fb6e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006a38:	2101      	movs	r1, #1
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	f7fa fb40 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006a40:	4847      	ldr	r0, [pc, #284]	; (8006b60 <cppLoop+0x678>)
 8006a42:	f7fa fb67 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006a46:	483a      	ldr	r0, [pc, #232]	; (8006b30 <cppLoop+0x648>)
 8006a48:	f7fb f9e4 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	bf0c      	ite	eq
 8006a52:	2301      	moveq	r3, #1
 8006a54:	2300      	movne	r3, #0
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 864f 	beq.w	80076fc <cppLoop+0x1214>
			HAL_Delay(500);
 8006a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a62:	f000 ffab 	bl	80079bc <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006a66:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006a6a:	483b      	ldr	r0, [pc, #236]	; (8006b58 <cppLoop+0x670>)
 8006a6c:	f7fc fa07 	bl	8002e7e <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006a70:	f04f 32ff 	mov.w	r2, #4294967295
 8006a74:	2101      	movs	r1, #1
 8006a76:	482f      	ldr	r0, [pc, #188]	; (8006b34 <cppLoop+0x64c>)
 8006a78:	f7fb faec 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.setMode(1);
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	4836      	ldr	r0, [pc, #216]	; (8006b58 <cppLoop+0x670>)
 8006a80:	f7fc fbba 	bl	80031f8 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8006a84:	4834      	ldr	r0, [pc, #208]	; (8006b58 <cppLoop+0x670>)
 8006a86:	f7fc fabf 	bl	8003008 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4828      	ldr	r0, [pc, #160]	; (8006b34 <cppLoop+0x64c>)
 8006a92:	f7fb fadf 	bl	8002054 <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 8006a96:	f000 be31 	b.w	80076fc <cppLoop+0x1214>

	case 2:
		led.fullColor('G');
 8006a9a:	2147      	movs	r1, #71	; 0x47
 8006a9c:	4825      	ldr	r0, [pc, #148]	; (8006b34 <cppLoop+0x64c>)
 8006a9e:	f7fb fa1d 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006aa2:	f7fa fafd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	f7fa fb09 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006aae:	482b      	ldr	r0, [pc, #172]	; (8006b5c <cppLoop+0x674>)
 8006ab0:	f7fa fb30 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	f7fa fb02 	bl	80010c0 <lcd_locate>
		lcd_printf("update");
 8006abc:	4829      	ldr	r0, [pc, #164]	; (8006b64 <cppLoop+0x67c>)
 8006abe:	f7fa fb29 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006ac2:	481b      	ldr	r0, [pc, #108]	; (8006b30 <cppLoop+0x648>)
 8006ac4:	f7fb f9a6 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	bf0c      	ite	eq
 8006ace:	2301      	moveq	r3, #1
 8006ad0:	2300      	movne	r3, #0
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8613 	beq.w	8007700 <cppLoop+0x1218>
			HAL_Delay(500);
 8006ada:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ade:	f000 ff6d 	bl	80079bc <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006ae2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ae6:	481c      	ldr	r0, [pc, #112]	; (8006b58 <cppLoop+0x670>)
 8006ae8:	f7fc f9c9 	bl	8002e7e <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006aec:	f04f 32ff 	mov.w	r2, #4294967295
 8006af0:	2101      	movs	r1, #1
 8006af2:	4810      	ldr	r0, [pc, #64]	; (8006b34 <cppLoop+0x64c>)
 8006af4:	f7fb faae 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.setMode(2);
 8006af8:	2102      	movs	r1, #2
 8006afa:	4817      	ldr	r0, [pc, #92]	; (8006b58 <cppLoop+0x670>)
 8006afc:	f7fc fb7c 	bl	80031f8 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8006b00:	4815      	ldr	r0, [pc, #84]	; (8006b58 <cppLoop+0x670>)
 8006b02:	f7fc fa81 	bl	8003008 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006b06:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4809      	ldr	r0, [pc, #36]	; (8006b34 <cppLoop+0x64c>)
 8006b0e:	f7fb faa1 	bl	8002054 <_ZN3LED2LREaa>

			//logger.stop();
		}
		break;
 8006b12:	f000 bdf5 	b.w	8007700 <cppLoop+0x1218>
 8006b16:	bf00      	nop
 8006b18:	88e368f1 	.word	0x88e368f1
 8006b1c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006b20:	eb1c432d 	.word	0xeb1c432d
 8006b24:	3f1a36e2 	.word	0x3f1a36e2
 8006b28:	a0b5ed8d 	.word	0xa0b5ed8d
 8006b2c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006b30:	200005ac 	.word	0x200005ac
 8006b34:	200005b8 	.word	0x200005b8
 8006b38:	200335be 	.word	0x200335be
 8006b3c:	200335c0 	.word	0x200335c0
 8006b40:	200335c8 	.word	0x200335c8
 8006b44:	200335d0 	.word	0x200335d0
 8006b48:	08017c30 	.word	0x08017c30
 8006b4c:	08017c38 	.word	0x08017c38
 8006b50:	08017c40 	.word	0x08017c40
 8006b54:	08017c48 	.word	0x08017c48
 8006b58:	20015e40 	.word	0x20015e40
 8006b5c:	08017c50 	.word	0x08017c50
 8006b60:	08017c5c 	.word	0x08017c5c
 8006b64:	08017c64 	.word	0x08017c64

	case 3:
		led.fullColor('M');
 8006b68:	214d      	movs	r1, #77	; 0x4d
 8006b6a:	48af      	ldr	r0, [pc, #700]	; (8006e28 <cppLoop+0x940>)
 8006b6c:	f7fb f9b6 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006b70:	f7fa fa96 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006b74:	2100      	movs	r1, #0
 8006b76:	2000      	movs	r0, #0
 8006b78:	f7fa faa2 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006b7c:	48ab      	ldr	r0, [pc, #684]	; (8006e2c <cppLoop+0x944>)
 8006b7e:	f7fa fac9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006b82:	2101      	movs	r1, #1
 8006b84:	2000      	movs	r0, #0
 8006b86:	f7fa fa9b 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006b8a:	48a9      	ldr	r0, [pc, #676]	; (8006e30 <cppLoop+0x948>)
 8006b8c:	f7fa fac2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006b90:	48a8      	ldr	r0, [pc, #672]	; (8006e34 <cppLoop+0x94c>)
 8006b92:	f7fb f93f 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	bf0c      	ite	eq
 8006b9c:	2301      	moveq	r3, #1
 8006b9e:	2300      	movne	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 85ae 	beq.w	8007704 <cppLoop+0x121c>
			led.LR(-1, 1);
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f04f 31ff 	mov.w	r1, #4294967295
 8006bae:	489e      	ldr	r0, [pc, #632]	; (8006e28 <cppLoop+0x940>)
 8006bb0:	f7fb fa50 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bb8:	f000 ff00 	bl	80079bc <HAL_Delay>

			logger.start();
 8006bbc:	489e      	ldr	r0, [pc, #632]	; (8006e38 <cppLoop+0x950>)
 8006bbe:	f7fc fd66 	bl	800368e <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8006bc2:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006e3c <cppLoop+0x954>
 8006bc6:	489e      	ldr	r0, [pc, #632]	; (8006e40 <cppLoop+0x958>)
 8006bc8:	f7fc f94a 	bl	8002e60 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006bcc:	489c      	ldr	r0, [pc, #624]	; (8006e40 <cppLoop+0x958>)
 8006bce:	f7fc f9cd 	bl	8002f6c <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8006bd2:	f241 3088 	movw	r0, #5000	; 0x1388
 8006bd6:	f000 fef1 	bl	80079bc <HAL_Delay>

			logger.stop();
 8006bda:	4897      	ldr	r0, [pc, #604]	; (8006e38 <cppLoop+0x950>)
 8006bdc:	f7fc fd68 	bl	80036b0 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006be0:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8006e3c <cppLoop+0x954>
 8006be4:	4896      	ldr	r0, [pc, #600]	; (8006e40 <cppLoop+0x958>)
 8006be6:	f7fc f93b 	bl	8002e60 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8006bea:	4895      	ldr	r0, [pc, #596]	; (8006e40 <cppLoop+0x958>)
 8006bec:	f7fc f9d8 	bl	8002fa0 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	488c      	ldr	r0, [pc, #560]	; (8006e28 <cppLoop+0x940>)
 8006bf8:	f7fb fa2c 	bl	8002054 <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 8006bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006c00:	2100      	movs	r1, #0
 8006c02:	4889      	ldr	r0, [pc, #548]	; (8006e28 <cppLoop+0x940>)
 8006c04:	f7fb fa26 	bl	8002054 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c0e:	4886      	ldr	r0, [pc, #536]	; (8006e28 <cppLoop+0x940>)
 8006c10:	f7fb fa20 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8006c14:	f000 bd76 	b.w	8007704 <cppLoop+0x121c>

	case 4:
		led.fullColor('Y');
 8006c18:	2159      	movs	r1, #89	; 0x59
 8006c1a:	4883      	ldr	r0, [pc, #524]	; (8006e28 <cppLoop+0x940>)
 8006c1c:	f7fb f95e 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006c20:	f7fa fa3e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006c24:	2100      	movs	r1, #0
 8006c26:	2000      	movs	r0, #0
 8006c28:	f7fa fa4a 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006c2c:	4885      	ldr	r0, [pc, #532]	; (8006e44 <cppLoop+0x95c>)
 8006c2e:	f7fa fa71 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006c32:	2101      	movs	r1, #1
 8006c34:	2000      	movs	r0, #0
 8006c36:	f7fa fa43 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006c3a:	487d      	ldr	r0, [pc, #500]	; (8006e30 <cppLoop+0x948>)
 8006c3c:	f7fa fa6a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006c40:	487c      	ldr	r0, [pc, #496]	; (8006e34 <cppLoop+0x94c>)
 8006c42:	f7fb f8e7 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	bf0c      	ite	eq
 8006c4c:	2301      	moveq	r3, #1
 8006c4e:	2300      	movne	r3, #0
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 8558 	beq.w	8007708 <cppLoop+0x1220>
			led.LR(-1, 1);
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c5e:	4872      	ldr	r0, [pc, #456]	; (8006e28 <cppLoop+0x940>)
 8006c60:	f7fb f9f8 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006c64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c68:	f000 fea8 	bl	80079bc <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8006c6c:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006e3c <cppLoop+0x954>
 8006c70:	4873      	ldr	r0, [pc, #460]	; (8006e40 <cppLoop+0x958>)
 8006c72:	f7fc f904 	bl	8002e7e <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006c76:	4874      	ldr	r0, [pc, #464]	; (8006e48 <cppLoop+0x960>)
 8006c78:	f7fd fd2b 	bl	80046d2 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006c7c:	4870      	ldr	r0, [pc, #448]	; (8006e40 <cppLoop+0x958>)
 8006c7e:	f7fc f975 	bl	8002f6c <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006c82:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c86:	f000 fe99 	bl	80079bc <HAL_Delay>

			line_trace.stop();
 8006c8a:	486d      	ldr	r0, [pc, #436]	; (8006e40 <cppLoop+0x958>)
 8006c8c:	f7fc f988 	bl	8002fa0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006c90:	486d      	ldr	r0, [pc, #436]	; (8006e48 <cppLoop+0x960>)
 8006c92:	f7fd fd31 	bl	80046f8 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006c96:	2200      	movs	r2, #0
 8006c98:	f04f 31ff 	mov.w	r1, #4294967295
 8006c9c:	4862      	ldr	r0, [pc, #392]	; (8006e28 <cppLoop+0x940>)
 8006c9e:	f7fb f9d9 	bl	8002054 <_ZN3LED2LREaa>
		}
		break;
 8006ca2:	f000 bd31 	b.w	8007708 <cppLoop+0x1220>

	case 5:
		led.fullColor('C');
 8006ca6:	2143      	movs	r1, #67	; 0x43
 8006ca8:	485f      	ldr	r0, [pc, #380]	; (8006e28 <cppLoop+0x940>)
 8006caa:	f7fb f917 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006cae:	f7fa f9f7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f7fa fa03 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006cba:	4864      	ldr	r0, [pc, #400]	; (8006e4c <cppLoop+0x964>)
 8006cbc:	f7fa fa2a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f7fa f9fc 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006cc8:	4861      	ldr	r0, [pc, #388]	; (8006e50 <cppLoop+0x968>)
 8006cca:	f7fa fa23 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006cce:	4859      	ldr	r0, [pc, #356]	; (8006e34 <cppLoop+0x94c>)
 8006cd0:	f7fb f8a0 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	bf0c      	ite	eq
 8006cda:	2301      	moveq	r3, #1
 8006cdc:	2300      	movne	r3, #0
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8513 	beq.w	800770c <cppLoop+0x1224>
			led.LR(-1, 1);
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8006cec:	484e      	ldr	r0, [pc, #312]	; (8006e28 <cppLoop+0x940>)
 8006cee:	f7fb f9b1 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006cf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cf6:	f000 fe61 	bl	80079bc <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006cfa:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8006e54 <cppLoop+0x96c>
 8006cfe:	4850      	ldr	r0, [pc, #320]	; (8006e40 <cppLoop+0x958>)
 8006d00:	f7fc f8ae 	bl	8002e60 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006d04:	484e      	ldr	r0, [pc, #312]	; (8006e40 <cppLoop+0x958>)
 8006d06:	f7fc f931 	bl	8002f6c <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006d0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d0e:	f000 fe55 	bl	80079bc <HAL_Delay>

			led.fullColor('R');
 8006d12:	2152      	movs	r1, #82	; 0x52
 8006d14:	4844      	ldr	r0, [pc, #272]	; (8006e28 <cppLoop+0x940>)
 8006d16:	f7fb f8e1 	bl	8001edc <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006d1a:	484f      	ldr	r0, [pc, #316]	; (8006e58 <cppLoop+0x970>)
 8006d1c:	f7fa fbbc 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006d20:	484d      	ldr	r0, [pc, #308]	; (8006e58 <cppLoop+0x970>)
 8006d22:	f7fa fb89 	bl	8001438 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006d26:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d2a:	f000 fe47 	bl	80079bc <HAL_Delay>

			line_trace.stop();
 8006d2e:	4844      	ldr	r0, [pc, #272]	; (8006e40 <cppLoop+0x958>)
 8006d30:	f7fc f936 	bl	8002fa0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006d34:	4949      	ldr	r1, [pc, #292]	; (8006e5c <cppLoop+0x974>)
 8006d36:	484a      	ldr	r0, [pc, #296]	; (8006e60 <cppLoop+0x978>)
 8006d38:	f7fa fbe1 	bl	80014fe <user_fopen>
			float d = encoder.getDistance();
 8006d3c:	4846      	ldr	r0, [pc, #280]	; (8006e58 <cppLoop+0x970>)
 8006d3e:	f7fa fb5d 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 8006d42:	eef0 7a40 	vmov.f32	s15, s0
 8006d46:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006d4a:	f107 0310 	add.w	r3, r7, #16
 8006d4e:	2201      	movs	r2, #1
 8006d50:	4619      	mov	r1, r3
 8006d52:	2001      	movs	r0, #1
 8006d54:	f7fa fbf6 	bl	8001544 <sd_write_float>
			user_fclose();
 8006d58:	f7fa fbe4 	bl	8001524 <user_fclose>

			led.LR(-1, 0);
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8006d62:	4831      	ldr	r0, [pc, #196]	; (8006e28 <cppLoop+0x940>)
 8006d64:	f7fb f976 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8006d68:	f000 bcd0 	b.w	800770c <cppLoop+0x1224>

	case 6:
		led.fullColor('R');
 8006d6c:	2152      	movs	r1, #82	; 0x52
 8006d6e:	482e      	ldr	r0, [pc, #184]	; (8006e28 <cppLoop+0x940>)
 8006d70:	f7fb f8b4 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d74:	f7fa f994 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d78:	2100      	movs	r1, #0
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	f7fa f9a0 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006d80:	4838      	ldr	r0, [pc, #224]	; (8006e64 <cppLoop+0x97c>)
 8006d82:	f7fa f9c7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d86:	2101      	movs	r1, #1
 8006d88:	2000      	movs	r0, #0
 8006d8a:	f7fa f999 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006d8e:	4836      	ldr	r0, [pc, #216]	; (8006e68 <cppLoop+0x980>)
 8006d90:	f7fa f9c0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006d94:	4827      	ldr	r0, [pc, #156]	; (8006e34 <cppLoop+0x94c>)
 8006d96:	f7fb f83d 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	bf0c      	ite	eq
 8006da0:	2301      	moveq	r3, #1
 8006da2:	2300      	movne	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 84b2 	beq.w	8007710 <cppLoop+0x1228>
			HAL_Delay(500);
 8006dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006db0:	f000 fe04 	bl	80079bc <HAL_Delay>
			led.LR(-1, 1);
 8006db4:	2201      	movs	r2, #1
 8006db6:	f04f 31ff 	mov.w	r1, #4294967295
 8006dba:	481b      	ldr	r0, [pc, #108]	; (8006e28 <cppLoop+0x940>)
 8006dbc:	f7fb f94a 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006dc0:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006e6c <cppLoop+0x984>
 8006dc4:	481e      	ldr	r0, [pc, #120]	; (8006e40 <cppLoop+0x958>)
 8006dc6:	f7fc f84b 	bl	8002e60 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006dca:	481d      	ldr	r0, [pc, #116]	; (8006e40 <cppLoop+0x958>)
 8006dcc:	f7fc f8ce 	bl	8002f6c <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006dd4:	f000 fdf2 	bl	80079bc <HAL_Delay>

			led.fullColor('R');
 8006dd8:	2152      	movs	r1, #82	; 0x52
 8006dda:	4813      	ldr	r0, [pc, #76]	; (8006e28 <cppLoop+0x940>)
 8006ddc:	f7fb f87e 	bl	8001edc <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006de0:	481d      	ldr	r0, [pc, #116]	; (8006e58 <cppLoop+0x970>)
 8006de2:	f7fa fb59 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006de6:	481c      	ldr	r0, [pc, #112]	; (8006e58 <cppLoop+0x970>)
 8006de8:	f7fa fb26 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006dec:	4820      	ldr	r0, [pc, #128]	; (8006e70 <cppLoop+0x988>)
 8006dee:	f7fc feb7 	bl	8003b60 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006df2:	4811      	ldr	r0, [pc, #68]	; (8006e38 <cppLoop+0x950>)
 8006df4:	f7fc fc4b 	bl	800368e <_ZN6Logger5startEv>

			HAL_Delay(3000);
 8006df8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006dfc:	f000 fdde 	bl	80079bc <HAL_Delay>

			line_trace.stop();
 8006e00:	480f      	ldr	r0, [pc, #60]	; (8006e40 <cppLoop+0x958>)
 8006e02:	f7fc f8cd 	bl	8002fa0 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006e06:	480c      	ldr	r0, [pc, #48]	; (8006e38 <cppLoop+0x950>)
 8006e08:	f7fc fc52 	bl	80036b0 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006e0c:	4b19      	ldr	r3, [pc, #100]	; (8006e74 <cppLoop+0x98c>)
 8006e0e:	4a1a      	ldr	r2, [pc, #104]	; (8006e78 <cppLoop+0x990>)
 8006e10:	491a      	ldr	r1, [pc, #104]	; (8006e7c <cppLoop+0x994>)
 8006e12:	4809      	ldr	r0, [pc, #36]	; (8006e38 <cppLoop+0x950>)
 8006e14:	f7fc fb7e 	bl	8003514 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8006e1e:	4802      	ldr	r0, [pc, #8]	; (8006e28 <cppLoop+0x940>)
 8006e20:	f7fb f918 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8006e24:	f000 bc74 	b.w	8007710 <cppLoop+0x1228>
 8006e28:	200005b8 	.word	0x200005b8
 8006e2c:	08017c6c 	.word	0x08017c6c
 8006e30:	08017c74 	.word	0x08017c74
 8006e34:	200005ac 	.word	0x200005ac
 8006e38:	200005dc 	.word	0x200005dc
 8006e3c:	3dcccccd 	.word	0x3dcccccd
 8006e40:	20015e40 	.word	0x20015e40
 8006e44:	08017c7c 	.word	0x08017c7c
 8006e48:	20015dc0 	.word	0x20015dc0
 8006e4c:	08017c88 	.word	0x08017c88
 8006e50:	08017c90 	.word	0x08017c90
 8006e54:	00000000 	.word	0x00000000
 8006e58:	20015da4 	.word	0x20015da4
 8006e5c:	08017c9c 	.word	0x08017c9c
 8006e60:	08017ca4 	.word	0x08017ca4
 8006e64:	08017cb0 	.word	0x08017cb0
 8006e68:	08017cbc 	.word	0x08017cbc
 8006e6c:	3d8f5c29 	.word	0x3d8f5c29
 8006e70:	20015e00 	.word	0x20015e00
 8006e74:	08017cc4 	.word	0x08017cc4
 8006e78:	08017cd0 	.word	0x08017cd0
 8006e7c:	08017cdc 	.word	0x08017cdc

	case 7:
		led.fullColor('G');
 8006e80:	2147      	movs	r1, #71	; 0x47
 8006e82:	48b3      	ldr	r0, [pc, #716]	; (8007150 <cppLoop+0xc68>)
 8006e84:	f7fb f82a 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006e88:	f7fa f90a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	2000      	movs	r0, #0
 8006e90:	f7fa f916 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006e94:	48af      	ldr	r0, [pc, #700]	; (8007154 <cppLoop+0xc6c>)
 8006e96:	f7fa f93d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	f7fa f90f 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006ea2:	48ad      	ldr	r0, [pc, #692]	; (8007158 <cppLoop+0xc70>)
 8006ea4:	f7fa f936 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006ea8:	48ac      	ldr	r0, [pc, #688]	; (800715c <cppLoop+0xc74>)
 8006eaa:	f7fa ffb3 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 842a 	beq.w	8007714 <cppLoop+0x122c>
			led.LR(-1, 1);
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ec6:	48a2      	ldr	r0, [pc, #648]	; (8007150 <cppLoop+0xc68>)
 8006ec8:	f7fb f8c4 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006ecc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ed0:	f000 fd74 	bl	80079bc <HAL_Delay>

			led.fullColor('R');
 8006ed4:	2152      	movs	r1, #82	; 0x52
 8006ed6:	489e      	ldr	r0, [pc, #632]	; (8007150 <cppLoop+0xc68>)
 8006ed8:	f7fb f800 	bl	8001edc <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006edc:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8007160 <cppLoop+0xc78>
 8006ee0:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8007164 <cppLoop+0xc7c>
 8006ee4:	48a0      	ldr	r0, [pc, #640]	; (8007168 <cppLoop+0xc80>)
 8006ee6:	f7fd fb87 	bl	80045f8 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 8006eea:	489f      	ldr	r0, [pc, #636]	; (8007168 <cppLoop+0xc80>)
 8006eec:	f7fd fbf1 	bl	80046d2 <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ef4:	f000 fd62 	bl	80079bc <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006ef8:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8007164 <cppLoop+0xc7c>
 8006efc:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8007164 <cppLoop+0xc7c>
 8006f00:	4899      	ldr	r0, [pc, #612]	; (8007168 <cppLoop+0xc80>)
 8006f02:	f7fd fb79 	bl	80045f8 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006f06:	2064      	movs	r0, #100	; 0x64
 8006f08:	f000 fd58 	bl	80079bc <HAL_Delay>
			velocity_ctrl.stop();
 8006f0c:	4896      	ldr	r0, [pc, #600]	; (8007168 <cppLoop+0xc80>)
 8006f0e:	f7fd fbf3 	bl	80046f8 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006f12:	2200      	movs	r2, #0
 8006f14:	f04f 31ff 	mov.w	r1, #4294967295
 8006f18:	488d      	ldr	r0, [pc, #564]	; (8007150 <cppLoop+0xc68>)
 8006f1a:	f7fb f89b 	bl	8002054 <_ZN3LED2LREaa>
		}
		break;
 8006f1e:	e3f9      	b.n	8007714 <cppLoop+0x122c>

	case 8:
		led.fullColor('B');
 8006f20:	2142      	movs	r1, #66	; 0x42
 8006f22:	488b      	ldr	r0, [pc, #556]	; (8007150 <cppLoop+0xc68>)
 8006f24:	f7fa ffda 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006f28:	f7fa f8ba 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	2000      	movs	r0, #0
 8006f30:	f7fa f8c6 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006f34:	488d      	ldr	r0, [pc, #564]	; (800716c <cppLoop+0xc84>)
 8006f36:	f7fc ff09 	bl	8003d4c <_ZN13PathFollowing8getKxValEv>
 8006f3a:	ec51 0b10 	vmov	r0, r1, d0
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	4b8b      	ldr	r3, [pc, #556]	; (8007170 <cppLoop+0xc88>)
 8006f44:	f7f9 fb70 	bl	8000628 <__aeabi_dmul>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4623      	mov	r3, r4
 8006f50:	4888      	ldr	r0, [pc, #544]	; (8007174 <cppLoop+0xc8c>)
 8006f52:	f7fa f8df 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006f56:	2101      	movs	r1, #1
 8006f58:	2000      	movs	r0, #0
 8006f5a:	f7fa f8b1 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006f5e:	4883      	ldr	r0, [pc, #524]	; (800716c <cppLoop+0xc84>)
 8006f60:	f7fc ff08 	bl	8003d74 <_ZN13PathFollowing8getKyValEv>
 8006f64:	ec51 0b10 	vmov	r0, r1, d0
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	4b80      	ldr	r3, [pc, #512]	; (8007170 <cppLoop+0xc88>)
 8006f6e:	f7f9 fb5b 	bl	8000628 <__aeabi_dmul>
 8006f72:	4603      	mov	r3, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	461d      	mov	r5, r3
 8006f78:	4626      	mov	r6, r4
 8006f7a:	487c      	ldr	r0, [pc, #496]	; (800716c <cppLoop+0xc84>)
 8006f7c:	f7fc ff0e 	bl	8003d9c <_ZN13PathFollowing8getKtValEv>
 8006f80:	ec51 0b10 	vmov	r0, r1, d0
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	4b79      	ldr	r3, [pc, #484]	; (8007170 <cppLoop+0xc88>)
 8006f8a:	f7f9 fb4d 	bl	8000628 <__aeabi_dmul>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	460c      	mov	r4, r1
 8006f92:	e9cd 3400 	strd	r3, r4, [sp]
 8006f96:	462a      	mov	r2, r5
 8006f98:	4633      	mov	r3, r6
 8006f9a:	4877      	ldr	r0, [pc, #476]	; (8007178 <cppLoop+0xc90>)
 8006f9c:	f7fa f8ba 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006fa0:	4b76      	ldr	r3, [pc, #472]	; (800717c <cppLoop+0xc94>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f3bf 8f5b 	dmb	ish
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bf0c      	ite	eq
 8006fb2:	2301      	moveq	r3, #1
 8006fb4:	2300      	movne	r3, #0
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d019      	beq.n	8006ff0 <cppLoop+0xb08>
 8006fbc:	486f      	ldr	r0, [pc, #444]	; (800717c <cppLoop+0xc94>)
 8006fbe:	f00b f9fa 	bl	80123b6 <__cxa_guard_acquire>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00e      	beq.n	8006ff0 <cppLoop+0xb08>
 8006fd2:	4866      	ldr	r0, [pc, #408]	; (800716c <cppLoop+0xc84>)
 8006fd4:	f7fc feba 	bl	8003d4c <_ZN13PathFollowing8getKxValEv>
 8006fd8:	ec54 3b10 	vmov	r3, r4, d0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	4621      	mov	r1, r4
 8006fe0:	f7f9 fe1a 	bl	8000c18 <__aeabi_d2f>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	4b66      	ldr	r3, [pc, #408]	; (8007180 <cppLoop+0xc98>)
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	4864      	ldr	r0, [pc, #400]	; (800717c <cppLoop+0xc94>)
 8006fec:	f00b f9ef 	bl	80123ce <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 8006ff0:	4b64      	ldr	r3, [pc, #400]	; (8007184 <cppLoop+0xc9c>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	f3bf 8f5b 	dmb	ish
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf0c      	ite	eq
 8007002:	2301      	moveq	r3, #1
 8007004:	2300      	movne	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d019      	beq.n	8007040 <cppLoop+0xb58>
 800700c:	485d      	ldr	r0, [pc, #372]	; (8007184 <cppLoop+0xc9c>)
 800700e:	f00b f9d2 	bl	80123b6 <__cxa_guard_acquire>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	bf14      	ite	ne
 8007018:	2301      	movne	r3, #1
 800701a:	2300      	moveq	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00e      	beq.n	8007040 <cppLoop+0xb58>
 8007022:	4852      	ldr	r0, [pc, #328]	; (800716c <cppLoop+0xc84>)
 8007024:	f7fc fea6 	bl	8003d74 <_ZN13PathFollowing8getKyValEv>
 8007028:	ec54 3b10 	vmov	r3, r4, d0
 800702c:	4618      	mov	r0, r3
 800702e:	4621      	mov	r1, r4
 8007030:	f7f9 fdf2 	bl	8000c18 <__aeabi_d2f>
 8007034:	4602      	mov	r2, r0
 8007036:	4b54      	ldr	r3, [pc, #336]	; (8007188 <cppLoop+0xca0>)
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	4852      	ldr	r0, [pc, #328]	; (8007184 <cppLoop+0xc9c>)
 800703c:	f00b f9c7 	bl	80123ce <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8007040:	4b52      	ldr	r3, [pc, #328]	; (800718c <cppLoop+0xca4>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	f3bf 8f5b 	dmb	ish
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	bf0c      	ite	eq
 8007052:	2301      	moveq	r3, #1
 8007054:	2300      	movne	r3, #0
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d019      	beq.n	8007090 <cppLoop+0xba8>
 800705c:	484b      	ldr	r0, [pc, #300]	; (800718c <cppLoop+0xca4>)
 800705e:	f00b f9aa 	bl	80123b6 <__cxa_guard_acquire>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	bf14      	ite	ne
 8007068:	2301      	movne	r3, #1
 800706a:	2300      	moveq	r3, #0
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00e      	beq.n	8007090 <cppLoop+0xba8>
 8007072:	483e      	ldr	r0, [pc, #248]	; (800716c <cppLoop+0xc84>)
 8007074:	f7fc fe92 	bl	8003d9c <_ZN13PathFollowing8getKtValEv>
 8007078:	ec54 3b10 	vmov	r3, r4, d0
 800707c:	4618      	mov	r0, r3
 800707e:	4621      	mov	r1, r4
 8007080:	f7f9 fdca 	bl	8000c18 <__aeabi_d2f>
 8007084:	4602      	mov	r2, r0
 8007086:	4b42      	ldr	r3, [pc, #264]	; (8007190 <cppLoop+0xca8>)
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	4840      	ldr	r0, [pc, #256]	; (800718c <cppLoop+0xca4>)
 800708c:	f00b f99f 	bl	80123ce <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8007090:	4832      	ldr	r0, [pc, #200]	; (800715c <cppLoop+0xc74>)
 8007092:	f7fa febf 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007096:	4603      	mov	r3, r0
 8007098:	2b08      	cmp	r3, #8
 800709a:	bf0c      	ite	eq
 800709c:	2301      	moveq	r3, #1
 800709e:	2300      	movne	r3, #0
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d021      	beq.n	80070ea <cppLoop+0xc02>
			led.LR(-1, 1);
 80070a6:	2201      	movs	r2, #1
 80070a8:	f04f 31ff 	mov.w	r1, #4294967295
 80070ac:	4828      	ldr	r0, [pc, #160]	; (8007150 <cppLoop+0xc68>)
 80070ae:	f7fa ffd1 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80070b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80070b6:	f000 fc81 	bl	80079bc <HAL_Delay>

			selector++;
 80070ba:	4b36      	ldr	r3, [pc, #216]	; (8007194 <cppLoop+0xcac>)
 80070bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3301      	adds	r3, #1
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	b21a      	sxth	r2, r3
 80070c8:	4b32      	ldr	r3, [pc, #200]	; (8007194 <cppLoop+0xcac>)
 80070ca:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80070cc:	4b31      	ldr	r3, [pc, #196]	; (8007194 <cppLoop+0xcac>)
 80070ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	dd02      	ble.n	80070dc <cppLoop+0xbf4>
 80070d6:	4b2f      	ldr	r3, [pc, #188]	; (8007194 <cppLoop+0xcac>)
 80070d8:	2200      	movs	r2, #0
 80070da:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80070dc:	2200      	movs	r2, #0
 80070de:	f04f 31ff 	mov.w	r1, #4294967295
 80070e2:	481b      	ldr	r0, [pc, #108]	; (8007150 <cppLoop+0xc68>)
 80070e4:	f7fa ffb6 	bl	8002054 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 80070e8:	e316      	b.n	8007718 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_R){
 80070ea:	481c      	ldr	r0, [pc, #112]	; (800715c <cppLoop+0xc74>)
 80070ec:	f7fa fe92 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b10      	cmp	r3, #16
 80070f4:	bf0c      	ite	eq
 80070f6:	2301      	moveq	r3, #1
 80070f8:	2300      	movne	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8082 	beq.w	8007206 <cppLoop+0xd1e>
			led.LR(-1, 1);
 8007102:	2201      	movs	r2, #1
 8007104:	f04f 31ff 	mov.w	r1, #4294967295
 8007108:	4811      	ldr	r0, [pc, #68]	; (8007150 <cppLoop+0xc68>)
 800710a:	f7fa ffa3 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800710e:	2064      	movs	r0, #100	; 0x64
 8007110:	f000 fc54 	bl	80079bc <HAL_Delay>
			if(selector == 0){
 8007114:	4b1f      	ldr	r3, [pc, #124]	; (8007194 <cppLoop+0xcac>)
 8007116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d13c      	bne.n	8007198 <cppLoop+0xcb0>
				adj_kx = adj_kx + 0.00001;
 800711e:	4b18      	ldr	r3, [pc, #96]	; (8007180 <cppLoop+0xc98>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f7f9 fa28 	bl	8000578 <__aeabi_f2d>
 8007128:	a307      	add	r3, pc, #28	; (adr r3, 8007148 <cppLoop+0xc60>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 f8c5 	bl	80002bc <__adddf3>
 8007132:	4603      	mov	r3, r0
 8007134:	460c      	mov	r4, r1
 8007136:	4618      	mov	r0, r3
 8007138:	4621      	mov	r1, r4
 800713a:	f7f9 fd6d 	bl	8000c18 <__aeabi_d2f>
 800713e:	4602      	mov	r2, r0
 8007140:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <cppLoop+0xc98>)
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	e054      	b.n	80071f0 <cppLoop+0xd08>
 8007146:	bf00      	nop
 8007148:	88e368f1 	.word	0x88e368f1
 800714c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007150:	200005b8 	.word	0x200005b8
 8007154:	08017ce0 	.word	0x08017ce0
 8007158:	08017cec 	.word	0x08017cec
 800715c:	200005ac 	.word	0x200005ac
 8007160:	3fc8f5c3 	.word	0x3fc8f5c3
 8007164:	00000000 	.word	0x00000000
 8007168:	20015dc0 	.word	0x20015dc0
 800716c:	2001be90 	.word	0x2001be90
 8007170:	408f4000 	.word	0x408f4000
 8007174:	08017c14 	.word	0x08017c14
 8007178:	08017c20 	.word	0x08017c20
 800717c:	200335dc 	.word	0x200335dc
 8007180:	200335d8 	.word	0x200335d8
 8007184:	200335e4 	.word	0x200335e4
 8007188:	200335e0 	.word	0x200335e0
 800718c:	200335ec 	.word	0x200335ec
 8007190:	200335e8 	.word	0x200335e8
 8007194:	200335be 	.word	0x200335be
			else if(selector == 1){
 8007198:	4ba3      	ldr	r3, [pc, #652]	; (8007428 <cppLoop+0xf40>)
 800719a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d113      	bne.n	80071ca <cppLoop+0xce2>
				adj_ky = adj_ky + 0.00001;
 80071a2:	4ba2      	ldr	r3, [pc, #648]	; (800742c <cppLoop+0xf44>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7f9 f9e6 	bl	8000578 <__aeabi_f2d>
 80071ac:	a39c      	add	r3, pc, #624	; (adr r3, 8007420 <cppLoop+0xf38>)
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f7f9 f883 	bl	80002bc <__adddf3>
 80071b6:	4603      	mov	r3, r0
 80071b8:	460c      	mov	r4, r1
 80071ba:	4618      	mov	r0, r3
 80071bc:	4621      	mov	r1, r4
 80071be:	f7f9 fd2b 	bl	8000c18 <__aeabi_d2f>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4b99      	ldr	r3, [pc, #612]	; (800742c <cppLoop+0xf44>)
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	e012      	b.n	80071f0 <cppLoop+0xd08>
				adj_kt = adj_kt + 0.00001;
 80071ca:	4b99      	ldr	r3, [pc, #612]	; (8007430 <cppLoop+0xf48>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7f9 f9d2 	bl	8000578 <__aeabi_f2d>
 80071d4:	a392      	add	r3, pc, #584	; (adr r3, 8007420 <cppLoop+0xf38>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f7f9 f86f 	bl	80002bc <__adddf3>
 80071de:	4603      	mov	r3, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	4618      	mov	r0, r3
 80071e4:	4621      	mov	r1, r4
 80071e6:	f7f9 fd17 	bl	8000c18 <__aeabi_d2f>
 80071ea:	4602      	mov	r2, r0
 80071ec:	4b90      	ldr	r3, [pc, #576]	; (8007430 <cppLoop+0xf48>)
 80071ee:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80071f0:	2152      	movs	r1, #82	; 0x52
 80071f2:	4890      	ldr	r0, [pc, #576]	; (8007434 <cppLoop+0xf4c>)
 80071f4:	f7fa fe72 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80071f8:	2200      	movs	r2, #0
 80071fa:	f04f 31ff 	mov.w	r1, #4294967295
 80071fe:	488d      	ldr	r0, [pc, #564]	; (8007434 <cppLoop+0xf4c>)
 8007200:	f7fa ff28 	bl	8002054 <_ZN3LED2LREaa>
		break;
 8007204:	e288      	b.n	8007718 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_L){
 8007206:	488c      	ldr	r0, [pc, #560]	; (8007438 <cppLoop+0xf50>)
 8007208:	f7fa fe04 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 800720c:	4603      	mov	r3, r0
 800720e:	2b01      	cmp	r3, #1
 8007210:	bf0c      	ite	eq
 8007212:	2301      	moveq	r3, #1
 8007214:	2300      	movne	r3, #0
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d058      	beq.n	80072ce <cppLoop+0xde6>
			led.LR(-1, 1);
 800721c:	2201      	movs	r2, #1
 800721e:	f04f 31ff 	mov.w	r1, #4294967295
 8007222:	4884      	ldr	r0, [pc, #528]	; (8007434 <cppLoop+0xf4c>)
 8007224:	f7fa ff16 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007228:	2064      	movs	r0, #100	; 0x64
 800722a:	f000 fbc7 	bl	80079bc <HAL_Delay>
			if(selector == 0){
 800722e:	4b7e      	ldr	r3, [pc, #504]	; (8007428 <cppLoop+0xf40>)
 8007230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d113      	bne.n	8007260 <cppLoop+0xd78>
				adj_kx = adj_kx - 0.00001;
 8007238:	4b80      	ldr	r3, [pc, #512]	; (800743c <cppLoop+0xf54>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f7f9 f99b 	bl	8000578 <__aeabi_f2d>
 8007242:	a377      	add	r3, pc, #476	; (adr r3, 8007420 <cppLoop+0xf38>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f9 f836 	bl	80002b8 <__aeabi_dsub>
 800724c:	4603      	mov	r3, r0
 800724e:	460c      	mov	r4, r1
 8007250:	4618      	mov	r0, r3
 8007252:	4621      	mov	r1, r4
 8007254:	f7f9 fce0 	bl	8000c18 <__aeabi_d2f>
 8007258:	4602      	mov	r2, r0
 800725a:	4b78      	ldr	r3, [pc, #480]	; (800743c <cppLoop+0xf54>)
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e02b      	b.n	80072b8 <cppLoop+0xdd0>
			else if(selector == 1){
 8007260:	4b71      	ldr	r3, [pc, #452]	; (8007428 <cppLoop+0xf40>)
 8007262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d113      	bne.n	8007292 <cppLoop+0xdaa>
				adj_ky = adj_ky - 0.00001;
 800726a:	4b70      	ldr	r3, [pc, #448]	; (800742c <cppLoop+0xf44>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f7f9 f982 	bl	8000578 <__aeabi_f2d>
 8007274:	a36a      	add	r3, pc, #424	; (adr r3, 8007420 <cppLoop+0xf38>)
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	f7f9 f81d 	bl	80002b8 <__aeabi_dsub>
 800727e:	4603      	mov	r3, r0
 8007280:	460c      	mov	r4, r1
 8007282:	4618      	mov	r0, r3
 8007284:	4621      	mov	r1, r4
 8007286:	f7f9 fcc7 	bl	8000c18 <__aeabi_d2f>
 800728a:	4602      	mov	r2, r0
 800728c:	4b67      	ldr	r3, [pc, #412]	; (800742c <cppLoop+0xf44>)
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	e012      	b.n	80072b8 <cppLoop+0xdd0>
				adj_kt = adj_kt - 0.00001;
 8007292:	4b67      	ldr	r3, [pc, #412]	; (8007430 <cppLoop+0xf48>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f7f9 f96e 	bl	8000578 <__aeabi_f2d>
 800729c:	a360      	add	r3, pc, #384	; (adr r3, 8007420 <cppLoop+0xf38>)
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f7f9 f809 	bl	80002b8 <__aeabi_dsub>
 80072a6:	4603      	mov	r3, r0
 80072a8:	460c      	mov	r4, r1
 80072aa:	4618      	mov	r0, r3
 80072ac:	4621      	mov	r1, r4
 80072ae:	f7f9 fcb3 	bl	8000c18 <__aeabi_d2f>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b5e      	ldr	r3, [pc, #376]	; (8007430 <cppLoop+0xf48>)
 80072b6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80072b8:	2152      	movs	r1, #82	; 0x52
 80072ba:	485e      	ldr	r0, [pc, #376]	; (8007434 <cppLoop+0xf4c>)
 80072bc:	f7fa fe0e 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80072c0:	2200      	movs	r2, #0
 80072c2:	f04f 31ff 	mov.w	r1, #4294967295
 80072c6:	485b      	ldr	r0, [pc, #364]	; (8007434 <cppLoop+0xf4c>)
 80072c8:	f7fa fec4 	bl	8002054 <_ZN3LED2LREaa>
		break;
 80072cc:	e224      	b.n	8007718 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_D){
 80072ce:	485a      	ldr	r0, [pc, #360]	; (8007438 <cppLoop+0xf50>)
 80072d0:	f7fa fda0 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	bf0c      	ite	eq
 80072da:	2301      	moveq	r3, #1
 80072dc:	2300      	movne	r3, #0
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d048      	beq.n	8007376 <cppLoop+0xe8e>
			led.LR(-1, 1);
 80072e4:	2201      	movs	r2, #1
 80072e6:	f04f 31ff 	mov.w	r1, #4294967295
 80072ea:	4852      	ldr	r0, [pc, #328]	; (8007434 <cppLoop+0xf4c>)
 80072ec:	f7fa feb2 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80072f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80072f4:	f000 fb62 	bl	80079bc <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 80072f8:	f107 030c 	add.w	r3, r7, #12
 80072fc:	2201      	movs	r2, #1
 80072fe:	4950      	ldr	r1, [pc, #320]	; (8007440 <cppLoop+0xf58>)
 8007300:	4850      	ldr	r0, [pc, #320]	; (8007444 <cppLoop+0xf5c>)
 8007302:	f7fa f9d7 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 8007306:	f107 0308 	add.w	r3, r7, #8
 800730a:	2201      	movs	r2, #1
 800730c:	494e      	ldr	r1, [pc, #312]	; (8007448 <cppLoop+0xf60>)
 800730e:	484d      	ldr	r0, [pc, #308]	; (8007444 <cppLoop+0xf5c>)
 8007310:	f7fa f9d0 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	2201      	movs	r2, #1
 8007318:	494c      	ldr	r1, [pc, #304]	; (800744c <cppLoop+0xf64>)
 800731a:	484a      	ldr	r0, [pc, #296]	; (8007444 <cppLoop+0xf5c>)
 800731c:	f7fa f9ca 	bl	80016b4 <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4618      	mov	r0, r3
 8007324:	f7f9 f928 	bl	8000578 <__aeabi_f2d>
 8007328:	4604      	mov	r4, r0
 800732a:	460d      	mov	r5, r1
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4618      	mov	r0, r3
 8007330:	f7f9 f922 	bl	8000578 <__aeabi_f2d>
 8007334:	4680      	mov	r8, r0
 8007336:	4689      	mov	r9, r1
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4618      	mov	r0, r3
 800733c:	f7f9 f91c 	bl	8000578 <__aeabi_f2d>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	ec43 2b12 	vmov	d2, r2, r3
 8007348:	ec49 8b11 	vmov	d1, r8, r9
 800734c:	ec45 4b10 	vmov	d0, r4, r5
 8007350:	483f      	ldr	r0, [pc, #252]	; (8007450 <cppLoop+0xf68>)
 8007352:	f7fc fcdb 	bl	8003d0c <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4a38      	ldr	r2, [pc, #224]	; (800743c <cppLoop+0xf54>)
 800735a:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4a33      	ldr	r2, [pc, #204]	; (800742c <cppLoop+0xf44>)
 8007360:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a32      	ldr	r2, [pc, #200]	; (8007430 <cppLoop+0xf48>)
 8007366:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8007368:	2200      	movs	r2, #0
 800736a:	f04f 31ff 	mov.w	r1, #4294967295
 800736e:	4831      	ldr	r0, [pc, #196]	; (8007434 <cppLoop+0xf4c>)
 8007370:	f7fa fe70 	bl	8002054 <_ZN3LED2LREaa>
		break;
 8007374:	e1d0      	b.n	8007718 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_C){
 8007376:	4830      	ldr	r0, [pc, #192]	; (8007438 <cppLoop+0xf50>)
 8007378:	f7fa fd4c 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 800737c:	4603      	mov	r3, r0
 800737e:	2b02      	cmp	r3, #2
 8007380:	bf0c      	ite	eq
 8007382:	2301      	moveq	r3, #1
 8007384:	2300      	movne	r3, #0
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 81c5 	beq.w	8007718 <cppLoop+0x1230>
			led.LR(-1, 1);
 800738e:	2201      	movs	r2, #1
 8007390:	f04f 31ff 	mov.w	r1, #4294967295
 8007394:	4827      	ldr	r0, [pc, #156]	; (8007434 <cppLoop+0xf4c>)
 8007396:	f7fa fe5d 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800739a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800739e:	f000 fb0d 	bl	80079bc <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 80073a2:	2300      	movs	r3, #0
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	4b25      	ldr	r3, [pc, #148]	; (800743c <cppLoop+0xf54>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	4925      	ldr	r1, [pc, #148]	; (8007440 <cppLoop+0xf58>)
 80073ac:	4825      	ldr	r0, [pc, #148]	; (8007444 <cppLoop+0xf5c>)
 80073ae:	f7fa f91b 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 80073b2:	2300      	movs	r3, #0
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4b1d      	ldr	r3, [pc, #116]	; (800742c <cppLoop+0xf44>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	4923      	ldr	r1, [pc, #140]	; (8007448 <cppLoop+0xf60>)
 80073bc:	4821      	ldr	r0, [pc, #132]	; (8007444 <cppLoop+0xf5c>)
 80073be:	f7fa f913 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 80073c2:	2300      	movs	r3, #0
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <cppLoop+0xf48>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	4920      	ldr	r1, [pc, #128]	; (800744c <cppLoop+0xf64>)
 80073cc:	481d      	ldr	r0, [pc, #116]	; (8007444 <cppLoop+0xf5c>)
 80073ce:	f7fa f90b 	bl	80015e8 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 80073d2:	4b1a      	ldr	r3, [pc, #104]	; (800743c <cppLoop+0xf54>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7f9 f8ce 	bl	8000578 <__aeabi_f2d>
 80073dc:	4604      	mov	r4, r0
 80073de:	460d      	mov	r5, r1
 80073e0:	4b12      	ldr	r3, [pc, #72]	; (800742c <cppLoop+0xf44>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7f9 f8c7 	bl	8000578 <__aeabi_f2d>
 80073ea:	4680      	mov	r8, r0
 80073ec:	4689      	mov	r9, r1
 80073ee:	4b10      	ldr	r3, [pc, #64]	; (8007430 <cppLoop+0xf48>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7f9 f8c0 	bl	8000578 <__aeabi_f2d>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	ec43 2b12 	vmov	d2, r2, r3
 8007400:	ec49 8b11 	vmov	d1, r8, r9
 8007404:	ec45 4b10 	vmov	d0, r4, r5
 8007408:	4811      	ldr	r0, [pc, #68]	; (8007450 <cppLoop+0xf68>)
 800740a:	f7fc fc7f 	bl	8003d0c <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 800740e:	2200      	movs	r2, #0
 8007410:	f04f 31ff 	mov.w	r1, #4294967295
 8007414:	4807      	ldr	r0, [pc, #28]	; (8007434 <cppLoop+0xf4c>)
 8007416:	f7fa fe1d 	bl	8002054 <_ZN3LED2LREaa>
		break;
 800741a:	e17d      	b.n	8007718 <cppLoop+0x1230>
 800741c:	f3af 8000 	nop.w
 8007420:	88e368f1 	.word	0x88e368f1
 8007424:	3ee4f8b5 	.word	0x3ee4f8b5
 8007428:	200335be 	.word	0x200335be
 800742c:	200335e0 	.word	0x200335e0
 8007430:	200335e8 	.word	0x200335e8
 8007434:	200005b8 	.word	0x200005b8
 8007438:	200005ac 	.word	0x200005ac
 800743c:	200335d8 	.word	0x200335d8
 8007440:	08017cf4 	.word	0x08017cf4
 8007444:	08017c38 	.word	0x08017c38
 8007448:	08017cfc 	.word	0x08017cfc
 800744c:	08017d04 	.word	0x08017d04
 8007450:	2001be90 	.word	0x2001be90

	case 9:
		led.fullColor('M');
 8007454:	214d      	movs	r1, #77	; 0x4d
 8007456:	48c0      	ldr	r0, [pc, #768]	; (8007758 <cppLoop+0x1270>)
 8007458:	f7fa fd40 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 800745c:	f7f9 fe20 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007460:	2100      	movs	r1, #0
 8007462:	2000      	movs	r0, #0
 8007464:	f7f9 fe2c 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8007468:	48bc      	ldr	r0, [pc, #752]	; (800775c <cppLoop+0x1274>)
 800746a:	f7f9 fe53 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800746e:	2101      	movs	r1, #1
 8007470:	2000      	movs	r0, #0
 8007472:	f7f9 fe25 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8007476:	48ba      	ldr	r0, [pc, #744]	; (8007760 <cppLoop+0x1278>)
 8007478:	f7f9 fe4c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800747c:	48b9      	ldr	r0, [pc, #740]	; (8007764 <cppLoop+0x127c>)
 800747e:	f7fa fcc9 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007482:	4603      	mov	r3, r0
 8007484:	2b02      	cmp	r3, #2
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8144 	beq.w	800771c <cppLoop+0x1234>
			HAL_Delay(1500);
 8007494:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007498:	f000 fa90 	bl	80079bc <HAL_Delay>
			led.LR(-1, 1);
 800749c:	2201      	movs	r2, #1
 800749e:	f04f 31ff 	mov.w	r1, #4294967295
 80074a2:	48ad      	ldr	r0, [pc, #692]	; (8007758 <cppLoop+0x1270>)
 80074a4:	f7fa fdd6 	bl	8002054 <_ZN3LED2LREaa>

			logger.start();
 80074a8:	48af      	ldr	r0, [pc, #700]	; (8007768 <cppLoop+0x1280>)
 80074aa:	f7fc f8f0 	bl	800368e <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 80074ae:	ed9f 1ba4 	vldr	d1, [pc, #656]	; 8007740 <cppLoop+0x1258>
 80074b2:	ed9f 0ba5 	vldr	d0, [pc, #660]	; 8007748 <cppLoop+0x1260>
 80074b6:	48ad      	ldr	r0, [pc, #692]	; (800776c <cppLoop+0x1284>)
 80074b8:	f7fc f97e 	bl	80037b8 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 80074bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074c0:	f000 fa7c 	bl	80079bc <HAL_Delay>

			logger.stop();
 80074c4:	48a8      	ldr	r0, [pc, #672]	; (8007768 <cppLoop+0x1280>)
 80074c6:	f7fc f8f3 	bl	80036b0 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 80074ca:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 8007750 <cppLoop+0x1268>
 80074ce:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8007750 <cppLoop+0x1268>
 80074d2:	48a6      	ldr	r0, [pc, #664]	; (800776c <cppLoop+0x1284>)
 80074d4:	f7fc f970 	bl	80037b8 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 80074d8:	4aa5      	ldr	r2, [pc, #660]	; (8007770 <cppLoop+0x1288>)
 80074da:	49a6      	ldr	r1, [pc, #664]	; (8007774 <cppLoop+0x128c>)
 80074dc:	48a2      	ldr	r0, [pc, #648]	; (8007768 <cppLoop+0x1280>)
 80074de:	f7fb ffef 	bl	80034c0 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80074e2:	2200      	movs	r2, #0
 80074e4:	f04f 31ff 	mov.w	r1, #4294967295
 80074e8:	489b      	ldr	r0, [pc, #620]	; (8007758 <cppLoop+0x1270>)
 80074ea:	f7fa fdb3 	bl	8002054 <_ZN3LED2LREaa>
		}
		break;
 80074ee:	e115      	b.n	800771c <cppLoop+0x1234>

	case 10:
		led.fullColor('Y');
 80074f0:	2159      	movs	r1, #89	; 0x59
 80074f2:	4899      	ldr	r0, [pc, #612]	; (8007758 <cppLoop+0x1270>)
 80074f4:	f7fa fcf2 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80074f8:	f7f9 fdd2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80074fc:	2100      	movs	r1, #0
 80074fe:	2000      	movs	r0, #0
 8007500:	f7f9 fdde 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8007504:	489c      	ldr	r0, [pc, #624]	; (8007778 <cppLoop+0x1290>)
 8007506:	f7f9 fe05 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800750a:	2101      	movs	r1, #1
 800750c:	2000      	movs	r0, #0
 800750e:	f7f9 fdd7 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8007512:	489a      	ldr	r0, [pc, #616]	; (800777c <cppLoop+0x1294>)
 8007514:	f7f9 fdfe 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007518:	4892      	ldr	r0, [pc, #584]	; (8007764 <cppLoop+0x127c>)
 800751a:	f7fa fc7b 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 800751e:	4603      	mov	r3, r0
 8007520:	2b02      	cmp	r3, #2
 8007522:	bf0c      	ite	eq
 8007524:	2301      	moveq	r3, #1
 8007526:	2300      	movne	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 80f8 	beq.w	8007720 <cppLoop+0x1238>
			HAL_Delay(1500);
 8007530:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007534:	f000 fa42 	bl	80079bc <HAL_Delay>
			led.LR(-1, 1);
 8007538:	2201      	movs	r2, #1
 800753a:	f04f 31ff 	mov.w	r1, #4294967295
 800753e:	4886      	ldr	r0, [pc, #536]	; (8007758 <cppLoop+0x1270>)
 8007540:	f7fa fd88 	bl	8002054 <_ZN3LED2LREaa>

			logger.start();
 8007544:	4888      	ldr	r0, [pc, #544]	; (8007768 <cppLoop+0x1280>)
 8007546:	f7fc f8a2 	bl	800368e <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800754a:	488d      	ldr	r0, [pc, #564]	; (8007780 <cppLoop+0x1298>)
 800754c:	f7fd f8c1 	bl	80046d2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8007550:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8007784 <cppLoop+0x129c>
 8007554:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007558:	4889      	ldr	r0, [pc, #548]	; (8007780 <cppLoop+0x1298>)
 800755a:	f7fd f84d 	bl	80045f8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800755e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007562:	f000 fa2b 	bl	80079bc <HAL_Delay>

			logger.stop();
 8007566:	4880      	ldr	r0, [pc, #512]	; (8007768 <cppLoop+0x1280>)
 8007568:	f7fc f8a2 	bl	80036b0 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800756c:	4884      	ldr	r0, [pc, #528]	; (8007780 <cppLoop+0x1298>)
 800756e:	f7fd f8c3 	bl	80046f8 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8007572:	4a85      	ldr	r2, [pc, #532]	; (8007788 <cppLoop+0x12a0>)
 8007574:	497f      	ldr	r1, [pc, #508]	; (8007774 <cppLoop+0x128c>)
 8007576:	487c      	ldr	r0, [pc, #496]	; (8007768 <cppLoop+0x1280>)
 8007578:	f7fb ffa2 	bl	80034c0 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800757c:	2200      	movs	r2, #0
 800757e:	f04f 31ff 	mov.w	r1, #4294967295
 8007582:	4875      	ldr	r0, [pc, #468]	; (8007758 <cppLoop+0x1270>)
 8007584:	f7fa fd66 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8007588:	e0ca      	b.n	8007720 <cppLoop+0x1238>

	case 11:
		led.fullColor('C');
 800758a:	2143      	movs	r1, #67	; 0x43
 800758c:	4872      	ldr	r0, [pc, #456]	; (8007758 <cppLoop+0x1270>)
 800758e:	f7fa fca5 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007592:	f7f9 fd85 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007596:	2100      	movs	r1, #0
 8007598:	2000      	movs	r0, #0
 800759a:	f7f9 fd91 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800759e:	487b      	ldr	r0, [pc, #492]	; (800778c <cppLoop+0x12a4>)
 80075a0:	f7f9 fdb8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80075a4:	2101      	movs	r1, #1
 80075a6:	2000      	movs	r0, #0
 80075a8:	f7f9 fd8a 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80075ac:	4878      	ldr	r0, [pc, #480]	; (8007790 <cppLoop+0x12a8>)
 80075ae:	f7f9 fdb1 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80075b2:	486c      	ldr	r0, [pc, #432]	; (8007764 <cppLoop+0x127c>)
 80075b4:	f7fa fc2e 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	bf0c      	ite	eq
 80075be:	2301      	moveq	r3, #1
 80075c0:	2300      	movne	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80ad 	beq.w	8007724 <cppLoop+0x123c>
			HAL_Delay(500);
 80075ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80075ce:	f000 f9f5 	bl	80079bc <HAL_Delay>
			led.LR(-1, 1);
 80075d2:	2201      	movs	r2, #1
 80075d4:	f04f 31ff 	mov.w	r1, #4294967295
 80075d8:	485f      	ldr	r0, [pc, #380]	; (8007758 <cppLoop+0x1270>)
 80075da:	f7fa fd3b 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.createVelocityTabele();
 80075de:	486d      	ldr	r0, [pc, #436]	; (8007794 <cppLoop+0x12ac>)
 80075e0:	f7fb fafe 	bl	8002be0 <_ZN9LineTrace20createVelocityTabeleEv>

			led.LR(-1, 0);
 80075e4:	2200      	movs	r2, #0
 80075e6:	f04f 31ff 	mov.w	r1, #4294967295
 80075ea:	485b      	ldr	r0, [pc, #364]	; (8007758 <cppLoop+0x1270>)
 80075ec:	f7fa fd32 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 80075f0:	e098      	b.n	8007724 <cppLoop+0x123c>

	case 12:
		led.fullColor('R');
 80075f2:	2152      	movs	r1, #82	; 0x52
 80075f4:	4858      	ldr	r0, [pc, #352]	; (8007758 <cppLoop+0x1270>)
 80075f6:	f7fa fc71 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80075fa:	f7f9 fd51 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80075fe:	2100      	movs	r1, #0
 8007600:	2000      	movs	r0, #0
 8007602:	f7f9 fd5d 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8007606:	4864      	ldr	r0, [pc, #400]	; (8007798 <cppLoop+0x12b0>)
 8007608:	f7f9 fd84 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800760c:	2101      	movs	r1, #1
 800760e:	2000      	movs	r0, #0
 8007610:	f7f9 fd56 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8007614:	4852      	ldr	r0, [pc, #328]	; (8007760 <cppLoop+0x1278>)
 8007616:	f7f9 fd7d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800761a:	4852      	ldr	r0, [pc, #328]	; (8007764 <cppLoop+0x127c>)
 800761c:	f7fa fbfa 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007620:	4603      	mov	r3, r0
 8007622:	2b02      	cmp	r3, #2
 8007624:	bf0c      	ite	eq
 8007626:	2301      	moveq	r3, #1
 8007628:	2300      	movne	r3, #0
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d07b      	beq.n	8007728 <cppLoop+0x1240>
			led.LR(-1, 1);
 8007630:	2201      	movs	r2, #1
 8007632:	f04f 31ff 	mov.w	r1, #4294967295
 8007636:	4848      	ldr	r0, [pc, #288]	; (8007758 <cppLoop+0x1270>)
 8007638:	f7fa fd0c 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 800763c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007640:	f000 f9bc 	bl	80079bc <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8007644:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800779c <cppLoop+0x12b4>
 8007648:	4855      	ldr	r0, [pc, #340]	; (80077a0 <cppLoop+0x12b8>)
 800764a:	f7fc fe63 	bl	8004314 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 800764e:	4854      	ldr	r0, [pc, #336]	; (80077a0 <cppLoop+0x12b8>)
 8007650:	f7fc fe70 	bl	8004334 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8007654:	f244 405c 	movw	r0, #17500	; 0x445c
 8007658:	f000 f9b0 	bl	80079bc <HAL_Delay>
			sys_ident.stop();
 800765c:	4850      	ldr	r0, [pc, #320]	; (80077a0 <cppLoop+0x12b8>)
 800765e:	f7fc fe7b 	bl	8004358 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8007662:	484f      	ldr	r0, [pc, #316]	; (80077a0 <cppLoop+0x12b8>)
 8007664:	f7fc fde4 	bl	8004230 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8007668:	2200      	movs	r2, #0
 800766a:	f04f 31ff 	mov.w	r1, #4294967295
 800766e:	483a      	ldr	r0, [pc, #232]	; (8007758 <cppLoop+0x1270>)
 8007670:	f7fa fcf0 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8007674:	e058      	b.n	8007728 <cppLoop+0x1240>

	case 13:
		led.fullColor('G');
 8007676:	2147      	movs	r1, #71	; 0x47
 8007678:	4837      	ldr	r0, [pc, #220]	; (8007758 <cppLoop+0x1270>)
 800767a:	f7fa fc2f 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 800767e:	f7f9 fd0f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007682:	2100      	movs	r1, #0
 8007684:	2000      	movs	r0, #0
 8007686:	f7f9 fd1b 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 800768a:	4846      	ldr	r0, [pc, #280]	; (80077a4 <cppLoop+0x12bc>)
 800768c:	f7f9 fd42 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007690:	2101      	movs	r1, #1
 8007692:	2000      	movs	r0, #0
 8007694:	f7f9 fd14 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007698:	4843      	ldr	r0, [pc, #268]	; (80077a8 <cppLoop+0x12c0>)
 800769a:	f7f9 fd3b 	bl	8001114 <lcd_printf>

		break;
 800769e:	e044      	b.n	800772a <cppLoop+0x1242>

	case 14:
		led.fullColor('B');
 80076a0:	2142      	movs	r1, #66	; 0x42
 80076a2:	482d      	ldr	r0, [pc, #180]	; (8007758 <cppLoop+0x1270>)
 80076a4:	f7fa fc1a 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80076a8:	f7f9 fcfa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80076ac:	2100      	movs	r1, #0
 80076ae:	2000      	movs	r0, #0
 80076b0:	f7f9 fd06 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 80076b4:	483d      	ldr	r0, [pc, #244]	; (80077ac <cppLoop+0x12c4>)
 80076b6:	f7f9 fd2d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80076ba:	2101      	movs	r1, #1
 80076bc:	2000      	movs	r0, #0
 80076be:	f7f9 fcff 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80076c2:	4839      	ldr	r0, [pc, #228]	; (80077a8 <cppLoop+0x12c0>)
 80076c4:	f7f9 fd26 	bl	8001114 <lcd_printf>

		break;
 80076c8:	e02f      	b.n	800772a <cppLoop+0x1242>

	case 15:
		led.fullColor('M');
 80076ca:	214d      	movs	r1, #77	; 0x4d
 80076cc:	4822      	ldr	r0, [pc, #136]	; (8007758 <cppLoop+0x1270>)
 80076ce:	f7fa fc05 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80076d2:	f7f9 fce5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80076d6:	2100      	movs	r1, #0
 80076d8:	2000      	movs	r0, #0
 80076da:	f7f9 fcf1 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 80076de:	4834      	ldr	r0, [pc, #208]	; (80077b0 <cppLoop+0x12c8>)
 80076e0:	f7f9 fd18 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80076e4:	2101      	movs	r1, #1
 80076e6:	2000      	movs	r0, #0
 80076e8:	f7f9 fcea 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80076ec:	482e      	ldr	r0, [pc, #184]	; (80077a8 <cppLoop+0x12c0>)
 80076ee:	f7f9 fd11 	bl	8001114 <lcd_printf>

		break;
 80076f2:	e01a      	b.n	800772a <cppLoop+0x1242>

	default:
		break;
 80076f4:	bf00      	nop
 80076f6:	e018      	b.n	800772a <cppLoop+0x1242>
		break;
 80076f8:	bf00      	nop
 80076fa:	e016      	b.n	800772a <cppLoop+0x1242>
		break;
 80076fc:	bf00      	nop
 80076fe:	e014      	b.n	800772a <cppLoop+0x1242>
		break;
 8007700:	bf00      	nop
 8007702:	e012      	b.n	800772a <cppLoop+0x1242>
		break;
 8007704:	bf00      	nop
 8007706:	e010      	b.n	800772a <cppLoop+0x1242>
		break;
 8007708:	bf00      	nop
 800770a:	e00e      	b.n	800772a <cppLoop+0x1242>
		break;
 800770c:	bf00      	nop
 800770e:	e00c      	b.n	800772a <cppLoop+0x1242>
		break;
 8007710:	bf00      	nop
 8007712:	e00a      	b.n	800772a <cppLoop+0x1242>
		break;
 8007714:	bf00      	nop
 8007716:	e008      	b.n	800772a <cppLoop+0x1242>
		break;
 8007718:	bf00      	nop
 800771a:	e006      	b.n	800772a <cppLoop+0x1242>
		break;
 800771c:	bf00      	nop
 800771e:	e004      	b.n	800772a <cppLoop+0x1242>
		break;
 8007720:	bf00      	nop
 8007722:	e002      	b.n	800772a <cppLoop+0x1242>
		break;
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <cppLoop+0x1242>
		break;
 8007728:	bf00      	nop

	}

	HAL_Delay(30);
 800772a:	201e      	movs	r0, #30
 800772c:	f000 f946 	bl	80079bc <HAL_Delay>

}
 8007730:	bf00      	nop
 8007732:	3724      	adds	r7, #36	; 0x24
 8007734:	46bd      	mov	sp, r7
 8007736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800773a:	bf00      	nop
 800773c:	f3af 8000 	nop.w
 8007740:	33333333 	.word	0x33333333
 8007744:	bfd33333 	.word	0xbfd33333
 8007748:	33333333 	.word	0x33333333
 800774c:	3fd33333 	.word	0x3fd33333
	...
 8007758:	200005b8 	.word	0x200005b8
 800775c:	08017d0c 	.word	0x08017d0c
 8007760:	08017cbc 	.word	0x08017cbc
 8007764:	200005ac 	.word	0x200005ac
 8007768:	200005dc 	.word	0x200005dc
 800776c:	200005b4 	.word	0x200005b4
 8007770:	08017d14 	.word	0x08017d14
 8007774:	08017d20 	.word	0x08017d20
 8007778:	08017d2c 	.word	0x08017d2c
 800777c:	08017d30 	.word	0x08017d30
 8007780:	20015dc0 	.word	0x20015dc0
 8007784:	00000000 	.word	0x00000000
 8007788:	08017d3c 	.word	0x08017d3c
 800778c:	08017d48 	.word	0x08017d48
 8007790:	08017d54 	.word	0x08017d54
 8007794:	20015e40 	.word	0x20015e40
 8007798:	08017d60 	.word	0x08017d60
 800779c:	3e99999a 	.word	0x3e99999a
 80077a0:	2001bc84 	.word	0x2001bc84
 80077a4:	08017d68 	.word	0x08017d68
 80077a8:	08017d74 	.word	0x08017d74
 80077ac:	08017d80 	.word	0x08017d80
 80077b0:	08017d8c 	.word	0x08017d8c

080077b4 <_Z41__static_initialization_and_destruction_0ii>:
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af04      	add	r7, sp, #16
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d13b      	bne.n	800783c <_Z41__static_initialization_and_destruction_0ii+0x88>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d136      	bne.n	800783c <_Z41__static_initialization_and_destruction_0ii+0x88>
LineSensor line_sensor;
 80077ce:	481d      	ldr	r0, [pc, #116]	; (8007844 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80077d0:	f7fa fc78 	bl	80020c4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80077d4:	481c      	ldr	r0, [pc, #112]	; (8007848 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80077d6:	f7fc fbbf 	bl	8003f58 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80077da:	481c      	ldr	r0, [pc, #112]	; (800784c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80077dc:	f7fa fb0e 	bl	8001dfc <_ZN8JoyStickC1Ev>
Motor motor;
 80077e0:	481b      	ldr	r0, [pc, #108]	; (8007850 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80077e2:	f7fb ff76 	bl	80036d2 <_ZN5MotorC1Ev>
IMU imu;
 80077e6:	481b      	ldr	r0, [pc, #108]	; (8007854 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80077e8:	f7fa f916 	bl	8001a18 <_ZN3IMUC1Ev>
Logger logger;
 80077ec:	481a      	ldr	r0, [pc, #104]	; (8007858 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80077ee:	f7fb fd15 	bl	800321c <_ZN6LoggerC1Ev>
Encoder encoder;
 80077f2:	481a      	ldr	r0, [pc, #104]	; (800785c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80077f4:	f7f9 fcae 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80077f8:	4b16      	ldr	r3, [pc, #88]	; (8007854 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80077fa:	4a18      	ldr	r2, [pc, #96]	; (800785c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80077fc:	4914      	ldr	r1, [pc, #80]	; (8007850 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80077fe:	4818      	ldr	r0, [pc, #96]	; (8007860 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007800:	f7fc fdce 	bl	80043a0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8007804:	4b16      	ldr	r3, [pc, #88]	; (8007860 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007806:	4a13      	ldr	r2, [pc, #76]	; (8007854 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007808:	4914      	ldr	r1, [pc, #80]	; (800785c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800780a:	4816      	ldr	r0, [pc, #88]	; (8007864 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800780c:	f7fc f846 	bl	800389c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger);
 8007810:	4b11      	ldr	r3, [pc, #68]	; (8007858 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007812:	9303      	str	r3, [sp, #12]
 8007814:	4b13      	ldr	r3, [pc, #76]	; (8007864 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007816:	9302      	str	r3, [sp, #8]
 8007818:	4b10      	ldr	r3, [pc, #64]	; (800785c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007822:	4a08      	ldr	r2, [pc, #32]	; (8007844 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007824:	490a      	ldr	r1, [pc, #40]	; (8007850 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007826:	4810      	ldr	r0, [pc, #64]	; (8007868 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007828:	f7fa ff7a 	bl	8002720 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>
SystemIdentification sys_ident(&logger, &motor);
 800782c:	4a08      	ldr	r2, [pc, #32]	; (8007850 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800782e:	490a      	ldr	r1, [pc, #40]	; (8007858 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007830:	480e      	ldr	r0, [pc, #56]	; (800786c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007832:	f7fc fcb3 	bl	800419c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8007836:	480e      	ldr	r0, [pc, #56]	; (8007870 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007838:	f7fc f9b0 	bl	8003b9c <_ZN13PathFollowingC1Ev>
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	200002ac 	.word	0x200002ac
 8007848:	200005a4 	.word	0x200005a4
 800784c:	200005ac 	.word	0x200005ac
 8007850:	200005b4 	.word	0x200005b4
 8007854:	200005c8 	.word	0x200005c8
 8007858:	200005dc 	.word	0x200005dc
 800785c:	20015da4 	.word	0x20015da4
 8007860:	20015dc0 	.word	0x20015dc0
 8007864:	20015e00 	.word	0x20015e00
 8007868:	20015e40 	.word	0x20015e40
 800786c:	2001bc84 	.word	0x2001bc84
 8007870:	2001be90 	.word	0x2001be90

08007874 <_GLOBAL__sub_I_line_sensor>:
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
 8007878:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800787c:	2001      	movs	r0, #1
 800787e:	f7ff ff99 	bl	80077b4 <_Z41__static_initialization_and_destruction_0ii>
 8007882:	bd80      	pop	{r7, pc}

08007884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80078bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007888:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800788a:	e003      	b.n	8007894 <LoopCopyDataInit>

0800788c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800788c:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800788e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007890:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007892:	3104      	adds	r1, #4

08007894 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007894:	480b      	ldr	r0, [pc, #44]	; (80078c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007896:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007898:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800789a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800789c:	d3f6      	bcc.n	800788c <CopyDataInit>
  ldr  r2, =_sbss
 800789e:	4a0b      	ldr	r2, [pc, #44]	; (80078cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80078a0:	e002      	b.n	80078a8 <LoopFillZerobss>

080078a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80078a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80078a4:	f842 3b04 	str.w	r3, [r2], #4

080078a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80078a8:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80078aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80078ac:	d3f9      	bcc.n	80078a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80078ae:	f7fe fca1 	bl	80061f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078b2:	f00b fded 	bl	8013490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80078b6:	f7fc ffb9 	bl	800482c <main>
  bx  lr    
 80078ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80078bc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80078c0:	08018388 	.word	0x08018388
  ldr  r0, =_sdata
 80078c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80078c8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80078cc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80078d0:	20037fd0 	.word	0x20037fd0

080078d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80078d4:	e7fe      	b.n	80078d4 <ADC_IRQHandler>
	...

080078d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80078dc:	4b0e      	ldr	r3, [pc, #56]	; (8007918 <HAL_Init+0x40>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a0d      	ldr	r2, [pc, #52]	; (8007918 <HAL_Init+0x40>)
 80078e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80078e8:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <HAL_Init+0x40>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a0a      	ldr	r2, [pc, #40]	; (8007918 <HAL_Init+0x40>)
 80078ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078f4:	4b08      	ldr	r3, [pc, #32]	; (8007918 <HAL_Init+0x40>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a07      	ldr	r2, [pc, #28]	; (8007918 <HAL_Init+0x40>)
 80078fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007900:	2003      	movs	r0, #3
 8007902:	f000 fd51 	bl	80083a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007906:	2000      	movs	r0, #0
 8007908:	f000 f808 	bl	800791c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800790c:	f7fd feb2 	bl	8005674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40023c00 	.word	0x40023c00

0800791c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007924:	4b12      	ldr	r3, [pc, #72]	; (8007970 <HAL_InitTick+0x54>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	4b12      	ldr	r3, [pc, #72]	; (8007974 <HAL_InitTick+0x58>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	4619      	mov	r1, r3
 800792e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007932:	fbb3 f3f1 	udiv	r3, r3, r1
 8007936:	fbb2 f3f3 	udiv	r3, r2, r3
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fd69 	bl	8008412 <HAL_SYSTICK_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e00e      	b.n	8007968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b0f      	cmp	r3, #15
 800794e:	d80a      	bhi.n	8007966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007950:	2200      	movs	r2, #0
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	f000 fd31 	bl	80083be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800795c:	4a06      	ldr	r2, [pc, #24]	; (8007978 <HAL_InitTick+0x5c>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	e000      	b.n	8007968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
}
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000000 	.word	0x20000000
 8007974:	20000008 	.word	0x20000008
 8007978:	20000004 	.word	0x20000004

0800797c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007980:	4b06      	ldr	r3, [pc, #24]	; (800799c <HAL_IncTick+0x20>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	4b06      	ldr	r3, [pc, #24]	; (80079a0 <HAL_IncTick+0x24>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4413      	add	r3, r2
 800798c:	4a04      	ldr	r2, [pc, #16]	; (80079a0 <HAL_IncTick+0x24>)
 800798e:	6013      	str	r3, [r2, #0]
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20000008 	.word	0x20000008
 80079a0:	20035f58 	.word	0x20035f58

080079a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  return uwTick;
 80079a8:	4b03      	ldr	r3, [pc, #12]	; (80079b8 <HAL_GetTick+0x14>)
 80079aa:	681b      	ldr	r3, [r3, #0]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	20035f58 	.word	0x20035f58

080079bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80079c4:	f7ff ffee 	bl	80079a4 <HAL_GetTick>
 80079c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d005      	beq.n	80079e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80079d6:	4b09      	ldr	r3, [pc, #36]	; (80079fc <HAL_Delay+0x40>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80079e2:	bf00      	nop
 80079e4:	f7ff ffde 	bl	80079a4 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d8f7      	bhi.n	80079e4 <HAL_Delay+0x28>
  {
  }
}
 80079f4:	bf00      	nop
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20000008 	.word	0x20000008

08007a00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e033      	b.n	8007a7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d109      	bne.n	8007a32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fd fe50 	bl	80056c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d118      	bne.n	8007a70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a46:	f023 0302 	bic.w	r3, r3, #2
 8007a4a:	f043 0202 	orr.w	r2, r3, #2
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa5a 	bl	8007f0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f023 0303 	bic.w	r3, r3, #3
 8007a66:	f043 0201 	orr.w	r2, r3, #1
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8007a6e:	e001      	b.n	8007a74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_ADC_Start_DMA+0x1e>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e0cc      	b.n	8007c40 <HAL_ADC_Start_DMA+0x1b8>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d018      	beq.n	8007aee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689a      	ldr	r2, [r3, #8]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0201 	orr.w	r2, r2, #1
 8007aca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007acc:	4b5e      	ldr	r3, [pc, #376]	; (8007c48 <HAL_ADC_Start_DMA+0x1c0>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a5e      	ldr	r2, [pc, #376]	; (8007c4c <HAL_ADC_Start_DMA+0x1c4>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	0c9a      	lsrs	r2, r3, #18
 8007ad8:	4613      	mov	r3, r2
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	4413      	add	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007ae0:	e002      	b.n	8007ae8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f9      	bne.n	8007ae2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	f040 80a0 	bne.w	8007c3e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007b06:	f023 0301 	bic.w	r3, r3, #1
 8007b0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3c:	d106      	bne.n	8007b4c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b42:	f023 0206 	bic.w	r2, r3, #6
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	645a      	str	r2, [r3, #68]	; 0x44
 8007b4a:	e002      	b.n	8007b52 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b5a:	4b3d      	ldr	r3, [pc, #244]	; (8007c50 <HAL_ADC_Start_DMA+0x1c8>)
 8007b5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	4a3c      	ldr	r2, [pc, #240]	; (8007c54 <HAL_ADC_Start_DMA+0x1cc>)
 8007b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	4a3b      	ldr	r2, [pc, #236]	; (8007c58 <HAL_ADC_Start_DMA+0x1d0>)
 8007b6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	4a3a      	ldr	r2, [pc, #232]	; (8007c5c <HAL_ADC_Start_DMA+0x1d4>)
 8007b74:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007b7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007b8e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b9e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	334c      	adds	r3, #76	; 0x4c
 8007baa:	4619      	mov	r1, r3
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f000 fcea 	bl	8008588 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f003 031f 	and.w	r3, r3, #31
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d12a      	bne.n	8007c16 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a26      	ldr	r2, [pc, #152]	; (8007c60 <HAL_ADC_Start_DMA+0x1d8>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d015      	beq.n	8007bf6 <HAL_ADC_Start_DMA+0x16e>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a25      	ldr	r2, [pc, #148]	; (8007c64 <HAL_ADC_Start_DMA+0x1dc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d105      	bne.n	8007be0 <HAL_ADC_Start_DMA+0x158>
 8007bd4:	4b1e      	ldr	r3, [pc, #120]	; (8007c50 <HAL_ADC_Start_DMA+0x1c8>)
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f003 031f 	and.w	r3, r3, #31
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a20      	ldr	r2, [pc, #128]	; (8007c68 <HAL_ADC_Start_DMA+0x1e0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d129      	bne.n	8007c3e <HAL_ADC_Start_DMA+0x1b6>
 8007bea:	4b19      	ldr	r3, [pc, #100]	; (8007c50 <HAL_ADC_Start_DMA+0x1c8>)
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f003 031f 	and.w	r3, r3, #31
 8007bf2:	2b0f      	cmp	r3, #15
 8007bf4:	d823      	bhi.n	8007c3e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d11c      	bne.n	8007c3e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007c12:	609a      	str	r2, [r3, #8]
 8007c14:	e013      	b.n	8007c3e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <HAL_ADC_Start_DMA+0x1d8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10e      	bne.n	8007c3e <HAL_ADC_Start_DMA+0x1b6>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d107      	bne.n	8007c3e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007c3c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20000000 	.word	0x20000000
 8007c4c:	431bde83 	.word	0x431bde83
 8007c50:	40012300 	.word	0x40012300
 8007c54:	08008105 	.word	0x08008105
 8007c58:	080081bf 	.word	0x080081bf
 8007c5c:	080081db 	.word	0x080081db
 8007c60:	40012000 	.word	0x40012000
 8007c64:	40012100 	.word	0x40012100
 8007c68:	40012200 	.word	0x40012200

08007c6c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d101      	bne.n	8007cc4 <HAL_ADC_ConfigChannel+0x1c>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e113      	b.n	8007eec <HAL_ADC_ConfigChannel+0x244>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b09      	cmp	r3, #9
 8007cd2:	d925      	bls.n	8007d20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68d9      	ldr	r1, [r3, #12]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	4413      	add	r3, r2
 8007ce8:	3b1e      	subs	r3, #30
 8007cea:	2207      	movs	r2, #7
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	43da      	mvns	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	400a      	ands	r2, r1
 8007cf8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68d9      	ldr	r1, [r3, #12]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	4403      	add	r3, r0
 8007d12:	3b1e      	subs	r3, #30
 8007d14:	409a      	lsls	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	60da      	str	r2, [r3, #12]
 8007d1e:	e022      	b.n	8007d66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6919      	ldr	r1, [r3, #16]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4613      	mov	r3, r2
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	4413      	add	r3, r2
 8007d34:	2207      	movs	r2, #7
 8007d36:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3a:	43da      	mvns	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	400a      	ands	r2, r1
 8007d42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6919      	ldr	r1, [r3, #16]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	4618      	mov	r0, r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	005b      	lsls	r3, r3, #1
 8007d5a:	4403      	add	r3, r0
 8007d5c:	409a      	lsls	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b06      	cmp	r3, #6
 8007d6c:	d824      	bhi.n	8007db8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	3b05      	subs	r3, #5
 8007d80:	221f      	movs	r2, #31
 8007d82:	fa02 f303 	lsl.w	r3, r2, r3
 8007d86:	43da      	mvns	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	400a      	ands	r2, r1
 8007d8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	3b05      	subs	r3, #5
 8007daa:	fa00 f203 	lsl.w	r2, r0, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	635a      	str	r2, [r3, #52]	; 0x34
 8007db6:	e04c      	b.n	8007e52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	2b0c      	cmp	r3, #12
 8007dbe:	d824      	bhi.n	8007e0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	3b23      	subs	r3, #35	; 0x23
 8007dd2:	221f      	movs	r2, #31
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	43da      	mvns	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	400a      	ands	r2, r1
 8007de0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	4618      	mov	r0, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	3b23      	subs	r3, #35	; 0x23
 8007dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30
 8007e08:	e023      	b.n	8007e52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	3b41      	subs	r3, #65	; 0x41
 8007e1c:	221f      	movs	r2, #31
 8007e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e22:	43da      	mvns	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	400a      	ands	r2, r1
 8007e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	4618      	mov	r0, r3
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	3b41      	subs	r3, #65	; 0x41
 8007e46:	fa00 f203 	lsl.w	r2, r0, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007e52:	4b29      	ldr	r3, [pc, #164]	; (8007ef8 <HAL_ADC_ConfigChannel+0x250>)
 8007e54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a28      	ldr	r2, [pc, #160]	; (8007efc <HAL_ADC_ConfigChannel+0x254>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d10f      	bne.n	8007e80 <HAL_ADC_ConfigChannel+0x1d8>
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b12      	cmp	r3, #18
 8007e66:	d10b      	bne.n	8007e80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a1d      	ldr	r2, [pc, #116]	; (8007efc <HAL_ADC_ConfigChannel+0x254>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d12b      	bne.n	8007ee2 <HAL_ADC_ConfigChannel+0x23a>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1c      	ldr	r2, [pc, #112]	; (8007f00 <HAL_ADC_ConfigChannel+0x258>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d003      	beq.n	8007e9c <HAL_ADC_ConfigChannel+0x1f4>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b11      	cmp	r3, #17
 8007e9a:	d122      	bne.n	8007ee2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a11      	ldr	r2, [pc, #68]	; (8007f00 <HAL_ADC_ConfigChannel+0x258>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d111      	bne.n	8007ee2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007ebe:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <HAL_ADC_ConfigChannel+0x25c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a11      	ldr	r2, [pc, #68]	; (8007f08 <HAL_ADC_ConfigChannel+0x260>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	0c9a      	lsrs	r2, r3, #18
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007ed4:	e002      	b.n	8007edc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1f9      	bne.n	8007ed6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	40012300 	.word	0x40012300
 8007efc:	40012000 	.word	0x40012000
 8007f00:	10000012 	.word	0x10000012
 8007f04:	20000000 	.word	0x20000000
 8007f08:	431bde83 	.word	0x431bde83

08007f0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007f14:	4b79      	ldr	r3, [pc, #484]	; (80080fc <ADC_Init+0x1f0>)
 8007f16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6859      	ldr	r1, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	021a      	lsls	r2, r3, #8
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6859      	ldr	r1, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6899      	ldr	r1, [r3, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9e:	4a58      	ldr	r2, [pc, #352]	; (8008100 <ADC_Init+0x1f4>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d022      	beq.n	8007fea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007fb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6899      	ldr	r1, [r3, #8]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6899      	ldr	r1, [r3, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	609a      	str	r2, [r3, #8]
 8007fe8:	e00f      	b.n	800800a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008008:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0202 	bic.w	r2, r2, #2
 8008018:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6899      	ldr	r1, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	7e1b      	ldrb	r3, [r3, #24]
 8008024:	005a      	lsls	r2, r3, #1
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01b      	beq.n	8008070 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008046:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008056:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6859      	ldr	r1, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	3b01      	subs	r3, #1
 8008064:	035a      	lsls	r2, r3, #13
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	605a      	str	r2, [r3, #4]
 800806e:	e007      	b.n	8008080 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800807e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	3b01      	subs	r3, #1
 800809c:	051a      	lsls	r2, r3, #20
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689a      	ldr	r2, [r3, #8]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80080b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6899      	ldr	r1, [r3, #8]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080c2:	025a      	lsls	r2, r3, #9
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689a      	ldr	r2, [r3, #8]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6899      	ldr	r1, [r3, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	029a      	lsls	r2, r3, #10
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	609a      	str	r2, [r3, #8]
}
 80080f0:	bf00      	nop
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	40012300 	.word	0x40012300
 8008100:	0f000001 	.word	0x0f000001

08008104 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800811a:	2b00      	cmp	r3, #0
 800811c:	d13c      	bne.n	8008198 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008122:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d12b      	bne.n	8008190 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800813c:	2b00      	cmp	r3, #0
 800813e:	d127      	bne.n	8008190 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008158:	2b00      	cmp	r3, #0
 800815a:	d119      	bne.n	8008190 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0220 	bic.w	r2, r2, #32
 800816a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	f043 0201 	orr.w	r2, r3, #1
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff fd6b 	bl	8007c6c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008196:	e00e      	b.n	80081b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	f003 0310 	and.w	r3, r3, #16
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d003      	beq.n	80081ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff fd75 	bl	8007c94 <HAL_ADC_ErrorCallback>
}
 80081aa:	e004      	b.n	80081b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	4798      	blx	r3
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f7ff fd57 	bl	8007c80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80081d2:	bf00      	nop
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2240      	movs	r2, #64	; 0x40
 80081ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f2:	f043 0204 	orr.w	r2, r3, #4
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff fd4a 	bl	8007c94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008218:	4b0c      	ldr	r3, [pc, #48]	; (800824c <__NVIC_SetPriorityGrouping+0x44>)
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008224:	4013      	ands	r3, r2
 8008226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800823a:	4a04      	ldr	r2, [pc, #16]	; (800824c <__NVIC_SetPriorityGrouping+0x44>)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	60d3      	str	r3, [r2, #12]
}
 8008240:	bf00      	nop
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	e000ed00 	.word	0xe000ed00

08008250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008250:	b480      	push	{r7}
 8008252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008254:	4b04      	ldr	r3, [pc, #16]	; (8008268 <__NVIC_GetPriorityGrouping+0x18>)
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	0a1b      	lsrs	r3, r3, #8
 800825a:	f003 0307 	and.w	r3, r3, #7
}
 800825e:	4618      	mov	r0, r3
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	e000ed00 	.word	0xe000ed00

0800826c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800827a:	2b00      	cmp	r3, #0
 800827c:	db0b      	blt.n	8008296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	f003 021f 	and.w	r2, r3, #31
 8008284:	4907      	ldr	r1, [pc, #28]	; (80082a4 <__NVIC_EnableIRQ+0x38>)
 8008286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800828a:	095b      	lsrs	r3, r3, #5
 800828c:	2001      	movs	r0, #1
 800828e:	fa00 f202 	lsl.w	r2, r0, r2
 8008292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	e000e100 	.word	0xe000e100

080082a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	6039      	str	r1, [r7, #0]
 80082b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	db0a      	blt.n	80082d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	490c      	ldr	r1, [pc, #48]	; (80082f4 <__NVIC_SetPriority+0x4c>)
 80082c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082c6:	0112      	lsls	r2, r2, #4
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	440b      	add	r3, r1
 80082cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80082d0:	e00a      	b.n	80082e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	4908      	ldr	r1, [pc, #32]	; (80082f8 <__NVIC_SetPriority+0x50>)
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	3b04      	subs	r3, #4
 80082e0:	0112      	lsls	r2, r2, #4
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	440b      	add	r3, r1
 80082e6:	761a      	strb	r2, [r3, #24]
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	e000e100 	.word	0xe000e100
 80082f8:	e000ed00 	.word	0xe000ed00

080082fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b089      	sub	sp, #36	; 0x24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f1c3 0307 	rsb	r3, r3, #7
 8008316:	2b04      	cmp	r3, #4
 8008318:	bf28      	it	cs
 800831a:	2304      	movcs	r3, #4
 800831c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3304      	adds	r3, #4
 8008322:	2b06      	cmp	r3, #6
 8008324:	d902      	bls.n	800832c <NVIC_EncodePriority+0x30>
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	3b03      	subs	r3, #3
 800832a:	e000      	b.n	800832e <NVIC_EncodePriority+0x32>
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008330:	f04f 32ff 	mov.w	r2, #4294967295
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	43da      	mvns	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	401a      	ands	r2, r3
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008344:	f04f 31ff 	mov.w	r1, #4294967295
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	fa01 f303 	lsl.w	r3, r1, r3
 800834e:	43d9      	mvns	r1, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008354:	4313      	orrs	r3, r2
         );
}
 8008356:	4618      	mov	r0, r3
 8008358:	3724      	adds	r7, #36	; 0x24
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
	...

08008364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3b01      	subs	r3, #1
 8008370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008374:	d301      	bcc.n	800837a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008376:	2301      	movs	r3, #1
 8008378:	e00f      	b.n	800839a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800837a:	4a0a      	ldr	r2, [pc, #40]	; (80083a4 <SysTick_Config+0x40>)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3b01      	subs	r3, #1
 8008380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008382:	210f      	movs	r1, #15
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	f7ff ff8e 	bl	80082a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800838c:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <SysTick_Config+0x40>)
 800838e:	2200      	movs	r2, #0
 8008390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008392:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <SysTick_Config+0x40>)
 8008394:	2207      	movs	r2, #7
 8008396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	e000e010 	.word	0xe000e010

080083a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff ff29 	bl	8008208 <__NVIC_SetPriorityGrouping>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80083be:	b580      	push	{r7, lr}
 80083c0:	b086      	sub	sp, #24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	4603      	mov	r3, r0
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
 80083ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80083d0:	f7ff ff3e 	bl	8008250 <__NVIC_GetPriorityGrouping>
 80083d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	6978      	ldr	r0, [r7, #20]
 80083dc:	f7ff ff8e 	bl	80082fc <NVIC_EncodePriority>
 80083e0:	4602      	mov	r2, r0
 80083e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083e6:	4611      	mov	r1, r2
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff ff5d 	bl	80082a8 <__NVIC_SetPriority>
}
 80083ee:	bf00      	nop
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	4603      	mov	r3, r0
 80083fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008404:	4618      	mov	r0, r3
 8008406:	f7ff ff31 	bl	800826c <__NVIC_EnableIRQ>
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7ff ffa2 	bl	8008364 <SysTick_Config>
 8008420:	4603      	mov	r3, r0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008438:	f7ff fab4 	bl	80079a4 <HAL_GetTick>
 800843c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e099      	b.n	800857c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0201 	bic.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008468:	e00f      	b.n	800848a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800846a:	f7ff fa9b 	bl	80079a4 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	2b05      	cmp	r3, #5
 8008476:	d908      	bls.n	800848a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2220      	movs	r2, #32
 800847c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2203      	movs	r2, #3
 8008482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e078      	b.n	800857c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e8      	bne.n	800846a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4b38      	ldr	r3, [pc, #224]	; (8008584 <HAL_DMA_Init+0x158>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4313      	orrs	r3, r2
 80084da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d107      	bne.n	80084f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ec:	4313      	orrs	r3, r2
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f023 0307 	bic.w	r3, r3, #7
 800850a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	4313      	orrs	r3, r2
 8008514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	2b04      	cmp	r3, #4
 800851c:	d117      	bne.n	800854e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	4313      	orrs	r3, r2
 8008526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00e      	beq.n	800854e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fa9d 	bl	8008a70 <DMA_CheckFifoParam>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d008      	beq.n	800854e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2240      	movs	r2, #64	; 0x40
 8008540:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800854a:	2301      	movs	r3, #1
 800854c:	e016      	b.n	800857c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa54 	bl	8008a04 <DMA_CalcBaseAndBitshift>
 800855c:	4603      	mov	r3, r0
 800855e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008564:	223f      	movs	r2, #63	; 0x3f
 8008566:	409a      	lsls	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	f010803f 	.word	0xf010803f

08008588 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <HAL_DMA_Start_IT+0x26>
 80085aa:	2302      	movs	r3, #2
 80085ac:	e040      	b.n	8008630 <HAL_DMA_Start_IT+0xa8>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d12f      	bne.n	8008622 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2202      	movs	r2, #2
 80085c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f9e6 	bl	80089a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e0:	223f      	movs	r2, #63	; 0x3f
 80085e2:	409a      	lsls	r2, r3
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0216 	orr.w	r2, r2, #22
 80085f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d007      	beq.n	8008610 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0208 	orr.w	r2, r2, #8
 800860e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0201 	orr.w	r2, r2, #1
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	e005      	b.n	800862e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800862a:	2302      	movs	r3, #2
 800862c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800862e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d004      	beq.n	8008656 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2280      	movs	r2, #128	; 0x80
 8008650:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e00c      	b.n	8008670 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2205      	movs	r2, #5
 800865a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0201 	bic.w	r2, r2, #1
 800866c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008688:	4b92      	ldr	r3, [pc, #584]	; (80088d4 <HAL_DMA_IRQHandler+0x258>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a92      	ldr	r2, [pc, #584]	; (80088d8 <HAL_DMA_IRQHandler+0x25c>)
 800868e:	fba2 2303 	umull	r2, r3, r2, r3
 8008692:	0a9b      	lsrs	r3, r3, #10
 8008694:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a6:	2208      	movs	r2, #8
 80086a8:	409a      	lsls	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4013      	ands	r3, r2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d01a      	beq.n	80086e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d013      	beq.n	80086e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0204 	bic.w	r2, r2, #4
 80086ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d4:	2208      	movs	r2, #8
 80086d6:	409a      	lsls	r2, r3
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e0:	f043 0201 	orr.w	r2, r3, #1
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ec:	2201      	movs	r2, #1
 80086ee:	409a      	lsls	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4013      	ands	r3, r2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d012      	beq.n	800871e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00b      	beq.n	800871e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870a:	2201      	movs	r2, #1
 800870c:	409a      	lsls	r2, r3
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008716:	f043 0202 	orr.w	r2, r3, #2
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008722:	2204      	movs	r2, #4
 8008724:	409a      	lsls	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4013      	ands	r3, r2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d012      	beq.n	8008754 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00b      	beq.n	8008754 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008740:	2204      	movs	r2, #4
 8008742:	409a      	lsls	r2, r3
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874c:	f043 0204 	orr.w	r2, r3, #4
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008758:	2210      	movs	r2, #16
 800875a:	409a      	lsls	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4013      	ands	r3, r2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d043      	beq.n	80087ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0308 	and.w	r3, r3, #8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d03c      	beq.n	80087ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008776:	2210      	movs	r2, #16
 8008778:	409a      	lsls	r2, r3
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d018      	beq.n	80087be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d108      	bne.n	80087ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d024      	beq.n	80087ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
 80087aa:	e01f      	b.n	80087ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d01b      	beq.n	80087ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	4798      	blx	r3
 80087bc:	e016      	b.n	80087ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d107      	bne.n	80087dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 0208 	bic.w	r2, r2, #8
 80087da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f0:	2220      	movs	r2, #32
 80087f2:	409a      	lsls	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4013      	ands	r3, r2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 808e 	beq.w	800891a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0310 	and.w	r3, r3, #16
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 8086 	beq.w	800891a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008812:	2220      	movs	r2, #32
 8008814:	409a      	lsls	r2, r3
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b05      	cmp	r3, #5
 8008824:	d136      	bne.n	8008894 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0216 	bic.w	r2, r2, #22
 8008834:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	695a      	ldr	r2, [r3, #20]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008844:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	d103      	bne.n	8008856 <HAL_DMA_IRQHandler+0x1da>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008852:	2b00      	cmp	r3, #0
 8008854:	d007      	beq.n	8008866 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0208 	bic.w	r2, r2, #8
 8008864:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886a:	223f      	movs	r2, #63	; 0x3f
 800886c:	409a      	lsls	r2, r3
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008886:	2b00      	cmp	r3, #0
 8008888:	d07d      	beq.n	8008986 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
        }
        return;
 8008892:	e078      	b.n	8008986 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d01c      	beq.n	80088dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d108      	bne.n	80088c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d030      	beq.n	800891a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	4798      	blx	r3
 80088c0:	e02b      	b.n	800891a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d027      	beq.n	800891a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	4798      	blx	r3
 80088d2:	e022      	b.n	800891a <HAL_DMA_IRQHandler+0x29e>
 80088d4:	20000000 	.word	0x20000000
 80088d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10f      	bne.n	800890a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0210 	bic.w	r2, r2, #16
 80088f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891e:	2b00      	cmp	r3, #0
 8008920:	d032      	beq.n	8008988 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d022      	beq.n	8008974 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2205      	movs	r2, #5
 8008932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0201 	bic.w	r2, r2, #1
 8008944:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	3301      	adds	r3, #1
 800894a:	60bb      	str	r3, [r7, #8]
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	429a      	cmp	r2, r3
 8008950:	d307      	bcc.n	8008962 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1f2      	bne.n	8008946 <HAL_DMA_IRQHandler+0x2ca>
 8008960:	e000      	b.n	8008964 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008962:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
 8008984:	e000      	b.n	8008988 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008986:	bf00      	nop
    }
  }
}
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop

08008990 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	2b40      	cmp	r3, #64	; 0x40
 80089d4:	d108      	bne.n	80089e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80089e6:	e007      	b.n	80089f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	60da      	str	r2, [r3, #12]
}
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	3b10      	subs	r3, #16
 8008a14:	4a14      	ldr	r2, [pc, #80]	; (8008a68 <DMA_CalcBaseAndBitshift+0x64>)
 8008a16:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1a:	091b      	lsrs	r3, r3, #4
 8008a1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008a1e:	4a13      	ldr	r2, [pc, #76]	; (8008a6c <DMA_CalcBaseAndBitshift+0x68>)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d909      	bls.n	8008a46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	1d1a      	adds	r2, r3, #4
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	659a      	str	r2, [r3, #88]	; 0x58
 8008a44:	e007      	b.n	8008a56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008a4e:	f023 0303 	bic.w	r3, r3, #3
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	aaaaaaab 	.word	0xaaaaaaab
 8008a6c:	08017dcc 	.word	0x08017dcc

08008a70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d11f      	bne.n	8008aca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d855      	bhi.n	8008b3c <DMA_CheckFifoParam+0xcc>
 8008a90:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <DMA_CheckFifoParam+0x28>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008aa9 	.word	0x08008aa9
 8008a9c:	08008abb 	.word	0x08008abb
 8008aa0:	08008aa9 	.word	0x08008aa9
 8008aa4:	08008b3d 	.word	0x08008b3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d045      	beq.n	8008b40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ab8:	e042      	b.n	8008b40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ac2:	d13f      	bne.n	8008b44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ac8:	e03c      	b.n	8008b44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ad2:	d121      	bne.n	8008b18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d836      	bhi.n	8008b48 <DMA_CheckFifoParam+0xd8>
 8008ada:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <DMA_CheckFifoParam+0x70>)
 8008adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008af7 	.word	0x08008af7
 8008ae8:	08008af1 	.word	0x08008af1
 8008aec:	08008b09 	.word	0x08008b09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
      break;
 8008af4:	e02f      	b.n	8008b56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d024      	beq.n	8008b4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b06:	e021      	b.n	8008b4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b10:	d11e      	bne.n	8008b50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008b16:	e01b      	b.n	8008b50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d902      	bls.n	8008b24 <DMA_CheckFifoParam+0xb4>
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d003      	beq.n	8008b2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008b22:	e018      	b.n	8008b56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	73fb      	strb	r3, [r7, #15]
      break;
 8008b28:	e015      	b.n	8008b56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00e      	beq.n	8008b54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	73fb      	strb	r3, [r7, #15]
      break;
 8008b3a:	e00b      	b.n	8008b54 <DMA_CheckFifoParam+0xe4>
      break;
 8008b3c:	bf00      	nop
 8008b3e:	e00a      	b.n	8008b56 <DMA_CheckFifoParam+0xe6>
      break;
 8008b40:	bf00      	nop
 8008b42:	e008      	b.n	8008b56 <DMA_CheckFifoParam+0xe6>
      break;
 8008b44:	bf00      	nop
 8008b46:	e006      	b.n	8008b56 <DMA_CheckFifoParam+0xe6>
      break;
 8008b48:	bf00      	nop
 8008b4a:	e004      	b.n	8008b56 <DMA_CheckFifoParam+0xe6>
      break;
 8008b4c:	bf00      	nop
 8008b4e:	e002      	b.n	8008b56 <DMA_CheckFifoParam+0xe6>
      break;   
 8008b50:	bf00      	nop
 8008b52:	e000      	b.n	8008b56 <DMA_CheckFifoParam+0xe6>
      break;
 8008b54:	bf00      	nop
    }
  } 
  
  return status; 
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b089      	sub	sp, #36	; 0x24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61fb      	str	r3, [r7, #28]
 8008b7e:	e177      	b.n	8008e70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b80:	2201      	movs	r2, #1
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4013      	ands	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	f040 8166 	bne.w	8008e6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d00b      	beq.n	8008bbe <HAL_GPIO_Init+0x5a>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d007      	beq.n	8008bbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008bb2:	2b11      	cmp	r3, #17
 8008bb4:	d003      	beq.n	8008bbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	2b12      	cmp	r3, #18
 8008bbc:	d130      	bne.n	8008c20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	2203      	movs	r2, #3
 8008bca:	fa02 f303 	lsl.w	r3, r2, r3
 8008bce:	43db      	mvns	r3, r3
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfc:	43db      	mvns	r3, r3
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	4013      	ands	r3, r2
 8008c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	091b      	lsrs	r3, r3, #4
 8008c0a:	f003 0201 	and.w	r2, r3, #1
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	fa02 f303 	lsl.w	r3, r2, r3
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c30:	43db      	mvns	r3, r3
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	4013      	ands	r3, r2
 8008c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	fa02 f303 	lsl.w	r3, r2, r3
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d003      	beq.n	8008c60 <HAL_GPIO_Init+0xfc>
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	2b12      	cmp	r3, #18
 8008c5e:	d123      	bne.n	8008ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	08da      	lsrs	r2, r3, #3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3208      	adds	r2, #8
 8008c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	220f      	movs	r2, #15
 8008c78:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7c:	43db      	mvns	r3, r3
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	4013      	ands	r3, r2
 8008c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	fa02 f303 	lsl.w	r3, r2, r3
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	08da      	lsrs	r2, r3, #3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3208      	adds	r2, #8
 8008ca2:	69b9      	ldr	r1, [r7, #24]
 8008ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f003 0203 	and.w	r2, r3, #3
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 80c0 	beq.w	8008e6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	4b65      	ldr	r3, [pc, #404]	; (8008e84 <HAL_GPIO_Init+0x320>)
 8008cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf2:	4a64      	ldr	r2, [pc, #400]	; (8008e84 <HAL_GPIO_Init+0x320>)
 8008cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8008cfa:	4b62      	ldr	r3, [pc, #392]	; (8008e84 <HAL_GPIO_Init+0x320>)
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d06:	4a60      	ldr	r2, [pc, #384]	; (8008e88 <HAL_GPIO_Init+0x324>)
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	089b      	lsrs	r3, r3, #2
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	220f      	movs	r2, #15
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	43db      	mvns	r3, r3
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	4013      	ands	r3, r2
 8008d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a57      	ldr	r2, [pc, #348]	; (8008e8c <HAL_GPIO_Init+0x328>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d037      	beq.n	8008da2 <HAL_GPIO_Init+0x23e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a56      	ldr	r2, [pc, #344]	; (8008e90 <HAL_GPIO_Init+0x32c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d031      	beq.n	8008d9e <HAL_GPIO_Init+0x23a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a55      	ldr	r2, [pc, #340]	; (8008e94 <HAL_GPIO_Init+0x330>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d02b      	beq.n	8008d9a <HAL_GPIO_Init+0x236>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a54      	ldr	r2, [pc, #336]	; (8008e98 <HAL_GPIO_Init+0x334>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d025      	beq.n	8008d96 <HAL_GPIO_Init+0x232>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a53      	ldr	r2, [pc, #332]	; (8008e9c <HAL_GPIO_Init+0x338>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d01f      	beq.n	8008d92 <HAL_GPIO_Init+0x22e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a52      	ldr	r2, [pc, #328]	; (8008ea0 <HAL_GPIO_Init+0x33c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d019      	beq.n	8008d8e <HAL_GPIO_Init+0x22a>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a51      	ldr	r2, [pc, #324]	; (8008ea4 <HAL_GPIO_Init+0x340>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d013      	beq.n	8008d8a <HAL_GPIO_Init+0x226>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a50      	ldr	r2, [pc, #320]	; (8008ea8 <HAL_GPIO_Init+0x344>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d00d      	beq.n	8008d86 <HAL_GPIO_Init+0x222>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a4f      	ldr	r2, [pc, #316]	; (8008eac <HAL_GPIO_Init+0x348>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d007      	beq.n	8008d82 <HAL_GPIO_Init+0x21e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a4e      	ldr	r2, [pc, #312]	; (8008eb0 <HAL_GPIO_Init+0x34c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d101      	bne.n	8008d7e <HAL_GPIO_Init+0x21a>
 8008d7a:	2309      	movs	r3, #9
 8008d7c:	e012      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d7e:	230a      	movs	r3, #10
 8008d80:	e010      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d82:	2308      	movs	r3, #8
 8008d84:	e00e      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d86:	2307      	movs	r3, #7
 8008d88:	e00c      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d8a:	2306      	movs	r3, #6
 8008d8c:	e00a      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d8e:	2305      	movs	r3, #5
 8008d90:	e008      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d92:	2304      	movs	r3, #4
 8008d94:	e006      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d96:	2303      	movs	r3, #3
 8008d98:	e004      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e002      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e000      	b.n	8008da4 <HAL_GPIO_Init+0x240>
 8008da2:	2300      	movs	r3, #0
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	f002 0203 	and.w	r2, r2, #3
 8008daa:	0092      	lsls	r2, r2, #2
 8008dac:	4093      	lsls	r3, r2
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008db4:	4934      	ldr	r1, [pc, #208]	; (8008e88 <HAL_GPIO_Init+0x324>)
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	089b      	lsrs	r3, r3, #2
 8008dba:	3302      	adds	r3, #2
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008dc2:	4b3c      	ldr	r3, [pc, #240]	; (8008eb4 <HAL_GPIO_Init+0x350>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	43db      	mvns	r3, r3
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008de6:	4a33      	ldr	r2, [pc, #204]	; (8008eb4 <HAL_GPIO_Init+0x350>)
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008dec:	4b31      	ldr	r3, [pc, #196]	; (8008eb4 <HAL_GPIO_Init+0x350>)
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	43db      	mvns	r3, r3
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e10:	4a28      	ldr	r2, [pc, #160]	; (8008eb4 <HAL_GPIO_Init+0x350>)
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e16:	4b27      	ldr	r3, [pc, #156]	; (8008eb4 <HAL_GPIO_Init+0x350>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	43db      	mvns	r3, r3
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	4013      	ands	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e3a:	4a1e      	ldr	r2, [pc, #120]	; (8008eb4 <HAL_GPIO_Init+0x350>)
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e40:	4b1c      	ldr	r3, [pc, #112]	; (8008eb4 <HAL_GPIO_Init+0x350>)
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008e5c:	69ba      	ldr	r2, [r7, #24]
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e64:	4a13      	ldr	r2, [pc, #76]	; (8008eb4 <HAL_GPIO_Init+0x350>)
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	61fb      	str	r3, [r7, #28]
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	f67f ae84 	bls.w	8008b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008e78:	bf00      	nop
 8008e7a:	3724      	adds	r7, #36	; 0x24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	40023800 	.word	0x40023800
 8008e88:	40013800 	.word	0x40013800
 8008e8c:	40020000 	.word	0x40020000
 8008e90:	40020400 	.word	0x40020400
 8008e94:	40020800 	.word	0x40020800
 8008e98:	40020c00 	.word	0x40020c00
 8008e9c:	40021000 	.word	0x40021000
 8008ea0:	40021400 	.word	0x40021400
 8008ea4:	40021800 	.word	0x40021800
 8008ea8:	40021c00 	.word	0x40021c00
 8008eac:	40022000 	.word	0x40022000
 8008eb0:	40022400 	.word	0x40022400
 8008eb4:	40013c00 	.word	0x40013c00

08008eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691a      	ldr	r2, [r3, #16]
 8008ec8:	887b      	ldrh	r3, [r7, #2]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	73fb      	strb	r3, [r7, #15]
 8008ed4:	e001      	b.n	8008eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	807b      	strh	r3, [r7, #2]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ef8:	787b      	ldrb	r3, [r7, #1]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008efe:	887a      	ldrh	r2, [r7, #2]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f04:	e003      	b.n	8008f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f06:	887b      	ldrh	r3, [r7, #2]
 8008f08:	041a      	lsls	r2, r3, #16
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	619a      	str	r2, [r3, #24]
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
	...

08008f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	4603      	mov	r3, r0
 8008f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008f26:	4b08      	ldr	r3, [pc, #32]	; (8008f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f28:	695a      	ldr	r2, [r3, #20]
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d006      	beq.n	8008f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f32:	4a05      	ldr	r2, [pc, #20]	; (8008f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f38:	88fb      	ldrh	r3, [r7, #6]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fb fbf8 	bl	8004730 <HAL_GPIO_EXTI_Callback>
  }
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40013c00 	.word	0x40013c00

08008f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e11f      	b.n	800919e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fc fc58 	bl	8005828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2224      	movs	r2, #36	; 0x24
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0201 	bic.w	r2, r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008fb0:	f001 f96e 	bl	800a290 <HAL_RCC_GetPCLK1Freq>
 8008fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	4a7b      	ldr	r2, [pc, #492]	; (80091a8 <HAL_I2C_Init+0x25c>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d807      	bhi.n	8008fd0 <HAL_I2C_Init+0x84>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4a7a      	ldr	r2, [pc, #488]	; (80091ac <HAL_I2C_Init+0x260>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	bf94      	ite	ls
 8008fc8:	2301      	movls	r3, #1
 8008fca:	2300      	movhi	r3, #0
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	e006      	b.n	8008fde <HAL_I2C_Init+0x92>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a77      	ldr	r2, [pc, #476]	; (80091b0 <HAL_I2C_Init+0x264>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	bf94      	ite	ls
 8008fd8:	2301      	movls	r3, #1
 8008fda:	2300      	movhi	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e0db      	b.n	800919e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4a72      	ldr	r2, [pc, #456]	; (80091b4 <HAL_I2C_Init+0x268>)
 8008fea:	fba2 2303 	umull	r2, r3, r2, r3
 8008fee:	0c9b      	lsrs	r3, r3, #18
 8008ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	430a      	orrs	r2, r1
 8009004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	4a64      	ldr	r2, [pc, #400]	; (80091a8 <HAL_I2C_Init+0x25c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d802      	bhi.n	8009020 <HAL_I2C_Init+0xd4>
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	3301      	adds	r3, #1
 800901e:	e009      	b.n	8009034 <HAL_I2C_Init+0xe8>
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009026:	fb02 f303 	mul.w	r3, r2, r3
 800902a:	4a63      	ldr	r2, [pc, #396]	; (80091b8 <HAL_I2C_Init+0x26c>)
 800902c:	fba2 2303 	umull	r2, r3, r2, r3
 8009030:	099b      	lsrs	r3, r3, #6
 8009032:	3301      	adds	r3, #1
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	6812      	ldr	r2, [r2, #0]
 8009038:	430b      	orrs	r3, r1
 800903a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009046:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	4956      	ldr	r1, [pc, #344]	; (80091a8 <HAL_I2C_Init+0x25c>)
 8009050:	428b      	cmp	r3, r1
 8009052:	d80d      	bhi.n	8009070 <HAL_I2C_Init+0x124>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	1e59      	subs	r1, r3, #1
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009062:	3301      	adds	r3, #1
 8009064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009068:	2b04      	cmp	r3, #4
 800906a:	bf38      	it	cc
 800906c:	2304      	movcc	r3, #4
 800906e:	e04f      	b.n	8009110 <HAL_I2C_Init+0x1c4>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d111      	bne.n	800909c <HAL_I2C_Init+0x150>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	1e58      	subs	r0, r3, #1
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6859      	ldr	r1, [r3, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	440b      	add	r3, r1
 8009086:	fbb0 f3f3 	udiv	r3, r0, r3
 800908a:	3301      	adds	r3, #1
 800908c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009090:	2b00      	cmp	r3, #0
 8009092:	bf0c      	ite	eq
 8009094:	2301      	moveq	r3, #1
 8009096:	2300      	movne	r3, #0
 8009098:	b2db      	uxtb	r3, r3
 800909a:	e012      	b.n	80090c2 <HAL_I2C_Init+0x176>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	1e58      	subs	r0, r3, #1
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6859      	ldr	r1, [r3, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	440b      	add	r3, r1
 80090aa:	0099      	lsls	r1, r3, #2
 80090ac:	440b      	add	r3, r1
 80090ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80090b2:	3301      	adds	r3, #1
 80090b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bf0c      	ite	eq
 80090bc:	2301      	moveq	r3, #1
 80090be:	2300      	movne	r3, #0
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <HAL_I2C_Init+0x17e>
 80090c6:	2301      	movs	r3, #1
 80090c8:	e022      	b.n	8009110 <HAL_I2C_Init+0x1c4>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10e      	bne.n	80090f0 <HAL_I2C_Init+0x1a4>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1e58      	subs	r0, r3, #1
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6859      	ldr	r1, [r3, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	440b      	add	r3, r1
 80090e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80090e4:	3301      	adds	r3, #1
 80090e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ee:	e00f      	b.n	8009110 <HAL_I2C_Init+0x1c4>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	1e58      	subs	r0, r3, #1
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6859      	ldr	r1, [r3, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	440b      	add	r3, r1
 80090fe:	0099      	lsls	r1, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	fbb0 f3f3 	udiv	r3, r0, r3
 8009106:	3301      	adds	r3, #1
 8009108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800910c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009110:	6879      	ldr	r1, [r7, #4]
 8009112:	6809      	ldr	r1, [r1, #0]
 8009114:	4313      	orrs	r3, r2
 8009116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	69da      	ldr	r2, [r3, #28]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800913e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6911      	ldr	r1, [r2, #16]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	68d2      	ldr	r2, [r2, #12]
 800914a:	4311      	orrs	r1, r2
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6812      	ldr	r2, [r2, #0]
 8009150:	430b      	orrs	r3, r1
 8009152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	695a      	ldr	r2, [r3, #20]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0201 	orr.w	r2, r2, #1
 800917e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2220      	movs	r2, #32
 800918a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	000186a0 	.word	0x000186a0
 80091ac:	001e847f 	.word	0x001e847f
 80091b0:	003d08ff 	.word	0x003d08ff
 80091b4:	431bde83 	.word	0x431bde83
 80091b8:	10624dd3 	.word	0x10624dd3

080091bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	607a      	str	r2, [r7, #4]
 80091c6:	461a      	mov	r2, r3
 80091c8:	460b      	mov	r3, r1
 80091ca:	817b      	strh	r3, [r7, #10]
 80091cc:	4613      	mov	r3, r2
 80091ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091d0:	f7fe fbe8 	bl	80079a4 <HAL_GetTick>
 80091d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b20      	cmp	r3, #32
 80091e0:	f040 80e0 	bne.w	80093a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2319      	movs	r3, #25
 80091ea:	2201      	movs	r2, #1
 80091ec:	4970      	ldr	r1, [pc, #448]	; (80093b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 fc58 	bl	8009aa4 <I2C_WaitOnFlagUntilTimeout>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80091fa:	2302      	movs	r3, #2
 80091fc:	e0d3      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009204:	2b01      	cmp	r3, #1
 8009206:	d101      	bne.n	800920c <HAL_I2C_Master_Transmit+0x50>
 8009208:	2302      	movs	r3, #2
 800920a:	e0cc      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b01      	cmp	r3, #1
 8009220:	d007      	beq.n	8009232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f042 0201 	orr.w	r2, r2, #1
 8009230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2221      	movs	r2, #33	; 0x21
 8009246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2210      	movs	r2, #16
 800924e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	893a      	ldrh	r2, [r7, #8]
 8009262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009268:	b29a      	uxth	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4a50      	ldr	r2, [pc, #320]	; (80093b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8009272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009274:	8979      	ldrh	r1, [r7, #10]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	6a3a      	ldr	r2, [r7, #32]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fac2 	bl	8009804 <I2C_MasterRequestWrite>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e08d      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800928a:	2300      	movs	r3, #0
 800928c:	613b      	str	r3, [r7, #16]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	613b      	str	r3, [r7, #16]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	613b      	str	r3, [r7, #16]
 800929e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80092a0:	e066      	b.n	8009370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	6a39      	ldr	r1, [r7, #32]
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 fcd2 	bl	8009c50 <I2C_WaitOnTXEFlagUntilTimeout>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00d      	beq.n	80092ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d107      	bne.n	80092ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e06b      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	781a      	ldrb	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	3b01      	subs	r3, #1
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f6:	3b01      	subs	r3, #1
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	f003 0304 	and.w	r3, r3, #4
 8009308:	2b04      	cmp	r3, #4
 800930a:	d11b      	bne.n	8009344 <HAL_I2C_Master_Transmit+0x188>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009310:	2b00      	cmp	r3, #0
 8009312:	d017      	beq.n	8009344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	781a      	ldrb	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29a      	uxth	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933c:	3b01      	subs	r3, #1
 800933e:	b29a      	uxth	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	6a39      	ldr	r1, [r7, #32]
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 fcc2 	bl	8009cd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00d      	beq.n	8009370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009358:	2b04      	cmp	r3, #4
 800935a:	d107      	bne.n	800936c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800936a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e01a      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009374:	2b00      	cmp	r3, #0
 8009376:	d194      	bne.n	80092a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e000      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80093a4:	2302      	movs	r3, #2
  }
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	00100002 	.word	0x00100002
 80093b4:	ffff0000 	.word	0xffff0000

080093b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08c      	sub	sp, #48	; 0x30
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	607a      	str	r2, [r7, #4]
 80093c2:	461a      	mov	r2, r3
 80093c4:	460b      	mov	r3, r1
 80093c6:	817b      	strh	r3, [r7, #10]
 80093c8:	4613      	mov	r3, r2
 80093ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093cc:	f7fe faea 	bl	80079a4 <HAL_GetTick>
 80093d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b20      	cmp	r3, #32
 80093dc:	f040 820b 	bne.w	80097f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	2319      	movs	r3, #25
 80093e6:	2201      	movs	r2, #1
 80093e8:	497c      	ldr	r1, [pc, #496]	; (80095dc <HAL_I2C_Master_Receive+0x224>)
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 fb5a 	bl	8009aa4 <I2C_WaitOnFlagUntilTimeout>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80093f6:	2302      	movs	r3, #2
 80093f8:	e1fe      	b.n	80097f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_I2C_Master_Receive+0x50>
 8009404:	2302      	movs	r3, #2
 8009406:	e1f7      	b.n	80097f8 <HAL_I2C_Master_Receive+0x440>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b01      	cmp	r3, #1
 800941c:	d007      	beq.n	800942e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f042 0201 	orr.w	r2, r2, #1
 800942c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800943c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2222      	movs	r2, #34	; 0x22
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2210      	movs	r2, #16
 800944a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	893a      	ldrh	r2, [r7, #8]
 800945e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4a5c      	ldr	r2, [pc, #368]	; (80095e0 <HAL_I2C_Master_Receive+0x228>)
 800946e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009470:	8979      	ldrh	r1, [r7, #10]
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 fa46 	bl	8009908 <I2C_MasterRequestRead>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e1b8      	b.n	80097f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	d113      	bne.n	80094b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800948e:	2300      	movs	r3, #0
 8009490:	623b      	str	r3, [r7, #32]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	623b      	str	r3, [r7, #32]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	623b      	str	r3, [r7, #32]
 80094a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	e18c      	b.n	80097d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d11b      	bne.n	80094f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094ce:	2300      	movs	r3, #0
 80094d0:	61fb      	str	r3, [r7, #28]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	61fb      	str	r3, [r7, #28]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	e16c      	b.n	80097d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d11b      	bne.n	8009536 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800950c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800951c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800951e:	2300      	movs	r3, #0
 8009520:	61bb      	str	r3, [r7, #24]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	61bb      	str	r3, [r7, #24]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	61bb      	str	r3, [r7, #24]
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	e14c      	b.n	80097d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009546:	2300      	movs	r3, #0
 8009548:	617b      	str	r3, [r7, #20]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	617b      	str	r3, [r7, #20]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800955c:	e138      	b.n	80097d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009562:	2b03      	cmp	r3, #3
 8009564:	f200 80f1 	bhi.w	800974a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800956c:	2b01      	cmp	r3, #1
 800956e:	d123      	bne.n	80095b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 fbed 	bl	8009d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e139      	b.n	80097f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691a      	ldr	r2, [r3, #16]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	b2d2      	uxtb	r2, r2
 8009590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	1c5a      	adds	r2, r3, #1
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a0:	3b01      	subs	r3, #1
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095b6:	e10b      	b.n	80097d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d14e      	bne.n	800965e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c6:	2200      	movs	r2, #0
 80095c8:	4906      	ldr	r1, [pc, #24]	; (80095e4 <HAL_I2C_Master_Receive+0x22c>)
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fa6a 	bl	8009aa4 <I2C_WaitOnFlagUntilTimeout>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d008      	beq.n	80095e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e10e      	b.n	80097f8 <HAL_I2C_Master_Receive+0x440>
 80095da:	bf00      	nop
 80095dc:	00100002 	.word	0x00100002
 80095e0:	ffff0000 	.word	0xffff0000
 80095e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	691a      	ldr	r2, [r3, #16]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	b2d2      	uxtb	r2, r2
 8009604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009614:	3b01      	subs	r3, #1
 8009616:	b29a      	uxth	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009620:	b29b      	uxth	r3, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	b29a      	uxth	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	691a      	ldr	r2, [r3, #16]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	b2d2      	uxtb	r2, r2
 8009636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009646:	3b01      	subs	r3, #1
 8009648:	b29a      	uxth	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009652:	b29b      	uxth	r3, r3
 8009654:	3b01      	subs	r3, #1
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800965c:	e0b8      	b.n	80097d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	2200      	movs	r2, #0
 8009666:	4966      	ldr	r1, [pc, #408]	; (8009800 <HAL_I2C_Master_Receive+0x448>)
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 fa1b 	bl	8009aa4 <I2C_WaitOnFlagUntilTimeout>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e0bf      	b.n	80097f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	691a      	ldr	r2, [r3, #16]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009692:	b2d2      	uxtb	r2, r2
 8009694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a4:	3b01      	subs	r3, #1
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	3b01      	subs	r3, #1
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	2200      	movs	r2, #0
 80096c2:	494f      	ldr	r1, [pc, #316]	; (8009800 <HAL_I2C_Master_Receive+0x448>)
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 f9ed 	bl	8009aa4 <I2C_WaitOnFlagUntilTimeout>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e091      	b.n	80097f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	691a      	ldr	r2, [r3, #16]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	b2d2      	uxtb	r2, r2
 80096f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	1c5a      	adds	r2, r3, #1
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009700:	3b01      	subs	r3, #1
 8009702:	b29a      	uxth	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800970c:	b29b      	uxth	r3, r3
 800970e:	3b01      	subs	r3, #1
 8009710:	b29a      	uxth	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	691a      	ldr	r2, [r3, #16]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	b2d2      	uxtb	r2, r2
 8009722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009732:	3b01      	subs	r3, #1
 8009734:	b29a      	uxth	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800973e:	b29b      	uxth	r3, r3
 8009740:	3b01      	subs	r3, #1
 8009742:	b29a      	uxth	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009748:	e042      	b.n	80097d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800974a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fb00 	bl	8009d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e04c      	b.n	80097f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	691a      	ldr	r2, [r3, #16]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009768:	b2d2      	uxtb	r2, r2
 800976a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800977a:	3b01      	subs	r3, #1
 800977c:	b29a      	uxth	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009786:	b29b      	uxth	r3, r3
 8009788:	3b01      	subs	r3, #1
 800978a:	b29a      	uxth	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	2b04      	cmp	r3, #4
 800979c:	d118      	bne.n	80097d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	691a      	ldr	r2, [r3, #16]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	b2d2      	uxtb	r2, r2
 80097aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b0:	1c5a      	adds	r2, r3, #1
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ba:	3b01      	subs	r3, #1
 80097bc:	b29a      	uxth	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	3b01      	subs	r3, #1
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f47f aec2 	bne.w	800955e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2220      	movs	r2, #32
 80097de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	e000      	b.n	80097f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80097f6:	2302      	movs	r3, #2
  }
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3728      	adds	r7, #40	; 0x28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	00010004 	.word	0x00010004

08009804 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af02      	add	r7, sp, #8
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	607a      	str	r2, [r7, #4]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	460b      	mov	r3, r1
 8009812:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009818:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b08      	cmp	r3, #8
 800981e:	d006      	beq.n	800982e <I2C_MasterRequestWrite+0x2a>
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d003      	beq.n	800982e <I2C_MasterRequestWrite+0x2a>
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800982c:	d108      	bne.n	8009840 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	e00b      	b.n	8009858 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	2b12      	cmp	r3, #18
 8009846:	d107      	bne.n	8009858 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009856:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f91d 	bl	8009aa4 <I2C_WaitOnFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00d      	beq.n	800988c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800987e:	d103      	bne.n	8009888 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009886:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e035      	b.n	80098f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009894:	d108      	bne.n	80098a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009896:	897b      	ldrh	r3, [r7, #10]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	461a      	mov	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098a4:	611a      	str	r2, [r3, #16]
 80098a6:	e01b      	b.n	80098e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80098a8:	897b      	ldrh	r3, [r7, #10]
 80098aa:	11db      	asrs	r3, r3, #7
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 0306 	and.w	r3, r3, #6
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f063 030f 	orn	r3, r3, #15
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	490e      	ldr	r1, [pc, #56]	; (8009900 <I2C_MasterRequestWrite+0xfc>)
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f000 f943 	bl	8009b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e010      	b.n	80098f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80098d6:	897b      	ldrh	r3, [r7, #10]
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	4907      	ldr	r1, [pc, #28]	; (8009904 <I2C_MasterRequestWrite+0x100>)
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 f933 	bl	8009b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	00010008 	.word	0x00010008
 8009904:	00010002 	.word	0x00010002

08009908 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af02      	add	r7, sp, #8
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	607a      	str	r2, [r7, #4]
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	460b      	mov	r3, r1
 8009916:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800992c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b08      	cmp	r3, #8
 8009932:	d006      	beq.n	8009942 <I2C_MasterRequestRead+0x3a>
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d003      	beq.n	8009942 <I2C_MasterRequestRead+0x3a>
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009940:	d108      	bne.n	8009954 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	e00b      	b.n	800996c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009958:	2b11      	cmp	r3, #17
 800995a:	d107      	bne.n	800996c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800996a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 f893 	bl	8009aa4 <I2C_WaitOnFlagUntilTimeout>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00d      	beq.n	80099a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800998e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009992:	d103      	bne.n	800999c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800999a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e079      	b.n	8009a94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099a8:	d108      	bne.n	80099bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80099aa:	897b      	ldrh	r3, [r7, #10]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	f043 0301 	orr.w	r3, r3, #1
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	611a      	str	r2, [r3, #16]
 80099ba:	e05f      	b.n	8009a7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80099bc:	897b      	ldrh	r3, [r7, #10]
 80099be:	11db      	asrs	r3, r3, #7
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	f003 0306 	and.w	r3, r3, #6
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	f063 030f 	orn	r3, r3, #15
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	4930      	ldr	r1, [pc, #192]	; (8009a9c <I2C_MasterRequestRead+0x194>)
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 f8b9 	bl	8009b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e054      	b.n	8009a94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80099ea:	897b      	ldrh	r3, [r7, #10]
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	4929      	ldr	r1, [pc, #164]	; (8009aa0 <I2C_MasterRequestRead+0x198>)
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 f8a9 	bl	8009b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e044      	b.n	8009a94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	613b      	str	r3, [r7, #16]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	613b      	str	r3, [r7, #16]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	613b      	str	r3, [r7, #16]
 8009a1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f831 	bl	8009aa4 <I2C_WaitOnFlagUntilTimeout>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00d      	beq.n	8009a64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a56:	d103      	bne.n	8009a60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e017      	b.n	8009a94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009a64:	897b      	ldrh	r3, [r7, #10]
 8009a66:	11db      	asrs	r3, r3, #7
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 0306 	and.w	r3, r3, #6
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	f063 030e 	orn	r3, r3, #14
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	4907      	ldr	r1, [pc, #28]	; (8009aa0 <I2C_MasterRequestRead+0x198>)
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 f865 	bl	8009b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e000      	b.n	8009a94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	00010008 	.word	0x00010008
 8009aa0:	00010002 	.word	0x00010002

08009aa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ab4:	e025      	b.n	8009b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abc:	d021      	beq.n	8009b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009abe:	f7fd ff71 	bl	80079a4 <HAL_GetTick>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d302      	bcc.n	8009ad4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d116      	bne.n	8009b02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2220      	movs	r2, #32
 8009ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	f043 0220 	orr.w	r2, r3, #32
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e023      	b.n	8009b4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	0c1b      	lsrs	r3, r3, #16
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d10d      	bne.n	8009b28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	43da      	mvns	r2, r3
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	4013      	ands	r3, r2
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	bf0c      	ite	eq
 8009b1e:	2301      	moveq	r3, #1
 8009b20:	2300      	movne	r3, #0
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	461a      	mov	r2, r3
 8009b26:	e00c      	b.n	8009b42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	43da      	mvns	r2, r3
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	4013      	ands	r3, r2
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bf0c      	ite	eq
 8009b3a:	2301      	moveq	r3, #1
 8009b3c:	2300      	movne	r3, #0
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	79fb      	ldrb	r3, [r7, #7]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d0b6      	beq.n	8009ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	60b9      	str	r1, [r7, #8]
 8009b5c:	607a      	str	r2, [r7, #4]
 8009b5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b60:	e051      	b.n	8009c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b70:	d123      	bne.n	8009bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2220      	movs	r2, #32
 8009b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	f043 0204 	orr.w	r2, r3, #4
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e046      	b.n	8009c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc0:	d021      	beq.n	8009c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc2:	f7fd feef 	bl	80079a4 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d302      	bcc.n	8009bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d116      	bne.n	8009c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	f043 0220 	orr.w	r2, r3, #32
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e020      	b.n	8009c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	0c1b      	lsrs	r3, r3, #16
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d10c      	bne.n	8009c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	43da      	mvns	r2, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	bf14      	ite	ne
 8009c22:	2301      	movne	r3, #1
 8009c24:	2300      	moveq	r3, #0
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	e00b      	b.n	8009c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	43da      	mvns	r2, r3
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	4013      	ands	r3, r2
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bf14      	ite	ne
 8009c3c:	2301      	movne	r3, #1
 8009c3e:	2300      	moveq	r3, #0
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d18d      	bne.n	8009b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c5c:	e02d      	b.n	8009cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 f8ce 	bl	8009e00 <I2C_IsAcknowledgeFailed>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e02d      	b.n	8009cca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c74:	d021      	beq.n	8009cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c76:	f7fd fe95 	bl	80079a4 <HAL_GetTick>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d302      	bcc.n	8009c8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d116      	bne.n	8009cba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2220      	movs	r2, #32
 8009c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	f043 0220 	orr.w	r2, r3, #32
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e007      	b.n	8009cca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc4:	2b80      	cmp	r3, #128	; 0x80
 8009cc6:	d1ca      	bne.n	8009c5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009cde:	e02d      	b.n	8009d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f88d 	bl	8009e00 <I2C_IsAcknowledgeFailed>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e02d      	b.n	8009d4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf6:	d021      	beq.n	8009d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cf8:	f7fd fe54 	bl	80079a4 <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d302      	bcc.n	8009d0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d116      	bne.n	8009d3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2220      	movs	r2, #32
 8009d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	f043 0220 	orr.w	r2, r3, #32
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e007      	b.n	8009d4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	f003 0304 	and.w	r3, r3, #4
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	d1ca      	bne.n	8009ce0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d60:	e042      	b.n	8009de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	f003 0310 	and.w	r3, r3, #16
 8009d6c:	2b10      	cmp	r3, #16
 8009d6e:	d119      	bne.n	8009da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f06f 0210 	mvn.w	r2, #16
 8009d78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2220      	movs	r2, #32
 8009d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e029      	b.n	8009df8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009da4:	f7fd fdfe 	bl	80079a4 <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d302      	bcc.n	8009dba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d116      	bne.n	8009de8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd4:	f043 0220 	orr.w	r2, r3, #32
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e007      	b.n	8009df8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df2:	2b40      	cmp	r3, #64	; 0x40
 8009df4:	d1b5      	bne.n	8009d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e16:	d11b      	bne.n	8009e50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2220      	movs	r2, #32
 8009e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3c:	f043 0204 	orr.w	r2, r3, #4
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e000      	b.n	8009e52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
	...

08009e60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	603b      	str	r3, [r7, #0]
 8009e6e:	4b20      	ldr	r3, [pc, #128]	; (8009ef0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e72:	4a1f      	ldr	r2, [pc, #124]	; (8009ef0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e78:	6413      	str	r3, [r2, #64]	; 0x40
 8009e7a:	4b1d      	ldr	r3, [pc, #116]	; (8009ef0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e82:	603b      	str	r3, [r7, #0]
 8009e84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009e86:	4b1b      	ldr	r3, [pc, #108]	; (8009ef4 <HAL_PWREx_EnableOverDrive+0x94>)
 8009e88:	2201      	movs	r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e8c:	f7fd fd8a 	bl	80079a4 <HAL_GetTick>
 8009e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e92:	e009      	b.n	8009ea8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009e94:	f7fd fd86 	bl	80079a4 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ea2:	d901      	bls.n	8009ea8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e01f      	b.n	8009ee8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009ea8:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eb4:	d1ee      	bne.n	8009e94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009eb6:	4b11      	ldr	r3, [pc, #68]	; (8009efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8009eb8:	2201      	movs	r2, #1
 8009eba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ebc:	f7fd fd72 	bl	80079a4 <HAL_GetTick>
 8009ec0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ec2:	e009      	b.n	8009ed8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009ec4:	f7fd fd6e 	bl	80079a4 <HAL_GetTick>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ed2:	d901      	bls.n	8009ed8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	e007      	b.n	8009ee8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ed8:	4b07      	ldr	r3, [pc, #28]	; (8009ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ee4:	d1ee      	bne.n	8009ec4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	40023800 	.word	0x40023800
 8009ef4:	420e0040 	.word	0x420e0040
 8009ef8:	40007000 	.word	0x40007000
 8009efc:	420e0044 	.word	0x420e0044

08009f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e0cc      	b.n	800a0ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f14:	4b68      	ldr	r3, [pc, #416]	; (800a0b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 030f 	and.w	r3, r3, #15
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d90c      	bls.n	8009f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f22:	4b65      	ldr	r3, [pc, #404]	; (800a0b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f2a:	4b63      	ldr	r3, [pc, #396]	; (800a0b8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 030f 	and.w	r3, r3, #15
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d001      	beq.n	8009f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e0b8      	b.n	800a0ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d020      	beq.n	8009f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0304 	and.w	r3, r3, #4
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d005      	beq.n	8009f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f54:	4b59      	ldr	r3, [pc, #356]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	4a58      	ldr	r2, [pc, #352]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0308 	and.w	r3, r3, #8
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d005      	beq.n	8009f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f6c:	4b53      	ldr	r3, [pc, #332]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	4a52      	ldr	r2, [pc, #328]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f78:	4b50      	ldr	r3, [pc, #320]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	494d      	ldr	r1, [pc, #308]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d044      	beq.n	800a020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d107      	bne.n	8009fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f9e:	4b47      	ldr	r3, [pc, #284]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d119      	bne.n	8009fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e07f      	b.n	800a0ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d003      	beq.n	8009fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d107      	bne.n	8009fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fbe:	4b3f      	ldr	r3, [pc, #252]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d109      	bne.n	8009fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e06f      	b.n	800a0ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fce:	4b3b      	ldr	r3, [pc, #236]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0302 	and.w	r3, r3, #2
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e067      	b.n	800a0ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fde:	4b37      	ldr	r3, [pc, #220]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f023 0203 	bic.w	r2, r3, #3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	4934      	ldr	r1, [pc, #208]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ff0:	f7fd fcd8 	bl	80079a4 <HAL_GetTick>
 8009ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ff6:	e00a      	b.n	800a00e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ff8:	f7fd fcd4 	bl	80079a4 <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	f241 3288 	movw	r2, #5000	; 0x1388
 800a006:	4293      	cmp	r3, r2
 800a008:	d901      	bls.n	800a00e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e04f      	b.n	800a0ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a00e:	4b2b      	ldr	r3, [pc, #172]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f003 020c 	and.w	r2, r3, #12
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d1eb      	bne.n	8009ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a020:	4b25      	ldr	r3, [pc, #148]	; (800a0b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d20c      	bcs.n	800a048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a02e:	4b22      	ldr	r3, [pc, #136]	; (800a0b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a036:	4b20      	ldr	r3, [pc, #128]	; (800a0b8 <HAL_RCC_ClockConfig+0x1b8>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 030f 	and.w	r3, r3, #15
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	429a      	cmp	r2, r3
 800a042:	d001      	beq.n	800a048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e032      	b.n	800a0ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b00      	cmp	r3, #0
 800a052:	d008      	beq.n	800a066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a054:	4b19      	ldr	r3, [pc, #100]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	4916      	ldr	r1, [pc, #88]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 800a062:	4313      	orrs	r3, r2
 800a064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0308 	and.w	r3, r3, #8
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a072:	4b12      	ldr	r3, [pc, #72]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	490e      	ldr	r1, [pc, #56]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 800a082:	4313      	orrs	r3, r2
 800a084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a086:	f000 f821 	bl	800a0cc <HAL_RCC_GetSysClockFreq>
 800a08a:	4601      	mov	r1, r0
 800a08c:	4b0b      	ldr	r3, [pc, #44]	; (800a0bc <HAL_RCC_ClockConfig+0x1bc>)
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	091b      	lsrs	r3, r3, #4
 800a092:	f003 030f 	and.w	r3, r3, #15
 800a096:	4a0a      	ldr	r2, [pc, #40]	; (800a0c0 <HAL_RCC_ClockConfig+0x1c0>)
 800a098:	5cd3      	ldrb	r3, [r2, r3]
 800a09a:	fa21 f303 	lsr.w	r3, r1, r3
 800a09e:	4a09      	ldr	r2, [pc, #36]	; (800a0c4 <HAL_RCC_ClockConfig+0x1c4>)
 800a0a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a0a2:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <HAL_RCC_ClockConfig+0x1c8>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fd fc38 	bl	800791c <HAL_InitTick>

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	40023c00 	.word	0x40023c00
 800a0bc:	40023800 	.word	0x40023800
 800a0c0:	08017db4 	.word	0x08017db4
 800a0c4:	20000000 	.word	0x20000000
 800a0c8:	20000004 	.word	0x20000004

0800a0cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	607b      	str	r3, [r7, #4]
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0e2:	4b63      	ldr	r3, [pc, #396]	; (800a270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	f003 030c 	and.w	r3, r3, #12
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d007      	beq.n	800a0fe <HAL_RCC_GetSysClockFreq+0x32>
 800a0ee:	2b08      	cmp	r3, #8
 800a0f0:	d008      	beq.n	800a104 <HAL_RCC_GetSysClockFreq+0x38>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f040 80b4 	bne.w	800a260 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a0f8:	4b5e      	ldr	r3, [pc, #376]	; (800a274 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a0fa:	60bb      	str	r3, [r7, #8]
       break;
 800a0fc:	e0b3      	b.n	800a266 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a0fe:	4b5d      	ldr	r3, [pc, #372]	; (800a274 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a100:	60bb      	str	r3, [r7, #8]
      break;
 800a102:	e0b0      	b.n	800a266 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a104:	4b5a      	ldr	r3, [pc, #360]	; (800a270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a10c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a10e:	4b58      	ldr	r3, [pc, #352]	; (800a270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d04a      	beq.n	800a1b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a11a:	4b55      	ldr	r3, [pc, #340]	; (800a270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	099b      	lsrs	r3, r3, #6
 800a120:	f04f 0400 	mov.w	r4, #0
 800a124:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a128:	f04f 0200 	mov.w	r2, #0
 800a12c:	ea03 0501 	and.w	r5, r3, r1
 800a130:	ea04 0602 	and.w	r6, r4, r2
 800a134:	4629      	mov	r1, r5
 800a136:	4632      	mov	r2, r6
 800a138:	f04f 0300 	mov.w	r3, #0
 800a13c:	f04f 0400 	mov.w	r4, #0
 800a140:	0154      	lsls	r4, r2, #5
 800a142:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a146:	014b      	lsls	r3, r1, #5
 800a148:	4619      	mov	r1, r3
 800a14a:	4622      	mov	r2, r4
 800a14c:	1b49      	subs	r1, r1, r5
 800a14e:	eb62 0206 	sbc.w	r2, r2, r6
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	f04f 0400 	mov.w	r4, #0
 800a15a:	0194      	lsls	r4, r2, #6
 800a15c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a160:	018b      	lsls	r3, r1, #6
 800a162:	1a5b      	subs	r3, r3, r1
 800a164:	eb64 0402 	sbc.w	r4, r4, r2
 800a168:	f04f 0100 	mov.w	r1, #0
 800a16c:	f04f 0200 	mov.w	r2, #0
 800a170:	00e2      	lsls	r2, r4, #3
 800a172:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a176:	00d9      	lsls	r1, r3, #3
 800a178:	460b      	mov	r3, r1
 800a17a:	4614      	mov	r4, r2
 800a17c:	195b      	adds	r3, r3, r5
 800a17e:	eb44 0406 	adc.w	r4, r4, r6
 800a182:	f04f 0100 	mov.w	r1, #0
 800a186:	f04f 0200 	mov.w	r2, #0
 800a18a:	02a2      	lsls	r2, r4, #10
 800a18c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a190:	0299      	lsls	r1, r3, #10
 800a192:	460b      	mov	r3, r1
 800a194:	4614      	mov	r4, r2
 800a196:	4618      	mov	r0, r3
 800a198:	4621      	mov	r1, r4
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f04f 0400 	mov.w	r4, #0
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	4623      	mov	r3, r4
 800a1a4:	f7f6 fd88 	bl	8000cb8 <__aeabi_uldivmod>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	60fb      	str	r3, [r7, #12]
 800a1ae:	e049      	b.n	800a244 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1b0:	4b2f      	ldr	r3, [pc, #188]	; (800a270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	099b      	lsrs	r3, r3, #6
 800a1b6:	f04f 0400 	mov.w	r4, #0
 800a1ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a1be:	f04f 0200 	mov.w	r2, #0
 800a1c2:	ea03 0501 	and.w	r5, r3, r1
 800a1c6:	ea04 0602 	and.w	r6, r4, r2
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	f04f 0300 	mov.w	r3, #0
 800a1d2:	f04f 0400 	mov.w	r4, #0
 800a1d6:	0154      	lsls	r4, r2, #5
 800a1d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a1dc:	014b      	lsls	r3, r1, #5
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	1b49      	subs	r1, r1, r5
 800a1e4:	eb62 0206 	sbc.w	r2, r2, r6
 800a1e8:	f04f 0300 	mov.w	r3, #0
 800a1ec:	f04f 0400 	mov.w	r4, #0
 800a1f0:	0194      	lsls	r4, r2, #6
 800a1f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a1f6:	018b      	lsls	r3, r1, #6
 800a1f8:	1a5b      	subs	r3, r3, r1
 800a1fa:	eb64 0402 	sbc.w	r4, r4, r2
 800a1fe:	f04f 0100 	mov.w	r1, #0
 800a202:	f04f 0200 	mov.w	r2, #0
 800a206:	00e2      	lsls	r2, r4, #3
 800a208:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a20c:	00d9      	lsls	r1, r3, #3
 800a20e:	460b      	mov	r3, r1
 800a210:	4614      	mov	r4, r2
 800a212:	195b      	adds	r3, r3, r5
 800a214:	eb44 0406 	adc.w	r4, r4, r6
 800a218:	f04f 0100 	mov.w	r1, #0
 800a21c:	f04f 0200 	mov.w	r2, #0
 800a220:	02a2      	lsls	r2, r4, #10
 800a222:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a226:	0299      	lsls	r1, r3, #10
 800a228:	460b      	mov	r3, r1
 800a22a:	4614      	mov	r4, r2
 800a22c:	4618      	mov	r0, r3
 800a22e:	4621      	mov	r1, r4
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f04f 0400 	mov.w	r4, #0
 800a236:	461a      	mov	r2, r3
 800a238:	4623      	mov	r3, r4
 800a23a:	f7f6 fd3d 	bl	8000cb8 <__aeabi_uldivmod>
 800a23e:	4603      	mov	r3, r0
 800a240:	460c      	mov	r4, r1
 800a242:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a244:	4b0a      	ldr	r3, [pc, #40]	; (800a270 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	0c1b      	lsrs	r3, r3, #16
 800a24a:	f003 0303 	and.w	r3, r3, #3
 800a24e:	3301      	adds	r3, #1
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	fbb2 f3f3 	udiv	r3, r2, r3
 800a25c:	60bb      	str	r3, [r7, #8]
      break;
 800a25e:	e002      	b.n	800a266 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a260:	4b04      	ldr	r3, [pc, #16]	; (800a274 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a262:	60bb      	str	r3, [r7, #8]
      break;
 800a264:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a266:	68bb      	ldr	r3, [r7, #8]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a270:	40023800 	.word	0x40023800
 800a274:	00f42400 	.word	0x00f42400

0800a278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a278:	b480      	push	{r7}
 800a27a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a27c:	4b03      	ldr	r3, [pc, #12]	; (800a28c <HAL_RCC_GetHCLKFreq+0x14>)
 800a27e:	681b      	ldr	r3, [r3, #0]
}
 800a280:	4618      	mov	r0, r3
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000000 	.word	0x20000000

0800a290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a294:	f7ff fff0 	bl	800a278 <HAL_RCC_GetHCLKFreq>
 800a298:	4601      	mov	r1, r0
 800a29a:	4b05      	ldr	r3, [pc, #20]	; (800a2b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	0a9b      	lsrs	r3, r3, #10
 800a2a0:	f003 0307 	and.w	r3, r3, #7
 800a2a4:	4a03      	ldr	r2, [pc, #12]	; (800a2b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2a6:	5cd3      	ldrb	r3, [r2, r3]
 800a2a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	40023800 	.word	0x40023800
 800a2b4:	08017dc4 	.word	0x08017dc4

0800a2b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a2bc:	f7ff ffdc 	bl	800a278 <HAL_RCC_GetHCLKFreq>
 800a2c0:	4601      	mov	r1, r0
 800a2c2:	4b05      	ldr	r3, [pc, #20]	; (800a2d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	0b5b      	lsrs	r3, r3, #13
 800a2c8:	f003 0307 	and.w	r3, r3, #7
 800a2cc:	4a03      	ldr	r2, [pc, #12]	; (800a2dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2ce:	5cd3      	ldrb	r3, [r2, r3]
 800a2d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	40023800 	.word	0x40023800
 800a2dc:	08017dc4 	.word	0x08017dc4

0800a2e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00a      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a308:	4b66      	ldr	r3, [pc, #408]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a30a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a30e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a316:	4963      	ldr	r1, [pc, #396]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00a      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a32a:	4b5e      	ldr	r3, [pc, #376]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a330:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	495a      	ldr	r1, [pc, #360]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0301 	and.w	r3, r3, #1
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10b      	bne.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a354:	2b00      	cmp	r3, #0
 800a356:	d105      	bne.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a360:	2b00      	cmp	r3, #0
 800a362:	d075      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a364:	4b50      	ldr	r3, [pc, #320]	; (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a366:	2200      	movs	r2, #0
 800a368:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a36a:	f7fd fb1b 	bl	80079a4 <HAL_GetTick>
 800a36e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a370:	e008      	b.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a372:	f7fd fb17 	bl	80079a4 <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d901      	bls.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a380:	2303      	movs	r3, #3
 800a382:	e1dc      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a384:	4b47      	ldr	r3, [pc, #284]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1f0      	bne.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d009      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	019a      	lsls	r2, r3, #6
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	071b      	lsls	r3, r3, #28
 800a3a8:	493e      	ldr	r1, [pc, #248]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0302 	and.w	r3, r3, #2
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d01f      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a3bc:	4b39      	ldr	r3, [pc, #228]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3c2:	0f1b      	lsrs	r3, r3, #28
 800a3c4:	f003 0307 	and.w	r3, r3, #7
 800a3c8:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	019a      	lsls	r2, r3, #6
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	061b      	lsls	r3, r3, #24
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	071b      	lsls	r3, r3, #28
 800a3dc:	4931      	ldr	r1, [pc, #196]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a3e4:	4b2f      	ldr	r3, [pc, #188]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3ea:	f023 021f 	bic.w	r2, r3, #31
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	492b      	ldr	r1, [pc, #172]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00d      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	019a      	lsls	r2, r3, #6
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	061b      	lsls	r3, r3, #24
 800a414:	431a      	orrs	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	071b      	lsls	r3, r3, #28
 800a41c:	4921      	ldr	r1, [pc, #132]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a424:	4b20      	ldr	r3, [pc, #128]	; (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a426:	2201      	movs	r2, #1
 800a428:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a42a:	f7fd fabb 	bl	80079a4 <HAL_GetTick>
 800a42e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a430:	e008      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a432:	f7fd fab7 	bl	80079a4 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d901      	bls.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e17c      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a444:	4b17      	ldr	r3, [pc, #92]	; (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0f0      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0304 	and.w	r3, r3, #4
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d112      	bne.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10c      	bne.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 80ce 	beq.w	800a612 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a47a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a47e:	f040 80c8 	bne.w	800a612 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a482:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a484:	2200      	movs	r2, #0
 800a486:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a488:	f7fd fa8c 	bl	80079a4 <HAL_GetTick>
 800a48c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a48e:	e00f      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a490:	f7fd fa88 	bl	80079a4 <HAL_GetTick>
 800a494:	4602      	mov	r2, r0
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d908      	bls.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a49e:	2303      	movs	r3, #3
 800a4a0:	e14d      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800a4a2:	bf00      	nop
 800a4a4:	40023800 	.word	0x40023800
 800a4a8:	42470068 	.word	0x42470068
 800a4ac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a4b0:	4ba5      	ldr	r3, [pc, #660]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4bc:	d0e8      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 0304 	and.w	r3, r3, #4
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d02e      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a4ca:	4b9f      	ldr	r3, [pc, #636]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d0:	0c1b      	lsrs	r3, r3, #16
 800a4d2:	f003 0303 	and.w	r3, r3, #3
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a4dc:	4b9a      	ldr	r3, [pc, #616]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e2:	0f1b      	lsrs	r3, r3, #28
 800a4e4:	f003 0307 	and.w	r3, r3, #7
 800a4e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	019a      	lsls	r2, r3, #6
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	085b      	lsrs	r3, r3, #1
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	041b      	lsls	r3, r3, #16
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	061b      	lsls	r3, r3, #24
 800a500:	431a      	orrs	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	071b      	lsls	r3, r3, #28
 800a506:	4990      	ldr	r1, [pc, #576]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a50e:	4b8e      	ldr	r3, [pc, #568]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a514:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	3b01      	subs	r3, #1
 800a51e:	021b      	lsls	r3, r3, #8
 800a520:	4989      	ldr	r1, [pc, #548]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a522:	4313      	orrs	r3, r2
 800a524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0308 	and.w	r3, r3, #8
 800a530:	2b00      	cmp	r3, #0
 800a532:	d02c      	beq.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a534:	4b84      	ldr	r3, [pc, #528]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a53a:	0c1b      	lsrs	r3, r3, #16
 800a53c:	f003 0303 	and.w	r3, r3, #3
 800a540:	3301      	adds	r3, #1
 800a542:	005b      	lsls	r3, r3, #1
 800a544:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a546:	4b80      	ldr	r3, [pc, #512]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54c:	0e1b      	lsrs	r3, r3, #24
 800a54e:	f003 030f 	and.w	r3, r3, #15
 800a552:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	019a      	lsls	r2, r3, #6
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	085b      	lsrs	r3, r3, #1
 800a55e:	3b01      	subs	r3, #1
 800a560:	041b      	lsls	r3, r3, #16
 800a562:	431a      	orrs	r2, r3
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	061b      	lsls	r3, r3, #24
 800a568:	431a      	orrs	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	69db      	ldr	r3, [r3, #28]
 800a56e:	071b      	lsls	r3, r3, #28
 800a570:	4975      	ldr	r1, [pc, #468]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a572:	4313      	orrs	r3, r2
 800a574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a578:	4b73      	ldr	r3, [pc, #460]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a57a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a57e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a586:	4970      	ldr	r1, [pc, #448]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a596:	2b00      	cmp	r3, #0
 800a598:	d024      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a59e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5a2:	d11f      	bne.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a5a4:	4b68      	ldr	r3, [pc, #416]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5aa:	0e1b      	lsrs	r3, r3, #24
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a5b2:	4b65      	ldr	r3, [pc, #404]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b8:	0f1b      	lsrs	r3, r3, #28
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	019a      	lsls	r2, r3, #6
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	085b      	lsrs	r3, r3, #1
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	041b      	lsls	r3, r3, #16
 800a5d0:	431a      	orrs	r2, r3
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	061b      	lsls	r3, r3, #24
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	071b      	lsls	r3, r3, #28
 800a5dc:	495a      	ldr	r1, [pc, #360]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a5e4:	4b59      	ldr	r3, [pc, #356]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a5ea:	f7fd f9db 	bl	80079a4 <HAL_GetTick>
 800a5ee:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a5f0:	e008      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a5f2:	f7fd f9d7 	bl	80079a4 <HAL_GetTick>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d901      	bls.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a600:	2303      	movs	r3, #3
 800a602:	e09c      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a604:	4b50      	ldr	r3, [pc, #320]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a60c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a610:	d1ef      	bne.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0320 	and.w	r3, r3, #32
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 8083 	beq.w	800a726 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a620:	2300      	movs	r3, #0
 800a622:	60bb      	str	r3, [r7, #8]
 800a624:	4b48      	ldr	r3, [pc, #288]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a628:	4a47      	ldr	r2, [pc, #284]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a62a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a62e:	6413      	str	r3, [r2, #64]	; 0x40
 800a630:	4b45      	ldr	r3, [pc, #276]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a638:	60bb      	str	r3, [r7, #8]
 800a63a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a63c:	4b44      	ldr	r3, [pc, #272]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a43      	ldr	r2, [pc, #268]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a646:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a648:	f7fd f9ac 	bl	80079a4 <HAL_GetTick>
 800a64c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a64e:	e008      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a650:	f7fd f9a8 	bl	80079a4 <HAL_GetTick>
 800a654:	4602      	mov	r2, r0
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d901      	bls.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e06d      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a662:	4b3b      	ldr	r3, [pc, #236]	; (800a750 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0f0      	beq.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a66e:	4b36      	ldr	r3, [pc, #216]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a676:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d02f      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d028      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a68c:	4b2e      	ldr	r3, [pc, #184]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a68e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a694:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a696:	4b2f      	ldr	r3, [pc, #188]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a698:	2201      	movs	r2, #1
 800a69a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a69c:	4b2d      	ldr	r3, [pc, #180]	; (800a754 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a6a2:	4a29      	ldr	r2, [pc, #164]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a6a8:	4b27      	ldr	r3, [pc, #156]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ac:	f003 0301 	and.w	r3, r3, #1
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d114      	bne.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a6b4:	f7fd f976 	bl	80079a4 <HAL_GetTick>
 800a6b8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6ba:	e00a      	b.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a6bc:	f7fd f972 	bl	80079a4 <HAL_GetTick>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d901      	bls.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	e035      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6d2:	4b1d      	ldr	r3, [pc, #116]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d6:	f003 0302 	and.w	r3, r3, #2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0ee      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6ea:	d10d      	bne.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a6ec:	4b16      	ldr	r3, [pc, #88]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a6fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a700:	4911      	ldr	r1, [pc, #68]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a702:	4313      	orrs	r3, r2
 800a704:	608b      	str	r3, [r1, #8]
 800a706:	e005      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a708:	4b0f      	ldr	r3, [pc, #60]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	4a0e      	ldr	r2, [pc, #56]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a70e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a712:	6093      	str	r3, [r2, #8]
 800a714:	4b0c      	ldr	r3, [pc, #48]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a720:	4909      	ldr	r1, [pc, #36]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a722:	4313      	orrs	r3, r2
 800a724:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0310 	and.w	r3, r3, #16
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d004      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a738:	4b07      	ldr	r3, [pc, #28]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800a73a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3720      	adds	r7, #32
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	40023800 	.word	0x40023800
 800a74c:	42470070 	.word	0x42470070
 800a750:	40007000 	.word	0x40007000
 800a754:	42470e40 	.word	0x42470e40
 800a758:	424711e0 	.word	0x424711e0

0800a75c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b086      	sub	sp, #24
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	2b00      	cmp	r3, #0
 800a772:	d075      	beq.n	800a860 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a774:	4ba2      	ldr	r3, [pc, #648]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	f003 030c 	and.w	r3, r3, #12
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	d00c      	beq.n	800a79a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a780:	4b9f      	ldr	r3, [pc, #636]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a788:	2b08      	cmp	r3, #8
 800a78a:	d112      	bne.n	800a7b2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a78c:	4b9c      	ldr	r3, [pc, #624]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a798:	d10b      	bne.n	800a7b2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a79a:	4b99      	ldr	r3, [pc, #612]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d05b      	beq.n	800a85e <HAL_RCC_OscConfig+0x102>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d157      	bne.n	800a85e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e20b      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ba:	d106      	bne.n	800a7ca <HAL_RCC_OscConfig+0x6e>
 800a7bc:	4b90      	ldr	r3, [pc, #576]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a8f      	ldr	r2, [pc, #572]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a7c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	e01d      	b.n	800a806 <HAL_RCC_OscConfig+0xaa>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a7d2:	d10c      	bne.n	800a7ee <HAL_RCC_OscConfig+0x92>
 800a7d4:	4b8a      	ldr	r3, [pc, #552]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a89      	ldr	r2, [pc, #548]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a7da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	4b87      	ldr	r3, [pc, #540]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a86      	ldr	r2, [pc, #536]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a7e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7ea:	6013      	str	r3, [r2, #0]
 800a7ec:	e00b      	b.n	800a806 <HAL_RCC_OscConfig+0xaa>
 800a7ee:	4b84      	ldr	r3, [pc, #528]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a83      	ldr	r2, [pc, #524]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a7f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7f8:	6013      	str	r3, [r2, #0]
 800a7fa:	4b81      	ldr	r3, [pc, #516]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a80      	ldr	r2, [pc, #512]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a804:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d013      	beq.n	800a836 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80e:	f7fd f8c9 	bl	80079a4 <HAL_GetTick>
 800a812:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a814:	e008      	b.n	800a828 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a816:	f7fd f8c5 	bl	80079a4 <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b64      	cmp	r3, #100	; 0x64
 800a822:	d901      	bls.n	800a828 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e1d0      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a828:	4b75      	ldr	r3, [pc, #468]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a830:	2b00      	cmp	r3, #0
 800a832:	d0f0      	beq.n	800a816 <HAL_RCC_OscConfig+0xba>
 800a834:	e014      	b.n	800a860 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a836:	f7fd f8b5 	bl	80079a4 <HAL_GetTick>
 800a83a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a83c:	e008      	b.n	800a850 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a83e:	f7fd f8b1 	bl	80079a4 <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	2b64      	cmp	r3, #100	; 0x64
 800a84a:	d901      	bls.n	800a850 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e1bc      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a850:	4b6b      	ldr	r3, [pc, #428]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1f0      	bne.n	800a83e <HAL_RCC_OscConfig+0xe2>
 800a85c:	e000      	b.n	800a860 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a85e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0302 	and.w	r3, r3, #2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d063      	beq.n	800a934 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a86c:	4b64      	ldr	r3, [pc, #400]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	f003 030c 	and.w	r3, r3, #12
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00b      	beq.n	800a890 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a878:	4b61      	ldr	r3, [pc, #388]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a880:	2b08      	cmp	r3, #8
 800a882:	d11c      	bne.n	800a8be <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a884:	4b5e      	ldr	r3, [pc, #376]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d116      	bne.n	800a8be <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a890:	4b5b      	ldr	r3, [pc, #364]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d005      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x14c>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d001      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e190      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8a8:	4b55      	ldr	r3, [pc, #340]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	00db      	lsls	r3, r3, #3
 800a8b6:	4952      	ldr	r1, [pc, #328]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a8bc:	e03a      	b.n	800a934 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d020      	beq.n	800a908 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a8c6:	4b4f      	ldr	r3, [pc, #316]	; (800aa04 <HAL_RCC_OscConfig+0x2a8>)
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8cc:	f7fd f86a 	bl	80079a4 <HAL_GetTick>
 800a8d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8d2:	e008      	b.n	800a8e6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8d4:	f7fd f866 	bl	80079a4 <HAL_GetTick>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d901      	bls.n	800a8e6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e171      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8e6:	4b46      	ldr	r3, [pc, #280]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0f0      	beq.n	800a8d4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8f2:	4b43      	ldr	r3, [pc, #268]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	493f      	ldr	r1, [pc, #252]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a902:	4313      	orrs	r3, r2
 800a904:	600b      	str	r3, [r1, #0]
 800a906:	e015      	b.n	800a934 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a908:	4b3e      	ldr	r3, [pc, #248]	; (800aa04 <HAL_RCC_OscConfig+0x2a8>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a90e:	f7fd f849 	bl	80079a4 <HAL_GetTick>
 800a912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a914:	e008      	b.n	800a928 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a916:	f7fd f845 	bl	80079a4 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	2b02      	cmp	r3, #2
 800a922:	d901      	bls.n	800a928 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a924:	2303      	movs	r3, #3
 800a926:	e150      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a928:	4b35      	ldr	r3, [pc, #212]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 0302 	and.w	r3, r3, #2
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1f0      	bne.n	800a916 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0308 	and.w	r3, r3, #8
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d030      	beq.n	800a9a2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d016      	beq.n	800a976 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a948:	4b2f      	ldr	r3, [pc, #188]	; (800aa08 <HAL_RCC_OscConfig+0x2ac>)
 800a94a:	2201      	movs	r2, #1
 800a94c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a94e:	f7fd f829 	bl	80079a4 <HAL_GetTick>
 800a952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a954:	e008      	b.n	800a968 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a956:	f7fd f825 	bl	80079a4 <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	2b02      	cmp	r3, #2
 800a962:	d901      	bls.n	800a968 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e130      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a968:	4b25      	ldr	r3, [pc, #148]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a96a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a96c:	f003 0302 	and.w	r3, r3, #2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0f0      	beq.n	800a956 <HAL_RCC_OscConfig+0x1fa>
 800a974:	e015      	b.n	800a9a2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a976:	4b24      	ldr	r3, [pc, #144]	; (800aa08 <HAL_RCC_OscConfig+0x2ac>)
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a97c:	f7fd f812 	bl	80079a4 <HAL_GetTick>
 800a980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a982:	e008      	b.n	800a996 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a984:	f7fd f80e 	bl	80079a4 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d901      	bls.n	800a996 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a992:	2303      	movs	r3, #3
 800a994:	e119      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a996:	4b1a      	ldr	r3, [pc, #104]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a99a:	f003 0302 	and.w	r3, r3, #2
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1f0      	bne.n	800a984 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0304 	and.w	r3, r3, #4
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 809f 	beq.w	800aaee <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9b4:	4b12      	ldr	r3, [pc, #72]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10f      	bne.n	800a9e0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	4b0e      	ldr	r3, [pc, #56]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c8:	4a0d      	ldr	r2, [pc, #52]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a9ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9ce:	6413      	str	r3, [r2, #64]	; 0x40
 800a9d0:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <HAL_RCC_OscConfig+0x2a4>)
 800a9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9d8:	60fb      	str	r3, [r7, #12]
 800a9da:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9e0:	4b0a      	ldr	r3, [pc, #40]	; (800aa0c <HAL_RCC_OscConfig+0x2b0>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d120      	bne.n	800aa2e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9ec:	4b07      	ldr	r3, [pc, #28]	; (800aa0c <HAL_RCC_OscConfig+0x2b0>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a06      	ldr	r2, [pc, #24]	; (800aa0c <HAL_RCC_OscConfig+0x2b0>)
 800a9f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9f8:	f7fc ffd4 	bl	80079a4 <HAL_GetTick>
 800a9fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9fe:	e010      	b.n	800aa22 <HAL_RCC_OscConfig+0x2c6>
 800aa00:	40023800 	.word	0x40023800
 800aa04:	42470000 	.word	0x42470000
 800aa08:	42470e80 	.word	0x42470e80
 800aa0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa10:	f7fc ffc8 	bl	80079a4 <HAL_GetTick>
 800aa14:	4602      	mov	r2, r0
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d901      	bls.n	800aa22 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e0d3      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa22:	4b6c      	ldr	r3, [pc, #432]	; (800abd4 <HAL_RCC_OscConfig+0x478>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0f0      	beq.n	800aa10 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d106      	bne.n	800aa44 <HAL_RCC_OscConfig+0x2e8>
 800aa36:	4b68      	ldr	r3, [pc, #416]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3a:	4a67      	ldr	r2, [pc, #412]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aa3c:	f043 0301 	orr.w	r3, r3, #1
 800aa40:	6713      	str	r3, [r2, #112]	; 0x70
 800aa42:	e01c      	b.n	800aa7e <HAL_RCC_OscConfig+0x322>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	2b05      	cmp	r3, #5
 800aa4a:	d10c      	bne.n	800aa66 <HAL_RCC_OscConfig+0x30a>
 800aa4c:	4b62      	ldr	r3, [pc, #392]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aa4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa50:	4a61      	ldr	r2, [pc, #388]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aa52:	f043 0304 	orr.w	r3, r3, #4
 800aa56:	6713      	str	r3, [r2, #112]	; 0x70
 800aa58:	4b5f      	ldr	r3, [pc, #380]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aa5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5c:	4a5e      	ldr	r2, [pc, #376]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aa5e:	f043 0301 	orr.w	r3, r3, #1
 800aa62:	6713      	str	r3, [r2, #112]	; 0x70
 800aa64:	e00b      	b.n	800aa7e <HAL_RCC_OscConfig+0x322>
 800aa66:	4b5c      	ldr	r3, [pc, #368]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aa68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6a:	4a5b      	ldr	r2, [pc, #364]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aa6c:	f023 0301 	bic.w	r3, r3, #1
 800aa70:	6713      	str	r3, [r2, #112]	; 0x70
 800aa72:	4b59      	ldr	r3, [pc, #356]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aa74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa76:	4a58      	ldr	r2, [pc, #352]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aa78:	f023 0304 	bic.w	r3, r3, #4
 800aa7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d015      	beq.n	800aab2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa86:	f7fc ff8d 	bl	80079a4 <HAL_GetTick>
 800aa8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa8c:	e00a      	b.n	800aaa4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa8e:	f7fc ff89 	bl	80079a4 <HAL_GetTick>
 800aa92:	4602      	mov	r2, r0
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d901      	bls.n	800aaa4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e092      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aaa4:	4b4c      	ldr	r3, [pc, #304]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aaa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0ee      	beq.n	800aa8e <HAL_RCC_OscConfig+0x332>
 800aab0:	e014      	b.n	800aadc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aab2:	f7fc ff77 	bl	80079a4 <HAL_GetTick>
 800aab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aab8:	e00a      	b.n	800aad0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aaba:	f7fc ff73 	bl	80079a4 <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d901      	bls.n	800aad0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e07c      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aad0:	4b41      	ldr	r3, [pc, #260]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1ee      	bne.n	800aaba <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aadc:	7dfb      	ldrb	r3, [r7, #23]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d105      	bne.n	800aaee <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aae2:	4b3d      	ldr	r3, [pc, #244]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	4a3c      	ldr	r2, [pc, #240]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aaec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d068      	beq.n	800abc8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aaf6:	4b38      	ldr	r3, [pc, #224]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f003 030c 	and.w	r3, r3, #12
 800aafe:	2b08      	cmp	r3, #8
 800ab00:	d060      	beq.n	800abc4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d145      	bne.n	800ab96 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab0a:	4b34      	ldr	r3, [pc, #208]	; (800abdc <HAL_RCC_OscConfig+0x480>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab10:	f7fc ff48 	bl	80079a4 <HAL_GetTick>
 800ab14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab16:	e008      	b.n	800ab2a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab18:	f7fc ff44 	bl	80079a4 <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d901      	bls.n	800ab2a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e04f      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab2a:	4b2b      	ldr	r3, [pc, #172]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1f0      	bne.n	800ab18 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	69da      	ldr	r2, [r3, #28]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab44:	019b      	lsls	r3, r3, #6
 800ab46:	431a      	orrs	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4c:	085b      	lsrs	r3, r3, #1
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	041b      	lsls	r3, r3, #16
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	061b      	lsls	r3, r3, #24
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab60:	071b      	lsls	r3, r3, #28
 800ab62:	491d      	ldr	r1, [pc, #116]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab68:	4b1c      	ldr	r3, [pc, #112]	; (800abdc <HAL_RCC_OscConfig+0x480>)
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab6e:	f7fc ff19 	bl	80079a4 <HAL_GetTick>
 800ab72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab74:	e008      	b.n	800ab88 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab76:	f7fc ff15 	bl	80079a4 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d901      	bls.n	800ab88 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e020      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab88:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0f0      	beq.n	800ab76 <HAL_RCC_OscConfig+0x41a>
 800ab94:	e018      	b.n	800abc8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab96:	4b11      	ldr	r3, [pc, #68]	; (800abdc <HAL_RCC_OscConfig+0x480>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab9c:	f7fc ff02 	bl	80079a4 <HAL_GetTick>
 800aba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aba2:	e008      	b.n	800abb6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aba4:	f7fc fefe 	bl	80079a4 <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d901      	bls.n	800abb6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e009      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abb6:	4b08      	ldr	r3, [pc, #32]	; (800abd8 <HAL_RCC_OscConfig+0x47c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1f0      	bne.n	800aba4 <HAL_RCC_OscConfig+0x448>
 800abc2:	e001      	b.n	800abc8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e000      	b.n	800abca <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3718      	adds	r7, #24
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	40007000 	.word	0x40007000
 800abd8:	40023800 	.word	0x40023800
 800abdc:	42470060 	.word	0x42470060

0800abe0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e022      	b.n	800ac38 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d105      	bne.n	800ac0a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7fa fe8b 	bl	8005920 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2203      	movs	r2, #3
 800ac0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f814 	bl	800ac40 <HAL_SD_InitCard>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e00a      	b.n	800ac38 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac40:	b5b0      	push	{r4, r5, r7, lr}
 800ac42:	b08e      	sub	sp, #56	; 0x38
 800ac44:	af04      	add	r7, sp, #16
 800ac46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ac50:	2300      	movs	r3, #0
 800ac52:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ac54:	2300      	movs	r3, #0
 800ac56:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ac5c:	2376      	movs	r3, #118	; 0x76
 800ac5e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681d      	ldr	r5, [r3, #0]
 800ac64:	466c      	mov	r4, sp
 800ac66:	f107 0314 	add.w	r3, r7, #20
 800ac6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f003 fa87 	bl	800e18c <SDIO_Init>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ac84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e031      	b.n	800acf4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800ac90:	4b1a      	ldr	r3, [pc, #104]	; (800acfc <HAL_SD_InitCard+0xbc>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f003 fabf 	bl	800e21e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800aca0:	4b16      	ldr	r3, [pc, #88]	; (800acfc <HAL_SD_InitCard+0xbc>)
 800aca2:	2201      	movs	r2, #1
 800aca4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 ffc6 	bl	800bc38 <SD_PowerON>
 800acac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00b      	beq.n	800accc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acc0:	6a3b      	ldr	r3, [r7, #32]
 800acc2:	431a      	orrs	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e013      	b.n	800acf4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fee5 	bl	800ba9c <SD_InitCard>
 800acd2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00b      	beq.n	800acf2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2201      	movs	r2, #1
 800acde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	431a      	orrs	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e000      	b.n	800acf4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3728      	adds	r7, #40	; 0x28
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bdb0      	pop	{r4, r5, r7, pc}
 800acfc:	422580a0 	.word	0x422580a0

0800ad00 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08c      	sub	sp, #48	; 0x30
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
 800ad0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d107      	bne.n	800ad28 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	e0c7      	b.n	800aeb8 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	f040 80c0 	bne.w	800aeb6 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ad3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	441a      	add	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d907      	bls.n	800ad5a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e0ae      	b.n	800aeb8 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2203      	movs	r2, #3
 800ad5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2200      	movs	r2, #0
 800ad68:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ad78:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7e:	4a50      	ldr	r2, [pc, #320]	; (800aec0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ad80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad86:	4a4f      	ldr	r2, [pc, #316]	; (800aec4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800ad88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8e:	2200      	movs	r2, #0
 800ad90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3380      	adds	r3, #128	; 0x80
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	025b      	lsls	r3, r3, #9
 800ada4:	089b      	lsrs	r3, r3, #2
 800ada6:	f7fd fbef 	bl	8008588 <HAL_DMA_Start_IT>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d017      	beq.n	800ade0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800adbe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a40      	ldr	r2, [pc, #256]	; (800aec8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800adc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e06b      	b.n	800aeb8 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ade0:	4b3a      	ldr	r3, [pc, #232]	; (800aecc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adea:	2b01      	cmp	r3, #1
 800adec:	d002      	beq.n	800adf4 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	025b      	lsls	r3, r3, #9
 800adf2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800adfc:	4618      	mov	r0, r3
 800adfe:	f003 faa1 	bl	800e344 <SDMMC_CmdBlockLength>
 800ae02:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800ae04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00f      	beq.n	800ae2a <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a2e      	ldr	r2, [pc, #184]	; (800aec8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ae10:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	431a      	orrs	r2, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e046      	b.n	800aeb8 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	025b      	lsls	r3, r3, #9
 800ae34:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ae36:	2390      	movs	r3, #144	; 0x90
 800ae38:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ae42:	2301      	movs	r3, #1
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f107 0210 	add.w	r2, r7, #16
 800ae4e:	4611      	mov	r1, r2
 800ae50:	4618      	mov	r0, r3
 800ae52:	f003 fa4b 	bl	800e2ec <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d90a      	bls.n	800ae72 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2282      	movs	r2, #130	; 0x82
 800ae60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f003 faaf 	bl	800e3cc <SDMMC_CmdReadMultiBlock>
 800ae6e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ae70:	e009      	b.n	800ae86 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2281      	movs	r2, #129	; 0x81
 800ae76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f003 fa82 	bl	800e388 <SDMMC_CmdReadSingleBlock>
 800ae84:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d012      	beq.n	800aeb2 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a0d      	ldr	r2, [pc, #52]	; (800aec8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e002      	b.n	800aeb8 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	e000      	b.n	800aeb8 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800aeb6:	2302      	movs	r3, #2
  }
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3730      	adds	r7, #48	; 0x30
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	0800b8ab 	.word	0x0800b8ab
 800aec4:	0800b91d 	.word	0x0800b91d
 800aec8:	004005ff 	.word	0x004005ff
 800aecc:	4225858c 	.word	0x4225858c

0800aed0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b08c      	sub	sp, #48	; 0x30
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d107      	bne.n	800aef8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e0ca      	b.n	800b08e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b01      	cmp	r3, #1
 800af02:	f040 80c3 	bne.w	800b08c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800af0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	441a      	add	r2, r3
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af16:	429a      	cmp	r2, r3
 800af18:	d907      	bls.n	800af2a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e0b1      	b.n	800b08e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2203      	movs	r2, #3
 800af2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2200      	movs	r2, #0
 800af38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f042 021a 	orr.w	r2, r2, #26
 800af48:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af4e:	4a52      	ldr	r2, [pc, #328]	; (800b098 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800af50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af56:	4a51      	ldr	r2, [pc, #324]	; (800b09c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800af58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5e:	2200      	movs	r2, #0
 800af60:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af66:	2b01      	cmp	r3, #1
 800af68:	d002      	beq.n	800af70 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800af6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6c:	025b      	lsls	r3, r3, #9
 800af6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af78:	4618      	mov	r0, r3
 800af7a:	f003 f9e3 	bl	800e344 <SDMMC_CmdBlockLength>
 800af7e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00f      	beq.n	800afa6 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a45      	ldr	r2, [pc, #276]	; (800b0a0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800af8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	431a      	orrs	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2201      	movs	r2, #1
 800af9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	e073      	b.n	800b08e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d90a      	bls.n	800afc2 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	22a0      	movs	r2, #160	; 0xa0
 800afb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afb8:	4618      	mov	r0, r3
 800afba:	f003 fa4b 	bl	800e454 <SDMMC_CmdWriteMultiBlock>
 800afbe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800afc0:	e009      	b.n	800afd6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2290      	movs	r2, #144	; 0x90
 800afc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afce:	4618      	mov	r0, r3
 800afd0:	f003 fa1e 	bl	800e410 <SDMMC_CmdWriteSingleBlock>
 800afd4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800afd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d012      	beq.n	800b002 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a2f      	ldr	r2, [pc, #188]	; (800b0a0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800afe2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	431a      	orrs	r2, r3
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e045      	b.n	800b08e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b002:	4b28      	ldr	r3, [pc, #160]	; (800b0a4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b004:	2201      	movs	r2, #1
 800b006:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b00c:	68b9      	ldr	r1, [r7, #8]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	3380      	adds	r3, #128	; 0x80
 800b014:	461a      	mov	r2, r3
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	025b      	lsls	r3, r3, #9
 800b01a:	089b      	lsrs	r3, r3, #2
 800b01c:	f7fd fab4 	bl	8008588 <HAL_DMA_Start_IT>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d01a      	beq.n	800b05c <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f022 021a 	bic.w	r2, r2, #26
 800b034:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a19      	ldr	r2, [pc, #100]	; (800b0a0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b03c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b042:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2200      	movs	r2, #0
 800b056:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e018      	b.n	800b08e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b05c:	f04f 33ff 	mov.w	r3, #4294967295
 800b060:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	025b      	lsls	r3, r3, #9
 800b066:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b068:	2390      	movs	r3, #144	; 0x90
 800b06a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b06c:	2300      	movs	r3, #0
 800b06e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b070:	2300      	movs	r3, #0
 800b072:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b074:	2301      	movs	r3, #1
 800b076:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f107 0210 	add.w	r2, r7, #16
 800b080:	4611      	mov	r1, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f003 f932 	bl	800e2ec <SDIO_ConfigData>

      return HAL_OK;
 800b088:	2300      	movs	r3, #0
 800b08a:	e000      	b.n	800b08e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800b08c:	2302      	movs	r3, #2
  }
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3730      	adds	r7, #48	; 0x30
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	0800b881 	.word	0x0800b881
 800b09c:	0800b91d 	.word	0x0800b91d
 800b0a0:	004005ff 	.word	0x004005ff
 800b0a4:	4225858c 	.word	0x4225858c

0800b0a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d008      	beq.n	800b0d6 <HAL_SD_IRQHandler+0x2e>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f003 0308 	and.w	r3, r3, #8
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d003      	beq.n	800b0d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 ffc8 	bl	800c064 <SD_Read_IT>
 800b0d4:	e155      	b.n	800b382 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 808f 	beq.w	800b204 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0ee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	6812      	ldr	r2, [r2, #0]
 800b0fa:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800b0fe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b102:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0201 	bic.w	r2, r2, #1
 800b112:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f003 0308 	and.w	r3, r3, #8
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d039      	beq.n	800b192 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f003 0302 	and.w	r3, r3, #2
 800b124:	2b00      	cmp	r3, #0
 800b126:	d104      	bne.n	800b132 <HAL_SD_IRQHandler+0x8a>
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f003 0320 	and.w	r3, r3, #32
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d011      	beq.n	800b156 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4618      	mov	r0, r3
 800b138:	f003 f9ae 	bl	800e498 <SDMMC_CmdStopTransfer>
 800b13c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d008      	beq.n	800b156 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	431a      	orrs	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f91f 	bl	800b394 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b15e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d104      	bne.n	800b182 <HAL_SD_IRQHandler+0xda>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f003 0302 	and.w	r3, r3, #2
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d003      	beq.n	800b18a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f003 fe04 	bl	800ed90 <HAL_SD_RxCpltCallback>
 800b188:	e0fb      	b.n	800b382 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f003 fdf6 	bl	800ed7c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b190:	e0f7      	b.n	800b382 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 80f2 	beq.w	800b382 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f003 0320 	and.w	r3, r3, #32
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d011      	beq.n	800b1cc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f003 f973 	bl	800e498 <SDMMC_CmdStopTransfer>
 800b1b2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d008      	beq.n	800b1cc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f8e4 	bl	800b394 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f040 80d5 	bne.w	800b382 <HAL_SD_IRQHandler+0x2da>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f003 0302 	and.w	r3, r3, #2
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f040 80cf 	bne.w	800b382 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f022 0208 	bic.w	r2, r2, #8
 800b1f2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f003 fdbd 	bl	800ed7c <HAL_SD_TxCpltCallback>
}
 800b202:	e0be      	b.n	800b382 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d008      	beq.n	800b224 <HAL_SD_IRQHandler+0x17c>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f003 0308 	and.w	r3, r3, #8
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d003      	beq.n	800b224 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 ff72 	bl	800c106 <SD_Write_IT>
 800b222:	e0ae      	b.n	800b382 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 80a7 	beq.w	800b382 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b23a:	f003 0302 	and.w	r3, r3, #2
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d005      	beq.n	800b24e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b246:	f043 0202 	orr.w	r2, r3, #2
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b254:	f003 0308 	and.w	r3, r3, #8
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d005      	beq.n	800b268 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b260:	f043 0208 	orr.w	r2, r3, #8
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b26e:	f003 0320 	and.w	r3, r3, #32
 800b272:	2b00      	cmp	r3, #0
 800b274:	d005      	beq.n	800b282 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27a:	f043 0220 	orr.w	r2, r3, #32
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b288:	f003 0310 	and.w	r3, r3, #16
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d005      	beq.n	800b29c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b294:	f043 0210 	orr.w	r2, r3, #16
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b2a4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b2b4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f003 f8ec 	bl	800e498 <SDMMC_CmdStopTransfer>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f003 0308 	and.w	r3, r3, #8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00a      	beq.n	800b2ec <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f855 	bl	800b394 <HAL_SD_ErrorCallback>
}
 800b2ea:	e04a      	b.n	800b382 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d045      	beq.n	800b382 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f003 0310 	and.w	r3, r3, #16
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d104      	bne.n	800b30a <HAL_SD_IRQHandler+0x262>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f003 0320 	and.w	r3, r3, #32
 800b306:	2b00      	cmp	r3, #0
 800b308:	d011      	beq.n	800b32e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30e:	4a1f      	ldr	r2, [pc, #124]	; (800b38c <HAL_SD_IRQHandler+0x2e4>)
 800b310:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b316:	4618      	mov	r0, r3
 800b318:	f7fd f98e 	bl	8008638 <HAL_DMA_Abort_IT>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d02f      	beq.n	800b382 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b326:	4618      	mov	r0, r3
 800b328:	f000 fb4a 	bl	800b9c0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b32c:	e029      	b.n	800b382 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f003 0301 	and.w	r3, r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	d104      	bne.n	800b342 <HAL_SD_IRQHandler+0x29a>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f003 0302 	and.w	r3, r3, #2
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d011      	beq.n	800b366 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b346:	4a12      	ldr	r2, [pc, #72]	; (800b390 <HAL_SD_IRQHandler+0x2e8>)
 800b348:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fd f972 	bl	8008638 <HAL_DMA_Abort_IT>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d013      	beq.n	800b382 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 fb65 	bl	800ba2e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b364:	e00d      	b.n	800b382 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f003 fcf4 	bl	800ed68 <HAL_SD_AbortCallback>
}
 800b380:	e7ff      	b.n	800b382 <HAL_SD_IRQHandler+0x2da>
 800b382:	bf00      	nop
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	0800b9c1 	.word	0x0800b9c1
 800b390:	0800ba2f 	.word	0x0800ba2f

0800b394 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3b6:	0f9b      	lsrs	r3, r3, #30
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3c2:	0e9b      	lsrs	r3, r3, #26
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	f003 030f 	and.w	r3, r3, #15
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3d4:	0e1b      	lsrs	r3, r3, #24
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	f003 0303 	and.w	r3, r3, #3
 800b3dc:	b2da      	uxtb	r2, r3
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3e6:	0c1b      	lsrs	r3, r3, #16
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3f2:	0a1b      	lsrs	r3, r3, #8
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b408:	0d1b      	lsrs	r3, r3, #20
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b414:	0c1b      	lsrs	r3, r3, #16
 800b416:	b2db      	uxtb	r3, r3
 800b418:	f003 030f 	and.w	r3, r3, #15
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b426:	0bdb      	lsrs	r3, r3, #15
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	b2da      	uxtb	r2, r3
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b438:	0b9b      	lsrs	r3, r3, #14
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b44a:	0b5b      	lsrs	r3, r3, #13
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	b2da      	uxtb	r2, r3
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b45c:	0b1b      	lsrs	r3, r3, #12
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	b2da      	uxtb	r2, r3
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2200      	movs	r2, #0
 800b46e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b474:	2b00      	cmp	r3, #0
 800b476:	d163      	bne.n	800b540 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b47c:	009a      	lsls	r2, r3, #2
 800b47e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b482:	4013      	ands	r3, r2
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b488:	0f92      	lsrs	r2, r2, #30
 800b48a:	431a      	orrs	r2, r3
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b494:	0edb      	lsrs	r3, r3, #27
 800b496:	b2db      	uxtb	r3, r3
 800b498:	f003 0307 	and.w	r3, r3, #7
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4a6:	0e1b      	lsrs	r3, r3, #24
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	f003 0307 	and.w	r3, r3, #7
 800b4ae:	b2da      	uxtb	r2, r3
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4b8:	0d5b      	lsrs	r3, r3, #21
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	f003 0307 	and.w	r3, r3, #7
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ca:	0c9b      	lsrs	r3, r3, #18
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	f003 0307 	and.w	r3, r3, #7
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4dc:	0bdb      	lsrs	r3, r3, #15
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	f003 0307 	and.w	r3, r3, #7
 800b4e4:	b2da      	uxtb	r2, r3
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	7e1b      	ldrb	r3, [r3, #24]
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	f003 0307 	and.w	r3, r3, #7
 800b4fe:	3302      	adds	r3, #2
 800b500:	2201      	movs	r2, #1
 800b502:	fa02 f303 	lsl.w	r3, r2, r3
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b50a:	fb02 f203 	mul.w	r2, r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	7a1b      	ldrb	r3, [r3, #8]
 800b516:	b2db      	uxtb	r3, r3
 800b518:	f003 030f 	and.w	r3, r3, #15
 800b51c:	2201      	movs	r2, #1
 800b51e:	409a      	lsls	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b52c:	0a52      	lsrs	r2, r2, #9
 800b52e:	fb02 f203 	mul.w	r2, r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b53c:	661a      	str	r2, [r3, #96]	; 0x60
 800b53e:	e031      	b.n	800b5a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b544:	2b01      	cmp	r3, #1
 800b546:	d11d      	bne.n	800b584 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b54c:	041b      	lsls	r3, r3, #16
 800b54e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b556:	0c1b      	lsrs	r3, r3, #16
 800b558:	431a      	orrs	r2, r3
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	3301      	adds	r3, #1
 800b564:	029a      	lsls	r2, r3, #10
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b578:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	661a      	str	r2, [r3, #96]	; 0x60
 800b582:	e00f      	b.n	800b5a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a58      	ldr	r2, [pc, #352]	; (800b6ec <HAL_SD_GetCardCSD+0x344>)
 800b58a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e09d      	b.n	800b6e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5a8:	0b9b      	lsrs	r3, r3, #14
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	f003 0301 	and.w	r3, r3, #1
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ba:	09db      	lsrs	r3, r3, #7
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5dc:	0fdb      	lsrs	r3, r3, #31
 800b5de:	b2da      	uxtb	r2, r3
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e8:	0f5b      	lsrs	r3, r3, #29
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	f003 0303 	and.w	r3, r3, #3
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fa:	0e9b      	lsrs	r3, r3, #26
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	f003 0307 	and.w	r3, r3, #7
 800b602:	b2da      	uxtb	r2, r3
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b60c:	0d9b      	lsrs	r3, r3, #22
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	f003 030f 	and.w	r3, r3, #15
 800b614:	b2da      	uxtb	r2, r3
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b61e:	0d5b      	lsrs	r3, r3, #21
 800b620:	b2db      	uxtb	r3, r3
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	b2da      	uxtb	r2, r3
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63a:	0c1b      	lsrs	r3, r3, #16
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	b2da      	uxtb	r2, r3
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b64e:	0bdb      	lsrs	r3, r3, #15
 800b650:	b2db      	uxtb	r3, r3
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	b2da      	uxtb	r2, r3
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b662:	0b9b      	lsrs	r3, r3, #14
 800b664:	b2db      	uxtb	r3, r3
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b676:	0b5b      	lsrs	r3, r3, #13
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	f003 0301 	and.w	r3, r3, #1
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b68a:	0b1b      	lsrs	r3, r3, #12
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 0301 	and.w	r3, r3, #1
 800b692:	b2da      	uxtb	r2, r3
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69e:	0a9b      	lsrs	r3, r3, #10
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	f003 0303 	and.w	r3, r3, #3
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b2:	0a1b      	lsrs	r3, r3, #8
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	f003 0303 	and.w	r3, r3, #3
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6c6:	085b      	lsrs	r3, r3, #1
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	004005ff 	.word	0x004005ff

0800b6f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b748:	b5b0      	push	{r4, r5, r7, lr}
 800b74a:	b08e      	sub	sp, #56	; 0x38
 800b74c:	af04      	add	r7, sp, #16
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2203      	movs	r2, #3
 800b756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b75e:	2b03      	cmp	r3, #3
 800b760:	d02e      	beq.n	800b7c0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b768:	d106      	bne.n	800b778 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
 800b776:	e029      	b.n	800b7cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b77e:	d10a      	bne.n	800b796 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fb0f 	bl	800bda4 <SD_WideBus_Enable>
 800b786:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	639a      	str	r2, [r3, #56]	; 0x38
 800b794:	e01a      	b.n	800b7cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10a      	bne.n	800b7b2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fb4c 	bl	800be3a <SD_WideBus_Disable>
 800b7a2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	431a      	orrs	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	639a      	str	r2, [r3, #56]	; 0x38
 800b7b0:	e00c      	b.n	800b7cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	639a      	str	r2, [r3, #56]	; 0x38
 800b7be:	e005      	b.n	800b7cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d009      	beq.n	800b7e8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a18      	ldr	r2, [pc, #96]	; (800b83c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b7da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e024      	b.n	800b832 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681d      	ldr	r5, [r3, #0]
 800b80e:	466c      	mov	r4, sp
 800b810:	f107 0318 	add.w	r3, r7, #24
 800b814:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b81c:	f107 030c 	add.w	r3, r7, #12
 800b820:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b822:	4628      	mov	r0, r5
 800b824:	f002 fcb2 	bl	800e18c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3728      	adds	r7, #40	; 0x28
 800b836:	46bd      	mov	sp, r7
 800b838:	bdb0      	pop	{r4, r5, r7, pc}
 800b83a:	bf00      	nop
 800b83c:	004005ff 	.word	0x004005ff

0800b840 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b84c:	f107 030c 	add.w	r3, r7, #12
 800b850:	4619      	mov	r1, r3
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 fa7e 	bl	800bd54 <SD_SendStatus>
 800b858:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d005      	beq.n	800b86c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	431a      	orrs	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	0a5b      	lsrs	r3, r3, #9
 800b870:	f003 030f 	and.w	r3, r3, #15
 800b874:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b876:	693b      	ldr	r3, [r7, #16]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3718      	adds	r7, #24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b89c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b89e:	bf00      	nop
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8bc:	2b82      	cmp	r3, #130	; 0x82
 800b8be:	d111      	bne.n	800b8e4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f002 fde7 	bl	800e498 <SDMMC_CmdStopTransfer>
 800b8ca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d008      	beq.n	800b8e4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	431a      	orrs	r2, r3
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff fd58 	bl	800b394 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f022 0208 	bic.w	r2, r2, #8
 800b8f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b8fc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2200      	movs	r2, #0
 800b90a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f003 fa3f 	bl	800ed90 <HAL_SD_RxCpltCallback>
#endif
}
 800b912:	bf00      	nop
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b928:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7fd f830 	bl	8008990 <HAL_DMA_GetError>
 800b930:	4603      	mov	r3, r0
 800b932:	2b02      	cmp	r3, #2
 800b934:	d03e      	beq.n	800b9b4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b944:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d002      	beq.n	800b952 <SD_DMAError+0x36>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d12d      	bne.n	800b9ae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a19      	ldr	r2, [pc, #100]	; (800b9bc <SD_DMAError+0xa0>)
 800b958:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b968:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b976:	6978      	ldr	r0, [r7, #20]
 800b978:	f7ff ff62 	bl	800b840 <HAL_SD_GetCardState>
 800b97c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b06      	cmp	r3, #6
 800b982:	d002      	beq.n	800b98a <SD_DMAError+0x6e>
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	2b05      	cmp	r3, #5
 800b988:	d10a      	bne.n	800b9a0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4618      	mov	r0, r3
 800b990:	f002 fd82 	bl	800e498 <SDMMC_CmdStopTransfer>
 800b994:	4602      	mov	r2, r0
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99a:	431a      	orrs	r2, r3
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b9ae:	6978      	ldr	r0, [r7, #20]
 800b9b0:	f7ff fcf0 	bl	800b394 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b9b4:	bf00      	nop
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	004005ff 	.word	0x004005ff

0800b9c0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9cc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f240 523a 	movw	r2, #1338	; 0x53a
 800b9d6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f7ff ff31 	bl	800b840 <HAL_SD_GetCardState>
 800b9de:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	2b06      	cmp	r3, #6
 800b9f2:	d002      	beq.n	800b9fa <SD_DMATxAbort+0x3a>
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b05      	cmp	r3, #5
 800b9f8:	d10a      	bne.n	800ba10 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f002 fd4a 	bl	800e498 <SDMMC_CmdStopTransfer>
 800ba04:	4602      	mov	r2, r0
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0a:	431a      	orrs	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d103      	bne.n	800ba20 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f003 f9a5 	bl	800ed68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ba1e:	e002      	b.n	800ba26 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f7ff fcb7 	bl	800b394 <HAL_SD_ErrorCallback>
}
 800ba26:	bf00      	nop
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba3a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba44:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f7ff fefa 	bl	800b840 <HAL_SD_GetCardState>
 800ba4c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	2b06      	cmp	r3, #6
 800ba60:	d002      	beq.n	800ba68 <SD_DMARxAbort+0x3a>
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b05      	cmp	r3, #5
 800ba66:	d10a      	bne.n	800ba7e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f002 fd13 	bl	800e498 <SDMMC_CmdStopTransfer>
 800ba72:	4602      	mov	r2, r0
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba78:	431a      	orrs	r2, r3
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d103      	bne.n	800ba8e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f003 f96e 	bl	800ed68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ba8c:	e002      	b.n	800ba94 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f7ff fc80 	bl	800b394 <HAL_SD_ErrorCallback>
}
 800ba94:	bf00      	nop
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ba9c:	b5b0      	push	{r4, r5, r7, lr}
 800ba9e:	b094      	sub	sp, #80	; 0x50
 800baa0:	af04      	add	r7, sp, #16
 800baa2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800baa4:	2301      	movs	r3, #1
 800baa6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4618      	mov	r0, r3
 800baae:	f002 fbc5 	bl	800e23c <SDIO_GetPowerState>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d102      	bne.n	800babe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bab8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800babc:	e0b7      	b.n	800bc2e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac2:	2b03      	cmp	r3, #3
 800bac4:	d02f      	beq.n	800bb26 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4618      	mov	r0, r3
 800bacc:	f002 fdee 	bl	800e6ac <SDMMC_CmdSendCID>
 800bad0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <SD_InitCard+0x40>
    {
      return errorstate;
 800bad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bada:	e0a8      	b.n	800bc2e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2100      	movs	r1, #0
 800bae2:	4618      	mov	r0, r3
 800bae4:	f002 fbef 	bl	800e2c6 <SDIO_GetResponse>
 800bae8:	4602      	mov	r2, r0
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2104      	movs	r1, #4
 800baf4:	4618      	mov	r0, r3
 800baf6:	f002 fbe6 	bl	800e2c6 <SDIO_GetResponse>
 800bafa:	4602      	mov	r2, r0
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2108      	movs	r1, #8
 800bb06:	4618      	mov	r0, r3
 800bb08:	f002 fbdd 	bl	800e2c6 <SDIO_GetResponse>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	210c      	movs	r1, #12
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f002 fbd4 	bl	800e2c6 <SDIO_GetResponse>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	d00d      	beq.n	800bb4a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f107 020e 	add.w	r2, r7, #14
 800bb36:	4611      	mov	r1, r2
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f002 fdf4 	bl	800e726 <SDMMC_CmdSetRelAdd>
 800bb3e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <SD_InitCard+0xae>
    {
      return errorstate;
 800bb46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb48:	e071      	b.n	800bc2e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4e:	2b03      	cmp	r3, #3
 800bb50:	d036      	beq.n	800bbc0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bb52:	89fb      	ldrh	r3, [r7, #14]
 800bb54:	461a      	mov	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb62:	041b      	lsls	r3, r3, #16
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f002 fdbe 	bl	800e6e8 <SDMMC_CmdSendCSD>
 800bb6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb76:	e05a      	b.n	800bc2e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f002 fba1 	bl	800e2c6 <SDIO_GetResponse>
 800bb84:	4602      	mov	r2, r0
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2104      	movs	r1, #4
 800bb90:	4618      	mov	r0, r3
 800bb92:	f002 fb98 	bl	800e2c6 <SDIO_GetResponse>
 800bb96:	4602      	mov	r2, r0
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2108      	movs	r1, #8
 800bba2:	4618      	mov	r0, r3
 800bba4:	f002 fb8f 	bl	800e2c6 <SDIO_GetResponse>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	210c      	movs	r1, #12
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f002 fb86 	bl	800e2c6 <SDIO_GetResponse>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2104      	movs	r1, #4
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f002 fb7d 	bl	800e2c6 <SDIO_GetResponse>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	0d1a      	lsrs	r2, r3, #20
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bbd4:	f107 0310 	add.w	r3, r7, #16
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7ff fbe4 	bl	800b3a8 <HAL_SD_GetCardCSD>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bbe6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bbea:	e020      	b.n	800bc2e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6819      	ldr	r1, [r3, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbf4:	041b      	lsls	r3, r3, #16
 800bbf6:	f04f 0400 	mov.w	r4, #0
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	4623      	mov	r3, r4
 800bbfe:	4608      	mov	r0, r1
 800bc00:	f002 fc6c 	bl	800e4dc <SDMMC_CmdSelDesel>
 800bc04:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <SD_InitCard+0x174>
  {
    return errorstate;
 800bc0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0e:	e00e      	b.n	800bc2e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681d      	ldr	r5, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	466c      	mov	r4, sp
 800bc18:	f103 0210 	add.w	r2, r3, #16
 800bc1c:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bc22:	3304      	adds	r3, #4
 800bc24:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc26:	4628      	mov	r0, r5
 800bc28:	f002 fab0 	bl	800e18c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3740      	adds	r7, #64	; 0x40
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bc38 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc40:	2300      	movs	r3, #0
 800bc42:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bc44:	2300      	movs	r3, #0
 800bc46:	617b      	str	r3, [r7, #20]
 800bc48:	2300      	movs	r3, #0
 800bc4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4618      	mov	r0, r3
 800bc52:	f002 fc66 	bl	800e522 <SDMMC_CmdGoIdleState>
 800bc56:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <SD_PowerON+0x2a>
  {
    return errorstate;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	e072      	b.n	800bd48 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f002 fc79 	bl	800e55e <SDMMC_CmdOperCond>
 800bc6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00d      	beq.n	800bc90 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f002 fc4f 	bl	800e522 <SDMMC_CmdGoIdleState>
 800bc84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d004      	beq.n	800bc96 <SD_PowerON+0x5e>
    {
      return errorstate;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	e05b      	b.n	800bd48 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d137      	bne.n	800bd0e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2100      	movs	r1, #0
 800bca4:	4618      	mov	r0, r3
 800bca6:	f002 fc79 	bl	800e59c <SDMMC_CmdAppCommand>
 800bcaa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d02d      	beq.n	800bd0e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bcb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bcb6:	e047      	b.n	800bd48 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f002 fc6c 	bl	800e59c <SDMMC_CmdAppCommand>
 800bcc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <SD_PowerON+0x98>
    {
      return errorstate;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	e03b      	b.n	800bd48 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	491e      	ldr	r1, [pc, #120]	; (800bd50 <SD_PowerON+0x118>)
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f002 fc82 	bl	800e5e0 <SDMMC_CmdAppOperCommand>
 800bcdc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bce4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bce8:	e02e      	b.n	800bd48 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2100      	movs	r1, #0
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f002 fae8 	bl	800e2c6 <SDIO_GetResponse>
 800bcf6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	0fdb      	lsrs	r3, r3, #31
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d101      	bne.n	800bd04 <SD_PowerON+0xcc>
 800bd00:	2301      	movs	r3, #1
 800bd02:	e000      	b.n	800bd06 <SD_PowerON+0xce>
 800bd04:	2300      	movs	r3, #0
 800bd06:	613b      	str	r3, [r7, #16]

    count++;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d802      	bhi.n	800bd1e <SD_PowerON+0xe6>
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d0cc      	beq.n	800bcb8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d902      	bls.n	800bd2e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bd28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd2c:	e00c      	b.n	800bd48 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d003      	beq.n	800bd40 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	645a      	str	r2, [r3, #68]	; 0x44
 800bd3e:	e002      	b.n	800bd46 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3718      	adds	r7, #24
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	c1100000 	.word	0xc1100000

0800bd54 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d102      	bne.n	800bd6a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bd64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd68:	e018      	b.n	800bd9c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd72:	041b      	lsls	r3, r3, #16
 800bd74:	4619      	mov	r1, r3
 800bd76:	4610      	mov	r0, r2
 800bd78:	f002 fcf6 	bl	800e768 <SDMMC_CmdSendStatus>
 800bd7c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	e009      	b.n	800bd9c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f002 fa99 	bl	800e2c6 <SDIO_GetResponse>
 800bd94:	4602      	mov	r2, r0
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bdac:	2300      	movs	r3, #0
 800bdae:	60fb      	str	r3, [r7, #12]
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2100      	movs	r1, #0
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f002 fa83 	bl	800e2c6 <SDIO_GetResponse>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdca:	d102      	bne.n	800bdd2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bdcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bdd0:	e02f      	b.n	800be32 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bdd2:	f107 030c 	add.w	r3, r7, #12
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 f879 	bl	800bed0 <SD_FindSCR>
 800bdde:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	e023      	b.n	800be32 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d01c      	beq.n	800be2e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdfc:	041b      	lsls	r3, r3, #16
 800bdfe:	4619      	mov	r1, r3
 800be00:	4610      	mov	r0, r2
 800be02:	f002 fbcb 	bl	800e59c <SDMMC_CmdAppCommand>
 800be06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	e00f      	b.n	800be32 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2102      	movs	r1, #2
 800be18:	4618      	mov	r0, r3
 800be1a:	f002 fc04 	bl	800e626 <SDMMC_CmdBusWidth>
 800be1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	e003      	b.n	800be32 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800be2a:	2300      	movs	r3, #0
 800be2c:	e001      	b.n	800be32 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800be2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800be32:	4618      	mov	r0, r3
 800be34:	3718      	adds	r7, #24
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b086      	sub	sp, #24
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800be42:	2300      	movs	r3, #0
 800be44:	60fb      	str	r3, [r7, #12]
 800be46:	2300      	movs	r3, #0
 800be48:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2100      	movs	r1, #0
 800be50:	4618      	mov	r0, r3
 800be52:	f002 fa38 	bl	800e2c6 <SDIO_GetResponse>
 800be56:	4603      	mov	r3, r0
 800be58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be60:	d102      	bne.n	800be68 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800be62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be66:	e02f      	b.n	800bec8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800be68:	f107 030c 	add.w	r3, r7, #12
 800be6c:	4619      	mov	r1, r3
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f82e 	bl	800bed0 <SD_FindSCR>
 800be74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d001      	beq.n	800be80 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	e023      	b.n	800bec8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be86:	2b00      	cmp	r3, #0
 800be88:	d01c      	beq.n	800bec4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be92:	041b      	lsls	r3, r3, #16
 800be94:	4619      	mov	r1, r3
 800be96:	4610      	mov	r0, r2
 800be98:	f002 fb80 	bl	800e59c <SDMMC_CmdAppCommand>
 800be9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	e00f      	b.n	800bec8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2100      	movs	r1, #0
 800beae:	4618      	mov	r0, r3
 800beb0:	f002 fbb9 	bl	800e626 <SDMMC_CmdBusWidth>
 800beb4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	e003      	b.n	800bec8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bec0:	2300      	movs	r3, #0
 800bec2:	e001      	b.n	800bec8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bec4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3718      	adds	r7, #24
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bed0:	b590      	push	{r4, r7, lr}
 800bed2:	b08f      	sub	sp, #60	; 0x3c
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800beda:	f7fb fd63 	bl	80079a4 <HAL_GetTick>
 800bede:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bee0:	2300      	movs	r3, #0
 800bee2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bee4:	2300      	movs	r3, #0
 800bee6:	60bb      	str	r3, [r7, #8]
 800bee8:	2300      	movs	r3, #0
 800beea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2108      	movs	r1, #8
 800bef6:	4618      	mov	r0, r3
 800bef8:	f002 fa24 	bl	800e344 <SDMMC_CmdBlockLength>
 800befc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d001      	beq.n	800bf08 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf06:	e0a9      	b.n	800c05c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf10:	041b      	lsls	r3, r3, #16
 800bf12:	4619      	mov	r1, r3
 800bf14:	4610      	mov	r0, r2
 800bf16:	f002 fb41 	bl	800e59c <SDMMC_CmdAppCommand>
 800bf1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <SD_FindSCR+0x56>
  {
    return errorstate;
 800bf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf24:	e09a      	b.n	800c05c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf26:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bf2c:	2308      	movs	r3, #8
 800bf2e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bf30:	2330      	movs	r3, #48	; 0x30
 800bf32:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bf34:	2302      	movs	r3, #2
 800bf36:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f107 0210 	add.w	r2, r7, #16
 800bf48:	4611      	mov	r1, r2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f002 f9ce 	bl	800e2ec <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f002 fb88 	bl	800e66a <SDMMC_CmdSendSCR>
 800bf5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d022      	beq.n	800bfa8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	e07a      	b.n	800c05c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00e      	beq.n	800bf92 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6819      	ldr	r1, [r3, #0]
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	f107 0208 	add.w	r2, r7, #8
 800bf80:	18d4      	adds	r4, r2, r3
 800bf82:	4608      	mov	r0, r1
 800bf84:	f002 f92d 	bl	800e1e2 <SDIO_ReadFIFO>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	6023      	str	r3, [r4, #0]
      index++;
 800bf8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8e:	3301      	adds	r3, #1
 800bf90:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bf92:	f7fb fd07 	bl	80079a4 <HAL_GetTick>
 800bf96:	4602      	mov	r2, r0
 800bf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa0:	d102      	bne.n	800bfa8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bfa2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfa6:	e059      	b.n	800c05c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfae:	f240 432a 	movw	r3, #1066	; 0x42a
 800bfb2:	4013      	ands	r3, r2
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d0d6      	beq.n	800bf66 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfbe:	f003 0308 	and.w	r3, r3, #8
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d005      	beq.n	800bfd2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2208      	movs	r2, #8
 800bfcc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bfce:	2308      	movs	r3, #8
 800bfd0:	e044      	b.n	800c05c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfd8:	f003 0302 	and.w	r3, r3, #2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d005      	beq.n	800bfec <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bfe8:	2302      	movs	r3, #2
 800bfea:	e037      	b.n	800c05c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff2:	f003 0320 	and.w	r3, r3, #32
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d005      	beq.n	800c006 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2220      	movs	r2, #32
 800c000:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c002:	2320      	movs	r3, #32
 800c004:	e02a      	b.n	800c05c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f240 523a 	movw	r2, #1338	; 0x53a
 800c00e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	061a      	lsls	r2, r3, #24
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	021b      	lsls	r3, r3, #8
 800c018:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c01c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	0a1b      	lsrs	r3, r3, #8
 800c022:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c026:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	0e1b      	lsrs	r3, r3, #24
 800c02c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	601a      	str	r2, [r3, #0]
    scr++;
 800c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c034:	3304      	adds	r3, #4
 800c036:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	061a      	lsls	r2, r3, #24
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	021b      	lsls	r3, r3, #8
 800c040:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c044:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	0a1b      	lsrs	r3, r3, #8
 800c04a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c04e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	0e1b      	lsrs	r3, r3, #24
 800c054:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c058:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	373c      	adds	r7, #60	; 0x3c
 800c060:	46bd      	mov	sp, r7
 800c062:	bd90      	pop	{r4, r7, pc}

0800c064 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c070:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c076:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d03f      	beq.n	800c0fe <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c07e:	2300      	movs	r3, #0
 800c080:	617b      	str	r3, [r7, #20]
 800c082:	e033      	b.n	800c0ec <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4618      	mov	r0, r3
 800c08a:	f002 f8aa 	bl	800e1e2 <SDIO_ReadFIFO>
 800c08e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	b2da      	uxtb	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	3301      	adds	r3, #1
 800c09c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	0a1b      	lsrs	r3, r3, #8
 800c0a8:	b2da      	uxtb	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	0c1b      	lsrs	r3, r3, #16
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	0e1b      	lsrs	r3, r3, #24
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	617b      	str	r3, [r7, #20]
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	2b07      	cmp	r3, #7
 800c0f0:	d9c8      	bls.n	800c084 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	693a      	ldr	r2, [r7, #16]
 800c0fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c0fe:	bf00      	nop
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b086      	sub	sp, #24
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d043      	beq.n	800c1a8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c120:	2300      	movs	r3, #0
 800c122:	617b      	str	r3, [r7, #20]
 800c124:	e037      	b.n	800c196 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3301      	adds	r3, #1
 800c130:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	3b01      	subs	r3, #1
 800c136:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	021a      	lsls	r2, r3, #8
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	4313      	orrs	r3, r2
 800c142:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	3301      	adds	r3, #1
 800c148:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	3b01      	subs	r3, #1
 800c14e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	041a      	lsls	r2, r3, #16
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	4313      	orrs	r3, r2
 800c15a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3301      	adds	r3, #1
 800c160:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	3b01      	subs	r3, #1
 800c166:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	061a      	lsls	r2, r3, #24
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	4313      	orrs	r3, r2
 800c172:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	3301      	adds	r3, #1
 800c178:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	3b01      	subs	r3, #1
 800c17e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f107 0208 	add.w	r2, r7, #8
 800c188:	4611      	mov	r1, r2
 800c18a:	4618      	mov	r0, r3
 800c18c:	f002 f836 	bl	800e1fc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	3301      	adds	r3, #1
 800c194:	617b      	str	r3, [r7, #20]
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	2b07      	cmp	r3, #7
 800c19a:	d9c4      	bls.n	800c126 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c1a8:	bf00      	nop
 800c1aa:	3718      	adds	r7, #24
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e056      	b.n	800c270 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d106      	bne.n	800c1e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7f9 fc91 	bl	8005b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2202      	movs	r2, #2
 800c1e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	685a      	ldr	r2, [r3, #4]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	431a      	orrs	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	431a      	orrs	r2, r3
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	431a      	orrs	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	695b      	ldr	r3, [r3, #20]
 800c214:	431a      	orrs	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c21e:	431a      	orrs	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	69db      	ldr	r3, [r3, #28]
 800c224:	431a      	orrs	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	ea42 0103 	orr.w	r1, r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	430a      	orrs	r2, r1
 800c238:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	0c1b      	lsrs	r3, r3, #16
 800c240:	f003 0104 	and.w	r1, r3, #4
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	430a      	orrs	r2, r1
 800c24e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	69da      	ldr	r2, [r3, #28]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c25e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	603b      	str	r3, [r7, #0]
 800c284:	4613      	mov	r3, r2
 800c286:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c292:	2b01      	cmp	r3, #1
 800c294:	d101      	bne.n	800c29a <HAL_SPI_Transmit+0x22>
 800c296:	2302      	movs	r3, #2
 800c298:	e11e      	b.n	800c4d8 <HAL_SPI_Transmit+0x260>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2201      	movs	r2, #1
 800c29e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2a2:	f7fb fb7f 	bl	80079a4 <HAL_GetTick>
 800c2a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c2a8:	88fb      	ldrh	r3, [r7, #6]
 800c2aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d002      	beq.n	800c2be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c2bc:	e103      	b.n	800c4c6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <HAL_SPI_Transmit+0x52>
 800c2c4:	88fb      	ldrh	r3, [r7, #6]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d102      	bne.n	800c2d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c2ce:	e0fa      	b.n	800c4c6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2203      	movs	r2, #3
 800c2d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	88fa      	ldrh	r2, [r7, #6]
 800c2e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	88fa      	ldrh	r2, [r7, #6]
 800c2ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2200      	movs	r2, #0
 800c306:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2200      	movs	r2, #0
 800c30c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c316:	d107      	bne.n	800c328 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c326:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c332:	2b40      	cmp	r3, #64	; 0x40
 800c334:	d007      	beq.n	800c346 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c34e:	d14b      	bne.n	800c3e8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <HAL_SPI_Transmit+0xe6>
 800c358:	8afb      	ldrh	r3, [r7, #22]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d13e      	bne.n	800c3dc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c362:	881a      	ldrh	r2, [r3, #0]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c36e:	1c9a      	adds	r2, r3, #2
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c378:	b29b      	uxth	r3, r3
 800c37a:	3b01      	subs	r3, #1
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c382:	e02b      	b.n	800c3dc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	f003 0302 	and.w	r3, r3, #2
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d112      	bne.n	800c3b8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c396:	881a      	ldrh	r2, [r3, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a2:	1c9a      	adds	r2, r3, #2
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	86da      	strh	r2, [r3, #54]	; 0x36
 800c3b6:	e011      	b.n	800c3dc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3b8:	f7fb faf4 	bl	80079a4 <HAL_GetTick>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d803      	bhi.n	800c3d0 <HAL_SPI_Transmit+0x158>
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ce:	d102      	bne.n	800c3d6 <HAL_SPI_Transmit+0x15e>
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d102      	bne.n	800c3dc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c3da:	e074      	b.n	800c4c6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1ce      	bne.n	800c384 <HAL_SPI_Transmit+0x10c>
 800c3e6:	e04c      	b.n	800c482 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <HAL_SPI_Transmit+0x17e>
 800c3f0:	8afb      	ldrh	r3, [r7, #22]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d140      	bne.n	800c478 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	330c      	adds	r3, #12
 800c400:	7812      	ldrb	r2, [r2, #0]
 800c402:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c412:	b29b      	uxth	r3, r3
 800c414:	3b01      	subs	r3, #1
 800c416:	b29a      	uxth	r2, r3
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c41c:	e02c      	b.n	800c478 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	f003 0302 	and.w	r3, r3, #2
 800c428:	2b02      	cmp	r3, #2
 800c42a:	d113      	bne.n	800c454 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	330c      	adds	r3, #12
 800c436:	7812      	ldrb	r2, [r2, #0]
 800c438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c448:	b29b      	uxth	r3, r3
 800c44a:	3b01      	subs	r3, #1
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	86da      	strh	r2, [r3, #54]	; 0x36
 800c452:	e011      	b.n	800c478 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c454:	f7fb faa6 	bl	80079a4 <HAL_GetTick>
 800c458:	4602      	mov	r2, r0
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	429a      	cmp	r2, r3
 800c462:	d803      	bhi.n	800c46c <HAL_SPI_Transmit+0x1f4>
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46a:	d102      	bne.n	800c472 <HAL_SPI_Transmit+0x1fa>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d102      	bne.n	800c478 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c472:	2303      	movs	r3, #3
 800c474:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c476:	e026      	b.n	800c4c6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1cd      	bne.n	800c41e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f000 fba4 	bl	800cbd4 <SPI_EndRxTxTransaction>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d002      	beq.n	800c498 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2220      	movs	r2, #32
 800c496:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10a      	bne.n	800c4b6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	613b      	str	r3, [r7, #16]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	613b      	str	r3, [r7, #16]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	613b      	str	r3, [r7, #16]
 800c4b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d002      	beq.n	800c4c4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	77fb      	strb	r3, [r7, #31]
 800c4c2:	e000      	b.n	800c4c6 <HAL_SPI_Transmit+0x24e>
  }

error:
 800c4c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c4d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3720      	adds	r7, #32
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af02      	add	r7, sp, #8
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	603b      	str	r3, [r7, #0]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4fc:	d112      	bne.n	800c524 <HAL_SPI_Receive+0x44>
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d10e      	bne.n	800c524 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2204      	movs	r2, #4
 800c50a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c50e:	88fa      	ldrh	r2, [r7, #6]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	4613      	mov	r3, r2
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f000 f8e9 	bl	800c6f2 <HAL_SPI_TransmitReceive>
 800c520:	4603      	mov	r3, r0
 800c522:	e0e2      	b.n	800c6ea <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d101      	bne.n	800c532 <HAL_SPI_Receive+0x52>
 800c52e:	2302      	movs	r3, #2
 800c530:	e0db      	b.n	800c6ea <HAL_SPI_Receive+0x20a>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c53a:	f7fb fa33 	bl	80079a4 <HAL_GetTick>
 800c53e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c546:	b2db      	uxtb	r3, r3
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d002      	beq.n	800c552 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c54c:	2302      	movs	r3, #2
 800c54e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c550:	e0c2      	b.n	800c6d8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d002      	beq.n	800c55e <HAL_SPI_Receive+0x7e>
 800c558:	88fb      	ldrh	r3, [r7, #6]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d102      	bne.n	800c564 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c562:	e0b9      	b.n	800c6d8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2204      	movs	r2, #4
 800c568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	88fa      	ldrh	r2, [r7, #6]
 800c57c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	88fa      	ldrh	r2, [r7, #6]
 800c582:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5aa:	d107      	bne.n	800c5bc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c5ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c6:	2b40      	cmp	r3, #64	; 0x40
 800c5c8:	d007      	beq.n	800c5da <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d162      	bne.n	800c6a8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c5e2:	e02e      	b.n	800c642 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	f003 0301 	and.w	r3, r3, #1
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d115      	bne.n	800c61e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f103 020c 	add.w	r2, r3, #12
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fe:	7812      	ldrb	r2, [r2, #0]
 800c600:	b2d2      	uxtb	r2, r2
 800c602:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c608:	1c5a      	adds	r2, r3, #1
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c612:	b29b      	uxth	r3, r3
 800c614:	3b01      	subs	r3, #1
 800c616:	b29a      	uxth	r2, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c61c:	e011      	b.n	800c642 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c61e:	f7fb f9c1 	bl	80079a4 <HAL_GetTick>
 800c622:	4602      	mov	r2, r0
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d803      	bhi.n	800c636 <HAL_SPI_Receive+0x156>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c634:	d102      	bne.n	800c63c <HAL_SPI_Receive+0x15c>
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d102      	bne.n	800c642 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c63c:	2303      	movs	r3, #3
 800c63e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c640:	e04a      	b.n	800c6d8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c646:	b29b      	uxth	r3, r3
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1cb      	bne.n	800c5e4 <HAL_SPI_Receive+0x104>
 800c64c:	e031      	b.n	800c6b2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	f003 0301 	and.w	r3, r3, #1
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d113      	bne.n	800c684 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68da      	ldr	r2, [r3, #12]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c666:	b292      	uxth	r2, r2
 800c668:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c66e:	1c9a      	adds	r2, r3, #2
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c678:	b29b      	uxth	r3, r3
 800c67a:	3b01      	subs	r3, #1
 800c67c:	b29a      	uxth	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c682:	e011      	b.n	800c6a8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c684:	f7fb f98e 	bl	80079a4 <HAL_GetTick>
 800c688:	4602      	mov	r2, r0
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	429a      	cmp	r2, r3
 800c692:	d803      	bhi.n	800c69c <HAL_SPI_Receive+0x1bc>
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c69a:	d102      	bne.n	800c6a2 <HAL_SPI_Receive+0x1c2>
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d102      	bne.n	800c6a8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c6a6:	e017      	b.n	800c6d8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1cd      	bne.n	800c64e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c6b2:	693a      	ldr	r2, [r7, #16]
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f000 fa27 	bl	800cb0a <SPI_EndRxTransaction>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2220      	movs	r2, #32
 800c6c6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	75fb      	strb	r3, [r7, #23]
 800c6d4:	e000      	b.n	800c6d8 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c6d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b08c      	sub	sp, #48	; 0x30
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	60f8      	str	r0, [r7, #12]
 800c6fa:	60b9      	str	r1, [r7, #8]
 800c6fc:	607a      	str	r2, [r7, #4]
 800c6fe:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c700:	2301      	movs	r3, #1
 800c702:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c704:	2300      	movs	r3, #0
 800c706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c710:	2b01      	cmp	r3, #1
 800c712:	d101      	bne.n	800c718 <HAL_SPI_TransmitReceive+0x26>
 800c714:	2302      	movs	r3, #2
 800c716:	e18a      	b.n	800ca2e <HAL_SPI_TransmitReceive+0x33c>
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c720:	f7fb f940 	bl	80079a4 <HAL_GetTick>
 800c724:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c72c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c736:	887b      	ldrh	r3, [r7, #2]
 800c738:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c73a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d00f      	beq.n	800c762 <HAL_SPI_TransmitReceive+0x70>
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c748:	d107      	bne.n	800c75a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d103      	bne.n	800c75a <HAL_SPI_TransmitReceive+0x68>
 800c752:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c756:	2b04      	cmp	r3, #4
 800c758:	d003      	beq.n	800c762 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c75a:	2302      	movs	r3, #2
 800c75c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c760:	e15b      	b.n	800ca1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d005      	beq.n	800c774 <HAL_SPI_TransmitReceive+0x82>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d002      	beq.n	800c774 <HAL_SPI_TransmitReceive+0x82>
 800c76e:	887b      	ldrh	r3, [r7, #2]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d103      	bne.n	800c77c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c774:	2301      	movs	r3, #1
 800c776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c77a:	e14e      	b.n	800ca1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c782:	b2db      	uxtb	r3, r3
 800c784:	2b04      	cmp	r3, #4
 800c786:	d003      	beq.n	800c790 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2205      	movs	r2, #5
 800c78c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2200      	movs	r2, #0
 800c794:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	887a      	ldrh	r2, [r7, #2]
 800c7a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	887a      	ldrh	r2, [r7, #2]
 800c7a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	887a      	ldrh	r2, [r7, #2]
 800c7b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	887a      	ldrh	r2, [r7, #2]
 800c7b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d0:	2b40      	cmp	r3, #64	; 0x40
 800c7d2:	d007      	beq.n	800c7e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7ec:	d178      	bne.n	800c8e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <HAL_SPI_TransmitReceive+0x10a>
 800c7f6:	8b7b      	ldrh	r3, [r7, #26]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d166      	bne.n	800c8ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c800:	881a      	ldrh	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80c:	1c9a      	adds	r2, r3, #2
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c816:	b29b      	uxth	r3, r3
 800c818:	3b01      	subs	r3, #1
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c820:	e053      	b.n	800c8ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	f003 0302 	and.w	r3, r3, #2
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d11b      	bne.n	800c868 <HAL_SPI_TransmitReceive+0x176>
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c834:	b29b      	uxth	r3, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	d016      	beq.n	800c868 <HAL_SPI_TransmitReceive+0x176>
 800c83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d113      	bne.n	800c868 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c844:	881a      	ldrh	r2, [r3, #0]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c850:	1c9a      	adds	r2, r3, #2
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	3b01      	subs	r3, #1
 800c85e:	b29a      	uxth	r2, r3
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c864:	2300      	movs	r3, #0
 800c866:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	f003 0301 	and.w	r3, r3, #1
 800c872:	2b01      	cmp	r3, #1
 800c874:	d119      	bne.n	800c8aa <HAL_SPI_TransmitReceive+0x1b8>
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d014      	beq.n	800c8aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68da      	ldr	r2, [r3, #12]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88a:	b292      	uxth	r2, r2
 800c88c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c892:	1c9a      	adds	r2, r3, #2
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c8aa:	f7fb f87b 	bl	80079a4 <HAL_GetTick>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b2:	1ad3      	subs	r3, r2, r3
 800c8b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d807      	bhi.n	800c8ca <HAL_SPI_TransmitReceive+0x1d8>
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c0:	d003      	beq.n	800c8ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c8c8:	e0a7      	b.n	800ca1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1a6      	bne.n	800c822 <HAL_SPI_TransmitReceive+0x130>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1a1      	bne.n	800c822 <HAL_SPI_TransmitReceive+0x130>
 800c8de:	e07c      	b.n	800c9da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d002      	beq.n	800c8ee <HAL_SPI_TransmitReceive+0x1fc>
 800c8e8:	8b7b      	ldrh	r3, [r7, #26]
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d16b      	bne.n	800c9c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	330c      	adds	r3, #12
 800c8f8:	7812      	ldrb	r2, [r2, #0]
 800c8fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c900:	1c5a      	adds	r2, r3, #1
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	3b01      	subs	r3, #1
 800c90e:	b29a      	uxth	r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c914:	e057      	b.n	800c9c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	f003 0302 	and.w	r3, r3, #2
 800c920:	2b02      	cmp	r3, #2
 800c922:	d11c      	bne.n	800c95e <HAL_SPI_TransmitReceive+0x26c>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c928:	b29b      	uxth	r3, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d017      	beq.n	800c95e <HAL_SPI_TransmitReceive+0x26c>
 800c92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c930:	2b01      	cmp	r3, #1
 800c932:	d114      	bne.n	800c95e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	330c      	adds	r3, #12
 800c93e:	7812      	ldrb	r2, [r2, #0]
 800c940:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c950:	b29b      	uxth	r3, r3
 800c952:	3b01      	subs	r3, #1
 800c954:	b29a      	uxth	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c95a:	2300      	movs	r3, #0
 800c95c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	f003 0301 	and.w	r3, r3, #1
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d119      	bne.n	800c9a0 <HAL_SPI_TransmitReceive+0x2ae>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c970:	b29b      	uxth	r3, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	d014      	beq.n	800c9a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	68da      	ldr	r2, [r3, #12]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c980:	b2d2      	uxtb	r2, r2
 800c982:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c988:	1c5a      	adds	r2, r3, #1
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c992:	b29b      	uxth	r3, r3
 800c994:	3b01      	subs	r3, #1
 800c996:	b29a      	uxth	r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c99c:	2301      	movs	r3, #1
 800c99e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c9a0:	f7fb f800 	bl	80079a4 <HAL_GetTick>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d803      	bhi.n	800c9b8 <HAL_SPI_TransmitReceive+0x2c6>
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b6:	d102      	bne.n	800c9be <HAL_SPI_TransmitReceive+0x2cc>
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d103      	bne.n	800c9c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c9c4:	e029      	b.n	800ca1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1a2      	bne.n	800c916 <HAL_SPI_TransmitReceive+0x224>
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d19d      	bne.n	800c916 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c9da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 f8f8 	bl	800cbd4 <SPI_EndRxTxTransaction>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d006      	beq.n	800c9f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2220      	movs	r2, #32
 800c9f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c9f6:	e010      	b.n	800ca1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10b      	bne.n	800ca18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca00:	2300      	movs	r3, #0
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	617b      	str	r3, [r7, #20]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	617b      	str	r3, [r7, #20]
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	e000      	b.n	800ca1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ca18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ca2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3730      	adds	r7, #48	; 0x30
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b084      	sub	sp, #16
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	60f8      	str	r0, [r7, #12]
 800ca3e:	60b9      	str	r1, [r7, #8]
 800ca40:	603b      	str	r3, [r7, #0]
 800ca42:	4613      	mov	r3, r2
 800ca44:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca46:	e04c      	b.n	800cae2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca4e:	d048      	beq.n	800cae2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ca50:	f7fa ffa8 	bl	80079a4 <HAL_GetTick>
 800ca54:	4602      	mov	r2, r0
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	1ad3      	subs	r3, r2, r3
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d902      	bls.n	800ca66 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d13d      	bne.n	800cae2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ca74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca7e:	d111      	bne.n	800caa4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca88:	d004      	beq.n	800ca94 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca92:	d107      	bne.n	800caa4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caac:	d10f      	bne.n	800cace <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cacc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2201      	movs	r2, #1
 800cad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cade:	2303      	movs	r3, #3
 800cae0:	e00f      	b.n	800cb02 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	689a      	ldr	r2, [r3, #8]
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	4013      	ands	r3, r2
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	429a      	cmp	r2, r3
 800caf0:	bf0c      	ite	eq
 800caf2:	2301      	moveq	r3, #1
 800caf4:	2300      	movne	r3, #0
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	461a      	mov	r2, r3
 800cafa:	79fb      	ldrb	r3, [r7, #7]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d1a3      	bne.n	800ca48 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b086      	sub	sp, #24
 800cb0e:	af02      	add	r7, sp, #8
 800cb10:	60f8      	str	r0, [r7, #12]
 800cb12:	60b9      	str	r1, [r7, #8]
 800cb14:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb1e:	d111      	bne.n	800cb44 <SPI_EndRxTransaction+0x3a>
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb28:	d004      	beq.n	800cb34 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb32:	d107      	bne.n	800cb44 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb42:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb4c:	d12a      	bne.n	800cba4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb56:	d012      	beq.n	800cb7e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2180      	movs	r1, #128	; 0x80
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f7ff ff67 	bl	800ca36 <SPI_WaitFlagStateUntilTimeout>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d02d      	beq.n	800cbca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb72:	f043 0220 	orr.w	r2, r3, #32
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e026      	b.n	800cbcc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	2200      	movs	r2, #0
 800cb86:	2101      	movs	r1, #1
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f7ff ff54 	bl	800ca36 <SPI_WaitFlagStateUntilTimeout>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d01a      	beq.n	800cbca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb98:	f043 0220 	orr.w	r2, r3, #32
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e013      	b.n	800cbcc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	9300      	str	r3, [sp, #0]
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2101      	movs	r1, #1
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f7ff ff41 	bl	800ca36 <SPI_WaitFlagStateUntilTimeout>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d007      	beq.n	800cbca <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbbe:	f043 0220 	orr.w	r2, r3, #32
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	e000      	b.n	800cbcc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af02      	add	r7, sp, #8
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cbe0:	4b1b      	ldr	r3, [pc, #108]	; (800cc50 <SPI_EndRxTxTransaction+0x7c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a1b      	ldr	r2, [pc, #108]	; (800cc54 <SPI_EndRxTxTransaction+0x80>)
 800cbe6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbea:	0d5b      	lsrs	r3, r3, #21
 800cbec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbf0:	fb02 f303 	mul.w	r3, r2, r3
 800cbf4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbfe:	d112      	bne.n	800cc26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	2200      	movs	r2, #0
 800cc08:	2180      	movs	r1, #128	; 0x80
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f7ff ff13 	bl	800ca36 <SPI_WaitFlagStateUntilTimeout>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d016      	beq.n	800cc44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc1a:	f043 0220 	orr.w	r2, r3, #32
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cc22:	2303      	movs	r3, #3
 800cc24:	e00f      	b.n	800cc46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00a      	beq.n	800cc42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc3c:	2b80      	cmp	r3, #128	; 0x80
 800cc3e:	d0f2      	beq.n	800cc26 <SPI_EndRxTxTransaction+0x52>
 800cc40:	e000      	b.n	800cc44 <SPI_EndRxTxTransaction+0x70>
        break;
 800cc42:	bf00      	nop
  }

  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3718      	adds	r7, #24
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20000000 	.word	0x20000000
 800cc54:	165e9f81 	.word	0x165e9f81

0800cc58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d101      	bne.n	800cc6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	e01d      	b.n	800cca6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d106      	bne.n	800cc84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7f8 fffc 	bl	8005c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2202      	movs	r2, #2
 800cc88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	3304      	adds	r3, #4
 800cc94:	4619      	mov	r1, r3
 800cc96:	4610      	mov	r0, r2
 800cc98:	f000 fb56 	bl	800d348 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ccae:	b480      	push	{r7}
 800ccb0:	b085      	sub	sp, #20
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68da      	ldr	r2, [r3, #12]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f042 0201 	orr.w	r2, r2, #1
 800ccc4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	f003 0307 	and.w	r3, r3, #7
 800ccd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2b06      	cmp	r3, #6
 800ccd6:	d007      	beq.n	800cce8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f042 0201 	orr.w	r2, r2, #1
 800cce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b082      	sub	sp, #8
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d101      	bne.n	800cd08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e01d      	b.n	800cd44 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d106      	bne.n	800cd22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f7f8 ff39 	bl	8005b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2202      	movs	r2, #2
 800cd26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3304      	adds	r3, #4
 800cd32:	4619      	mov	r1, r3
 800cd34:	4610      	mov	r0, r2
 800cd36:	f000 fb07 	bl	800d348 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	6839      	ldr	r1, [r7, #0]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f000 fd42 	bl	800d7e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a15      	ldr	r2, [pc, #84]	; (800cdc0 <HAL_TIM_PWM_Start+0x74>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d004      	beq.n	800cd78 <HAL_TIM_PWM_Start+0x2c>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a14      	ldr	r2, [pc, #80]	; (800cdc4 <HAL_TIM_PWM_Start+0x78>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d101      	bne.n	800cd7c <HAL_TIM_PWM_Start+0x30>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e000      	b.n	800cd7e <HAL_TIM_PWM_Start+0x32>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d007      	beq.n	800cd92 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	f003 0307 	and.w	r3, r3, #7
 800cd9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2b06      	cmp	r3, #6
 800cda2:	d007      	beq.n	800cdb4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f042 0201 	orr.w	r2, r2, #1
 800cdb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	40010000 	.word	0x40010000
 800cdc4:	40010400 	.word	0x40010400

0800cdc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d101      	bne.n	800cddc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e083      	b.n	800cee4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d106      	bne.n	800cdf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7f8 ffd3 	bl	8005d9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	6812      	ldr	r2, [r2, #0]
 800ce08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce0c:	f023 0307 	bic.w	r3, r3, #7
 800ce10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	3304      	adds	r3, #4
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f000 fa93 	bl	800d348 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6a1b      	ldr	r3, [r3, #32]
 800ce38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce4a:	f023 0303 	bic.w	r3, r3, #3
 800ce4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	689a      	ldr	r2, [r3, #8]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	699b      	ldr	r3, [r3, #24]
 800ce58:	021b      	lsls	r3, r3, #8
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	693a      	ldr	r2, [r7, #16]
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ce68:	f023 030c 	bic.w	r3, r3, #12
 800ce6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	68da      	ldr	r2, [r3, #12]
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	69db      	ldr	r3, [r3, #28]
 800ce82:	021b      	lsls	r3, r3, #8
 800ce84:	4313      	orrs	r3, r2
 800ce86:	693a      	ldr	r2, [r7, #16]
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	691b      	ldr	r3, [r3, #16]
 800ce90:	011a      	lsls	r2, r3, #4
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	6a1b      	ldr	r3, [r3, #32]
 800ce96:	031b      	lsls	r3, r3, #12
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	693a      	ldr	r2, [r7, #16]
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cea6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ceae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	685a      	ldr	r2, [r3, #4]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	695b      	ldr	r3, [r3, #20]
 800ceb8:	011b      	lsls	r3, r3, #4
 800ceba:	4313      	orrs	r3, r2
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	4313      	orrs	r3, r2
 800cec0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	693a      	ldr	r2, [r7, #16]
 800ced0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2201      	movs	r2, #1
 800cede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <HAL_TIM_Encoder_Start+0x16>
 800cefc:	2b04      	cmp	r3, #4
 800cefe:	d008      	beq.n	800cf12 <HAL_TIM_Encoder_Start+0x26>
 800cf00:	e00f      	b.n	800cf22 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2201      	movs	r2, #1
 800cf08:	2100      	movs	r1, #0
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 fc6c 	bl	800d7e8 <TIM_CCxChannelCmd>
      break;
 800cf10:	e016      	b.n	800cf40 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2201      	movs	r2, #1
 800cf18:	2104      	movs	r1, #4
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f000 fc64 	bl	800d7e8 <TIM_CCxChannelCmd>
      break;
 800cf20:	e00e      	b.n	800cf40 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2201      	movs	r2, #1
 800cf28:	2100      	movs	r1, #0
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f000 fc5c 	bl	800d7e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2201      	movs	r2, #1
 800cf36:	2104      	movs	r1, #4
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 fc55 	bl	800d7e8 <TIM_CCxChannelCmd>
      break;
 800cf3e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f042 0201 	orr.w	r2, r2, #1
 800cf4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	691b      	ldr	r3, [r3, #16]
 800cf68:	f003 0302 	and.w	r3, r3, #2
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d122      	bne.n	800cfb6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	f003 0302 	and.w	r3, r3, #2
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	d11b      	bne.n	800cfb6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f06f 0202 	mvn.w	r2, #2
 800cf86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	699b      	ldr	r3, [r3, #24]
 800cf94:	f003 0303 	and.w	r3, r3, #3
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f9b5 	bl	800d30c <HAL_TIM_IC_CaptureCallback>
 800cfa2:	e005      	b.n	800cfb0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 f9a7 	bl	800d2f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 f9b8 	bl	800d320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	f003 0304 	and.w	r3, r3, #4
 800cfc0:	2b04      	cmp	r3, #4
 800cfc2:	d122      	bne.n	800d00a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	f003 0304 	and.w	r3, r3, #4
 800cfce:	2b04      	cmp	r3, #4
 800cfd0:	d11b      	bne.n	800d00a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f06f 0204 	mvn.w	r2, #4
 800cfda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2202      	movs	r2, #2
 800cfe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	699b      	ldr	r3, [r3, #24]
 800cfe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d003      	beq.n	800cff8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f98b 	bl	800d30c <HAL_TIM_IC_CaptureCallback>
 800cff6:	e005      	b.n	800d004 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f97d 	bl	800d2f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f98e 	bl	800d320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	f003 0308 	and.w	r3, r3, #8
 800d014:	2b08      	cmp	r3, #8
 800d016:	d122      	bne.n	800d05e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	f003 0308 	and.w	r3, r3, #8
 800d022:	2b08      	cmp	r3, #8
 800d024:	d11b      	bne.n	800d05e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f06f 0208 	mvn.w	r2, #8
 800d02e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2204      	movs	r2, #4
 800d034:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	f003 0303 	and.w	r3, r3, #3
 800d040:	2b00      	cmp	r3, #0
 800d042:	d003      	beq.n	800d04c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f961 	bl	800d30c <HAL_TIM_IC_CaptureCallback>
 800d04a:	e005      	b.n	800d058 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f953 	bl	800d2f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 f964 	bl	800d320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	691b      	ldr	r3, [r3, #16]
 800d064:	f003 0310 	and.w	r3, r3, #16
 800d068:	2b10      	cmp	r3, #16
 800d06a:	d122      	bne.n	800d0b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	f003 0310 	and.w	r3, r3, #16
 800d076:	2b10      	cmp	r3, #16
 800d078:	d11b      	bne.n	800d0b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f06f 0210 	mvn.w	r2, #16
 800d082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2208      	movs	r2, #8
 800d088:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	69db      	ldr	r3, [r3, #28]
 800d090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d094:	2b00      	cmp	r3, #0
 800d096:	d003      	beq.n	800d0a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f937 	bl	800d30c <HAL_TIM_IC_CaptureCallback>
 800d09e:	e005      	b.n	800d0ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f929 	bl	800d2f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 f93a 	bl	800d320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	f003 0301 	and.w	r3, r3, #1
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d10e      	bne.n	800d0de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	f003 0301 	and.w	r3, r3, #1
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d107      	bne.n	800d0de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f06f 0201 	mvn.w	r2, #1
 800d0d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7f7 fb37 	bl	800474c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0e8:	2b80      	cmp	r3, #128	; 0x80
 800d0ea:	d10e      	bne.n	800d10a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0f6:	2b80      	cmp	r3, #128	; 0x80
 800d0f8:	d107      	bne.n	800d10a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fc6d 	bl	800d9e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d114:	2b40      	cmp	r3, #64	; 0x40
 800d116:	d10e      	bne.n	800d136 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d122:	2b40      	cmp	r3, #64	; 0x40
 800d124:	d107      	bne.n	800d136 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d12e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 f8ff 	bl	800d334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	f003 0320 	and.w	r3, r3, #32
 800d140:	2b20      	cmp	r3, #32
 800d142:	d10e      	bne.n	800d162 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	f003 0320 	and.w	r3, r3, #32
 800d14e:	2b20      	cmp	r3, #32
 800d150:	d107      	bne.n	800d162 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f06f 0220 	mvn.w	r2, #32
 800d15a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 fc37 	bl	800d9d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d162:	bf00      	nop
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
	...

0800d16c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d101      	bne.n	800d186 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d182:	2302      	movs	r3, #2
 800d184:	e0b4      	b.n	800d2f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2201      	movs	r2, #1
 800d18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2202      	movs	r2, #2
 800d192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b0c      	cmp	r3, #12
 800d19a:	f200 809f 	bhi.w	800d2dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800d19e:	a201      	add	r2, pc, #4	; (adr r2, 800d1a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a4:	0800d1d9 	.word	0x0800d1d9
 800d1a8:	0800d2dd 	.word	0x0800d2dd
 800d1ac:	0800d2dd 	.word	0x0800d2dd
 800d1b0:	0800d2dd 	.word	0x0800d2dd
 800d1b4:	0800d219 	.word	0x0800d219
 800d1b8:	0800d2dd 	.word	0x0800d2dd
 800d1bc:	0800d2dd 	.word	0x0800d2dd
 800d1c0:	0800d2dd 	.word	0x0800d2dd
 800d1c4:	0800d25b 	.word	0x0800d25b
 800d1c8:	0800d2dd 	.word	0x0800d2dd
 800d1cc:	0800d2dd 	.word	0x0800d2dd
 800d1d0:	0800d2dd 	.word	0x0800d2dd
 800d1d4:	0800d29b 	.word	0x0800d29b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	68b9      	ldr	r1, [r7, #8]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 f952 	bl	800d488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	699a      	ldr	r2, [r3, #24]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f042 0208 	orr.w	r2, r2, #8
 800d1f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	699a      	ldr	r2, [r3, #24]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f022 0204 	bic.w	r2, r2, #4
 800d202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6999      	ldr	r1, [r3, #24]
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	691a      	ldr	r2, [r3, #16]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	430a      	orrs	r2, r1
 800d214:	619a      	str	r2, [r3, #24]
      break;
 800d216:	e062      	b.n	800d2de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68b9      	ldr	r1, [r7, #8]
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 f9a2 	bl	800d568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	699a      	ldr	r2, [r3, #24]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	699a      	ldr	r2, [r3, #24]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6999      	ldr	r1, [r3, #24]
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	021a      	lsls	r2, r3, #8
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	430a      	orrs	r2, r1
 800d256:	619a      	str	r2, [r3, #24]
      break;
 800d258:	e041      	b.n	800d2de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68b9      	ldr	r1, [r7, #8]
 800d260:	4618      	mov	r0, r3
 800d262:	f000 f9f7 	bl	800d654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	69da      	ldr	r2, [r3, #28]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f042 0208 	orr.w	r2, r2, #8
 800d274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	69da      	ldr	r2, [r3, #28]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f022 0204 	bic.w	r2, r2, #4
 800d284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	69d9      	ldr	r1, [r3, #28]
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	691a      	ldr	r2, [r3, #16]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	430a      	orrs	r2, r1
 800d296:	61da      	str	r2, [r3, #28]
      break;
 800d298:	e021      	b.n	800d2de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68b9      	ldr	r1, [r7, #8]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f000 fa4b 	bl	800d73c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	69da      	ldr	r2, [r3, #28]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	69da      	ldr	r2, [r3, #28]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	69d9      	ldr	r1, [r3, #28]
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	691b      	ldr	r3, [r3, #16]
 800d2d0:	021a      	lsls	r2, r3, #8
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	430a      	orrs	r2, r1
 800d2d8:	61da      	str	r2, [r3, #28]
      break;
 800d2da:	e000      	b.n	800d2de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d2dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d300:	bf00      	nop
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a40      	ldr	r2, [pc, #256]	; (800d45c <TIM_Base_SetConfig+0x114>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d013      	beq.n	800d388 <TIM_Base_SetConfig+0x40>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d366:	d00f      	beq.n	800d388 <TIM_Base_SetConfig+0x40>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a3d      	ldr	r2, [pc, #244]	; (800d460 <TIM_Base_SetConfig+0x118>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d00b      	beq.n	800d388 <TIM_Base_SetConfig+0x40>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a3c      	ldr	r2, [pc, #240]	; (800d464 <TIM_Base_SetConfig+0x11c>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d007      	beq.n	800d388 <TIM_Base_SetConfig+0x40>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4a3b      	ldr	r2, [pc, #236]	; (800d468 <TIM_Base_SetConfig+0x120>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d003      	beq.n	800d388 <TIM_Base_SetConfig+0x40>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a3a      	ldr	r2, [pc, #232]	; (800d46c <TIM_Base_SetConfig+0x124>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d108      	bne.n	800d39a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d38e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	4313      	orrs	r3, r2
 800d398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4a2f      	ldr	r2, [pc, #188]	; (800d45c <TIM_Base_SetConfig+0x114>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d02b      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3a8:	d027      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4a2c      	ldr	r2, [pc, #176]	; (800d460 <TIM_Base_SetConfig+0x118>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d023      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	4a2b      	ldr	r2, [pc, #172]	; (800d464 <TIM_Base_SetConfig+0x11c>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d01f      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4a2a      	ldr	r2, [pc, #168]	; (800d468 <TIM_Base_SetConfig+0x120>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d01b      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4a29      	ldr	r2, [pc, #164]	; (800d46c <TIM_Base_SetConfig+0x124>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d017      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4a28      	ldr	r2, [pc, #160]	; (800d470 <TIM_Base_SetConfig+0x128>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d013      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	4a27      	ldr	r2, [pc, #156]	; (800d474 <TIM_Base_SetConfig+0x12c>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d00f      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a26      	ldr	r2, [pc, #152]	; (800d478 <TIM_Base_SetConfig+0x130>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d00b      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a25      	ldr	r2, [pc, #148]	; (800d47c <TIM_Base_SetConfig+0x134>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d007      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4a24      	ldr	r2, [pc, #144]	; (800d480 <TIM_Base_SetConfig+0x138>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d003      	beq.n	800d3fa <TIM_Base_SetConfig+0xb2>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a23      	ldr	r2, [pc, #140]	; (800d484 <TIM_Base_SetConfig+0x13c>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d108      	bne.n	800d40c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	68fa      	ldr	r2, [r7, #12]
 800d408:	4313      	orrs	r3, r2
 800d40a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	695b      	ldr	r3, [r3, #20]
 800d416:	4313      	orrs	r3, r2
 800d418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	68fa      	ldr	r2, [r7, #12]
 800d41e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	689a      	ldr	r2, [r3, #8]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	4a0a      	ldr	r2, [pc, #40]	; (800d45c <TIM_Base_SetConfig+0x114>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d003      	beq.n	800d440 <TIM_Base_SetConfig+0xf8>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4a0c      	ldr	r2, [pc, #48]	; (800d46c <TIM_Base_SetConfig+0x124>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d103      	bne.n	800d448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	691a      	ldr	r2, [r3, #16]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2201      	movs	r2, #1
 800d44c:	615a      	str	r2, [r3, #20]
}
 800d44e:	bf00      	nop
 800d450:	3714      	adds	r7, #20
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	40010000 	.word	0x40010000
 800d460:	40000400 	.word	0x40000400
 800d464:	40000800 	.word	0x40000800
 800d468:	40000c00 	.word	0x40000c00
 800d46c:	40010400 	.word	0x40010400
 800d470:	40014000 	.word	0x40014000
 800d474:	40014400 	.word	0x40014400
 800d478:	40014800 	.word	0x40014800
 800d47c:	40001800 	.word	0x40001800
 800d480:	40001c00 	.word	0x40001c00
 800d484:	40002000 	.word	0x40002000

0800d488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d488:	b480      	push	{r7}
 800d48a:	b087      	sub	sp, #28
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	f023 0201 	bic.w	r2, r3, #1
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a1b      	ldr	r3, [r3, #32]
 800d4a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	699b      	ldr	r3, [r3, #24]
 800d4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f023 0303 	bic.w	r3, r3, #3
 800d4be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	f023 0302 	bic.w	r3, r3, #2
 800d4d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	697a      	ldr	r2, [r7, #20]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4a20      	ldr	r2, [pc, #128]	; (800d560 <TIM_OC1_SetConfig+0xd8>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d003      	beq.n	800d4ec <TIM_OC1_SetConfig+0x64>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4a1f      	ldr	r2, [pc, #124]	; (800d564 <TIM_OC1_SetConfig+0xdc>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d10c      	bne.n	800d506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	f023 0308 	bic.w	r3, r3, #8
 800d4f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	f023 0304 	bic.w	r3, r3, #4
 800d504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4a15      	ldr	r2, [pc, #84]	; (800d560 <TIM_OC1_SetConfig+0xd8>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d003      	beq.n	800d516 <TIM_OC1_SetConfig+0x8e>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4a14      	ldr	r2, [pc, #80]	; (800d564 <TIM_OC1_SetConfig+0xdc>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d111      	bne.n	800d53a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d51c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	695b      	ldr	r3, [r3, #20]
 800d52a:	693a      	ldr	r2, [r7, #16]
 800d52c:	4313      	orrs	r3, r2
 800d52e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	699b      	ldr	r3, [r3, #24]
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	4313      	orrs	r3, r2
 800d538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	693a      	ldr	r2, [r7, #16]
 800d53e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	685a      	ldr	r2, [r3, #4]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	621a      	str	r2, [r3, #32]
}
 800d554:	bf00      	nop
 800d556:	371c      	adds	r7, #28
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	40010000 	.word	0x40010000
 800d564:	40010400 	.word	0x40010400

0800d568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d568:	b480      	push	{r7}
 800d56a:	b087      	sub	sp, #28
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6a1b      	ldr	r3, [r3, #32]
 800d576:	f023 0210 	bic.w	r2, r3, #16
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6a1b      	ldr	r3, [r3, #32]
 800d582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	699b      	ldr	r3, [r3, #24]
 800d58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d59e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	021b      	lsls	r3, r3, #8
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	f023 0320 	bic.w	r3, r3, #32
 800d5b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	011b      	lsls	r3, r3, #4
 800d5ba:	697a      	ldr	r2, [r7, #20]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a22      	ldr	r2, [pc, #136]	; (800d64c <TIM_OC2_SetConfig+0xe4>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d003      	beq.n	800d5d0 <TIM_OC2_SetConfig+0x68>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4a21      	ldr	r2, [pc, #132]	; (800d650 <TIM_OC2_SetConfig+0xe8>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d10d      	bne.n	800d5ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	011b      	lsls	r3, r3, #4
 800d5de:	697a      	ldr	r2, [r7, #20]
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4a17      	ldr	r2, [pc, #92]	; (800d64c <TIM_OC2_SetConfig+0xe4>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d003      	beq.n	800d5fc <TIM_OC2_SetConfig+0x94>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	4a16      	ldr	r2, [pc, #88]	; (800d650 <TIM_OC2_SetConfig+0xe8>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d113      	bne.n	800d624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d60a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	695b      	ldr	r3, [r3, #20]
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	693a      	ldr	r2, [r7, #16]
 800d614:	4313      	orrs	r3, r2
 800d616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	699b      	ldr	r3, [r3, #24]
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	693a      	ldr	r2, [r7, #16]
 800d620:	4313      	orrs	r3, r2
 800d622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	693a      	ldr	r2, [r7, #16]
 800d628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	685a      	ldr	r2, [r3, #4]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	697a      	ldr	r2, [r7, #20]
 800d63c:	621a      	str	r2, [r3, #32]
}
 800d63e:	bf00      	nop
 800d640:	371c      	adds	r7, #28
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	40010000 	.word	0x40010000
 800d650:	40010400 	.word	0x40010400

0800d654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d654:	b480      	push	{r7}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a1b      	ldr	r3, [r3, #32]
 800d662:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a1b      	ldr	r3, [r3, #32]
 800d66e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	69db      	ldr	r3, [r3, #28]
 800d67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f023 0303 	bic.w	r3, r3, #3
 800d68a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	4313      	orrs	r3, r2
 800d694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d69c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	021b      	lsls	r3, r3, #8
 800d6a4:	697a      	ldr	r2, [r7, #20]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a21      	ldr	r2, [pc, #132]	; (800d734 <TIM_OC3_SetConfig+0xe0>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d003      	beq.n	800d6ba <TIM_OC3_SetConfig+0x66>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4a20      	ldr	r2, [pc, #128]	; (800d738 <TIM_OC3_SetConfig+0xe4>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d10d      	bne.n	800d6d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	021b      	lsls	r3, r3, #8
 800d6c8:	697a      	ldr	r2, [r7, #20]
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	4a16      	ldr	r2, [pc, #88]	; (800d734 <TIM_OC3_SetConfig+0xe0>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d003      	beq.n	800d6e6 <TIM_OC3_SetConfig+0x92>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4a15      	ldr	r2, [pc, #84]	; (800d738 <TIM_OC3_SetConfig+0xe4>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d113      	bne.n	800d70e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	695b      	ldr	r3, [r3, #20]
 800d6fa:	011b      	lsls	r3, r3, #4
 800d6fc:	693a      	ldr	r2, [r7, #16]
 800d6fe:	4313      	orrs	r3, r2
 800d700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	699b      	ldr	r3, [r3, #24]
 800d706:	011b      	lsls	r3, r3, #4
 800d708:	693a      	ldr	r2, [r7, #16]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	693a      	ldr	r2, [r7, #16]
 800d712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	685a      	ldr	r2, [r3, #4]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	621a      	str	r2, [r3, #32]
}
 800d728:	bf00      	nop
 800d72a:	371c      	adds	r7, #28
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr
 800d734:	40010000 	.word	0x40010000
 800d738:	40010400 	.word	0x40010400

0800d73c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b087      	sub	sp, #28
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	69db      	ldr	r3, [r3, #28]
 800d762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d76a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	021b      	lsls	r3, r3, #8
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	031b      	lsls	r3, r3, #12
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	4313      	orrs	r3, r2
 800d792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	4a12      	ldr	r2, [pc, #72]	; (800d7e0 <TIM_OC4_SetConfig+0xa4>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d003      	beq.n	800d7a4 <TIM_OC4_SetConfig+0x68>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	4a11      	ldr	r2, [pc, #68]	; (800d7e4 <TIM_OC4_SetConfig+0xa8>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d109      	bne.n	800d7b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	695b      	ldr	r3, [r3, #20]
 800d7b0:	019b      	lsls	r3, r3, #6
 800d7b2:	697a      	ldr	r2, [r7, #20]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	697a      	ldr	r2, [r7, #20]
 800d7bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	685a      	ldr	r2, [r3, #4]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	693a      	ldr	r2, [r7, #16]
 800d7d0:	621a      	str	r2, [r3, #32]
}
 800d7d2:	bf00      	nop
 800d7d4:	371c      	adds	r7, #28
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	40010000 	.word	0x40010000
 800d7e4:	40010400 	.word	0x40010400

0800d7e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b087      	sub	sp, #28
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	f003 031f 	and.w	r3, r3, #31
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6a1a      	ldr	r2, [r3, #32]
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	43db      	mvns	r3, r3
 800d80a:	401a      	ands	r2, r3
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6a1a      	ldr	r2, [r3, #32]
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	f003 031f 	and.w	r3, r3, #31
 800d81a:	6879      	ldr	r1, [r7, #4]
 800d81c:	fa01 f303 	lsl.w	r3, r1, r3
 800d820:	431a      	orrs	r2, r3
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	621a      	str	r2, [r3, #32]
}
 800d826:	bf00      	nop
 800d828:	371c      	adds	r7, #28
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
	...

0800d834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d844:	2b01      	cmp	r3, #1
 800d846:	d101      	bne.n	800d84c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d848:	2302      	movs	r3, #2
 800d84a:	e05a      	b.n	800d902 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2202      	movs	r2, #2
 800d858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	4313      	orrs	r3, r2
 800d87c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a21      	ldr	r2, [pc, #132]	; (800d910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d022      	beq.n	800d8d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d898:	d01d      	beq.n	800d8d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a1d      	ldr	r2, [pc, #116]	; (800d914 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d018      	beq.n	800d8d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a1b      	ldr	r2, [pc, #108]	; (800d918 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d013      	beq.n	800d8d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a1a      	ldr	r2, [pc, #104]	; (800d91c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d00e      	beq.n	800d8d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a18      	ldr	r2, [pc, #96]	; (800d920 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d009      	beq.n	800d8d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a17      	ldr	r2, [pc, #92]	; (800d924 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d004      	beq.n	800d8d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a15      	ldr	r2, [pc, #84]	; (800d928 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d10c      	bne.n	800d8f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	68ba      	ldr	r2, [r7, #8]
 800d8ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d900:	2300      	movs	r3, #0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	40010000 	.word	0x40010000
 800d914:	40000400 	.word	0x40000400
 800d918:	40000800 	.word	0x40000800
 800d91c:	40000c00 	.word	0x40000c00
 800d920:	40010400 	.word	0x40010400
 800d924:	40014000 	.word	0x40014000
 800d928:	40001800 	.word	0x40001800

0800d92c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d936:	2300      	movs	r3, #0
 800d938:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d940:	2b01      	cmp	r3, #1
 800d942:	d101      	bne.n	800d948 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d944:	2302      	movs	r3, #2
 800d946:	e03d      	b.n	800d9c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	4313      	orrs	r3, r2
 800d96a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	4313      	orrs	r3, r2
 800d978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4313      	orrs	r3, r2
 800d986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	4313      	orrs	r3, r2
 800d994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	695b      	ldr	r3, [r3, #20]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	69db      	ldr	r3, [r3, #28]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d9d8:	bf00      	nop
 800d9da:	370c      	adds	r7, #12
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d9ec:	bf00      	nop
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d101      	bne.n	800da0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da06:	2301      	movs	r3, #1
 800da08:	e03f      	b.n	800da8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b00      	cmp	r3, #0
 800da14:	d106      	bne.n	800da24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7f8 fae6 	bl	8005ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2224      	movs	r2, #36	; 0x24
 800da28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	68da      	ldr	r2, [r3, #12]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800da3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f829 	bl	800da94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	691a      	ldr	r2, [r3, #16]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	695a      	ldr	r2, [r3, #20]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68da      	ldr	r2, [r3, #12]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800da70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2200      	movs	r2, #0
 800da76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2220      	movs	r2, #32
 800da7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2220      	movs	r2, #32
 800da84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3708      	adds	r7, #8
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
	...

0800da94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da98:	b085      	sub	sp, #20
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	68da      	ldr	r2, [r3, #12]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	430a      	orrs	r2, r1
 800dab2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	689a      	ldr	r2, [r3, #8]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	691b      	ldr	r3, [r3, #16]
 800dabc:	431a      	orrs	r2, r3
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	695b      	ldr	r3, [r3, #20]
 800dac2:	431a      	orrs	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	69db      	ldr	r3, [r3, #28]
 800dac8:	4313      	orrs	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800dad6:	f023 030c 	bic.w	r3, r3, #12
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	6812      	ldr	r2, [r2, #0]
 800dade:	68f9      	ldr	r1, [r7, #12]
 800dae0:	430b      	orrs	r3, r1
 800dae2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	695b      	ldr	r3, [r3, #20]
 800daea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	699a      	ldr	r2, [r3, #24]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	430a      	orrs	r2, r1
 800daf8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	69db      	ldr	r3, [r3, #28]
 800dafe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db02:	f040 818b 	bne.w	800de1c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4ac1      	ldr	r2, [pc, #772]	; (800de10 <UART_SetConfig+0x37c>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d005      	beq.n	800db1c <UART_SetConfig+0x88>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4abf      	ldr	r2, [pc, #764]	; (800de14 <UART_SetConfig+0x380>)
 800db16:	4293      	cmp	r3, r2
 800db18:	f040 80bd 	bne.w	800dc96 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800db1c:	f7fc fbcc 	bl	800a2b8 <HAL_RCC_GetPCLK2Freq>
 800db20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	461d      	mov	r5, r3
 800db26:	f04f 0600 	mov.w	r6, #0
 800db2a:	46a8      	mov	r8, r5
 800db2c:	46b1      	mov	r9, r6
 800db2e:	eb18 0308 	adds.w	r3, r8, r8
 800db32:	eb49 0409 	adc.w	r4, r9, r9
 800db36:	4698      	mov	r8, r3
 800db38:	46a1      	mov	r9, r4
 800db3a:	eb18 0805 	adds.w	r8, r8, r5
 800db3e:	eb49 0906 	adc.w	r9, r9, r6
 800db42:	f04f 0100 	mov.w	r1, #0
 800db46:	f04f 0200 	mov.w	r2, #0
 800db4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800db4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800db52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800db56:	4688      	mov	r8, r1
 800db58:	4691      	mov	r9, r2
 800db5a:	eb18 0005 	adds.w	r0, r8, r5
 800db5e:	eb49 0106 	adc.w	r1, r9, r6
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	461d      	mov	r5, r3
 800db68:	f04f 0600 	mov.w	r6, #0
 800db6c:	196b      	adds	r3, r5, r5
 800db6e:	eb46 0406 	adc.w	r4, r6, r6
 800db72:	461a      	mov	r2, r3
 800db74:	4623      	mov	r3, r4
 800db76:	f7f3 f89f 	bl	8000cb8 <__aeabi_uldivmod>
 800db7a:	4603      	mov	r3, r0
 800db7c:	460c      	mov	r4, r1
 800db7e:	461a      	mov	r2, r3
 800db80:	4ba5      	ldr	r3, [pc, #660]	; (800de18 <UART_SetConfig+0x384>)
 800db82:	fba3 2302 	umull	r2, r3, r3, r2
 800db86:	095b      	lsrs	r3, r3, #5
 800db88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	461d      	mov	r5, r3
 800db90:	f04f 0600 	mov.w	r6, #0
 800db94:	46a9      	mov	r9, r5
 800db96:	46b2      	mov	sl, r6
 800db98:	eb19 0309 	adds.w	r3, r9, r9
 800db9c:	eb4a 040a 	adc.w	r4, sl, sl
 800dba0:	4699      	mov	r9, r3
 800dba2:	46a2      	mov	sl, r4
 800dba4:	eb19 0905 	adds.w	r9, r9, r5
 800dba8:	eb4a 0a06 	adc.w	sl, sl, r6
 800dbac:	f04f 0100 	mov.w	r1, #0
 800dbb0:	f04f 0200 	mov.w	r2, #0
 800dbb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dbb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dbbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dbc0:	4689      	mov	r9, r1
 800dbc2:	4692      	mov	sl, r2
 800dbc4:	eb19 0005 	adds.w	r0, r9, r5
 800dbc8:	eb4a 0106 	adc.w	r1, sl, r6
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	461d      	mov	r5, r3
 800dbd2:	f04f 0600 	mov.w	r6, #0
 800dbd6:	196b      	adds	r3, r5, r5
 800dbd8:	eb46 0406 	adc.w	r4, r6, r6
 800dbdc:	461a      	mov	r2, r3
 800dbde:	4623      	mov	r3, r4
 800dbe0:	f7f3 f86a 	bl	8000cb8 <__aeabi_uldivmod>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	460c      	mov	r4, r1
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4b8b      	ldr	r3, [pc, #556]	; (800de18 <UART_SetConfig+0x384>)
 800dbec:	fba3 1302 	umull	r1, r3, r3, r2
 800dbf0:	095b      	lsrs	r3, r3, #5
 800dbf2:	2164      	movs	r1, #100	; 0x64
 800dbf4:	fb01 f303 	mul.w	r3, r1, r3
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	00db      	lsls	r3, r3, #3
 800dbfc:	3332      	adds	r3, #50	; 0x32
 800dbfe:	4a86      	ldr	r2, [pc, #536]	; (800de18 <UART_SetConfig+0x384>)
 800dc00:	fba2 2303 	umull	r2, r3, r2, r3
 800dc04:	095b      	lsrs	r3, r3, #5
 800dc06:	005b      	lsls	r3, r3, #1
 800dc08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dc0c:	4498      	add	r8, r3
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	461d      	mov	r5, r3
 800dc12:	f04f 0600 	mov.w	r6, #0
 800dc16:	46a9      	mov	r9, r5
 800dc18:	46b2      	mov	sl, r6
 800dc1a:	eb19 0309 	adds.w	r3, r9, r9
 800dc1e:	eb4a 040a 	adc.w	r4, sl, sl
 800dc22:	4699      	mov	r9, r3
 800dc24:	46a2      	mov	sl, r4
 800dc26:	eb19 0905 	adds.w	r9, r9, r5
 800dc2a:	eb4a 0a06 	adc.w	sl, sl, r6
 800dc2e:	f04f 0100 	mov.w	r1, #0
 800dc32:	f04f 0200 	mov.w	r2, #0
 800dc36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dc3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dc3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dc42:	4689      	mov	r9, r1
 800dc44:	4692      	mov	sl, r2
 800dc46:	eb19 0005 	adds.w	r0, r9, r5
 800dc4a:	eb4a 0106 	adc.w	r1, sl, r6
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	461d      	mov	r5, r3
 800dc54:	f04f 0600 	mov.w	r6, #0
 800dc58:	196b      	adds	r3, r5, r5
 800dc5a:	eb46 0406 	adc.w	r4, r6, r6
 800dc5e:	461a      	mov	r2, r3
 800dc60:	4623      	mov	r3, r4
 800dc62:	f7f3 f829 	bl	8000cb8 <__aeabi_uldivmod>
 800dc66:	4603      	mov	r3, r0
 800dc68:	460c      	mov	r4, r1
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	4b6a      	ldr	r3, [pc, #424]	; (800de18 <UART_SetConfig+0x384>)
 800dc6e:	fba3 1302 	umull	r1, r3, r3, r2
 800dc72:	095b      	lsrs	r3, r3, #5
 800dc74:	2164      	movs	r1, #100	; 0x64
 800dc76:	fb01 f303 	mul.w	r3, r1, r3
 800dc7a:	1ad3      	subs	r3, r2, r3
 800dc7c:	00db      	lsls	r3, r3, #3
 800dc7e:	3332      	adds	r3, #50	; 0x32
 800dc80:	4a65      	ldr	r2, [pc, #404]	; (800de18 <UART_SetConfig+0x384>)
 800dc82:	fba2 2303 	umull	r2, r3, r2, r3
 800dc86:	095b      	lsrs	r3, r3, #5
 800dc88:	f003 0207 	and.w	r2, r3, #7
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4442      	add	r2, r8
 800dc92:	609a      	str	r2, [r3, #8]
 800dc94:	e26f      	b.n	800e176 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dc96:	f7fc fafb 	bl	800a290 <HAL_RCC_GetPCLK1Freq>
 800dc9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	461d      	mov	r5, r3
 800dca0:	f04f 0600 	mov.w	r6, #0
 800dca4:	46a8      	mov	r8, r5
 800dca6:	46b1      	mov	r9, r6
 800dca8:	eb18 0308 	adds.w	r3, r8, r8
 800dcac:	eb49 0409 	adc.w	r4, r9, r9
 800dcb0:	4698      	mov	r8, r3
 800dcb2:	46a1      	mov	r9, r4
 800dcb4:	eb18 0805 	adds.w	r8, r8, r5
 800dcb8:	eb49 0906 	adc.w	r9, r9, r6
 800dcbc:	f04f 0100 	mov.w	r1, #0
 800dcc0:	f04f 0200 	mov.w	r2, #0
 800dcc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dcc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dccc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dcd0:	4688      	mov	r8, r1
 800dcd2:	4691      	mov	r9, r2
 800dcd4:	eb18 0005 	adds.w	r0, r8, r5
 800dcd8:	eb49 0106 	adc.w	r1, r9, r6
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	461d      	mov	r5, r3
 800dce2:	f04f 0600 	mov.w	r6, #0
 800dce6:	196b      	adds	r3, r5, r5
 800dce8:	eb46 0406 	adc.w	r4, r6, r6
 800dcec:	461a      	mov	r2, r3
 800dcee:	4623      	mov	r3, r4
 800dcf0:	f7f2 ffe2 	bl	8000cb8 <__aeabi_uldivmod>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	4b47      	ldr	r3, [pc, #284]	; (800de18 <UART_SetConfig+0x384>)
 800dcfc:	fba3 2302 	umull	r2, r3, r3, r2
 800dd00:	095b      	lsrs	r3, r3, #5
 800dd02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	461d      	mov	r5, r3
 800dd0a:	f04f 0600 	mov.w	r6, #0
 800dd0e:	46a9      	mov	r9, r5
 800dd10:	46b2      	mov	sl, r6
 800dd12:	eb19 0309 	adds.w	r3, r9, r9
 800dd16:	eb4a 040a 	adc.w	r4, sl, sl
 800dd1a:	4699      	mov	r9, r3
 800dd1c:	46a2      	mov	sl, r4
 800dd1e:	eb19 0905 	adds.w	r9, r9, r5
 800dd22:	eb4a 0a06 	adc.w	sl, sl, r6
 800dd26:	f04f 0100 	mov.w	r1, #0
 800dd2a:	f04f 0200 	mov.w	r2, #0
 800dd2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dd36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dd3a:	4689      	mov	r9, r1
 800dd3c:	4692      	mov	sl, r2
 800dd3e:	eb19 0005 	adds.w	r0, r9, r5
 800dd42:	eb4a 0106 	adc.w	r1, sl, r6
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	461d      	mov	r5, r3
 800dd4c:	f04f 0600 	mov.w	r6, #0
 800dd50:	196b      	adds	r3, r5, r5
 800dd52:	eb46 0406 	adc.w	r4, r6, r6
 800dd56:	461a      	mov	r2, r3
 800dd58:	4623      	mov	r3, r4
 800dd5a:	f7f2 ffad 	bl	8000cb8 <__aeabi_uldivmod>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	460c      	mov	r4, r1
 800dd62:	461a      	mov	r2, r3
 800dd64:	4b2c      	ldr	r3, [pc, #176]	; (800de18 <UART_SetConfig+0x384>)
 800dd66:	fba3 1302 	umull	r1, r3, r3, r2
 800dd6a:	095b      	lsrs	r3, r3, #5
 800dd6c:	2164      	movs	r1, #100	; 0x64
 800dd6e:	fb01 f303 	mul.w	r3, r1, r3
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	00db      	lsls	r3, r3, #3
 800dd76:	3332      	adds	r3, #50	; 0x32
 800dd78:	4a27      	ldr	r2, [pc, #156]	; (800de18 <UART_SetConfig+0x384>)
 800dd7a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd7e:	095b      	lsrs	r3, r3, #5
 800dd80:	005b      	lsls	r3, r3, #1
 800dd82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dd86:	4498      	add	r8, r3
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	461d      	mov	r5, r3
 800dd8c:	f04f 0600 	mov.w	r6, #0
 800dd90:	46a9      	mov	r9, r5
 800dd92:	46b2      	mov	sl, r6
 800dd94:	eb19 0309 	adds.w	r3, r9, r9
 800dd98:	eb4a 040a 	adc.w	r4, sl, sl
 800dd9c:	4699      	mov	r9, r3
 800dd9e:	46a2      	mov	sl, r4
 800dda0:	eb19 0905 	adds.w	r9, r9, r5
 800dda4:	eb4a 0a06 	adc.w	sl, sl, r6
 800dda8:	f04f 0100 	mov.w	r1, #0
 800ddac:	f04f 0200 	mov.w	r2, #0
 800ddb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ddb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ddb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ddbc:	4689      	mov	r9, r1
 800ddbe:	4692      	mov	sl, r2
 800ddc0:	eb19 0005 	adds.w	r0, r9, r5
 800ddc4:	eb4a 0106 	adc.w	r1, sl, r6
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	461d      	mov	r5, r3
 800ddce:	f04f 0600 	mov.w	r6, #0
 800ddd2:	196b      	adds	r3, r5, r5
 800ddd4:	eb46 0406 	adc.w	r4, r6, r6
 800ddd8:	461a      	mov	r2, r3
 800ddda:	4623      	mov	r3, r4
 800dddc:	f7f2 ff6c 	bl	8000cb8 <__aeabi_uldivmod>
 800dde0:	4603      	mov	r3, r0
 800dde2:	460c      	mov	r4, r1
 800dde4:	461a      	mov	r2, r3
 800dde6:	4b0c      	ldr	r3, [pc, #48]	; (800de18 <UART_SetConfig+0x384>)
 800dde8:	fba3 1302 	umull	r1, r3, r3, r2
 800ddec:	095b      	lsrs	r3, r3, #5
 800ddee:	2164      	movs	r1, #100	; 0x64
 800ddf0:	fb01 f303 	mul.w	r3, r1, r3
 800ddf4:	1ad3      	subs	r3, r2, r3
 800ddf6:	00db      	lsls	r3, r3, #3
 800ddf8:	3332      	adds	r3, #50	; 0x32
 800ddfa:	4a07      	ldr	r2, [pc, #28]	; (800de18 <UART_SetConfig+0x384>)
 800ddfc:	fba2 2303 	umull	r2, r3, r2, r3
 800de00:	095b      	lsrs	r3, r3, #5
 800de02:	f003 0207 	and.w	r2, r3, #7
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4442      	add	r2, r8
 800de0c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800de0e:	e1b2      	b.n	800e176 <UART_SetConfig+0x6e2>
 800de10:	40011000 	.word	0x40011000
 800de14:	40011400 	.word	0x40011400
 800de18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4ad7      	ldr	r2, [pc, #860]	; (800e180 <UART_SetConfig+0x6ec>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d005      	beq.n	800de32 <UART_SetConfig+0x39e>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4ad6      	ldr	r2, [pc, #856]	; (800e184 <UART_SetConfig+0x6f0>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	f040 80d1 	bne.w	800dfd4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800de32:	f7fc fa41 	bl	800a2b8 <HAL_RCC_GetPCLK2Freq>
 800de36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	469a      	mov	sl, r3
 800de3c:	f04f 0b00 	mov.w	fp, #0
 800de40:	46d0      	mov	r8, sl
 800de42:	46d9      	mov	r9, fp
 800de44:	eb18 0308 	adds.w	r3, r8, r8
 800de48:	eb49 0409 	adc.w	r4, r9, r9
 800de4c:	4698      	mov	r8, r3
 800de4e:	46a1      	mov	r9, r4
 800de50:	eb18 080a 	adds.w	r8, r8, sl
 800de54:	eb49 090b 	adc.w	r9, r9, fp
 800de58:	f04f 0100 	mov.w	r1, #0
 800de5c:	f04f 0200 	mov.w	r2, #0
 800de60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800de64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800de68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800de6c:	4688      	mov	r8, r1
 800de6e:	4691      	mov	r9, r2
 800de70:	eb1a 0508 	adds.w	r5, sl, r8
 800de74:	eb4b 0609 	adc.w	r6, fp, r9
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	4619      	mov	r1, r3
 800de7e:	f04f 0200 	mov.w	r2, #0
 800de82:	f04f 0300 	mov.w	r3, #0
 800de86:	f04f 0400 	mov.w	r4, #0
 800de8a:	0094      	lsls	r4, r2, #2
 800de8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800de90:	008b      	lsls	r3, r1, #2
 800de92:	461a      	mov	r2, r3
 800de94:	4623      	mov	r3, r4
 800de96:	4628      	mov	r0, r5
 800de98:	4631      	mov	r1, r6
 800de9a:	f7f2 ff0d 	bl	8000cb8 <__aeabi_uldivmod>
 800de9e:	4603      	mov	r3, r0
 800dea0:	460c      	mov	r4, r1
 800dea2:	461a      	mov	r2, r3
 800dea4:	4bb8      	ldr	r3, [pc, #736]	; (800e188 <UART_SetConfig+0x6f4>)
 800dea6:	fba3 2302 	umull	r2, r3, r3, r2
 800deaa:	095b      	lsrs	r3, r3, #5
 800deac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	469b      	mov	fp, r3
 800deb4:	f04f 0c00 	mov.w	ip, #0
 800deb8:	46d9      	mov	r9, fp
 800deba:	46e2      	mov	sl, ip
 800debc:	eb19 0309 	adds.w	r3, r9, r9
 800dec0:	eb4a 040a 	adc.w	r4, sl, sl
 800dec4:	4699      	mov	r9, r3
 800dec6:	46a2      	mov	sl, r4
 800dec8:	eb19 090b 	adds.w	r9, r9, fp
 800decc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ded0:	f04f 0100 	mov.w	r1, #0
 800ded4:	f04f 0200 	mov.w	r2, #0
 800ded8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dedc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dee0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dee4:	4689      	mov	r9, r1
 800dee6:	4692      	mov	sl, r2
 800dee8:	eb1b 0509 	adds.w	r5, fp, r9
 800deec:	eb4c 060a 	adc.w	r6, ip, sl
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	4619      	mov	r1, r3
 800def6:	f04f 0200 	mov.w	r2, #0
 800defa:	f04f 0300 	mov.w	r3, #0
 800defe:	f04f 0400 	mov.w	r4, #0
 800df02:	0094      	lsls	r4, r2, #2
 800df04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800df08:	008b      	lsls	r3, r1, #2
 800df0a:	461a      	mov	r2, r3
 800df0c:	4623      	mov	r3, r4
 800df0e:	4628      	mov	r0, r5
 800df10:	4631      	mov	r1, r6
 800df12:	f7f2 fed1 	bl	8000cb8 <__aeabi_uldivmod>
 800df16:	4603      	mov	r3, r0
 800df18:	460c      	mov	r4, r1
 800df1a:	461a      	mov	r2, r3
 800df1c:	4b9a      	ldr	r3, [pc, #616]	; (800e188 <UART_SetConfig+0x6f4>)
 800df1e:	fba3 1302 	umull	r1, r3, r3, r2
 800df22:	095b      	lsrs	r3, r3, #5
 800df24:	2164      	movs	r1, #100	; 0x64
 800df26:	fb01 f303 	mul.w	r3, r1, r3
 800df2a:	1ad3      	subs	r3, r2, r3
 800df2c:	011b      	lsls	r3, r3, #4
 800df2e:	3332      	adds	r3, #50	; 0x32
 800df30:	4a95      	ldr	r2, [pc, #596]	; (800e188 <UART_SetConfig+0x6f4>)
 800df32:	fba2 2303 	umull	r2, r3, r2, r3
 800df36:	095b      	lsrs	r3, r3, #5
 800df38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df3c:	4498      	add	r8, r3
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	469b      	mov	fp, r3
 800df42:	f04f 0c00 	mov.w	ip, #0
 800df46:	46d9      	mov	r9, fp
 800df48:	46e2      	mov	sl, ip
 800df4a:	eb19 0309 	adds.w	r3, r9, r9
 800df4e:	eb4a 040a 	adc.w	r4, sl, sl
 800df52:	4699      	mov	r9, r3
 800df54:	46a2      	mov	sl, r4
 800df56:	eb19 090b 	adds.w	r9, r9, fp
 800df5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800df5e:	f04f 0100 	mov.w	r1, #0
 800df62:	f04f 0200 	mov.w	r2, #0
 800df66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800df6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800df6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800df72:	4689      	mov	r9, r1
 800df74:	4692      	mov	sl, r2
 800df76:	eb1b 0509 	adds.w	r5, fp, r9
 800df7a:	eb4c 060a 	adc.w	r6, ip, sl
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	4619      	mov	r1, r3
 800df84:	f04f 0200 	mov.w	r2, #0
 800df88:	f04f 0300 	mov.w	r3, #0
 800df8c:	f04f 0400 	mov.w	r4, #0
 800df90:	0094      	lsls	r4, r2, #2
 800df92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800df96:	008b      	lsls	r3, r1, #2
 800df98:	461a      	mov	r2, r3
 800df9a:	4623      	mov	r3, r4
 800df9c:	4628      	mov	r0, r5
 800df9e:	4631      	mov	r1, r6
 800dfa0:	f7f2 fe8a 	bl	8000cb8 <__aeabi_uldivmod>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	4b77      	ldr	r3, [pc, #476]	; (800e188 <UART_SetConfig+0x6f4>)
 800dfac:	fba3 1302 	umull	r1, r3, r3, r2
 800dfb0:	095b      	lsrs	r3, r3, #5
 800dfb2:	2164      	movs	r1, #100	; 0x64
 800dfb4:	fb01 f303 	mul.w	r3, r1, r3
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	011b      	lsls	r3, r3, #4
 800dfbc:	3332      	adds	r3, #50	; 0x32
 800dfbe:	4a72      	ldr	r2, [pc, #456]	; (800e188 <UART_SetConfig+0x6f4>)
 800dfc0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfc4:	095b      	lsrs	r3, r3, #5
 800dfc6:	f003 020f 	and.w	r2, r3, #15
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4442      	add	r2, r8
 800dfd0:	609a      	str	r2, [r3, #8]
 800dfd2:	e0d0      	b.n	800e176 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800dfd4:	f7fc f95c 	bl	800a290 <HAL_RCC_GetPCLK1Freq>
 800dfd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	469a      	mov	sl, r3
 800dfde:	f04f 0b00 	mov.w	fp, #0
 800dfe2:	46d0      	mov	r8, sl
 800dfe4:	46d9      	mov	r9, fp
 800dfe6:	eb18 0308 	adds.w	r3, r8, r8
 800dfea:	eb49 0409 	adc.w	r4, r9, r9
 800dfee:	4698      	mov	r8, r3
 800dff0:	46a1      	mov	r9, r4
 800dff2:	eb18 080a 	adds.w	r8, r8, sl
 800dff6:	eb49 090b 	adc.w	r9, r9, fp
 800dffa:	f04f 0100 	mov.w	r1, #0
 800dffe:	f04f 0200 	mov.w	r2, #0
 800e002:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e006:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e00a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e00e:	4688      	mov	r8, r1
 800e010:	4691      	mov	r9, r2
 800e012:	eb1a 0508 	adds.w	r5, sl, r8
 800e016:	eb4b 0609 	adc.w	r6, fp, r9
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	4619      	mov	r1, r3
 800e020:	f04f 0200 	mov.w	r2, #0
 800e024:	f04f 0300 	mov.w	r3, #0
 800e028:	f04f 0400 	mov.w	r4, #0
 800e02c:	0094      	lsls	r4, r2, #2
 800e02e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e032:	008b      	lsls	r3, r1, #2
 800e034:	461a      	mov	r2, r3
 800e036:	4623      	mov	r3, r4
 800e038:	4628      	mov	r0, r5
 800e03a:	4631      	mov	r1, r6
 800e03c:	f7f2 fe3c 	bl	8000cb8 <__aeabi_uldivmod>
 800e040:	4603      	mov	r3, r0
 800e042:	460c      	mov	r4, r1
 800e044:	461a      	mov	r2, r3
 800e046:	4b50      	ldr	r3, [pc, #320]	; (800e188 <UART_SetConfig+0x6f4>)
 800e048:	fba3 2302 	umull	r2, r3, r3, r2
 800e04c:	095b      	lsrs	r3, r3, #5
 800e04e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	469b      	mov	fp, r3
 800e056:	f04f 0c00 	mov.w	ip, #0
 800e05a:	46d9      	mov	r9, fp
 800e05c:	46e2      	mov	sl, ip
 800e05e:	eb19 0309 	adds.w	r3, r9, r9
 800e062:	eb4a 040a 	adc.w	r4, sl, sl
 800e066:	4699      	mov	r9, r3
 800e068:	46a2      	mov	sl, r4
 800e06a:	eb19 090b 	adds.w	r9, r9, fp
 800e06e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e072:	f04f 0100 	mov.w	r1, #0
 800e076:	f04f 0200 	mov.w	r2, #0
 800e07a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e07e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e086:	4689      	mov	r9, r1
 800e088:	4692      	mov	sl, r2
 800e08a:	eb1b 0509 	adds.w	r5, fp, r9
 800e08e:	eb4c 060a 	adc.w	r6, ip, sl
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	4619      	mov	r1, r3
 800e098:	f04f 0200 	mov.w	r2, #0
 800e09c:	f04f 0300 	mov.w	r3, #0
 800e0a0:	f04f 0400 	mov.w	r4, #0
 800e0a4:	0094      	lsls	r4, r2, #2
 800e0a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e0aa:	008b      	lsls	r3, r1, #2
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	4623      	mov	r3, r4
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	4631      	mov	r1, r6
 800e0b4:	f7f2 fe00 	bl	8000cb8 <__aeabi_uldivmod>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	461a      	mov	r2, r3
 800e0be:	4b32      	ldr	r3, [pc, #200]	; (800e188 <UART_SetConfig+0x6f4>)
 800e0c0:	fba3 1302 	umull	r1, r3, r3, r2
 800e0c4:	095b      	lsrs	r3, r3, #5
 800e0c6:	2164      	movs	r1, #100	; 0x64
 800e0c8:	fb01 f303 	mul.w	r3, r1, r3
 800e0cc:	1ad3      	subs	r3, r2, r3
 800e0ce:	011b      	lsls	r3, r3, #4
 800e0d0:	3332      	adds	r3, #50	; 0x32
 800e0d2:	4a2d      	ldr	r2, [pc, #180]	; (800e188 <UART_SetConfig+0x6f4>)
 800e0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e0d8:	095b      	lsrs	r3, r3, #5
 800e0da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0de:	4498      	add	r8, r3
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	469b      	mov	fp, r3
 800e0e4:	f04f 0c00 	mov.w	ip, #0
 800e0e8:	46d9      	mov	r9, fp
 800e0ea:	46e2      	mov	sl, ip
 800e0ec:	eb19 0309 	adds.w	r3, r9, r9
 800e0f0:	eb4a 040a 	adc.w	r4, sl, sl
 800e0f4:	4699      	mov	r9, r3
 800e0f6:	46a2      	mov	sl, r4
 800e0f8:	eb19 090b 	adds.w	r9, r9, fp
 800e0fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e100:	f04f 0100 	mov.w	r1, #0
 800e104:	f04f 0200 	mov.w	r2, #0
 800e108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e10c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e110:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e114:	4689      	mov	r9, r1
 800e116:	4692      	mov	sl, r2
 800e118:	eb1b 0509 	adds.w	r5, fp, r9
 800e11c:	eb4c 060a 	adc.w	r6, ip, sl
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	4619      	mov	r1, r3
 800e126:	f04f 0200 	mov.w	r2, #0
 800e12a:	f04f 0300 	mov.w	r3, #0
 800e12e:	f04f 0400 	mov.w	r4, #0
 800e132:	0094      	lsls	r4, r2, #2
 800e134:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e138:	008b      	lsls	r3, r1, #2
 800e13a:	461a      	mov	r2, r3
 800e13c:	4623      	mov	r3, r4
 800e13e:	4628      	mov	r0, r5
 800e140:	4631      	mov	r1, r6
 800e142:	f7f2 fdb9 	bl	8000cb8 <__aeabi_uldivmod>
 800e146:	4603      	mov	r3, r0
 800e148:	460c      	mov	r4, r1
 800e14a:	461a      	mov	r2, r3
 800e14c:	4b0e      	ldr	r3, [pc, #56]	; (800e188 <UART_SetConfig+0x6f4>)
 800e14e:	fba3 1302 	umull	r1, r3, r3, r2
 800e152:	095b      	lsrs	r3, r3, #5
 800e154:	2164      	movs	r1, #100	; 0x64
 800e156:	fb01 f303 	mul.w	r3, r1, r3
 800e15a:	1ad3      	subs	r3, r2, r3
 800e15c:	011b      	lsls	r3, r3, #4
 800e15e:	3332      	adds	r3, #50	; 0x32
 800e160:	4a09      	ldr	r2, [pc, #36]	; (800e188 <UART_SetConfig+0x6f4>)
 800e162:	fba2 2303 	umull	r2, r3, r2, r3
 800e166:	095b      	lsrs	r3, r3, #5
 800e168:	f003 020f 	and.w	r2, r3, #15
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4442      	add	r2, r8
 800e172:	609a      	str	r2, [r3, #8]
}
 800e174:	e7ff      	b.n	800e176 <UART_SetConfig+0x6e2>
 800e176:	bf00      	nop
 800e178:	3714      	adds	r7, #20
 800e17a:	46bd      	mov	sp, r7
 800e17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e180:	40011000 	.word	0x40011000
 800e184:	40011400 	.word	0x40011400
 800e188:	51eb851f 	.word	0x51eb851f

0800e18c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e18c:	b084      	sub	sp, #16
 800e18e:	b480      	push	{r7}
 800e190:	b085      	sub	sp, #20
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	f107 001c 	add.w	r0, r7, #28
 800e19a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e1a2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e1a6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e1aa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e1ae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e1b2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e1b6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e1c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e1ca:	68fa      	ldr	r2, [r7, #12]
 800e1cc:	431a      	orrs	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	b004      	add	sp, #16
 800e1e0:	4770      	bx	lr

0800e1e2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e1e2:	b480      	push	{r7}
 800e1e4:	b083      	sub	sp, #12
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e210:	2300      	movs	r3, #0
}
 800e212:	4618      	mov	r0, r3
 800e214:	370c      	adds	r7, #12
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr

0800e21e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e21e:	b580      	push	{r7, lr}
 800e220:	b082      	sub	sp, #8
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2203      	movs	r2, #3
 800e22a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e22c:	2002      	movs	r0, #2
 800e22e:	f7f9 fbc5 	bl	80079bc <HAL_Delay>
  
  return HAL_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f003 0303 	and.w	r3, r3, #3
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e262:	2300      	movs	r3, #0
 800e264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e276:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e27c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e282:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e284:	68fa      	ldr	r2, [r7, #12]
 800e286:	4313      	orrs	r3, r2
 800e288:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e292:	f023 030f 	bic.w	r3, r3, #15
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	431a      	orrs	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e29e:	2300      	movs	r3, #0
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3714      	adds	r7, #20
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	b2db      	uxtb	r3, r3
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	370c      	adds	r7, #12
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr

0800e2c6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e2c6:	b480      	push	{r7}
 800e2c8:	b085      	sub	sp, #20
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
 800e2ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	3314      	adds	r3, #20
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	4413      	add	r3, r2
 800e2da:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
}  
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3714      	adds	r7, #20
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	685a      	ldr	r2, [r3, #4]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e312:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e318:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e31e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	4313      	orrs	r3, r2
 800e324:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e32a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	431a      	orrs	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e336:	2300      	movs	r3, #0

}
 800e338:	4618      	mov	r0, r3
 800e33a:	3714      	adds	r7, #20
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b088      	sub	sp, #32
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e352:	2310      	movs	r3, #16
 800e354:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e356:	2340      	movs	r3, #64	; 0x40
 800e358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e35a:	2300      	movs	r3, #0
 800e35c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e35e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e362:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e364:	f107 0308 	add.w	r3, r7, #8
 800e368:	4619      	mov	r1, r3
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff ff74 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e370:	f241 3288 	movw	r2, #5000	; 0x1388
 800e374:	2110      	movs	r1, #16
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 fa40 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e37c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e37e:	69fb      	ldr	r3, [r7, #28]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3720      	adds	r7, #32
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b088      	sub	sp, #32
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e396:	2311      	movs	r3, #17
 800e398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e39a:	2340      	movs	r3, #64	; 0x40
 800e39c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3a8:	f107 0308 	add.w	r3, r7, #8
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f7ff ff52 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e3b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3b8:	2111      	movs	r1, #17
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 fa1e 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e3c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3c2:	69fb      	ldr	r3, [r7, #28]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3720      	adds	r7, #32
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b088      	sub	sp, #32
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e3da:	2312      	movs	r3, #18
 800e3dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3de:	2340      	movs	r3, #64	; 0x40
 800e3e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3ec:	f107 0308 	add.w	r3, r7, #8
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7ff ff30 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e3f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3fc:	2112      	movs	r1, #18
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 f9fc 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e406:	69fb      	ldr	r3, [r7, #28]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3720      	adds	r7, #32
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b088      	sub	sp, #32
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e41e:	2318      	movs	r3, #24
 800e420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e422:	2340      	movs	r3, #64	; 0x40
 800e424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e426:	2300      	movs	r3, #0
 800e428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e42e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e430:	f107 0308 	add.w	r3, r7, #8
 800e434:	4619      	mov	r1, r3
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7ff ff0e 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e43c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e440:	2118      	movs	r1, #24
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 f9da 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e44a:	69fb      	ldr	r3, [r7, #28]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3720      	adds	r7, #32
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e462:	2319      	movs	r3, #25
 800e464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e466:	2340      	movs	r3, #64	; 0x40
 800e468:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e46a:	2300      	movs	r3, #0
 800e46c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e46e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e472:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e474:	f107 0308 	add.w	r3, r7, #8
 800e478:	4619      	mov	r1, r3
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7ff feec 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e480:	f241 3288 	movw	r2, #5000	; 0x1388
 800e484:	2119      	movs	r1, #25
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f9b8 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e48c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e48e:	69fb      	ldr	r3, [r7, #28]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3720      	adds	r7, #32
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b088      	sub	sp, #32
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e4a4:	230c      	movs	r3, #12
 800e4a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4a8:	2340      	movs	r3, #64	; 0x40
 800e4aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4b6:	f107 0308 	add.w	r3, r7, #8
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f7ff fecb 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e4c2:	4a05      	ldr	r2, [pc, #20]	; (800e4d8 <SDMMC_CmdStopTransfer+0x40>)
 800e4c4:	210c      	movs	r1, #12
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 f998 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e4cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4ce:	69fb      	ldr	r3, [r7, #28]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3720      	adds	r7, #32
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	05f5e100 	.word	0x05f5e100

0800e4dc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b08a      	sub	sp, #40	; 0x28
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e4ec:	2307      	movs	r3, #7
 800e4ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4f0:	2340      	movs	r3, #64	; 0x40
 800e4f2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4fc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4fe:	f107 0310 	add.w	r3, r7, #16
 800e502:	4619      	mov	r1, r3
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f7ff fea7 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e50a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e50e:	2107      	movs	r1, #7
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f000 f973 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e516:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3728      	adds	r7, #40	; 0x28
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b088      	sub	sp, #32
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e52a:	2300      	movs	r3, #0
 800e52c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e52e:	2300      	movs	r3, #0
 800e530:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e532:	2300      	movs	r3, #0
 800e534:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e536:	2300      	movs	r3, #0
 800e538:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e53a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e53e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e540:	f107 0308 	add.w	r3, r7, #8
 800e544:	4619      	mov	r1, r3
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7ff fe86 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 f92d 	bl	800e7ac <SDMMC_GetCmdError>
 800e552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e554:	69fb      	ldr	r3, [r7, #28]
}
 800e556:	4618      	mov	r0, r3
 800e558:	3720      	adds	r7, #32
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b088      	sub	sp, #32
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e566:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e56a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e56c:	2308      	movs	r3, #8
 800e56e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e570:	2340      	movs	r3, #64	; 0x40
 800e572:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e574:	2300      	movs	r3, #0
 800e576:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e57c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e57e:	f107 0308 	add.w	r3, r7, #8
 800e582:	4619      	mov	r1, r3
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7ff fe67 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 fb16 	bl	800ebbc <SDMMC_GetCmdResp7>
 800e590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e592:	69fb      	ldr	r3, [r7, #28]
}
 800e594:	4618      	mov	r0, r3
 800e596:	3720      	adds	r7, #32
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b088      	sub	sp, #32
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e5aa:	2337      	movs	r3, #55	; 0x37
 800e5ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5ae:	2340      	movs	r3, #64	; 0x40
 800e5b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5bc:	f107 0308 	add.w	r3, r7, #8
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f7ff fe48 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e5c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5cc:	2137      	movs	r1, #55	; 0x37
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f914 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e5d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5d6:	69fb      	ldr	r3, [r7, #28]
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3720      	adds	r7, #32
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b088      	sub	sp, #32
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e5f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e5f6:	2329      	movs	r3, #41	; 0x29
 800e5f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5fa:	2340      	movs	r3, #64	; 0x40
 800e5fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5fe:	2300      	movs	r3, #0
 800e600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e606:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e608:	f107 0308 	add.w	r3, r7, #8
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7ff fe22 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 fa23 	bl	800ea60 <SDMMC_GetCmdResp3>
 800e61a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e61c:	69fb      	ldr	r3, [r7, #28]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3720      	adds	r7, #32
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b088      	sub	sp, #32
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
 800e62e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e634:	2306      	movs	r3, #6
 800e636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e638:	2340      	movs	r3, #64	; 0x40
 800e63a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e63c:	2300      	movs	r3, #0
 800e63e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e644:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e646:	f107 0308 	add.w	r3, r7, #8
 800e64a:	4619      	mov	r1, r3
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7ff fe03 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e652:	f241 3288 	movw	r2, #5000	; 0x1388
 800e656:	2106      	movs	r1, #6
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 f8cf 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e65e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e660:	69fb      	ldr	r3, [r7, #28]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3720      	adds	r7, #32
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b088      	sub	sp, #32
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e672:	2300      	movs	r3, #0
 800e674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e676:	2333      	movs	r3, #51	; 0x33
 800e678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e67a:	2340      	movs	r3, #64	; 0x40
 800e67c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e67e:	2300      	movs	r3, #0
 800e680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e686:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e688:	f107 0308 	add.w	r3, r7, #8
 800e68c:	4619      	mov	r1, r3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7ff fde2 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e694:	f241 3288 	movw	r2, #5000	; 0x1388
 800e698:	2133      	movs	r1, #51	; 0x33
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 f8ae 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e6a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6a2:	69fb      	ldr	r3, [r7, #28]
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3720      	adds	r7, #32
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b088      	sub	sp, #32
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e6bc:	23c0      	movs	r3, #192	; 0xc0
 800e6be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6ca:	f107 0308 	add.w	r3, r7, #8
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7ff fdc1 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 f97c 	bl	800e9d4 <SDMMC_GetCmdResp2>
 800e6dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6de:	69fb      	ldr	r3, [r7, #28]
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3720      	adds	r7, #32
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b088      	sub	sp, #32
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e6f6:	2309      	movs	r3, #9
 800e6f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e6fa:	23c0      	movs	r3, #192	; 0xc0
 800e6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6fe:	2300      	movs	r3, #0
 800e700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e706:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e708:	f107 0308 	add.w	r3, r7, #8
 800e70c:	4619      	mov	r1, r3
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7ff fda2 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 f95d 	bl	800e9d4 <SDMMC_GetCmdResp2>
 800e71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e71c:	69fb      	ldr	r3, [r7, #28]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3720      	adds	r7, #32
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}

0800e726 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e726:	b580      	push	{r7, lr}
 800e728:	b088      	sub	sp, #32
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
 800e72e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e730:	2300      	movs	r3, #0
 800e732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e734:	2303      	movs	r3, #3
 800e736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e738:	2340      	movs	r3, #64	; 0x40
 800e73a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e73c:	2300      	movs	r3, #0
 800e73e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e744:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e746:	f107 0308 	add.w	r3, r7, #8
 800e74a:	4619      	mov	r1, r3
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7ff fd83 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e752:	683a      	ldr	r2, [r7, #0]
 800e754:	2103      	movs	r1, #3
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 f9bc 	bl	800ead4 <SDMMC_GetCmdResp6>
 800e75c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e75e:	69fb      	ldr	r3, [r7, #28]
}
 800e760:	4618      	mov	r0, r3
 800e762:	3720      	adds	r7, #32
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b088      	sub	sp, #32
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e776:	230d      	movs	r3, #13
 800e778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e77a:	2340      	movs	r3, #64	; 0x40
 800e77c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e77e:	2300      	movs	r3, #0
 800e780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e786:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e788:	f107 0308 	add.w	r3, r7, #8
 800e78c:	4619      	mov	r1, r3
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7ff fd62 	bl	800e258 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e794:	f241 3288 	movw	r2, #5000	; 0x1388
 800e798:	210d      	movs	r1, #13
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 f82e 	bl	800e7fc <SDMMC_GetCmdResp1>
 800e7a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7a2:	69fb      	ldr	r3, [r7, #28]
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3720      	adds	r7, #32
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e7ac:	b490      	push	{r4, r7}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7b4:	4b0f      	ldr	r3, [pc, #60]	; (800e7f4 <SDMMC_GetCmdError+0x48>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a0f      	ldr	r2, [pc, #60]	; (800e7f8 <SDMMC_GetCmdError+0x4c>)
 800e7ba:	fba2 2303 	umull	r2, r3, r2, r3
 800e7be:	0a5b      	lsrs	r3, r3, #9
 800e7c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e7c8:	4623      	mov	r3, r4
 800e7ca:	1e5c      	subs	r4, r3, #1
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d102      	bne.n	800e7d6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7d4:	e009      	b.n	800e7ea <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d0f2      	beq.n	800e7c8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	22c5      	movs	r2, #197	; 0xc5
 800e7e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bc90      	pop	{r4, r7}
 800e7f2:	4770      	bx	lr
 800e7f4:	20000000 	.word	0x20000000
 800e7f8:	10624dd3 	.word	0x10624dd3

0800e7fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e7fc:	b590      	push	{r4, r7, lr}
 800e7fe:	b087      	sub	sp, #28
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	460b      	mov	r3, r1
 800e806:	607a      	str	r2, [r7, #4]
 800e808:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e80a:	4b6f      	ldr	r3, [pc, #444]	; (800e9c8 <SDMMC_GetCmdResp1+0x1cc>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a6f      	ldr	r2, [pc, #444]	; (800e9cc <SDMMC_GetCmdResp1+0x1d0>)
 800e810:	fba2 2303 	umull	r2, r3, r2, r3
 800e814:	0a5b      	lsrs	r3, r3, #9
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e81c:	4623      	mov	r3, r4
 800e81e:	1e5c      	subs	r4, r3, #1
 800e820:	2b00      	cmp	r3, #0
 800e822:	d102      	bne.n	800e82a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e828:	e0c9      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e82e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e836:	2b00      	cmp	r3, #0
 800e838:	d0f0      	beq.n	800e81c <SDMMC_GetCmdResp1+0x20>
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e840:	2b00      	cmp	r3, #0
 800e842:	d1eb      	bne.n	800e81c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e848:	f003 0304 	and.w	r3, r3, #4
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d004      	beq.n	800e85a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2204      	movs	r2, #4
 800e854:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e856:	2304      	movs	r3, #4
 800e858:	e0b1      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e85e:	f003 0301 	and.w	r3, r3, #1
 800e862:	2b00      	cmp	r3, #0
 800e864:	d004      	beq.n	800e870 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2201      	movs	r2, #1
 800e86a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e86c:	2301      	movs	r3, #1
 800e86e:	e0a6      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	22c5      	movs	r2, #197	; 0xc5
 800e874:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	f7ff fd18 	bl	800e2ac <SDIO_GetCommandResponse>
 800e87c:	4603      	mov	r3, r0
 800e87e:	461a      	mov	r2, r3
 800e880:	7afb      	ldrb	r3, [r7, #11]
 800e882:	4293      	cmp	r3, r2
 800e884:	d001      	beq.n	800e88a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e886:	2301      	movs	r3, #1
 800e888:	e099      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e88a:	2100      	movs	r1, #0
 800e88c:	68f8      	ldr	r0, [r7, #12]
 800e88e:	f7ff fd1a 	bl	800e2c6 <SDIO_GetResponse>
 800e892:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e894:	693a      	ldr	r2, [r7, #16]
 800e896:	4b4e      	ldr	r3, [pc, #312]	; (800e9d0 <SDMMC_GetCmdResp1+0x1d4>)
 800e898:	4013      	ands	r3, r2
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d101      	bne.n	800e8a2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	e08d      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	da02      	bge.n	800e8ae <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e8a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e8ac:	e087      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d001      	beq.n	800e8bc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e8b8:	2340      	movs	r3, #64	; 0x40
 800e8ba:	e080      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d001      	beq.n	800e8ca <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e8c6:	2380      	movs	r3, #128	; 0x80
 800e8c8:	e079      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e8d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e8d8:	e071      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e8e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8e8:	e069      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d002      	beq.n	800e8fa <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e8f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8f8:	e061      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d002      	beq.n	800e90a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e904:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e908:	e059      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e910:	2b00      	cmp	r3, #0
 800e912:	d002      	beq.n	800e91a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e918:	e051      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e920:	2b00      	cmp	r3, #0
 800e922:	d002      	beq.n	800e92a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e928:	e049      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e938:	e041      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e948:	e039      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e950:	2b00      	cmp	r3, #0
 800e952:	d002      	beq.n	800e95a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e954:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e958:	e031      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e960:	2b00      	cmp	r3, #0
 800e962:	d002      	beq.n	800e96a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e964:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e968:	e029      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e970:	2b00      	cmp	r3, #0
 800e972:	d002      	beq.n	800e97a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e974:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e978:	e021      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e980:	2b00      	cmp	r3, #0
 800e982:	d002      	beq.n	800e98a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e984:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e988:	e019      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e994:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e998:	e011      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d002      	beq.n	800e9aa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e9a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e9a8:	e009      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	f003 0308 	and.w	r3, r3, #8
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e9b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e9b8:	e001      	b.n	800e9be <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e9ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	371c      	adds	r7, #28
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd90      	pop	{r4, r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	20000000 	.word	0x20000000
 800e9cc:	10624dd3 	.word	0x10624dd3
 800e9d0:	fdffe008 	.word	0xfdffe008

0800e9d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e9d4:	b490      	push	{r4, r7}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e9dc:	4b1e      	ldr	r3, [pc, #120]	; (800ea58 <SDMMC_GetCmdResp2+0x84>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a1e      	ldr	r2, [pc, #120]	; (800ea5c <SDMMC_GetCmdResp2+0x88>)
 800e9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9e6:	0a5b      	lsrs	r3, r3, #9
 800e9e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e9f0:	4623      	mov	r3, r4
 800e9f2:	1e5c      	subs	r4, r3, #1
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d102      	bne.n	800e9fe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9fc:	e026      	b.n	800ea4c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea02:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d0f0      	beq.n	800e9f0 <SDMMC_GetCmdResp2+0x1c>
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1eb      	bne.n	800e9f0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea1c:	f003 0304 	and.w	r3, r3, #4
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d004      	beq.n	800ea2e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2204      	movs	r2, #4
 800ea28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea2a:	2304      	movs	r3, #4
 800ea2c:	e00e      	b.n	800ea4c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea32:	f003 0301 	and.w	r3, r3, #1
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d004      	beq.n	800ea44 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea40:	2301      	movs	r3, #1
 800ea42:	e003      	b.n	800ea4c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	22c5      	movs	r2, #197	; 0xc5
 800ea48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bc90      	pop	{r4, r7}
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	20000000 	.word	0x20000000
 800ea5c:	10624dd3 	.word	0x10624dd3

0800ea60 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ea60:	b490      	push	{r4, r7}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea68:	4b18      	ldr	r3, [pc, #96]	; (800eacc <SDMMC_GetCmdResp3+0x6c>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4a18      	ldr	r2, [pc, #96]	; (800ead0 <SDMMC_GetCmdResp3+0x70>)
 800ea6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ea72:	0a5b      	lsrs	r3, r3, #9
 800ea74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ea7c:	4623      	mov	r3, r4
 800ea7e:	1e5c      	subs	r4, r3, #1
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d102      	bne.n	800ea8a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea88:	e01b      	b.n	800eac2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea8e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d0f0      	beq.n	800ea7c <SDMMC_GetCmdResp3+0x1c>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d1eb      	bne.n	800ea7c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa8:	f003 0304 	and.w	r3, r3, #4
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d004      	beq.n	800eaba <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2204      	movs	r2, #4
 800eab4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eab6:	2304      	movs	r3, #4
 800eab8:	e003      	b.n	800eac2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	22c5      	movs	r2, #197	; 0xc5
 800eabe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bc90      	pop	{r4, r7}
 800eaca:	4770      	bx	lr
 800eacc:	20000000 	.word	0x20000000
 800ead0:	10624dd3 	.word	0x10624dd3

0800ead4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ead4:	b590      	push	{r4, r7, lr}
 800ead6:	b087      	sub	sp, #28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	460b      	mov	r3, r1
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eae2:	4b34      	ldr	r3, [pc, #208]	; (800ebb4 <SDMMC_GetCmdResp6+0xe0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4a34      	ldr	r2, [pc, #208]	; (800ebb8 <SDMMC_GetCmdResp6+0xe4>)
 800eae8:	fba2 2303 	umull	r2, r3, r2, r3
 800eaec:	0a5b      	lsrs	r3, r3, #9
 800eaee:	f241 3288 	movw	r2, #5000	; 0x1388
 800eaf2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800eaf6:	4623      	mov	r3, r4
 800eaf8:	1e5c      	subs	r4, r3, #1
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d102      	bne.n	800eb04 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eafe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb02:	e052      	b.n	800ebaa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb08:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d0f0      	beq.n	800eaf6 <SDMMC_GetCmdResp6+0x22>
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1eb      	bne.n	800eaf6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb22:	f003 0304 	and.w	r3, r3, #4
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d004      	beq.n	800eb34 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2204      	movs	r2, #4
 800eb2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb30:	2304      	movs	r3, #4
 800eb32:	e03a      	b.n	800ebaa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d004      	beq.n	800eb4a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2201      	movs	r2, #1
 800eb44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb46:	2301      	movs	r3, #1
 800eb48:	e02f      	b.n	800ebaa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f7ff fbae 	bl	800e2ac <SDIO_GetCommandResponse>
 800eb50:	4603      	mov	r3, r0
 800eb52:	461a      	mov	r2, r3
 800eb54:	7afb      	ldrb	r3, [r7, #11]
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d001      	beq.n	800eb5e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	e025      	b.n	800ebaa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	22c5      	movs	r2, #197	; 0xc5
 800eb62:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800eb64:	2100      	movs	r1, #0
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	f7ff fbad 	bl	800e2c6 <SDIO_GetResponse>
 800eb6c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d106      	bne.n	800eb86 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	0c1b      	lsrs	r3, r3, #16
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800eb82:	2300      	movs	r3, #0
 800eb84:	e011      	b.n	800ebaa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d002      	beq.n	800eb96 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eb90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eb94:	e009      	b.n	800ebaa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d002      	beq.n	800eba6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eba4:	e001      	b.n	800ebaa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	371c      	adds	r7, #28
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd90      	pop	{r4, r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	20000000 	.word	0x20000000
 800ebb8:	10624dd3 	.word	0x10624dd3

0800ebbc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ebbc:	b490      	push	{r4, r7}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ebc4:	4b21      	ldr	r3, [pc, #132]	; (800ec4c <SDMMC_GetCmdResp7+0x90>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a21      	ldr	r2, [pc, #132]	; (800ec50 <SDMMC_GetCmdResp7+0x94>)
 800ebca:	fba2 2303 	umull	r2, r3, r2, r3
 800ebce:	0a5b      	lsrs	r3, r3, #9
 800ebd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebd4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ebd8:	4623      	mov	r3, r4
 800ebda:	1e5c      	subs	r4, r3, #1
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d102      	bne.n	800ebe6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebe0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebe4:	e02c      	b.n	800ec40 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d0f0      	beq.n	800ebd8 <SDMMC_GetCmdResp7+0x1c>
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d1eb      	bne.n	800ebd8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec04:	f003 0304 	and.w	r3, r3, #4
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d004      	beq.n	800ec16 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2204      	movs	r2, #4
 800ec10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec12:	2304      	movs	r3, #4
 800ec14:	e014      	b.n	800ec40 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d004      	beq.n	800ec2c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2201      	movs	r2, #1
 800ec26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e009      	b.n	800ec40 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d002      	beq.n	800ec3e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2240      	movs	r2, #64	; 0x40
 800ec3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ec3e:	2300      	movs	r3, #0
  
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bc90      	pop	{r4, r7}
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	20000000 	.word	0x20000000
 800ec50:	10624dd3 	.word	0x10624dd3

0800ec54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ec58:	4904      	ldr	r1, [pc, #16]	; (800ec6c <MX_FATFS_Init+0x18>)
 800ec5a:	4805      	ldr	r0, [pc, #20]	; (800ec70 <MX_FATFS_Init+0x1c>)
 800ec5c:	f003 fb9c 	bl	8012398 <FATFS_LinkDriver>
 800ec60:	4603      	mov	r3, r0
 800ec62:	461a      	mov	r2, r3
 800ec64:	4b03      	ldr	r3, [pc, #12]	; (800ec74 <MX_FATFS_Init+0x20>)
 800ec66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ec68:	bf00      	nop
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	20035f60 	.word	0x20035f60
 800ec70:	08017dd4 	.word	0x08017dd4
 800ec74:	20035f5c 	.word	0x20035f5c

0800ec78 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ec82:	f000 f896 	bl	800edb2 <BSP_SD_IsDetected>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d001      	beq.n	800ec90 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	e012      	b.n	800ecb6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ec90:	480b      	ldr	r0, [pc, #44]	; (800ecc0 <BSP_SD_Init+0x48>)
 800ec92:	f7fb ffa5 	bl	800abe0 <HAL_SD_Init>
 800ec96:	4603      	mov	r3, r0
 800ec98:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ec9a:	79fb      	ldrb	r3, [r7, #7]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d109      	bne.n	800ecb4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800eca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800eca4:	4806      	ldr	r0, [pc, #24]	; (800ecc0 <BSP_SD_Init+0x48>)
 800eca6:	f7fc fd4f 	bl	800b748 <HAL_SD_ConfigWideBusOperation>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d001      	beq.n	800ecb4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ecb4:	79fb      	ldrb	r3, [r7, #7]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20035d58 	.word	0x20035d58

0800ecc4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	68ba      	ldr	r2, [r7, #8]
 800ecd8:	68f9      	ldr	r1, [r7, #12]
 800ecda:	4806      	ldr	r0, [pc, #24]	; (800ecf4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ecdc:	f7fc f810 	bl	800ad00 <HAL_SD_ReadBlocks_DMA>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d001      	beq.n	800ecea <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ece6:	2301      	movs	r3, #1
 800ece8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ecea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3718      	adds	r7, #24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	20035d58 	.word	0x20035d58

0800ecf8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ed04:	2300      	movs	r3, #0
 800ed06:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	68ba      	ldr	r2, [r7, #8]
 800ed0c:	68f9      	ldr	r1, [r7, #12]
 800ed0e:	4806      	ldr	r0, [pc, #24]	; (800ed28 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ed10:	f7fc f8de 	bl	800aed0 <HAL_SD_WriteBlocks_DMA>
 800ed14:	4603      	mov	r3, r0
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d001      	beq.n	800ed1e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ed1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	20035d58 	.word	0x20035d58

0800ed2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ed30:	4805      	ldr	r0, [pc, #20]	; (800ed48 <BSP_SD_GetCardState+0x1c>)
 800ed32:	f7fc fd85 	bl	800b840 <HAL_SD_GetCardState>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2b04      	cmp	r3, #4
 800ed3a:	bf14      	ite	ne
 800ed3c:	2301      	movne	r3, #1
 800ed3e:	2300      	moveq	r3, #0
 800ed40:	b2db      	uxtb	r3, r3
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	20035d58 	.word	0x20035d58

0800ed4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ed54:	6879      	ldr	r1, [r7, #4]
 800ed56:	4803      	ldr	r0, [pc, #12]	; (800ed64 <BSP_SD_GetCardInfo+0x18>)
 800ed58:	f7fc fcca 	bl	800b6f0 <HAL_SD_GetCardInfo>
}
 800ed5c:	bf00      	nop
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	20035d58 	.word	0x20035d58

0800ed68 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ed70:	f000 f818 	bl	800eda4 <BSP_SD_AbortCallback>
}
 800ed74:	bf00      	nop
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ed84:	f000 f9a8 	bl	800f0d8 <BSP_SD_WriteCpltCallback>
}
 800ed88:	bf00      	nop
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ed98:	f000 f9aa 	bl	800f0f0 <BSP_SD_ReadCpltCallback>
}
 800ed9c:	bf00      	nop
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800eda4:	b480      	push	{r7}
 800eda6:	af00      	add	r7, sp, #0

}
 800eda8:	bf00      	nop
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr

0800edb2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b082      	sub	sp, #8
 800edb6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800edb8:	2301      	movs	r3, #1
 800edba:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800edbc:	f000 f80c 	bl	800edd8 <BSP_PlatformIsDetected>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d101      	bne.n	800edca <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800edc6:	2300      	movs	r3, #0
 800edc8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800edca:	79fb      	ldrb	r3, [r7, #7]
 800edcc:	b2db      	uxtb	r3, r3
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800edde:	2301      	movs	r3, #1
 800ede0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ede2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ede6:	4806      	ldr	r0, [pc, #24]	; (800ee00 <BSP_PlatformIsDetected+0x28>)
 800ede8:	f7fa f866 	bl	8008eb8 <HAL_GPIO_ReadPin>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800edf2:	2300      	movs	r3, #0
 800edf4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800edf6:	79fb      	ldrb	r3, [r7, #7]
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3708      	adds	r7, #8
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	40020000 	.word	0x40020000

0800ee04 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ee0c:	f7f8 fdca 	bl	80079a4 <HAL_GetTick>
 800ee10:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ee12:	e006      	b.n	800ee22 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ee14:	f7ff ff8a 	bl	800ed2c <BSP_SD_GetCardState>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d101      	bne.n	800ee22 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	e009      	b.n	800ee36 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ee22:	f7f8 fdbf 	bl	80079a4 <HAL_GetTick>
 800ee26:	4602      	mov	r2, r0
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d8f0      	bhi.n	800ee14 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ee32:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
	...

0800ee40 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	4603      	mov	r3, r0
 800ee48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ee4a:	4b0b      	ldr	r3, [pc, #44]	; (800ee78 <SD_CheckStatus+0x38>)
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ee50:	f7ff ff6c 	bl	800ed2c <BSP_SD_GetCardState>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d107      	bne.n	800ee6a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ee5a:	4b07      	ldr	r3, [pc, #28]	; (800ee78 <SD_CheckStatus+0x38>)
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	f023 0301 	bic.w	r3, r3, #1
 800ee64:	b2da      	uxtb	r2, r3
 800ee66:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <SD_CheckStatus+0x38>)
 800ee68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ee6a:	4b03      	ldr	r3, [pc, #12]	; (800ee78 <SD_CheckStatus+0x38>)
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	b2db      	uxtb	r3, r3
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	20000009 	.word	0x20000009

0800ee7c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	4603      	mov	r3, r0
 800ee84:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ee86:	f7ff fef7 	bl	800ec78 <BSP_SD_Init>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d107      	bne.n	800eea0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ee90:	79fb      	ldrb	r3, [r7, #7]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7ff ffd4 	bl	800ee40 <SD_CheckStatus>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	4b04      	ldr	r3, [pc, #16]	; (800eeb0 <SD_initialize+0x34>)
 800ee9e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800eea0:	4b03      	ldr	r3, [pc, #12]	; (800eeb0 <SD_initialize+0x34>)
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	b2db      	uxtb	r3, r3
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	20000009 	.word	0x20000009

0800eeb4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	4603      	mov	r3, r0
 800eebc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800eebe:	79fb      	ldrb	r3, [r7, #7]
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7ff ffbd 	bl	800ee40 <SD_CheckStatus>
 800eec6:	4603      	mov	r3, r0
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b086      	sub	sp, #24
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	60b9      	str	r1, [r7, #8]
 800eed8:	607a      	str	r2, [r7, #4]
 800eeda:	603b      	str	r3, [r7, #0]
 800eedc:	4603      	mov	r3, r0
 800eede:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800eee0:	2301      	movs	r3, #1
 800eee2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800eee4:	f247 5030 	movw	r0, #30000	; 0x7530
 800eee8:	f7ff ff8c 	bl	800ee04 <SD_CheckStatusWithTimeout>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	da01      	bge.n	800eef6 <SD_read+0x26>
  {
    return res;
 800eef2:	7dfb      	ldrb	r3, [r7, #23]
 800eef4:	e03b      	b.n	800ef6e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800eef6:	683a      	ldr	r2, [r7, #0]
 800eef8:	6879      	ldr	r1, [r7, #4]
 800eefa:	68b8      	ldr	r0, [r7, #8]
 800eefc:	f7ff fee2 	bl	800ecc4 <BSP_SD_ReadBlocks_DMA>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d132      	bne.n	800ef6c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ef06:	4b1c      	ldr	r3, [pc, #112]	; (800ef78 <SD_read+0xa8>)
 800ef08:	2200      	movs	r2, #0
 800ef0a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ef0c:	f7f8 fd4a 	bl	80079a4 <HAL_GetTick>
 800ef10:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ef12:	bf00      	nop
 800ef14:	4b18      	ldr	r3, [pc, #96]	; (800ef78 <SD_read+0xa8>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d108      	bne.n	800ef2e <SD_read+0x5e>
 800ef1c:	f7f8 fd42 	bl	80079a4 <HAL_GetTick>
 800ef20:	4602      	mov	r2, r0
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	1ad3      	subs	r3, r2, r3
 800ef26:	f247 522f 	movw	r2, #29999	; 0x752f
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d9f2      	bls.n	800ef14 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800ef2e:	4b12      	ldr	r3, [pc, #72]	; (800ef78 <SD_read+0xa8>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d102      	bne.n	800ef3c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ef36:	2301      	movs	r3, #1
 800ef38:	75fb      	strb	r3, [r7, #23]
 800ef3a:	e017      	b.n	800ef6c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ef3c:	4b0e      	ldr	r3, [pc, #56]	; (800ef78 <SD_read+0xa8>)
 800ef3e:	2200      	movs	r2, #0
 800ef40:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ef42:	f7f8 fd2f 	bl	80079a4 <HAL_GetTick>
 800ef46:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ef48:	e007      	b.n	800ef5a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef4a:	f7ff feef 	bl	800ed2c <BSP_SD_GetCardState>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d102      	bne.n	800ef5a <SD_read+0x8a>
          {
            res = RES_OK;
 800ef54:	2300      	movs	r3, #0
 800ef56:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ef58:	e008      	b.n	800ef6c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ef5a:	f7f8 fd23 	bl	80079a4 <HAL_GetTick>
 800ef5e:	4602      	mov	r2, r0
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	1ad3      	subs	r3, r2, r3
 800ef64:	f247 522f 	movw	r2, #29999	; 0x752f
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d9ee      	bls.n	800ef4a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ef6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3718      	adds	r7, #24
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	200335f4 	.word	0x200335f4

0800ef7c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b086      	sub	sp, #24
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60b9      	str	r1, [r7, #8]
 800ef84:	607a      	str	r2, [r7, #4]
 800ef86:	603b      	str	r3, [r7, #0]
 800ef88:	4603      	mov	r3, r0
 800ef8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ef90:	4b24      	ldr	r3, [pc, #144]	; (800f024 <SD_write+0xa8>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ef96:	f247 5030 	movw	r0, #30000	; 0x7530
 800ef9a:	f7ff ff33 	bl	800ee04 <SD_CheckStatusWithTimeout>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	da01      	bge.n	800efa8 <SD_write+0x2c>
  {
    return res;
 800efa4:	7dfb      	ldrb	r3, [r7, #23]
 800efa6:	e038      	b.n	800f01a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800efa8:	683a      	ldr	r2, [r7, #0]
 800efaa:	6879      	ldr	r1, [r7, #4]
 800efac:	68b8      	ldr	r0, [r7, #8]
 800efae:	f7ff fea3 	bl	800ecf8 <BSP_SD_WriteBlocks_DMA>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d12f      	bne.n	800f018 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800efb8:	f7f8 fcf4 	bl	80079a4 <HAL_GetTick>
 800efbc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800efbe:	bf00      	nop
 800efc0:	4b18      	ldr	r3, [pc, #96]	; (800f024 <SD_write+0xa8>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d108      	bne.n	800efda <SD_write+0x5e>
 800efc8:	f7f8 fcec 	bl	80079a4 <HAL_GetTick>
 800efcc:	4602      	mov	r2, r0
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	f247 522f 	movw	r2, #29999	; 0x752f
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d9f2      	bls.n	800efc0 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800efda:	4b12      	ldr	r3, [pc, #72]	; (800f024 <SD_write+0xa8>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d102      	bne.n	800efe8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800efe2:	2301      	movs	r3, #1
 800efe4:	75fb      	strb	r3, [r7, #23]
 800efe6:	e017      	b.n	800f018 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800efe8:	4b0e      	ldr	r3, [pc, #56]	; (800f024 <SD_write+0xa8>)
 800efea:	2200      	movs	r2, #0
 800efec:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800efee:	f7f8 fcd9 	bl	80079a4 <HAL_GetTick>
 800eff2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800eff4:	e007      	b.n	800f006 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eff6:	f7ff fe99 	bl	800ed2c <BSP_SD_GetCardState>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d102      	bne.n	800f006 <SD_write+0x8a>
          {
            res = RES_OK;
 800f000:	2300      	movs	r3, #0
 800f002:	75fb      	strb	r3, [r7, #23]
            break;
 800f004:	e008      	b.n	800f018 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f006:	f7f8 fccd 	bl	80079a4 <HAL_GetTick>
 800f00a:	4602      	mov	r2, r0
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	f247 522f 	movw	r2, #29999	; 0x752f
 800f014:	4293      	cmp	r3, r2
 800f016:	d9ee      	bls.n	800eff6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f018:	7dfb      	ldrb	r3, [r7, #23]
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3718      	adds	r7, #24
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	200335f0 	.word	0x200335f0

0800f028 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b08c      	sub	sp, #48	; 0x30
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	4603      	mov	r3, r0
 800f030:	603a      	str	r2, [r7, #0]
 800f032:	71fb      	strb	r3, [r7, #7]
 800f034:	460b      	mov	r3, r1
 800f036:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f038:	2301      	movs	r3, #1
 800f03a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f03e:	4b25      	ldr	r3, [pc, #148]	; (800f0d4 <SD_ioctl+0xac>)
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	b2db      	uxtb	r3, r3
 800f044:	f003 0301 	and.w	r3, r3, #1
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d001      	beq.n	800f050 <SD_ioctl+0x28>
 800f04c:	2303      	movs	r3, #3
 800f04e:	e03c      	b.n	800f0ca <SD_ioctl+0xa2>

  switch (cmd)
 800f050:	79bb      	ldrb	r3, [r7, #6]
 800f052:	2b03      	cmp	r3, #3
 800f054:	d834      	bhi.n	800f0c0 <SD_ioctl+0x98>
 800f056:	a201      	add	r2, pc, #4	; (adr r2, 800f05c <SD_ioctl+0x34>)
 800f058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05c:	0800f06d 	.word	0x0800f06d
 800f060:	0800f075 	.word	0x0800f075
 800f064:	0800f08d 	.word	0x0800f08d
 800f068:	0800f0a7 	.word	0x0800f0a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f06c:	2300      	movs	r3, #0
 800f06e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f072:	e028      	b.n	800f0c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f074:	f107 030c 	add.w	r3, r7, #12
 800f078:	4618      	mov	r0, r3
 800f07a:	f7ff fe67 	bl	800ed4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f08a:	e01c      	b.n	800f0c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f08c:	f107 030c 	add.w	r3, r7, #12
 800f090:	4618      	mov	r0, r3
 800f092:	f7ff fe5b 	bl	800ed4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f098:	b29a      	uxth	r2, r3
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f0a4:	e00f      	b.n	800f0c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f0a6:	f107 030c 	add.w	r3, r7, #12
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7ff fe4e 	bl	800ed4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	0a5a      	lsrs	r2, r3, #9
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f0be:	e002      	b.n	800f0c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f0c0:	2304      	movs	r3, #4
 800f0c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f0c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3730      	adds	r7, #48	; 0x30
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	20000009 	.word	0x20000009

0800f0d8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f0dc:	4b03      	ldr	r3, [pc, #12]	; (800f0ec <BSP_SD_WriteCpltCallback+0x14>)
 800f0de:	2201      	movs	r2, #1
 800f0e0:	601a      	str	r2, [r3, #0]
}
 800f0e2:	bf00      	nop
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr
 800f0ec:	200335f0 	.word	0x200335f0

0800f0f0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f0f4:	4b03      	ldr	r3, [pc, #12]	; (800f104 <BSP_SD_ReadCpltCallback+0x14>)
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	601a      	str	r2, [r3, #0]
}
 800f0fa:	bf00      	nop
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr
 800f104:	200335f4 	.word	0x200335f4

0800f108 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	4603      	mov	r3, r0
 800f110:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f112:	79fb      	ldrb	r3, [r7, #7]
 800f114:	4a08      	ldr	r2, [pc, #32]	; (800f138 <disk_status+0x30>)
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	4413      	add	r3, r2
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	79fa      	ldrb	r2, [r7, #7]
 800f120:	4905      	ldr	r1, [pc, #20]	; (800f138 <disk_status+0x30>)
 800f122:	440a      	add	r2, r1
 800f124:	7a12      	ldrb	r2, [r2, #8]
 800f126:	4610      	mov	r0, r2
 800f128:	4798      	blx	r3
 800f12a:	4603      	mov	r3, r0
 800f12c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3710      	adds	r7, #16
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}
 800f138:	20033620 	.word	0x20033620

0800f13c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	4603      	mov	r3, r0
 800f144:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f146:	2300      	movs	r3, #0
 800f148:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f14a:	79fb      	ldrb	r3, [r7, #7]
 800f14c:	4a0d      	ldr	r2, [pc, #52]	; (800f184 <disk_initialize+0x48>)
 800f14e:	5cd3      	ldrb	r3, [r2, r3]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d111      	bne.n	800f178 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f154:	79fb      	ldrb	r3, [r7, #7]
 800f156:	4a0b      	ldr	r2, [pc, #44]	; (800f184 <disk_initialize+0x48>)
 800f158:	2101      	movs	r1, #1
 800f15a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f15c:	79fb      	ldrb	r3, [r7, #7]
 800f15e:	4a09      	ldr	r2, [pc, #36]	; (800f184 <disk_initialize+0x48>)
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	4413      	add	r3, r2
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	79fa      	ldrb	r2, [r7, #7]
 800f16a:	4906      	ldr	r1, [pc, #24]	; (800f184 <disk_initialize+0x48>)
 800f16c:	440a      	add	r2, r1
 800f16e:	7a12      	ldrb	r2, [r2, #8]
 800f170:	4610      	mov	r0, r2
 800f172:	4798      	blx	r3
 800f174:	4603      	mov	r3, r0
 800f176:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f178:	7bfb      	ldrb	r3, [r7, #15]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	20033620 	.word	0x20033620

0800f188 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f188:	b590      	push	{r4, r7, lr}
 800f18a:	b087      	sub	sp, #28
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	60b9      	str	r1, [r7, #8]
 800f190:	607a      	str	r2, [r7, #4]
 800f192:	603b      	str	r3, [r7, #0]
 800f194:	4603      	mov	r3, r0
 800f196:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f198:	7bfb      	ldrb	r3, [r7, #15]
 800f19a:	4a0a      	ldr	r2, [pc, #40]	; (800f1c4 <disk_read+0x3c>)
 800f19c:	009b      	lsls	r3, r3, #2
 800f19e:	4413      	add	r3, r2
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	689c      	ldr	r4, [r3, #8]
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
 800f1a6:	4a07      	ldr	r2, [pc, #28]	; (800f1c4 <disk_read+0x3c>)
 800f1a8:	4413      	add	r3, r2
 800f1aa:	7a18      	ldrb	r0, [r3, #8]
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	687a      	ldr	r2, [r7, #4]
 800f1b0:	68b9      	ldr	r1, [r7, #8]
 800f1b2:	47a0      	blx	r4
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800f1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	371c      	adds	r7, #28
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd90      	pop	{r4, r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	20033620 	.word	0x20033620

0800f1c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f1c8:	b590      	push	{r4, r7, lr}
 800f1ca:	b087      	sub	sp, #28
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60b9      	str	r1, [r7, #8]
 800f1d0:	607a      	str	r2, [r7, #4]
 800f1d2:	603b      	str	r3, [r7, #0]
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f1d8:	7bfb      	ldrb	r3, [r7, #15]
 800f1da:	4a0a      	ldr	r2, [pc, #40]	; (800f204 <disk_write+0x3c>)
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	4413      	add	r3, r2
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	68dc      	ldr	r4, [r3, #12]
 800f1e4:	7bfb      	ldrb	r3, [r7, #15]
 800f1e6:	4a07      	ldr	r2, [pc, #28]	; (800f204 <disk_write+0x3c>)
 800f1e8:	4413      	add	r3, r2
 800f1ea:	7a18      	ldrb	r0, [r3, #8]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	68b9      	ldr	r1, [r7, #8]
 800f1f2:	47a0      	blx	r4
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800f1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	371c      	adds	r7, #28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd90      	pop	{r4, r7, pc}
 800f202:	bf00      	nop
 800f204:	20033620 	.word	0x20033620

0800f208 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	4603      	mov	r3, r0
 800f210:	603a      	str	r2, [r7, #0]
 800f212:	71fb      	strb	r3, [r7, #7]
 800f214:	460b      	mov	r3, r1
 800f216:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f218:	79fb      	ldrb	r3, [r7, #7]
 800f21a:	4a09      	ldr	r2, [pc, #36]	; (800f240 <disk_ioctl+0x38>)
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	4413      	add	r3, r2
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	691b      	ldr	r3, [r3, #16]
 800f224:	79fa      	ldrb	r2, [r7, #7]
 800f226:	4906      	ldr	r1, [pc, #24]	; (800f240 <disk_ioctl+0x38>)
 800f228:	440a      	add	r2, r1
 800f22a:	7a10      	ldrb	r0, [r2, #8]
 800f22c:	79b9      	ldrb	r1, [r7, #6]
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	4798      	blx	r3
 800f232:	4603      	mov	r3, r0
 800f234:	73fb      	strb	r3, [r7, #15]
  return res;
 800f236:	7bfb      	ldrb	r3, [r7, #15]
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3710      	adds	r7, #16
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	20033620 	.word	0x20033620

0800f244 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	3301      	adds	r3, #1
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f254:	89fb      	ldrh	r3, [r7, #14]
 800f256:	021b      	lsls	r3, r3, #8
 800f258:	b21a      	sxth	r2, r3
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	b21b      	sxth	r3, r3
 800f260:	4313      	orrs	r3, r2
 800f262:	b21b      	sxth	r3, r3
 800f264:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f266:	89fb      	ldrh	r3, [r7, #14]
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3714      	adds	r7, #20
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	3303      	adds	r3, #3
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	021b      	lsls	r3, r3, #8
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	3202      	adds	r2, #2
 800f28c:	7812      	ldrb	r2, [r2, #0]
 800f28e:	4313      	orrs	r3, r2
 800f290:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	021b      	lsls	r3, r3, #8
 800f296:	687a      	ldr	r2, [r7, #4]
 800f298:	3201      	adds	r2, #1
 800f29a:	7812      	ldrb	r2, [r2, #0]
 800f29c:	4313      	orrs	r3, r2
 800f29e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	021b      	lsls	r3, r3, #8
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	7812      	ldrb	r2, [r2, #0]
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	60fb      	str	r3, [r7, #12]
	return rv;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3714      	adds	r7, #20
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr

0800f2ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f2ba:	b480      	push	{r7}
 800f2bc:	b083      	sub	sp, #12
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	607a      	str	r2, [r7, #4]
 800f2cc:	887a      	ldrh	r2, [r7, #2]
 800f2ce:	b2d2      	uxtb	r2, r2
 800f2d0:	701a      	strb	r2, [r3, #0]
 800f2d2:	887b      	ldrh	r3, [r7, #2]
 800f2d4:	0a1b      	lsrs	r3, r3, #8
 800f2d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	1c5a      	adds	r2, r3, #1
 800f2dc:	607a      	str	r2, [r7, #4]
 800f2de:	887a      	ldrh	r2, [r7, #2]
 800f2e0:	b2d2      	uxtb	r2, r2
 800f2e2:	701a      	strb	r2, [r3, #0]
}
 800f2e4:	bf00      	nop
 800f2e6:	370c      	adds	r7, #12
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	1c5a      	adds	r2, r3, #1
 800f2fe:	607a      	str	r2, [r7, #4]
 800f300:	683a      	ldr	r2, [r7, #0]
 800f302:	b2d2      	uxtb	r2, r2
 800f304:	701a      	strb	r2, [r3, #0]
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	0a1b      	lsrs	r3, r3, #8
 800f30a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	1c5a      	adds	r2, r3, #1
 800f310:	607a      	str	r2, [r7, #4]
 800f312:	683a      	ldr	r2, [r7, #0]
 800f314:	b2d2      	uxtb	r2, r2
 800f316:	701a      	strb	r2, [r3, #0]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	0a1b      	lsrs	r3, r3, #8
 800f31c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	1c5a      	adds	r2, r3, #1
 800f322:	607a      	str	r2, [r7, #4]
 800f324:	683a      	ldr	r2, [r7, #0]
 800f326:	b2d2      	uxtb	r2, r2
 800f328:	701a      	strb	r2, [r3, #0]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	0a1b      	lsrs	r3, r3, #8
 800f32e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	1c5a      	adds	r2, r3, #1
 800f334:	607a      	str	r2, [r7, #4]
 800f336:	683a      	ldr	r2, [r7, #0]
 800f338:	b2d2      	uxtb	r2, r2
 800f33a:	701a      	strb	r2, [r3, #0]
}
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f348:	b480      	push	{r7}
 800f34a:	b087      	sub	sp, #28
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00d      	beq.n	800f37e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f362:	693a      	ldr	r2, [r7, #16]
 800f364:	1c53      	adds	r3, r2, #1
 800f366:	613b      	str	r3, [r7, #16]
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	1c59      	adds	r1, r3, #1
 800f36c:	6179      	str	r1, [r7, #20]
 800f36e:	7812      	ldrb	r2, [r2, #0]
 800f370:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	3b01      	subs	r3, #1
 800f376:	607b      	str	r3, [r7, #4]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1f1      	bne.n	800f362 <mem_cpy+0x1a>
	}
}
 800f37e:	bf00      	nop
 800f380:	371c      	adds	r7, #28
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f38a:	b480      	push	{r7}
 800f38c:	b087      	sub	sp, #28
 800f38e:	af00      	add	r7, sp, #0
 800f390:	60f8      	str	r0, [r7, #12]
 800f392:	60b9      	str	r1, [r7, #8]
 800f394:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	1c5a      	adds	r2, r3, #1
 800f39e:	617a      	str	r2, [r7, #20]
 800f3a0:	68ba      	ldr	r2, [r7, #8]
 800f3a2:	b2d2      	uxtb	r2, r2
 800f3a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	607b      	str	r3, [r7, #4]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d1f3      	bne.n	800f39a <mem_set+0x10>
}
 800f3b2:	bf00      	nop
 800f3b4:	371c      	adds	r7, #28
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr

0800f3be <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f3be:	b480      	push	{r7}
 800f3c0:	b089      	sub	sp, #36	; 0x24
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	60f8      	str	r0, [r7, #12]
 800f3c6:	60b9      	str	r1, [r7, #8]
 800f3c8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	61fb      	str	r3, [r7, #28]
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	1c5a      	adds	r2, r3, #1
 800f3da:	61fa      	str	r2, [r7, #28]
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	4619      	mov	r1, r3
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	1c5a      	adds	r2, r3, #1
 800f3e4:	61ba      	str	r2, [r7, #24]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	1acb      	subs	r3, r1, r3
 800f3ea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	607b      	str	r3, [r7, #4]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d002      	beq.n	800f3fe <mem_cmp+0x40>
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d0eb      	beq.n	800f3d6 <mem_cmp+0x18>

	return r;
 800f3fe:	697b      	ldr	r3, [r7, #20]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3724      	adds	r7, #36	; 0x24
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f416:	e002      	b.n	800f41e <chk_chr+0x12>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	3301      	adds	r3, #1
 800f41c:	607b      	str	r3, [r7, #4]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d005      	beq.n	800f432 <chk_chr+0x26>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	461a      	mov	r2, r3
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	4293      	cmp	r3, r2
 800f430:	d1f2      	bne.n	800f418 <chk_chr+0xc>
	return *str;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	781b      	ldrb	r3, [r3, #0]
}
 800f436:	4618      	mov	r0, r3
 800f438:	370c      	adds	r7, #12
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
	...

0800f444 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f444:	b480      	push	{r7}
 800f446:	b085      	sub	sp, #20
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f44e:	2300      	movs	r3, #0
 800f450:	60bb      	str	r3, [r7, #8]
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	60fb      	str	r3, [r7, #12]
 800f456:	e029      	b.n	800f4ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f458:	4a27      	ldr	r2, [pc, #156]	; (800f4f8 <chk_lock+0xb4>)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	011b      	lsls	r3, r3, #4
 800f45e:	4413      	add	r3, r2
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d01d      	beq.n	800f4a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f466:	4a24      	ldr	r2, [pc, #144]	; (800f4f8 <chk_lock+0xb4>)
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	011b      	lsls	r3, r3, #4
 800f46c:	4413      	add	r3, r2
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	429a      	cmp	r2, r3
 800f476:	d116      	bne.n	800f4a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f478:	4a1f      	ldr	r2, [pc, #124]	; (800f4f8 <chk_lock+0xb4>)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	011b      	lsls	r3, r3, #4
 800f47e:	4413      	add	r3, r2
 800f480:	3304      	adds	r3, #4
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f488:	429a      	cmp	r2, r3
 800f48a:	d10c      	bne.n	800f4a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f48c:	4a1a      	ldr	r2, [pc, #104]	; (800f4f8 <chk_lock+0xb4>)
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	011b      	lsls	r3, r3, #4
 800f492:	4413      	add	r3, r2
 800f494:	3308      	adds	r3, #8
 800f496:	681a      	ldr	r2, [r3, #0]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d102      	bne.n	800f4a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f4a0:	e007      	b.n	800f4b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	60fb      	str	r3, [r7, #12]
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d9d2      	bls.n	800f458 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	d109      	bne.n	800f4cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d102      	bne.n	800f4c4 <chk_lock+0x80>
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	2b02      	cmp	r3, #2
 800f4c2:	d101      	bne.n	800f4c8 <chk_lock+0x84>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	e010      	b.n	800f4ea <chk_lock+0xa6>
 800f4c8:	2312      	movs	r3, #18
 800f4ca:	e00e      	b.n	800f4ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d108      	bne.n	800f4e4 <chk_lock+0xa0>
 800f4d2:	4a09      	ldr	r2, [pc, #36]	; (800f4f8 <chk_lock+0xb4>)
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	011b      	lsls	r3, r3, #4
 800f4d8:	4413      	add	r3, r2
 800f4da:	330c      	adds	r3, #12
 800f4dc:	881b      	ldrh	r3, [r3, #0]
 800f4de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4e2:	d101      	bne.n	800f4e8 <chk_lock+0xa4>
 800f4e4:	2310      	movs	r3, #16
 800f4e6:	e000      	b.n	800f4ea <chk_lock+0xa6>
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3714      	adds	r7, #20
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	20033600 	.word	0x20033600

0800f4fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f502:	2300      	movs	r3, #0
 800f504:	607b      	str	r3, [r7, #4]
 800f506:	e002      	b.n	800f50e <enq_lock+0x12>
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	3301      	adds	r3, #1
 800f50c:	607b      	str	r3, [r7, #4]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2b01      	cmp	r3, #1
 800f512:	d806      	bhi.n	800f522 <enq_lock+0x26>
 800f514:	4a09      	ldr	r2, [pc, #36]	; (800f53c <enq_lock+0x40>)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	011b      	lsls	r3, r3, #4
 800f51a:	4413      	add	r3, r2
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1f2      	bne.n	800f508 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2b02      	cmp	r3, #2
 800f526:	bf14      	ite	ne
 800f528:	2301      	movne	r3, #1
 800f52a:	2300      	moveq	r3, #0
 800f52c:	b2db      	uxtb	r3, r3
}
 800f52e:	4618      	mov	r0, r3
 800f530:	370c      	adds	r7, #12
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop
 800f53c:	20033600 	.word	0x20033600

0800f540 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f540:	b480      	push	{r7}
 800f542:	b085      	sub	sp, #20
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f54a:	2300      	movs	r3, #0
 800f54c:	60fb      	str	r3, [r7, #12]
 800f54e:	e01f      	b.n	800f590 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f550:	4a41      	ldr	r2, [pc, #260]	; (800f658 <inc_lock+0x118>)
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	011b      	lsls	r3, r3, #4
 800f556:	4413      	add	r3, r2
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d113      	bne.n	800f58a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f562:	4a3d      	ldr	r2, [pc, #244]	; (800f658 <inc_lock+0x118>)
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	011b      	lsls	r3, r3, #4
 800f568:	4413      	add	r3, r2
 800f56a:	3304      	adds	r3, #4
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f572:	429a      	cmp	r2, r3
 800f574:	d109      	bne.n	800f58a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f576:	4a38      	ldr	r2, [pc, #224]	; (800f658 <inc_lock+0x118>)
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	011b      	lsls	r3, r3, #4
 800f57c:	4413      	add	r3, r2
 800f57e:	3308      	adds	r3, #8
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f586:	429a      	cmp	r2, r3
 800f588:	d006      	beq.n	800f598 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	3301      	adds	r3, #1
 800f58e:	60fb      	str	r3, [r7, #12]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b01      	cmp	r3, #1
 800f594:	d9dc      	bls.n	800f550 <inc_lock+0x10>
 800f596:	e000      	b.n	800f59a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f598:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2b02      	cmp	r3, #2
 800f59e:	d132      	bne.n	800f606 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	60fb      	str	r3, [r7, #12]
 800f5a4:	e002      	b.n	800f5ac <inc_lock+0x6c>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	60fb      	str	r3, [r7, #12]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d806      	bhi.n	800f5c0 <inc_lock+0x80>
 800f5b2:	4a29      	ldr	r2, [pc, #164]	; (800f658 <inc_lock+0x118>)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	011b      	lsls	r3, r3, #4
 800f5b8:	4413      	add	r3, r2
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1f2      	bne.n	800f5a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2b02      	cmp	r3, #2
 800f5c4:	d101      	bne.n	800f5ca <inc_lock+0x8a>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	e040      	b.n	800f64c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	4922      	ldr	r1, [pc, #136]	; (800f658 <inc_lock+0x118>)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	011b      	lsls	r3, r3, #4
 800f5d4:	440b      	add	r3, r1
 800f5d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	689a      	ldr	r2, [r3, #8]
 800f5dc:	491e      	ldr	r1, [pc, #120]	; (800f658 <inc_lock+0x118>)
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	011b      	lsls	r3, r3, #4
 800f5e2:	440b      	add	r3, r1
 800f5e4:	3304      	adds	r3, #4
 800f5e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	695a      	ldr	r2, [r3, #20]
 800f5ec:	491a      	ldr	r1, [pc, #104]	; (800f658 <inc_lock+0x118>)
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	011b      	lsls	r3, r3, #4
 800f5f2:	440b      	add	r3, r1
 800f5f4:	3308      	adds	r3, #8
 800f5f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f5f8:	4a17      	ldr	r2, [pc, #92]	; (800f658 <inc_lock+0x118>)
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	011b      	lsls	r3, r3, #4
 800f5fe:	4413      	add	r3, r2
 800f600:	330c      	adds	r3, #12
 800f602:	2200      	movs	r2, #0
 800f604:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d009      	beq.n	800f620 <inc_lock+0xe0>
 800f60c:	4a12      	ldr	r2, [pc, #72]	; (800f658 <inc_lock+0x118>)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	011b      	lsls	r3, r3, #4
 800f612:	4413      	add	r3, r2
 800f614:	330c      	adds	r3, #12
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d001      	beq.n	800f620 <inc_lock+0xe0>
 800f61c:	2300      	movs	r3, #0
 800f61e:	e015      	b.n	800f64c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d108      	bne.n	800f638 <inc_lock+0xf8>
 800f626:	4a0c      	ldr	r2, [pc, #48]	; (800f658 <inc_lock+0x118>)
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	011b      	lsls	r3, r3, #4
 800f62c:	4413      	add	r3, r2
 800f62e:	330c      	adds	r3, #12
 800f630:	881b      	ldrh	r3, [r3, #0]
 800f632:	3301      	adds	r3, #1
 800f634:	b29a      	uxth	r2, r3
 800f636:	e001      	b.n	800f63c <inc_lock+0xfc>
 800f638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f63c:	4906      	ldr	r1, [pc, #24]	; (800f658 <inc_lock+0x118>)
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	011b      	lsls	r3, r3, #4
 800f642:	440b      	add	r3, r1
 800f644:	330c      	adds	r3, #12
 800f646:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	3301      	adds	r3, #1
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3714      	adds	r7, #20
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr
 800f658:	20033600 	.word	0x20033600

0800f65c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b085      	sub	sp, #20
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	3b01      	subs	r3, #1
 800f668:	607b      	str	r3, [r7, #4]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d825      	bhi.n	800f6bc <dec_lock+0x60>
		n = Files[i].ctr;
 800f670:	4a17      	ldr	r2, [pc, #92]	; (800f6d0 <dec_lock+0x74>)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	011b      	lsls	r3, r3, #4
 800f676:	4413      	add	r3, r2
 800f678:	330c      	adds	r3, #12
 800f67a:	881b      	ldrh	r3, [r3, #0]
 800f67c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f67e:	89fb      	ldrh	r3, [r7, #14]
 800f680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f684:	d101      	bne.n	800f68a <dec_lock+0x2e>
 800f686:	2300      	movs	r3, #0
 800f688:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f68a:	89fb      	ldrh	r3, [r7, #14]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d002      	beq.n	800f696 <dec_lock+0x3a>
 800f690:	89fb      	ldrh	r3, [r7, #14]
 800f692:	3b01      	subs	r3, #1
 800f694:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f696:	4a0e      	ldr	r2, [pc, #56]	; (800f6d0 <dec_lock+0x74>)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	011b      	lsls	r3, r3, #4
 800f69c:	4413      	add	r3, r2
 800f69e:	330c      	adds	r3, #12
 800f6a0:	89fa      	ldrh	r2, [r7, #14]
 800f6a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f6a4:	89fb      	ldrh	r3, [r7, #14]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d105      	bne.n	800f6b6 <dec_lock+0x5a>
 800f6aa:	4a09      	ldr	r2, [pc, #36]	; (800f6d0 <dec_lock+0x74>)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	011b      	lsls	r3, r3, #4
 800f6b0:	4413      	add	r3, r2
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	737b      	strb	r3, [r7, #13]
 800f6ba:	e001      	b.n	800f6c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f6bc:	2302      	movs	r3, #2
 800f6be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f6c0:	7b7b      	ldrb	r3, [r7, #13]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3714      	adds	r7, #20
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr
 800f6ce:	bf00      	nop
 800f6d0:	20033600 	.word	0x20033600

0800f6d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f6dc:	2300      	movs	r3, #0
 800f6de:	60fb      	str	r3, [r7, #12]
 800f6e0:	e010      	b.n	800f704 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f6e2:	4a0d      	ldr	r2, [pc, #52]	; (800f718 <clear_lock+0x44>)
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	011b      	lsls	r3, r3, #4
 800f6e8:	4413      	add	r3, r2
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d105      	bne.n	800f6fe <clear_lock+0x2a>
 800f6f2:	4a09      	ldr	r2, [pc, #36]	; (800f718 <clear_lock+0x44>)
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	011b      	lsls	r3, r3, #4
 800f6f8:	4413      	add	r3, r2
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	3301      	adds	r3, #1
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2b01      	cmp	r3, #1
 800f708:	d9eb      	bls.n	800f6e2 <clear_lock+0xe>
	}
}
 800f70a:	bf00      	nop
 800f70c:	3714      	adds	r7, #20
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	20033600 	.word	0x20033600

0800f71c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f724:	2300      	movs	r3, #0
 800f726:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	78db      	ldrb	r3, [r3, #3]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d034      	beq.n	800f79a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f734:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	7858      	ldrb	r0, [r3, #1]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f740:	2301      	movs	r3, #1
 800f742:	697a      	ldr	r2, [r7, #20]
 800f744:	f7ff fd40 	bl	800f1c8 <disk_write>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d002      	beq.n	800f754 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f74e:	2301      	movs	r3, #1
 800f750:	73fb      	strb	r3, [r7, #15]
 800f752:	e022      	b.n	800f79a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f75e:	697a      	ldr	r2, [r7, #20]
 800f760:	1ad2      	subs	r2, r2, r3
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6a1b      	ldr	r3, [r3, #32]
 800f766:	429a      	cmp	r2, r3
 800f768:	d217      	bcs.n	800f79a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	789b      	ldrb	r3, [r3, #2]
 800f76e:	613b      	str	r3, [r7, #16]
 800f770:	e010      	b.n	800f794 <sync_window+0x78>
					wsect += fs->fsize;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a1b      	ldr	r3, [r3, #32]
 800f776:	697a      	ldr	r2, [r7, #20]
 800f778:	4413      	add	r3, r2
 800f77a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	7858      	ldrb	r0, [r3, #1]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f786:	2301      	movs	r3, #1
 800f788:	697a      	ldr	r2, [r7, #20]
 800f78a:	f7ff fd1d 	bl	800f1c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	3b01      	subs	r3, #1
 800f792:	613b      	str	r3, [r7, #16]
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	2b01      	cmp	r3, #1
 800f798:	d8eb      	bhi.n	800f772 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7b6:	683a      	ldr	r2, [r7, #0]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d01b      	beq.n	800f7f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f7ff ffad 	bl	800f71c <sync_window>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f7c6:	7bfb      	ldrb	r3, [r7, #15]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d113      	bne.n	800f7f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	7858      	ldrb	r0, [r3, #1]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	683a      	ldr	r2, [r7, #0]
 800f7da:	f7ff fcd5 	bl	800f188 <disk_read>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d004      	beq.n	800f7ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	683a      	ldr	r2, [r7, #0]
 800f7f2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
	...

0800f800 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7ff ff87 	bl	800f71c <sync_window>
 800f80e:	4603      	mov	r3, r0
 800f810:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f812:	7bfb      	ldrb	r3, [r7, #15]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d159      	bne.n	800f8cc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	2b03      	cmp	r3, #3
 800f81e:	d149      	bne.n	800f8b4 <sync_fs+0xb4>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	791b      	ldrb	r3, [r3, #4]
 800f824:	2b01      	cmp	r3, #1
 800f826:	d145      	bne.n	800f8b4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	899b      	ldrh	r3, [r3, #12]
 800f832:	461a      	mov	r2, r3
 800f834:	2100      	movs	r1, #0
 800f836:	f7ff fda8 	bl	800f38a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	3338      	adds	r3, #56	; 0x38
 800f83e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f842:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f846:	4618      	mov	r0, r3
 800f848:	f7ff fd37 	bl	800f2ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	3338      	adds	r3, #56	; 0x38
 800f850:	4921      	ldr	r1, [pc, #132]	; (800f8d8 <sync_fs+0xd8>)
 800f852:	4618      	mov	r0, r3
 800f854:	f7ff fd4c 	bl	800f2f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	3338      	adds	r3, #56	; 0x38
 800f85c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f860:	491e      	ldr	r1, [pc, #120]	; (800f8dc <sync_fs+0xdc>)
 800f862:	4618      	mov	r0, r3
 800f864:	f7ff fd44 	bl	800f2f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	3338      	adds	r3, #56	; 0x38
 800f86c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	695b      	ldr	r3, [r3, #20]
 800f874:	4619      	mov	r1, r3
 800f876:	4610      	mov	r0, r2
 800f878:	f7ff fd3a 	bl	800f2f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	3338      	adds	r3, #56	; 0x38
 800f880:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	691b      	ldr	r3, [r3, #16]
 800f888:	4619      	mov	r1, r3
 800f88a:	4610      	mov	r0, r2
 800f88c:	f7ff fd30 	bl	800f2f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f894:	1c5a      	adds	r2, r3, #1
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7858      	ldrb	r0, [r3, #1]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	f7ff fc8d 	bl	800f1c8 <disk_write>
			fs->fsi_flag = 0;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	785b      	ldrb	r3, [r3, #1]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7ff fca3 	bl	800f208 <disk_ioctl>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d001      	beq.n	800f8cc <sync_fs+0xcc>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	41615252 	.word	0x41615252
 800f8dc:	61417272 	.word	0x61417272

0800f8e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	3b02      	subs	r3, #2
 800f8ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	69db      	ldr	r3, [r3, #28]
 800f8f4:	3b02      	subs	r3, #2
 800f8f6:	683a      	ldr	r2, [r7, #0]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d301      	bcc.n	800f900 <clust2sect+0x20>
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	e008      	b.n	800f912 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	895b      	ldrh	r3, [r3, #10]
 800f904:	461a      	mov	r2, r3
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	fb03 f202 	mul.w	r2, r3, r2
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f910:	4413      	add	r3, r2
}
 800f912:	4618      	mov	r0, r3
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr

0800f91e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b086      	sub	sp, #24
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	2b01      	cmp	r3, #1
 800f932:	d904      	bls.n	800f93e <get_fat+0x20>
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	69db      	ldr	r3, [r3, #28]
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d302      	bcc.n	800f944 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f93e:	2301      	movs	r3, #1
 800f940:	617b      	str	r3, [r7, #20]
 800f942:	e0b7      	b.n	800fab4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f944:	f04f 33ff 	mov.w	r3, #4294967295
 800f948:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	2b02      	cmp	r3, #2
 800f950:	d05a      	beq.n	800fa08 <get_fat+0xea>
 800f952:	2b03      	cmp	r3, #3
 800f954:	d07d      	beq.n	800fa52 <get_fat+0x134>
 800f956:	2b01      	cmp	r3, #1
 800f958:	f040 80a2 	bne.w	800faa0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	60fb      	str	r3, [r7, #12]
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	085b      	lsrs	r3, r3, #1
 800f964:	68fa      	ldr	r2, [r7, #12]
 800f966:	4413      	add	r3, r2
 800f968:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	899b      	ldrh	r3, [r3, #12]
 800f972:	4619      	mov	r1, r3
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	fbb3 f3f1 	udiv	r3, r3, r1
 800f97a:	4413      	add	r3, r2
 800f97c:	4619      	mov	r1, r3
 800f97e:	6938      	ldr	r0, [r7, #16]
 800f980:	f7ff ff10 	bl	800f7a4 <move_window>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	f040 808d 	bne.w	800faa6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	60fa      	str	r2, [r7, #12]
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	8992      	ldrh	r2, [r2, #12]
 800f996:	fbb3 f1f2 	udiv	r1, r3, r2
 800f99a:	fb02 f201 	mul.w	r2, r2, r1
 800f99e:	1a9b      	subs	r3, r3, r2
 800f9a0:	693a      	ldr	r2, [r7, #16]
 800f9a2:	4413      	add	r3, r2
 800f9a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f9a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	899b      	ldrh	r3, [r3, #12]
 800f9b2:	4619      	mov	r1, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9ba:	4413      	add	r3, r2
 800f9bc:	4619      	mov	r1, r3
 800f9be:	6938      	ldr	r0, [r7, #16]
 800f9c0:	f7ff fef0 	bl	800f7a4 <move_window>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d16f      	bne.n	800faaa <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	899b      	ldrh	r3, [r3, #12]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9d6:	fb02 f201 	mul.w	r2, r2, r1
 800f9da:	1a9b      	subs	r3, r3, r2
 800f9dc:	693a      	ldr	r2, [r7, #16]
 800f9de:	4413      	add	r3, r2
 800f9e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f9e4:	021b      	lsls	r3, r3, #8
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	f003 0301 	and.w	r3, r3, #1
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d002      	beq.n	800f9fe <get_fat+0xe0>
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	091b      	lsrs	r3, r3, #4
 800f9fc:	e002      	b.n	800fa04 <get_fat+0xe6>
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa04:	617b      	str	r3, [r7, #20]
			break;
 800fa06:	e055      	b.n	800fab4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	899b      	ldrh	r3, [r3, #12]
 800fa10:	085b      	lsrs	r3, r3, #1
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	4619      	mov	r1, r3
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa1c:	4413      	add	r3, r2
 800fa1e:	4619      	mov	r1, r3
 800fa20:	6938      	ldr	r0, [r7, #16]
 800fa22:	f7ff febf 	bl	800f7a4 <move_window>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d140      	bne.n	800faae <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	005b      	lsls	r3, r3, #1
 800fa36:	693a      	ldr	r2, [r7, #16]
 800fa38:	8992      	ldrh	r2, [r2, #12]
 800fa3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa3e:	fb02 f200 	mul.w	r2, r2, r0
 800fa42:	1a9b      	subs	r3, r3, r2
 800fa44:	440b      	add	r3, r1
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7ff fbfc 	bl	800f244 <ld_word>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	617b      	str	r3, [r7, #20]
			break;
 800fa50:	e030      	b.n	800fab4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	899b      	ldrh	r3, [r3, #12]
 800fa5a:	089b      	lsrs	r3, r3, #2
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	4619      	mov	r1, r3
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa66:	4413      	add	r3, r2
 800fa68:	4619      	mov	r1, r3
 800fa6a:	6938      	ldr	r0, [r7, #16]
 800fa6c:	f7ff fe9a 	bl	800f7a4 <move_window>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d11d      	bne.n	800fab2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	009b      	lsls	r3, r3, #2
 800fa80:	693a      	ldr	r2, [r7, #16]
 800fa82:	8992      	ldrh	r2, [r2, #12]
 800fa84:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa88:	fb02 f200 	mul.w	r2, r2, r0
 800fa8c:	1a9b      	subs	r3, r3, r2
 800fa8e:	440b      	add	r3, r1
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7ff fbef 	bl	800f274 <ld_dword>
 800fa96:	4603      	mov	r3, r0
 800fa98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fa9c:	617b      	str	r3, [r7, #20]
			break;
 800fa9e:	e009      	b.n	800fab4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800faa0:	2301      	movs	r3, #1
 800faa2:	617b      	str	r3, [r7, #20]
 800faa4:	e006      	b.n	800fab4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800faa6:	bf00      	nop
 800faa8:	e004      	b.n	800fab4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800faaa:	bf00      	nop
 800faac:	e002      	b.n	800fab4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800faae:	bf00      	nop
 800fab0:	e000      	b.n	800fab4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fab2:	bf00      	nop
		}
	}

	return val;
 800fab4:	697b      	ldr	r3, [r7, #20]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3718      	adds	r7, #24
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fabe:	b590      	push	{r4, r7, lr}
 800fac0:	b089      	sub	sp, #36	; 0x24
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	60f8      	str	r0, [r7, #12]
 800fac6:	60b9      	str	r1, [r7, #8]
 800fac8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800faca:	2302      	movs	r3, #2
 800facc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	f240 8106 	bls.w	800fce2 <put_fat+0x224>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	69db      	ldr	r3, [r3, #28]
 800fada:	68ba      	ldr	r2, [r7, #8]
 800fadc:	429a      	cmp	r2, r3
 800fade:	f080 8100 	bcs.w	800fce2 <put_fat+0x224>
		switch (fs->fs_type) {
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	2b02      	cmp	r3, #2
 800fae8:	f000 8088 	beq.w	800fbfc <put_fat+0x13e>
 800faec:	2b03      	cmp	r3, #3
 800faee:	f000 80b0 	beq.w	800fc52 <put_fat+0x194>
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	f040 80f5 	bne.w	800fce2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	61bb      	str	r3, [r7, #24]
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	085b      	lsrs	r3, r3, #1
 800fb00:	69ba      	ldr	r2, [r7, #24]
 800fb02:	4413      	add	r3, r2
 800fb04:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	899b      	ldrh	r3, [r3, #12]
 800fb0e:	4619      	mov	r1, r3
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb16:	4413      	add	r3, r2
 800fb18:	4619      	mov	r1, r3
 800fb1a:	68f8      	ldr	r0, [r7, #12]
 800fb1c:	f7ff fe42 	bl	800f7a4 <move_window>
 800fb20:	4603      	mov	r3, r0
 800fb22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb24:	7ffb      	ldrb	r3, [r7, #31]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	f040 80d4 	bne.w	800fcd4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	1c5a      	adds	r2, r3, #1
 800fb36:	61ba      	str	r2, [r7, #24]
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	8992      	ldrh	r2, [r2, #12]
 800fb3c:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb40:	fb02 f200 	mul.w	r2, r2, r0
 800fb44:	1a9b      	subs	r3, r3, r2
 800fb46:	440b      	add	r3, r1
 800fb48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	f003 0301 	and.w	r3, r3, #1
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00d      	beq.n	800fb70 <put_fat+0xb2>
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	b25b      	sxtb	r3, r3
 800fb5a:	f003 030f 	and.w	r3, r3, #15
 800fb5e:	b25a      	sxtb	r2, r3
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	011b      	lsls	r3, r3, #4
 800fb66:	b25b      	sxtb	r3, r3
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	b25b      	sxtb	r3, r3
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	e001      	b.n	800fb74 <put_fat+0xb6>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	b2db      	uxtb	r3, r3
 800fb74:	697a      	ldr	r2, [r7, #20]
 800fb76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	899b      	ldrh	r3, [r3, #12]
 800fb86:	4619      	mov	r1, r3
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb8e:	4413      	add	r3, r2
 800fb90:	4619      	mov	r1, r3
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f7ff fe06 	bl	800f7a4 <move_window>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb9c:	7ffb      	ldrb	r3, [r7, #31]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	f040 809a 	bne.w	800fcd8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	899b      	ldrh	r3, [r3, #12]
 800fbae:	461a      	mov	r2, r3
 800fbb0:	69bb      	ldr	r3, [r7, #24]
 800fbb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbb6:	fb02 f200 	mul.w	r2, r2, r0
 800fbba:	1a9b      	subs	r3, r3, r2
 800fbbc:	440b      	add	r3, r1
 800fbbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	f003 0301 	and.w	r3, r3, #1
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d003      	beq.n	800fbd2 <put_fat+0x114>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	091b      	lsrs	r3, r3, #4
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	e00e      	b.n	800fbf0 <put_fat+0x132>
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	b25b      	sxtb	r3, r3
 800fbd8:	f023 030f 	bic.w	r3, r3, #15
 800fbdc:	b25a      	sxtb	r2, r3
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	0a1b      	lsrs	r3, r3, #8
 800fbe2:	b25b      	sxtb	r3, r3
 800fbe4:	f003 030f 	and.w	r3, r3, #15
 800fbe8:	b25b      	sxtb	r3, r3
 800fbea:	4313      	orrs	r3, r2
 800fbec:	b25b      	sxtb	r3, r3
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	697a      	ldr	r2, [r7, #20]
 800fbf2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	70da      	strb	r2, [r3, #3]
			break;
 800fbfa:	e072      	b.n	800fce2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	899b      	ldrh	r3, [r3, #12]
 800fc04:	085b      	lsrs	r3, r3, #1
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	4619      	mov	r1, r3
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc10:	4413      	add	r3, r2
 800fc12:	4619      	mov	r1, r3
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f7ff fdc5 	bl	800f7a4 <move_window>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc1e:	7ffb      	ldrb	r3, [r7, #31]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d15b      	bne.n	800fcdc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	005b      	lsls	r3, r3, #1
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	8992      	ldrh	r2, [r2, #12]
 800fc32:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc36:	fb02 f200 	mul.w	r2, r2, r0
 800fc3a:	1a9b      	subs	r3, r3, r2
 800fc3c:	440b      	add	r3, r1
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	b292      	uxth	r2, r2
 800fc42:	4611      	mov	r1, r2
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7ff fb38 	bl	800f2ba <st_word>
			fs->wflag = 1;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	70da      	strb	r2, [r3, #3]
			break;
 800fc50:	e047      	b.n	800fce2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	899b      	ldrh	r3, [r3, #12]
 800fc5a:	089b      	lsrs	r3, r3, #2
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	4619      	mov	r1, r3
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc66:	4413      	add	r3, r2
 800fc68:	4619      	mov	r1, r3
 800fc6a:	68f8      	ldr	r0, [r7, #12]
 800fc6c:	f7ff fd9a 	bl	800f7a4 <move_window>
 800fc70:	4603      	mov	r3, r0
 800fc72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc74:	7ffb      	ldrb	r3, [r7, #31]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d132      	bne.n	800fce0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	68fa      	ldr	r2, [r7, #12]
 800fc8c:	8992      	ldrh	r2, [r2, #12]
 800fc8e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc92:	fb02 f200 	mul.w	r2, r2, r0
 800fc96:	1a9b      	subs	r3, r3, r2
 800fc98:	440b      	add	r3, r1
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7ff faea 	bl	800f274 <ld_dword>
 800fca0:	4603      	mov	r3, r0
 800fca2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fca6:	4323      	orrs	r3, r4
 800fca8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	8992      	ldrh	r2, [r2, #12]
 800fcb8:	fbb3 f0f2 	udiv	r0, r3, r2
 800fcbc:	fb02 f200 	mul.w	r2, r2, r0
 800fcc0:	1a9b      	subs	r3, r3, r2
 800fcc2:	440b      	add	r3, r1
 800fcc4:	6879      	ldr	r1, [r7, #4]
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7ff fb12 	bl	800f2f0 <st_dword>
			fs->wflag = 1;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2201      	movs	r2, #1
 800fcd0:	70da      	strb	r2, [r3, #3]
			break;
 800fcd2:	e006      	b.n	800fce2 <put_fat+0x224>
			if (res != FR_OK) break;
 800fcd4:	bf00      	nop
 800fcd6:	e004      	b.n	800fce2 <put_fat+0x224>
			if (res != FR_OK) break;
 800fcd8:	bf00      	nop
 800fcda:	e002      	b.n	800fce2 <put_fat+0x224>
			if (res != FR_OK) break;
 800fcdc:	bf00      	nop
 800fcde:	e000      	b.n	800fce2 <put_fat+0x224>
			if (res != FR_OK) break;
 800fce0:	bf00      	nop
		}
	}
	return res;
 800fce2:	7ffb      	ldrb	r3, [r7, #31]
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3724      	adds	r7, #36	; 0x24
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd90      	pop	{r4, r7, pc}

0800fcec <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b088      	sub	sp, #32
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	60b9      	str	r1, [r7, #8]
 800fcf6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d904      	bls.n	800fd12 <remove_chain+0x26>
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	69db      	ldr	r3, [r3, #28]
 800fd0c:	68ba      	ldr	r2, [r7, #8]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d301      	bcc.n	800fd16 <remove_chain+0x2a>
 800fd12:	2302      	movs	r3, #2
 800fd14:	e04b      	b.n	800fdae <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d00c      	beq.n	800fd36 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd20:	6879      	ldr	r1, [r7, #4]
 800fd22:	69b8      	ldr	r0, [r7, #24]
 800fd24:	f7ff fecb 	bl	800fabe <put_fat>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fd2c:	7ffb      	ldrb	r3, [r7, #31]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d001      	beq.n	800fd36 <remove_chain+0x4a>
 800fd32:	7ffb      	ldrb	r3, [r7, #31]
 800fd34:	e03b      	b.n	800fdae <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fd36:	68b9      	ldr	r1, [r7, #8]
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f7ff fdf0 	bl	800f91e <get_fat>
 800fd3e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d031      	beq.n	800fdaa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d101      	bne.n	800fd50 <remove_chain+0x64>
 800fd4c:	2302      	movs	r3, #2
 800fd4e:	e02e      	b.n	800fdae <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd56:	d101      	bne.n	800fd5c <remove_chain+0x70>
 800fd58:	2301      	movs	r3, #1
 800fd5a:	e028      	b.n	800fdae <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	68b9      	ldr	r1, [r7, #8]
 800fd60:	69b8      	ldr	r0, [r7, #24]
 800fd62:	f7ff feac 	bl	800fabe <put_fat>
 800fd66:	4603      	mov	r3, r0
 800fd68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fd6a:	7ffb      	ldrb	r3, [r7, #31]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d001      	beq.n	800fd74 <remove_chain+0x88>
 800fd70:	7ffb      	ldrb	r3, [r7, #31]
 800fd72:	e01c      	b.n	800fdae <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fd74:	69bb      	ldr	r3, [r7, #24]
 800fd76:	695a      	ldr	r2, [r3, #20]
 800fd78:	69bb      	ldr	r3, [r7, #24]
 800fd7a:	69db      	ldr	r3, [r3, #28]
 800fd7c:	3b02      	subs	r3, #2
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d20b      	bcs.n	800fd9a <remove_chain+0xae>
			fs->free_clst++;
 800fd82:	69bb      	ldr	r3, [r7, #24]
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	1c5a      	adds	r2, r3, #1
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	791b      	ldrb	r3, [r3, #4]
 800fd90:	f043 0301 	orr.w	r3, r3, #1
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	69db      	ldr	r3, [r3, #28]
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d3c6      	bcc.n	800fd36 <remove_chain+0x4a>
 800fda8:	e000      	b.n	800fdac <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fdaa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fdac:	2300      	movs	r3, #0
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3720      	adds	r7, #32
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}

0800fdb6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fdb6:	b580      	push	{r7, lr}
 800fdb8:	b088      	sub	sp, #32
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
 800fdbe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d10d      	bne.n	800fde8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	691b      	ldr	r3, [r3, #16]
 800fdd0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fdd2:	69bb      	ldr	r3, [r7, #24]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d004      	beq.n	800fde2 <create_chain+0x2c>
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	69db      	ldr	r3, [r3, #28]
 800fddc:	69ba      	ldr	r2, [r7, #24]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d31b      	bcc.n	800fe1a <create_chain+0x64>
 800fde2:	2301      	movs	r3, #1
 800fde4:	61bb      	str	r3, [r7, #24]
 800fde6:	e018      	b.n	800fe1a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fde8:	6839      	ldr	r1, [r7, #0]
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f7ff fd97 	bl	800f91e <get_fat>
 800fdf0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d801      	bhi.n	800fdfc <create_chain+0x46>
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	e070      	b.n	800fede <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe02:	d101      	bne.n	800fe08 <create_chain+0x52>
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	e06a      	b.n	800fede <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	69db      	ldr	r3, [r3, #28]
 800fe0c:	68fa      	ldr	r2, [r7, #12]
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d201      	bcs.n	800fe16 <create_chain+0x60>
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	e063      	b.n	800fede <create_chain+0x128>
		scl = clst;
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fe1a:	69bb      	ldr	r3, [r7, #24]
 800fe1c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	3301      	adds	r3, #1
 800fe22:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	69db      	ldr	r3, [r3, #28]
 800fe28:	69fa      	ldr	r2, [r7, #28]
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d307      	bcc.n	800fe3e <create_chain+0x88>
				ncl = 2;
 800fe2e:	2302      	movs	r3, #2
 800fe30:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fe32:	69fa      	ldr	r2, [r7, #28]
 800fe34:	69bb      	ldr	r3, [r7, #24]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d901      	bls.n	800fe3e <create_chain+0x88>
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	e04f      	b.n	800fede <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fe3e:	69f9      	ldr	r1, [r7, #28]
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f7ff fd6c 	bl	800f91e <get_fat>
 800fe46:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00e      	beq.n	800fe6c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d003      	beq.n	800fe5c <create_chain+0xa6>
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe5a:	d101      	bne.n	800fe60 <create_chain+0xaa>
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	e03e      	b.n	800fede <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fe60:	69fa      	ldr	r2, [r7, #28]
 800fe62:	69bb      	ldr	r3, [r7, #24]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d1da      	bne.n	800fe1e <create_chain+0x68>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	e038      	b.n	800fede <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fe6c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fe6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe72:	69f9      	ldr	r1, [r7, #28]
 800fe74:	6938      	ldr	r0, [r7, #16]
 800fe76:	f7ff fe22 	bl	800fabe <put_fat>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fe7e:	7dfb      	ldrb	r3, [r7, #23]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d109      	bne.n	800fe98 <create_chain+0xe2>
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d006      	beq.n	800fe98 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fe8a:	69fa      	ldr	r2, [r7, #28]
 800fe8c:	6839      	ldr	r1, [r7, #0]
 800fe8e:	6938      	ldr	r0, [r7, #16]
 800fe90:	f7ff fe15 	bl	800fabe <put_fat>
 800fe94:	4603      	mov	r3, r0
 800fe96:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fe98:	7dfb      	ldrb	r3, [r7, #23]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d116      	bne.n	800fecc <create_chain+0x116>
		fs->last_clst = ncl;
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	69fa      	ldr	r2, [r7, #28]
 800fea2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	695a      	ldr	r2, [r3, #20]
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	69db      	ldr	r3, [r3, #28]
 800feac:	3b02      	subs	r3, #2
 800feae:	429a      	cmp	r2, r3
 800feb0:	d804      	bhi.n	800febc <create_chain+0x106>
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	695b      	ldr	r3, [r3, #20]
 800feb6:	1e5a      	subs	r2, r3, #1
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	791b      	ldrb	r3, [r3, #4]
 800fec0:	f043 0301 	orr.w	r3, r3, #1
 800fec4:	b2da      	uxtb	r2, r3
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	711a      	strb	r2, [r3, #4]
 800feca:	e007      	b.n	800fedc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fecc:	7dfb      	ldrb	r3, [r7, #23]
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d102      	bne.n	800fed8 <create_chain+0x122>
 800fed2:	f04f 33ff 	mov.w	r3, #4294967295
 800fed6:	e000      	b.n	800feda <create_chain+0x124>
 800fed8:	2301      	movs	r3, #1
 800feda:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fedc:	69fb      	ldr	r3, [r7, #28]
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3720      	adds	r7, #32
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}

0800fee6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fee6:	b480      	push	{r7}
 800fee8:	b087      	sub	sp, #28
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
 800feee:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fefa:	3304      	adds	r3, #4
 800fefc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	899b      	ldrh	r3, [r3, #12]
 800ff02:	461a      	mov	r2, r3
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff0a:	68fa      	ldr	r2, [r7, #12]
 800ff0c:	8952      	ldrh	r2, [r2, #10]
 800ff0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff12:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	1d1a      	adds	r2, r3, #4
 800ff18:	613a      	str	r2, [r7, #16]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d101      	bne.n	800ff28 <clmt_clust+0x42>
 800ff24:	2300      	movs	r3, #0
 800ff26:	e010      	b.n	800ff4a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ff28:	697a      	ldr	r2, [r7, #20]
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d307      	bcc.n	800ff40 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ff30:	697a      	ldr	r2, [r7, #20]
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	617b      	str	r3, [r7, #20]
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	3304      	adds	r3, #4
 800ff3c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ff3e:	e7e9      	b.n	800ff14 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ff40:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	681a      	ldr	r2, [r3, #0]
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	4413      	add	r3, r2
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	371c      	adds	r7, #28
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr

0800ff56 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ff56:	b580      	push	{r7, lr}
 800ff58:	b086      	sub	sp, #24
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
 800ff5e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff6c:	d204      	bcs.n	800ff78 <dir_sdi+0x22>
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	f003 031f 	and.w	r3, r3, #31
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d001      	beq.n	800ff7c <dir_sdi+0x26>
		return FR_INT_ERR;
 800ff78:	2302      	movs	r3, #2
 800ff7a:	e071      	b.n	8010060 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	683a      	ldr	r2, [r7, #0]
 800ff80:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d106      	bne.n	800ff9c <dir_sdi+0x46>
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	2b02      	cmp	r3, #2
 800ff94:	d902      	bls.n	800ff9c <dir_sdi+0x46>
		clst = fs->dirbase;
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff9a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d10c      	bne.n	800ffbc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	095b      	lsrs	r3, r3, #5
 800ffa6:	693a      	ldr	r2, [r7, #16]
 800ffa8:	8912      	ldrh	r2, [r2, #8]
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d301      	bcc.n	800ffb2 <dir_sdi+0x5c>
 800ffae:	2302      	movs	r3, #2
 800ffb0:	e056      	b.n	8010060 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	61da      	str	r2, [r3, #28]
 800ffba:	e02d      	b.n	8010018 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	895b      	ldrh	r3, [r3, #10]
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	899b      	ldrh	r3, [r3, #12]
 800ffc6:	fb03 f302 	mul.w	r3, r3, r2
 800ffca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ffcc:	e019      	b.n	8010002 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6979      	ldr	r1, [r7, #20]
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7ff fca3 	bl	800f91e <get_fat>
 800ffd8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffe0:	d101      	bne.n	800ffe6 <dir_sdi+0x90>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e03c      	b.n	8010060 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d904      	bls.n	800fff6 <dir_sdi+0xa0>
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	69db      	ldr	r3, [r3, #28]
 800fff0:	697a      	ldr	r2, [r7, #20]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d301      	bcc.n	800fffa <dir_sdi+0xa4>
 800fff6:	2302      	movs	r3, #2
 800fff8:	e032      	b.n	8010060 <dir_sdi+0x10a>
			ofs -= csz;
 800fffa:	683a      	ldr	r2, [r7, #0]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	1ad3      	subs	r3, r2, r3
 8010000:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010002:	683a      	ldr	r2, [r7, #0]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	429a      	cmp	r2, r3
 8010008:	d2e1      	bcs.n	800ffce <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801000a:	6979      	ldr	r1, [r7, #20]
 801000c:	6938      	ldr	r0, [r7, #16]
 801000e:	f7ff fc67 	bl	800f8e0 <clust2sect>
 8010012:	4602      	mov	r2, r0
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	697a      	ldr	r2, [r7, #20]
 801001c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	69db      	ldr	r3, [r3, #28]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d101      	bne.n	801002a <dir_sdi+0xd4>
 8010026:	2302      	movs	r3, #2
 8010028:	e01a      	b.n	8010060 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	69da      	ldr	r2, [r3, #28]
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	899b      	ldrh	r3, [r3, #12]
 8010032:	4619      	mov	r1, r3
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	fbb3 f3f1 	udiv	r3, r3, r1
 801003a:	441a      	add	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	899b      	ldrh	r3, [r3, #12]
 801004a:	461a      	mov	r2, r3
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010052:	fb02 f200 	mul.w	r2, r2, r0
 8010056:	1a9b      	subs	r3, r3, r2
 8010058:	18ca      	adds	r2, r1, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	3718      	adds	r7, #24
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b086      	sub	sp, #24
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	695b      	ldr	r3, [r3, #20]
 801007c:	3320      	adds	r3, #32
 801007e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	69db      	ldr	r3, [r3, #28]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d003      	beq.n	8010090 <dir_next+0x28>
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801008e:	d301      	bcc.n	8010094 <dir_next+0x2c>
 8010090:	2304      	movs	r3, #4
 8010092:	e0bb      	b.n	801020c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	899b      	ldrh	r3, [r3, #12]
 8010098:	461a      	mov	r2, r3
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	fbb3 f1f2 	udiv	r1, r3, r2
 80100a0:	fb02 f201 	mul.w	r2, r2, r1
 80100a4:	1a9b      	subs	r3, r3, r2
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	f040 809d 	bne.w	80101e6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	69db      	ldr	r3, [r3, #28]
 80100b0:	1c5a      	adds	r2, r3, #1
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	699b      	ldr	r3, [r3, #24]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d10b      	bne.n	80100d6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	095b      	lsrs	r3, r3, #5
 80100c2:	68fa      	ldr	r2, [r7, #12]
 80100c4:	8912      	ldrh	r2, [r2, #8]
 80100c6:	4293      	cmp	r3, r2
 80100c8:	f0c0 808d 	bcc.w	80101e6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	61da      	str	r2, [r3, #28]
 80100d2:	2304      	movs	r3, #4
 80100d4:	e09a      	b.n	801020c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	899b      	ldrh	r3, [r3, #12]
 80100da:	461a      	mov	r2, r3
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	fbb3 f3f2 	udiv	r3, r3, r2
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	8952      	ldrh	r2, [r2, #10]
 80100e6:	3a01      	subs	r2, #1
 80100e8:	4013      	ands	r3, r2
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d17b      	bne.n	80101e6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	699b      	ldr	r3, [r3, #24]
 80100f4:	4619      	mov	r1, r3
 80100f6:	4610      	mov	r0, r2
 80100f8:	f7ff fc11 	bl	800f91e <get_fat>
 80100fc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	2b01      	cmp	r3, #1
 8010102:	d801      	bhi.n	8010108 <dir_next+0xa0>
 8010104:	2302      	movs	r3, #2
 8010106:	e081      	b.n	801020c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801010e:	d101      	bne.n	8010114 <dir_next+0xac>
 8010110:	2301      	movs	r3, #1
 8010112:	e07b      	b.n	801020c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	69db      	ldr	r3, [r3, #28]
 8010118:	697a      	ldr	r2, [r7, #20]
 801011a:	429a      	cmp	r2, r3
 801011c:	d359      	bcc.n	80101d2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d104      	bne.n	801012e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2200      	movs	r2, #0
 8010128:	61da      	str	r2, [r3, #28]
 801012a:	2304      	movs	r3, #4
 801012c:	e06e      	b.n	801020c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	699b      	ldr	r3, [r3, #24]
 8010134:	4619      	mov	r1, r3
 8010136:	4610      	mov	r0, r2
 8010138:	f7ff fe3d 	bl	800fdb6 <create_chain>
 801013c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d101      	bne.n	8010148 <dir_next+0xe0>
 8010144:	2307      	movs	r3, #7
 8010146:	e061      	b.n	801020c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	2b01      	cmp	r3, #1
 801014c:	d101      	bne.n	8010152 <dir_next+0xea>
 801014e:	2302      	movs	r3, #2
 8010150:	e05c      	b.n	801020c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010158:	d101      	bne.n	801015e <dir_next+0xf6>
 801015a:	2301      	movs	r3, #1
 801015c:	e056      	b.n	801020c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f7ff fadc 	bl	800f71c <sync_window>
 8010164:	4603      	mov	r3, r0
 8010166:	2b00      	cmp	r3, #0
 8010168:	d001      	beq.n	801016e <dir_next+0x106>
 801016a:	2301      	movs	r3, #1
 801016c:	e04e      	b.n	801020c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	899b      	ldrh	r3, [r3, #12]
 8010178:	461a      	mov	r2, r3
 801017a:	2100      	movs	r1, #0
 801017c:	f7ff f905 	bl	800f38a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010180:	2300      	movs	r3, #0
 8010182:	613b      	str	r3, [r7, #16]
 8010184:	6979      	ldr	r1, [r7, #20]
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f7ff fbaa 	bl	800f8e0 <clust2sect>
 801018c:	4602      	mov	r2, r0
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	635a      	str	r2, [r3, #52]	; 0x34
 8010192:	e012      	b.n	80101ba <dir_next+0x152>
						fs->wflag = 1;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2201      	movs	r2, #1
 8010198:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f7ff fabe 	bl	800f71c <sync_window>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d001      	beq.n	80101aa <dir_next+0x142>
 80101a6:	2301      	movs	r3, #1
 80101a8:	e030      	b.n	801020c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	3301      	adds	r3, #1
 80101ae:	613b      	str	r3, [r7, #16]
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101b4:	1c5a      	adds	r2, r3, #1
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	635a      	str	r2, [r3, #52]	; 0x34
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	895b      	ldrh	r3, [r3, #10]
 80101be:	461a      	mov	r2, r3
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d3e6      	bcc.n	8010194 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	1ad2      	subs	r2, r2, r3
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	697a      	ldr	r2, [r7, #20]
 80101d6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80101d8:	6979      	ldr	r1, [r7, #20]
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f7ff fb80 	bl	800f8e0 <clust2sect>
 80101e0:	4602      	mov	r2, r0
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	68ba      	ldr	r2, [r7, #8]
 80101ea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	899b      	ldrh	r3, [r3, #12]
 80101f6:	461a      	mov	r2, r3
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80101fe:	fb02 f200 	mul.w	r2, r2, r0
 8010202:	1a9b      	subs	r3, r3, r2
 8010204:	18ca      	adds	r2, r1, r3
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801020a:	2300      	movs	r3, #0
}
 801020c:	4618      	mov	r0, r3
 801020e:	3718      	adds	r7, #24
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b086      	sub	sp, #24
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010224:	2100      	movs	r1, #0
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f7ff fe95 	bl	800ff56 <dir_sdi>
 801022c:	4603      	mov	r3, r0
 801022e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010230:	7dfb      	ldrb	r3, [r7, #23]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d12b      	bne.n	801028e <dir_alloc+0x7a>
		n = 0;
 8010236:	2300      	movs	r3, #0
 8010238:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	69db      	ldr	r3, [r3, #28]
 801023e:	4619      	mov	r1, r3
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f7ff faaf 	bl	800f7a4 <move_window>
 8010246:	4603      	mov	r3, r0
 8010248:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801024a:	7dfb      	ldrb	r3, [r7, #23]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d11d      	bne.n	801028c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6a1b      	ldr	r3, [r3, #32]
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	2be5      	cmp	r3, #229	; 0xe5
 8010258:	d004      	beq.n	8010264 <dir_alloc+0x50>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6a1b      	ldr	r3, [r3, #32]
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d107      	bne.n	8010274 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	3301      	adds	r3, #1
 8010268:	613b      	str	r3, [r7, #16]
 801026a:	693a      	ldr	r2, [r7, #16]
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	429a      	cmp	r2, r3
 8010270:	d102      	bne.n	8010278 <dir_alloc+0x64>
 8010272:	e00c      	b.n	801028e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010274:	2300      	movs	r3, #0
 8010276:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010278:	2101      	movs	r1, #1
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff fef4 	bl	8010068 <dir_next>
 8010280:	4603      	mov	r3, r0
 8010282:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010284:	7dfb      	ldrb	r3, [r7, #23]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d0d7      	beq.n	801023a <dir_alloc+0x26>
 801028a:	e000      	b.n	801028e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801028c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801028e:	7dfb      	ldrb	r3, [r7, #23]
 8010290:	2b04      	cmp	r3, #4
 8010292:	d101      	bne.n	8010298 <dir_alloc+0x84>
 8010294:	2307      	movs	r3, #7
 8010296:	75fb      	strb	r3, [r7, #23]
	return res;
 8010298:	7dfb      	ldrb	r3, [r7, #23]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3718      	adds	r7, #24
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b084      	sub	sp, #16
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
 80102aa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	331a      	adds	r3, #26
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fe ffc7 	bl	800f244 <ld_word>
 80102b6:	4603      	mov	r3, r0
 80102b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	2b03      	cmp	r3, #3
 80102c0:	d109      	bne.n	80102d6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	3314      	adds	r3, #20
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7fe ffbc 	bl	800f244 <ld_word>
 80102cc:	4603      	mov	r3, r0
 80102ce:	041b      	lsls	r3, r3, #16
 80102d0:	68fa      	ldr	r2, [r7, #12]
 80102d2:	4313      	orrs	r3, r2
 80102d4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80102d6:	68fb      	ldr	r3, [r7, #12]
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3710      	adds	r7, #16
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}

080102e0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b084      	sub	sp, #16
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	331a      	adds	r3, #26
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	b292      	uxth	r2, r2
 80102f4:	4611      	mov	r1, r2
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fe ffdf 	bl	800f2ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	2b03      	cmp	r3, #3
 8010302:	d109      	bne.n	8010318 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	f103 0214 	add.w	r2, r3, #20
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	0c1b      	lsrs	r3, r3, #16
 801030e:	b29b      	uxth	r3, r3
 8010310:	4619      	mov	r1, r3
 8010312:	4610      	mov	r0, r2
 8010314:	f7fe ffd1 	bl	800f2ba <st_word>
	}
}
 8010318:	bf00      	nop
 801031a:	3710      	adds	r7, #16
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b086      	sub	sp, #24
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801032a:	2304      	movs	r3, #4
 801032c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8010334:	e03c      	b.n	80103b0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	69db      	ldr	r3, [r3, #28]
 801033a:	4619      	mov	r1, r3
 801033c:	6938      	ldr	r0, [r7, #16]
 801033e:	f7ff fa31 	bl	800f7a4 <move_window>
 8010342:	4603      	mov	r3, r0
 8010344:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010346:	7dfb      	ldrb	r3, [r7, #23]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d136      	bne.n	80103ba <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6a1b      	ldr	r3, [r3, #32]
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8010354:	7bfb      	ldrb	r3, [r7, #15]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d102      	bne.n	8010360 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801035a:	2304      	movs	r3, #4
 801035c:	75fb      	strb	r3, [r7, #23]
 801035e:	e031      	b.n	80103c4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6a1b      	ldr	r3, [r3, #32]
 8010364:	330b      	adds	r3, #11
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801036c:	73bb      	strb	r3, [r7, #14]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	7bba      	ldrb	r2, [r7, #14]
 8010372:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010374:	7bfb      	ldrb	r3, [r7, #15]
 8010376:	2be5      	cmp	r3, #229	; 0xe5
 8010378:	d011      	beq.n	801039e <dir_read+0x7e>
 801037a:	7bfb      	ldrb	r3, [r7, #15]
 801037c:	2b2e      	cmp	r3, #46	; 0x2e
 801037e:	d00e      	beq.n	801039e <dir_read+0x7e>
 8010380:	7bbb      	ldrb	r3, [r7, #14]
 8010382:	2b0f      	cmp	r3, #15
 8010384:	d00b      	beq.n	801039e <dir_read+0x7e>
 8010386:	7bbb      	ldrb	r3, [r7, #14]
 8010388:	f023 0320 	bic.w	r3, r3, #32
 801038c:	2b08      	cmp	r3, #8
 801038e:	bf0c      	ite	eq
 8010390:	2301      	moveq	r3, #1
 8010392:	2300      	movne	r3, #0
 8010394:	b2db      	uxtb	r3, r3
 8010396:	461a      	mov	r2, r3
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	4293      	cmp	r3, r2
 801039c:	d00f      	beq.n	80103be <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801039e:	2100      	movs	r1, #0
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f7ff fe61 	bl	8010068 <dir_next>
 80103a6:	4603      	mov	r3, r0
 80103a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80103aa:	7dfb      	ldrb	r3, [r7, #23]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d108      	bne.n	80103c2 <dir_read+0xa2>
	while (dp->sect) {
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	69db      	ldr	r3, [r3, #28]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d1be      	bne.n	8010336 <dir_read+0x16>
 80103b8:	e004      	b.n	80103c4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80103ba:	bf00      	nop
 80103bc:	e002      	b.n	80103c4 <dir_read+0xa4>
				break;
 80103be:	bf00      	nop
 80103c0:	e000      	b.n	80103c4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80103c2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80103c4:	7dfb      	ldrb	r3, [r7, #23]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d002      	beq.n	80103d0 <dir_read+0xb0>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	61da      	str	r2, [r3, #28]
	return res;
 80103d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3718      	adds	r7, #24
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b086      	sub	sp, #24
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80103e8:	2100      	movs	r1, #0
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f7ff fdb3 	bl	800ff56 <dir_sdi>
 80103f0:	4603      	mov	r3, r0
 80103f2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80103f4:	7dfb      	ldrb	r3, [r7, #23]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <dir_find+0x24>
 80103fa:	7dfb      	ldrb	r3, [r7, #23]
 80103fc:	e03e      	b.n	801047c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	69db      	ldr	r3, [r3, #28]
 8010402:	4619      	mov	r1, r3
 8010404:	6938      	ldr	r0, [r7, #16]
 8010406:	f7ff f9cd 	bl	800f7a4 <move_window>
 801040a:	4603      	mov	r3, r0
 801040c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801040e:	7dfb      	ldrb	r3, [r7, #23]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d12f      	bne.n	8010474 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6a1b      	ldr	r3, [r3, #32]
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801041c:	7bfb      	ldrb	r3, [r7, #15]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d102      	bne.n	8010428 <dir_find+0x4e>
 8010422:	2304      	movs	r3, #4
 8010424:	75fb      	strb	r3, [r7, #23]
 8010426:	e028      	b.n	801047a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6a1b      	ldr	r3, [r3, #32]
 801042c:	330b      	adds	r3, #11
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010434:	b2da      	uxtb	r2, r3
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6a1b      	ldr	r3, [r3, #32]
 801043e:	330b      	adds	r3, #11
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	f003 0308 	and.w	r3, r3, #8
 8010446:	2b00      	cmp	r3, #0
 8010448:	d10a      	bne.n	8010460 <dir_find+0x86>
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6a18      	ldr	r0, [r3, #32]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	3324      	adds	r3, #36	; 0x24
 8010452:	220b      	movs	r2, #11
 8010454:	4619      	mov	r1, r3
 8010456:	f7fe ffb2 	bl	800f3be <mem_cmp>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00b      	beq.n	8010478 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010460:	2100      	movs	r1, #0
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f7ff fe00 	bl	8010068 <dir_next>
 8010468:	4603      	mov	r3, r0
 801046a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801046c:	7dfb      	ldrb	r3, [r7, #23]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d0c5      	beq.n	80103fe <dir_find+0x24>
 8010472:	e002      	b.n	801047a <dir_find+0xa0>
		if (res != FR_OK) break;
 8010474:	bf00      	nop
 8010476:	e000      	b.n	801047a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010478:	bf00      	nop

	return res;
 801047a:	7dfb      	ldrb	r3, [r7, #23]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3718      	adds	r7, #24
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010492:	2101      	movs	r1, #1
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f7ff febd 	bl	8010214 <dir_alloc>
 801049a:	4603      	mov	r3, r0
 801049c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801049e:	7bfb      	ldrb	r3, [r7, #15]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d11c      	bne.n	80104de <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	69db      	ldr	r3, [r3, #28]
 80104a8:	4619      	mov	r1, r3
 80104aa:	68b8      	ldr	r0, [r7, #8]
 80104ac:	f7ff f97a 	bl	800f7a4 <move_window>
 80104b0:	4603      	mov	r3, r0
 80104b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80104b4:	7bfb      	ldrb	r3, [r7, #15]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d111      	bne.n	80104de <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6a1b      	ldr	r3, [r3, #32]
 80104be:	2220      	movs	r2, #32
 80104c0:	2100      	movs	r1, #0
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7fe ff61 	bl	800f38a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6a18      	ldr	r0, [r3, #32]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	3324      	adds	r3, #36	; 0x24
 80104d0:	220b      	movs	r2, #11
 80104d2:	4619      	mov	r1, r3
 80104d4:	f7fe ff38 	bl	800f348 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	2201      	movs	r2, #1
 80104dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80104de:	7bfb      	ldrb	r3, [r7, #15]
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3710      	adds	r7, #16
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	69db      	ldr	r3, [r3, #28]
 80104fa:	4619      	mov	r1, r3
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	f7ff f951 	bl	800f7a4 <move_window>
 8010502:	4603      	mov	r3, r0
 8010504:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8010506:	7afb      	ldrb	r3, [r7, #11]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d106      	bne.n	801051a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6a1b      	ldr	r3, [r3, #32]
 8010510:	22e5      	movs	r2, #229	; 0xe5
 8010512:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2201      	movs	r2, #1
 8010518:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801051a:	7afb      	ldrb	r3, [r7, #11]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3710      	adds	r7, #16
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b088      	sub	sp, #32
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	60fb      	str	r3, [r7, #12]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	3324      	adds	r3, #36	; 0x24
 8010538:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801053a:	220b      	movs	r2, #11
 801053c:	2120      	movs	r1, #32
 801053e:	68b8      	ldr	r0, [r7, #8]
 8010540:	f7fe ff23 	bl	800f38a <mem_set>
	si = i = 0; ni = 8;
 8010544:	2300      	movs	r3, #0
 8010546:	613b      	str	r3, [r7, #16]
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	617b      	str	r3, [r7, #20]
 801054c:	2308      	movs	r3, #8
 801054e:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	4413      	add	r3, r2
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	2b2e      	cmp	r3, #46	; 0x2e
 801055a:	d12f      	bne.n	80105bc <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	1c5a      	adds	r2, r3, #1
 8010560:	617a      	str	r2, [r7, #20]
 8010562:	68fa      	ldr	r2, [r7, #12]
 8010564:	4413      	add	r3, r2
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 801056a:	7ffb      	ldrb	r3, [r7, #31]
 801056c:	2b2e      	cmp	r3, #46	; 0x2e
 801056e:	d10a      	bne.n	8010586 <create_name+0x62>
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	2b02      	cmp	r3, #2
 8010574:	d807      	bhi.n	8010586 <create_name+0x62>
			sfn[i++] = c;
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	1c5a      	adds	r2, r3, #1
 801057a:	613a      	str	r2, [r7, #16]
 801057c:	68ba      	ldr	r2, [r7, #8]
 801057e:	4413      	add	r3, r2
 8010580:	7ffa      	ldrb	r2, [r7, #31]
 8010582:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8010584:	e7ea      	b.n	801055c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8010586:	7ffb      	ldrb	r3, [r7, #31]
 8010588:	2b2f      	cmp	r3, #47	; 0x2f
 801058a:	d007      	beq.n	801059c <create_name+0x78>
 801058c:	7ffb      	ldrb	r3, [r7, #31]
 801058e:	2b5c      	cmp	r3, #92	; 0x5c
 8010590:	d004      	beq.n	801059c <create_name+0x78>
 8010592:	7ffb      	ldrb	r3, [r7, #31]
 8010594:	2b20      	cmp	r3, #32
 8010596:	d901      	bls.n	801059c <create_name+0x78>
 8010598:	2306      	movs	r3, #6
 801059a:	e084      	b.n	80106a6 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 801059c:	68fa      	ldr	r2, [r7, #12]
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	441a      	add	r2, r3
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80105a6:	7ffb      	ldrb	r3, [r7, #31]
 80105a8:	2b20      	cmp	r3, #32
 80105aa:	d801      	bhi.n	80105b0 <create_name+0x8c>
 80105ac:	2224      	movs	r2, #36	; 0x24
 80105ae:	e000      	b.n	80105b2 <create_name+0x8e>
 80105b0:	2220      	movs	r2, #32
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	330b      	adds	r3, #11
 80105b6:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80105b8:	2300      	movs	r3, #0
 80105ba:	e074      	b.n	80106a6 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	1c5a      	adds	r2, r3, #1
 80105c0:	617a      	str	r2, [r7, #20]
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	4413      	add	r3, r2
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80105ca:	7ffb      	ldrb	r3, [r7, #31]
 80105cc:	2b20      	cmp	r3, #32
 80105ce:	d94e      	bls.n	801066e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80105d0:	7ffb      	ldrb	r3, [r7, #31]
 80105d2:	2b2f      	cmp	r3, #47	; 0x2f
 80105d4:	d006      	beq.n	80105e4 <create_name+0xc0>
 80105d6:	7ffb      	ldrb	r3, [r7, #31]
 80105d8:	2b5c      	cmp	r3, #92	; 0x5c
 80105da:	d110      	bne.n	80105fe <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80105dc:	e002      	b.n	80105e4 <create_name+0xc0>
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	3301      	adds	r3, #1
 80105e2:	617b      	str	r3, [r7, #20]
 80105e4:	68fa      	ldr	r2, [r7, #12]
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	4413      	add	r3, r2
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	2b2f      	cmp	r3, #47	; 0x2f
 80105ee:	d0f6      	beq.n	80105de <create_name+0xba>
 80105f0:	68fa      	ldr	r2, [r7, #12]
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	4413      	add	r3, r2
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	2b5c      	cmp	r3, #92	; 0x5c
 80105fa:	d0f0      	beq.n	80105de <create_name+0xba>
			break;
 80105fc:	e038      	b.n	8010670 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80105fe:	7ffb      	ldrb	r3, [r7, #31]
 8010600:	2b2e      	cmp	r3, #46	; 0x2e
 8010602:	d003      	beq.n	801060c <create_name+0xe8>
 8010604:	693a      	ldr	r2, [r7, #16]
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	429a      	cmp	r2, r3
 801060a:	d30c      	bcc.n	8010626 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	2b0b      	cmp	r3, #11
 8010610:	d002      	beq.n	8010618 <create_name+0xf4>
 8010612:	7ffb      	ldrb	r3, [r7, #31]
 8010614:	2b2e      	cmp	r3, #46	; 0x2e
 8010616:	d001      	beq.n	801061c <create_name+0xf8>
 8010618:	2306      	movs	r3, #6
 801061a:	e044      	b.n	80106a6 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 801061c:	2308      	movs	r3, #8
 801061e:	613b      	str	r3, [r7, #16]
 8010620:	230b      	movs	r3, #11
 8010622:	61bb      	str	r3, [r7, #24]
			continue;
 8010624:	e022      	b.n	801066c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010626:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801062a:	2b00      	cmp	r3, #0
 801062c:	da04      	bge.n	8010638 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801062e:	7ffb      	ldrb	r3, [r7, #31]
 8010630:	3b80      	subs	r3, #128	; 0x80
 8010632:	4a1f      	ldr	r2, [pc, #124]	; (80106b0 <create_name+0x18c>)
 8010634:	5cd3      	ldrb	r3, [r2, r3]
 8010636:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010638:	7ffb      	ldrb	r3, [r7, #31]
 801063a:	4619      	mov	r1, r3
 801063c:	481d      	ldr	r0, [pc, #116]	; (80106b4 <create_name+0x190>)
 801063e:	f7fe fee5 	bl	800f40c <chk_chr>
 8010642:	4603      	mov	r3, r0
 8010644:	2b00      	cmp	r3, #0
 8010646:	d001      	beq.n	801064c <create_name+0x128>
 8010648:	2306      	movs	r3, #6
 801064a:	e02c      	b.n	80106a6 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801064c:	7ffb      	ldrb	r3, [r7, #31]
 801064e:	2b60      	cmp	r3, #96	; 0x60
 8010650:	d905      	bls.n	801065e <create_name+0x13a>
 8010652:	7ffb      	ldrb	r3, [r7, #31]
 8010654:	2b7a      	cmp	r3, #122	; 0x7a
 8010656:	d802      	bhi.n	801065e <create_name+0x13a>
 8010658:	7ffb      	ldrb	r3, [r7, #31]
 801065a:	3b20      	subs	r3, #32
 801065c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	1c5a      	adds	r2, r3, #1
 8010662:	613a      	str	r2, [r7, #16]
 8010664:	68ba      	ldr	r2, [r7, #8]
 8010666:	4413      	add	r3, r2
 8010668:	7ffa      	ldrb	r2, [r7, #31]
 801066a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801066c:	e7a6      	b.n	80105bc <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801066e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010670:	68fa      	ldr	r2, [r7, #12]
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	441a      	add	r2, r3
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d101      	bne.n	8010684 <create_name+0x160>
 8010680:	2306      	movs	r3, #6
 8010682:	e010      	b.n	80106a6 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	2be5      	cmp	r3, #229	; 0xe5
 801068a:	d102      	bne.n	8010692 <create_name+0x16e>
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	2205      	movs	r2, #5
 8010690:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010692:	7ffb      	ldrb	r3, [r7, #31]
 8010694:	2b20      	cmp	r3, #32
 8010696:	d801      	bhi.n	801069c <create_name+0x178>
 8010698:	2204      	movs	r2, #4
 801069a:	e000      	b.n	801069e <create_name+0x17a>
 801069c:	2200      	movs	r2, #0
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	330b      	adds	r3, #11
 80106a2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80106a4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3720      	adds	r7, #32
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	08017de8 	.word	0x08017de8
 80106b4:	08017d98 	.word	0x08017d98

080106b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b086      	sub	sp, #24
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	2b2f      	cmp	r3, #47	; 0x2f
 80106d2:	d00b      	beq.n	80106ec <follow_path+0x34>
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	2b5c      	cmp	r3, #92	; 0x5c
 80106da:	d007      	beq.n	80106ec <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	699a      	ldr	r2, [r3, #24]
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	609a      	str	r2, [r3, #8]
 80106e4:	e00d      	b.n	8010702 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	3301      	adds	r3, #1
 80106ea:	603b      	str	r3, [r7, #0]
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	2b2f      	cmp	r3, #47	; 0x2f
 80106f2:	d0f8      	beq.n	80106e6 <follow_path+0x2e>
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	2b5c      	cmp	r3, #92	; 0x5c
 80106fa:	d0f4      	beq.n	80106e6 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	2200      	movs	r2, #0
 8010700:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	2b1f      	cmp	r3, #31
 8010708:	d80a      	bhi.n	8010720 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2280      	movs	r2, #128	; 0x80
 801070e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010712:	2100      	movs	r1, #0
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7ff fc1e 	bl	800ff56 <dir_sdi>
 801071a:	4603      	mov	r3, r0
 801071c:	75fb      	strb	r3, [r7, #23]
 801071e:	e05b      	b.n	80107d8 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010720:	463b      	mov	r3, r7
 8010722:	4619      	mov	r1, r3
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f7ff fefd 	bl	8010524 <create_name>
 801072a:	4603      	mov	r3, r0
 801072c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801072e:	7dfb      	ldrb	r3, [r7, #23]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d14c      	bne.n	80107ce <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f7ff fe50 	bl	80103da <dir_find>
 801073a:	4603      	mov	r3, r0
 801073c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010744:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010746:	7dfb      	ldrb	r3, [r7, #23]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d01b      	beq.n	8010784 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801074c:	7dfb      	ldrb	r3, [r7, #23]
 801074e:	2b04      	cmp	r3, #4
 8010750:	d13f      	bne.n	80107d2 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8010752:	7afb      	ldrb	r3, [r7, #11]
 8010754:	f003 0320 	and.w	r3, r3, #32
 8010758:	2b00      	cmp	r3, #0
 801075a:	d00b      	beq.n	8010774 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801075c:	7afb      	ldrb	r3, [r7, #11]
 801075e:	f003 0304 	and.w	r3, r3, #4
 8010762:	2b00      	cmp	r3, #0
 8010764:	d031      	beq.n	80107ca <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2280      	movs	r2, #128	; 0x80
 801076a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801076e:	2300      	movs	r3, #0
 8010770:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8010772:	e02e      	b.n	80107d2 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010774:	7afb      	ldrb	r3, [r7, #11]
 8010776:	f003 0304 	and.w	r3, r3, #4
 801077a:	2b00      	cmp	r3, #0
 801077c:	d129      	bne.n	80107d2 <follow_path+0x11a>
 801077e:	2305      	movs	r3, #5
 8010780:	75fb      	strb	r3, [r7, #23]
				break;
 8010782:	e026      	b.n	80107d2 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010784:	7afb      	ldrb	r3, [r7, #11]
 8010786:	f003 0304 	and.w	r3, r3, #4
 801078a:	2b00      	cmp	r3, #0
 801078c:	d123      	bne.n	80107d6 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	799b      	ldrb	r3, [r3, #6]
 8010792:	f003 0310 	and.w	r3, r3, #16
 8010796:	2b00      	cmp	r3, #0
 8010798:	d102      	bne.n	80107a0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801079a:	2305      	movs	r3, #5
 801079c:	75fb      	strb	r3, [r7, #23]
 801079e:	e01b      	b.n	80107d8 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	695b      	ldr	r3, [r3, #20]
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	8992      	ldrh	r2, [r2, #12]
 80107ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80107b2:	fb02 f200 	mul.w	r2, r2, r0
 80107b6:	1a9b      	subs	r3, r3, r2
 80107b8:	440b      	add	r3, r1
 80107ba:	4619      	mov	r1, r3
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	f7ff fd70 	bl	80102a2 <ld_clust>
 80107c2:	4602      	mov	r2, r0
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	609a      	str	r2, [r3, #8]
 80107c8:	e7aa      	b.n	8010720 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80107ca:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80107cc:	e7a8      	b.n	8010720 <follow_path+0x68>
			if (res != FR_OK) break;
 80107ce:	bf00      	nop
 80107d0:	e002      	b.n	80107d8 <follow_path+0x120>
				break;
 80107d2:	bf00      	nop
 80107d4:	e000      	b.n	80107d8 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80107d6:	bf00      	nop
			}
		}
	}

	return res;
 80107d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3718      	adds	r7, #24
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80107e2:	b480      	push	{r7}
 80107e4:	b087      	sub	sp, #28
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80107ea:	f04f 33ff 	mov.w	r3, #4294967295
 80107ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d031      	beq.n	801085c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	617b      	str	r3, [r7, #20]
 80107fe:	e002      	b.n	8010806 <get_ldnumber+0x24>
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	3301      	adds	r3, #1
 8010804:	617b      	str	r3, [r7, #20]
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	2b20      	cmp	r3, #32
 801080c:	d903      	bls.n	8010816 <get_ldnumber+0x34>
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	2b3a      	cmp	r3, #58	; 0x3a
 8010814:	d1f4      	bne.n	8010800 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	2b3a      	cmp	r3, #58	; 0x3a
 801081c:	d11c      	bne.n	8010858 <get_ldnumber+0x76>
			tp = *path;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	1c5a      	adds	r2, r3, #1
 8010828:	60fa      	str	r2, [r7, #12]
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	3b30      	subs	r3, #48	; 0x30
 801082e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	2b09      	cmp	r3, #9
 8010834:	d80e      	bhi.n	8010854 <get_ldnumber+0x72>
 8010836:	68fa      	ldr	r2, [r7, #12]
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	429a      	cmp	r2, r3
 801083c:	d10a      	bne.n	8010854 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d107      	bne.n	8010854 <get_ldnumber+0x72>
					vol = (int)i;
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	3301      	adds	r3, #1
 801084c:	617b      	str	r3, [r7, #20]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	697a      	ldr	r2, [r7, #20]
 8010852:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	e002      	b.n	801085e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010858:	2300      	movs	r3, #0
 801085a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801085c:	693b      	ldr	r3, [r7, #16]
}
 801085e:	4618      	mov	r0, r3
 8010860:	371c      	adds	r7, #28
 8010862:	46bd      	mov	sp, r7
 8010864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010868:	4770      	bx	lr
	...

0801086c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b082      	sub	sp, #8
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2200      	movs	r2, #0
 801087a:	70da      	strb	r2, [r3, #3]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f04f 32ff 	mov.w	r2, #4294967295
 8010882:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010884:	6839      	ldr	r1, [r7, #0]
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7fe ff8c 	bl	800f7a4 <move_window>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d001      	beq.n	8010896 <check_fs+0x2a>
 8010892:	2304      	movs	r3, #4
 8010894:	e038      	b.n	8010908 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	3338      	adds	r3, #56	; 0x38
 801089a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fe fcd0 	bl	800f244 <ld_word>
 80108a4:	4603      	mov	r3, r0
 80108a6:	461a      	mov	r2, r3
 80108a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d001      	beq.n	80108b4 <check_fs+0x48>
 80108b0:	2303      	movs	r3, #3
 80108b2:	e029      	b.n	8010908 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80108ba:	2be9      	cmp	r3, #233	; 0xe9
 80108bc:	d009      	beq.n	80108d2 <check_fs+0x66>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80108c4:	2beb      	cmp	r3, #235	; 0xeb
 80108c6:	d11e      	bne.n	8010906 <check_fs+0x9a>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80108ce:	2b90      	cmp	r3, #144	; 0x90
 80108d0:	d119      	bne.n	8010906 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	3338      	adds	r3, #56	; 0x38
 80108d6:	3336      	adds	r3, #54	; 0x36
 80108d8:	4618      	mov	r0, r3
 80108da:	f7fe fccb 	bl	800f274 <ld_dword>
 80108de:	4603      	mov	r3, r0
 80108e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80108e4:	4a0a      	ldr	r2, [pc, #40]	; (8010910 <check_fs+0xa4>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d101      	bne.n	80108ee <check_fs+0x82>
 80108ea:	2300      	movs	r3, #0
 80108ec:	e00c      	b.n	8010908 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	3338      	adds	r3, #56	; 0x38
 80108f2:	3352      	adds	r3, #82	; 0x52
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7fe fcbd 	bl	800f274 <ld_dword>
 80108fa:	4602      	mov	r2, r0
 80108fc:	4b05      	ldr	r3, [pc, #20]	; (8010914 <check_fs+0xa8>)
 80108fe:	429a      	cmp	r2, r3
 8010900:	d101      	bne.n	8010906 <check_fs+0x9a>
 8010902:	2300      	movs	r3, #0
 8010904:	e000      	b.n	8010908 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010906:	2302      	movs	r3, #2
}
 8010908:	4618      	mov	r0, r3
 801090a:	3708      	adds	r7, #8
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}
 8010910:	00544146 	.word	0x00544146
 8010914:	33544146 	.word	0x33544146

08010918 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b096      	sub	sp, #88	; 0x58
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	60b9      	str	r1, [r7, #8]
 8010922:	4613      	mov	r3, r2
 8010924:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	2200      	movs	r2, #0
 801092a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801092c:	68f8      	ldr	r0, [r7, #12]
 801092e:	f7ff ff58 	bl	80107e2 <get_ldnumber>
 8010932:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010936:	2b00      	cmp	r3, #0
 8010938:	da01      	bge.n	801093e <find_volume+0x26>
 801093a:	230b      	movs	r3, #11
 801093c:	e268      	b.n	8010e10 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801093e:	4ab0      	ldr	r2, [pc, #704]	; (8010c00 <find_volume+0x2e8>)
 8010940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010946:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094a:	2b00      	cmp	r3, #0
 801094c:	d101      	bne.n	8010952 <find_volume+0x3a>
 801094e:	230c      	movs	r3, #12
 8010950:	e25e      	b.n	8010e10 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010956:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010958:	79fb      	ldrb	r3, [r7, #7]
 801095a:	f023 0301 	bic.w	r3, r3, #1
 801095e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d01a      	beq.n	801099e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096a:	785b      	ldrb	r3, [r3, #1]
 801096c:	4618      	mov	r0, r3
 801096e:	f7fe fbcb 	bl	800f108 <disk_status>
 8010972:	4603      	mov	r3, r0
 8010974:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010978:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801097c:	f003 0301 	and.w	r3, r3, #1
 8010980:	2b00      	cmp	r3, #0
 8010982:	d10c      	bne.n	801099e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010984:	79fb      	ldrb	r3, [r7, #7]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d007      	beq.n	801099a <find_volume+0x82>
 801098a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801098e:	f003 0304 	and.w	r3, r3, #4
 8010992:	2b00      	cmp	r3, #0
 8010994:	d001      	beq.n	801099a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010996:	230a      	movs	r3, #10
 8010998:	e23a      	b.n	8010e10 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801099a:	2300      	movs	r3, #0
 801099c:	e238      	b.n	8010e10 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801099e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a0:	2200      	movs	r2, #0
 80109a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80109a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a6:	b2da      	uxtb	r2, r3
 80109a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80109ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ae:	785b      	ldrb	r3, [r3, #1]
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7fe fbc3 	bl	800f13c <disk_initialize>
 80109b6:	4603      	mov	r3, r0
 80109b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80109bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109c0:	f003 0301 	and.w	r3, r3, #1
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d001      	beq.n	80109cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80109c8:	2303      	movs	r3, #3
 80109ca:	e221      	b.n	8010e10 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80109cc:	79fb      	ldrb	r3, [r7, #7]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d007      	beq.n	80109e2 <find_volume+0xca>
 80109d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109d6:	f003 0304 	and.w	r3, r3, #4
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d001      	beq.n	80109e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80109de:	230a      	movs	r3, #10
 80109e0:	e216      	b.n	8010e10 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80109e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e4:	7858      	ldrb	r0, [r3, #1]
 80109e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e8:	330c      	adds	r3, #12
 80109ea:	461a      	mov	r2, r3
 80109ec:	2102      	movs	r1, #2
 80109ee:	f7fe fc0b 	bl	800f208 <disk_ioctl>
 80109f2:	4603      	mov	r3, r0
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d001      	beq.n	80109fc <find_volume+0xe4>
 80109f8:	2301      	movs	r3, #1
 80109fa:	e209      	b.n	8010e10 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80109fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fe:	899b      	ldrh	r3, [r3, #12]
 8010a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a04:	d80d      	bhi.n	8010a22 <find_volume+0x10a>
 8010a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a08:	899b      	ldrh	r3, [r3, #12]
 8010a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a0e:	d308      	bcc.n	8010a22 <find_volume+0x10a>
 8010a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a12:	899b      	ldrh	r3, [r3, #12]
 8010a14:	461a      	mov	r2, r3
 8010a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a18:	899b      	ldrh	r3, [r3, #12]
 8010a1a:	3b01      	subs	r3, #1
 8010a1c:	4013      	ands	r3, r2
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d001      	beq.n	8010a26 <find_volume+0x10e>
 8010a22:	2301      	movs	r3, #1
 8010a24:	e1f4      	b.n	8010e10 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010a2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010a2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a2e:	f7ff ff1d 	bl	801086c <check_fs>
 8010a32:	4603      	mov	r3, r0
 8010a34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010a38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a3c:	2b02      	cmp	r3, #2
 8010a3e:	d14b      	bne.n	8010ad8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010a40:	2300      	movs	r3, #0
 8010a42:	643b      	str	r3, [r7, #64]	; 0x40
 8010a44:	e01f      	b.n	8010a86 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a48:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a4e:	011b      	lsls	r3, r3, #4
 8010a50:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010a54:	4413      	add	r3, r2
 8010a56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a5a:	3304      	adds	r3, #4
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d006      	beq.n	8010a70 <find_volume+0x158>
 8010a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a64:	3308      	adds	r3, #8
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7fe fc04 	bl	800f274 <ld_dword>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	e000      	b.n	8010a72 <find_volume+0x15a>
 8010a70:	2200      	movs	r2, #0
 8010a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010a7a:	440b      	add	r3, r1
 8010a7c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a82:	3301      	adds	r3, #1
 8010a84:	643b      	str	r3, [r7, #64]	; 0x40
 8010a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a88:	2b03      	cmp	r3, #3
 8010a8a:	d9dc      	bls.n	8010a46 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d002      	beq.n	8010a9c <find_volume+0x184>
 8010a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a98:	3b01      	subs	r3, #1
 8010a9a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010aa4:	4413      	add	r3, r2
 8010aa6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010aaa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d005      	beq.n	8010abe <find_volume+0x1a6>
 8010ab2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ab4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ab6:	f7ff fed9 	bl	801086c <check_fs>
 8010aba:	4603      	mov	r3, r0
 8010abc:	e000      	b.n	8010ac0 <find_volume+0x1a8>
 8010abe:	2303      	movs	r3, #3
 8010ac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d905      	bls.n	8010ad8 <find_volume+0x1c0>
 8010acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ace:	3301      	adds	r3, #1
 8010ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8010ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ad4:	2b03      	cmp	r3, #3
 8010ad6:	d9e1      	bls.n	8010a9c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010adc:	2b04      	cmp	r3, #4
 8010ade:	d101      	bne.n	8010ae4 <find_volume+0x1cc>
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	e195      	b.n	8010e10 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ae8:	2b01      	cmp	r3, #1
 8010aea:	d901      	bls.n	8010af0 <find_volume+0x1d8>
 8010aec:	230d      	movs	r3, #13
 8010aee:	e18f      	b.n	8010e10 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af2:	3338      	adds	r3, #56	; 0x38
 8010af4:	330b      	adds	r3, #11
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fe fba4 	bl	800f244 <ld_word>
 8010afc:	4603      	mov	r3, r0
 8010afe:	461a      	mov	r2, r3
 8010b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b02:	899b      	ldrh	r3, [r3, #12]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d001      	beq.n	8010b0c <find_volume+0x1f4>
 8010b08:	230d      	movs	r3, #13
 8010b0a:	e181      	b.n	8010e10 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0e:	3338      	adds	r3, #56	; 0x38
 8010b10:	3316      	adds	r3, #22
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fe fb96 	bl	800f244 <ld_word>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d106      	bne.n	8010b30 <find_volume+0x218>
 8010b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b24:	3338      	adds	r3, #56	; 0x38
 8010b26:	3324      	adds	r3, #36	; 0x24
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7fe fba3 	bl	800f274 <ld_dword>
 8010b2e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b34:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b38:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b42:	789b      	ldrb	r3, [r3, #2]
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	d005      	beq.n	8010b54 <find_volume+0x23c>
 8010b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4a:	789b      	ldrb	r3, [r3, #2]
 8010b4c:	2b02      	cmp	r3, #2
 8010b4e:	d001      	beq.n	8010b54 <find_volume+0x23c>
 8010b50:	230d      	movs	r3, #13
 8010b52:	e15d      	b.n	8010e10 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b56:	789b      	ldrb	r3, [r3, #2]
 8010b58:	461a      	mov	r2, r3
 8010b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b5c:	fb02 f303 	mul.w	r3, r2, r3
 8010b60:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b68:	b29a      	uxth	r2, r3
 8010b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b70:	895b      	ldrh	r3, [r3, #10]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d008      	beq.n	8010b88 <find_volume+0x270>
 8010b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b78:	895b      	ldrh	r3, [r3, #10]
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b7e:	895b      	ldrh	r3, [r3, #10]
 8010b80:	3b01      	subs	r3, #1
 8010b82:	4013      	ands	r3, r2
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d001      	beq.n	8010b8c <find_volume+0x274>
 8010b88:	230d      	movs	r3, #13
 8010b8a:	e141      	b.n	8010e10 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b8e:	3338      	adds	r3, #56	; 0x38
 8010b90:	3311      	adds	r3, #17
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fe fb56 	bl	800f244 <ld_word>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba2:	891b      	ldrh	r3, [r3, #8]
 8010ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ba6:	8992      	ldrh	r2, [r2, #12]
 8010ba8:	0952      	lsrs	r2, r2, #5
 8010baa:	b292      	uxth	r2, r2
 8010bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8010bb0:	fb02 f201 	mul.w	r2, r2, r1
 8010bb4:	1a9b      	subs	r3, r3, r2
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d001      	beq.n	8010bc0 <find_volume+0x2a8>
 8010bbc:	230d      	movs	r3, #13
 8010bbe:	e127      	b.n	8010e10 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bc2:	3338      	adds	r3, #56	; 0x38
 8010bc4:	3313      	adds	r3, #19
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7fe fb3c 	bl	800f244 <ld_word>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d106      	bne.n	8010be4 <find_volume+0x2cc>
 8010bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd8:	3338      	adds	r3, #56	; 0x38
 8010bda:	3320      	adds	r3, #32
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7fe fb49 	bl	800f274 <ld_dword>
 8010be2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be6:	3338      	adds	r3, #56	; 0x38
 8010be8:	330e      	adds	r3, #14
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7fe fb2a 	bl	800f244 <ld_word>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010bf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d104      	bne.n	8010c04 <find_volume+0x2ec>
 8010bfa:	230d      	movs	r3, #13
 8010bfc:	e108      	b.n	8010e10 <find_volume+0x4f8>
 8010bfe:	bf00      	nop
 8010c00:	200335f8 	.word	0x200335f8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010c04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c08:	4413      	add	r3, r2
 8010c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c0c:	8911      	ldrh	r1, [r2, #8]
 8010c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c10:	8992      	ldrh	r2, [r2, #12]
 8010c12:	0952      	lsrs	r2, r2, #5
 8010c14:	b292      	uxth	r2, r2
 8010c16:	fbb1 f2f2 	udiv	r2, r1, r2
 8010c1a:	b292      	uxth	r2, r2
 8010c1c:	4413      	add	r3, r2
 8010c1e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d201      	bcs.n	8010c2c <find_volume+0x314>
 8010c28:	230d      	movs	r3, #13
 8010c2a:	e0f1      	b.n	8010e10 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c34:	8952      	ldrh	r2, [r2, #10]
 8010c36:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c3a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d101      	bne.n	8010c46 <find_volume+0x32e>
 8010c42:	230d      	movs	r3, #13
 8010c44:	e0e4      	b.n	8010e10 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010c46:	2303      	movs	r3, #3
 8010c48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d802      	bhi.n	8010c5c <find_volume+0x344>
 8010c56:	2302      	movs	r3, #2
 8010c58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d802      	bhi.n	8010c6c <find_volume+0x354>
 8010c66:	2301      	movs	r3, #1
 8010c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6e:	1c9a      	adds	r2, r3, #2
 8010c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c72:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c78:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010c7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c7e:	441a      	add	r2, r3
 8010c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c82:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010c84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c88:	441a      	add	r2, r3
 8010c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c92:	2b03      	cmp	r3, #3
 8010c94:	d11e      	bne.n	8010cd4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c98:	3338      	adds	r3, #56	; 0x38
 8010c9a:	332a      	adds	r3, #42	; 0x2a
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fe fad1 	bl	800f244 <ld_word>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d001      	beq.n	8010cac <find_volume+0x394>
 8010ca8:	230d      	movs	r3, #13
 8010caa:	e0b1      	b.n	8010e10 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cae:	891b      	ldrh	r3, [r3, #8]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <find_volume+0x3a0>
 8010cb4:	230d      	movs	r3, #13
 8010cb6:	e0ab      	b.n	8010e10 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cba:	3338      	adds	r3, #56	; 0x38
 8010cbc:	332c      	adds	r3, #44	; 0x2c
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7fe fad8 	bl	800f274 <ld_dword>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ccc:	69db      	ldr	r3, [r3, #28]
 8010cce:	009b      	lsls	r3, r3, #2
 8010cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8010cd2:	e01f      	b.n	8010d14 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd6:	891b      	ldrh	r3, [r3, #8]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d101      	bne.n	8010ce0 <find_volume+0x3c8>
 8010cdc:	230d      	movs	r3, #13
 8010cde:	e097      	b.n	8010e10 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ce6:	441a      	add	r2, r3
 8010ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cea:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cf0:	2b02      	cmp	r3, #2
 8010cf2:	d103      	bne.n	8010cfc <find_volume+0x3e4>
 8010cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf6:	69db      	ldr	r3, [r3, #28]
 8010cf8:	005b      	lsls	r3, r3, #1
 8010cfa:	e00a      	b.n	8010d12 <find_volume+0x3fa>
 8010cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfe:	69da      	ldr	r2, [r3, #28]
 8010d00:	4613      	mov	r3, r2
 8010d02:	005b      	lsls	r3, r3, #1
 8010d04:	4413      	add	r3, r2
 8010d06:	085a      	lsrs	r2, r3, #1
 8010d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0a:	69db      	ldr	r3, [r3, #28]
 8010d0c:	f003 0301 	and.w	r3, r3, #1
 8010d10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010d12:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d16:	6a1a      	ldr	r2, [r3, #32]
 8010d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d1a:	899b      	ldrh	r3, [r3, #12]
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d20:	440b      	add	r3, r1
 8010d22:	3b01      	subs	r3, #1
 8010d24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d26:	8989      	ldrh	r1, [r1, #12]
 8010d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d201      	bcs.n	8010d34 <find_volume+0x41c>
 8010d30:	230d      	movs	r3, #13
 8010d32:	e06d      	b.n	8010e10 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d36:	f04f 32ff 	mov.w	r2, #4294967295
 8010d3a:	615a      	str	r2, [r3, #20]
 8010d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3e:	695a      	ldr	r2, [r3, #20]
 8010d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d42:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d46:	2280      	movs	r2, #128	; 0x80
 8010d48:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d4e:	2b03      	cmp	r3, #3
 8010d50:	d149      	bne.n	8010de6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d54:	3338      	adds	r3, #56	; 0x38
 8010d56:	3330      	adds	r3, #48	; 0x30
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fe fa73 	bl	800f244 <ld_word>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d140      	bne.n	8010de6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d66:	3301      	adds	r3, #1
 8010d68:	4619      	mov	r1, r3
 8010d6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d6c:	f7fe fd1a 	bl	800f7a4 <move_window>
 8010d70:	4603      	mov	r3, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d137      	bne.n	8010de6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d78:	2200      	movs	r2, #0
 8010d7a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d7e:	3338      	adds	r3, #56	; 0x38
 8010d80:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7fe fa5d 	bl	800f244 <ld_word>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d127      	bne.n	8010de6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d98:	3338      	adds	r3, #56	; 0x38
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7fe fa6a 	bl	800f274 <ld_dword>
 8010da0:	4602      	mov	r2, r0
 8010da2:	4b1d      	ldr	r3, [pc, #116]	; (8010e18 <find_volume+0x500>)
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d11e      	bne.n	8010de6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	3338      	adds	r3, #56	; 0x38
 8010dac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7fe fa5f 	bl	800f274 <ld_dword>
 8010db6:	4602      	mov	r2, r0
 8010db8:	4b18      	ldr	r3, [pc, #96]	; (8010e1c <find_volume+0x504>)
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d113      	bne.n	8010de6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc0:	3338      	adds	r3, #56	; 0x38
 8010dc2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fe fa54 	bl	800f274 <ld_dword>
 8010dcc:	4602      	mov	r2, r0
 8010dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd4:	3338      	adds	r3, #56	; 0x38
 8010dd6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fe fa4a 	bl	800f274 <ld_dword>
 8010de0:	4602      	mov	r2, r0
 8010de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010dec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010dee:	4b0c      	ldr	r3, [pc, #48]	; (8010e20 <find_volume+0x508>)
 8010df0:	881b      	ldrh	r3, [r3, #0]
 8010df2:	3301      	adds	r3, #1
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	4b0a      	ldr	r3, [pc, #40]	; (8010e20 <find_volume+0x508>)
 8010df8:	801a      	strh	r2, [r3, #0]
 8010dfa:	4b09      	ldr	r3, [pc, #36]	; (8010e20 <find_volume+0x508>)
 8010dfc:	881a      	ldrh	r2, [r3, #0]
 8010dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e00:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e04:	2200      	movs	r2, #0
 8010e06:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010e08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010e0a:	f7fe fc63 	bl	800f6d4 <clear_lock>
#endif
	return FR_OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3758      	adds	r7, #88	; 0x58
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	41615252 	.word	0x41615252
 8010e1c:	61417272 	.word	0x61417272
 8010e20:	200335fc 	.word	0x200335fc

08010e24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
 8010e2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010e2e:	2309      	movs	r3, #9
 8010e30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d01c      	beq.n	8010e72 <validate+0x4e>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d018      	beq.n	8010e72 <validate+0x4e>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d013      	beq.n	8010e72 <validate+0x4e>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	889a      	ldrh	r2, [r3, #4]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	88db      	ldrh	r3, [r3, #6]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d10c      	bne.n	8010e72 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	785b      	ldrb	r3, [r3, #1]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fe f952 	bl	800f108 <disk_status>
 8010e64:	4603      	mov	r3, r0
 8010e66:	f003 0301 	and.w	r3, r3, #1
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d101      	bne.n	8010e72 <validate+0x4e>
			res = FR_OK;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010e72:	7bfb      	ldrb	r3, [r7, #15]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d102      	bne.n	8010e7e <validate+0x5a>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	e000      	b.n	8010e80 <validate+0x5c>
 8010e7e:	2300      	movs	r3, #0
 8010e80:	683a      	ldr	r2, [r7, #0]
 8010e82:	6013      	str	r3, [r2, #0]
	return res;
 8010e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3710      	adds	r7, #16
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
	...

08010e90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b088      	sub	sp, #32
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	60f8      	str	r0, [r7, #12]
 8010e98:	60b9      	str	r1, [r7, #8]
 8010e9a:	4613      	mov	r3, r2
 8010e9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010ea2:	f107 0310 	add.w	r3, r7, #16
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7ff fc9b 	bl	80107e2 <get_ldnumber>
 8010eac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010eae:	69fb      	ldr	r3, [r7, #28]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	da01      	bge.n	8010eb8 <f_mount+0x28>
 8010eb4:	230b      	movs	r3, #11
 8010eb6:	e02b      	b.n	8010f10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010eb8:	4a17      	ldr	r2, [pc, #92]	; (8010f18 <f_mount+0x88>)
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ec0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010ec2:	69bb      	ldr	r3, [r7, #24]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d005      	beq.n	8010ed4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010ec8:	69b8      	ldr	r0, [r7, #24]
 8010eca:	f7fe fc03 	bl	800f6d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d002      	beq.n	8010ee0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2200      	movs	r2, #0
 8010ede:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010ee0:	68fa      	ldr	r2, [r7, #12]
 8010ee2:	490d      	ldr	r1, [pc, #52]	; (8010f18 <f_mount+0x88>)
 8010ee4:	69fb      	ldr	r3, [r7, #28]
 8010ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d002      	beq.n	8010ef6 <f_mount+0x66>
 8010ef0:	79fb      	ldrb	r3, [r7, #7]
 8010ef2:	2b01      	cmp	r3, #1
 8010ef4:	d001      	beq.n	8010efa <f_mount+0x6a>
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	e00a      	b.n	8010f10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010efa:	f107 010c 	add.w	r1, r7, #12
 8010efe:	f107 0308 	add.w	r3, r7, #8
 8010f02:	2200      	movs	r2, #0
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7ff fd07 	bl	8010918 <find_volume>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3720      	adds	r7, #32
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	200335f8 	.word	0x200335f8

08010f1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b098      	sub	sp, #96	; 0x60
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	60f8      	str	r0, [r7, #12]
 8010f24:	60b9      	str	r1, [r7, #8]
 8010f26:	4613      	mov	r3, r2
 8010f28:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d101      	bne.n	8010f34 <f_open+0x18>
 8010f30:	2309      	movs	r3, #9
 8010f32:	e1ba      	b.n	80112aa <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010f34:	79fb      	ldrb	r3, [r7, #7]
 8010f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f3a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010f3c:	79fa      	ldrb	r2, [r7, #7]
 8010f3e:	f107 0110 	add.w	r1, r7, #16
 8010f42:	f107 0308 	add.w	r3, r7, #8
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff fce6 	bl	8010918 <find_volume>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010f52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f040 819e 	bne.w	8011298 <f_open+0x37c>
		dj.obj.fs = fs;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010f60:	68ba      	ldr	r2, [r7, #8]
 8010f62:	f107 0314 	add.w	r3, r7, #20
 8010f66:	4611      	mov	r1, r2
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7ff fba5 	bl	80106b8 <follow_path>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010f74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d11a      	bne.n	8010fb2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010f7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f80:	b25b      	sxtb	r3, r3
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	da03      	bge.n	8010f8e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010f86:	2306      	movs	r3, #6
 8010f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010f8c:	e011      	b.n	8010fb2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010f8e:	79fb      	ldrb	r3, [r7, #7]
 8010f90:	f023 0301 	bic.w	r3, r3, #1
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	bf14      	ite	ne
 8010f98:	2301      	movne	r3, #1
 8010f9a:	2300      	moveq	r3, #0
 8010f9c:	b2db      	uxtb	r3, r3
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	f107 0314 	add.w	r3, r7, #20
 8010fa4:	4611      	mov	r1, r2
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fe fa4c 	bl	800f444 <chk_lock>
 8010fac:	4603      	mov	r3, r0
 8010fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010fb2:	79fb      	ldrb	r3, [r7, #7]
 8010fb4:	f003 031c 	and.w	r3, r3, #28
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d07e      	beq.n	80110ba <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d017      	beq.n	8010ff4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010fc8:	2b04      	cmp	r3, #4
 8010fca:	d10e      	bne.n	8010fea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010fcc:	f7fe fa96 	bl	800f4fc <enq_lock>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d006      	beq.n	8010fe4 <f_open+0xc8>
 8010fd6:	f107 0314 	add.w	r3, r7, #20
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7ff fa52 	bl	8010484 <dir_register>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	e000      	b.n	8010fe6 <f_open+0xca>
 8010fe4:	2312      	movs	r3, #18
 8010fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010fea:	79fb      	ldrb	r3, [r7, #7]
 8010fec:	f043 0308 	orr.w	r3, r3, #8
 8010ff0:	71fb      	strb	r3, [r7, #7]
 8010ff2:	e010      	b.n	8011016 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010ff4:	7ebb      	ldrb	r3, [r7, #26]
 8010ff6:	f003 0311 	and.w	r3, r3, #17
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d003      	beq.n	8011006 <f_open+0xea>
					res = FR_DENIED;
 8010ffe:	2307      	movs	r3, #7
 8011000:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011004:	e007      	b.n	8011016 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011006:	79fb      	ldrb	r3, [r7, #7]
 8011008:	f003 0304 	and.w	r3, r3, #4
 801100c:	2b00      	cmp	r3, #0
 801100e:	d002      	beq.n	8011016 <f_open+0xfa>
 8011010:	2308      	movs	r3, #8
 8011012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801101a:	2b00      	cmp	r3, #0
 801101c:	d167      	bne.n	80110ee <f_open+0x1d2>
 801101e:	79fb      	ldrb	r3, [r7, #7]
 8011020:	f003 0308 	and.w	r3, r3, #8
 8011024:	2b00      	cmp	r3, #0
 8011026:	d062      	beq.n	80110ee <f_open+0x1d2>
				dw = GET_FATTIME();
 8011028:	4ba2      	ldr	r3, [pc, #648]	; (80112b4 <f_open+0x398>)
 801102a:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801102c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801102e:	330e      	adds	r3, #14
 8011030:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011032:	4618      	mov	r0, r3
 8011034:	f7fe f95c 	bl	800f2f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801103a:	3316      	adds	r3, #22
 801103c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801103e:	4618      	mov	r0, r3
 8011040:	f7fe f956 	bl	800f2f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011046:	330b      	adds	r3, #11
 8011048:	2220      	movs	r2, #32
 801104a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801104c:	693b      	ldr	r3, [r7, #16]
 801104e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011050:	4611      	mov	r1, r2
 8011052:	4618      	mov	r0, r3
 8011054:	f7ff f925 	bl	80102a2 <ld_clust>
 8011058:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801105e:	2200      	movs	r2, #0
 8011060:	4618      	mov	r0, r3
 8011062:	f7ff f93d 	bl	80102e0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011068:	331c      	adds	r3, #28
 801106a:	2100      	movs	r1, #0
 801106c:	4618      	mov	r0, r3
 801106e:	f7fe f93f 	bl	800f2f0 <st_dword>
					fs->wflag = 1;
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	2201      	movs	r2, #1
 8011076:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801107a:	2b00      	cmp	r3, #0
 801107c:	d037      	beq.n	80110ee <f_open+0x1d2>
						dw = fs->winsect;
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011082:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011084:	f107 0314 	add.w	r3, r7, #20
 8011088:	2200      	movs	r2, #0
 801108a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801108c:	4618      	mov	r0, r3
 801108e:	f7fe fe2d 	bl	800fcec <remove_chain>
 8011092:	4603      	mov	r3, r0
 8011094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801109c:	2b00      	cmp	r3, #0
 801109e:	d126      	bne.n	80110ee <f_open+0x1d2>
							res = move_window(fs, dw);
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fe fb7d 	bl	800f7a4 <move_window>
 80110aa:	4603      	mov	r3, r0
 80110ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80110b4:	3a01      	subs	r2, #1
 80110b6:	611a      	str	r2, [r3, #16]
 80110b8:	e019      	b.n	80110ee <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80110ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d115      	bne.n	80110ee <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80110c2:	7ebb      	ldrb	r3, [r7, #26]
 80110c4:	f003 0310 	and.w	r3, r3, #16
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d003      	beq.n	80110d4 <f_open+0x1b8>
					res = FR_NO_FILE;
 80110cc:	2304      	movs	r3, #4
 80110ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80110d2:	e00c      	b.n	80110ee <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80110d4:	79fb      	ldrb	r3, [r7, #7]
 80110d6:	f003 0302 	and.w	r3, r3, #2
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d007      	beq.n	80110ee <f_open+0x1d2>
 80110de:	7ebb      	ldrb	r3, [r7, #26]
 80110e0:	f003 0301 	and.w	r3, r3, #1
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d002      	beq.n	80110ee <f_open+0x1d2>
						res = FR_DENIED;
 80110e8:	2307      	movs	r3, #7
 80110ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80110ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d128      	bne.n	8011148 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80110f6:	79fb      	ldrb	r3, [r7, #7]
 80110f8:	f003 0308 	and.w	r3, r3, #8
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d003      	beq.n	8011108 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8011100:	79fb      	ldrb	r3, [r7, #7]
 8011102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011106:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011116:	79fb      	ldrb	r3, [r7, #7]
 8011118:	f023 0301 	bic.w	r3, r3, #1
 801111c:	2b00      	cmp	r3, #0
 801111e:	bf14      	ite	ne
 8011120:	2301      	movne	r3, #1
 8011122:	2300      	moveq	r3, #0
 8011124:	b2db      	uxtb	r3, r3
 8011126:	461a      	mov	r2, r3
 8011128:	f107 0314 	add.w	r3, r7, #20
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f7fe fa06 	bl	800f540 <inc_lock>
 8011134:	4602      	mov	r2, r0
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	691b      	ldr	r3, [r3, #16]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d102      	bne.n	8011148 <f_open+0x22c>
 8011142:	2302      	movs	r3, #2
 8011144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801114c:	2b00      	cmp	r3, #0
 801114e:	f040 80a3 	bne.w	8011298 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011156:	4611      	mov	r1, r2
 8011158:	4618      	mov	r0, r3
 801115a:	f7ff f8a2 	bl	80102a2 <ld_clust>
 801115e:	4602      	mov	r2, r0
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011166:	331c      	adds	r3, #28
 8011168:	4618      	mov	r0, r3
 801116a:	f7fe f883 	bl	800f274 <ld_dword>
 801116e:	4602      	mov	r2, r0
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2200      	movs	r2, #0
 8011178:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801117a:	693a      	ldr	r2, [r7, #16]
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	88da      	ldrh	r2, [r3, #6]
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	79fa      	ldrb	r2, [r7, #7]
 801118c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2200      	movs	r2, #0
 8011192:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2200      	movs	r2, #0
 8011198:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2200      	movs	r2, #0
 801119e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	3330      	adds	r3, #48	; 0x30
 80111a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80111a8:	2100      	movs	r1, #0
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fe f8ed 	bl	800f38a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80111b0:	79fb      	ldrb	r3, [r7, #7]
 80111b2:	f003 0320 	and.w	r3, r3, #32
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d06e      	beq.n	8011298 <f_open+0x37c>
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d06a      	beq.n	8011298 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	68da      	ldr	r2, [r3, #12]
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	895b      	ldrh	r3, [r3, #10]
 80111ce:	461a      	mov	r2, r3
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	899b      	ldrh	r3, [r3, #12]
 80111d4:	fb03 f302 	mul.w	r3, r3, r2
 80111d8:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	689b      	ldr	r3, [r3, #8]
 80111de:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	657b      	str	r3, [r7, #84]	; 0x54
 80111e6:	e016      	b.n	8011216 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7fe fb96 	bl	800f91e <get_fat>
 80111f2:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80111f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80111f6:	2b01      	cmp	r3, #1
 80111f8:	d802      	bhi.n	8011200 <f_open+0x2e4>
 80111fa:	2302      	movs	r3, #2
 80111fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011206:	d102      	bne.n	801120e <f_open+0x2f2>
 8011208:	2301      	movs	r3, #1
 801120a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801120e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011212:	1ad3      	subs	r3, r2, r3
 8011214:	657b      	str	r3, [r7, #84]	; 0x54
 8011216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801121a:	2b00      	cmp	r3, #0
 801121c:	d103      	bne.n	8011226 <f_open+0x30a>
 801121e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011222:	429a      	cmp	r2, r3
 8011224:	d8e0      	bhi.n	80111e8 <f_open+0x2cc>
				}
				fp->clust = clst;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801122a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801122c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011230:	2b00      	cmp	r3, #0
 8011232:	d131      	bne.n	8011298 <f_open+0x37c>
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	899b      	ldrh	r3, [r3, #12]
 8011238:	461a      	mov	r2, r3
 801123a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801123c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011240:	fb02 f201 	mul.w	r2, r2, r1
 8011244:	1a9b      	subs	r3, r3, r2
 8011246:	2b00      	cmp	r3, #0
 8011248:	d026      	beq.n	8011298 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801124e:	4618      	mov	r0, r3
 8011250:	f7fe fb46 	bl	800f8e0 <clust2sect>
 8011254:	6478      	str	r0, [r7, #68]	; 0x44
 8011256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011258:	2b00      	cmp	r3, #0
 801125a:	d103      	bne.n	8011264 <f_open+0x348>
						res = FR_INT_ERR;
 801125c:	2302      	movs	r3, #2
 801125e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011262:	e019      	b.n	8011298 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	899b      	ldrh	r3, [r3, #12]
 8011268:	461a      	mov	r2, r3
 801126a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801126c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011272:	441a      	add	r2, r3
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011278:	693b      	ldr	r3, [r7, #16]
 801127a:	7858      	ldrb	r0, [r3, #1]
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	6a1a      	ldr	r2, [r3, #32]
 8011286:	2301      	movs	r3, #1
 8011288:	f7fd ff7e 	bl	800f188 <disk_read>
 801128c:	4603      	mov	r3, r0
 801128e:	2b00      	cmp	r3, #0
 8011290:	d002      	beq.n	8011298 <f_open+0x37c>
 8011292:	2301      	movs	r3, #1
 8011294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801129c:	2b00      	cmp	r3, #0
 801129e:	d002      	beq.n	80112a6 <f_open+0x38a>
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2200      	movs	r2, #0
 80112a4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80112a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3760      	adds	r7, #96	; 0x60
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	274a0000 	.word	0x274a0000

080112b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b08e      	sub	sp, #56	; 0x38
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
 80112c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	2200      	movs	r2, #0
 80112ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	f107 0214 	add.w	r2, r7, #20
 80112d6:	4611      	mov	r1, r2
 80112d8:	4618      	mov	r0, r3
 80112da:	f7ff fda3 	bl	8010e24 <validate>
 80112de:	4603      	mov	r3, r0
 80112e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80112e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d107      	bne.n	80112fc <f_read+0x44>
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	7d5b      	ldrb	r3, [r3, #21]
 80112f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80112f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d002      	beq.n	8011302 <f_read+0x4a>
 80112fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011300:	e135      	b.n	801156e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	7d1b      	ldrb	r3, [r3, #20]
 8011306:	f003 0301 	and.w	r3, r3, #1
 801130a:	2b00      	cmp	r3, #0
 801130c:	d101      	bne.n	8011312 <f_read+0x5a>
 801130e:	2307      	movs	r3, #7
 8011310:	e12d      	b.n	801156e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	68da      	ldr	r2, [r3, #12]
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	699b      	ldr	r3, [r3, #24]
 801131a:	1ad3      	subs	r3, r2, r3
 801131c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	6a3b      	ldr	r3, [r7, #32]
 8011322:	429a      	cmp	r2, r3
 8011324:	f240 811e 	bls.w	8011564 <f_read+0x2ac>
 8011328:	6a3b      	ldr	r3, [r7, #32]
 801132a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801132c:	e11a      	b.n	8011564 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	699b      	ldr	r3, [r3, #24]
 8011332:	697a      	ldr	r2, [r7, #20]
 8011334:	8992      	ldrh	r2, [r2, #12]
 8011336:	fbb3 f1f2 	udiv	r1, r3, r2
 801133a:	fb02 f201 	mul.w	r2, r2, r1
 801133e:	1a9b      	subs	r3, r3, r2
 8011340:	2b00      	cmp	r3, #0
 8011342:	f040 80d5 	bne.w	80114f0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	699b      	ldr	r3, [r3, #24]
 801134a:	697a      	ldr	r2, [r7, #20]
 801134c:	8992      	ldrh	r2, [r2, #12]
 801134e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011352:	697a      	ldr	r2, [r7, #20]
 8011354:	8952      	ldrh	r2, [r2, #10]
 8011356:	3a01      	subs	r2, #1
 8011358:	4013      	ands	r3, r2
 801135a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d12f      	bne.n	80113c2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	699b      	ldr	r3, [r3, #24]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d103      	bne.n	8011372 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	689b      	ldr	r3, [r3, #8]
 801136e:	633b      	str	r3, [r7, #48]	; 0x30
 8011370:	e013      	b.n	801139a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011376:	2b00      	cmp	r3, #0
 8011378:	d007      	beq.n	801138a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	699b      	ldr	r3, [r3, #24]
 801137e:	4619      	mov	r1, r3
 8011380:	68f8      	ldr	r0, [r7, #12]
 8011382:	f7fe fdb0 	bl	800fee6 <clmt_clust>
 8011386:	6338      	str	r0, [r7, #48]	; 0x30
 8011388:	e007      	b.n	801139a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801138a:	68fa      	ldr	r2, [r7, #12]
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	69db      	ldr	r3, [r3, #28]
 8011390:	4619      	mov	r1, r3
 8011392:	4610      	mov	r0, r2
 8011394:	f7fe fac3 	bl	800f91e <get_fat>
 8011398:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801139c:	2b01      	cmp	r3, #1
 801139e:	d804      	bhi.n	80113aa <f_read+0xf2>
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2202      	movs	r2, #2
 80113a4:	755a      	strb	r2, [r3, #21]
 80113a6:	2302      	movs	r3, #2
 80113a8:	e0e1      	b.n	801156e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80113aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113b0:	d104      	bne.n	80113bc <f_read+0x104>
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2201      	movs	r2, #1
 80113b6:	755a      	strb	r2, [r3, #21]
 80113b8:	2301      	movs	r3, #1
 80113ba:	e0d8      	b.n	801156e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80113c2:	697a      	ldr	r2, [r7, #20]
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	69db      	ldr	r3, [r3, #28]
 80113c8:	4619      	mov	r1, r3
 80113ca:	4610      	mov	r0, r2
 80113cc:	f7fe fa88 	bl	800f8e0 <clust2sect>
 80113d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d104      	bne.n	80113e2 <f_read+0x12a>
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	2202      	movs	r2, #2
 80113dc:	755a      	strb	r2, [r3, #21]
 80113de:	2302      	movs	r3, #2
 80113e0:	e0c5      	b.n	801156e <f_read+0x2b6>
			sect += csect;
 80113e2:	69ba      	ldr	r2, [r7, #24]
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	4413      	add	r3, r2
 80113e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	899b      	ldrh	r3, [r3, #12]
 80113ee:	461a      	mov	r2, r3
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80113f6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80113f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d041      	beq.n	8011482 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80113fe:	69fa      	ldr	r2, [r7, #28]
 8011400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011402:	4413      	add	r3, r2
 8011404:	697a      	ldr	r2, [r7, #20]
 8011406:	8952      	ldrh	r2, [r2, #10]
 8011408:	4293      	cmp	r3, r2
 801140a:	d905      	bls.n	8011418 <f_read+0x160>
					cc = fs->csize - csect;
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	895b      	ldrh	r3, [r3, #10]
 8011410:	461a      	mov	r2, r3
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	1ad3      	subs	r3, r2, r3
 8011416:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	7858      	ldrb	r0, [r3, #1]
 801141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141e:	69ba      	ldr	r2, [r7, #24]
 8011420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011422:	f7fd feb1 	bl	800f188 <disk_read>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d004      	beq.n	8011436 <f_read+0x17e>
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	2201      	movs	r2, #1
 8011430:	755a      	strb	r2, [r3, #21]
 8011432:	2301      	movs	r3, #1
 8011434:	e09b      	b.n	801156e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	7d1b      	ldrb	r3, [r3, #20]
 801143a:	b25b      	sxtb	r3, r3
 801143c:	2b00      	cmp	r3, #0
 801143e:	da18      	bge.n	8011472 <f_read+0x1ba>
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	6a1a      	ldr	r2, [r3, #32]
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	1ad3      	subs	r3, r2, r3
 8011448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801144a:	429a      	cmp	r2, r3
 801144c:	d911      	bls.n	8011472 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	6a1a      	ldr	r2, [r3, #32]
 8011452:	69bb      	ldr	r3, [r7, #24]
 8011454:	1ad3      	subs	r3, r2, r3
 8011456:	697a      	ldr	r2, [r7, #20]
 8011458:	8992      	ldrh	r2, [r2, #12]
 801145a:	fb02 f303 	mul.w	r3, r2, r3
 801145e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011460:	18d0      	adds	r0, r2, r3
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	899b      	ldrh	r3, [r3, #12]
 801146c:	461a      	mov	r2, r3
 801146e:	f7fd ff6b 	bl	800f348 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	899b      	ldrh	r3, [r3, #12]
 8011476:	461a      	mov	r2, r3
 8011478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147a:	fb02 f303 	mul.w	r3, r2, r3
 801147e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011480:	e05c      	b.n	801153c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	6a1b      	ldr	r3, [r3, #32]
 8011486:	69ba      	ldr	r2, [r7, #24]
 8011488:	429a      	cmp	r2, r3
 801148a:	d02e      	beq.n	80114ea <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	7d1b      	ldrb	r3, [r3, #20]
 8011490:	b25b      	sxtb	r3, r3
 8011492:	2b00      	cmp	r3, #0
 8011494:	da18      	bge.n	80114c8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	7858      	ldrb	r0, [r3, #1]
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	6a1a      	ldr	r2, [r3, #32]
 80114a4:	2301      	movs	r3, #1
 80114a6:	f7fd fe8f 	bl	800f1c8 <disk_write>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d004      	beq.n	80114ba <f_read+0x202>
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2201      	movs	r2, #1
 80114b4:	755a      	strb	r2, [r3, #21]
 80114b6:	2301      	movs	r3, #1
 80114b8:	e059      	b.n	801156e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	7d1b      	ldrb	r3, [r3, #20]
 80114be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114c2:	b2da      	uxtb	r2, r3
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	7858      	ldrb	r0, [r3, #1]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80114d2:	2301      	movs	r3, #1
 80114d4:	69ba      	ldr	r2, [r7, #24]
 80114d6:	f7fd fe57 	bl	800f188 <disk_read>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d004      	beq.n	80114ea <f_read+0x232>
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2201      	movs	r2, #1
 80114e4:	755a      	strb	r2, [r3, #21]
 80114e6:	2301      	movs	r3, #1
 80114e8:	e041      	b.n	801156e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	69ba      	ldr	r2, [r7, #24]
 80114ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	899b      	ldrh	r3, [r3, #12]
 80114f4:	4618      	mov	r0, r3
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	699b      	ldr	r3, [r3, #24]
 80114fa:	697a      	ldr	r2, [r7, #20]
 80114fc:	8992      	ldrh	r2, [r2, #12]
 80114fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8011502:	fb02 f201 	mul.w	r2, r2, r1
 8011506:	1a9b      	subs	r3, r3, r2
 8011508:	1ac3      	subs	r3, r0, r3
 801150a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801150c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	429a      	cmp	r2, r3
 8011512:	d901      	bls.n	8011518 <f_read+0x260>
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	699b      	ldr	r3, [r3, #24]
 8011522:	697a      	ldr	r2, [r7, #20]
 8011524:	8992      	ldrh	r2, [r2, #12]
 8011526:	fbb3 f0f2 	udiv	r0, r3, r2
 801152a:	fb02 f200 	mul.w	r2, r2, r0
 801152e:	1a9b      	subs	r3, r3, r2
 8011530:	440b      	add	r3, r1
 8011532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011534:	4619      	mov	r1, r3
 8011536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011538:	f7fd ff06 	bl	800f348 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801153c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011540:	4413      	add	r3, r2
 8011542:	627b      	str	r3, [r7, #36]	; 0x24
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	699a      	ldr	r2, [r3, #24]
 8011548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154a:	441a      	add	r2, r3
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	619a      	str	r2, [r3, #24]
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011556:	441a      	add	r2, r3
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	601a      	str	r2, [r3, #0]
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	f47f aee1 	bne.w	801132e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801156c:	2300      	movs	r3, #0
}
 801156e:	4618      	mov	r0, r3
 8011570:	3738      	adds	r7, #56	; 0x38
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011576:	b580      	push	{r7, lr}
 8011578:	b08c      	sub	sp, #48	; 0x30
 801157a:	af00      	add	r7, sp, #0
 801157c:	60f8      	str	r0, [r7, #12]
 801157e:	60b9      	str	r1, [r7, #8]
 8011580:	607a      	str	r2, [r7, #4]
 8011582:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	2200      	movs	r2, #0
 801158c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f107 0210 	add.w	r2, r7, #16
 8011594:	4611      	mov	r1, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff fc44 	bl	8010e24 <validate>
 801159c:	4603      	mov	r3, r0
 801159e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80115a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d107      	bne.n	80115ba <f_write+0x44>
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	7d5b      	ldrb	r3, [r3, #21]
 80115ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80115b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d002      	beq.n	80115c0 <f_write+0x4a>
 80115ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115be:	e16a      	b.n	8011896 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	7d1b      	ldrb	r3, [r3, #20]
 80115c4:	f003 0302 	and.w	r3, r3, #2
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d101      	bne.n	80115d0 <f_write+0x5a>
 80115cc:	2307      	movs	r3, #7
 80115ce:	e162      	b.n	8011896 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	699a      	ldr	r2, [r3, #24]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	441a      	add	r2, r3
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	699b      	ldr	r3, [r3, #24]
 80115dc:	429a      	cmp	r2, r3
 80115de:	f080 814c 	bcs.w	801187a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	699b      	ldr	r3, [r3, #24]
 80115e6:	43db      	mvns	r3, r3
 80115e8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80115ea:	e146      	b.n	801187a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	699b      	ldr	r3, [r3, #24]
 80115f0:	693a      	ldr	r2, [r7, #16]
 80115f2:	8992      	ldrh	r2, [r2, #12]
 80115f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80115f8:	fb02 f201 	mul.w	r2, r2, r1
 80115fc:	1a9b      	subs	r3, r3, r2
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f040 80f1 	bne.w	80117e6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	699b      	ldr	r3, [r3, #24]
 8011608:	693a      	ldr	r2, [r7, #16]
 801160a:	8992      	ldrh	r2, [r2, #12]
 801160c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011610:	693a      	ldr	r2, [r7, #16]
 8011612:	8952      	ldrh	r2, [r2, #10]
 8011614:	3a01      	subs	r2, #1
 8011616:	4013      	ands	r3, r2
 8011618:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801161a:	69bb      	ldr	r3, [r7, #24]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d143      	bne.n	80116a8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	699b      	ldr	r3, [r3, #24]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d10c      	bne.n	8011642 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	689b      	ldr	r3, [r3, #8]
 801162c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011630:	2b00      	cmp	r3, #0
 8011632:	d11a      	bne.n	801166a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	2100      	movs	r1, #0
 8011638:	4618      	mov	r0, r3
 801163a:	f7fe fbbc 	bl	800fdb6 <create_chain>
 801163e:	62b8      	str	r0, [r7, #40]	; 0x28
 8011640:	e013      	b.n	801166a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011646:	2b00      	cmp	r3, #0
 8011648:	d007      	beq.n	801165a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	699b      	ldr	r3, [r3, #24]
 801164e:	4619      	mov	r1, r3
 8011650:	68f8      	ldr	r0, [r7, #12]
 8011652:	f7fe fc48 	bl	800fee6 <clmt_clust>
 8011656:	62b8      	str	r0, [r7, #40]	; 0x28
 8011658:	e007      	b.n	801166a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801165a:	68fa      	ldr	r2, [r7, #12]
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	69db      	ldr	r3, [r3, #28]
 8011660:	4619      	mov	r1, r3
 8011662:	4610      	mov	r0, r2
 8011664:	f7fe fba7 	bl	800fdb6 <create_chain>
 8011668:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166c:	2b00      	cmp	r3, #0
 801166e:	f000 8109 	beq.w	8011884 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011674:	2b01      	cmp	r3, #1
 8011676:	d104      	bne.n	8011682 <f_write+0x10c>
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2202      	movs	r2, #2
 801167c:	755a      	strb	r2, [r3, #21]
 801167e:	2302      	movs	r3, #2
 8011680:	e109      	b.n	8011896 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011688:	d104      	bne.n	8011694 <f_write+0x11e>
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2201      	movs	r2, #1
 801168e:	755a      	strb	r2, [r3, #21]
 8011690:	2301      	movs	r3, #1
 8011692:	e100      	b.n	8011896 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011698:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	689b      	ldr	r3, [r3, #8]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d102      	bne.n	80116a8 <f_write+0x132>
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116a6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	7d1b      	ldrb	r3, [r3, #20]
 80116ac:	b25b      	sxtb	r3, r3
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	da18      	bge.n	80116e4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	7858      	ldrb	r0, [r3, #1]
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	6a1a      	ldr	r2, [r3, #32]
 80116c0:	2301      	movs	r3, #1
 80116c2:	f7fd fd81 	bl	800f1c8 <disk_write>
 80116c6:	4603      	mov	r3, r0
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d004      	beq.n	80116d6 <f_write+0x160>
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2201      	movs	r2, #1
 80116d0:	755a      	strb	r2, [r3, #21]
 80116d2:	2301      	movs	r3, #1
 80116d4:	e0df      	b.n	8011896 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	7d1b      	ldrb	r3, [r3, #20]
 80116da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116de:	b2da      	uxtb	r2, r3
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80116e4:	693a      	ldr	r2, [r7, #16]
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	69db      	ldr	r3, [r3, #28]
 80116ea:	4619      	mov	r1, r3
 80116ec:	4610      	mov	r0, r2
 80116ee:	f7fe f8f7 	bl	800f8e0 <clust2sect>
 80116f2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d104      	bne.n	8011704 <f_write+0x18e>
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	2202      	movs	r2, #2
 80116fe:	755a      	strb	r2, [r3, #21]
 8011700:	2302      	movs	r3, #2
 8011702:	e0c8      	b.n	8011896 <f_write+0x320>
			sect += csect;
 8011704:	697a      	ldr	r2, [r7, #20]
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	4413      	add	r3, r2
 801170a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	899b      	ldrh	r3, [r3, #12]
 8011710:	461a      	mov	r2, r3
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	fbb3 f3f2 	udiv	r3, r3, r2
 8011718:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801171a:	6a3b      	ldr	r3, [r7, #32]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d043      	beq.n	80117a8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011720:	69ba      	ldr	r2, [r7, #24]
 8011722:	6a3b      	ldr	r3, [r7, #32]
 8011724:	4413      	add	r3, r2
 8011726:	693a      	ldr	r2, [r7, #16]
 8011728:	8952      	ldrh	r2, [r2, #10]
 801172a:	4293      	cmp	r3, r2
 801172c:	d905      	bls.n	801173a <f_write+0x1c4>
					cc = fs->csize - csect;
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	895b      	ldrh	r3, [r3, #10]
 8011732:	461a      	mov	r2, r3
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	7858      	ldrb	r0, [r3, #1]
 801173e:	6a3b      	ldr	r3, [r7, #32]
 8011740:	697a      	ldr	r2, [r7, #20]
 8011742:	69f9      	ldr	r1, [r7, #28]
 8011744:	f7fd fd40 	bl	800f1c8 <disk_write>
 8011748:	4603      	mov	r3, r0
 801174a:	2b00      	cmp	r3, #0
 801174c:	d004      	beq.n	8011758 <f_write+0x1e2>
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2201      	movs	r2, #1
 8011752:	755a      	strb	r2, [r3, #21]
 8011754:	2301      	movs	r3, #1
 8011756:	e09e      	b.n	8011896 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	6a1a      	ldr	r2, [r3, #32]
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	6a3a      	ldr	r2, [r7, #32]
 8011762:	429a      	cmp	r2, r3
 8011764:	d918      	bls.n	8011798 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	6a1a      	ldr	r2, [r3, #32]
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	1ad3      	subs	r3, r2, r3
 8011774:	693a      	ldr	r2, [r7, #16]
 8011776:	8992      	ldrh	r2, [r2, #12]
 8011778:	fb02 f303 	mul.w	r3, r2, r3
 801177c:	69fa      	ldr	r2, [r7, #28]
 801177e:	18d1      	adds	r1, r2, r3
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	899b      	ldrh	r3, [r3, #12]
 8011784:	461a      	mov	r2, r3
 8011786:	f7fd fddf 	bl	800f348 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	7d1b      	ldrb	r3, [r3, #20]
 801178e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011792:	b2da      	uxtb	r2, r3
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	899b      	ldrh	r3, [r3, #12]
 801179c:	461a      	mov	r2, r3
 801179e:	6a3b      	ldr	r3, [r7, #32]
 80117a0:	fb02 f303 	mul.w	r3, r2, r3
 80117a4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80117a6:	e04b      	b.n	8011840 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6a1b      	ldr	r3, [r3, #32]
 80117ac:	697a      	ldr	r2, [r7, #20]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d016      	beq.n	80117e0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	699a      	ldr	r2, [r3, #24]
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d210      	bcs.n	80117e0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	7858      	ldrb	r0, [r3, #1]
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117c8:	2301      	movs	r3, #1
 80117ca:	697a      	ldr	r2, [r7, #20]
 80117cc:	f7fd fcdc 	bl	800f188 <disk_read>
 80117d0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d004      	beq.n	80117e0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	2201      	movs	r2, #1
 80117da:	755a      	strb	r2, [r3, #21]
 80117dc:	2301      	movs	r3, #1
 80117de:	e05a      	b.n	8011896 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	697a      	ldr	r2, [r7, #20]
 80117e4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	899b      	ldrh	r3, [r3, #12]
 80117ea:	4618      	mov	r0, r3
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	699b      	ldr	r3, [r3, #24]
 80117f0:	693a      	ldr	r2, [r7, #16]
 80117f2:	8992      	ldrh	r2, [r2, #12]
 80117f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80117f8:	fb02 f201 	mul.w	r2, r2, r1
 80117fc:	1a9b      	subs	r3, r3, r2
 80117fe:	1ac3      	subs	r3, r0, r3
 8011800:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	429a      	cmp	r2, r3
 8011808:	d901      	bls.n	801180e <f_write+0x298>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	699b      	ldr	r3, [r3, #24]
 8011818:	693a      	ldr	r2, [r7, #16]
 801181a:	8992      	ldrh	r2, [r2, #12]
 801181c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011820:	fb02 f200 	mul.w	r2, r2, r0
 8011824:	1a9b      	subs	r3, r3, r2
 8011826:	440b      	add	r3, r1
 8011828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801182a:	69f9      	ldr	r1, [r7, #28]
 801182c:	4618      	mov	r0, r3
 801182e:	f7fd fd8b 	bl	800f348 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	7d1b      	ldrb	r3, [r3, #20]
 8011836:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801183a:	b2da      	uxtb	r2, r3
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011840:	69fa      	ldr	r2, [r7, #28]
 8011842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011844:	4413      	add	r3, r2
 8011846:	61fb      	str	r3, [r7, #28]
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	699a      	ldr	r2, [r3, #24]
 801184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184e:	441a      	add	r2, r3
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	619a      	str	r2, [r3, #24]
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	68da      	ldr	r2, [r3, #12]
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	699b      	ldr	r3, [r3, #24]
 801185c:	429a      	cmp	r2, r3
 801185e:	bf38      	it	cc
 8011860:	461a      	movcc	r2, r3
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	60da      	str	r2, [r3, #12]
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	681a      	ldr	r2, [r3, #0]
 801186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186c:	441a      	add	r2, r3
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	601a      	str	r2, [r3, #0]
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011876:	1ad3      	subs	r3, r2, r3
 8011878:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2b00      	cmp	r3, #0
 801187e:	f47f aeb5 	bne.w	80115ec <f_write+0x76>
 8011882:	e000      	b.n	8011886 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011884:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	7d1b      	ldrb	r3, [r3, #20]
 801188a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801188e:	b2da      	uxtb	r2, r3
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011894:	2300      	movs	r3, #0
}
 8011896:	4618      	mov	r0, r3
 8011898:	3730      	adds	r7, #48	; 0x30
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
	...

080118a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b086      	sub	sp, #24
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f107 0208 	add.w	r2, r7, #8
 80118ae:	4611      	mov	r1, r2
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7ff fab7 	bl	8010e24 <validate>
 80118b6:	4603      	mov	r3, r0
 80118b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80118ba:	7dfb      	ldrb	r3, [r7, #23]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d167      	bne.n	8011990 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	7d1b      	ldrb	r3, [r3, #20]
 80118c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d061      	beq.n	8011990 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	7d1b      	ldrb	r3, [r3, #20]
 80118d0:	b25b      	sxtb	r3, r3
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	da15      	bge.n	8011902 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	7858      	ldrb	r0, [r3, #1]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6a1a      	ldr	r2, [r3, #32]
 80118e4:	2301      	movs	r3, #1
 80118e6:	f7fd fc6f 	bl	800f1c8 <disk_write>
 80118ea:	4603      	mov	r3, r0
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d001      	beq.n	80118f4 <f_sync+0x54>
 80118f0:	2301      	movs	r3, #1
 80118f2:	e04e      	b.n	8011992 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	7d1b      	ldrb	r3, [r3, #20]
 80118f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118fc:	b2da      	uxtb	r2, r3
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011902:	4b26      	ldr	r3, [pc, #152]	; (801199c <f_sync+0xfc>)
 8011904:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011906:	68ba      	ldr	r2, [r7, #8]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190c:	4619      	mov	r1, r3
 801190e:	4610      	mov	r0, r2
 8011910:	f7fd ff48 	bl	800f7a4 <move_window>
 8011914:	4603      	mov	r3, r0
 8011916:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011918:	7dfb      	ldrb	r3, [r7, #23]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d138      	bne.n	8011990 <f_sync+0xf0>
					dir = fp->dir_ptr;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011922:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	330b      	adds	r3, #11
 8011928:	781a      	ldrb	r2, [r3, #0]
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	330b      	adds	r3, #11
 801192e:	f042 0220 	orr.w	r2, r2, #32
 8011932:	b2d2      	uxtb	r2, r2
 8011934:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6818      	ldr	r0, [r3, #0]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	689b      	ldr	r3, [r3, #8]
 801193e:	461a      	mov	r2, r3
 8011940:	68f9      	ldr	r1, [r7, #12]
 8011942:	f7fe fccd 	bl	80102e0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f103 021c 	add.w	r2, r3, #28
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	68db      	ldr	r3, [r3, #12]
 8011950:	4619      	mov	r1, r3
 8011952:	4610      	mov	r0, r2
 8011954:	f7fd fccc 	bl	800f2f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	3316      	adds	r3, #22
 801195c:	6939      	ldr	r1, [r7, #16]
 801195e:	4618      	mov	r0, r3
 8011960:	f7fd fcc6 	bl	800f2f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	3312      	adds	r3, #18
 8011968:	2100      	movs	r1, #0
 801196a:	4618      	mov	r0, r3
 801196c:	f7fd fca5 	bl	800f2ba <st_word>
					fs->wflag = 1;
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	2201      	movs	r2, #1
 8011974:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	4618      	mov	r0, r3
 801197a:	f7fd ff41 	bl	800f800 <sync_fs>
 801197e:	4603      	mov	r3, r0
 8011980:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	7d1b      	ldrb	r3, [r3, #20]
 8011986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801198a:	b2da      	uxtb	r2, r3
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011990:	7dfb      	ldrb	r3, [r7, #23]
}
 8011992:	4618      	mov	r0, r3
 8011994:	3718      	adds	r7, #24
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	274a0000 	.word	0x274a0000

080119a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f7ff ff79 	bl	80118a0 <f_sync>
 80119ae:	4603      	mov	r3, r0
 80119b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80119b2:	7bfb      	ldrb	r3, [r7, #15]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d118      	bne.n	80119ea <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f107 0208 	add.w	r2, r7, #8
 80119be:	4611      	mov	r1, r2
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7ff fa2f 	bl	8010e24 <validate>
 80119c6:	4603      	mov	r3, r0
 80119c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80119ca:	7bfb      	ldrb	r3, [r7, #15]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d10c      	bne.n	80119ea <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	691b      	ldr	r3, [r3, #16]
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7fd fe41 	bl	800f65c <dec_lock>
 80119da:	4603      	mov	r3, r0
 80119dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80119de:	7bfb      	ldrb	r3, [r7, #15]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d102      	bne.n	80119ea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2200      	movs	r2, #0
 80119e8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80119ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80119f4:	b590      	push	{r4, r7, lr}
 80119f6:	b091      	sub	sp, #68	; 0x44
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80119fc:	f107 0108 	add.w	r1, r7, #8
 8011a00:	1d3b      	adds	r3, r7, #4
 8011a02:	2200      	movs	r2, #0
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7fe ff87 	bl	8010918 <find_volume>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011a10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d131      	bne.n	8011a7c <f_chdir+0x88>
		dj.obj.fs = fs;
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	f107 030c 	add.w	r3, r7, #12
 8011a22:	4611      	mov	r1, r2
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fe fe47 	bl	80106b8 <follow_path>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011a30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d11a      	bne.n	8011a6e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011a38:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011a3c:	b25b      	sxtb	r3, r3
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	da03      	bge.n	8011a4a <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	697a      	ldr	r2, [r7, #20]
 8011a46:	619a      	str	r2, [r3, #24]
 8011a48:	e011      	b.n	8011a6e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8011a4a:	7cbb      	ldrb	r3, [r7, #18]
 8011a4c:	f003 0310 	and.w	r3, r3, #16
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d009      	beq.n	8011a68 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a58:	68bc      	ldr	r4, [r7, #8]
 8011a5a:	4611      	mov	r1, r2
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fe fc20 	bl	80102a2 <ld_clust>
 8011a62:	4603      	mov	r3, r0
 8011a64:	61a3      	str	r3, [r4, #24]
 8011a66:	e002      	b.n	8011a6e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8011a68:	2305      	movs	r3, #5
 8011a6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011a6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a72:	2b04      	cmp	r3, #4
 8011a74:	d102      	bne.n	8011a7c <f_chdir+0x88>
 8011a76:	2305      	movs	r3, #5
 8011a78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011a7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3744      	adds	r7, #68	; 0x44
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd90      	pop	{r4, r7, pc}

08011a88 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b090      	sub	sp, #64	; 0x40
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
 8011a90:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f107 0208 	add.w	r2, r7, #8
 8011a98:	4611      	mov	r1, r2
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7ff f9c2 	bl	8010e24 <validate>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011aa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d103      	bne.n	8011ab6 <f_lseek+0x2e>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	7d5b      	ldrb	r3, [r3, #21]
 8011ab2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011ab6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d002      	beq.n	8011ac4 <f_lseek+0x3c>
 8011abe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ac2:	e201      	b.n	8011ec8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 80d9 	beq.w	8011c80 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ad4:	d15a      	bne.n	8011b8c <f_lseek+0x104>
			tbl = fp->cltbl;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ada:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ade:	1d1a      	adds	r2, r3, #4
 8011ae0:	627a      	str	r2, [r7, #36]	; 0x24
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	617b      	str	r3, [r7, #20]
 8011ae6:	2302      	movs	r3, #2
 8011ae8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	689b      	ldr	r3, [r3, #8]
 8011aee:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d03a      	beq.n	8011b6c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af8:	613b      	str	r3, [r7, #16]
 8011afa:	2300      	movs	r3, #0
 8011afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b00:	3302      	adds	r3, #2
 8011b02:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b06:	60fb      	str	r3, [r7, #12]
 8011b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fd ff03 	bl	800f91e <get_fat>
 8011b18:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d804      	bhi.n	8011b2a <f_lseek+0xa2>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2202      	movs	r2, #2
 8011b24:	755a      	strb	r2, [r3, #21]
 8011b26:	2302      	movs	r3, #2
 8011b28:	e1ce      	b.n	8011ec8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b30:	d104      	bne.n	8011b3c <f_lseek+0xb4>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2201      	movs	r2, #1
 8011b36:	755a      	strb	r2, [r3, #21]
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e1c5      	b.n	8011ec8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	3301      	adds	r3, #1
 8011b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d0de      	beq.n	8011b04 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d809      	bhi.n	8011b62 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b50:	1d1a      	adds	r2, r3, #4
 8011b52:	627a      	str	r2, [r7, #36]	; 0x24
 8011b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b56:	601a      	str	r2, [r3, #0]
 8011b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5a:	1d1a      	adds	r2, r3, #4
 8011b5c:	627a      	str	r2, [r7, #36]	; 0x24
 8011b5e:	693a      	ldr	r2, [r7, #16]
 8011b60:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	69db      	ldr	r3, [r3, #28]
 8011b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d3c4      	bcc.n	8011af6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b72:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d803      	bhi.n	8011b84 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7e:	2200      	movs	r2, #0
 8011b80:	601a      	str	r2, [r3, #0]
 8011b82:	e19f      	b.n	8011ec4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011b84:	2311      	movs	r3, #17
 8011b86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011b8a:	e19b      	b.n	8011ec4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	68db      	ldr	r3, [r3, #12]
 8011b90:	683a      	ldr	r2, [r7, #0]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d902      	bls.n	8011b9c <f_lseek+0x114>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	683a      	ldr	r2, [r7, #0]
 8011ba0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	f000 818d 	beq.w	8011ec4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	3b01      	subs	r3, #1
 8011bae:	4619      	mov	r1, r3
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f7fe f998 	bl	800fee6 <clmt_clust>
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011bbc:	68ba      	ldr	r2, [r7, #8]
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	69db      	ldr	r3, [r3, #28]
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	4610      	mov	r0, r2
 8011bc6:	f7fd fe8b 	bl	800f8e0 <clust2sect>
 8011bca:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d104      	bne.n	8011bdc <f_lseek+0x154>
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2202      	movs	r2, #2
 8011bd6:	755a      	strb	r2, [r3, #21]
 8011bd8:	2302      	movs	r3, #2
 8011bda:	e175      	b.n	8011ec8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	3b01      	subs	r3, #1
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	8992      	ldrh	r2, [r2, #12]
 8011be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011be8:	68ba      	ldr	r2, [r7, #8]
 8011bea:	8952      	ldrh	r2, [r2, #10]
 8011bec:	3a01      	subs	r2, #1
 8011bee:	4013      	ands	r3, r2
 8011bf0:	69ba      	ldr	r2, [r7, #24]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	699b      	ldr	r3, [r3, #24]
 8011bfa:	68ba      	ldr	r2, [r7, #8]
 8011bfc:	8992      	ldrh	r2, [r2, #12]
 8011bfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c02:	fb02 f201 	mul.w	r2, r2, r1
 8011c06:	1a9b      	subs	r3, r3, r2
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f000 815b 	beq.w	8011ec4 <f_lseek+0x43c>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6a1b      	ldr	r3, [r3, #32]
 8011c12:	69ba      	ldr	r2, [r7, #24]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	f000 8155 	beq.w	8011ec4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	7d1b      	ldrb	r3, [r3, #20]
 8011c1e:	b25b      	sxtb	r3, r3
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	da18      	bge.n	8011c56 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	7858      	ldrb	r0, [r3, #1]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6a1a      	ldr	r2, [r3, #32]
 8011c32:	2301      	movs	r3, #1
 8011c34:	f7fd fac8 	bl	800f1c8 <disk_write>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d004      	beq.n	8011c48 <f_lseek+0x1c0>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2201      	movs	r2, #1
 8011c42:	755a      	strb	r2, [r3, #21]
 8011c44:	2301      	movs	r3, #1
 8011c46:	e13f      	b.n	8011ec8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	7d1b      	ldrb	r3, [r3, #20]
 8011c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c50:	b2da      	uxtb	r2, r3
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	7858      	ldrb	r0, [r3, #1]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c60:	2301      	movs	r3, #1
 8011c62:	69ba      	ldr	r2, [r7, #24]
 8011c64:	f7fd fa90 	bl	800f188 <disk_read>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d004      	beq.n	8011c78 <f_lseek+0x1f0>
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2201      	movs	r2, #1
 8011c72:	755a      	strb	r2, [r3, #21]
 8011c74:	2301      	movs	r3, #1
 8011c76:	e127      	b.n	8011ec8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	69ba      	ldr	r2, [r7, #24]
 8011c7c:	621a      	str	r2, [r3, #32]
 8011c7e:	e121      	b.n	8011ec4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	683a      	ldr	r2, [r7, #0]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d908      	bls.n	8011c9c <f_lseek+0x214>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	7d1b      	ldrb	r3, [r3, #20]
 8011c8e:	f003 0302 	and.w	r3, r3, #2
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d102      	bne.n	8011c9c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	68db      	ldr	r3, [r3, #12]
 8011c9a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	699b      	ldr	r3, [r3, #24]
 8011ca0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011caa:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	f000 80b5 	beq.w	8011e1e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	895b      	ldrh	r3, [r3, #10]
 8011cb8:	461a      	mov	r2, r3
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	899b      	ldrh	r3, [r3, #12]
 8011cbe:	fb03 f302 	mul.w	r3, r3, r2
 8011cc2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011cc4:	6a3b      	ldr	r3, [r7, #32]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d01b      	beq.n	8011d02 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	1e5a      	subs	r2, r3, #1
 8011cce:	69fb      	ldr	r3, [r7, #28]
 8011cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8011cd4:	6a3b      	ldr	r3, [r7, #32]
 8011cd6:	1e59      	subs	r1, r3, #1
 8011cd8:	69fb      	ldr	r3, [r7, #28]
 8011cda:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d30f      	bcc.n	8011d02 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011ce2:	6a3b      	ldr	r3, [r7, #32]
 8011ce4:	1e5a      	subs	r2, r3, #1
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	425b      	negs	r3, r3
 8011cea:	401a      	ands	r2, r3
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	699b      	ldr	r3, [r3, #24]
 8011cf4:	683a      	ldr	r2, [r7, #0]
 8011cf6:	1ad3      	subs	r3, r2, r3
 8011cf8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	69db      	ldr	r3, [r3, #28]
 8011cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d00:	e022      	b.n	8011d48 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	689b      	ldr	r3, [r3, #8]
 8011d06:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d119      	bne.n	8011d42 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2100      	movs	r1, #0
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fe f84f 	bl	800fdb6 <create_chain>
 8011d18:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d104      	bne.n	8011d2a <f_lseek+0x2a2>
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2202      	movs	r2, #2
 8011d24:	755a      	strb	r2, [r3, #21]
 8011d26:	2302      	movs	r3, #2
 8011d28:	e0ce      	b.n	8011ec8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d30:	d104      	bne.n	8011d3c <f_lseek+0x2b4>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2201      	movs	r2, #1
 8011d36:	755a      	strb	r2, [r3, #21]
 8011d38:	2301      	movs	r3, #1
 8011d3a:	e0c5      	b.n	8011ec8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d40:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d46:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d067      	beq.n	8011e1e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011d4e:	e03a      	b.n	8011dc6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011d50:	683a      	ldr	r2, [r7, #0]
 8011d52:	69fb      	ldr	r3, [r7, #28]
 8011d54:	1ad3      	subs	r3, r2, r3
 8011d56:	603b      	str	r3, [r7, #0]
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	699a      	ldr	r2, [r3, #24]
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	441a      	add	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	7d1b      	ldrb	r3, [r3, #20]
 8011d68:	f003 0302 	and.w	r3, r3, #2
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d00b      	beq.n	8011d88 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7fe f81e 	bl	800fdb6 <create_chain>
 8011d7a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d108      	bne.n	8011d94 <f_lseek+0x30c>
							ofs = 0; break;
 8011d82:	2300      	movs	r3, #0
 8011d84:	603b      	str	r3, [r7, #0]
 8011d86:	e022      	b.n	8011dce <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fd fdc6 	bl	800f91e <get_fat>
 8011d92:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d9a:	d104      	bne.n	8011da6 <f_lseek+0x31e>
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2201      	movs	r2, #1
 8011da0:	755a      	strb	r2, [r3, #21]
 8011da2:	2301      	movs	r3, #1
 8011da4:	e090      	b.n	8011ec8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da8:	2b01      	cmp	r3, #1
 8011daa:	d904      	bls.n	8011db6 <f_lseek+0x32e>
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	69db      	ldr	r3, [r3, #28]
 8011db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d304      	bcc.n	8011dc0 <f_lseek+0x338>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2202      	movs	r2, #2
 8011dba:	755a      	strb	r2, [r3, #21]
 8011dbc:	2302      	movs	r3, #2
 8011dbe:	e083      	b.n	8011ec8 <f_lseek+0x440>
					fp->clust = clst;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011dc4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011dc6:	683a      	ldr	r2, [r7, #0]
 8011dc8:	69fb      	ldr	r3, [r7, #28]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d8c0      	bhi.n	8011d50 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	699a      	ldr	r2, [r3, #24]
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	441a      	add	r2, r3
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	899b      	ldrh	r3, [r3, #12]
 8011dde:	461a      	mov	r2, r3
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011de6:	fb02 f201 	mul.w	r2, r2, r1
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d016      	beq.n	8011e1e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fd fd73 	bl	800f8e0 <clust2sect>
 8011dfa:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d104      	bne.n	8011e0c <f_lseek+0x384>
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2202      	movs	r2, #2
 8011e06:	755a      	strb	r2, [r3, #21]
 8011e08:	2302      	movs	r3, #2
 8011e0a:	e05d      	b.n	8011ec8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	899b      	ldrh	r3, [r3, #12]
 8011e10:	461a      	mov	r2, r3
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e1a:	4413      	add	r3, r2
 8011e1c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	699a      	ldr	r2, [r3, #24]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	68db      	ldr	r3, [r3, #12]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d90a      	bls.n	8011e40 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	699a      	ldr	r2, [r3, #24]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	7d1b      	ldrb	r3, [r3, #20]
 8011e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e3a:	b2da      	uxtb	r2, r3
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	699b      	ldr	r3, [r3, #24]
 8011e44:	68ba      	ldr	r2, [r7, #8]
 8011e46:	8992      	ldrh	r2, [r2, #12]
 8011e48:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e4c:	fb02 f201 	mul.w	r2, r2, r1
 8011e50:	1a9b      	subs	r3, r3, r2
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d036      	beq.n	8011ec4 <f_lseek+0x43c>
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6a1b      	ldr	r3, [r3, #32]
 8011e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d031      	beq.n	8011ec4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	7d1b      	ldrb	r3, [r3, #20]
 8011e64:	b25b      	sxtb	r3, r3
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	da18      	bge.n	8011e9c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	7858      	ldrb	r0, [r3, #1]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6a1a      	ldr	r2, [r3, #32]
 8011e78:	2301      	movs	r3, #1
 8011e7a:	f7fd f9a5 	bl	800f1c8 <disk_write>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d004      	beq.n	8011e8e <f_lseek+0x406>
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2201      	movs	r2, #1
 8011e88:	755a      	strb	r2, [r3, #21]
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	e01c      	b.n	8011ec8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	7d1b      	ldrb	r3, [r3, #20]
 8011e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e96:	b2da      	uxtb	r2, r3
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	7858      	ldrb	r0, [r3, #1]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011eaa:	f7fd f96d 	bl	800f188 <disk_read>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d004      	beq.n	8011ebe <f_lseek+0x436>
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	755a      	strb	r2, [r3, #21]
 8011eba:	2301      	movs	r3, #1
 8011ebc:	e004      	b.n	8011ec8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ec2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011ec4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3740      	adds	r7, #64	; 0x40
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b09e      	sub	sp, #120	; 0x78
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011edc:	f107 010c 	add.w	r1, r7, #12
 8011ee0:	1d3b      	adds	r3, r7, #4
 8011ee2:	2202      	movs	r2, #2
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7fe fd17 	bl	8010918 <find_volume>
 8011eea:	4603      	mov	r3, r0
 8011eec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011ef4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	f040 80a4 	bne.w	8012046 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011efe:	687a      	ldr	r2, [r7, #4]
 8011f00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011f04:	4611      	mov	r1, r2
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fe fbd6 	bl	80106b8 <follow_path>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011f12:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d108      	bne.n	8011f2c <f_unlink+0x5c>
 8011f1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011f1e:	f003 0320 	and.w	r3, r3, #32
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d002      	beq.n	8011f2c <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011f26:	2306      	movs	r3, #6
 8011f28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011f2c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d108      	bne.n	8011f46 <f_unlink+0x76>
 8011f34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011f38:	2102      	movs	r1, #2
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7fd fa82 	bl	800f444 <chk_lock>
 8011f40:	4603      	mov	r3, r0
 8011f42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011f46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d17b      	bne.n	8012046 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011f4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011f52:	b25b      	sxtb	r3, r3
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	da03      	bge.n	8011f60 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011f58:	2306      	movs	r3, #6
 8011f5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011f5e:	e008      	b.n	8011f72 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011f60:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011f64:	f003 0301 	and.w	r3, r3, #1
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d002      	beq.n	8011f72 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011f6c:	2307      	movs	r3, #7
 8011f6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8011f72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d13d      	bne.n	8011ff6 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011f7e:	4611      	mov	r1, r2
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7fe f98e 	bl	80102a2 <ld_clust>
 8011f86:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011f88:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011f8c:	f003 0310 	and.w	r3, r3, #16
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d030      	beq.n	8011ff6 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	699b      	ldr	r3, [r3, #24]
 8011f98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d103      	bne.n	8011fa6 <f_unlink+0xd6>
						res = FR_DENIED;
 8011f9e:	2307      	movs	r3, #7
 8011fa0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011fa4:	e027      	b.n	8011ff6 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011fac:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011fae:	f107 0310 	add.w	r3, r7, #16
 8011fb2:	2100      	movs	r1, #0
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7fd ffce 	bl	800ff56 <dir_sdi>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011fc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d116      	bne.n	8011ff6 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011fc8:	f107 0310 	add.w	r3, r7, #16
 8011fcc:	2100      	movs	r1, #0
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7fe f9a6 	bl	8010320 <dir_read>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011fda:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d102      	bne.n	8011fe8 <f_unlink+0x118>
 8011fe2:	2307      	movs	r3, #7
 8011fe4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011fe8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011fec:	2b04      	cmp	r3, #4
 8011fee:	d102      	bne.n	8011ff6 <f_unlink+0x126>
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011ff6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d123      	bne.n	8012046 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011ffe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012002:	4618      	mov	r0, r3
 8012004:	f7fe fa70 	bl	80104e8 <dir_remove>
 8012008:	4603      	mov	r3, r0
 801200a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801200e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012012:	2b00      	cmp	r3, #0
 8012014:	d10c      	bne.n	8012030 <f_unlink+0x160>
 8012016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012018:	2b00      	cmp	r3, #0
 801201a:	d009      	beq.n	8012030 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801201c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012020:	2200      	movs	r2, #0
 8012022:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012024:	4618      	mov	r0, r3
 8012026:	f7fd fe61 	bl	800fcec <remove_chain>
 801202a:	4603      	mov	r3, r0
 801202c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8012030:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012034:	2b00      	cmp	r3, #0
 8012036:	d106      	bne.n	8012046 <f_unlink+0x176>
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	4618      	mov	r0, r3
 801203c:	f7fd fbe0 	bl	800f800 <sync_fs>
 8012040:	4603      	mov	r3, r0
 8012042:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012046:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801204a:	4618      	mov	r0, r3
 801204c:	3778      	adds	r7, #120	; 0x78
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
	...

08012054 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b096      	sub	sp, #88	; 0x58
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801205c:	f107 0108 	add.w	r1, r7, #8
 8012060:	1d3b      	adds	r3, r7, #4
 8012062:	2202      	movs	r2, #2
 8012064:	4618      	mov	r0, r3
 8012066:	f7fe fc57 	bl	8010918 <find_volume>
 801206a:	4603      	mov	r3, r0
 801206c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8012074:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012078:	2b00      	cmp	r3, #0
 801207a:	f040 80fe 	bne.w	801227a <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	f107 030c 	add.w	r3, r7, #12
 8012084:	4611      	mov	r1, r2
 8012086:	4618      	mov	r0, r3
 8012088:	f7fe fb16 	bl	80106b8 <follow_path>
 801208c:	4603      	mov	r3, r0
 801208e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012092:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012096:	2b00      	cmp	r3, #0
 8012098:	d102      	bne.n	80120a0 <f_mkdir+0x4c>
 801209a:	2308      	movs	r3, #8
 801209c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80120a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120a4:	2b04      	cmp	r3, #4
 80120a6:	d108      	bne.n	80120ba <f_mkdir+0x66>
 80120a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80120ac:	f003 0320 	and.w	r3, r3, #32
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d002      	beq.n	80120ba <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80120b4:	2306      	movs	r3, #6
 80120b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80120ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120be:	2b04      	cmp	r3, #4
 80120c0:	f040 80db 	bne.w	801227a <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80120c4:	f107 030c 	add.w	r3, r7, #12
 80120c8:	2100      	movs	r1, #0
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7fd fe73 	bl	800fdb6 <create_chain>
 80120d0:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	895b      	ldrh	r3, [r3, #10]
 80120d6:	461a      	mov	r2, r3
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	899b      	ldrh	r3, [r3, #12]
 80120dc:	fb03 f302 	mul.w	r3, r3, r2
 80120e0:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80120e2:	2300      	movs	r3, #0
 80120e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80120e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d102      	bne.n	80120f4 <f_mkdir+0xa0>
 80120ee:	2307      	movs	r3, #7
 80120f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80120f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d102      	bne.n	8012100 <f_mkdir+0xac>
 80120fa:	2302      	movs	r3, #2
 80120fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012106:	d102      	bne.n	801210e <f_mkdir+0xba>
 8012108:	2301      	movs	r3, #1
 801210a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801210e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012112:	2b00      	cmp	r3, #0
 8012114:	d106      	bne.n	8012124 <f_mkdir+0xd0>
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	4618      	mov	r0, r3
 801211a:	f7fd faff 	bl	800f71c <sync_window>
 801211e:	4603      	mov	r3, r0
 8012120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8012124:	4b58      	ldr	r3, [pc, #352]	; (8012288 <f_mkdir+0x234>)
 8012126:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801212c:	2b00      	cmp	r3, #0
 801212e:	d16c      	bne.n	801220a <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012134:	4618      	mov	r0, r3
 8012136:	f7fd fbd3 	bl	800f8e0 <clust2sect>
 801213a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	3338      	adds	r3, #56	; 0x38
 8012140:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	899b      	ldrh	r3, [r3, #12]
 8012146:	461a      	mov	r2, r3
 8012148:	2100      	movs	r1, #0
 801214a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801214c:	f7fd f91d 	bl	800f38a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012150:	220b      	movs	r2, #11
 8012152:	2120      	movs	r1, #32
 8012154:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012156:	f7fd f918 	bl	800f38a <mem_set>
					dir[DIR_Name] = '.';
 801215a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801215c:	222e      	movs	r2, #46	; 0x2e
 801215e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012162:	330b      	adds	r3, #11
 8012164:	2210      	movs	r2, #16
 8012166:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801216a:	3316      	adds	r3, #22
 801216c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801216e:	4618      	mov	r0, r3
 8012170:	f7fd f8be 	bl	800f2f0 <st_dword>
					st_clust(fs, dir, dcl);
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012178:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801217a:	4618      	mov	r0, r3
 801217c:	f7fe f8b0 	bl	80102e0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012182:	3320      	adds	r3, #32
 8012184:	2220      	movs	r2, #32
 8012186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012188:	4618      	mov	r0, r3
 801218a:	f7fd f8dd 	bl	800f348 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801218e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012190:	3321      	adds	r3, #33	; 0x21
 8012192:	222e      	movs	r2, #46	; 0x2e
 8012194:	701a      	strb	r2, [r3, #0]
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	2b03      	cmp	r3, #3
 80121a0:	d106      	bne.n	80121b0 <f_mkdir+0x15c>
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d101      	bne.n	80121b0 <f_mkdir+0x15c>
 80121ac:	2300      	movs	r3, #0
 80121ae:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80121b0:	68b8      	ldr	r0, [r7, #8]
 80121b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121b4:	3320      	adds	r3, #32
 80121b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121b8:	4619      	mov	r1, r3
 80121ba:	f7fe f891 	bl	80102e0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	895b      	ldrh	r3, [r3, #10]
 80121c2:	653b      	str	r3, [r7, #80]	; 0x50
 80121c4:	e01c      	b.n	8012200 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80121c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121c8:	1c5a      	adds	r2, r3, #1
 80121ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80121cc:	68ba      	ldr	r2, [r7, #8]
 80121ce:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	2201      	movs	r2, #1
 80121d4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	4618      	mov	r0, r3
 80121da:	f7fd fa9f 	bl	800f71c <sync_window>
 80121de:	4603      	mov	r3, r0
 80121e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80121e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d10d      	bne.n	8012208 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	899b      	ldrh	r3, [r3, #12]
 80121f0:	461a      	mov	r2, r3
 80121f2:	2100      	movs	r1, #0
 80121f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80121f6:	f7fd f8c8 	bl	800f38a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80121fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121fc:	3b01      	subs	r3, #1
 80121fe:	653b      	str	r3, [r7, #80]	; 0x50
 8012200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012202:	2b00      	cmp	r3, #0
 8012204:	d1df      	bne.n	80121c6 <f_mkdir+0x172>
 8012206:	e000      	b.n	801220a <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8012208:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801220a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801220e:	2b00      	cmp	r3, #0
 8012210:	d107      	bne.n	8012222 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8012212:	f107 030c 	add.w	r3, r7, #12
 8012216:	4618      	mov	r0, r3
 8012218:	f7fe f934 	bl	8010484 <dir_register>
 801221c:	4603      	mov	r3, r0
 801221e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8012222:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012226:	2b00      	cmp	r3, #0
 8012228:	d120      	bne.n	801226c <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801222a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801222e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012230:	3316      	adds	r3, #22
 8012232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012234:	4618      	mov	r0, r3
 8012236:	f7fd f85b 	bl	800f2f0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801223e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012240:	4618      	mov	r0, r3
 8012242:	f7fe f84d 	bl	80102e0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012248:	330b      	adds	r3, #11
 801224a:	2210      	movs	r2, #16
 801224c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	2201      	movs	r2, #1
 8012252:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8012254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012258:	2b00      	cmp	r3, #0
 801225a:	d10e      	bne.n	801227a <f_mkdir+0x226>
					res = sync_fs(fs);
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	4618      	mov	r0, r3
 8012260:	f7fd face 	bl	800f800 <sync_fs>
 8012264:	4603      	mov	r3, r0
 8012266:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801226a:	e006      	b.n	801227a <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801226c:	f107 030c 	add.w	r3, r7, #12
 8012270:	2200      	movs	r2, #0
 8012272:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012274:	4618      	mov	r0, r3
 8012276:	f7fd fd39 	bl	800fcec <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801227a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801227e:	4618      	mov	r0, r3
 8012280:	3758      	adds	r7, #88	; 0x58
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	274a0000 	.word	0x274a0000

0801228c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b088      	sub	sp, #32
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	607a      	str	r2, [r7, #4]
	int n = 0;
 8012298:	2300      	movs	r3, #0
 801229a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80122a0:	e017      	b.n	80122d2 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80122a2:	f107 0310 	add.w	r3, r7, #16
 80122a6:	f107 0114 	add.w	r1, r7, #20
 80122aa:	2201      	movs	r2, #1
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f7ff f803 	bl	80112b8 <f_read>
		if (rc != 1) break;
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	2b01      	cmp	r3, #1
 80122b6:	d112      	bne.n	80122de <f_gets+0x52>
		c = s[0];
 80122b8:	7d3b      	ldrb	r3, [r7, #20]
 80122ba:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80122bc:	69bb      	ldr	r3, [r7, #24]
 80122be:	1c5a      	adds	r2, r3, #1
 80122c0:	61ba      	str	r2, [r7, #24]
 80122c2:	7dfa      	ldrb	r2, [r7, #23]
 80122c4:	701a      	strb	r2, [r3, #0]
		n++;
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	3301      	adds	r3, #1
 80122ca:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80122cc:	7dfb      	ldrb	r3, [r7, #23]
 80122ce:	2b0a      	cmp	r3, #10
 80122d0:	d007      	beq.n	80122e2 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	3b01      	subs	r3, #1
 80122d6:	69fa      	ldr	r2, [r7, #28]
 80122d8:	429a      	cmp	r2, r3
 80122da:	dbe2      	blt.n	80122a2 <f_gets+0x16>
 80122dc:	e002      	b.n	80122e4 <f_gets+0x58>
		if (rc != 1) break;
 80122de:	bf00      	nop
 80122e0:	e000      	b.n	80122e4 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80122e2:	bf00      	nop
	}
	*p = 0;
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	2200      	movs	r2, #0
 80122e8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d001      	beq.n	80122f4 <f_gets+0x68>
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	e000      	b.n	80122f6 <f_gets+0x6a>
 80122f4:	2300      	movs	r3, #0
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	3720      	adds	r7, #32
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}
	...

08012300 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012300:	b480      	push	{r7}
 8012302:	b087      	sub	sp, #28
 8012304:	af00      	add	r7, sp, #0
 8012306:	60f8      	str	r0, [r7, #12]
 8012308:	60b9      	str	r1, [r7, #8]
 801230a:	4613      	mov	r3, r2
 801230c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801230e:	2301      	movs	r3, #1
 8012310:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012316:	4b1f      	ldr	r3, [pc, #124]	; (8012394 <FATFS_LinkDriverEx+0x94>)
 8012318:	7a5b      	ldrb	r3, [r3, #9]
 801231a:	b2db      	uxtb	r3, r3
 801231c:	2b00      	cmp	r3, #0
 801231e:	d131      	bne.n	8012384 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012320:	4b1c      	ldr	r3, [pc, #112]	; (8012394 <FATFS_LinkDriverEx+0x94>)
 8012322:	7a5b      	ldrb	r3, [r3, #9]
 8012324:	b2db      	uxtb	r3, r3
 8012326:	461a      	mov	r2, r3
 8012328:	4b1a      	ldr	r3, [pc, #104]	; (8012394 <FATFS_LinkDriverEx+0x94>)
 801232a:	2100      	movs	r1, #0
 801232c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801232e:	4b19      	ldr	r3, [pc, #100]	; (8012394 <FATFS_LinkDriverEx+0x94>)
 8012330:	7a5b      	ldrb	r3, [r3, #9]
 8012332:	b2db      	uxtb	r3, r3
 8012334:	4a17      	ldr	r2, [pc, #92]	; (8012394 <FATFS_LinkDriverEx+0x94>)
 8012336:	009b      	lsls	r3, r3, #2
 8012338:	4413      	add	r3, r2
 801233a:	68fa      	ldr	r2, [r7, #12]
 801233c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801233e:	4b15      	ldr	r3, [pc, #84]	; (8012394 <FATFS_LinkDriverEx+0x94>)
 8012340:	7a5b      	ldrb	r3, [r3, #9]
 8012342:	b2db      	uxtb	r3, r3
 8012344:	461a      	mov	r2, r3
 8012346:	4b13      	ldr	r3, [pc, #76]	; (8012394 <FATFS_LinkDriverEx+0x94>)
 8012348:	4413      	add	r3, r2
 801234a:	79fa      	ldrb	r2, [r7, #7]
 801234c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801234e:	4b11      	ldr	r3, [pc, #68]	; (8012394 <FATFS_LinkDriverEx+0x94>)
 8012350:	7a5b      	ldrb	r3, [r3, #9]
 8012352:	b2db      	uxtb	r3, r3
 8012354:	1c5a      	adds	r2, r3, #1
 8012356:	b2d1      	uxtb	r1, r2
 8012358:	4a0e      	ldr	r2, [pc, #56]	; (8012394 <FATFS_LinkDriverEx+0x94>)
 801235a:	7251      	strb	r1, [r2, #9]
 801235c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801235e:	7dbb      	ldrb	r3, [r7, #22]
 8012360:	3330      	adds	r3, #48	; 0x30
 8012362:	b2da      	uxtb	r2, r3
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	3301      	adds	r3, #1
 801236c:	223a      	movs	r2, #58	; 0x3a
 801236e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	3302      	adds	r3, #2
 8012374:	222f      	movs	r2, #47	; 0x2f
 8012376:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	3303      	adds	r3, #3
 801237c:	2200      	movs	r2, #0
 801237e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012380:	2300      	movs	r3, #0
 8012382:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012384:	7dfb      	ldrb	r3, [r7, #23]
}
 8012386:	4618      	mov	r0, r3
 8012388:	371c      	adds	r7, #28
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr
 8012392:	bf00      	nop
 8012394:	20033620 	.word	0x20033620

08012398 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80123a2:	2200      	movs	r2, #0
 80123a4:	6839      	ldr	r1, [r7, #0]
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f7ff ffaa 	bl	8012300 <FATFS_LinkDriverEx>
 80123ac:	4603      	mov	r3, r0
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3708      	adds	r7, #8
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}

080123b6 <__cxa_guard_acquire>:
 80123b6:	6803      	ldr	r3, [r0, #0]
 80123b8:	07db      	lsls	r3, r3, #31
 80123ba:	d406      	bmi.n	80123ca <__cxa_guard_acquire+0x14>
 80123bc:	7843      	ldrb	r3, [r0, #1]
 80123be:	b103      	cbz	r3, 80123c2 <__cxa_guard_acquire+0xc>
 80123c0:	deff      	udf	#255	; 0xff
 80123c2:	2301      	movs	r3, #1
 80123c4:	7043      	strb	r3, [r0, #1]
 80123c6:	4618      	mov	r0, r3
 80123c8:	4770      	bx	lr
 80123ca:	2000      	movs	r0, #0
 80123cc:	4770      	bx	lr

080123ce <__cxa_guard_release>:
 80123ce:	2301      	movs	r3, #1
 80123d0:	6003      	str	r3, [r0, #0]
 80123d2:	4770      	bx	lr
 80123d4:	0000      	movs	r0, r0
	...

080123d8 <cos>:
 80123d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123da:	ec51 0b10 	vmov	r0, r1, d0
 80123de:	4a1e      	ldr	r2, [pc, #120]	; (8012458 <cos+0x80>)
 80123e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80123e4:	4293      	cmp	r3, r2
 80123e6:	dc06      	bgt.n	80123f6 <cos+0x1e>
 80123e8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8012450 <cos+0x78>
 80123ec:	f000 fa74 	bl	80128d8 <__kernel_cos>
 80123f0:	ec51 0b10 	vmov	r0, r1, d0
 80123f4:	e007      	b.n	8012406 <cos+0x2e>
 80123f6:	4a19      	ldr	r2, [pc, #100]	; (801245c <cos+0x84>)
 80123f8:	4293      	cmp	r3, r2
 80123fa:	dd09      	ble.n	8012410 <cos+0x38>
 80123fc:	ee10 2a10 	vmov	r2, s0
 8012400:	460b      	mov	r3, r1
 8012402:	f7ed ff59 	bl	80002b8 <__aeabi_dsub>
 8012406:	ec41 0b10 	vmov	d0, r0, r1
 801240a:	b005      	add	sp, #20
 801240c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012410:	4668      	mov	r0, sp
 8012412:	f000 f86d 	bl	80124f0 <__ieee754_rem_pio2>
 8012416:	f000 0003 	and.w	r0, r0, #3
 801241a:	2801      	cmp	r0, #1
 801241c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012420:	ed9d 0b00 	vldr	d0, [sp]
 8012424:	d007      	beq.n	8012436 <cos+0x5e>
 8012426:	2802      	cmp	r0, #2
 8012428:	d00e      	beq.n	8012448 <cos+0x70>
 801242a:	2800      	cmp	r0, #0
 801242c:	d0de      	beq.n	80123ec <cos+0x14>
 801242e:	2001      	movs	r0, #1
 8012430:	f000 fe5a 	bl	80130e8 <__kernel_sin>
 8012434:	e7dc      	b.n	80123f0 <cos+0x18>
 8012436:	f000 fe57 	bl	80130e8 <__kernel_sin>
 801243a:	ec53 2b10 	vmov	r2, r3, d0
 801243e:	ee10 0a10 	vmov	r0, s0
 8012442:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012446:	e7de      	b.n	8012406 <cos+0x2e>
 8012448:	f000 fa46 	bl	80128d8 <__kernel_cos>
 801244c:	e7f5      	b.n	801243a <cos+0x62>
 801244e:	bf00      	nop
	...
 8012458:	3fe921fb 	.word	0x3fe921fb
 801245c:	7fefffff 	.word	0x7fefffff

08012460 <sin>:
 8012460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012462:	ec51 0b10 	vmov	r0, r1, d0
 8012466:	4a20      	ldr	r2, [pc, #128]	; (80124e8 <sin+0x88>)
 8012468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801246c:	4293      	cmp	r3, r2
 801246e:	dc07      	bgt.n	8012480 <sin+0x20>
 8012470:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80124e0 <sin+0x80>
 8012474:	2000      	movs	r0, #0
 8012476:	f000 fe37 	bl	80130e8 <__kernel_sin>
 801247a:	ec51 0b10 	vmov	r0, r1, d0
 801247e:	e007      	b.n	8012490 <sin+0x30>
 8012480:	4a1a      	ldr	r2, [pc, #104]	; (80124ec <sin+0x8c>)
 8012482:	4293      	cmp	r3, r2
 8012484:	dd09      	ble.n	801249a <sin+0x3a>
 8012486:	ee10 2a10 	vmov	r2, s0
 801248a:	460b      	mov	r3, r1
 801248c:	f7ed ff14 	bl	80002b8 <__aeabi_dsub>
 8012490:	ec41 0b10 	vmov	d0, r0, r1
 8012494:	b005      	add	sp, #20
 8012496:	f85d fb04 	ldr.w	pc, [sp], #4
 801249a:	4668      	mov	r0, sp
 801249c:	f000 f828 	bl	80124f0 <__ieee754_rem_pio2>
 80124a0:	f000 0003 	and.w	r0, r0, #3
 80124a4:	2801      	cmp	r0, #1
 80124a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124aa:	ed9d 0b00 	vldr	d0, [sp]
 80124ae:	d004      	beq.n	80124ba <sin+0x5a>
 80124b0:	2802      	cmp	r0, #2
 80124b2:	d005      	beq.n	80124c0 <sin+0x60>
 80124b4:	b970      	cbnz	r0, 80124d4 <sin+0x74>
 80124b6:	2001      	movs	r0, #1
 80124b8:	e7dd      	b.n	8012476 <sin+0x16>
 80124ba:	f000 fa0d 	bl	80128d8 <__kernel_cos>
 80124be:	e7dc      	b.n	801247a <sin+0x1a>
 80124c0:	2001      	movs	r0, #1
 80124c2:	f000 fe11 	bl	80130e8 <__kernel_sin>
 80124c6:	ec53 2b10 	vmov	r2, r3, d0
 80124ca:	ee10 0a10 	vmov	r0, s0
 80124ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80124d2:	e7dd      	b.n	8012490 <sin+0x30>
 80124d4:	f000 fa00 	bl	80128d8 <__kernel_cos>
 80124d8:	e7f5      	b.n	80124c6 <sin+0x66>
 80124da:	bf00      	nop
 80124dc:	f3af 8000 	nop.w
	...
 80124e8:	3fe921fb 	.word	0x3fe921fb
 80124ec:	7fefffff 	.word	0x7fefffff

080124f0 <__ieee754_rem_pio2>:
 80124f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f4:	ec57 6b10 	vmov	r6, r7, d0
 80124f8:	4bc3      	ldr	r3, [pc, #780]	; (8012808 <__ieee754_rem_pio2+0x318>)
 80124fa:	b08d      	sub	sp, #52	; 0x34
 80124fc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012500:	4598      	cmp	r8, r3
 8012502:	4604      	mov	r4, r0
 8012504:	9704      	str	r7, [sp, #16]
 8012506:	dc07      	bgt.n	8012518 <__ieee754_rem_pio2+0x28>
 8012508:	2200      	movs	r2, #0
 801250a:	2300      	movs	r3, #0
 801250c:	ed84 0b00 	vstr	d0, [r4]
 8012510:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012514:	2500      	movs	r5, #0
 8012516:	e027      	b.n	8012568 <__ieee754_rem_pio2+0x78>
 8012518:	4bbc      	ldr	r3, [pc, #752]	; (801280c <__ieee754_rem_pio2+0x31c>)
 801251a:	4598      	cmp	r8, r3
 801251c:	dc75      	bgt.n	801260a <__ieee754_rem_pio2+0x11a>
 801251e:	9b04      	ldr	r3, [sp, #16]
 8012520:	4dbb      	ldr	r5, [pc, #748]	; (8012810 <__ieee754_rem_pio2+0x320>)
 8012522:	2b00      	cmp	r3, #0
 8012524:	ee10 0a10 	vmov	r0, s0
 8012528:	a3a9      	add	r3, pc, #676	; (adr r3, 80127d0 <__ieee754_rem_pio2+0x2e0>)
 801252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252e:	4639      	mov	r1, r7
 8012530:	dd36      	ble.n	80125a0 <__ieee754_rem_pio2+0xb0>
 8012532:	f7ed fec1 	bl	80002b8 <__aeabi_dsub>
 8012536:	45a8      	cmp	r8, r5
 8012538:	4606      	mov	r6, r0
 801253a:	460f      	mov	r7, r1
 801253c:	d018      	beq.n	8012570 <__ieee754_rem_pio2+0x80>
 801253e:	a3a6      	add	r3, pc, #664	; (adr r3, 80127d8 <__ieee754_rem_pio2+0x2e8>)
 8012540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012544:	f7ed feb8 	bl	80002b8 <__aeabi_dsub>
 8012548:	4602      	mov	r2, r0
 801254a:	460b      	mov	r3, r1
 801254c:	e9c4 2300 	strd	r2, r3, [r4]
 8012550:	4630      	mov	r0, r6
 8012552:	4639      	mov	r1, r7
 8012554:	f7ed feb0 	bl	80002b8 <__aeabi_dsub>
 8012558:	a39f      	add	r3, pc, #636	; (adr r3, 80127d8 <__ieee754_rem_pio2+0x2e8>)
 801255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255e:	f7ed feab 	bl	80002b8 <__aeabi_dsub>
 8012562:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012566:	2501      	movs	r5, #1
 8012568:	4628      	mov	r0, r5
 801256a:	b00d      	add	sp, #52	; 0x34
 801256c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012570:	a39b      	add	r3, pc, #620	; (adr r3, 80127e0 <__ieee754_rem_pio2+0x2f0>)
 8012572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012576:	f7ed fe9f 	bl	80002b8 <__aeabi_dsub>
 801257a:	a39b      	add	r3, pc, #620	; (adr r3, 80127e8 <__ieee754_rem_pio2+0x2f8>)
 801257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012580:	4606      	mov	r6, r0
 8012582:	460f      	mov	r7, r1
 8012584:	f7ed fe98 	bl	80002b8 <__aeabi_dsub>
 8012588:	4602      	mov	r2, r0
 801258a:	460b      	mov	r3, r1
 801258c:	e9c4 2300 	strd	r2, r3, [r4]
 8012590:	4630      	mov	r0, r6
 8012592:	4639      	mov	r1, r7
 8012594:	f7ed fe90 	bl	80002b8 <__aeabi_dsub>
 8012598:	a393      	add	r3, pc, #588	; (adr r3, 80127e8 <__ieee754_rem_pio2+0x2f8>)
 801259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801259e:	e7de      	b.n	801255e <__ieee754_rem_pio2+0x6e>
 80125a0:	f7ed fe8c 	bl	80002bc <__adddf3>
 80125a4:	45a8      	cmp	r8, r5
 80125a6:	4606      	mov	r6, r0
 80125a8:	460f      	mov	r7, r1
 80125aa:	d016      	beq.n	80125da <__ieee754_rem_pio2+0xea>
 80125ac:	a38a      	add	r3, pc, #552	; (adr r3, 80127d8 <__ieee754_rem_pio2+0x2e8>)
 80125ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b2:	f7ed fe83 	bl	80002bc <__adddf3>
 80125b6:	4602      	mov	r2, r0
 80125b8:	460b      	mov	r3, r1
 80125ba:	e9c4 2300 	strd	r2, r3, [r4]
 80125be:	4630      	mov	r0, r6
 80125c0:	4639      	mov	r1, r7
 80125c2:	f7ed fe79 	bl	80002b8 <__aeabi_dsub>
 80125c6:	a384      	add	r3, pc, #528	; (adr r3, 80127d8 <__ieee754_rem_pio2+0x2e8>)
 80125c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125cc:	f7ed fe76 	bl	80002bc <__adddf3>
 80125d0:	f04f 35ff 	mov.w	r5, #4294967295
 80125d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80125d8:	e7c6      	b.n	8012568 <__ieee754_rem_pio2+0x78>
 80125da:	a381      	add	r3, pc, #516	; (adr r3, 80127e0 <__ieee754_rem_pio2+0x2f0>)
 80125dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e0:	f7ed fe6c 	bl	80002bc <__adddf3>
 80125e4:	a380      	add	r3, pc, #512	; (adr r3, 80127e8 <__ieee754_rem_pio2+0x2f8>)
 80125e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ea:	4606      	mov	r6, r0
 80125ec:	460f      	mov	r7, r1
 80125ee:	f7ed fe65 	bl	80002bc <__adddf3>
 80125f2:	4602      	mov	r2, r0
 80125f4:	460b      	mov	r3, r1
 80125f6:	e9c4 2300 	strd	r2, r3, [r4]
 80125fa:	4630      	mov	r0, r6
 80125fc:	4639      	mov	r1, r7
 80125fe:	f7ed fe5b 	bl	80002b8 <__aeabi_dsub>
 8012602:	a379      	add	r3, pc, #484	; (adr r3, 80127e8 <__ieee754_rem_pio2+0x2f8>)
 8012604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012608:	e7e0      	b.n	80125cc <__ieee754_rem_pio2+0xdc>
 801260a:	4b82      	ldr	r3, [pc, #520]	; (8012814 <__ieee754_rem_pio2+0x324>)
 801260c:	4598      	cmp	r8, r3
 801260e:	f300 80d0 	bgt.w	80127b2 <__ieee754_rem_pio2+0x2c2>
 8012612:	f000 fe23 	bl	801325c <fabs>
 8012616:	ec57 6b10 	vmov	r6, r7, d0
 801261a:	ee10 0a10 	vmov	r0, s0
 801261e:	a374      	add	r3, pc, #464	; (adr r3, 80127f0 <__ieee754_rem_pio2+0x300>)
 8012620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012624:	4639      	mov	r1, r7
 8012626:	f7ed ffff 	bl	8000628 <__aeabi_dmul>
 801262a:	2200      	movs	r2, #0
 801262c:	4b7a      	ldr	r3, [pc, #488]	; (8012818 <__ieee754_rem_pio2+0x328>)
 801262e:	f7ed fe45 	bl	80002bc <__adddf3>
 8012632:	f7ee faa9 	bl	8000b88 <__aeabi_d2iz>
 8012636:	4605      	mov	r5, r0
 8012638:	f7ed ff8c 	bl	8000554 <__aeabi_i2d>
 801263c:	a364      	add	r3, pc, #400	; (adr r3, 80127d0 <__ieee754_rem_pio2+0x2e0>)
 801263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012646:	f7ed ffef 	bl	8000628 <__aeabi_dmul>
 801264a:	4602      	mov	r2, r0
 801264c:	460b      	mov	r3, r1
 801264e:	4630      	mov	r0, r6
 8012650:	4639      	mov	r1, r7
 8012652:	f7ed fe31 	bl	80002b8 <__aeabi_dsub>
 8012656:	a360      	add	r3, pc, #384	; (adr r3, 80127d8 <__ieee754_rem_pio2+0x2e8>)
 8012658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265c:	4682      	mov	sl, r0
 801265e:	468b      	mov	fp, r1
 8012660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012664:	f7ed ffe0 	bl	8000628 <__aeabi_dmul>
 8012668:	2d1f      	cmp	r5, #31
 801266a:	4606      	mov	r6, r0
 801266c:	460f      	mov	r7, r1
 801266e:	dc0c      	bgt.n	801268a <__ieee754_rem_pio2+0x19a>
 8012670:	1e6a      	subs	r2, r5, #1
 8012672:	4b6a      	ldr	r3, [pc, #424]	; (801281c <__ieee754_rem_pio2+0x32c>)
 8012674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012678:	4543      	cmp	r3, r8
 801267a:	d006      	beq.n	801268a <__ieee754_rem_pio2+0x19a>
 801267c:	4632      	mov	r2, r6
 801267e:	463b      	mov	r3, r7
 8012680:	4650      	mov	r0, sl
 8012682:	4659      	mov	r1, fp
 8012684:	f7ed fe18 	bl	80002b8 <__aeabi_dsub>
 8012688:	e00e      	b.n	80126a8 <__ieee754_rem_pio2+0x1b8>
 801268a:	4632      	mov	r2, r6
 801268c:	463b      	mov	r3, r7
 801268e:	4650      	mov	r0, sl
 8012690:	4659      	mov	r1, fp
 8012692:	f7ed fe11 	bl	80002b8 <__aeabi_dsub>
 8012696:	ea4f 5328 	mov.w	r3, r8, asr #20
 801269a:	9305      	str	r3, [sp, #20]
 801269c:	9a05      	ldr	r2, [sp, #20]
 801269e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80126a2:	1ad3      	subs	r3, r2, r3
 80126a4:	2b10      	cmp	r3, #16
 80126a6:	dc02      	bgt.n	80126ae <__ieee754_rem_pio2+0x1be>
 80126a8:	e9c4 0100 	strd	r0, r1, [r4]
 80126ac:	e039      	b.n	8012722 <__ieee754_rem_pio2+0x232>
 80126ae:	a34c      	add	r3, pc, #304	; (adr r3, 80127e0 <__ieee754_rem_pio2+0x2f0>)
 80126b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126b8:	f7ed ffb6 	bl	8000628 <__aeabi_dmul>
 80126bc:	4606      	mov	r6, r0
 80126be:	460f      	mov	r7, r1
 80126c0:	4602      	mov	r2, r0
 80126c2:	460b      	mov	r3, r1
 80126c4:	4650      	mov	r0, sl
 80126c6:	4659      	mov	r1, fp
 80126c8:	f7ed fdf6 	bl	80002b8 <__aeabi_dsub>
 80126cc:	4602      	mov	r2, r0
 80126ce:	460b      	mov	r3, r1
 80126d0:	4680      	mov	r8, r0
 80126d2:	4689      	mov	r9, r1
 80126d4:	4650      	mov	r0, sl
 80126d6:	4659      	mov	r1, fp
 80126d8:	f7ed fdee 	bl	80002b8 <__aeabi_dsub>
 80126dc:	4632      	mov	r2, r6
 80126de:	463b      	mov	r3, r7
 80126e0:	f7ed fdea 	bl	80002b8 <__aeabi_dsub>
 80126e4:	a340      	add	r3, pc, #256	; (adr r3, 80127e8 <__ieee754_rem_pio2+0x2f8>)
 80126e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ea:	4606      	mov	r6, r0
 80126ec:	460f      	mov	r7, r1
 80126ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126f2:	f7ed ff99 	bl	8000628 <__aeabi_dmul>
 80126f6:	4632      	mov	r2, r6
 80126f8:	463b      	mov	r3, r7
 80126fa:	f7ed fddd 	bl	80002b8 <__aeabi_dsub>
 80126fe:	4602      	mov	r2, r0
 8012700:	460b      	mov	r3, r1
 8012702:	4606      	mov	r6, r0
 8012704:	460f      	mov	r7, r1
 8012706:	4640      	mov	r0, r8
 8012708:	4649      	mov	r1, r9
 801270a:	f7ed fdd5 	bl	80002b8 <__aeabi_dsub>
 801270e:	9a05      	ldr	r2, [sp, #20]
 8012710:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012714:	1ad3      	subs	r3, r2, r3
 8012716:	2b31      	cmp	r3, #49	; 0x31
 8012718:	dc20      	bgt.n	801275c <__ieee754_rem_pio2+0x26c>
 801271a:	e9c4 0100 	strd	r0, r1, [r4]
 801271e:	46c2      	mov	sl, r8
 8012720:	46cb      	mov	fp, r9
 8012722:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012726:	4650      	mov	r0, sl
 8012728:	4642      	mov	r2, r8
 801272a:	464b      	mov	r3, r9
 801272c:	4659      	mov	r1, fp
 801272e:	f7ed fdc3 	bl	80002b8 <__aeabi_dsub>
 8012732:	463b      	mov	r3, r7
 8012734:	4632      	mov	r2, r6
 8012736:	f7ed fdbf 	bl	80002b8 <__aeabi_dsub>
 801273a:	9b04      	ldr	r3, [sp, #16]
 801273c:	2b00      	cmp	r3, #0
 801273e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012742:	f6bf af11 	bge.w	8012568 <__ieee754_rem_pio2+0x78>
 8012746:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801274a:	6063      	str	r3, [r4, #4]
 801274c:	f8c4 8000 	str.w	r8, [r4]
 8012750:	60a0      	str	r0, [r4, #8]
 8012752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012756:	60e3      	str	r3, [r4, #12]
 8012758:	426d      	negs	r5, r5
 801275a:	e705      	b.n	8012568 <__ieee754_rem_pio2+0x78>
 801275c:	a326      	add	r3, pc, #152	; (adr r3, 80127f8 <__ieee754_rem_pio2+0x308>)
 801275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012766:	f7ed ff5f 	bl	8000628 <__aeabi_dmul>
 801276a:	4606      	mov	r6, r0
 801276c:	460f      	mov	r7, r1
 801276e:	4602      	mov	r2, r0
 8012770:	460b      	mov	r3, r1
 8012772:	4640      	mov	r0, r8
 8012774:	4649      	mov	r1, r9
 8012776:	f7ed fd9f 	bl	80002b8 <__aeabi_dsub>
 801277a:	4602      	mov	r2, r0
 801277c:	460b      	mov	r3, r1
 801277e:	4682      	mov	sl, r0
 8012780:	468b      	mov	fp, r1
 8012782:	4640      	mov	r0, r8
 8012784:	4649      	mov	r1, r9
 8012786:	f7ed fd97 	bl	80002b8 <__aeabi_dsub>
 801278a:	4632      	mov	r2, r6
 801278c:	463b      	mov	r3, r7
 801278e:	f7ed fd93 	bl	80002b8 <__aeabi_dsub>
 8012792:	a31b      	add	r3, pc, #108	; (adr r3, 8012800 <__ieee754_rem_pio2+0x310>)
 8012794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012798:	4606      	mov	r6, r0
 801279a:	460f      	mov	r7, r1
 801279c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127a0:	f7ed ff42 	bl	8000628 <__aeabi_dmul>
 80127a4:	4632      	mov	r2, r6
 80127a6:	463b      	mov	r3, r7
 80127a8:	f7ed fd86 	bl	80002b8 <__aeabi_dsub>
 80127ac:	4606      	mov	r6, r0
 80127ae:	460f      	mov	r7, r1
 80127b0:	e764      	b.n	801267c <__ieee754_rem_pio2+0x18c>
 80127b2:	4b1b      	ldr	r3, [pc, #108]	; (8012820 <__ieee754_rem_pio2+0x330>)
 80127b4:	4598      	cmp	r8, r3
 80127b6:	dd35      	ble.n	8012824 <__ieee754_rem_pio2+0x334>
 80127b8:	ee10 2a10 	vmov	r2, s0
 80127bc:	463b      	mov	r3, r7
 80127be:	4630      	mov	r0, r6
 80127c0:	4639      	mov	r1, r7
 80127c2:	f7ed fd79 	bl	80002b8 <__aeabi_dsub>
 80127c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80127ca:	e9c4 0100 	strd	r0, r1, [r4]
 80127ce:	e6a1      	b.n	8012514 <__ieee754_rem_pio2+0x24>
 80127d0:	54400000 	.word	0x54400000
 80127d4:	3ff921fb 	.word	0x3ff921fb
 80127d8:	1a626331 	.word	0x1a626331
 80127dc:	3dd0b461 	.word	0x3dd0b461
 80127e0:	1a600000 	.word	0x1a600000
 80127e4:	3dd0b461 	.word	0x3dd0b461
 80127e8:	2e037073 	.word	0x2e037073
 80127ec:	3ba3198a 	.word	0x3ba3198a
 80127f0:	6dc9c883 	.word	0x6dc9c883
 80127f4:	3fe45f30 	.word	0x3fe45f30
 80127f8:	2e000000 	.word	0x2e000000
 80127fc:	3ba3198a 	.word	0x3ba3198a
 8012800:	252049c1 	.word	0x252049c1
 8012804:	397b839a 	.word	0x397b839a
 8012808:	3fe921fb 	.word	0x3fe921fb
 801280c:	4002d97b 	.word	0x4002d97b
 8012810:	3ff921fb 	.word	0x3ff921fb
 8012814:	413921fb 	.word	0x413921fb
 8012818:	3fe00000 	.word	0x3fe00000
 801281c:	08017e68 	.word	0x08017e68
 8012820:	7fefffff 	.word	0x7fefffff
 8012824:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012828:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801282c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012830:	4630      	mov	r0, r6
 8012832:	460f      	mov	r7, r1
 8012834:	f7ee f9a8 	bl	8000b88 <__aeabi_d2iz>
 8012838:	f7ed fe8c 	bl	8000554 <__aeabi_i2d>
 801283c:	4602      	mov	r2, r0
 801283e:	460b      	mov	r3, r1
 8012840:	4630      	mov	r0, r6
 8012842:	4639      	mov	r1, r7
 8012844:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012848:	f7ed fd36 	bl	80002b8 <__aeabi_dsub>
 801284c:	2200      	movs	r2, #0
 801284e:	4b1f      	ldr	r3, [pc, #124]	; (80128cc <__ieee754_rem_pio2+0x3dc>)
 8012850:	f7ed feea 	bl	8000628 <__aeabi_dmul>
 8012854:	460f      	mov	r7, r1
 8012856:	4606      	mov	r6, r0
 8012858:	f7ee f996 	bl	8000b88 <__aeabi_d2iz>
 801285c:	f7ed fe7a 	bl	8000554 <__aeabi_i2d>
 8012860:	4602      	mov	r2, r0
 8012862:	460b      	mov	r3, r1
 8012864:	4630      	mov	r0, r6
 8012866:	4639      	mov	r1, r7
 8012868:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801286c:	f7ed fd24 	bl	80002b8 <__aeabi_dsub>
 8012870:	2200      	movs	r2, #0
 8012872:	4b16      	ldr	r3, [pc, #88]	; (80128cc <__ieee754_rem_pio2+0x3dc>)
 8012874:	f7ed fed8 	bl	8000628 <__aeabi_dmul>
 8012878:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801287c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012880:	f04f 0803 	mov.w	r8, #3
 8012884:	2600      	movs	r6, #0
 8012886:	2700      	movs	r7, #0
 8012888:	4632      	mov	r2, r6
 801288a:	463b      	mov	r3, r7
 801288c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012890:	f108 3aff 	add.w	sl, r8, #4294967295
 8012894:	f7ee f930 	bl	8000af8 <__aeabi_dcmpeq>
 8012898:	b9b0      	cbnz	r0, 80128c8 <__ieee754_rem_pio2+0x3d8>
 801289a:	4b0d      	ldr	r3, [pc, #52]	; (80128d0 <__ieee754_rem_pio2+0x3e0>)
 801289c:	9301      	str	r3, [sp, #4]
 801289e:	2302      	movs	r3, #2
 80128a0:	9300      	str	r3, [sp, #0]
 80128a2:	462a      	mov	r2, r5
 80128a4:	4643      	mov	r3, r8
 80128a6:	4621      	mov	r1, r4
 80128a8:	a806      	add	r0, sp, #24
 80128aa:	f000 f8dd 	bl	8012a68 <__kernel_rem_pio2>
 80128ae:	9b04      	ldr	r3, [sp, #16]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	4605      	mov	r5, r0
 80128b4:	f6bf ae58 	bge.w	8012568 <__ieee754_rem_pio2+0x78>
 80128b8:	6863      	ldr	r3, [r4, #4]
 80128ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80128be:	6063      	str	r3, [r4, #4]
 80128c0:	68e3      	ldr	r3, [r4, #12]
 80128c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80128c6:	e746      	b.n	8012756 <__ieee754_rem_pio2+0x266>
 80128c8:	46d0      	mov	r8, sl
 80128ca:	e7dd      	b.n	8012888 <__ieee754_rem_pio2+0x398>
 80128cc:	41700000 	.word	0x41700000
 80128d0:	08017ee8 	.word	0x08017ee8
 80128d4:	00000000 	.word	0x00000000

080128d8 <__kernel_cos>:
 80128d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128dc:	ec59 8b10 	vmov	r8, r9, d0
 80128e0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80128e4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80128e8:	ed2d 8b02 	vpush	{d8}
 80128ec:	eeb0 8a41 	vmov.f32	s16, s2
 80128f0:	eef0 8a61 	vmov.f32	s17, s3
 80128f4:	da07      	bge.n	8012906 <__kernel_cos+0x2e>
 80128f6:	ee10 0a10 	vmov	r0, s0
 80128fa:	4649      	mov	r1, r9
 80128fc:	f7ee f944 	bl	8000b88 <__aeabi_d2iz>
 8012900:	2800      	cmp	r0, #0
 8012902:	f000 8089 	beq.w	8012a18 <__kernel_cos+0x140>
 8012906:	4642      	mov	r2, r8
 8012908:	464b      	mov	r3, r9
 801290a:	4640      	mov	r0, r8
 801290c:	4649      	mov	r1, r9
 801290e:	f7ed fe8b 	bl	8000628 <__aeabi_dmul>
 8012912:	2200      	movs	r2, #0
 8012914:	4b4e      	ldr	r3, [pc, #312]	; (8012a50 <__kernel_cos+0x178>)
 8012916:	4604      	mov	r4, r0
 8012918:	460d      	mov	r5, r1
 801291a:	f7ed fe85 	bl	8000628 <__aeabi_dmul>
 801291e:	a340      	add	r3, pc, #256	; (adr r3, 8012a20 <__kernel_cos+0x148>)
 8012920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012924:	4682      	mov	sl, r0
 8012926:	468b      	mov	fp, r1
 8012928:	4620      	mov	r0, r4
 801292a:	4629      	mov	r1, r5
 801292c:	f7ed fe7c 	bl	8000628 <__aeabi_dmul>
 8012930:	a33d      	add	r3, pc, #244	; (adr r3, 8012a28 <__kernel_cos+0x150>)
 8012932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012936:	f7ed fcc1 	bl	80002bc <__adddf3>
 801293a:	4622      	mov	r2, r4
 801293c:	462b      	mov	r3, r5
 801293e:	f7ed fe73 	bl	8000628 <__aeabi_dmul>
 8012942:	a33b      	add	r3, pc, #236	; (adr r3, 8012a30 <__kernel_cos+0x158>)
 8012944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012948:	f7ed fcb6 	bl	80002b8 <__aeabi_dsub>
 801294c:	4622      	mov	r2, r4
 801294e:	462b      	mov	r3, r5
 8012950:	f7ed fe6a 	bl	8000628 <__aeabi_dmul>
 8012954:	a338      	add	r3, pc, #224	; (adr r3, 8012a38 <__kernel_cos+0x160>)
 8012956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295a:	f7ed fcaf 	bl	80002bc <__adddf3>
 801295e:	4622      	mov	r2, r4
 8012960:	462b      	mov	r3, r5
 8012962:	f7ed fe61 	bl	8000628 <__aeabi_dmul>
 8012966:	a336      	add	r3, pc, #216	; (adr r3, 8012a40 <__kernel_cos+0x168>)
 8012968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296c:	f7ed fca4 	bl	80002b8 <__aeabi_dsub>
 8012970:	4622      	mov	r2, r4
 8012972:	462b      	mov	r3, r5
 8012974:	f7ed fe58 	bl	8000628 <__aeabi_dmul>
 8012978:	a333      	add	r3, pc, #204	; (adr r3, 8012a48 <__kernel_cos+0x170>)
 801297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297e:	f7ed fc9d 	bl	80002bc <__adddf3>
 8012982:	4622      	mov	r2, r4
 8012984:	462b      	mov	r3, r5
 8012986:	f7ed fe4f 	bl	8000628 <__aeabi_dmul>
 801298a:	4622      	mov	r2, r4
 801298c:	462b      	mov	r3, r5
 801298e:	f7ed fe4b 	bl	8000628 <__aeabi_dmul>
 8012992:	ec53 2b18 	vmov	r2, r3, d8
 8012996:	4604      	mov	r4, r0
 8012998:	460d      	mov	r5, r1
 801299a:	4640      	mov	r0, r8
 801299c:	4649      	mov	r1, r9
 801299e:	f7ed fe43 	bl	8000628 <__aeabi_dmul>
 80129a2:	460b      	mov	r3, r1
 80129a4:	4602      	mov	r2, r0
 80129a6:	4629      	mov	r1, r5
 80129a8:	4620      	mov	r0, r4
 80129aa:	f7ed fc85 	bl	80002b8 <__aeabi_dsub>
 80129ae:	4b29      	ldr	r3, [pc, #164]	; (8012a54 <__kernel_cos+0x17c>)
 80129b0:	429e      	cmp	r6, r3
 80129b2:	4680      	mov	r8, r0
 80129b4:	4689      	mov	r9, r1
 80129b6:	dc11      	bgt.n	80129dc <__kernel_cos+0x104>
 80129b8:	4602      	mov	r2, r0
 80129ba:	460b      	mov	r3, r1
 80129bc:	4650      	mov	r0, sl
 80129be:	4659      	mov	r1, fp
 80129c0:	f7ed fc7a 	bl	80002b8 <__aeabi_dsub>
 80129c4:	460b      	mov	r3, r1
 80129c6:	4924      	ldr	r1, [pc, #144]	; (8012a58 <__kernel_cos+0x180>)
 80129c8:	4602      	mov	r2, r0
 80129ca:	2000      	movs	r0, #0
 80129cc:	f7ed fc74 	bl	80002b8 <__aeabi_dsub>
 80129d0:	ecbd 8b02 	vpop	{d8}
 80129d4:	ec41 0b10 	vmov	d0, r0, r1
 80129d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129dc:	4b1f      	ldr	r3, [pc, #124]	; (8012a5c <__kernel_cos+0x184>)
 80129de:	491e      	ldr	r1, [pc, #120]	; (8012a58 <__kernel_cos+0x180>)
 80129e0:	429e      	cmp	r6, r3
 80129e2:	bfcc      	ite	gt
 80129e4:	4d1e      	ldrgt	r5, [pc, #120]	; (8012a60 <__kernel_cos+0x188>)
 80129e6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80129ea:	2400      	movs	r4, #0
 80129ec:	4622      	mov	r2, r4
 80129ee:	462b      	mov	r3, r5
 80129f0:	2000      	movs	r0, #0
 80129f2:	f7ed fc61 	bl	80002b8 <__aeabi_dsub>
 80129f6:	4622      	mov	r2, r4
 80129f8:	4606      	mov	r6, r0
 80129fa:	460f      	mov	r7, r1
 80129fc:	462b      	mov	r3, r5
 80129fe:	4650      	mov	r0, sl
 8012a00:	4659      	mov	r1, fp
 8012a02:	f7ed fc59 	bl	80002b8 <__aeabi_dsub>
 8012a06:	4642      	mov	r2, r8
 8012a08:	464b      	mov	r3, r9
 8012a0a:	f7ed fc55 	bl	80002b8 <__aeabi_dsub>
 8012a0e:	4602      	mov	r2, r0
 8012a10:	460b      	mov	r3, r1
 8012a12:	4630      	mov	r0, r6
 8012a14:	4639      	mov	r1, r7
 8012a16:	e7d9      	b.n	80129cc <__kernel_cos+0xf4>
 8012a18:	2000      	movs	r0, #0
 8012a1a:	490f      	ldr	r1, [pc, #60]	; (8012a58 <__kernel_cos+0x180>)
 8012a1c:	e7d8      	b.n	80129d0 <__kernel_cos+0xf8>
 8012a1e:	bf00      	nop
 8012a20:	be8838d4 	.word	0xbe8838d4
 8012a24:	bda8fae9 	.word	0xbda8fae9
 8012a28:	bdb4b1c4 	.word	0xbdb4b1c4
 8012a2c:	3e21ee9e 	.word	0x3e21ee9e
 8012a30:	809c52ad 	.word	0x809c52ad
 8012a34:	3e927e4f 	.word	0x3e927e4f
 8012a38:	19cb1590 	.word	0x19cb1590
 8012a3c:	3efa01a0 	.word	0x3efa01a0
 8012a40:	16c15177 	.word	0x16c15177
 8012a44:	3f56c16c 	.word	0x3f56c16c
 8012a48:	5555554c 	.word	0x5555554c
 8012a4c:	3fa55555 	.word	0x3fa55555
 8012a50:	3fe00000 	.word	0x3fe00000
 8012a54:	3fd33332 	.word	0x3fd33332
 8012a58:	3ff00000 	.word	0x3ff00000
 8012a5c:	3fe90000 	.word	0x3fe90000
 8012a60:	3fd20000 	.word	0x3fd20000
 8012a64:	00000000 	.word	0x00000000

08012a68 <__kernel_rem_pio2>:
 8012a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	ed2d 8b02 	vpush	{d8}
 8012a70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012a74:	1ed4      	subs	r4, r2, #3
 8012a76:	9308      	str	r3, [sp, #32]
 8012a78:	9101      	str	r1, [sp, #4]
 8012a7a:	4bc5      	ldr	r3, [pc, #788]	; (8012d90 <__kernel_rem_pio2+0x328>)
 8012a7c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012a7e:	9009      	str	r0, [sp, #36]	; 0x24
 8012a80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a84:	9304      	str	r3, [sp, #16]
 8012a86:	9b08      	ldr	r3, [sp, #32]
 8012a88:	3b01      	subs	r3, #1
 8012a8a:	9307      	str	r3, [sp, #28]
 8012a8c:	2318      	movs	r3, #24
 8012a8e:	fb94 f4f3 	sdiv	r4, r4, r3
 8012a92:	f06f 0317 	mvn.w	r3, #23
 8012a96:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012a9a:	fb04 3303 	mla	r3, r4, r3, r3
 8012a9e:	eb03 0a02 	add.w	sl, r3, r2
 8012aa2:	9b04      	ldr	r3, [sp, #16]
 8012aa4:	9a07      	ldr	r2, [sp, #28]
 8012aa6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012d80 <__kernel_rem_pio2+0x318>
 8012aaa:	eb03 0802 	add.w	r8, r3, r2
 8012aae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012ab0:	1aa7      	subs	r7, r4, r2
 8012ab2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012ab6:	ae22      	add	r6, sp, #136	; 0x88
 8012ab8:	2500      	movs	r5, #0
 8012aba:	4545      	cmp	r5, r8
 8012abc:	dd13      	ble.n	8012ae6 <__kernel_rem_pio2+0x7e>
 8012abe:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012d80 <__kernel_rem_pio2+0x318>
 8012ac2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012ac6:	2600      	movs	r6, #0
 8012ac8:	9b04      	ldr	r3, [sp, #16]
 8012aca:	429e      	cmp	r6, r3
 8012acc:	dc32      	bgt.n	8012b34 <__kernel_rem_pio2+0xcc>
 8012ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ad0:	9302      	str	r3, [sp, #8]
 8012ad2:	9b08      	ldr	r3, [sp, #32]
 8012ad4:	199d      	adds	r5, r3, r6
 8012ad6:	ab22      	add	r3, sp, #136	; 0x88
 8012ad8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012adc:	9306      	str	r3, [sp, #24]
 8012ade:	ec59 8b18 	vmov	r8, r9, d8
 8012ae2:	2700      	movs	r7, #0
 8012ae4:	e01f      	b.n	8012b26 <__kernel_rem_pio2+0xbe>
 8012ae6:	42ef      	cmn	r7, r5
 8012ae8:	d407      	bmi.n	8012afa <__kernel_rem_pio2+0x92>
 8012aea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012aee:	f7ed fd31 	bl	8000554 <__aeabi_i2d>
 8012af2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012af6:	3501      	adds	r5, #1
 8012af8:	e7df      	b.n	8012aba <__kernel_rem_pio2+0x52>
 8012afa:	ec51 0b18 	vmov	r0, r1, d8
 8012afe:	e7f8      	b.n	8012af2 <__kernel_rem_pio2+0x8a>
 8012b00:	9906      	ldr	r1, [sp, #24]
 8012b02:	9d02      	ldr	r5, [sp, #8]
 8012b04:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012b08:	9106      	str	r1, [sp, #24]
 8012b0a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012b0e:	9502      	str	r5, [sp, #8]
 8012b10:	f7ed fd8a 	bl	8000628 <__aeabi_dmul>
 8012b14:	4602      	mov	r2, r0
 8012b16:	460b      	mov	r3, r1
 8012b18:	4640      	mov	r0, r8
 8012b1a:	4649      	mov	r1, r9
 8012b1c:	f7ed fbce 	bl	80002bc <__adddf3>
 8012b20:	3701      	adds	r7, #1
 8012b22:	4680      	mov	r8, r0
 8012b24:	4689      	mov	r9, r1
 8012b26:	9b07      	ldr	r3, [sp, #28]
 8012b28:	429f      	cmp	r7, r3
 8012b2a:	dde9      	ble.n	8012b00 <__kernel_rem_pio2+0x98>
 8012b2c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012b30:	3601      	adds	r6, #1
 8012b32:	e7c9      	b.n	8012ac8 <__kernel_rem_pio2+0x60>
 8012b34:	9b04      	ldr	r3, [sp, #16]
 8012b36:	aa0e      	add	r2, sp, #56	; 0x38
 8012b38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b3c:	930c      	str	r3, [sp, #48]	; 0x30
 8012b3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012b40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012b44:	9c04      	ldr	r4, [sp, #16]
 8012b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b48:	ab9a      	add	r3, sp, #616	; 0x268
 8012b4a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012b4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012b52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b56:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012b5a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012b5e:	ab9a      	add	r3, sp, #616	; 0x268
 8012b60:	445b      	add	r3, fp
 8012b62:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012b66:	2500      	movs	r5, #0
 8012b68:	1b63      	subs	r3, r4, r5
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	dc78      	bgt.n	8012c60 <__kernel_rem_pio2+0x1f8>
 8012b6e:	4650      	mov	r0, sl
 8012b70:	ec49 8b10 	vmov	d0, r8, r9
 8012b74:	f000 fc00 	bl	8013378 <scalbn>
 8012b78:	ec57 6b10 	vmov	r6, r7, d0
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012b82:	ee10 0a10 	vmov	r0, s0
 8012b86:	4639      	mov	r1, r7
 8012b88:	f7ed fd4e 	bl	8000628 <__aeabi_dmul>
 8012b8c:	ec41 0b10 	vmov	d0, r0, r1
 8012b90:	f000 fb6e 	bl	8013270 <floor>
 8012b94:	2200      	movs	r2, #0
 8012b96:	ec51 0b10 	vmov	r0, r1, d0
 8012b9a:	4b7e      	ldr	r3, [pc, #504]	; (8012d94 <__kernel_rem_pio2+0x32c>)
 8012b9c:	f7ed fd44 	bl	8000628 <__aeabi_dmul>
 8012ba0:	4602      	mov	r2, r0
 8012ba2:	460b      	mov	r3, r1
 8012ba4:	4630      	mov	r0, r6
 8012ba6:	4639      	mov	r1, r7
 8012ba8:	f7ed fb86 	bl	80002b8 <__aeabi_dsub>
 8012bac:	460f      	mov	r7, r1
 8012bae:	4606      	mov	r6, r0
 8012bb0:	f7ed ffea 	bl	8000b88 <__aeabi_d2iz>
 8012bb4:	9006      	str	r0, [sp, #24]
 8012bb6:	f7ed fccd 	bl	8000554 <__aeabi_i2d>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	4639      	mov	r1, r7
 8012bc2:	f7ed fb79 	bl	80002b8 <__aeabi_dsub>
 8012bc6:	f1ba 0f00 	cmp.w	sl, #0
 8012bca:	4606      	mov	r6, r0
 8012bcc:	460f      	mov	r7, r1
 8012bce:	dd6c      	ble.n	8012caa <__kernel_rem_pio2+0x242>
 8012bd0:	1e62      	subs	r2, r4, #1
 8012bd2:	ab0e      	add	r3, sp, #56	; 0x38
 8012bd4:	f1ca 0118 	rsb	r1, sl, #24
 8012bd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012bdc:	9d06      	ldr	r5, [sp, #24]
 8012bde:	fa40 f301 	asr.w	r3, r0, r1
 8012be2:	441d      	add	r5, r3
 8012be4:	408b      	lsls	r3, r1
 8012be6:	1ac0      	subs	r0, r0, r3
 8012be8:	ab0e      	add	r3, sp, #56	; 0x38
 8012bea:	9506      	str	r5, [sp, #24]
 8012bec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012bf0:	f1ca 0317 	rsb	r3, sl, #23
 8012bf4:	fa40 f303 	asr.w	r3, r0, r3
 8012bf8:	9302      	str	r3, [sp, #8]
 8012bfa:	9b02      	ldr	r3, [sp, #8]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	dd62      	ble.n	8012cc6 <__kernel_rem_pio2+0x25e>
 8012c00:	9b06      	ldr	r3, [sp, #24]
 8012c02:	2200      	movs	r2, #0
 8012c04:	3301      	adds	r3, #1
 8012c06:	9306      	str	r3, [sp, #24]
 8012c08:	4615      	mov	r5, r2
 8012c0a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012c0e:	4294      	cmp	r4, r2
 8012c10:	f300 8095 	bgt.w	8012d3e <__kernel_rem_pio2+0x2d6>
 8012c14:	f1ba 0f00 	cmp.w	sl, #0
 8012c18:	dd07      	ble.n	8012c2a <__kernel_rem_pio2+0x1c2>
 8012c1a:	f1ba 0f01 	cmp.w	sl, #1
 8012c1e:	f000 80a2 	beq.w	8012d66 <__kernel_rem_pio2+0x2fe>
 8012c22:	f1ba 0f02 	cmp.w	sl, #2
 8012c26:	f000 80c1 	beq.w	8012dac <__kernel_rem_pio2+0x344>
 8012c2a:	9b02      	ldr	r3, [sp, #8]
 8012c2c:	2b02      	cmp	r3, #2
 8012c2e:	d14a      	bne.n	8012cc6 <__kernel_rem_pio2+0x25e>
 8012c30:	4632      	mov	r2, r6
 8012c32:	463b      	mov	r3, r7
 8012c34:	2000      	movs	r0, #0
 8012c36:	4958      	ldr	r1, [pc, #352]	; (8012d98 <__kernel_rem_pio2+0x330>)
 8012c38:	f7ed fb3e 	bl	80002b8 <__aeabi_dsub>
 8012c3c:	4606      	mov	r6, r0
 8012c3e:	460f      	mov	r7, r1
 8012c40:	2d00      	cmp	r5, #0
 8012c42:	d040      	beq.n	8012cc6 <__kernel_rem_pio2+0x25e>
 8012c44:	4650      	mov	r0, sl
 8012c46:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012d88 <__kernel_rem_pio2+0x320>
 8012c4a:	f000 fb95 	bl	8013378 <scalbn>
 8012c4e:	4630      	mov	r0, r6
 8012c50:	4639      	mov	r1, r7
 8012c52:	ec53 2b10 	vmov	r2, r3, d0
 8012c56:	f7ed fb2f 	bl	80002b8 <__aeabi_dsub>
 8012c5a:	4606      	mov	r6, r0
 8012c5c:	460f      	mov	r7, r1
 8012c5e:	e032      	b.n	8012cc6 <__kernel_rem_pio2+0x25e>
 8012c60:	2200      	movs	r2, #0
 8012c62:	4b4e      	ldr	r3, [pc, #312]	; (8012d9c <__kernel_rem_pio2+0x334>)
 8012c64:	4640      	mov	r0, r8
 8012c66:	4649      	mov	r1, r9
 8012c68:	f7ed fcde 	bl	8000628 <__aeabi_dmul>
 8012c6c:	f7ed ff8c 	bl	8000b88 <__aeabi_d2iz>
 8012c70:	f7ed fc70 	bl	8000554 <__aeabi_i2d>
 8012c74:	2200      	movs	r2, #0
 8012c76:	4b4a      	ldr	r3, [pc, #296]	; (8012da0 <__kernel_rem_pio2+0x338>)
 8012c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c7c:	f7ed fcd4 	bl	8000628 <__aeabi_dmul>
 8012c80:	4602      	mov	r2, r0
 8012c82:	460b      	mov	r3, r1
 8012c84:	4640      	mov	r0, r8
 8012c86:	4649      	mov	r1, r9
 8012c88:	f7ed fb16 	bl	80002b8 <__aeabi_dsub>
 8012c8c:	f7ed ff7c 	bl	8000b88 <__aeabi_d2iz>
 8012c90:	ab0e      	add	r3, sp, #56	; 0x38
 8012c92:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012c96:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c9e:	f7ed fb0d 	bl	80002bc <__adddf3>
 8012ca2:	3501      	adds	r5, #1
 8012ca4:	4680      	mov	r8, r0
 8012ca6:	4689      	mov	r9, r1
 8012ca8:	e75e      	b.n	8012b68 <__kernel_rem_pio2+0x100>
 8012caa:	d105      	bne.n	8012cb8 <__kernel_rem_pio2+0x250>
 8012cac:	1e63      	subs	r3, r4, #1
 8012cae:	aa0e      	add	r2, sp, #56	; 0x38
 8012cb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012cb4:	15c3      	asrs	r3, r0, #23
 8012cb6:	e79f      	b.n	8012bf8 <__kernel_rem_pio2+0x190>
 8012cb8:	2200      	movs	r2, #0
 8012cba:	4b3a      	ldr	r3, [pc, #232]	; (8012da4 <__kernel_rem_pio2+0x33c>)
 8012cbc:	f7ed ff3a 	bl	8000b34 <__aeabi_dcmpge>
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	d139      	bne.n	8012d38 <__kernel_rem_pio2+0x2d0>
 8012cc4:	9002      	str	r0, [sp, #8]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	2300      	movs	r3, #0
 8012cca:	4630      	mov	r0, r6
 8012ccc:	4639      	mov	r1, r7
 8012cce:	f7ed ff13 	bl	8000af8 <__aeabi_dcmpeq>
 8012cd2:	2800      	cmp	r0, #0
 8012cd4:	f000 80c7 	beq.w	8012e66 <__kernel_rem_pio2+0x3fe>
 8012cd8:	1e65      	subs	r5, r4, #1
 8012cda:	462b      	mov	r3, r5
 8012cdc:	2200      	movs	r2, #0
 8012cde:	9904      	ldr	r1, [sp, #16]
 8012ce0:	428b      	cmp	r3, r1
 8012ce2:	da6a      	bge.n	8012dba <__kernel_rem_pio2+0x352>
 8012ce4:	2a00      	cmp	r2, #0
 8012ce6:	f000 8088 	beq.w	8012dfa <__kernel_rem_pio2+0x392>
 8012cea:	ab0e      	add	r3, sp, #56	; 0x38
 8012cec:	f1aa 0a18 	sub.w	sl, sl, #24
 8012cf0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f000 80b4 	beq.w	8012e62 <__kernel_rem_pio2+0x3fa>
 8012cfa:	4650      	mov	r0, sl
 8012cfc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012d88 <__kernel_rem_pio2+0x320>
 8012d00:	f000 fb3a 	bl	8013378 <scalbn>
 8012d04:	00ec      	lsls	r4, r5, #3
 8012d06:	ab72      	add	r3, sp, #456	; 0x1c8
 8012d08:	191e      	adds	r6, r3, r4
 8012d0a:	ec59 8b10 	vmov	r8, r9, d0
 8012d0e:	f106 0a08 	add.w	sl, r6, #8
 8012d12:	462f      	mov	r7, r5
 8012d14:	2f00      	cmp	r7, #0
 8012d16:	f280 80df 	bge.w	8012ed8 <__kernel_rem_pio2+0x470>
 8012d1a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012d80 <__kernel_rem_pio2+0x318>
 8012d1e:	f04f 0a00 	mov.w	sl, #0
 8012d22:	eba5 030a 	sub.w	r3, r5, sl
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	f2c0 810a 	blt.w	8012f40 <__kernel_rem_pio2+0x4d8>
 8012d2c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012da8 <__kernel_rem_pio2+0x340>
 8012d30:	ec59 8b18 	vmov	r8, r9, d8
 8012d34:	2700      	movs	r7, #0
 8012d36:	e0f5      	b.n	8012f24 <__kernel_rem_pio2+0x4bc>
 8012d38:	2302      	movs	r3, #2
 8012d3a:	9302      	str	r3, [sp, #8]
 8012d3c:	e760      	b.n	8012c00 <__kernel_rem_pio2+0x198>
 8012d3e:	ab0e      	add	r3, sp, #56	; 0x38
 8012d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d44:	b94d      	cbnz	r5, 8012d5a <__kernel_rem_pio2+0x2f2>
 8012d46:	b12b      	cbz	r3, 8012d54 <__kernel_rem_pio2+0x2ec>
 8012d48:	a80e      	add	r0, sp, #56	; 0x38
 8012d4a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012d4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012d52:	2301      	movs	r3, #1
 8012d54:	3201      	adds	r2, #1
 8012d56:	461d      	mov	r5, r3
 8012d58:	e759      	b.n	8012c0e <__kernel_rem_pio2+0x1a6>
 8012d5a:	a80e      	add	r0, sp, #56	; 0x38
 8012d5c:	1acb      	subs	r3, r1, r3
 8012d5e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012d62:	462b      	mov	r3, r5
 8012d64:	e7f6      	b.n	8012d54 <__kernel_rem_pio2+0x2ec>
 8012d66:	1e62      	subs	r2, r4, #1
 8012d68:	ab0e      	add	r3, sp, #56	; 0x38
 8012d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012d72:	a90e      	add	r1, sp, #56	; 0x38
 8012d74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012d78:	e757      	b.n	8012c2a <__kernel_rem_pio2+0x1c2>
 8012d7a:	bf00      	nop
 8012d7c:	f3af 8000 	nop.w
	...
 8012d8c:	3ff00000 	.word	0x3ff00000
 8012d90:	08018030 	.word	0x08018030
 8012d94:	40200000 	.word	0x40200000
 8012d98:	3ff00000 	.word	0x3ff00000
 8012d9c:	3e700000 	.word	0x3e700000
 8012da0:	41700000 	.word	0x41700000
 8012da4:	3fe00000 	.word	0x3fe00000
 8012da8:	08017ff0 	.word	0x08017ff0
 8012dac:	1e62      	subs	r2, r4, #1
 8012dae:	ab0e      	add	r3, sp, #56	; 0x38
 8012db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012db4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012db8:	e7db      	b.n	8012d72 <__kernel_rem_pio2+0x30a>
 8012dba:	a90e      	add	r1, sp, #56	; 0x38
 8012dbc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012dc0:	3b01      	subs	r3, #1
 8012dc2:	430a      	orrs	r2, r1
 8012dc4:	e78b      	b.n	8012cde <__kernel_rem_pio2+0x276>
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012dcc:	2900      	cmp	r1, #0
 8012dce:	d0fa      	beq.n	8012dc6 <__kernel_rem_pio2+0x35e>
 8012dd0:	9a08      	ldr	r2, [sp, #32]
 8012dd2:	4422      	add	r2, r4
 8012dd4:	00d2      	lsls	r2, r2, #3
 8012dd6:	a922      	add	r1, sp, #136	; 0x88
 8012dd8:	18e3      	adds	r3, r4, r3
 8012dda:	9206      	str	r2, [sp, #24]
 8012ddc:	440a      	add	r2, r1
 8012dde:	9302      	str	r3, [sp, #8]
 8012de0:	f10b 0108 	add.w	r1, fp, #8
 8012de4:	f102 0308 	add.w	r3, r2, #8
 8012de8:	1c66      	adds	r6, r4, #1
 8012dea:	910a      	str	r1, [sp, #40]	; 0x28
 8012dec:	2500      	movs	r5, #0
 8012dee:	930d      	str	r3, [sp, #52]	; 0x34
 8012df0:	9b02      	ldr	r3, [sp, #8]
 8012df2:	42b3      	cmp	r3, r6
 8012df4:	da04      	bge.n	8012e00 <__kernel_rem_pio2+0x398>
 8012df6:	461c      	mov	r4, r3
 8012df8:	e6a6      	b.n	8012b48 <__kernel_rem_pio2+0xe0>
 8012dfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	e7e3      	b.n	8012dc8 <__kernel_rem_pio2+0x360>
 8012e00:	9b06      	ldr	r3, [sp, #24]
 8012e02:	18ef      	adds	r7, r5, r3
 8012e04:	ab22      	add	r3, sp, #136	; 0x88
 8012e06:	441f      	add	r7, r3
 8012e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e0a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012e0e:	f7ed fba1 	bl	8000554 <__aeabi_i2d>
 8012e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e14:	461c      	mov	r4, r3
 8012e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e18:	e9c7 0100 	strd	r0, r1, [r7]
 8012e1c:	eb03 0b05 	add.w	fp, r3, r5
 8012e20:	2700      	movs	r7, #0
 8012e22:	f04f 0800 	mov.w	r8, #0
 8012e26:	f04f 0900 	mov.w	r9, #0
 8012e2a:	9b07      	ldr	r3, [sp, #28]
 8012e2c:	429f      	cmp	r7, r3
 8012e2e:	dd08      	ble.n	8012e42 <__kernel_rem_pio2+0x3da>
 8012e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e32:	aa72      	add	r2, sp, #456	; 0x1c8
 8012e34:	18eb      	adds	r3, r5, r3
 8012e36:	4413      	add	r3, r2
 8012e38:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012e3c:	3601      	adds	r6, #1
 8012e3e:	3508      	adds	r5, #8
 8012e40:	e7d6      	b.n	8012df0 <__kernel_rem_pio2+0x388>
 8012e42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012e46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012e4a:	f7ed fbed 	bl	8000628 <__aeabi_dmul>
 8012e4e:	4602      	mov	r2, r0
 8012e50:	460b      	mov	r3, r1
 8012e52:	4640      	mov	r0, r8
 8012e54:	4649      	mov	r1, r9
 8012e56:	f7ed fa31 	bl	80002bc <__adddf3>
 8012e5a:	3701      	adds	r7, #1
 8012e5c:	4680      	mov	r8, r0
 8012e5e:	4689      	mov	r9, r1
 8012e60:	e7e3      	b.n	8012e2a <__kernel_rem_pio2+0x3c2>
 8012e62:	3d01      	subs	r5, #1
 8012e64:	e741      	b.n	8012cea <__kernel_rem_pio2+0x282>
 8012e66:	f1ca 0000 	rsb	r0, sl, #0
 8012e6a:	ec47 6b10 	vmov	d0, r6, r7
 8012e6e:	f000 fa83 	bl	8013378 <scalbn>
 8012e72:	ec57 6b10 	vmov	r6, r7, d0
 8012e76:	2200      	movs	r2, #0
 8012e78:	4b99      	ldr	r3, [pc, #612]	; (80130e0 <__kernel_rem_pio2+0x678>)
 8012e7a:	ee10 0a10 	vmov	r0, s0
 8012e7e:	4639      	mov	r1, r7
 8012e80:	f7ed fe58 	bl	8000b34 <__aeabi_dcmpge>
 8012e84:	b1f8      	cbz	r0, 8012ec6 <__kernel_rem_pio2+0x45e>
 8012e86:	2200      	movs	r2, #0
 8012e88:	4b96      	ldr	r3, [pc, #600]	; (80130e4 <__kernel_rem_pio2+0x67c>)
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	4639      	mov	r1, r7
 8012e8e:	f7ed fbcb 	bl	8000628 <__aeabi_dmul>
 8012e92:	f7ed fe79 	bl	8000b88 <__aeabi_d2iz>
 8012e96:	4680      	mov	r8, r0
 8012e98:	f7ed fb5c 	bl	8000554 <__aeabi_i2d>
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	4b90      	ldr	r3, [pc, #576]	; (80130e0 <__kernel_rem_pio2+0x678>)
 8012ea0:	f7ed fbc2 	bl	8000628 <__aeabi_dmul>
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	4639      	mov	r1, r7
 8012eaa:	4630      	mov	r0, r6
 8012eac:	f7ed fa04 	bl	80002b8 <__aeabi_dsub>
 8012eb0:	f7ed fe6a 	bl	8000b88 <__aeabi_d2iz>
 8012eb4:	1c65      	adds	r5, r4, #1
 8012eb6:	ab0e      	add	r3, sp, #56	; 0x38
 8012eb8:	f10a 0a18 	add.w	sl, sl, #24
 8012ebc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012ec0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012ec4:	e719      	b.n	8012cfa <__kernel_rem_pio2+0x292>
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	4639      	mov	r1, r7
 8012eca:	f7ed fe5d 	bl	8000b88 <__aeabi_d2iz>
 8012ece:	ab0e      	add	r3, sp, #56	; 0x38
 8012ed0:	4625      	mov	r5, r4
 8012ed2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012ed6:	e710      	b.n	8012cfa <__kernel_rem_pio2+0x292>
 8012ed8:	ab0e      	add	r3, sp, #56	; 0x38
 8012eda:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012ede:	f7ed fb39 	bl	8000554 <__aeabi_i2d>
 8012ee2:	4642      	mov	r2, r8
 8012ee4:	464b      	mov	r3, r9
 8012ee6:	f7ed fb9f 	bl	8000628 <__aeabi_dmul>
 8012eea:	2200      	movs	r2, #0
 8012eec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012ef0:	4b7c      	ldr	r3, [pc, #496]	; (80130e4 <__kernel_rem_pio2+0x67c>)
 8012ef2:	4640      	mov	r0, r8
 8012ef4:	4649      	mov	r1, r9
 8012ef6:	f7ed fb97 	bl	8000628 <__aeabi_dmul>
 8012efa:	3f01      	subs	r7, #1
 8012efc:	4680      	mov	r8, r0
 8012efe:	4689      	mov	r9, r1
 8012f00:	e708      	b.n	8012d14 <__kernel_rem_pio2+0x2ac>
 8012f02:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f0a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012f0e:	f7ed fb8b 	bl	8000628 <__aeabi_dmul>
 8012f12:	4602      	mov	r2, r0
 8012f14:	460b      	mov	r3, r1
 8012f16:	4640      	mov	r0, r8
 8012f18:	4649      	mov	r1, r9
 8012f1a:	f7ed f9cf 	bl	80002bc <__adddf3>
 8012f1e:	3701      	adds	r7, #1
 8012f20:	4680      	mov	r8, r0
 8012f22:	4689      	mov	r9, r1
 8012f24:	9b04      	ldr	r3, [sp, #16]
 8012f26:	429f      	cmp	r7, r3
 8012f28:	dc01      	bgt.n	8012f2e <__kernel_rem_pio2+0x4c6>
 8012f2a:	45ba      	cmp	sl, r7
 8012f2c:	dae9      	bge.n	8012f02 <__kernel_rem_pio2+0x49a>
 8012f2e:	ab4a      	add	r3, sp, #296	; 0x128
 8012f30:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012f34:	e9c3 8900 	strd	r8, r9, [r3]
 8012f38:	f10a 0a01 	add.w	sl, sl, #1
 8012f3c:	3e08      	subs	r6, #8
 8012f3e:	e6f0      	b.n	8012d22 <__kernel_rem_pio2+0x2ba>
 8012f40:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012f42:	2b03      	cmp	r3, #3
 8012f44:	d85b      	bhi.n	8012ffe <__kernel_rem_pio2+0x596>
 8012f46:	e8df f003 	tbb	[pc, r3]
 8012f4a:	264a      	.short	0x264a
 8012f4c:	0226      	.short	0x0226
 8012f4e:	ab9a      	add	r3, sp, #616	; 0x268
 8012f50:	441c      	add	r4, r3
 8012f52:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012f56:	46a2      	mov	sl, r4
 8012f58:	46ab      	mov	fp, r5
 8012f5a:	f1bb 0f00 	cmp.w	fp, #0
 8012f5e:	dc6c      	bgt.n	801303a <__kernel_rem_pio2+0x5d2>
 8012f60:	46a2      	mov	sl, r4
 8012f62:	46ab      	mov	fp, r5
 8012f64:	f1bb 0f01 	cmp.w	fp, #1
 8012f68:	f300 8086 	bgt.w	8013078 <__kernel_rem_pio2+0x610>
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	2100      	movs	r1, #0
 8012f70:	2d01      	cmp	r5, #1
 8012f72:	f300 80a0 	bgt.w	80130b6 <__kernel_rem_pio2+0x64e>
 8012f76:	9b02      	ldr	r3, [sp, #8]
 8012f78:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012f7c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f040 809e 	bne.w	80130c2 <__kernel_rem_pio2+0x65a>
 8012f86:	9b01      	ldr	r3, [sp, #4]
 8012f88:	e9c3 7800 	strd	r7, r8, [r3]
 8012f8c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012f90:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012f94:	e033      	b.n	8012ffe <__kernel_rem_pio2+0x596>
 8012f96:	3408      	adds	r4, #8
 8012f98:	ab4a      	add	r3, sp, #296	; 0x128
 8012f9a:	441c      	add	r4, r3
 8012f9c:	462e      	mov	r6, r5
 8012f9e:	2000      	movs	r0, #0
 8012fa0:	2100      	movs	r1, #0
 8012fa2:	2e00      	cmp	r6, #0
 8012fa4:	da3a      	bge.n	801301c <__kernel_rem_pio2+0x5b4>
 8012fa6:	9b02      	ldr	r3, [sp, #8]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d03d      	beq.n	8013028 <__kernel_rem_pio2+0x5c0>
 8012fac:	4602      	mov	r2, r0
 8012fae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012fb2:	9c01      	ldr	r4, [sp, #4]
 8012fb4:	e9c4 2300 	strd	r2, r3, [r4]
 8012fb8:	4602      	mov	r2, r0
 8012fba:	460b      	mov	r3, r1
 8012fbc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012fc0:	f7ed f97a 	bl	80002b8 <__aeabi_dsub>
 8012fc4:	ae4c      	add	r6, sp, #304	; 0x130
 8012fc6:	2401      	movs	r4, #1
 8012fc8:	42a5      	cmp	r5, r4
 8012fca:	da30      	bge.n	801302e <__kernel_rem_pio2+0x5c6>
 8012fcc:	9b02      	ldr	r3, [sp, #8]
 8012fce:	b113      	cbz	r3, 8012fd6 <__kernel_rem_pio2+0x56e>
 8012fd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	9b01      	ldr	r3, [sp, #4]
 8012fd8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012fdc:	e00f      	b.n	8012ffe <__kernel_rem_pio2+0x596>
 8012fde:	ab9a      	add	r3, sp, #616	; 0x268
 8012fe0:	441c      	add	r4, r3
 8012fe2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012fe6:	2000      	movs	r0, #0
 8012fe8:	2100      	movs	r1, #0
 8012fea:	2d00      	cmp	r5, #0
 8012fec:	da10      	bge.n	8013010 <__kernel_rem_pio2+0x5a8>
 8012fee:	9b02      	ldr	r3, [sp, #8]
 8012ff0:	b113      	cbz	r3, 8012ff8 <__kernel_rem_pio2+0x590>
 8012ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	9b01      	ldr	r3, [sp, #4]
 8012ffa:	e9c3 0100 	strd	r0, r1, [r3]
 8012ffe:	9b06      	ldr	r3, [sp, #24]
 8013000:	f003 0007 	and.w	r0, r3, #7
 8013004:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013008:	ecbd 8b02 	vpop	{d8}
 801300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013010:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013014:	f7ed f952 	bl	80002bc <__adddf3>
 8013018:	3d01      	subs	r5, #1
 801301a:	e7e6      	b.n	8012fea <__kernel_rem_pio2+0x582>
 801301c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013020:	f7ed f94c 	bl	80002bc <__adddf3>
 8013024:	3e01      	subs	r6, #1
 8013026:	e7bc      	b.n	8012fa2 <__kernel_rem_pio2+0x53a>
 8013028:	4602      	mov	r2, r0
 801302a:	460b      	mov	r3, r1
 801302c:	e7c1      	b.n	8012fb2 <__kernel_rem_pio2+0x54a>
 801302e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013032:	f7ed f943 	bl	80002bc <__adddf3>
 8013036:	3401      	adds	r4, #1
 8013038:	e7c6      	b.n	8012fc8 <__kernel_rem_pio2+0x560>
 801303a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801303e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013042:	4640      	mov	r0, r8
 8013044:	ec53 2b17 	vmov	r2, r3, d7
 8013048:	4649      	mov	r1, r9
 801304a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801304e:	f7ed f935 	bl	80002bc <__adddf3>
 8013052:	4602      	mov	r2, r0
 8013054:	460b      	mov	r3, r1
 8013056:	4606      	mov	r6, r0
 8013058:	460f      	mov	r7, r1
 801305a:	4640      	mov	r0, r8
 801305c:	4649      	mov	r1, r9
 801305e:	f7ed f92b 	bl	80002b8 <__aeabi_dsub>
 8013062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013066:	f7ed f929 	bl	80002bc <__adddf3>
 801306a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801306e:	e9ca 0100 	strd	r0, r1, [sl]
 8013072:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8013076:	e770      	b.n	8012f5a <__kernel_rem_pio2+0x4f2>
 8013078:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801307c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013080:	4630      	mov	r0, r6
 8013082:	ec53 2b17 	vmov	r2, r3, d7
 8013086:	4639      	mov	r1, r7
 8013088:	ed8d 7b04 	vstr	d7, [sp, #16]
 801308c:	f7ed f916 	bl	80002bc <__adddf3>
 8013090:	4602      	mov	r2, r0
 8013092:	460b      	mov	r3, r1
 8013094:	4680      	mov	r8, r0
 8013096:	4689      	mov	r9, r1
 8013098:	4630      	mov	r0, r6
 801309a:	4639      	mov	r1, r7
 801309c:	f7ed f90c 	bl	80002b8 <__aeabi_dsub>
 80130a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130a4:	f7ed f90a 	bl	80002bc <__adddf3>
 80130a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80130ac:	e9ca 0100 	strd	r0, r1, [sl]
 80130b0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80130b4:	e756      	b.n	8012f64 <__kernel_rem_pio2+0x4fc>
 80130b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80130ba:	f7ed f8ff 	bl	80002bc <__adddf3>
 80130be:	3d01      	subs	r5, #1
 80130c0:	e756      	b.n	8012f70 <__kernel_rem_pio2+0x508>
 80130c2:	9b01      	ldr	r3, [sp, #4]
 80130c4:	9a01      	ldr	r2, [sp, #4]
 80130c6:	601f      	str	r7, [r3, #0]
 80130c8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80130cc:	605c      	str	r4, [r3, #4]
 80130ce:	609d      	str	r5, [r3, #8]
 80130d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80130d4:	60d3      	str	r3, [r2, #12]
 80130d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130da:	6110      	str	r0, [r2, #16]
 80130dc:	6153      	str	r3, [r2, #20]
 80130de:	e78e      	b.n	8012ffe <__kernel_rem_pio2+0x596>
 80130e0:	41700000 	.word	0x41700000
 80130e4:	3e700000 	.word	0x3e700000

080130e8 <__kernel_sin>:
 80130e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ec:	ec55 4b10 	vmov	r4, r5, d0
 80130f0:	b085      	sub	sp, #20
 80130f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80130f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80130fa:	ed8d 1b00 	vstr	d1, [sp]
 80130fe:	9002      	str	r0, [sp, #8]
 8013100:	da06      	bge.n	8013110 <__kernel_sin+0x28>
 8013102:	ee10 0a10 	vmov	r0, s0
 8013106:	4629      	mov	r1, r5
 8013108:	f7ed fd3e 	bl	8000b88 <__aeabi_d2iz>
 801310c:	2800      	cmp	r0, #0
 801310e:	d051      	beq.n	80131b4 <__kernel_sin+0xcc>
 8013110:	4622      	mov	r2, r4
 8013112:	462b      	mov	r3, r5
 8013114:	4620      	mov	r0, r4
 8013116:	4629      	mov	r1, r5
 8013118:	f7ed fa86 	bl	8000628 <__aeabi_dmul>
 801311c:	4682      	mov	sl, r0
 801311e:	468b      	mov	fp, r1
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	4620      	mov	r0, r4
 8013126:	4629      	mov	r1, r5
 8013128:	f7ed fa7e 	bl	8000628 <__aeabi_dmul>
 801312c:	a341      	add	r3, pc, #260	; (adr r3, 8013234 <__kernel_sin+0x14c>)
 801312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013132:	4680      	mov	r8, r0
 8013134:	4689      	mov	r9, r1
 8013136:	4650      	mov	r0, sl
 8013138:	4659      	mov	r1, fp
 801313a:	f7ed fa75 	bl	8000628 <__aeabi_dmul>
 801313e:	a33f      	add	r3, pc, #252	; (adr r3, 801323c <__kernel_sin+0x154>)
 8013140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013144:	f7ed f8b8 	bl	80002b8 <__aeabi_dsub>
 8013148:	4652      	mov	r2, sl
 801314a:	465b      	mov	r3, fp
 801314c:	f7ed fa6c 	bl	8000628 <__aeabi_dmul>
 8013150:	a33c      	add	r3, pc, #240	; (adr r3, 8013244 <__kernel_sin+0x15c>)
 8013152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013156:	f7ed f8b1 	bl	80002bc <__adddf3>
 801315a:	4652      	mov	r2, sl
 801315c:	465b      	mov	r3, fp
 801315e:	f7ed fa63 	bl	8000628 <__aeabi_dmul>
 8013162:	a33a      	add	r3, pc, #232	; (adr r3, 801324c <__kernel_sin+0x164>)
 8013164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013168:	f7ed f8a6 	bl	80002b8 <__aeabi_dsub>
 801316c:	4652      	mov	r2, sl
 801316e:	465b      	mov	r3, fp
 8013170:	f7ed fa5a 	bl	8000628 <__aeabi_dmul>
 8013174:	a337      	add	r3, pc, #220	; (adr r3, 8013254 <__kernel_sin+0x16c>)
 8013176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317a:	f7ed f89f 	bl	80002bc <__adddf3>
 801317e:	9b02      	ldr	r3, [sp, #8]
 8013180:	4606      	mov	r6, r0
 8013182:	460f      	mov	r7, r1
 8013184:	b9db      	cbnz	r3, 80131be <__kernel_sin+0xd6>
 8013186:	4602      	mov	r2, r0
 8013188:	460b      	mov	r3, r1
 801318a:	4650      	mov	r0, sl
 801318c:	4659      	mov	r1, fp
 801318e:	f7ed fa4b 	bl	8000628 <__aeabi_dmul>
 8013192:	a325      	add	r3, pc, #148	; (adr r3, 8013228 <__kernel_sin+0x140>)
 8013194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013198:	f7ed f88e 	bl	80002b8 <__aeabi_dsub>
 801319c:	4642      	mov	r2, r8
 801319e:	464b      	mov	r3, r9
 80131a0:	f7ed fa42 	bl	8000628 <__aeabi_dmul>
 80131a4:	4602      	mov	r2, r0
 80131a6:	460b      	mov	r3, r1
 80131a8:	4620      	mov	r0, r4
 80131aa:	4629      	mov	r1, r5
 80131ac:	f7ed f886 	bl	80002bc <__adddf3>
 80131b0:	4604      	mov	r4, r0
 80131b2:	460d      	mov	r5, r1
 80131b4:	ec45 4b10 	vmov	d0, r4, r5
 80131b8:	b005      	add	sp, #20
 80131ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131be:	2200      	movs	r2, #0
 80131c0:	4b1b      	ldr	r3, [pc, #108]	; (8013230 <__kernel_sin+0x148>)
 80131c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131c6:	f7ed fa2f 	bl	8000628 <__aeabi_dmul>
 80131ca:	4632      	mov	r2, r6
 80131cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131d0:	463b      	mov	r3, r7
 80131d2:	4640      	mov	r0, r8
 80131d4:	4649      	mov	r1, r9
 80131d6:	f7ed fa27 	bl	8000628 <__aeabi_dmul>
 80131da:	4602      	mov	r2, r0
 80131dc:	460b      	mov	r3, r1
 80131de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131e2:	f7ed f869 	bl	80002b8 <__aeabi_dsub>
 80131e6:	4652      	mov	r2, sl
 80131e8:	465b      	mov	r3, fp
 80131ea:	f7ed fa1d 	bl	8000628 <__aeabi_dmul>
 80131ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131f2:	f7ed f861 	bl	80002b8 <__aeabi_dsub>
 80131f6:	a30c      	add	r3, pc, #48	; (adr r3, 8013228 <__kernel_sin+0x140>)
 80131f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fc:	4606      	mov	r6, r0
 80131fe:	460f      	mov	r7, r1
 8013200:	4640      	mov	r0, r8
 8013202:	4649      	mov	r1, r9
 8013204:	f7ed fa10 	bl	8000628 <__aeabi_dmul>
 8013208:	4602      	mov	r2, r0
 801320a:	460b      	mov	r3, r1
 801320c:	4630      	mov	r0, r6
 801320e:	4639      	mov	r1, r7
 8013210:	f7ed f854 	bl	80002bc <__adddf3>
 8013214:	4602      	mov	r2, r0
 8013216:	460b      	mov	r3, r1
 8013218:	4620      	mov	r0, r4
 801321a:	4629      	mov	r1, r5
 801321c:	f7ed f84c 	bl	80002b8 <__aeabi_dsub>
 8013220:	e7c6      	b.n	80131b0 <__kernel_sin+0xc8>
 8013222:	bf00      	nop
 8013224:	f3af 8000 	nop.w
 8013228:	55555549 	.word	0x55555549
 801322c:	3fc55555 	.word	0x3fc55555
 8013230:	3fe00000 	.word	0x3fe00000
 8013234:	5acfd57c 	.word	0x5acfd57c
 8013238:	3de5d93a 	.word	0x3de5d93a
 801323c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013240:	3e5ae5e6 	.word	0x3e5ae5e6
 8013244:	57b1fe7d 	.word	0x57b1fe7d
 8013248:	3ec71de3 	.word	0x3ec71de3
 801324c:	19c161d5 	.word	0x19c161d5
 8013250:	3f2a01a0 	.word	0x3f2a01a0
 8013254:	1110f8a6 	.word	0x1110f8a6
 8013258:	3f811111 	.word	0x3f811111

0801325c <fabs>:
 801325c:	ec51 0b10 	vmov	r0, r1, d0
 8013260:	ee10 2a10 	vmov	r2, s0
 8013264:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013268:	ec43 2b10 	vmov	d0, r2, r3
 801326c:	4770      	bx	lr
	...

08013270 <floor>:
 8013270:	ec51 0b10 	vmov	r0, r1, d0
 8013274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013278:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801327c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013280:	2e13      	cmp	r6, #19
 8013282:	460c      	mov	r4, r1
 8013284:	ee10 5a10 	vmov	r5, s0
 8013288:	4680      	mov	r8, r0
 801328a:	dc34      	bgt.n	80132f6 <floor+0x86>
 801328c:	2e00      	cmp	r6, #0
 801328e:	da16      	bge.n	80132be <floor+0x4e>
 8013290:	a335      	add	r3, pc, #212	; (adr r3, 8013368 <floor+0xf8>)
 8013292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013296:	f7ed f811 	bl	80002bc <__adddf3>
 801329a:	2200      	movs	r2, #0
 801329c:	2300      	movs	r3, #0
 801329e:	f7ed fc53 	bl	8000b48 <__aeabi_dcmpgt>
 80132a2:	b148      	cbz	r0, 80132b8 <floor+0x48>
 80132a4:	2c00      	cmp	r4, #0
 80132a6:	da59      	bge.n	801335c <floor+0xec>
 80132a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80132ac:	4a30      	ldr	r2, [pc, #192]	; (8013370 <floor+0x100>)
 80132ae:	432b      	orrs	r3, r5
 80132b0:	2500      	movs	r5, #0
 80132b2:	42ab      	cmp	r3, r5
 80132b4:	bf18      	it	ne
 80132b6:	4614      	movne	r4, r2
 80132b8:	4621      	mov	r1, r4
 80132ba:	4628      	mov	r0, r5
 80132bc:	e025      	b.n	801330a <floor+0x9a>
 80132be:	4f2d      	ldr	r7, [pc, #180]	; (8013374 <floor+0x104>)
 80132c0:	4137      	asrs	r7, r6
 80132c2:	ea01 0307 	and.w	r3, r1, r7
 80132c6:	4303      	orrs	r3, r0
 80132c8:	d01f      	beq.n	801330a <floor+0x9a>
 80132ca:	a327      	add	r3, pc, #156	; (adr r3, 8013368 <floor+0xf8>)
 80132cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d0:	f7ec fff4 	bl	80002bc <__adddf3>
 80132d4:	2200      	movs	r2, #0
 80132d6:	2300      	movs	r3, #0
 80132d8:	f7ed fc36 	bl	8000b48 <__aeabi_dcmpgt>
 80132dc:	2800      	cmp	r0, #0
 80132de:	d0eb      	beq.n	80132b8 <floor+0x48>
 80132e0:	2c00      	cmp	r4, #0
 80132e2:	bfbe      	ittt	lt
 80132e4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80132e8:	fa43 f606 	asrlt.w	r6, r3, r6
 80132ec:	19a4      	addlt	r4, r4, r6
 80132ee:	ea24 0407 	bic.w	r4, r4, r7
 80132f2:	2500      	movs	r5, #0
 80132f4:	e7e0      	b.n	80132b8 <floor+0x48>
 80132f6:	2e33      	cmp	r6, #51	; 0x33
 80132f8:	dd0b      	ble.n	8013312 <floor+0xa2>
 80132fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80132fe:	d104      	bne.n	801330a <floor+0x9a>
 8013300:	ee10 2a10 	vmov	r2, s0
 8013304:	460b      	mov	r3, r1
 8013306:	f7ec ffd9 	bl	80002bc <__adddf3>
 801330a:	ec41 0b10 	vmov	d0, r0, r1
 801330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013312:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013316:	f04f 33ff 	mov.w	r3, #4294967295
 801331a:	fa23 f707 	lsr.w	r7, r3, r7
 801331e:	4207      	tst	r7, r0
 8013320:	d0f3      	beq.n	801330a <floor+0x9a>
 8013322:	a311      	add	r3, pc, #68	; (adr r3, 8013368 <floor+0xf8>)
 8013324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013328:	f7ec ffc8 	bl	80002bc <__adddf3>
 801332c:	2200      	movs	r2, #0
 801332e:	2300      	movs	r3, #0
 8013330:	f7ed fc0a 	bl	8000b48 <__aeabi_dcmpgt>
 8013334:	2800      	cmp	r0, #0
 8013336:	d0bf      	beq.n	80132b8 <floor+0x48>
 8013338:	2c00      	cmp	r4, #0
 801333a:	da02      	bge.n	8013342 <floor+0xd2>
 801333c:	2e14      	cmp	r6, #20
 801333e:	d103      	bne.n	8013348 <floor+0xd8>
 8013340:	3401      	adds	r4, #1
 8013342:	ea25 0507 	bic.w	r5, r5, r7
 8013346:	e7b7      	b.n	80132b8 <floor+0x48>
 8013348:	2301      	movs	r3, #1
 801334a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801334e:	fa03 f606 	lsl.w	r6, r3, r6
 8013352:	4435      	add	r5, r6
 8013354:	4545      	cmp	r5, r8
 8013356:	bf38      	it	cc
 8013358:	18e4      	addcc	r4, r4, r3
 801335a:	e7f2      	b.n	8013342 <floor+0xd2>
 801335c:	2500      	movs	r5, #0
 801335e:	462c      	mov	r4, r5
 8013360:	e7aa      	b.n	80132b8 <floor+0x48>
 8013362:	bf00      	nop
 8013364:	f3af 8000 	nop.w
 8013368:	8800759c 	.word	0x8800759c
 801336c:	7e37e43c 	.word	0x7e37e43c
 8013370:	bff00000 	.word	0xbff00000
 8013374:	000fffff 	.word	0x000fffff

08013378 <scalbn>:
 8013378:	b570      	push	{r4, r5, r6, lr}
 801337a:	ec55 4b10 	vmov	r4, r5, d0
 801337e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013382:	4606      	mov	r6, r0
 8013384:	462b      	mov	r3, r5
 8013386:	b9aa      	cbnz	r2, 80133b4 <scalbn+0x3c>
 8013388:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801338c:	4323      	orrs	r3, r4
 801338e:	d03b      	beq.n	8013408 <scalbn+0x90>
 8013390:	4b31      	ldr	r3, [pc, #196]	; (8013458 <scalbn+0xe0>)
 8013392:	4629      	mov	r1, r5
 8013394:	2200      	movs	r2, #0
 8013396:	ee10 0a10 	vmov	r0, s0
 801339a:	f7ed f945 	bl	8000628 <__aeabi_dmul>
 801339e:	4b2f      	ldr	r3, [pc, #188]	; (801345c <scalbn+0xe4>)
 80133a0:	429e      	cmp	r6, r3
 80133a2:	4604      	mov	r4, r0
 80133a4:	460d      	mov	r5, r1
 80133a6:	da12      	bge.n	80133ce <scalbn+0x56>
 80133a8:	a327      	add	r3, pc, #156	; (adr r3, 8013448 <scalbn+0xd0>)
 80133aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ae:	f7ed f93b 	bl	8000628 <__aeabi_dmul>
 80133b2:	e009      	b.n	80133c8 <scalbn+0x50>
 80133b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80133b8:	428a      	cmp	r2, r1
 80133ba:	d10c      	bne.n	80133d6 <scalbn+0x5e>
 80133bc:	ee10 2a10 	vmov	r2, s0
 80133c0:	4620      	mov	r0, r4
 80133c2:	4629      	mov	r1, r5
 80133c4:	f7ec ff7a 	bl	80002bc <__adddf3>
 80133c8:	4604      	mov	r4, r0
 80133ca:	460d      	mov	r5, r1
 80133cc:	e01c      	b.n	8013408 <scalbn+0x90>
 80133ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80133d2:	460b      	mov	r3, r1
 80133d4:	3a36      	subs	r2, #54	; 0x36
 80133d6:	4432      	add	r2, r6
 80133d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80133dc:	428a      	cmp	r2, r1
 80133de:	dd0b      	ble.n	80133f8 <scalbn+0x80>
 80133e0:	ec45 4b11 	vmov	d1, r4, r5
 80133e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013450 <scalbn+0xd8>
 80133e8:	f000 f83c 	bl	8013464 <copysign>
 80133ec:	a318      	add	r3, pc, #96	; (adr r3, 8013450 <scalbn+0xd8>)
 80133ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f2:	ec51 0b10 	vmov	r0, r1, d0
 80133f6:	e7da      	b.n	80133ae <scalbn+0x36>
 80133f8:	2a00      	cmp	r2, #0
 80133fa:	dd08      	ble.n	801340e <scalbn+0x96>
 80133fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013404:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013408:	ec45 4b10 	vmov	d0, r4, r5
 801340c:	bd70      	pop	{r4, r5, r6, pc}
 801340e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013412:	da0d      	bge.n	8013430 <scalbn+0xb8>
 8013414:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013418:	429e      	cmp	r6, r3
 801341a:	ec45 4b11 	vmov	d1, r4, r5
 801341e:	dce1      	bgt.n	80133e4 <scalbn+0x6c>
 8013420:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013448 <scalbn+0xd0>
 8013424:	f000 f81e 	bl	8013464 <copysign>
 8013428:	a307      	add	r3, pc, #28	; (adr r3, 8013448 <scalbn+0xd0>)
 801342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342e:	e7e0      	b.n	80133f2 <scalbn+0x7a>
 8013430:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013434:	3236      	adds	r2, #54	; 0x36
 8013436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801343a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801343e:	4620      	mov	r0, r4
 8013440:	4629      	mov	r1, r5
 8013442:	2200      	movs	r2, #0
 8013444:	4b06      	ldr	r3, [pc, #24]	; (8013460 <scalbn+0xe8>)
 8013446:	e7b2      	b.n	80133ae <scalbn+0x36>
 8013448:	c2f8f359 	.word	0xc2f8f359
 801344c:	01a56e1f 	.word	0x01a56e1f
 8013450:	8800759c 	.word	0x8800759c
 8013454:	7e37e43c 	.word	0x7e37e43c
 8013458:	43500000 	.word	0x43500000
 801345c:	ffff3cb0 	.word	0xffff3cb0
 8013460:	3c900000 	.word	0x3c900000

08013464 <copysign>:
 8013464:	ec51 0b10 	vmov	r0, r1, d0
 8013468:	ee11 0a90 	vmov	r0, s3
 801346c:	ee10 2a10 	vmov	r2, s0
 8013470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013474:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013478:	ea41 0300 	orr.w	r3, r1, r0
 801347c:	ec43 2b10 	vmov	d0, r2, r3
 8013480:	4770      	bx	lr
	...

08013484 <__errno>:
 8013484:	4b01      	ldr	r3, [pc, #4]	; (801348c <__errno+0x8>)
 8013486:	6818      	ldr	r0, [r3, #0]
 8013488:	4770      	bx	lr
 801348a:	bf00      	nop
 801348c:	2000000c 	.word	0x2000000c

08013490 <__libc_init_array>:
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	4e0d      	ldr	r6, [pc, #52]	; (80134c8 <__libc_init_array+0x38>)
 8013494:	4c0d      	ldr	r4, [pc, #52]	; (80134cc <__libc_init_array+0x3c>)
 8013496:	1ba4      	subs	r4, r4, r6
 8013498:	10a4      	asrs	r4, r4, #2
 801349a:	2500      	movs	r5, #0
 801349c:	42a5      	cmp	r5, r4
 801349e:	d109      	bne.n	80134b4 <__libc_init_array+0x24>
 80134a0:	4e0b      	ldr	r6, [pc, #44]	; (80134d0 <__libc_init_array+0x40>)
 80134a2:	4c0c      	ldr	r4, [pc, #48]	; (80134d4 <__libc_init_array+0x44>)
 80134a4:	f004 f9e8 	bl	8017878 <_init>
 80134a8:	1ba4      	subs	r4, r4, r6
 80134aa:	10a4      	asrs	r4, r4, #2
 80134ac:	2500      	movs	r5, #0
 80134ae:	42a5      	cmp	r5, r4
 80134b0:	d105      	bne.n	80134be <__libc_init_array+0x2e>
 80134b2:	bd70      	pop	{r4, r5, r6, pc}
 80134b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80134b8:	4798      	blx	r3
 80134ba:	3501      	adds	r5, #1
 80134bc:	e7ee      	b.n	801349c <__libc_init_array+0xc>
 80134be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80134c2:	4798      	blx	r3
 80134c4:	3501      	adds	r5, #1
 80134c6:	e7f2      	b.n	80134ae <__libc_init_array+0x1e>
 80134c8:	0801837c 	.word	0x0801837c
 80134cc:	0801837c 	.word	0x0801837c
 80134d0:	0801837c 	.word	0x0801837c
 80134d4:	08018384 	.word	0x08018384

080134d8 <memcpy>:
 80134d8:	b510      	push	{r4, lr}
 80134da:	1e43      	subs	r3, r0, #1
 80134dc:	440a      	add	r2, r1
 80134de:	4291      	cmp	r1, r2
 80134e0:	d100      	bne.n	80134e4 <memcpy+0xc>
 80134e2:	bd10      	pop	{r4, pc}
 80134e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134ec:	e7f7      	b.n	80134de <memcpy+0x6>

080134ee <memset>:
 80134ee:	4402      	add	r2, r0
 80134f0:	4603      	mov	r3, r0
 80134f2:	4293      	cmp	r3, r2
 80134f4:	d100      	bne.n	80134f8 <memset+0xa>
 80134f6:	4770      	bx	lr
 80134f8:	f803 1b01 	strb.w	r1, [r3], #1
 80134fc:	e7f9      	b.n	80134f2 <memset+0x4>

080134fe <__cvt>:
 80134fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013502:	ec55 4b10 	vmov	r4, r5, d0
 8013506:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013508:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801350c:	2d00      	cmp	r5, #0
 801350e:	460e      	mov	r6, r1
 8013510:	4691      	mov	r9, r2
 8013512:	4619      	mov	r1, r3
 8013514:	bfb8      	it	lt
 8013516:	4622      	movlt	r2, r4
 8013518:	462b      	mov	r3, r5
 801351a:	f027 0720 	bic.w	r7, r7, #32
 801351e:	bfbb      	ittet	lt
 8013520:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013524:	461d      	movlt	r5, r3
 8013526:	2300      	movge	r3, #0
 8013528:	232d      	movlt	r3, #45	; 0x2d
 801352a:	bfb8      	it	lt
 801352c:	4614      	movlt	r4, r2
 801352e:	2f46      	cmp	r7, #70	; 0x46
 8013530:	700b      	strb	r3, [r1, #0]
 8013532:	d004      	beq.n	801353e <__cvt+0x40>
 8013534:	2f45      	cmp	r7, #69	; 0x45
 8013536:	d100      	bne.n	801353a <__cvt+0x3c>
 8013538:	3601      	adds	r6, #1
 801353a:	2102      	movs	r1, #2
 801353c:	e000      	b.n	8013540 <__cvt+0x42>
 801353e:	2103      	movs	r1, #3
 8013540:	ab03      	add	r3, sp, #12
 8013542:	9301      	str	r3, [sp, #4]
 8013544:	ab02      	add	r3, sp, #8
 8013546:	9300      	str	r3, [sp, #0]
 8013548:	4632      	mov	r2, r6
 801354a:	4653      	mov	r3, sl
 801354c:	ec45 4b10 	vmov	d0, r4, r5
 8013550:	f001 fdfe 	bl	8015150 <_dtoa_r>
 8013554:	2f47      	cmp	r7, #71	; 0x47
 8013556:	4680      	mov	r8, r0
 8013558:	d102      	bne.n	8013560 <__cvt+0x62>
 801355a:	f019 0f01 	tst.w	r9, #1
 801355e:	d026      	beq.n	80135ae <__cvt+0xb0>
 8013560:	2f46      	cmp	r7, #70	; 0x46
 8013562:	eb08 0906 	add.w	r9, r8, r6
 8013566:	d111      	bne.n	801358c <__cvt+0x8e>
 8013568:	f898 3000 	ldrb.w	r3, [r8]
 801356c:	2b30      	cmp	r3, #48	; 0x30
 801356e:	d10a      	bne.n	8013586 <__cvt+0x88>
 8013570:	2200      	movs	r2, #0
 8013572:	2300      	movs	r3, #0
 8013574:	4620      	mov	r0, r4
 8013576:	4629      	mov	r1, r5
 8013578:	f7ed fabe 	bl	8000af8 <__aeabi_dcmpeq>
 801357c:	b918      	cbnz	r0, 8013586 <__cvt+0x88>
 801357e:	f1c6 0601 	rsb	r6, r6, #1
 8013582:	f8ca 6000 	str.w	r6, [sl]
 8013586:	f8da 3000 	ldr.w	r3, [sl]
 801358a:	4499      	add	r9, r3
 801358c:	2200      	movs	r2, #0
 801358e:	2300      	movs	r3, #0
 8013590:	4620      	mov	r0, r4
 8013592:	4629      	mov	r1, r5
 8013594:	f7ed fab0 	bl	8000af8 <__aeabi_dcmpeq>
 8013598:	b938      	cbnz	r0, 80135aa <__cvt+0xac>
 801359a:	2230      	movs	r2, #48	; 0x30
 801359c:	9b03      	ldr	r3, [sp, #12]
 801359e:	454b      	cmp	r3, r9
 80135a0:	d205      	bcs.n	80135ae <__cvt+0xb0>
 80135a2:	1c59      	adds	r1, r3, #1
 80135a4:	9103      	str	r1, [sp, #12]
 80135a6:	701a      	strb	r2, [r3, #0]
 80135a8:	e7f8      	b.n	801359c <__cvt+0x9e>
 80135aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80135ae:	9b03      	ldr	r3, [sp, #12]
 80135b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80135b2:	eba3 0308 	sub.w	r3, r3, r8
 80135b6:	4640      	mov	r0, r8
 80135b8:	6013      	str	r3, [r2, #0]
 80135ba:	b004      	add	sp, #16
 80135bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080135c0 <__exponent>:
 80135c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80135c2:	2900      	cmp	r1, #0
 80135c4:	4604      	mov	r4, r0
 80135c6:	bfba      	itte	lt
 80135c8:	4249      	neglt	r1, r1
 80135ca:	232d      	movlt	r3, #45	; 0x2d
 80135cc:	232b      	movge	r3, #43	; 0x2b
 80135ce:	2909      	cmp	r1, #9
 80135d0:	f804 2b02 	strb.w	r2, [r4], #2
 80135d4:	7043      	strb	r3, [r0, #1]
 80135d6:	dd20      	ble.n	801361a <__exponent+0x5a>
 80135d8:	f10d 0307 	add.w	r3, sp, #7
 80135dc:	461f      	mov	r7, r3
 80135de:	260a      	movs	r6, #10
 80135e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80135e4:	fb06 1115 	mls	r1, r6, r5, r1
 80135e8:	3130      	adds	r1, #48	; 0x30
 80135ea:	2d09      	cmp	r5, #9
 80135ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80135f0:	f103 32ff 	add.w	r2, r3, #4294967295
 80135f4:	4629      	mov	r1, r5
 80135f6:	dc09      	bgt.n	801360c <__exponent+0x4c>
 80135f8:	3130      	adds	r1, #48	; 0x30
 80135fa:	3b02      	subs	r3, #2
 80135fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013600:	42bb      	cmp	r3, r7
 8013602:	4622      	mov	r2, r4
 8013604:	d304      	bcc.n	8013610 <__exponent+0x50>
 8013606:	1a10      	subs	r0, r2, r0
 8013608:	b003      	add	sp, #12
 801360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801360c:	4613      	mov	r3, r2
 801360e:	e7e7      	b.n	80135e0 <__exponent+0x20>
 8013610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013614:	f804 2b01 	strb.w	r2, [r4], #1
 8013618:	e7f2      	b.n	8013600 <__exponent+0x40>
 801361a:	2330      	movs	r3, #48	; 0x30
 801361c:	4419      	add	r1, r3
 801361e:	7083      	strb	r3, [r0, #2]
 8013620:	1d02      	adds	r2, r0, #4
 8013622:	70c1      	strb	r1, [r0, #3]
 8013624:	e7ef      	b.n	8013606 <__exponent+0x46>
	...

08013628 <_printf_float>:
 8013628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801362c:	b08d      	sub	sp, #52	; 0x34
 801362e:	460c      	mov	r4, r1
 8013630:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013634:	4616      	mov	r6, r2
 8013636:	461f      	mov	r7, r3
 8013638:	4605      	mov	r5, r0
 801363a:	f002 fe7b 	bl	8016334 <_localeconv_r>
 801363e:	6803      	ldr	r3, [r0, #0]
 8013640:	9304      	str	r3, [sp, #16]
 8013642:	4618      	mov	r0, r3
 8013644:	f7ec fddc 	bl	8000200 <strlen>
 8013648:	2300      	movs	r3, #0
 801364a:	930a      	str	r3, [sp, #40]	; 0x28
 801364c:	f8d8 3000 	ldr.w	r3, [r8]
 8013650:	9005      	str	r0, [sp, #20]
 8013652:	3307      	adds	r3, #7
 8013654:	f023 0307 	bic.w	r3, r3, #7
 8013658:	f103 0208 	add.w	r2, r3, #8
 801365c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013660:	f8d4 b000 	ldr.w	fp, [r4]
 8013664:	f8c8 2000 	str.w	r2, [r8]
 8013668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013670:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013674:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013678:	9307      	str	r3, [sp, #28]
 801367a:	f8cd 8018 	str.w	r8, [sp, #24]
 801367e:	f04f 32ff 	mov.w	r2, #4294967295
 8013682:	4ba7      	ldr	r3, [pc, #668]	; (8013920 <_printf_float+0x2f8>)
 8013684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013688:	f7ed fa68 	bl	8000b5c <__aeabi_dcmpun>
 801368c:	bb70      	cbnz	r0, 80136ec <_printf_float+0xc4>
 801368e:	f04f 32ff 	mov.w	r2, #4294967295
 8013692:	4ba3      	ldr	r3, [pc, #652]	; (8013920 <_printf_float+0x2f8>)
 8013694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013698:	f7ed fa42 	bl	8000b20 <__aeabi_dcmple>
 801369c:	bb30      	cbnz	r0, 80136ec <_printf_float+0xc4>
 801369e:	2200      	movs	r2, #0
 80136a0:	2300      	movs	r3, #0
 80136a2:	4640      	mov	r0, r8
 80136a4:	4649      	mov	r1, r9
 80136a6:	f7ed fa31 	bl	8000b0c <__aeabi_dcmplt>
 80136aa:	b110      	cbz	r0, 80136b2 <_printf_float+0x8a>
 80136ac:	232d      	movs	r3, #45	; 0x2d
 80136ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136b2:	4a9c      	ldr	r2, [pc, #624]	; (8013924 <_printf_float+0x2fc>)
 80136b4:	4b9c      	ldr	r3, [pc, #624]	; (8013928 <_printf_float+0x300>)
 80136b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80136ba:	bf8c      	ite	hi
 80136bc:	4690      	movhi	r8, r2
 80136be:	4698      	movls	r8, r3
 80136c0:	2303      	movs	r3, #3
 80136c2:	f02b 0204 	bic.w	r2, fp, #4
 80136c6:	6123      	str	r3, [r4, #16]
 80136c8:	6022      	str	r2, [r4, #0]
 80136ca:	f04f 0900 	mov.w	r9, #0
 80136ce:	9700      	str	r7, [sp, #0]
 80136d0:	4633      	mov	r3, r6
 80136d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80136d4:	4621      	mov	r1, r4
 80136d6:	4628      	mov	r0, r5
 80136d8:	f000 f9e6 	bl	8013aa8 <_printf_common>
 80136dc:	3001      	adds	r0, #1
 80136de:	f040 808d 	bne.w	80137fc <_printf_float+0x1d4>
 80136e2:	f04f 30ff 	mov.w	r0, #4294967295
 80136e6:	b00d      	add	sp, #52	; 0x34
 80136e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ec:	4642      	mov	r2, r8
 80136ee:	464b      	mov	r3, r9
 80136f0:	4640      	mov	r0, r8
 80136f2:	4649      	mov	r1, r9
 80136f4:	f7ed fa32 	bl	8000b5c <__aeabi_dcmpun>
 80136f8:	b110      	cbz	r0, 8013700 <_printf_float+0xd8>
 80136fa:	4a8c      	ldr	r2, [pc, #560]	; (801392c <_printf_float+0x304>)
 80136fc:	4b8c      	ldr	r3, [pc, #560]	; (8013930 <_printf_float+0x308>)
 80136fe:	e7da      	b.n	80136b6 <_printf_float+0x8e>
 8013700:	6861      	ldr	r1, [r4, #4]
 8013702:	1c4b      	adds	r3, r1, #1
 8013704:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013708:	a80a      	add	r0, sp, #40	; 0x28
 801370a:	d13e      	bne.n	801378a <_printf_float+0x162>
 801370c:	2306      	movs	r3, #6
 801370e:	6063      	str	r3, [r4, #4]
 8013710:	2300      	movs	r3, #0
 8013712:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013716:	ab09      	add	r3, sp, #36	; 0x24
 8013718:	9300      	str	r3, [sp, #0]
 801371a:	ec49 8b10 	vmov	d0, r8, r9
 801371e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013722:	6022      	str	r2, [r4, #0]
 8013724:	f8cd a004 	str.w	sl, [sp, #4]
 8013728:	6861      	ldr	r1, [r4, #4]
 801372a:	4628      	mov	r0, r5
 801372c:	f7ff fee7 	bl	80134fe <__cvt>
 8013730:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013734:	2b47      	cmp	r3, #71	; 0x47
 8013736:	4680      	mov	r8, r0
 8013738:	d109      	bne.n	801374e <_printf_float+0x126>
 801373a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801373c:	1cd8      	adds	r0, r3, #3
 801373e:	db02      	blt.n	8013746 <_printf_float+0x11e>
 8013740:	6862      	ldr	r2, [r4, #4]
 8013742:	4293      	cmp	r3, r2
 8013744:	dd47      	ble.n	80137d6 <_printf_float+0x1ae>
 8013746:	f1aa 0a02 	sub.w	sl, sl, #2
 801374a:	fa5f fa8a 	uxtb.w	sl, sl
 801374e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013752:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013754:	d824      	bhi.n	80137a0 <_printf_float+0x178>
 8013756:	3901      	subs	r1, #1
 8013758:	4652      	mov	r2, sl
 801375a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801375e:	9109      	str	r1, [sp, #36]	; 0x24
 8013760:	f7ff ff2e 	bl	80135c0 <__exponent>
 8013764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013766:	1813      	adds	r3, r2, r0
 8013768:	2a01      	cmp	r2, #1
 801376a:	4681      	mov	r9, r0
 801376c:	6123      	str	r3, [r4, #16]
 801376e:	dc02      	bgt.n	8013776 <_printf_float+0x14e>
 8013770:	6822      	ldr	r2, [r4, #0]
 8013772:	07d1      	lsls	r1, r2, #31
 8013774:	d501      	bpl.n	801377a <_printf_float+0x152>
 8013776:	3301      	adds	r3, #1
 8013778:	6123      	str	r3, [r4, #16]
 801377a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801377e:	2b00      	cmp	r3, #0
 8013780:	d0a5      	beq.n	80136ce <_printf_float+0xa6>
 8013782:	232d      	movs	r3, #45	; 0x2d
 8013784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013788:	e7a1      	b.n	80136ce <_printf_float+0xa6>
 801378a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801378e:	f000 8177 	beq.w	8013a80 <_printf_float+0x458>
 8013792:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013796:	d1bb      	bne.n	8013710 <_printf_float+0xe8>
 8013798:	2900      	cmp	r1, #0
 801379a:	d1b9      	bne.n	8013710 <_printf_float+0xe8>
 801379c:	2301      	movs	r3, #1
 801379e:	e7b6      	b.n	801370e <_printf_float+0xe6>
 80137a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80137a4:	d119      	bne.n	80137da <_printf_float+0x1b2>
 80137a6:	2900      	cmp	r1, #0
 80137a8:	6863      	ldr	r3, [r4, #4]
 80137aa:	dd0c      	ble.n	80137c6 <_printf_float+0x19e>
 80137ac:	6121      	str	r1, [r4, #16]
 80137ae:	b913      	cbnz	r3, 80137b6 <_printf_float+0x18e>
 80137b0:	6822      	ldr	r2, [r4, #0]
 80137b2:	07d2      	lsls	r2, r2, #31
 80137b4:	d502      	bpl.n	80137bc <_printf_float+0x194>
 80137b6:	3301      	adds	r3, #1
 80137b8:	440b      	add	r3, r1
 80137ba:	6123      	str	r3, [r4, #16]
 80137bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137be:	65a3      	str	r3, [r4, #88]	; 0x58
 80137c0:	f04f 0900 	mov.w	r9, #0
 80137c4:	e7d9      	b.n	801377a <_printf_float+0x152>
 80137c6:	b913      	cbnz	r3, 80137ce <_printf_float+0x1a6>
 80137c8:	6822      	ldr	r2, [r4, #0]
 80137ca:	07d0      	lsls	r0, r2, #31
 80137cc:	d501      	bpl.n	80137d2 <_printf_float+0x1aa>
 80137ce:	3302      	adds	r3, #2
 80137d0:	e7f3      	b.n	80137ba <_printf_float+0x192>
 80137d2:	2301      	movs	r3, #1
 80137d4:	e7f1      	b.n	80137ba <_printf_float+0x192>
 80137d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80137da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80137de:	4293      	cmp	r3, r2
 80137e0:	db05      	blt.n	80137ee <_printf_float+0x1c6>
 80137e2:	6822      	ldr	r2, [r4, #0]
 80137e4:	6123      	str	r3, [r4, #16]
 80137e6:	07d1      	lsls	r1, r2, #31
 80137e8:	d5e8      	bpl.n	80137bc <_printf_float+0x194>
 80137ea:	3301      	adds	r3, #1
 80137ec:	e7e5      	b.n	80137ba <_printf_float+0x192>
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	bfd4      	ite	le
 80137f2:	f1c3 0302 	rsble	r3, r3, #2
 80137f6:	2301      	movgt	r3, #1
 80137f8:	4413      	add	r3, r2
 80137fa:	e7de      	b.n	80137ba <_printf_float+0x192>
 80137fc:	6823      	ldr	r3, [r4, #0]
 80137fe:	055a      	lsls	r2, r3, #21
 8013800:	d407      	bmi.n	8013812 <_printf_float+0x1ea>
 8013802:	6923      	ldr	r3, [r4, #16]
 8013804:	4642      	mov	r2, r8
 8013806:	4631      	mov	r1, r6
 8013808:	4628      	mov	r0, r5
 801380a:	47b8      	blx	r7
 801380c:	3001      	adds	r0, #1
 801380e:	d12b      	bne.n	8013868 <_printf_float+0x240>
 8013810:	e767      	b.n	80136e2 <_printf_float+0xba>
 8013812:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013816:	f240 80dc 	bls.w	80139d2 <_printf_float+0x3aa>
 801381a:	2200      	movs	r2, #0
 801381c:	2300      	movs	r3, #0
 801381e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013822:	f7ed f969 	bl	8000af8 <__aeabi_dcmpeq>
 8013826:	2800      	cmp	r0, #0
 8013828:	d033      	beq.n	8013892 <_printf_float+0x26a>
 801382a:	2301      	movs	r3, #1
 801382c:	4a41      	ldr	r2, [pc, #260]	; (8013934 <_printf_float+0x30c>)
 801382e:	4631      	mov	r1, r6
 8013830:	4628      	mov	r0, r5
 8013832:	47b8      	blx	r7
 8013834:	3001      	adds	r0, #1
 8013836:	f43f af54 	beq.w	80136e2 <_printf_float+0xba>
 801383a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801383e:	429a      	cmp	r2, r3
 8013840:	db02      	blt.n	8013848 <_printf_float+0x220>
 8013842:	6823      	ldr	r3, [r4, #0]
 8013844:	07d8      	lsls	r0, r3, #31
 8013846:	d50f      	bpl.n	8013868 <_printf_float+0x240>
 8013848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801384c:	4631      	mov	r1, r6
 801384e:	4628      	mov	r0, r5
 8013850:	47b8      	blx	r7
 8013852:	3001      	adds	r0, #1
 8013854:	f43f af45 	beq.w	80136e2 <_printf_float+0xba>
 8013858:	f04f 0800 	mov.w	r8, #0
 801385c:	f104 091a 	add.w	r9, r4, #26
 8013860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013862:	3b01      	subs	r3, #1
 8013864:	4543      	cmp	r3, r8
 8013866:	dc09      	bgt.n	801387c <_printf_float+0x254>
 8013868:	6823      	ldr	r3, [r4, #0]
 801386a:	079b      	lsls	r3, r3, #30
 801386c:	f100 8103 	bmi.w	8013a76 <_printf_float+0x44e>
 8013870:	68e0      	ldr	r0, [r4, #12]
 8013872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013874:	4298      	cmp	r0, r3
 8013876:	bfb8      	it	lt
 8013878:	4618      	movlt	r0, r3
 801387a:	e734      	b.n	80136e6 <_printf_float+0xbe>
 801387c:	2301      	movs	r3, #1
 801387e:	464a      	mov	r2, r9
 8013880:	4631      	mov	r1, r6
 8013882:	4628      	mov	r0, r5
 8013884:	47b8      	blx	r7
 8013886:	3001      	adds	r0, #1
 8013888:	f43f af2b 	beq.w	80136e2 <_printf_float+0xba>
 801388c:	f108 0801 	add.w	r8, r8, #1
 8013890:	e7e6      	b.n	8013860 <_printf_float+0x238>
 8013892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013894:	2b00      	cmp	r3, #0
 8013896:	dc2b      	bgt.n	80138f0 <_printf_float+0x2c8>
 8013898:	2301      	movs	r3, #1
 801389a:	4a26      	ldr	r2, [pc, #152]	; (8013934 <_printf_float+0x30c>)
 801389c:	4631      	mov	r1, r6
 801389e:	4628      	mov	r0, r5
 80138a0:	47b8      	blx	r7
 80138a2:	3001      	adds	r0, #1
 80138a4:	f43f af1d 	beq.w	80136e2 <_printf_float+0xba>
 80138a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138aa:	b923      	cbnz	r3, 80138b6 <_printf_float+0x28e>
 80138ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138ae:	b913      	cbnz	r3, 80138b6 <_printf_float+0x28e>
 80138b0:	6823      	ldr	r3, [r4, #0]
 80138b2:	07d9      	lsls	r1, r3, #31
 80138b4:	d5d8      	bpl.n	8013868 <_printf_float+0x240>
 80138b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138ba:	4631      	mov	r1, r6
 80138bc:	4628      	mov	r0, r5
 80138be:	47b8      	blx	r7
 80138c0:	3001      	adds	r0, #1
 80138c2:	f43f af0e 	beq.w	80136e2 <_printf_float+0xba>
 80138c6:	f04f 0900 	mov.w	r9, #0
 80138ca:	f104 0a1a 	add.w	sl, r4, #26
 80138ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138d0:	425b      	negs	r3, r3
 80138d2:	454b      	cmp	r3, r9
 80138d4:	dc01      	bgt.n	80138da <_printf_float+0x2b2>
 80138d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138d8:	e794      	b.n	8013804 <_printf_float+0x1dc>
 80138da:	2301      	movs	r3, #1
 80138dc:	4652      	mov	r2, sl
 80138de:	4631      	mov	r1, r6
 80138e0:	4628      	mov	r0, r5
 80138e2:	47b8      	blx	r7
 80138e4:	3001      	adds	r0, #1
 80138e6:	f43f aefc 	beq.w	80136e2 <_printf_float+0xba>
 80138ea:	f109 0901 	add.w	r9, r9, #1
 80138ee:	e7ee      	b.n	80138ce <_printf_float+0x2a6>
 80138f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80138f4:	429a      	cmp	r2, r3
 80138f6:	bfa8      	it	ge
 80138f8:	461a      	movge	r2, r3
 80138fa:	2a00      	cmp	r2, #0
 80138fc:	4691      	mov	r9, r2
 80138fe:	dd07      	ble.n	8013910 <_printf_float+0x2e8>
 8013900:	4613      	mov	r3, r2
 8013902:	4631      	mov	r1, r6
 8013904:	4642      	mov	r2, r8
 8013906:	4628      	mov	r0, r5
 8013908:	47b8      	blx	r7
 801390a:	3001      	adds	r0, #1
 801390c:	f43f aee9 	beq.w	80136e2 <_printf_float+0xba>
 8013910:	f104 031a 	add.w	r3, r4, #26
 8013914:	f04f 0b00 	mov.w	fp, #0
 8013918:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801391c:	9306      	str	r3, [sp, #24]
 801391e:	e015      	b.n	801394c <_printf_float+0x324>
 8013920:	7fefffff 	.word	0x7fefffff
 8013924:	08018044 	.word	0x08018044
 8013928:	08018040 	.word	0x08018040
 801392c:	0801804c 	.word	0x0801804c
 8013930:	08018048 	.word	0x08018048
 8013934:	0801826b 	.word	0x0801826b
 8013938:	2301      	movs	r3, #1
 801393a:	9a06      	ldr	r2, [sp, #24]
 801393c:	4631      	mov	r1, r6
 801393e:	4628      	mov	r0, r5
 8013940:	47b8      	blx	r7
 8013942:	3001      	adds	r0, #1
 8013944:	f43f aecd 	beq.w	80136e2 <_printf_float+0xba>
 8013948:	f10b 0b01 	add.w	fp, fp, #1
 801394c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013950:	ebaa 0309 	sub.w	r3, sl, r9
 8013954:	455b      	cmp	r3, fp
 8013956:	dcef      	bgt.n	8013938 <_printf_float+0x310>
 8013958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801395c:	429a      	cmp	r2, r3
 801395e:	44d0      	add	r8, sl
 8013960:	db15      	blt.n	801398e <_printf_float+0x366>
 8013962:	6823      	ldr	r3, [r4, #0]
 8013964:	07da      	lsls	r2, r3, #31
 8013966:	d412      	bmi.n	801398e <_printf_float+0x366>
 8013968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801396a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801396c:	eba3 020a 	sub.w	r2, r3, sl
 8013970:	eba3 0a01 	sub.w	sl, r3, r1
 8013974:	4592      	cmp	sl, r2
 8013976:	bfa8      	it	ge
 8013978:	4692      	movge	sl, r2
 801397a:	f1ba 0f00 	cmp.w	sl, #0
 801397e:	dc0e      	bgt.n	801399e <_printf_float+0x376>
 8013980:	f04f 0800 	mov.w	r8, #0
 8013984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013988:	f104 091a 	add.w	r9, r4, #26
 801398c:	e019      	b.n	80139c2 <_printf_float+0x39a>
 801398e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013992:	4631      	mov	r1, r6
 8013994:	4628      	mov	r0, r5
 8013996:	47b8      	blx	r7
 8013998:	3001      	adds	r0, #1
 801399a:	d1e5      	bne.n	8013968 <_printf_float+0x340>
 801399c:	e6a1      	b.n	80136e2 <_printf_float+0xba>
 801399e:	4653      	mov	r3, sl
 80139a0:	4642      	mov	r2, r8
 80139a2:	4631      	mov	r1, r6
 80139a4:	4628      	mov	r0, r5
 80139a6:	47b8      	blx	r7
 80139a8:	3001      	adds	r0, #1
 80139aa:	d1e9      	bne.n	8013980 <_printf_float+0x358>
 80139ac:	e699      	b.n	80136e2 <_printf_float+0xba>
 80139ae:	2301      	movs	r3, #1
 80139b0:	464a      	mov	r2, r9
 80139b2:	4631      	mov	r1, r6
 80139b4:	4628      	mov	r0, r5
 80139b6:	47b8      	blx	r7
 80139b8:	3001      	adds	r0, #1
 80139ba:	f43f ae92 	beq.w	80136e2 <_printf_float+0xba>
 80139be:	f108 0801 	add.w	r8, r8, #1
 80139c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80139c6:	1a9b      	subs	r3, r3, r2
 80139c8:	eba3 030a 	sub.w	r3, r3, sl
 80139cc:	4543      	cmp	r3, r8
 80139ce:	dcee      	bgt.n	80139ae <_printf_float+0x386>
 80139d0:	e74a      	b.n	8013868 <_printf_float+0x240>
 80139d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139d4:	2a01      	cmp	r2, #1
 80139d6:	dc01      	bgt.n	80139dc <_printf_float+0x3b4>
 80139d8:	07db      	lsls	r3, r3, #31
 80139da:	d53a      	bpl.n	8013a52 <_printf_float+0x42a>
 80139dc:	2301      	movs	r3, #1
 80139de:	4642      	mov	r2, r8
 80139e0:	4631      	mov	r1, r6
 80139e2:	4628      	mov	r0, r5
 80139e4:	47b8      	blx	r7
 80139e6:	3001      	adds	r0, #1
 80139e8:	f43f ae7b 	beq.w	80136e2 <_printf_float+0xba>
 80139ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139f0:	4631      	mov	r1, r6
 80139f2:	4628      	mov	r0, r5
 80139f4:	47b8      	blx	r7
 80139f6:	3001      	adds	r0, #1
 80139f8:	f108 0801 	add.w	r8, r8, #1
 80139fc:	f43f ae71 	beq.w	80136e2 <_printf_float+0xba>
 8013a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a02:	2200      	movs	r2, #0
 8013a04:	f103 3aff 	add.w	sl, r3, #4294967295
 8013a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	f7ed f873 	bl	8000af8 <__aeabi_dcmpeq>
 8013a12:	b9c8      	cbnz	r0, 8013a48 <_printf_float+0x420>
 8013a14:	4653      	mov	r3, sl
 8013a16:	4642      	mov	r2, r8
 8013a18:	4631      	mov	r1, r6
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	47b8      	blx	r7
 8013a1e:	3001      	adds	r0, #1
 8013a20:	d10e      	bne.n	8013a40 <_printf_float+0x418>
 8013a22:	e65e      	b.n	80136e2 <_printf_float+0xba>
 8013a24:	2301      	movs	r3, #1
 8013a26:	4652      	mov	r2, sl
 8013a28:	4631      	mov	r1, r6
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	47b8      	blx	r7
 8013a2e:	3001      	adds	r0, #1
 8013a30:	f43f ae57 	beq.w	80136e2 <_printf_float+0xba>
 8013a34:	f108 0801 	add.w	r8, r8, #1
 8013a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a3a:	3b01      	subs	r3, #1
 8013a3c:	4543      	cmp	r3, r8
 8013a3e:	dcf1      	bgt.n	8013a24 <_printf_float+0x3fc>
 8013a40:	464b      	mov	r3, r9
 8013a42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013a46:	e6de      	b.n	8013806 <_printf_float+0x1de>
 8013a48:	f04f 0800 	mov.w	r8, #0
 8013a4c:	f104 0a1a 	add.w	sl, r4, #26
 8013a50:	e7f2      	b.n	8013a38 <_printf_float+0x410>
 8013a52:	2301      	movs	r3, #1
 8013a54:	e7df      	b.n	8013a16 <_printf_float+0x3ee>
 8013a56:	2301      	movs	r3, #1
 8013a58:	464a      	mov	r2, r9
 8013a5a:	4631      	mov	r1, r6
 8013a5c:	4628      	mov	r0, r5
 8013a5e:	47b8      	blx	r7
 8013a60:	3001      	adds	r0, #1
 8013a62:	f43f ae3e 	beq.w	80136e2 <_printf_float+0xba>
 8013a66:	f108 0801 	add.w	r8, r8, #1
 8013a6a:	68e3      	ldr	r3, [r4, #12]
 8013a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a6e:	1a9b      	subs	r3, r3, r2
 8013a70:	4543      	cmp	r3, r8
 8013a72:	dcf0      	bgt.n	8013a56 <_printf_float+0x42e>
 8013a74:	e6fc      	b.n	8013870 <_printf_float+0x248>
 8013a76:	f04f 0800 	mov.w	r8, #0
 8013a7a:	f104 0919 	add.w	r9, r4, #25
 8013a7e:	e7f4      	b.n	8013a6a <_printf_float+0x442>
 8013a80:	2900      	cmp	r1, #0
 8013a82:	f43f ae8b 	beq.w	801379c <_printf_float+0x174>
 8013a86:	2300      	movs	r3, #0
 8013a88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013a8c:	ab09      	add	r3, sp, #36	; 0x24
 8013a8e:	9300      	str	r3, [sp, #0]
 8013a90:	ec49 8b10 	vmov	d0, r8, r9
 8013a94:	6022      	str	r2, [r4, #0]
 8013a96:	f8cd a004 	str.w	sl, [sp, #4]
 8013a9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013a9e:	4628      	mov	r0, r5
 8013aa0:	f7ff fd2d 	bl	80134fe <__cvt>
 8013aa4:	4680      	mov	r8, r0
 8013aa6:	e648      	b.n	801373a <_printf_float+0x112>

08013aa8 <_printf_common>:
 8013aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aac:	4691      	mov	r9, r2
 8013aae:	461f      	mov	r7, r3
 8013ab0:	688a      	ldr	r2, [r1, #8]
 8013ab2:	690b      	ldr	r3, [r1, #16]
 8013ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013ab8:	4293      	cmp	r3, r2
 8013aba:	bfb8      	it	lt
 8013abc:	4613      	movlt	r3, r2
 8013abe:	f8c9 3000 	str.w	r3, [r9]
 8013ac2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013ac6:	4606      	mov	r6, r0
 8013ac8:	460c      	mov	r4, r1
 8013aca:	b112      	cbz	r2, 8013ad2 <_printf_common+0x2a>
 8013acc:	3301      	adds	r3, #1
 8013ace:	f8c9 3000 	str.w	r3, [r9]
 8013ad2:	6823      	ldr	r3, [r4, #0]
 8013ad4:	0699      	lsls	r1, r3, #26
 8013ad6:	bf42      	ittt	mi
 8013ad8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013adc:	3302      	addmi	r3, #2
 8013ade:	f8c9 3000 	strmi.w	r3, [r9]
 8013ae2:	6825      	ldr	r5, [r4, #0]
 8013ae4:	f015 0506 	ands.w	r5, r5, #6
 8013ae8:	d107      	bne.n	8013afa <_printf_common+0x52>
 8013aea:	f104 0a19 	add.w	sl, r4, #25
 8013aee:	68e3      	ldr	r3, [r4, #12]
 8013af0:	f8d9 2000 	ldr.w	r2, [r9]
 8013af4:	1a9b      	subs	r3, r3, r2
 8013af6:	42ab      	cmp	r3, r5
 8013af8:	dc28      	bgt.n	8013b4c <_printf_common+0xa4>
 8013afa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013afe:	6822      	ldr	r2, [r4, #0]
 8013b00:	3300      	adds	r3, #0
 8013b02:	bf18      	it	ne
 8013b04:	2301      	movne	r3, #1
 8013b06:	0692      	lsls	r2, r2, #26
 8013b08:	d42d      	bmi.n	8013b66 <_printf_common+0xbe>
 8013b0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013b0e:	4639      	mov	r1, r7
 8013b10:	4630      	mov	r0, r6
 8013b12:	47c0      	blx	r8
 8013b14:	3001      	adds	r0, #1
 8013b16:	d020      	beq.n	8013b5a <_printf_common+0xb2>
 8013b18:	6823      	ldr	r3, [r4, #0]
 8013b1a:	68e5      	ldr	r5, [r4, #12]
 8013b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8013b20:	f003 0306 	and.w	r3, r3, #6
 8013b24:	2b04      	cmp	r3, #4
 8013b26:	bf08      	it	eq
 8013b28:	1aad      	subeq	r5, r5, r2
 8013b2a:	68a3      	ldr	r3, [r4, #8]
 8013b2c:	6922      	ldr	r2, [r4, #16]
 8013b2e:	bf0c      	ite	eq
 8013b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b34:	2500      	movne	r5, #0
 8013b36:	4293      	cmp	r3, r2
 8013b38:	bfc4      	itt	gt
 8013b3a:	1a9b      	subgt	r3, r3, r2
 8013b3c:	18ed      	addgt	r5, r5, r3
 8013b3e:	f04f 0900 	mov.w	r9, #0
 8013b42:	341a      	adds	r4, #26
 8013b44:	454d      	cmp	r5, r9
 8013b46:	d11a      	bne.n	8013b7e <_printf_common+0xd6>
 8013b48:	2000      	movs	r0, #0
 8013b4a:	e008      	b.n	8013b5e <_printf_common+0xb6>
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	4652      	mov	r2, sl
 8013b50:	4639      	mov	r1, r7
 8013b52:	4630      	mov	r0, r6
 8013b54:	47c0      	blx	r8
 8013b56:	3001      	adds	r0, #1
 8013b58:	d103      	bne.n	8013b62 <_printf_common+0xba>
 8013b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b62:	3501      	adds	r5, #1
 8013b64:	e7c3      	b.n	8013aee <_printf_common+0x46>
 8013b66:	18e1      	adds	r1, r4, r3
 8013b68:	1c5a      	adds	r2, r3, #1
 8013b6a:	2030      	movs	r0, #48	; 0x30
 8013b6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013b70:	4422      	add	r2, r4
 8013b72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013b76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013b7a:	3302      	adds	r3, #2
 8013b7c:	e7c5      	b.n	8013b0a <_printf_common+0x62>
 8013b7e:	2301      	movs	r3, #1
 8013b80:	4622      	mov	r2, r4
 8013b82:	4639      	mov	r1, r7
 8013b84:	4630      	mov	r0, r6
 8013b86:	47c0      	blx	r8
 8013b88:	3001      	adds	r0, #1
 8013b8a:	d0e6      	beq.n	8013b5a <_printf_common+0xb2>
 8013b8c:	f109 0901 	add.w	r9, r9, #1
 8013b90:	e7d8      	b.n	8013b44 <_printf_common+0x9c>
	...

08013b94 <_printf_i>:
 8013b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013b9c:	460c      	mov	r4, r1
 8013b9e:	7e09      	ldrb	r1, [r1, #24]
 8013ba0:	b085      	sub	sp, #20
 8013ba2:	296e      	cmp	r1, #110	; 0x6e
 8013ba4:	4617      	mov	r7, r2
 8013ba6:	4606      	mov	r6, r0
 8013ba8:	4698      	mov	r8, r3
 8013baa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bac:	f000 80b3 	beq.w	8013d16 <_printf_i+0x182>
 8013bb0:	d822      	bhi.n	8013bf8 <_printf_i+0x64>
 8013bb2:	2963      	cmp	r1, #99	; 0x63
 8013bb4:	d036      	beq.n	8013c24 <_printf_i+0x90>
 8013bb6:	d80a      	bhi.n	8013bce <_printf_i+0x3a>
 8013bb8:	2900      	cmp	r1, #0
 8013bba:	f000 80b9 	beq.w	8013d30 <_printf_i+0x19c>
 8013bbe:	2958      	cmp	r1, #88	; 0x58
 8013bc0:	f000 8083 	beq.w	8013cca <_printf_i+0x136>
 8013bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013bc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013bcc:	e032      	b.n	8013c34 <_printf_i+0xa0>
 8013bce:	2964      	cmp	r1, #100	; 0x64
 8013bd0:	d001      	beq.n	8013bd6 <_printf_i+0x42>
 8013bd2:	2969      	cmp	r1, #105	; 0x69
 8013bd4:	d1f6      	bne.n	8013bc4 <_printf_i+0x30>
 8013bd6:	6820      	ldr	r0, [r4, #0]
 8013bd8:	6813      	ldr	r3, [r2, #0]
 8013bda:	0605      	lsls	r5, r0, #24
 8013bdc:	f103 0104 	add.w	r1, r3, #4
 8013be0:	d52a      	bpl.n	8013c38 <_printf_i+0xa4>
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	6011      	str	r1, [r2, #0]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	da03      	bge.n	8013bf2 <_printf_i+0x5e>
 8013bea:	222d      	movs	r2, #45	; 0x2d
 8013bec:	425b      	negs	r3, r3
 8013bee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013bf2:	486f      	ldr	r0, [pc, #444]	; (8013db0 <_printf_i+0x21c>)
 8013bf4:	220a      	movs	r2, #10
 8013bf6:	e039      	b.n	8013c6c <_printf_i+0xd8>
 8013bf8:	2973      	cmp	r1, #115	; 0x73
 8013bfa:	f000 809d 	beq.w	8013d38 <_printf_i+0x1a4>
 8013bfe:	d808      	bhi.n	8013c12 <_printf_i+0x7e>
 8013c00:	296f      	cmp	r1, #111	; 0x6f
 8013c02:	d020      	beq.n	8013c46 <_printf_i+0xb2>
 8013c04:	2970      	cmp	r1, #112	; 0x70
 8013c06:	d1dd      	bne.n	8013bc4 <_printf_i+0x30>
 8013c08:	6823      	ldr	r3, [r4, #0]
 8013c0a:	f043 0320 	orr.w	r3, r3, #32
 8013c0e:	6023      	str	r3, [r4, #0]
 8013c10:	e003      	b.n	8013c1a <_printf_i+0x86>
 8013c12:	2975      	cmp	r1, #117	; 0x75
 8013c14:	d017      	beq.n	8013c46 <_printf_i+0xb2>
 8013c16:	2978      	cmp	r1, #120	; 0x78
 8013c18:	d1d4      	bne.n	8013bc4 <_printf_i+0x30>
 8013c1a:	2378      	movs	r3, #120	; 0x78
 8013c1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013c20:	4864      	ldr	r0, [pc, #400]	; (8013db4 <_printf_i+0x220>)
 8013c22:	e055      	b.n	8013cd0 <_printf_i+0x13c>
 8013c24:	6813      	ldr	r3, [r2, #0]
 8013c26:	1d19      	adds	r1, r3, #4
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	6011      	str	r1, [r2, #0]
 8013c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c34:	2301      	movs	r3, #1
 8013c36:	e08c      	b.n	8013d52 <_printf_i+0x1be>
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	6011      	str	r1, [r2, #0]
 8013c3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013c40:	bf18      	it	ne
 8013c42:	b21b      	sxthne	r3, r3
 8013c44:	e7cf      	b.n	8013be6 <_printf_i+0x52>
 8013c46:	6813      	ldr	r3, [r2, #0]
 8013c48:	6825      	ldr	r5, [r4, #0]
 8013c4a:	1d18      	adds	r0, r3, #4
 8013c4c:	6010      	str	r0, [r2, #0]
 8013c4e:	0628      	lsls	r0, r5, #24
 8013c50:	d501      	bpl.n	8013c56 <_printf_i+0xc2>
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	e002      	b.n	8013c5c <_printf_i+0xc8>
 8013c56:	0668      	lsls	r0, r5, #25
 8013c58:	d5fb      	bpl.n	8013c52 <_printf_i+0xbe>
 8013c5a:	881b      	ldrh	r3, [r3, #0]
 8013c5c:	4854      	ldr	r0, [pc, #336]	; (8013db0 <_printf_i+0x21c>)
 8013c5e:	296f      	cmp	r1, #111	; 0x6f
 8013c60:	bf14      	ite	ne
 8013c62:	220a      	movne	r2, #10
 8013c64:	2208      	moveq	r2, #8
 8013c66:	2100      	movs	r1, #0
 8013c68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013c6c:	6865      	ldr	r5, [r4, #4]
 8013c6e:	60a5      	str	r5, [r4, #8]
 8013c70:	2d00      	cmp	r5, #0
 8013c72:	f2c0 8095 	blt.w	8013da0 <_printf_i+0x20c>
 8013c76:	6821      	ldr	r1, [r4, #0]
 8013c78:	f021 0104 	bic.w	r1, r1, #4
 8013c7c:	6021      	str	r1, [r4, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d13d      	bne.n	8013cfe <_printf_i+0x16a>
 8013c82:	2d00      	cmp	r5, #0
 8013c84:	f040 808e 	bne.w	8013da4 <_printf_i+0x210>
 8013c88:	4665      	mov	r5, ip
 8013c8a:	2a08      	cmp	r2, #8
 8013c8c:	d10b      	bne.n	8013ca6 <_printf_i+0x112>
 8013c8e:	6823      	ldr	r3, [r4, #0]
 8013c90:	07db      	lsls	r3, r3, #31
 8013c92:	d508      	bpl.n	8013ca6 <_printf_i+0x112>
 8013c94:	6923      	ldr	r3, [r4, #16]
 8013c96:	6862      	ldr	r2, [r4, #4]
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	bfde      	ittt	le
 8013c9c:	2330      	movle	r3, #48	; 0x30
 8013c9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013ca2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013ca6:	ebac 0305 	sub.w	r3, ip, r5
 8013caa:	6123      	str	r3, [r4, #16]
 8013cac:	f8cd 8000 	str.w	r8, [sp]
 8013cb0:	463b      	mov	r3, r7
 8013cb2:	aa03      	add	r2, sp, #12
 8013cb4:	4621      	mov	r1, r4
 8013cb6:	4630      	mov	r0, r6
 8013cb8:	f7ff fef6 	bl	8013aa8 <_printf_common>
 8013cbc:	3001      	adds	r0, #1
 8013cbe:	d14d      	bne.n	8013d5c <_printf_i+0x1c8>
 8013cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8013cc4:	b005      	add	sp, #20
 8013cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cca:	4839      	ldr	r0, [pc, #228]	; (8013db0 <_printf_i+0x21c>)
 8013ccc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013cd0:	6813      	ldr	r3, [r2, #0]
 8013cd2:	6821      	ldr	r1, [r4, #0]
 8013cd4:	1d1d      	adds	r5, r3, #4
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	6015      	str	r5, [r2, #0]
 8013cda:	060a      	lsls	r2, r1, #24
 8013cdc:	d50b      	bpl.n	8013cf6 <_printf_i+0x162>
 8013cde:	07ca      	lsls	r2, r1, #31
 8013ce0:	bf44      	itt	mi
 8013ce2:	f041 0120 	orrmi.w	r1, r1, #32
 8013ce6:	6021      	strmi	r1, [r4, #0]
 8013ce8:	b91b      	cbnz	r3, 8013cf2 <_printf_i+0x15e>
 8013cea:	6822      	ldr	r2, [r4, #0]
 8013cec:	f022 0220 	bic.w	r2, r2, #32
 8013cf0:	6022      	str	r2, [r4, #0]
 8013cf2:	2210      	movs	r2, #16
 8013cf4:	e7b7      	b.n	8013c66 <_printf_i+0xd2>
 8013cf6:	064d      	lsls	r5, r1, #25
 8013cf8:	bf48      	it	mi
 8013cfa:	b29b      	uxthmi	r3, r3
 8013cfc:	e7ef      	b.n	8013cde <_printf_i+0x14a>
 8013cfe:	4665      	mov	r5, ip
 8013d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d04:	fb02 3311 	mls	r3, r2, r1, r3
 8013d08:	5cc3      	ldrb	r3, [r0, r3]
 8013d0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013d0e:	460b      	mov	r3, r1
 8013d10:	2900      	cmp	r1, #0
 8013d12:	d1f5      	bne.n	8013d00 <_printf_i+0x16c>
 8013d14:	e7b9      	b.n	8013c8a <_printf_i+0xf6>
 8013d16:	6813      	ldr	r3, [r2, #0]
 8013d18:	6825      	ldr	r5, [r4, #0]
 8013d1a:	6961      	ldr	r1, [r4, #20]
 8013d1c:	1d18      	adds	r0, r3, #4
 8013d1e:	6010      	str	r0, [r2, #0]
 8013d20:	0628      	lsls	r0, r5, #24
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	d501      	bpl.n	8013d2a <_printf_i+0x196>
 8013d26:	6019      	str	r1, [r3, #0]
 8013d28:	e002      	b.n	8013d30 <_printf_i+0x19c>
 8013d2a:	066a      	lsls	r2, r5, #25
 8013d2c:	d5fb      	bpl.n	8013d26 <_printf_i+0x192>
 8013d2e:	8019      	strh	r1, [r3, #0]
 8013d30:	2300      	movs	r3, #0
 8013d32:	6123      	str	r3, [r4, #16]
 8013d34:	4665      	mov	r5, ip
 8013d36:	e7b9      	b.n	8013cac <_printf_i+0x118>
 8013d38:	6813      	ldr	r3, [r2, #0]
 8013d3a:	1d19      	adds	r1, r3, #4
 8013d3c:	6011      	str	r1, [r2, #0]
 8013d3e:	681d      	ldr	r5, [r3, #0]
 8013d40:	6862      	ldr	r2, [r4, #4]
 8013d42:	2100      	movs	r1, #0
 8013d44:	4628      	mov	r0, r5
 8013d46:	f7ec fa63 	bl	8000210 <memchr>
 8013d4a:	b108      	cbz	r0, 8013d50 <_printf_i+0x1bc>
 8013d4c:	1b40      	subs	r0, r0, r5
 8013d4e:	6060      	str	r0, [r4, #4]
 8013d50:	6863      	ldr	r3, [r4, #4]
 8013d52:	6123      	str	r3, [r4, #16]
 8013d54:	2300      	movs	r3, #0
 8013d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d5a:	e7a7      	b.n	8013cac <_printf_i+0x118>
 8013d5c:	6923      	ldr	r3, [r4, #16]
 8013d5e:	462a      	mov	r2, r5
 8013d60:	4639      	mov	r1, r7
 8013d62:	4630      	mov	r0, r6
 8013d64:	47c0      	blx	r8
 8013d66:	3001      	adds	r0, #1
 8013d68:	d0aa      	beq.n	8013cc0 <_printf_i+0x12c>
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	079b      	lsls	r3, r3, #30
 8013d6e:	d413      	bmi.n	8013d98 <_printf_i+0x204>
 8013d70:	68e0      	ldr	r0, [r4, #12]
 8013d72:	9b03      	ldr	r3, [sp, #12]
 8013d74:	4298      	cmp	r0, r3
 8013d76:	bfb8      	it	lt
 8013d78:	4618      	movlt	r0, r3
 8013d7a:	e7a3      	b.n	8013cc4 <_printf_i+0x130>
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	464a      	mov	r2, r9
 8013d80:	4639      	mov	r1, r7
 8013d82:	4630      	mov	r0, r6
 8013d84:	47c0      	blx	r8
 8013d86:	3001      	adds	r0, #1
 8013d88:	d09a      	beq.n	8013cc0 <_printf_i+0x12c>
 8013d8a:	3501      	adds	r5, #1
 8013d8c:	68e3      	ldr	r3, [r4, #12]
 8013d8e:	9a03      	ldr	r2, [sp, #12]
 8013d90:	1a9b      	subs	r3, r3, r2
 8013d92:	42ab      	cmp	r3, r5
 8013d94:	dcf2      	bgt.n	8013d7c <_printf_i+0x1e8>
 8013d96:	e7eb      	b.n	8013d70 <_printf_i+0x1dc>
 8013d98:	2500      	movs	r5, #0
 8013d9a:	f104 0919 	add.w	r9, r4, #25
 8013d9e:	e7f5      	b.n	8013d8c <_printf_i+0x1f8>
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d1ac      	bne.n	8013cfe <_printf_i+0x16a>
 8013da4:	7803      	ldrb	r3, [r0, #0]
 8013da6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013daa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013dae:	e76c      	b.n	8013c8a <_printf_i+0xf6>
 8013db0:	08018050 	.word	0x08018050
 8013db4:	08018061 	.word	0x08018061

08013db8 <_scanf_float>:
 8013db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dbc:	469a      	mov	sl, r3
 8013dbe:	688b      	ldr	r3, [r1, #8]
 8013dc0:	4616      	mov	r6, r2
 8013dc2:	1e5a      	subs	r2, r3, #1
 8013dc4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013dc8:	b087      	sub	sp, #28
 8013dca:	bf83      	ittte	hi
 8013dcc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013dd0:	189b      	addhi	r3, r3, r2
 8013dd2:	9301      	strhi	r3, [sp, #4]
 8013dd4:	2300      	movls	r3, #0
 8013dd6:	bf86      	itte	hi
 8013dd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013ddc:	608b      	strhi	r3, [r1, #8]
 8013dde:	9301      	strls	r3, [sp, #4]
 8013de0:	680b      	ldr	r3, [r1, #0]
 8013de2:	4688      	mov	r8, r1
 8013de4:	f04f 0b00 	mov.w	fp, #0
 8013de8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013dec:	f848 3b1c 	str.w	r3, [r8], #28
 8013df0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013df4:	4607      	mov	r7, r0
 8013df6:	460c      	mov	r4, r1
 8013df8:	4645      	mov	r5, r8
 8013dfa:	465a      	mov	r2, fp
 8013dfc:	46d9      	mov	r9, fp
 8013dfe:	f8cd b008 	str.w	fp, [sp, #8]
 8013e02:	68a1      	ldr	r1, [r4, #8]
 8013e04:	b181      	cbz	r1, 8013e28 <_scanf_float+0x70>
 8013e06:	6833      	ldr	r3, [r6, #0]
 8013e08:	781b      	ldrb	r3, [r3, #0]
 8013e0a:	2b49      	cmp	r3, #73	; 0x49
 8013e0c:	d071      	beq.n	8013ef2 <_scanf_float+0x13a>
 8013e0e:	d84d      	bhi.n	8013eac <_scanf_float+0xf4>
 8013e10:	2b39      	cmp	r3, #57	; 0x39
 8013e12:	d840      	bhi.n	8013e96 <_scanf_float+0xde>
 8013e14:	2b31      	cmp	r3, #49	; 0x31
 8013e16:	f080 8088 	bcs.w	8013f2a <_scanf_float+0x172>
 8013e1a:	2b2d      	cmp	r3, #45	; 0x2d
 8013e1c:	f000 8090 	beq.w	8013f40 <_scanf_float+0x188>
 8013e20:	d815      	bhi.n	8013e4e <_scanf_float+0x96>
 8013e22:	2b2b      	cmp	r3, #43	; 0x2b
 8013e24:	f000 808c 	beq.w	8013f40 <_scanf_float+0x188>
 8013e28:	f1b9 0f00 	cmp.w	r9, #0
 8013e2c:	d003      	beq.n	8013e36 <_scanf_float+0x7e>
 8013e2e:	6823      	ldr	r3, [r4, #0]
 8013e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e34:	6023      	str	r3, [r4, #0]
 8013e36:	3a01      	subs	r2, #1
 8013e38:	2a01      	cmp	r2, #1
 8013e3a:	f200 80ea 	bhi.w	8014012 <_scanf_float+0x25a>
 8013e3e:	4545      	cmp	r5, r8
 8013e40:	f200 80dc 	bhi.w	8013ffc <_scanf_float+0x244>
 8013e44:	2601      	movs	r6, #1
 8013e46:	4630      	mov	r0, r6
 8013e48:	b007      	add	sp, #28
 8013e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8013e50:	f000 809f 	beq.w	8013f92 <_scanf_float+0x1da>
 8013e54:	2b30      	cmp	r3, #48	; 0x30
 8013e56:	d1e7      	bne.n	8013e28 <_scanf_float+0x70>
 8013e58:	6820      	ldr	r0, [r4, #0]
 8013e5a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013e5e:	d064      	beq.n	8013f2a <_scanf_float+0x172>
 8013e60:	9b01      	ldr	r3, [sp, #4]
 8013e62:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013e66:	6020      	str	r0, [r4, #0]
 8013e68:	f109 0901 	add.w	r9, r9, #1
 8013e6c:	b11b      	cbz	r3, 8013e76 <_scanf_float+0xbe>
 8013e6e:	3b01      	subs	r3, #1
 8013e70:	3101      	adds	r1, #1
 8013e72:	9301      	str	r3, [sp, #4]
 8013e74:	60a1      	str	r1, [r4, #8]
 8013e76:	68a3      	ldr	r3, [r4, #8]
 8013e78:	3b01      	subs	r3, #1
 8013e7a:	60a3      	str	r3, [r4, #8]
 8013e7c:	6923      	ldr	r3, [r4, #16]
 8013e7e:	3301      	adds	r3, #1
 8013e80:	6123      	str	r3, [r4, #16]
 8013e82:	6873      	ldr	r3, [r6, #4]
 8013e84:	3b01      	subs	r3, #1
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	6073      	str	r3, [r6, #4]
 8013e8a:	f340 80ac 	ble.w	8013fe6 <_scanf_float+0x22e>
 8013e8e:	6833      	ldr	r3, [r6, #0]
 8013e90:	3301      	adds	r3, #1
 8013e92:	6033      	str	r3, [r6, #0]
 8013e94:	e7b5      	b.n	8013e02 <_scanf_float+0x4a>
 8013e96:	2b45      	cmp	r3, #69	; 0x45
 8013e98:	f000 8085 	beq.w	8013fa6 <_scanf_float+0x1ee>
 8013e9c:	2b46      	cmp	r3, #70	; 0x46
 8013e9e:	d06a      	beq.n	8013f76 <_scanf_float+0x1be>
 8013ea0:	2b41      	cmp	r3, #65	; 0x41
 8013ea2:	d1c1      	bne.n	8013e28 <_scanf_float+0x70>
 8013ea4:	2a01      	cmp	r2, #1
 8013ea6:	d1bf      	bne.n	8013e28 <_scanf_float+0x70>
 8013ea8:	2202      	movs	r2, #2
 8013eaa:	e046      	b.n	8013f3a <_scanf_float+0x182>
 8013eac:	2b65      	cmp	r3, #101	; 0x65
 8013eae:	d07a      	beq.n	8013fa6 <_scanf_float+0x1ee>
 8013eb0:	d818      	bhi.n	8013ee4 <_scanf_float+0x12c>
 8013eb2:	2b54      	cmp	r3, #84	; 0x54
 8013eb4:	d066      	beq.n	8013f84 <_scanf_float+0x1cc>
 8013eb6:	d811      	bhi.n	8013edc <_scanf_float+0x124>
 8013eb8:	2b4e      	cmp	r3, #78	; 0x4e
 8013eba:	d1b5      	bne.n	8013e28 <_scanf_float+0x70>
 8013ebc:	2a00      	cmp	r2, #0
 8013ebe:	d146      	bne.n	8013f4e <_scanf_float+0x196>
 8013ec0:	f1b9 0f00 	cmp.w	r9, #0
 8013ec4:	d145      	bne.n	8013f52 <_scanf_float+0x19a>
 8013ec6:	6821      	ldr	r1, [r4, #0]
 8013ec8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013ecc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013ed0:	d13f      	bne.n	8013f52 <_scanf_float+0x19a>
 8013ed2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013ed6:	6021      	str	r1, [r4, #0]
 8013ed8:	2201      	movs	r2, #1
 8013eda:	e02e      	b.n	8013f3a <_scanf_float+0x182>
 8013edc:	2b59      	cmp	r3, #89	; 0x59
 8013ede:	d01e      	beq.n	8013f1e <_scanf_float+0x166>
 8013ee0:	2b61      	cmp	r3, #97	; 0x61
 8013ee2:	e7de      	b.n	8013ea2 <_scanf_float+0xea>
 8013ee4:	2b6e      	cmp	r3, #110	; 0x6e
 8013ee6:	d0e9      	beq.n	8013ebc <_scanf_float+0x104>
 8013ee8:	d815      	bhi.n	8013f16 <_scanf_float+0x15e>
 8013eea:	2b66      	cmp	r3, #102	; 0x66
 8013eec:	d043      	beq.n	8013f76 <_scanf_float+0x1be>
 8013eee:	2b69      	cmp	r3, #105	; 0x69
 8013ef0:	d19a      	bne.n	8013e28 <_scanf_float+0x70>
 8013ef2:	f1bb 0f00 	cmp.w	fp, #0
 8013ef6:	d138      	bne.n	8013f6a <_scanf_float+0x1b2>
 8013ef8:	f1b9 0f00 	cmp.w	r9, #0
 8013efc:	d197      	bne.n	8013e2e <_scanf_float+0x76>
 8013efe:	6821      	ldr	r1, [r4, #0]
 8013f00:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013f04:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013f08:	d195      	bne.n	8013e36 <_scanf_float+0x7e>
 8013f0a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013f0e:	6021      	str	r1, [r4, #0]
 8013f10:	f04f 0b01 	mov.w	fp, #1
 8013f14:	e011      	b.n	8013f3a <_scanf_float+0x182>
 8013f16:	2b74      	cmp	r3, #116	; 0x74
 8013f18:	d034      	beq.n	8013f84 <_scanf_float+0x1cc>
 8013f1a:	2b79      	cmp	r3, #121	; 0x79
 8013f1c:	d184      	bne.n	8013e28 <_scanf_float+0x70>
 8013f1e:	f1bb 0f07 	cmp.w	fp, #7
 8013f22:	d181      	bne.n	8013e28 <_scanf_float+0x70>
 8013f24:	f04f 0b08 	mov.w	fp, #8
 8013f28:	e007      	b.n	8013f3a <_scanf_float+0x182>
 8013f2a:	eb12 0f0b 	cmn.w	r2, fp
 8013f2e:	f47f af7b 	bne.w	8013e28 <_scanf_float+0x70>
 8013f32:	6821      	ldr	r1, [r4, #0]
 8013f34:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013f38:	6021      	str	r1, [r4, #0]
 8013f3a:	702b      	strb	r3, [r5, #0]
 8013f3c:	3501      	adds	r5, #1
 8013f3e:	e79a      	b.n	8013e76 <_scanf_float+0xbe>
 8013f40:	6821      	ldr	r1, [r4, #0]
 8013f42:	0608      	lsls	r0, r1, #24
 8013f44:	f57f af70 	bpl.w	8013e28 <_scanf_float+0x70>
 8013f48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013f4c:	e7f4      	b.n	8013f38 <_scanf_float+0x180>
 8013f4e:	2a02      	cmp	r2, #2
 8013f50:	d047      	beq.n	8013fe2 <_scanf_float+0x22a>
 8013f52:	f1bb 0f01 	cmp.w	fp, #1
 8013f56:	d003      	beq.n	8013f60 <_scanf_float+0x1a8>
 8013f58:	f1bb 0f04 	cmp.w	fp, #4
 8013f5c:	f47f af64 	bne.w	8013e28 <_scanf_float+0x70>
 8013f60:	f10b 0b01 	add.w	fp, fp, #1
 8013f64:	fa5f fb8b 	uxtb.w	fp, fp
 8013f68:	e7e7      	b.n	8013f3a <_scanf_float+0x182>
 8013f6a:	f1bb 0f03 	cmp.w	fp, #3
 8013f6e:	d0f7      	beq.n	8013f60 <_scanf_float+0x1a8>
 8013f70:	f1bb 0f05 	cmp.w	fp, #5
 8013f74:	e7f2      	b.n	8013f5c <_scanf_float+0x1a4>
 8013f76:	f1bb 0f02 	cmp.w	fp, #2
 8013f7a:	f47f af55 	bne.w	8013e28 <_scanf_float+0x70>
 8013f7e:	f04f 0b03 	mov.w	fp, #3
 8013f82:	e7da      	b.n	8013f3a <_scanf_float+0x182>
 8013f84:	f1bb 0f06 	cmp.w	fp, #6
 8013f88:	f47f af4e 	bne.w	8013e28 <_scanf_float+0x70>
 8013f8c:	f04f 0b07 	mov.w	fp, #7
 8013f90:	e7d3      	b.n	8013f3a <_scanf_float+0x182>
 8013f92:	6821      	ldr	r1, [r4, #0]
 8013f94:	0588      	lsls	r0, r1, #22
 8013f96:	f57f af47 	bpl.w	8013e28 <_scanf_float+0x70>
 8013f9a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013f9e:	6021      	str	r1, [r4, #0]
 8013fa0:	f8cd 9008 	str.w	r9, [sp, #8]
 8013fa4:	e7c9      	b.n	8013f3a <_scanf_float+0x182>
 8013fa6:	6821      	ldr	r1, [r4, #0]
 8013fa8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013fac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013fb0:	d006      	beq.n	8013fc0 <_scanf_float+0x208>
 8013fb2:	0548      	lsls	r0, r1, #21
 8013fb4:	f57f af38 	bpl.w	8013e28 <_scanf_float+0x70>
 8013fb8:	f1b9 0f00 	cmp.w	r9, #0
 8013fbc:	f43f af3b 	beq.w	8013e36 <_scanf_float+0x7e>
 8013fc0:	0588      	lsls	r0, r1, #22
 8013fc2:	bf58      	it	pl
 8013fc4:	9802      	ldrpl	r0, [sp, #8]
 8013fc6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013fca:	bf58      	it	pl
 8013fcc:	eba9 0000 	subpl.w	r0, r9, r0
 8013fd0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013fd4:	bf58      	it	pl
 8013fd6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013fda:	6021      	str	r1, [r4, #0]
 8013fdc:	f04f 0900 	mov.w	r9, #0
 8013fe0:	e7ab      	b.n	8013f3a <_scanf_float+0x182>
 8013fe2:	2203      	movs	r2, #3
 8013fe4:	e7a9      	b.n	8013f3a <_scanf_float+0x182>
 8013fe6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013fea:	9205      	str	r2, [sp, #20]
 8013fec:	4631      	mov	r1, r6
 8013fee:	4638      	mov	r0, r7
 8013ff0:	4798      	blx	r3
 8013ff2:	9a05      	ldr	r2, [sp, #20]
 8013ff4:	2800      	cmp	r0, #0
 8013ff6:	f43f af04 	beq.w	8013e02 <_scanf_float+0x4a>
 8013ffa:	e715      	b.n	8013e28 <_scanf_float+0x70>
 8013ffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014000:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014004:	4632      	mov	r2, r6
 8014006:	4638      	mov	r0, r7
 8014008:	4798      	blx	r3
 801400a:	6923      	ldr	r3, [r4, #16]
 801400c:	3b01      	subs	r3, #1
 801400e:	6123      	str	r3, [r4, #16]
 8014010:	e715      	b.n	8013e3e <_scanf_float+0x86>
 8014012:	f10b 33ff 	add.w	r3, fp, #4294967295
 8014016:	2b06      	cmp	r3, #6
 8014018:	d80a      	bhi.n	8014030 <_scanf_float+0x278>
 801401a:	f1bb 0f02 	cmp.w	fp, #2
 801401e:	d968      	bls.n	80140f2 <_scanf_float+0x33a>
 8014020:	f1ab 0b03 	sub.w	fp, fp, #3
 8014024:	fa5f fb8b 	uxtb.w	fp, fp
 8014028:	eba5 0b0b 	sub.w	fp, r5, fp
 801402c:	455d      	cmp	r5, fp
 801402e:	d14b      	bne.n	80140c8 <_scanf_float+0x310>
 8014030:	6823      	ldr	r3, [r4, #0]
 8014032:	05da      	lsls	r2, r3, #23
 8014034:	d51f      	bpl.n	8014076 <_scanf_float+0x2be>
 8014036:	055b      	lsls	r3, r3, #21
 8014038:	d468      	bmi.n	801410c <_scanf_float+0x354>
 801403a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801403e:	6923      	ldr	r3, [r4, #16]
 8014040:	2965      	cmp	r1, #101	; 0x65
 8014042:	f103 33ff 	add.w	r3, r3, #4294967295
 8014046:	f105 3bff 	add.w	fp, r5, #4294967295
 801404a:	6123      	str	r3, [r4, #16]
 801404c:	d00d      	beq.n	801406a <_scanf_float+0x2b2>
 801404e:	2945      	cmp	r1, #69	; 0x45
 8014050:	d00b      	beq.n	801406a <_scanf_float+0x2b2>
 8014052:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014056:	4632      	mov	r2, r6
 8014058:	4638      	mov	r0, r7
 801405a:	4798      	blx	r3
 801405c:	6923      	ldr	r3, [r4, #16]
 801405e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8014062:	3b01      	subs	r3, #1
 8014064:	f1a5 0b02 	sub.w	fp, r5, #2
 8014068:	6123      	str	r3, [r4, #16]
 801406a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801406e:	4632      	mov	r2, r6
 8014070:	4638      	mov	r0, r7
 8014072:	4798      	blx	r3
 8014074:	465d      	mov	r5, fp
 8014076:	6826      	ldr	r6, [r4, #0]
 8014078:	f016 0610 	ands.w	r6, r6, #16
 801407c:	d17a      	bne.n	8014174 <_scanf_float+0x3bc>
 801407e:	702e      	strb	r6, [r5, #0]
 8014080:	6823      	ldr	r3, [r4, #0]
 8014082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801408a:	d142      	bne.n	8014112 <_scanf_float+0x35a>
 801408c:	9b02      	ldr	r3, [sp, #8]
 801408e:	eba9 0303 	sub.w	r3, r9, r3
 8014092:	425a      	negs	r2, r3
 8014094:	2b00      	cmp	r3, #0
 8014096:	d149      	bne.n	801412c <_scanf_float+0x374>
 8014098:	2200      	movs	r2, #0
 801409a:	4641      	mov	r1, r8
 801409c:	4638      	mov	r0, r7
 801409e:	f000 ff0b 	bl	8014eb8 <_strtod_r>
 80140a2:	6825      	ldr	r5, [r4, #0]
 80140a4:	f8da 3000 	ldr.w	r3, [sl]
 80140a8:	f015 0f02 	tst.w	r5, #2
 80140ac:	f103 0204 	add.w	r2, r3, #4
 80140b0:	ec59 8b10 	vmov	r8, r9, d0
 80140b4:	f8ca 2000 	str.w	r2, [sl]
 80140b8:	d043      	beq.n	8014142 <_scanf_float+0x38a>
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	e9c3 8900 	strd	r8, r9, [r3]
 80140c0:	68e3      	ldr	r3, [r4, #12]
 80140c2:	3301      	adds	r3, #1
 80140c4:	60e3      	str	r3, [r4, #12]
 80140c6:	e6be      	b.n	8013e46 <_scanf_float+0x8e>
 80140c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80140d0:	4632      	mov	r2, r6
 80140d2:	4638      	mov	r0, r7
 80140d4:	4798      	blx	r3
 80140d6:	6923      	ldr	r3, [r4, #16]
 80140d8:	3b01      	subs	r3, #1
 80140da:	6123      	str	r3, [r4, #16]
 80140dc:	e7a6      	b.n	801402c <_scanf_float+0x274>
 80140de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140e2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80140e6:	4632      	mov	r2, r6
 80140e8:	4638      	mov	r0, r7
 80140ea:	4798      	blx	r3
 80140ec:	6923      	ldr	r3, [r4, #16]
 80140ee:	3b01      	subs	r3, #1
 80140f0:	6123      	str	r3, [r4, #16]
 80140f2:	4545      	cmp	r5, r8
 80140f4:	d8f3      	bhi.n	80140de <_scanf_float+0x326>
 80140f6:	e6a5      	b.n	8013e44 <_scanf_float+0x8c>
 80140f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014100:	4632      	mov	r2, r6
 8014102:	4638      	mov	r0, r7
 8014104:	4798      	blx	r3
 8014106:	6923      	ldr	r3, [r4, #16]
 8014108:	3b01      	subs	r3, #1
 801410a:	6123      	str	r3, [r4, #16]
 801410c:	4545      	cmp	r5, r8
 801410e:	d8f3      	bhi.n	80140f8 <_scanf_float+0x340>
 8014110:	e698      	b.n	8013e44 <_scanf_float+0x8c>
 8014112:	9b03      	ldr	r3, [sp, #12]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d0bf      	beq.n	8014098 <_scanf_float+0x2e0>
 8014118:	9904      	ldr	r1, [sp, #16]
 801411a:	230a      	movs	r3, #10
 801411c:	4632      	mov	r2, r6
 801411e:	3101      	adds	r1, #1
 8014120:	4638      	mov	r0, r7
 8014122:	f000 ff55 	bl	8014fd0 <_strtol_r>
 8014126:	9b03      	ldr	r3, [sp, #12]
 8014128:	9d04      	ldr	r5, [sp, #16]
 801412a:	1ac2      	subs	r2, r0, r3
 801412c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014130:	429d      	cmp	r5, r3
 8014132:	bf28      	it	cs
 8014134:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014138:	490f      	ldr	r1, [pc, #60]	; (8014178 <_scanf_float+0x3c0>)
 801413a:	4628      	mov	r0, r5
 801413c:	f000 f858 	bl	80141f0 <siprintf>
 8014140:	e7aa      	b.n	8014098 <_scanf_float+0x2e0>
 8014142:	f015 0504 	ands.w	r5, r5, #4
 8014146:	d1b8      	bne.n	80140ba <_scanf_float+0x302>
 8014148:	681f      	ldr	r7, [r3, #0]
 801414a:	ee10 2a10 	vmov	r2, s0
 801414e:	464b      	mov	r3, r9
 8014150:	ee10 0a10 	vmov	r0, s0
 8014154:	4649      	mov	r1, r9
 8014156:	f7ec fd01 	bl	8000b5c <__aeabi_dcmpun>
 801415a:	b128      	cbz	r0, 8014168 <_scanf_float+0x3b0>
 801415c:	4628      	mov	r0, r5
 801415e:	f000 f80d 	bl	801417c <nanf>
 8014162:	ed87 0a00 	vstr	s0, [r7]
 8014166:	e7ab      	b.n	80140c0 <_scanf_float+0x308>
 8014168:	4640      	mov	r0, r8
 801416a:	4649      	mov	r1, r9
 801416c:	f7ec fd54 	bl	8000c18 <__aeabi_d2f>
 8014170:	6038      	str	r0, [r7, #0]
 8014172:	e7a5      	b.n	80140c0 <_scanf_float+0x308>
 8014174:	2600      	movs	r6, #0
 8014176:	e666      	b.n	8013e46 <_scanf_float+0x8e>
 8014178:	08018072 	.word	0x08018072

0801417c <nanf>:
 801417c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014184 <nanf+0x8>
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	7fc00000 	.word	0x7fc00000

08014188 <sniprintf>:
 8014188:	b40c      	push	{r2, r3}
 801418a:	b530      	push	{r4, r5, lr}
 801418c:	4b17      	ldr	r3, [pc, #92]	; (80141ec <sniprintf+0x64>)
 801418e:	1e0c      	subs	r4, r1, #0
 8014190:	b09d      	sub	sp, #116	; 0x74
 8014192:	681d      	ldr	r5, [r3, #0]
 8014194:	da08      	bge.n	80141a8 <sniprintf+0x20>
 8014196:	238b      	movs	r3, #139	; 0x8b
 8014198:	602b      	str	r3, [r5, #0]
 801419a:	f04f 30ff 	mov.w	r0, #4294967295
 801419e:	b01d      	add	sp, #116	; 0x74
 80141a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141a4:	b002      	add	sp, #8
 80141a6:	4770      	bx	lr
 80141a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80141ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80141b0:	bf14      	ite	ne
 80141b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80141b6:	4623      	moveq	r3, r4
 80141b8:	9304      	str	r3, [sp, #16]
 80141ba:	9307      	str	r3, [sp, #28]
 80141bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141c0:	9002      	str	r0, [sp, #8]
 80141c2:	9006      	str	r0, [sp, #24]
 80141c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80141c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80141ca:	ab21      	add	r3, sp, #132	; 0x84
 80141cc:	a902      	add	r1, sp, #8
 80141ce:	4628      	mov	r0, r5
 80141d0:	9301      	str	r3, [sp, #4]
 80141d2:	f002 fde7 	bl	8016da4 <_svfiprintf_r>
 80141d6:	1c43      	adds	r3, r0, #1
 80141d8:	bfbc      	itt	lt
 80141da:	238b      	movlt	r3, #139	; 0x8b
 80141dc:	602b      	strlt	r3, [r5, #0]
 80141de:	2c00      	cmp	r4, #0
 80141e0:	d0dd      	beq.n	801419e <sniprintf+0x16>
 80141e2:	9b02      	ldr	r3, [sp, #8]
 80141e4:	2200      	movs	r2, #0
 80141e6:	701a      	strb	r2, [r3, #0]
 80141e8:	e7d9      	b.n	801419e <sniprintf+0x16>
 80141ea:	bf00      	nop
 80141ec:	2000000c 	.word	0x2000000c

080141f0 <siprintf>:
 80141f0:	b40e      	push	{r1, r2, r3}
 80141f2:	b500      	push	{lr}
 80141f4:	b09c      	sub	sp, #112	; 0x70
 80141f6:	ab1d      	add	r3, sp, #116	; 0x74
 80141f8:	9002      	str	r0, [sp, #8]
 80141fa:	9006      	str	r0, [sp, #24]
 80141fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014200:	4809      	ldr	r0, [pc, #36]	; (8014228 <siprintf+0x38>)
 8014202:	9107      	str	r1, [sp, #28]
 8014204:	9104      	str	r1, [sp, #16]
 8014206:	4909      	ldr	r1, [pc, #36]	; (801422c <siprintf+0x3c>)
 8014208:	f853 2b04 	ldr.w	r2, [r3], #4
 801420c:	9105      	str	r1, [sp, #20]
 801420e:	6800      	ldr	r0, [r0, #0]
 8014210:	9301      	str	r3, [sp, #4]
 8014212:	a902      	add	r1, sp, #8
 8014214:	f002 fdc6 	bl	8016da4 <_svfiprintf_r>
 8014218:	9b02      	ldr	r3, [sp, #8]
 801421a:	2200      	movs	r2, #0
 801421c:	701a      	strb	r2, [r3, #0]
 801421e:	b01c      	add	sp, #112	; 0x70
 8014220:	f85d eb04 	ldr.w	lr, [sp], #4
 8014224:	b003      	add	sp, #12
 8014226:	4770      	bx	lr
 8014228:	2000000c 	.word	0x2000000c
 801422c:	ffff0208 	.word	0xffff0208

08014230 <siscanf>:
 8014230:	b40e      	push	{r1, r2, r3}
 8014232:	b530      	push	{r4, r5, lr}
 8014234:	b09c      	sub	sp, #112	; 0x70
 8014236:	ac1f      	add	r4, sp, #124	; 0x7c
 8014238:	f44f 7201 	mov.w	r2, #516	; 0x204
 801423c:	f854 5b04 	ldr.w	r5, [r4], #4
 8014240:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014244:	9002      	str	r0, [sp, #8]
 8014246:	9006      	str	r0, [sp, #24]
 8014248:	f7eb ffda 	bl	8000200 <strlen>
 801424c:	4b0b      	ldr	r3, [pc, #44]	; (801427c <siscanf+0x4c>)
 801424e:	9003      	str	r0, [sp, #12]
 8014250:	9007      	str	r0, [sp, #28]
 8014252:	930b      	str	r3, [sp, #44]	; 0x2c
 8014254:	480a      	ldr	r0, [pc, #40]	; (8014280 <siscanf+0x50>)
 8014256:	9401      	str	r4, [sp, #4]
 8014258:	2300      	movs	r3, #0
 801425a:	930f      	str	r3, [sp, #60]	; 0x3c
 801425c:	9314      	str	r3, [sp, #80]	; 0x50
 801425e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014262:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014266:	462a      	mov	r2, r5
 8014268:	4623      	mov	r3, r4
 801426a:	a902      	add	r1, sp, #8
 801426c:	6800      	ldr	r0, [r0, #0]
 801426e:	f002 feeb 	bl	8017048 <__ssvfiscanf_r>
 8014272:	b01c      	add	sp, #112	; 0x70
 8014274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014278:	b003      	add	sp, #12
 801427a:	4770      	bx	lr
 801427c:	08014285 	.word	0x08014285
 8014280:	2000000c 	.word	0x2000000c

08014284 <__seofread>:
 8014284:	2000      	movs	r0, #0
 8014286:	4770      	bx	lr

08014288 <strcpy>:
 8014288:	4603      	mov	r3, r0
 801428a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801428e:	f803 2b01 	strb.w	r2, [r3], #1
 8014292:	2a00      	cmp	r2, #0
 8014294:	d1f9      	bne.n	801428a <strcpy+0x2>
 8014296:	4770      	bx	lr

08014298 <sulp>:
 8014298:	b570      	push	{r4, r5, r6, lr}
 801429a:	4604      	mov	r4, r0
 801429c:	460d      	mov	r5, r1
 801429e:	ec45 4b10 	vmov	d0, r4, r5
 80142a2:	4616      	mov	r6, r2
 80142a4:	f002 fb3a 	bl	801691c <__ulp>
 80142a8:	ec51 0b10 	vmov	r0, r1, d0
 80142ac:	b17e      	cbz	r6, 80142ce <sulp+0x36>
 80142ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80142b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	dd09      	ble.n	80142ce <sulp+0x36>
 80142ba:	051b      	lsls	r3, r3, #20
 80142bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80142c0:	2400      	movs	r4, #0
 80142c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80142c6:	4622      	mov	r2, r4
 80142c8:	462b      	mov	r3, r5
 80142ca:	f7ec f9ad 	bl	8000628 <__aeabi_dmul>
 80142ce:	bd70      	pop	{r4, r5, r6, pc}

080142d0 <_strtod_l>:
 80142d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d4:	461f      	mov	r7, r3
 80142d6:	b0a1      	sub	sp, #132	; 0x84
 80142d8:	2300      	movs	r3, #0
 80142da:	4681      	mov	r9, r0
 80142dc:	4638      	mov	r0, r7
 80142de:	460e      	mov	r6, r1
 80142e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80142e2:	931c      	str	r3, [sp, #112]	; 0x70
 80142e4:	f002 f824 	bl	8016330 <__localeconv_l>
 80142e8:	4680      	mov	r8, r0
 80142ea:	6800      	ldr	r0, [r0, #0]
 80142ec:	f7eb ff88 	bl	8000200 <strlen>
 80142f0:	f04f 0a00 	mov.w	sl, #0
 80142f4:	4604      	mov	r4, r0
 80142f6:	f04f 0b00 	mov.w	fp, #0
 80142fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80142fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142fe:	781a      	ldrb	r2, [r3, #0]
 8014300:	2a0d      	cmp	r2, #13
 8014302:	d832      	bhi.n	801436a <_strtod_l+0x9a>
 8014304:	2a09      	cmp	r2, #9
 8014306:	d236      	bcs.n	8014376 <_strtod_l+0xa6>
 8014308:	2a00      	cmp	r2, #0
 801430a:	d03e      	beq.n	801438a <_strtod_l+0xba>
 801430c:	2300      	movs	r3, #0
 801430e:	930d      	str	r3, [sp, #52]	; 0x34
 8014310:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014312:	782b      	ldrb	r3, [r5, #0]
 8014314:	2b30      	cmp	r3, #48	; 0x30
 8014316:	f040 80ac 	bne.w	8014472 <_strtod_l+0x1a2>
 801431a:	786b      	ldrb	r3, [r5, #1]
 801431c:	2b58      	cmp	r3, #88	; 0x58
 801431e:	d001      	beq.n	8014324 <_strtod_l+0x54>
 8014320:	2b78      	cmp	r3, #120	; 0x78
 8014322:	d167      	bne.n	80143f4 <_strtod_l+0x124>
 8014324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014326:	9301      	str	r3, [sp, #4]
 8014328:	ab1c      	add	r3, sp, #112	; 0x70
 801432a:	9300      	str	r3, [sp, #0]
 801432c:	9702      	str	r7, [sp, #8]
 801432e:	ab1d      	add	r3, sp, #116	; 0x74
 8014330:	4a88      	ldr	r2, [pc, #544]	; (8014554 <_strtod_l+0x284>)
 8014332:	a91b      	add	r1, sp, #108	; 0x6c
 8014334:	4648      	mov	r0, r9
 8014336:	f001 fd12 	bl	8015d5e <__gethex>
 801433a:	f010 0407 	ands.w	r4, r0, #7
 801433e:	4606      	mov	r6, r0
 8014340:	d005      	beq.n	801434e <_strtod_l+0x7e>
 8014342:	2c06      	cmp	r4, #6
 8014344:	d12b      	bne.n	801439e <_strtod_l+0xce>
 8014346:	3501      	adds	r5, #1
 8014348:	2300      	movs	r3, #0
 801434a:	951b      	str	r5, [sp, #108]	; 0x6c
 801434c:	930d      	str	r3, [sp, #52]	; 0x34
 801434e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014350:	2b00      	cmp	r3, #0
 8014352:	f040 859a 	bne.w	8014e8a <_strtod_l+0xbba>
 8014356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014358:	b1e3      	cbz	r3, 8014394 <_strtod_l+0xc4>
 801435a:	4652      	mov	r2, sl
 801435c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014360:	ec43 2b10 	vmov	d0, r2, r3
 8014364:	b021      	add	sp, #132	; 0x84
 8014366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801436a:	2a2b      	cmp	r2, #43	; 0x2b
 801436c:	d015      	beq.n	801439a <_strtod_l+0xca>
 801436e:	2a2d      	cmp	r2, #45	; 0x2d
 8014370:	d004      	beq.n	801437c <_strtod_l+0xac>
 8014372:	2a20      	cmp	r2, #32
 8014374:	d1ca      	bne.n	801430c <_strtod_l+0x3c>
 8014376:	3301      	adds	r3, #1
 8014378:	931b      	str	r3, [sp, #108]	; 0x6c
 801437a:	e7bf      	b.n	80142fc <_strtod_l+0x2c>
 801437c:	2201      	movs	r2, #1
 801437e:	920d      	str	r2, [sp, #52]	; 0x34
 8014380:	1c5a      	adds	r2, r3, #1
 8014382:	921b      	str	r2, [sp, #108]	; 0x6c
 8014384:	785b      	ldrb	r3, [r3, #1]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d1c2      	bne.n	8014310 <_strtod_l+0x40>
 801438a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801438c:	961b      	str	r6, [sp, #108]	; 0x6c
 801438e:	2b00      	cmp	r3, #0
 8014390:	f040 8579 	bne.w	8014e86 <_strtod_l+0xbb6>
 8014394:	4652      	mov	r2, sl
 8014396:	465b      	mov	r3, fp
 8014398:	e7e2      	b.n	8014360 <_strtod_l+0x90>
 801439a:	2200      	movs	r2, #0
 801439c:	e7ef      	b.n	801437e <_strtod_l+0xae>
 801439e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80143a0:	b13a      	cbz	r2, 80143b2 <_strtod_l+0xe2>
 80143a2:	2135      	movs	r1, #53	; 0x35
 80143a4:	a81e      	add	r0, sp, #120	; 0x78
 80143a6:	f002 fbb1 	bl	8016b0c <__copybits>
 80143aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80143ac:	4648      	mov	r0, r9
 80143ae:	f002 f81d 	bl	80163ec <_Bfree>
 80143b2:	3c01      	subs	r4, #1
 80143b4:	2c04      	cmp	r4, #4
 80143b6:	d806      	bhi.n	80143c6 <_strtod_l+0xf6>
 80143b8:	e8df f004 	tbb	[pc, r4]
 80143bc:	1714030a 	.word	0x1714030a
 80143c0:	0a          	.byte	0x0a
 80143c1:	00          	.byte	0x00
 80143c2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80143c6:	0730      	lsls	r0, r6, #28
 80143c8:	d5c1      	bpl.n	801434e <_strtod_l+0x7e>
 80143ca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80143ce:	e7be      	b.n	801434e <_strtod_l+0x7e>
 80143d0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80143d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80143d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80143da:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80143de:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80143e2:	e7f0      	b.n	80143c6 <_strtod_l+0xf6>
 80143e4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014558 <_strtod_l+0x288>
 80143e8:	e7ed      	b.n	80143c6 <_strtod_l+0xf6>
 80143ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80143ee:	f04f 3aff 	mov.w	sl, #4294967295
 80143f2:	e7e8      	b.n	80143c6 <_strtod_l+0xf6>
 80143f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143f6:	1c5a      	adds	r2, r3, #1
 80143f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80143fa:	785b      	ldrb	r3, [r3, #1]
 80143fc:	2b30      	cmp	r3, #48	; 0x30
 80143fe:	d0f9      	beq.n	80143f4 <_strtod_l+0x124>
 8014400:	2b00      	cmp	r3, #0
 8014402:	d0a4      	beq.n	801434e <_strtod_l+0x7e>
 8014404:	2301      	movs	r3, #1
 8014406:	2500      	movs	r5, #0
 8014408:	9306      	str	r3, [sp, #24]
 801440a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801440c:	9308      	str	r3, [sp, #32]
 801440e:	9507      	str	r5, [sp, #28]
 8014410:	9505      	str	r5, [sp, #20]
 8014412:	220a      	movs	r2, #10
 8014414:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014416:	7807      	ldrb	r7, [r0, #0]
 8014418:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801441c:	b2d9      	uxtb	r1, r3
 801441e:	2909      	cmp	r1, #9
 8014420:	d929      	bls.n	8014476 <_strtod_l+0x1a6>
 8014422:	4622      	mov	r2, r4
 8014424:	f8d8 1000 	ldr.w	r1, [r8]
 8014428:	f003 f8f8 	bl	801761c <strncmp>
 801442c:	2800      	cmp	r0, #0
 801442e:	d031      	beq.n	8014494 <_strtod_l+0x1c4>
 8014430:	2000      	movs	r0, #0
 8014432:	9c05      	ldr	r4, [sp, #20]
 8014434:	9004      	str	r0, [sp, #16]
 8014436:	463b      	mov	r3, r7
 8014438:	4602      	mov	r2, r0
 801443a:	2b65      	cmp	r3, #101	; 0x65
 801443c:	d001      	beq.n	8014442 <_strtod_l+0x172>
 801443e:	2b45      	cmp	r3, #69	; 0x45
 8014440:	d114      	bne.n	801446c <_strtod_l+0x19c>
 8014442:	b924      	cbnz	r4, 801444e <_strtod_l+0x17e>
 8014444:	b910      	cbnz	r0, 801444c <_strtod_l+0x17c>
 8014446:	9b06      	ldr	r3, [sp, #24]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d09e      	beq.n	801438a <_strtod_l+0xba>
 801444c:	2400      	movs	r4, #0
 801444e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014450:	1c73      	adds	r3, r6, #1
 8014452:	931b      	str	r3, [sp, #108]	; 0x6c
 8014454:	7873      	ldrb	r3, [r6, #1]
 8014456:	2b2b      	cmp	r3, #43	; 0x2b
 8014458:	d078      	beq.n	801454c <_strtod_l+0x27c>
 801445a:	2b2d      	cmp	r3, #45	; 0x2d
 801445c:	d070      	beq.n	8014540 <_strtod_l+0x270>
 801445e:	f04f 0c00 	mov.w	ip, #0
 8014462:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8014466:	2f09      	cmp	r7, #9
 8014468:	d97c      	bls.n	8014564 <_strtod_l+0x294>
 801446a:	961b      	str	r6, [sp, #108]	; 0x6c
 801446c:	f04f 0e00 	mov.w	lr, #0
 8014470:	e09a      	b.n	80145a8 <_strtod_l+0x2d8>
 8014472:	2300      	movs	r3, #0
 8014474:	e7c7      	b.n	8014406 <_strtod_l+0x136>
 8014476:	9905      	ldr	r1, [sp, #20]
 8014478:	2908      	cmp	r1, #8
 801447a:	bfdd      	ittte	le
 801447c:	9907      	ldrle	r1, [sp, #28]
 801447e:	fb02 3301 	mlale	r3, r2, r1, r3
 8014482:	9307      	strle	r3, [sp, #28]
 8014484:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014488:	9b05      	ldr	r3, [sp, #20]
 801448a:	3001      	adds	r0, #1
 801448c:	3301      	adds	r3, #1
 801448e:	9305      	str	r3, [sp, #20]
 8014490:	901b      	str	r0, [sp, #108]	; 0x6c
 8014492:	e7bf      	b.n	8014414 <_strtod_l+0x144>
 8014494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014496:	191a      	adds	r2, r3, r4
 8014498:	921b      	str	r2, [sp, #108]	; 0x6c
 801449a:	9a05      	ldr	r2, [sp, #20]
 801449c:	5d1b      	ldrb	r3, [r3, r4]
 801449e:	2a00      	cmp	r2, #0
 80144a0:	d037      	beq.n	8014512 <_strtod_l+0x242>
 80144a2:	9c05      	ldr	r4, [sp, #20]
 80144a4:	4602      	mov	r2, r0
 80144a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80144aa:	2909      	cmp	r1, #9
 80144ac:	d913      	bls.n	80144d6 <_strtod_l+0x206>
 80144ae:	2101      	movs	r1, #1
 80144b0:	9104      	str	r1, [sp, #16]
 80144b2:	e7c2      	b.n	801443a <_strtod_l+0x16a>
 80144b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144b6:	1c5a      	adds	r2, r3, #1
 80144b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80144ba:	785b      	ldrb	r3, [r3, #1]
 80144bc:	3001      	adds	r0, #1
 80144be:	2b30      	cmp	r3, #48	; 0x30
 80144c0:	d0f8      	beq.n	80144b4 <_strtod_l+0x1e4>
 80144c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80144c6:	2a08      	cmp	r2, #8
 80144c8:	f200 84e4 	bhi.w	8014e94 <_strtod_l+0xbc4>
 80144cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80144ce:	9208      	str	r2, [sp, #32]
 80144d0:	4602      	mov	r2, r0
 80144d2:	2000      	movs	r0, #0
 80144d4:	4604      	mov	r4, r0
 80144d6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80144da:	f100 0101 	add.w	r1, r0, #1
 80144de:	d012      	beq.n	8014506 <_strtod_l+0x236>
 80144e0:	440a      	add	r2, r1
 80144e2:	eb00 0c04 	add.w	ip, r0, r4
 80144e6:	4621      	mov	r1, r4
 80144e8:	270a      	movs	r7, #10
 80144ea:	458c      	cmp	ip, r1
 80144ec:	d113      	bne.n	8014516 <_strtod_l+0x246>
 80144ee:	1821      	adds	r1, r4, r0
 80144f0:	2908      	cmp	r1, #8
 80144f2:	f104 0401 	add.w	r4, r4, #1
 80144f6:	4404      	add	r4, r0
 80144f8:	dc19      	bgt.n	801452e <_strtod_l+0x25e>
 80144fa:	9b07      	ldr	r3, [sp, #28]
 80144fc:	210a      	movs	r1, #10
 80144fe:	fb01 e303 	mla	r3, r1, r3, lr
 8014502:	9307      	str	r3, [sp, #28]
 8014504:	2100      	movs	r1, #0
 8014506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014508:	1c58      	adds	r0, r3, #1
 801450a:	901b      	str	r0, [sp, #108]	; 0x6c
 801450c:	785b      	ldrb	r3, [r3, #1]
 801450e:	4608      	mov	r0, r1
 8014510:	e7c9      	b.n	80144a6 <_strtod_l+0x1d6>
 8014512:	9805      	ldr	r0, [sp, #20]
 8014514:	e7d3      	b.n	80144be <_strtod_l+0x1ee>
 8014516:	2908      	cmp	r1, #8
 8014518:	f101 0101 	add.w	r1, r1, #1
 801451c:	dc03      	bgt.n	8014526 <_strtod_l+0x256>
 801451e:	9b07      	ldr	r3, [sp, #28]
 8014520:	437b      	muls	r3, r7
 8014522:	9307      	str	r3, [sp, #28]
 8014524:	e7e1      	b.n	80144ea <_strtod_l+0x21a>
 8014526:	2910      	cmp	r1, #16
 8014528:	bfd8      	it	le
 801452a:	437d      	mulle	r5, r7
 801452c:	e7dd      	b.n	80144ea <_strtod_l+0x21a>
 801452e:	2c10      	cmp	r4, #16
 8014530:	bfdc      	itt	le
 8014532:	210a      	movle	r1, #10
 8014534:	fb01 e505 	mlale	r5, r1, r5, lr
 8014538:	e7e4      	b.n	8014504 <_strtod_l+0x234>
 801453a:	2301      	movs	r3, #1
 801453c:	9304      	str	r3, [sp, #16]
 801453e:	e781      	b.n	8014444 <_strtod_l+0x174>
 8014540:	f04f 0c01 	mov.w	ip, #1
 8014544:	1cb3      	adds	r3, r6, #2
 8014546:	931b      	str	r3, [sp, #108]	; 0x6c
 8014548:	78b3      	ldrb	r3, [r6, #2]
 801454a:	e78a      	b.n	8014462 <_strtod_l+0x192>
 801454c:	f04f 0c00 	mov.w	ip, #0
 8014550:	e7f8      	b.n	8014544 <_strtod_l+0x274>
 8014552:	bf00      	nop
 8014554:	08018078 	.word	0x08018078
 8014558:	7ff00000 	.word	0x7ff00000
 801455c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801455e:	1c5f      	adds	r7, r3, #1
 8014560:	971b      	str	r7, [sp, #108]	; 0x6c
 8014562:	785b      	ldrb	r3, [r3, #1]
 8014564:	2b30      	cmp	r3, #48	; 0x30
 8014566:	d0f9      	beq.n	801455c <_strtod_l+0x28c>
 8014568:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801456c:	2f08      	cmp	r7, #8
 801456e:	f63f af7d 	bhi.w	801446c <_strtod_l+0x19c>
 8014572:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014576:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014578:	930a      	str	r3, [sp, #40]	; 0x28
 801457a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801457c:	1c5f      	adds	r7, r3, #1
 801457e:	971b      	str	r7, [sp, #108]	; 0x6c
 8014580:	785b      	ldrb	r3, [r3, #1]
 8014582:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8014586:	f1b8 0f09 	cmp.w	r8, #9
 801458a:	d937      	bls.n	80145fc <_strtod_l+0x32c>
 801458c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801458e:	1a7f      	subs	r7, r7, r1
 8014590:	2f08      	cmp	r7, #8
 8014592:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014596:	dc37      	bgt.n	8014608 <_strtod_l+0x338>
 8014598:	45be      	cmp	lr, r7
 801459a:	bfa8      	it	ge
 801459c:	46be      	movge	lr, r7
 801459e:	f1bc 0f00 	cmp.w	ip, #0
 80145a2:	d001      	beq.n	80145a8 <_strtod_l+0x2d8>
 80145a4:	f1ce 0e00 	rsb	lr, lr, #0
 80145a8:	2c00      	cmp	r4, #0
 80145aa:	d151      	bne.n	8014650 <_strtod_l+0x380>
 80145ac:	2800      	cmp	r0, #0
 80145ae:	f47f aece 	bne.w	801434e <_strtod_l+0x7e>
 80145b2:	9a06      	ldr	r2, [sp, #24]
 80145b4:	2a00      	cmp	r2, #0
 80145b6:	f47f aeca 	bne.w	801434e <_strtod_l+0x7e>
 80145ba:	9a04      	ldr	r2, [sp, #16]
 80145bc:	2a00      	cmp	r2, #0
 80145be:	f47f aee4 	bne.w	801438a <_strtod_l+0xba>
 80145c2:	2b4e      	cmp	r3, #78	; 0x4e
 80145c4:	d027      	beq.n	8014616 <_strtod_l+0x346>
 80145c6:	dc21      	bgt.n	801460c <_strtod_l+0x33c>
 80145c8:	2b49      	cmp	r3, #73	; 0x49
 80145ca:	f47f aede 	bne.w	801438a <_strtod_l+0xba>
 80145ce:	49a0      	ldr	r1, [pc, #640]	; (8014850 <_strtod_l+0x580>)
 80145d0:	a81b      	add	r0, sp, #108	; 0x6c
 80145d2:	f001 fdf7 	bl	80161c4 <__match>
 80145d6:	2800      	cmp	r0, #0
 80145d8:	f43f aed7 	beq.w	801438a <_strtod_l+0xba>
 80145dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80145de:	499d      	ldr	r1, [pc, #628]	; (8014854 <_strtod_l+0x584>)
 80145e0:	3b01      	subs	r3, #1
 80145e2:	a81b      	add	r0, sp, #108	; 0x6c
 80145e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80145e6:	f001 fded 	bl	80161c4 <__match>
 80145ea:	b910      	cbnz	r0, 80145f2 <_strtod_l+0x322>
 80145ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80145ee:	3301      	adds	r3, #1
 80145f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80145f2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014868 <_strtod_l+0x598>
 80145f6:	f04f 0a00 	mov.w	sl, #0
 80145fa:	e6a8      	b.n	801434e <_strtod_l+0x7e>
 80145fc:	210a      	movs	r1, #10
 80145fe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014602:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014606:	e7b8      	b.n	801457a <_strtod_l+0x2aa>
 8014608:	46be      	mov	lr, r7
 801460a:	e7c8      	b.n	801459e <_strtod_l+0x2ce>
 801460c:	2b69      	cmp	r3, #105	; 0x69
 801460e:	d0de      	beq.n	80145ce <_strtod_l+0x2fe>
 8014610:	2b6e      	cmp	r3, #110	; 0x6e
 8014612:	f47f aeba 	bne.w	801438a <_strtod_l+0xba>
 8014616:	4990      	ldr	r1, [pc, #576]	; (8014858 <_strtod_l+0x588>)
 8014618:	a81b      	add	r0, sp, #108	; 0x6c
 801461a:	f001 fdd3 	bl	80161c4 <__match>
 801461e:	2800      	cmp	r0, #0
 8014620:	f43f aeb3 	beq.w	801438a <_strtod_l+0xba>
 8014624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014626:	781b      	ldrb	r3, [r3, #0]
 8014628:	2b28      	cmp	r3, #40	; 0x28
 801462a:	d10e      	bne.n	801464a <_strtod_l+0x37a>
 801462c:	aa1e      	add	r2, sp, #120	; 0x78
 801462e:	498b      	ldr	r1, [pc, #556]	; (801485c <_strtod_l+0x58c>)
 8014630:	a81b      	add	r0, sp, #108	; 0x6c
 8014632:	f001 fddb 	bl	80161ec <__hexnan>
 8014636:	2805      	cmp	r0, #5
 8014638:	d107      	bne.n	801464a <_strtod_l+0x37a>
 801463a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801463c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014640:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014644:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014648:	e681      	b.n	801434e <_strtod_l+0x7e>
 801464a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014870 <_strtod_l+0x5a0>
 801464e:	e7d2      	b.n	80145f6 <_strtod_l+0x326>
 8014650:	ebae 0302 	sub.w	r3, lr, r2
 8014654:	9306      	str	r3, [sp, #24]
 8014656:	9b05      	ldr	r3, [sp, #20]
 8014658:	9807      	ldr	r0, [sp, #28]
 801465a:	2b00      	cmp	r3, #0
 801465c:	bf08      	it	eq
 801465e:	4623      	moveq	r3, r4
 8014660:	2c10      	cmp	r4, #16
 8014662:	9305      	str	r3, [sp, #20]
 8014664:	46a0      	mov	r8, r4
 8014666:	bfa8      	it	ge
 8014668:	f04f 0810 	movge.w	r8, #16
 801466c:	f7eb ff62 	bl	8000534 <__aeabi_ui2d>
 8014670:	2c09      	cmp	r4, #9
 8014672:	4682      	mov	sl, r0
 8014674:	468b      	mov	fp, r1
 8014676:	dc13      	bgt.n	80146a0 <_strtod_l+0x3d0>
 8014678:	9b06      	ldr	r3, [sp, #24]
 801467a:	2b00      	cmp	r3, #0
 801467c:	f43f ae67 	beq.w	801434e <_strtod_l+0x7e>
 8014680:	9b06      	ldr	r3, [sp, #24]
 8014682:	dd7a      	ble.n	801477a <_strtod_l+0x4aa>
 8014684:	2b16      	cmp	r3, #22
 8014686:	dc61      	bgt.n	801474c <_strtod_l+0x47c>
 8014688:	4a75      	ldr	r2, [pc, #468]	; (8014860 <_strtod_l+0x590>)
 801468a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801468e:	e9de 0100 	ldrd	r0, r1, [lr]
 8014692:	4652      	mov	r2, sl
 8014694:	465b      	mov	r3, fp
 8014696:	f7eb ffc7 	bl	8000628 <__aeabi_dmul>
 801469a:	4682      	mov	sl, r0
 801469c:	468b      	mov	fp, r1
 801469e:	e656      	b.n	801434e <_strtod_l+0x7e>
 80146a0:	4b6f      	ldr	r3, [pc, #444]	; (8014860 <_strtod_l+0x590>)
 80146a2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80146a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80146aa:	f7eb ffbd 	bl	8000628 <__aeabi_dmul>
 80146ae:	4606      	mov	r6, r0
 80146b0:	4628      	mov	r0, r5
 80146b2:	460f      	mov	r7, r1
 80146b4:	f7eb ff3e 	bl	8000534 <__aeabi_ui2d>
 80146b8:	4602      	mov	r2, r0
 80146ba:	460b      	mov	r3, r1
 80146bc:	4630      	mov	r0, r6
 80146be:	4639      	mov	r1, r7
 80146c0:	f7eb fdfc 	bl	80002bc <__adddf3>
 80146c4:	2c0f      	cmp	r4, #15
 80146c6:	4682      	mov	sl, r0
 80146c8:	468b      	mov	fp, r1
 80146ca:	ddd5      	ble.n	8014678 <_strtod_l+0x3a8>
 80146cc:	9b06      	ldr	r3, [sp, #24]
 80146ce:	eba4 0808 	sub.w	r8, r4, r8
 80146d2:	4498      	add	r8, r3
 80146d4:	f1b8 0f00 	cmp.w	r8, #0
 80146d8:	f340 8096 	ble.w	8014808 <_strtod_l+0x538>
 80146dc:	f018 030f 	ands.w	r3, r8, #15
 80146e0:	d00a      	beq.n	80146f8 <_strtod_l+0x428>
 80146e2:	495f      	ldr	r1, [pc, #380]	; (8014860 <_strtod_l+0x590>)
 80146e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80146e8:	4652      	mov	r2, sl
 80146ea:	465b      	mov	r3, fp
 80146ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146f0:	f7eb ff9a 	bl	8000628 <__aeabi_dmul>
 80146f4:	4682      	mov	sl, r0
 80146f6:	468b      	mov	fp, r1
 80146f8:	f038 080f 	bics.w	r8, r8, #15
 80146fc:	d073      	beq.n	80147e6 <_strtod_l+0x516>
 80146fe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014702:	dd47      	ble.n	8014794 <_strtod_l+0x4c4>
 8014704:	2400      	movs	r4, #0
 8014706:	46a0      	mov	r8, r4
 8014708:	9407      	str	r4, [sp, #28]
 801470a:	9405      	str	r4, [sp, #20]
 801470c:	2322      	movs	r3, #34	; 0x22
 801470e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014868 <_strtod_l+0x598>
 8014712:	f8c9 3000 	str.w	r3, [r9]
 8014716:	f04f 0a00 	mov.w	sl, #0
 801471a:	9b07      	ldr	r3, [sp, #28]
 801471c:	2b00      	cmp	r3, #0
 801471e:	f43f ae16 	beq.w	801434e <_strtod_l+0x7e>
 8014722:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014724:	4648      	mov	r0, r9
 8014726:	f001 fe61 	bl	80163ec <_Bfree>
 801472a:	9905      	ldr	r1, [sp, #20]
 801472c:	4648      	mov	r0, r9
 801472e:	f001 fe5d 	bl	80163ec <_Bfree>
 8014732:	4641      	mov	r1, r8
 8014734:	4648      	mov	r0, r9
 8014736:	f001 fe59 	bl	80163ec <_Bfree>
 801473a:	9907      	ldr	r1, [sp, #28]
 801473c:	4648      	mov	r0, r9
 801473e:	f001 fe55 	bl	80163ec <_Bfree>
 8014742:	4621      	mov	r1, r4
 8014744:	4648      	mov	r0, r9
 8014746:	f001 fe51 	bl	80163ec <_Bfree>
 801474a:	e600      	b.n	801434e <_strtod_l+0x7e>
 801474c:	9a06      	ldr	r2, [sp, #24]
 801474e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8014752:	4293      	cmp	r3, r2
 8014754:	dbba      	blt.n	80146cc <_strtod_l+0x3fc>
 8014756:	4d42      	ldr	r5, [pc, #264]	; (8014860 <_strtod_l+0x590>)
 8014758:	f1c4 040f 	rsb	r4, r4, #15
 801475c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014760:	4652      	mov	r2, sl
 8014762:	465b      	mov	r3, fp
 8014764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014768:	f7eb ff5e 	bl	8000628 <__aeabi_dmul>
 801476c:	9b06      	ldr	r3, [sp, #24]
 801476e:	1b1c      	subs	r4, r3, r4
 8014770:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8014774:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014778:	e78d      	b.n	8014696 <_strtod_l+0x3c6>
 801477a:	f113 0f16 	cmn.w	r3, #22
 801477e:	dba5      	blt.n	80146cc <_strtod_l+0x3fc>
 8014780:	4a37      	ldr	r2, [pc, #220]	; (8014860 <_strtod_l+0x590>)
 8014782:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8014786:	e9d2 2300 	ldrd	r2, r3, [r2]
 801478a:	4650      	mov	r0, sl
 801478c:	4659      	mov	r1, fp
 801478e:	f7ec f875 	bl	800087c <__aeabi_ddiv>
 8014792:	e782      	b.n	801469a <_strtod_l+0x3ca>
 8014794:	2300      	movs	r3, #0
 8014796:	4e33      	ldr	r6, [pc, #204]	; (8014864 <_strtod_l+0x594>)
 8014798:	ea4f 1828 	mov.w	r8, r8, asr #4
 801479c:	4650      	mov	r0, sl
 801479e:	4659      	mov	r1, fp
 80147a0:	461d      	mov	r5, r3
 80147a2:	f1b8 0f01 	cmp.w	r8, #1
 80147a6:	dc21      	bgt.n	80147ec <_strtod_l+0x51c>
 80147a8:	b10b      	cbz	r3, 80147ae <_strtod_l+0x4de>
 80147aa:	4682      	mov	sl, r0
 80147ac:	468b      	mov	fp, r1
 80147ae:	4b2d      	ldr	r3, [pc, #180]	; (8014864 <_strtod_l+0x594>)
 80147b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80147b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80147b8:	4652      	mov	r2, sl
 80147ba:	465b      	mov	r3, fp
 80147bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80147c0:	f7eb ff32 	bl	8000628 <__aeabi_dmul>
 80147c4:	4b28      	ldr	r3, [pc, #160]	; (8014868 <_strtod_l+0x598>)
 80147c6:	460a      	mov	r2, r1
 80147c8:	400b      	ands	r3, r1
 80147ca:	4928      	ldr	r1, [pc, #160]	; (801486c <_strtod_l+0x59c>)
 80147cc:	428b      	cmp	r3, r1
 80147ce:	4682      	mov	sl, r0
 80147d0:	d898      	bhi.n	8014704 <_strtod_l+0x434>
 80147d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80147d6:	428b      	cmp	r3, r1
 80147d8:	bf86      	itte	hi
 80147da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014874 <_strtod_l+0x5a4>
 80147de:	f04f 3aff 	movhi.w	sl, #4294967295
 80147e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80147e6:	2300      	movs	r3, #0
 80147e8:	9304      	str	r3, [sp, #16]
 80147ea:	e077      	b.n	80148dc <_strtod_l+0x60c>
 80147ec:	f018 0f01 	tst.w	r8, #1
 80147f0:	d006      	beq.n	8014800 <_strtod_l+0x530>
 80147f2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80147f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147fa:	f7eb ff15 	bl	8000628 <__aeabi_dmul>
 80147fe:	2301      	movs	r3, #1
 8014800:	3501      	adds	r5, #1
 8014802:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014806:	e7cc      	b.n	80147a2 <_strtod_l+0x4d2>
 8014808:	d0ed      	beq.n	80147e6 <_strtod_l+0x516>
 801480a:	f1c8 0800 	rsb	r8, r8, #0
 801480e:	f018 020f 	ands.w	r2, r8, #15
 8014812:	d00a      	beq.n	801482a <_strtod_l+0x55a>
 8014814:	4b12      	ldr	r3, [pc, #72]	; (8014860 <_strtod_l+0x590>)
 8014816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801481a:	4650      	mov	r0, sl
 801481c:	4659      	mov	r1, fp
 801481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014822:	f7ec f82b 	bl	800087c <__aeabi_ddiv>
 8014826:	4682      	mov	sl, r0
 8014828:	468b      	mov	fp, r1
 801482a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801482e:	d0da      	beq.n	80147e6 <_strtod_l+0x516>
 8014830:	f1b8 0f1f 	cmp.w	r8, #31
 8014834:	dd20      	ble.n	8014878 <_strtod_l+0x5a8>
 8014836:	2400      	movs	r4, #0
 8014838:	46a0      	mov	r8, r4
 801483a:	9407      	str	r4, [sp, #28]
 801483c:	9405      	str	r4, [sp, #20]
 801483e:	2322      	movs	r3, #34	; 0x22
 8014840:	f04f 0a00 	mov.w	sl, #0
 8014844:	f04f 0b00 	mov.w	fp, #0
 8014848:	f8c9 3000 	str.w	r3, [r9]
 801484c:	e765      	b.n	801471a <_strtod_l+0x44a>
 801484e:	bf00      	nop
 8014850:	08018045 	.word	0x08018045
 8014854:	080180cb 	.word	0x080180cb
 8014858:	0801804d 	.word	0x0801804d
 801485c:	0801808c 	.word	0x0801808c
 8014860:	08018170 	.word	0x08018170
 8014864:	08018148 	.word	0x08018148
 8014868:	7ff00000 	.word	0x7ff00000
 801486c:	7ca00000 	.word	0x7ca00000
 8014870:	fff80000 	.word	0xfff80000
 8014874:	7fefffff 	.word	0x7fefffff
 8014878:	f018 0310 	ands.w	r3, r8, #16
 801487c:	bf18      	it	ne
 801487e:	236a      	movne	r3, #106	; 0x6a
 8014880:	4da0      	ldr	r5, [pc, #640]	; (8014b04 <_strtod_l+0x834>)
 8014882:	9304      	str	r3, [sp, #16]
 8014884:	4650      	mov	r0, sl
 8014886:	4659      	mov	r1, fp
 8014888:	2300      	movs	r3, #0
 801488a:	f1b8 0f00 	cmp.w	r8, #0
 801488e:	f300 810a 	bgt.w	8014aa6 <_strtod_l+0x7d6>
 8014892:	b10b      	cbz	r3, 8014898 <_strtod_l+0x5c8>
 8014894:	4682      	mov	sl, r0
 8014896:	468b      	mov	fp, r1
 8014898:	9b04      	ldr	r3, [sp, #16]
 801489a:	b1bb      	cbz	r3, 80148cc <_strtod_l+0x5fc>
 801489c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80148a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	4659      	mov	r1, fp
 80148a8:	dd10      	ble.n	80148cc <_strtod_l+0x5fc>
 80148aa:	2b1f      	cmp	r3, #31
 80148ac:	f340 8107 	ble.w	8014abe <_strtod_l+0x7ee>
 80148b0:	2b34      	cmp	r3, #52	; 0x34
 80148b2:	bfde      	ittt	le
 80148b4:	3b20      	suble	r3, #32
 80148b6:	f04f 32ff 	movle.w	r2, #4294967295
 80148ba:	fa02 f303 	lslle.w	r3, r2, r3
 80148be:	f04f 0a00 	mov.w	sl, #0
 80148c2:	bfcc      	ite	gt
 80148c4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80148c8:	ea03 0b01 	andle.w	fp, r3, r1
 80148cc:	2200      	movs	r2, #0
 80148ce:	2300      	movs	r3, #0
 80148d0:	4650      	mov	r0, sl
 80148d2:	4659      	mov	r1, fp
 80148d4:	f7ec f910 	bl	8000af8 <__aeabi_dcmpeq>
 80148d8:	2800      	cmp	r0, #0
 80148da:	d1ac      	bne.n	8014836 <_strtod_l+0x566>
 80148dc:	9b07      	ldr	r3, [sp, #28]
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	9a05      	ldr	r2, [sp, #20]
 80148e2:	9908      	ldr	r1, [sp, #32]
 80148e4:	4623      	mov	r3, r4
 80148e6:	4648      	mov	r0, r9
 80148e8:	f001 fdd2 	bl	8016490 <__s2b>
 80148ec:	9007      	str	r0, [sp, #28]
 80148ee:	2800      	cmp	r0, #0
 80148f0:	f43f af08 	beq.w	8014704 <_strtod_l+0x434>
 80148f4:	9a06      	ldr	r2, [sp, #24]
 80148f6:	9b06      	ldr	r3, [sp, #24]
 80148f8:	2a00      	cmp	r2, #0
 80148fa:	f1c3 0300 	rsb	r3, r3, #0
 80148fe:	bfa8      	it	ge
 8014900:	2300      	movge	r3, #0
 8014902:	930e      	str	r3, [sp, #56]	; 0x38
 8014904:	2400      	movs	r4, #0
 8014906:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801490a:	9316      	str	r3, [sp, #88]	; 0x58
 801490c:	46a0      	mov	r8, r4
 801490e:	9b07      	ldr	r3, [sp, #28]
 8014910:	4648      	mov	r0, r9
 8014912:	6859      	ldr	r1, [r3, #4]
 8014914:	f001 fd36 	bl	8016384 <_Balloc>
 8014918:	9005      	str	r0, [sp, #20]
 801491a:	2800      	cmp	r0, #0
 801491c:	f43f aef6 	beq.w	801470c <_strtod_l+0x43c>
 8014920:	9b07      	ldr	r3, [sp, #28]
 8014922:	691a      	ldr	r2, [r3, #16]
 8014924:	3202      	adds	r2, #2
 8014926:	f103 010c 	add.w	r1, r3, #12
 801492a:	0092      	lsls	r2, r2, #2
 801492c:	300c      	adds	r0, #12
 801492e:	f7fe fdd3 	bl	80134d8 <memcpy>
 8014932:	aa1e      	add	r2, sp, #120	; 0x78
 8014934:	a91d      	add	r1, sp, #116	; 0x74
 8014936:	ec4b ab10 	vmov	d0, sl, fp
 801493a:	4648      	mov	r0, r9
 801493c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014940:	f002 f862 	bl	8016a08 <__d2b>
 8014944:	901c      	str	r0, [sp, #112]	; 0x70
 8014946:	2800      	cmp	r0, #0
 8014948:	f43f aee0 	beq.w	801470c <_strtod_l+0x43c>
 801494c:	2101      	movs	r1, #1
 801494e:	4648      	mov	r0, r9
 8014950:	f001 fe2a 	bl	80165a8 <__i2b>
 8014954:	4680      	mov	r8, r0
 8014956:	2800      	cmp	r0, #0
 8014958:	f43f aed8 	beq.w	801470c <_strtod_l+0x43c>
 801495c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801495e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014960:	2e00      	cmp	r6, #0
 8014962:	bfab      	itete	ge
 8014964:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014966:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014968:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801496a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801496c:	bfac      	ite	ge
 801496e:	18f7      	addge	r7, r6, r3
 8014970:	1b9d      	sublt	r5, r3, r6
 8014972:	9b04      	ldr	r3, [sp, #16]
 8014974:	1af6      	subs	r6, r6, r3
 8014976:	4416      	add	r6, r2
 8014978:	4b63      	ldr	r3, [pc, #396]	; (8014b08 <_strtod_l+0x838>)
 801497a:	3e01      	subs	r6, #1
 801497c:	429e      	cmp	r6, r3
 801497e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014982:	f280 80af 	bge.w	8014ae4 <_strtod_l+0x814>
 8014986:	1b9b      	subs	r3, r3, r6
 8014988:	2b1f      	cmp	r3, #31
 801498a:	eba2 0203 	sub.w	r2, r2, r3
 801498e:	f04f 0101 	mov.w	r1, #1
 8014992:	f300 809b 	bgt.w	8014acc <_strtod_l+0x7fc>
 8014996:	fa01 f303 	lsl.w	r3, r1, r3
 801499a:	930f      	str	r3, [sp, #60]	; 0x3c
 801499c:	2300      	movs	r3, #0
 801499e:	930a      	str	r3, [sp, #40]	; 0x28
 80149a0:	18be      	adds	r6, r7, r2
 80149a2:	9b04      	ldr	r3, [sp, #16]
 80149a4:	42b7      	cmp	r7, r6
 80149a6:	4415      	add	r5, r2
 80149a8:	441d      	add	r5, r3
 80149aa:	463b      	mov	r3, r7
 80149ac:	bfa8      	it	ge
 80149ae:	4633      	movge	r3, r6
 80149b0:	42ab      	cmp	r3, r5
 80149b2:	bfa8      	it	ge
 80149b4:	462b      	movge	r3, r5
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	bfc2      	ittt	gt
 80149ba:	1af6      	subgt	r6, r6, r3
 80149bc:	1aed      	subgt	r5, r5, r3
 80149be:	1aff      	subgt	r7, r7, r3
 80149c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149c2:	b1bb      	cbz	r3, 80149f4 <_strtod_l+0x724>
 80149c4:	4641      	mov	r1, r8
 80149c6:	461a      	mov	r2, r3
 80149c8:	4648      	mov	r0, r9
 80149ca:	f001 fe8d 	bl	80166e8 <__pow5mult>
 80149ce:	4680      	mov	r8, r0
 80149d0:	2800      	cmp	r0, #0
 80149d2:	f43f ae9b 	beq.w	801470c <_strtod_l+0x43c>
 80149d6:	4601      	mov	r1, r0
 80149d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80149da:	4648      	mov	r0, r9
 80149dc:	f001 fded 	bl	80165ba <__multiply>
 80149e0:	900c      	str	r0, [sp, #48]	; 0x30
 80149e2:	2800      	cmp	r0, #0
 80149e4:	f43f ae92 	beq.w	801470c <_strtod_l+0x43c>
 80149e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80149ea:	4648      	mov	r0, r9
 80149ec:	f001 fcfe 	bl	80163ec <_Bfree>
 80149f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149f2:	931c      	str	r3, [sp, #112]	; 0x70
 80149f4:	2e00      	cmp	r6, #0
 80149f6:	dc7a      	bgt.n	8014aee <_strtod_l+0x81e>
 80149f8:	9b06      	ldr	r3, [sp, #24]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	dd08      	ble.n	8014a10 <_strtod_l+0x740>
 80149fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014a00:	9905      	ldr	r1, [sp, #20]
 8014a02:	4648      	mov	r0, r9
 8014a04:	f001 fe70 	bl	80166e8 <__pow5mult>
 8014a08:	9005      	str	r0, [sp, #20]
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	f43f ae7e 	beq.w	801470c <_strtod_l+0x43c>
 8014a10:	2d00      	cmp	r5, #0
 8014a12:	dd08      	ble.n	8014a26 <_strtod_l+0x756>
 8014a14:	462a      	mov	r2, r5
 8014a16:	9905      	ldr	r1, [sp, #20]
 8014a18:	4648      	mov	r0, r9
 8014a1a:	f001 feb3 	bl	8016784 <__lshift>
 8014a1e:	9005      	str	r0, [sp, #20]
 8014a20:	2800      	cmp	r0, #0
 8014a22:	f43f ae73 	beq.w	801470c <_strtod_l+0x43c>
 8014a26:	2f00      	cmp	r7, #0
 8014a28:	dd08      	ble.n	8014a3c <_strtod_l+0x76c>
 8014a2a:	4641      	mov	r1, r8
 8014a2c:	463a      	mov	r2, r7
 8014a2e:	4648      	mov	r0, r9
 8014a30:	f001 fea8 	bl	8016784 <__lshift>
 8014a34:	4680      	mov	r8, r0
 8014a36:	2800      	cmp	r0, #0
 8014a38:	f43f ae68 	beq.w	801470c <_strtod_l+0x43c>
 8014a3c:	9a05      	ldr	r2, [sp, #20]
 8014a3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014a40:	4648      	mov	r0, r9
 8014a42:	f001 ff0d 	bl	8016860 <__mdiff>
 8014a46:	4604      	mov	r4, r0
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	f43f ae5f 	beq.w	801470c <_strtod_l+0x43c>
 8014a4e:	68c3      	ldr	r3, [r0, #12]
 8014a50:	930c      	str	r3, [sp, #48]	; 0x30
 8014a52:	2300      	movs	r3, #0
 8014a54:	60c3      	str	r3, [r0, #12]
 8014a56:	4641      	mov	r1, r8
 8014a58:	f001 fee8 	bl	801682c <__mcmp>
 8014a5c:	2800      	cmp	r0, #0
 8014a5e:	da55      	bge.n	8014b0c <_strtod_l+0x83c>
 8014a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a62:	b9e3      	cbnz	r3, 8014a9e <_strtod_l+0x7ce>
 8014a64:	f1ba 0f00 	cmp.w	sl, #0
 8014a68:	d119      	bne.n	8014a9e <_strtod_l+0x7ce>
 8014a6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014a6e:	b9b3      	cbnz	r3, 8014a9e <_strtod_l+0x7ce>
 8014a70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014a74:	0d1b      	lsrs	r3, r3, #20
 8014a76:	051b      	lsls	r3, r3, #20
 8014a78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014a7c:	d90f      	bls.n	8014a9e <_strtod_l+0x7ce>
 8014a7e:	6963      	ldr	r3, [r4, #20]
 8014a80:	b913      	cbnz	r3, 8014a88 <_strtod_l+0x7b8>
 8014a82:	6923      	ldr	r3, [r4, #16]
 8014a84:	2b01      	cmp	r3, #1
 8014a86:	dd0a      	ble.n	8014a9e <_strtod_l+0x7ce>
 8014a88:	4621      	mov	r1, r4
 8014a8a:	2201      	movs	r2, #1
 8014a8c:	4648      	mov	r0, r9
 8014a8e:	f001 fe79 	bl	8016784 <__lshift>
 8014a92:	4641      	mov	r1, r8
 8014a94:	4604      	mov	r4, r0
 8014a96:	f001 fec9 	bl	801682c <__mcmp>
 8014a9a:	2800      	cmp	r0, #0
 8014a9c:	dc67      	bgt.n	8014b6e <_strtod_l+0x89e>
 8014a9e:	9b04      	ldr	r3, [sp, #16]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d171      	bne.n	8014b88 <_strtod_l+0x8b8>
 8014aa4:	e63d      	b.n	8014722 <_strtod_l+0x452>
 8014aa6:	f018 0f01 	tst.w	r8, #1
 8014aaa:	d004      	beq.n	8014ab6 <_strtod_l+0x7e6>
 8014aac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014ab0:	f7eb fdba 	bl	8000628 <__aeabi_dmul>
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014aba:	3508      	adds	r5, #8
 8014abc:	e6e5      	b.n	801488a <_strtod_l+0x5ba>
 8014abe:	f04f 32ff 	mov.w	r2, #4294967295
 8014ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ac6:	ea03 0a0a 	and.w	sl, r3, sl
 8014aca:	e6ff      	b.n	80148cc <_strtod_l+0x5fc>
 8014acc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014ad0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014ad4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014ad8:	36e2      	adds	r6, #226	; 0xe2
 8014ada:	fa01 f306 	lsl.w	r3, r1, r6
 8014ade:	930a      	str	r3, [sp, #40]	; 0x28
 8014ae0:	910f      	str	r1, [sp, #60]	; 0x3c
 8014ae2:	e75d      	b.n	80149a0 <_strtod_l+0x6d0>
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8014ae8:	2301      	movs	r3, #1
 8014aea:	930f      	str	r3, [sp, #60]	; 0x3c
 8014aec:	e758      	b.n	80149a0 <_strtod_l+0x6d0>
 8014aee:	4632      	mov	r2, r6
 8014af0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014af2:	4648      	mov	r0, r9
 8014af4:	f001 fe46 	bl	8016784 <__lshift>
 8014af8:	901c      	str	r0, [sp, #112]	; 0x70
 8014afa:	2800      	cmp	r0, #0
 8014afc:	f47f af7c 	bne.w	80149f8 <_strtod_l+0x728>
 8014b00:	e604      	b.n	801470c <_strtod_l+0x43c>
 8014b02:	bf00      	nop
 8014b04:	080180a0 	.word	0x080180a0
 8014b08:	fffffc02 	.word	0xfffffc02
 8014b0c:	465d      	mov	r5, fp
 8014b0e:	f040 8086 	bne.w	8014c1e <_strtod_l+0x94e>
 8014b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b18:	b32a      	cbz	r2, 8014b66 <_strtod_l+0x896>
 8014b1a:	4aaf      	ldr	r2, [pc, #700]	; (8014dd8 <_strtod_l+0xb08>)
 8014b1c:	4293      	cmp	r3, r2
 8014b1e:	d153      	bne.n	8014bc8 <_strtod_l+0x8f8>
 8014b20:	9b04      	ldr	r3, [sp, #16]
 8014b22:	4650      	mov	r0, sl
 8014b24:	b1d3      	cbz	r3, 8014b5c <_strtod_l+0x88c>
 8014b26:	4aad      	ldr	r2, [pc, #692]	; (8014ddc <_strtod_l+0xb0c>)
 8014b28:	402a      	ands	r2, r5
 8014b2a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8014b32:	d816      	bhi.n	8014b62 <_strtod_l+0x892>
 8014b34:	0d12      	lsrs	r2, r2, #20
 8014b36:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8014b3e:	4298      	cmp	r0, r3
 8014b40:	d142      	bne.n	8014bc8 <_strtod_l+0x8f8>
 8014b42:	4ba7      	ldr	r3, [pc, #668]	; (8014de0 <_strtod_l+0xb10>)
 8014b44:	429d      	cmp	r5, r3
 8014b46:	d102      	bne.n	8014b4e <_strtod_l+0x87e>
 8014b48:	3001      	adds	r0, #1
 8014b4a:	f43f addf 	beq.w	801470c <_strtod_l+0x43c>
 8014b4e:	4ba3      	ldr	r3, [pc, #652]	; (8014ddc <_strtod_l+0xb0c>)
 8014b50:	402b      	ands	r3, r5
 8014b52:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014b56:	f04f 0a00 	mov.w	sl, #0
 8014b5a:	e7a0      	b.n	8014a9e <_strtod_l+0x7ce>
 8014b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b60:	e7ed      	b.n	8014b3e <_strtod_l+0x86e>
 8014b62:	460b      	mov	r3, r1
 8014b64:	e7eb      	b.n	8014b3e <_strtod_l+0x86e>
 8014b66:	bb7b      	cbnz	r3, 8014bc8 <_strtod_l+0x8f8>
 8014b68:	f1ba 0f00 	cmp.w	sl, #0
 8014b6c:	d12c      	bne.n	8014bc8 <_strtod_l+0x8f8>
 8014b6e:	9904      	ldr	r1, [sp, #16]
 8014b70:	4a9a      	ldr	r2, [pc, #616]	; (8014ddc <_strtod_l+0xb0c>)
 8014b72:	465b      	mov	r3, fp
 8014b74:	b1f1      	cbz	r1, 8014bb4 <_strtod_l+0x8e4>
 8014b76:	ea02 010b 	and.w	r1, r2, fp
 8014b7a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014b7e:	dc19      	bgt.n	8014bb4 <_strtod_l+0x8e4>
 8014b80:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014b84:	f77f ae5b 	ble.w	801483e <_strtod_l+0x56e>
 8014b88:	4a96      	ldr	r2, [pc, #600]	; (8014de4 <_strtod_l+0xb14>)
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014b90:	4650      	mov	r0, sl
 8014b92:	4659      	mov	r1, fp
 8014b94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014b98:	f7eb fd46 	bl	8000628 <__aeabi_dmul>
 8014b9c:	4682      	mov	sl, r0
 8014b9e:	468b      	mov	fp, r1
 8014ba0:	2900      	cmp	r1, #0
 8014ba2:	f47f adbe 	bne.w	8014722 <_strtod_l+0x452>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	f47f adbb 	bne.w	8014722 <_strtod_l+0x452>
 8014bac:	2322      	movs	r3, #34	; 0x22
 8014bae:	f8c9 3000 	str.w	r3, [r9]
 8014bb2:	e5b6      	b.n	8014722 <_strtod_l+0x452>
 8014bb4:	4013      	ands	r3, r2
 8014bb6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014bba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014bbe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014bc2:	f04f 3aff 	mov.w	sl, #4294967295
 8014bc6:	e76a      	b.n	8014a9e <_strtod_l+0x7ce>
 8014bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bca:	b193      	cbz	r3, 8014bf2 <_strtod_l+0x922>
 8014bcc:	422b      	tst	r3, r5
 8014bce:	f43f af66 	beq.w	8014a9e <_strtod_l+0x7ce>
 8014bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bd4:	9a04      	ldr	r2, [sp, #16]
 8014bd6:	4650      	mov	r0, sl
 8014bd8:	4659      	mov	r1, fp
 8014bda:	b173      	cbz	r3, 8014bfa <_strtod_l+0x92a>
 8014bdc:	f7ff fb5c 	bl	8014298 <sulp>
 8014be0:	4602      	mov	r2, r0
 8014be2:	460b      	mov	r3, r1
 8014be4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014be8:	f7eb fb68 	bl	80002bc <__adddf3>
 8014bec:	4682      	mov	sl, r0
 8014bee:	468b      	mov	fp, r1
 8014bf0:	e755      	b.n	8014a9e <_strtod_l+0x7ce>
 8014bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bf4:	ea13 0f0a 	tst.w	r3, sl
 8014bf8:	e7e9      	b.n	8014bce <_strtod_l+0x8fe>
 8014bfa:	f7ff fb4d 	bl	8014298 <sulp>
 8014bfe:	4602      	mov	r2, r0
 8014c00:	460b      	mov	r3, r1
 8014c02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014c06:	f7eb fb57 	bl	80002b8 <__aeabi_dsub>
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	4682      	mov	sl, r0
 8014c10:	468b      	mov	fp, r1
 8014c12:	f7eb ff71 	bl	8000af8 <__aeabi_dcmpeq>
 8014c16:	2800      	cmp	r0, #0
 8014c18:	f47f ae11 	bne.w	801483e <_strtod_l+0x56e>
 8014c1c:	e73f      	b.n	8014a9e <_strtod_l+0x7ce>
 8014c1e:	4641      	mov	r1, r8
 8014c20:	4620      	mov	r0, r4
 8014c22:	f001 ff40 	bl	8016aa6 <__ratio>
 8014c26:	ec57 6b10 	vmov	r6, r7, d0
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014c30:	ee10 0a10 	vmov	r0, s0
 8014c34:	4639      	mov	r1, r7
 8014c36:	f7eb ff73 	bl	8000b20 <__aeabi_dcmple>
 8014c3a:	2800      	cmp	r0, #0
 8014c3c:	d077      	beq.n	8014d2e <_strtod_l+0xa5e>
 8014c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d04a      	beq.n	8014cda <_strtod_l+0xa0a>
 8014c44:	4b68      	ldr	r3, [pc, #416]	; (8014de8 <_strtod_l+0xb18>)
 8014c46:	2200      	movs	r2, #0
 8014c48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014c4c:	4f66      	ldr	r7, [pc, #408]	; (8014de8 <_strtod_l+0xb18>)
 8014c4e:	2600      	movs	r6, #0
 8014c50:	4b62      	ldr	r3, [pc, #392]	; (8014ddc <_strtod_l+0xb0c>)
 8014c52:	402b      	ands	r3, r5
 8014c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c58:	4b64      	ldr	r3, [pc, #400]	; (8014dec <_strtod_l+0xb1c>)
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	f040 80ce 	bne.w	8014dfc <_strtod_l+0xb2c>
 8014c60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014c64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014c68:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014c6c:	ec4b ab10 	vmov	d0, sl, fp
 8014c70:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014c74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014c78:	f001 fe50 	bl	801691c <__ulp>
 8014c7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014c80:	ec53 2b10 	vmov	r2, r3, d0
 8014c84:	f7eb fcd0 	bl	8000628 <__aeabi_dmul>
 8014c88:	4652      	mov	r2, sl
 8014c8a:	465b      	mov	r3, fp
 8014c8c:	f7eb fb16 	bl	80002bc <__adddf3>
 8014c90:	460b      	mov	r3, r1
 8014c92:	4952      	ldr	r1, [pc, #328]	; (8014ddc <_strtod_l+0xb0c>)
 8014c94:	4a56      	ldr	r2, [pc, #344]	; (8014df0 <_strtod_l+0xb20>)
 8014c96:	4019      	ands	r1, r3
 8014c98:	4291      	cmp	r1, r2
 8014c9a:	4682      	mov	sl, r0
 8014c9c:	d95b      	bls.n	8014d56 <_strtod_l+0xa86>
 8014c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ca0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014ca4:	4293      	cmp	r3, r2
 8014ca6:	d103      	bne.n	8014cb0 <_strtod_l+0x9e0>
 8014ca8:	9b08      	ldr	r3, [sp, #32]
 8014caa:	3301      	adds	r3, #1
 8014cac:	f43f ad2e 	beq.w	801470c <_strtod_l+0x43c>
 8014cb0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014de0 <_strtod_l+0xb10>
 8014cb4:	f04f 3aff 	mov.w	sl, #4294967295
 8014cb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014cba:	4648      	mov	r0, r9
 8014cbc:	f001 fb96 	bl	80163ec <_Bfree>
 8014cc0:	9905      	ldr	r1, [sp, #20]
 8014cc2:	4648      	mov	r0, r9
 8014cc4:	f001 fb92 	bl	80163ec <_Bfree>
 8014cc8:	4641      	mov	r1, r8
 8014cca:	4648      	mov	r0, r9
 8014ccc:	f001 fb8e 	bl	80163ec <_Bfree>
 8014cd0:	4621      	mov	r1, r4
 8014cd2:	4648      	mov	r0, r9
 8014cd4:	f001 fb8a 	bl	80163ec <_Bfree>
 8014cd8:	e619      	b.n	801490e <_strtod_l+0x63e>
 8014cda:	f1ba 0f00 	cmp.w	sl, #0
 8014cde:	d11a      	bne.n	8014d16 <_strtod_l+0xa46>
 8014ce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014ce4:	b9eb      	cbnz	r3, 8014d22 <_strtod_l+0xa52>
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	4b3f      	ldr	r3, [pc, #252]	; (8014de8 <_strtod_l+0xb18>)
 8014cea:	4630      	mov	r0, r6
 8014cec:	4639      	mov	r1, r7
 8014cee:	f7eb ff0d 	bl	8000b0c <__aeabi_dcmplt>
 8014cf2:	b9c8      	cbnz	r0, 8014d28 <_strtod_l+0xa58>
 8014cf4:	4630      	mov	r0, r6
 8014cf6:	4639      	mov	r1, r7
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	4b3e      	ldr	r3, [pc, #248]	; (8014df4 <_strtod_l+0xb24>)
 8014cfc:	f7eb fc94 	bl	8000628 <__aeabi_dmul>
 8014d00:	4606      	mov	r6, r0
 8014d02:	460f      	mov	r7, r1
 8014d04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014d08:	9618      	str	r6, [sp, #96]	; 0x60
 8014d0a:	9319      	str	r3, [sp, #100]	; 0x64
 8014d0c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014d10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014d14:	e79c      	b.n	8014c50 <_strtod_l+0x980>
 8014d16:	f1ba 0f01 	cmp.w	sl, #1
 8014d1a:	d102      	bne.n	8014d22 <_strtod_l+0xa52>
 8014d1c:	2d00      	cmp	r5, #0
 8014d1e:	f43f ad8e 	beq.w	801483e <_strtod_l+0x56e>
 8014d22:	2200      	movs	r2, #0
 8014d24:	4b34      	ldr	r3, [pc, #208]	; (8014df8 <_strtod_l+0xb28>)
 8014d26:	e78f      	b.n	8014c48 <_strtod_l+0x978>
 8014d28:	2600      	movs	r6, #0
 8014d2a:	4f32      	ldr	r7, [pc, #200]	; (8014df4 <_strtod_l+0xb24>)
 8014d2c:	e7ea      	b.n	8014d04 <_strtod_l+0xa34>
 8014d2e:	4b31      	ldr	r3, [pc, #196]	; (8014df4 <_strtod_l+0xb24>)
 8014d30:	4630      	mov	r0, r6
 8014d32:	4639      	mov	r1, r7
 8014d34:	2200      	movs	r2, #0
 8014d36:	f7eb fc77 	bl	8000628 <__aeabi_dmul>
 8014d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d3c:	4606      	mov	r6, r0
 8014d3e:	460f      	mov	r7, r1
 8014d40:	b933      	cbnz	r3, 8014d50 <_strtod_l+0xa80>
 8014d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d46:	9010      	str	r0, [sp, #64]	; 0x40
 8014d48:	9311      	str	r3, [sp, #68]	; 0x44
 8014d4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014d4e:	e7df      	b.n	8014d10 <_strtod_l+0xa40>
 8014d50:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014d54:	e7f9      	b.n	8014d4a <_strtod_l+0xa7a>
 8014d56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014d5a:	9b04      	ldr	r3, [sp, #16]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d1ab      	bne.n	8014cb8 <_strtod_l+0x9e8>
 8014d60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014d64:	0d1b      	lsrs	r3, r3, #20
 8014d66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d68:	051b      	lsls	r3, r3, #20
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	465d      	mov	r5, fp
 8014d6e:	d1a3      	bne.n	8014cb8 <_strtod_l+0x9e8>
 8014d70:	4639      	mov	r1, r7
 8014d72:	4630      	mov	r0, r6
 8014d74:	f7eb ff08 	bl	8000b88 <__aeabi_d2iz>
 8014d78:	f7eb fbec 	bl	8000554 <__aeabi_i2d>
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	4602      	mov	r2, r0
 8014d80:	4639      	mov	r1, r7
 8014d82:	4630      	mov	r0, r6
 8014d84:	f7eb fa98 	bl	80002b8 <__aeabi_dsub>
 8014d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d8a:	4606      	mov	r6, r0
 8014d8c:	460f      	mov	r7, r1
 8014d8e:	b933      	cbnz	r3, 8014d9e <_strtod_l+0xace>
 8014d90:	f1ba 0f00 	cmp.w	sl, #0
 8014d94:	d103      	bne.n	8014d9e <_strtod_l+0xace>
 8014d96:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014d9a:	2d00      	cmp	r5, #0
 8014d9c:	d06d      	beq.n	8014e7a <_strtod_l+0xbaa>
 8014d9e:	a30a      	add	r3, pc, #40	; (adr r3, 8014dc8 <_strtod_l+0xaf8>)
 8014da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da4:	4630      	mov	r0, r6
 8014da6:	4639      	mov	r1, r7
 8014da8:	f7eb feb0 	bl	8000b0c <__aeabi_dcmplt>
 8014dac:	2800      	cmp	r0, #0
 8014dae:	f47f acb8 	bne.w	8014722 <_strtod_l+0x452>
 8014db2:	a307      	add	r3, pc, #28	; (adr r3, 8014dd0 <_strtod_l+0xb00>)
 8014db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db8:	4630      	mov	r0, r6
 8014dba:	4639      	mov	r1, r7
 8014dbc:	f7eb fec4 	bl	8000b48 <__aeabi_dcmpgt>
 8014dc0:	2800      	cmp	r0, #0
 8014dc2:	f43f af79 	beq.w	8014cb8 <_strtod_l+0x9e8>
 8014dc6:	e4ac      	b.n	8014722 <_strtod_l+0x452>
 8014dc8:	94a03595 	.word	0x94a03595
 8014dcc:	3fdfffff 	.word	0x3fdfffff
 8014dd0:	35afe535 	.word	0x35afe535
 8014dd4:	3fe00000 	.word	0x3fe00000
 8014dd8:	000fffff 	.word	0x000fffff
 8014ddc:	7ff00000 	.word	0x7ff00000
 8014de0:	7fefffff 	.word	0x7fefffff
 8014de4:	39500000 	.word	0x39500000
 8014de8:	3ff00000 	.word	0x3ff00000
 8014dec:	7fe00000 	.word	0x7fe00000
 8014df0:	7c9fffff 	.word	0x7c9fffff
 8014df4:	3fe00000 	.word	0x3fe00000
 8014df8:	bff00000 	.word	0xbff00000
 8014dfc:	9b04      	ldr	r3, [sp, #16]
 8014dfe:	b333      	cbz	r3, 8014e4e <_strtod_l+0xb7e>
 8014e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e02:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014e06:	d822      	bhi.n	8014e4e <_strtod_l+0xb7e>
 8014e08:	a327      	add	r3, pc, #156	; (adr r3, 8014ea8 <_strtod_l+0xbd8>)
 8014e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e0e:	4630      	mov	r0, r6
 8014e10:	4639      	mov	r1, r7
 8014e12:	f7eb fe85 	bl	8000b20 <__aeabi_dcmple>
 8014e16:	b1a0      	cbz	r0, 8014e42 <_strtod_l+0xb72>
 8014e18:	4639      	mov	r1, r7
 8014e1a:	4630      	mov	r0, r6
 8014e1c:	f7eb fedc 	bl	8000bd8 <__aeabi_d2uiz>
 8014e20:	2800      	cmp	r0, #0
 8014e22:	bf08      	it	eq
 8014e24:	2001      	moveq	r0, #1
 8014e26:	f7eb fb85 	bl	8000534 <__aeabi_ui2d>
 8014e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e2c:	4606      	mov	r6, r0
 8014e2e:	460f      	mov	r7, r1
 8014e30:	bb03      	cbnz	r3, 8014e74 <_strtod_l+0xba4>
 8014e32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e36:	9012      	str	r0, [sp, #72]	; 0x48
 8014e38:	9313      	str	r3, [sp, #76]	; 0x4c
 8014e3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014e3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e46:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014e4a:	1a9b      	subs	r3, r3, r2
 8014e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e4e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014e52:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014e56:	f001 fd61 	bl	801691c <__ulp>
 8014e5a:	4650      	mov	r0, sl
 8014e5c:	ec53 2b10 	vmov	r2, r3, d0
 8014e60:	4659      	mov	r1, fp
 8014e62:	f7eb fbe1 	bl	8000628 <__aeabi_dmul>
 8014e66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014e6a:	f7eb fa27 	bl	80002bc <__adddf3>
 8014e6e:	4682      	mov	sl, r0
 8014e70:	468b      	mov	fp, r1
 8014e72:	e772      	b.n	8014d5a <_strtod_l+0xa8a>
 8014e74:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014e78:	e7df      	b.n	8014e3a <_strtod_l+0xb6a>
 8014e7a:	a30d      	add	r3, pc, #52	; (adr r3, 8014eb0 <_strtod_l+0xbe0>)
 8014e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e80:	f7eb fe44 	bl	8000b0c <__aeabi_dcmplt>
 8014e84:	e79c      	b.n	8014dc0 <_strtod_l+0xaf0>
 8014e86:	2300      	movs	r3, #0
 8014e88:	930d      	str	r3, [sp, #52]	; 0x34
 8014e8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e8e:	6013      	str	r3, [r2, #0]
 8014e90:	f7ff ba61 	b.w	8014356 <_strtod_l+0x86>
 8014e94:	2b65      	cmp	r3, #101	; 0x65
 8014e96:	f04f 0200 	mov.w	r2, #0
 8014e9a:	f43f ab4e 	beq.w	801453a <_strtod_l+0x26a>
 8014e9e:	2101      	movs	r1, #1
 8014ea0:	4614      	mov	r4, r2
 8014ea2:	9104      	str	r1, [sp, #16]
 8014ea4:	f7ff bacb 	b.w	801443e <_strtod_l+0x16e>
 8014ea8:	ffc00000 	.word	0xffc00000
 8014eac:	41dfffff 	.word	0x41dfffff
 8014eb0:	94a03595 	.word	0x94a03595
 8014eb4:	3fcfffff 	.word	0x3fcfffff

08014eb8 <_strtod_r>:
 8014eb8:	4b05      	ldr	r3, [pc, #20]	; (8014ed0 <_strtod_r+0x18>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	b410      	push	{r4}
 8014ebe:	6a1b      	ldr	r3, [r3, #32]
 8014ec0:	4c04      	ldr	r4, [pc, #16]	; (8014ed4 <_strtod_r+0x1c>)
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	bf08      	it	eq
 8014ec6:	4623      	moveq	r3, r4
 8014ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ecc:	f7ff ba00 	b.w	80142d0 <_strtod_l>
 8014ed0:	2000000c 	.word	0x2000000c
 8014ed4:	20000070 	.word	0x20000070

08014ed8 <_strtol_l.isra.0>:
 8014ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014edc:	4680      	mov	r8, r0
 8014ede:	4689      	mov	r9, r1
 8014ee0:	4692      	mov	sl, r2
 8014ee2:	461e      	mov	r6, r3
 8014ee4:	460f      	mov	r7, r1
 8014ee6:	463d      	mov	r5, r7
 8014ee8:	9808      	ldr	r0, [sp, #32]
 8014eea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014eee:	f001 fa0d 	bl	801630c <__locale_ctype_ptr_l>
 8014ef2:	4420      	add	r0, r4
 8014ef4:	7843      	ldrb	r3, [r0, #1]
 8014ef6:	f013 0308 	ands.w	r3, r3, #8
 8014efa:	d132      	bne.n	8014f62 <_strtol_l.isra.0+0x8a>
 8014efc:	2c2d      	cmp	r4, #45	; 0x2d
 8014efe:	d132      	bne.n	8014f66 <_strtol_l.isra.0+0x8e>
 8014f00:	787c      	ldrb	r4, [r7, #1]
 8014f02:	1cbd      	adds	r5, r7, #2
 8014f04:	2201      	movs	r2, #1
 8014f06:	2e00      	cmp	r6, #0
 8014f08:	d05d      	beq.n	8014fc6 <_strtol_l.isra.0+0xee>
 8014f0a:	2e10      	cmp	r6, #16
 8014f0c:	d109      	bne.n	8014f22 <_strtol_l.isra.0+0x4a>
 8014f0e:	2c30      	cmp	r4, #48	; 0x30
 8014f10:	d107      	bne.n	8014f22 <_strtol_l.isra.0+0x4a>
 8014f12:	782b      	ldrb	r3, [r5, #0]
 8014f14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014f18:	2b58      	cmp	r3, #88	; 0x58
 8014f1a:	d14f      	bne.n	8014fbc <_strtol_l.isra.0+0xe4>
 8014f1c:	786c      	ldrb	r4, [r5, #1]
 8014f1e:	2610      	movs	r6, #16
 8014f20:	3502      	adds	r5, #2
 8014f22:	2a00      	cmp	r2, #0
 8014f24:	bf14      	ite	ne
 8014f26:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014f2a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014f2e:	2700      	movs	r7, #0
 8014f30:	fbb1 fcf6 	udiv	ip, r1, r6
 8014f34:	4638      	mov	r0, r7
 8014f36:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014f3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014f3e:	2b09      	cmp	r3, #9
 8014f40:	d817      	bhi.n	8014f72 <_strtol_l.isra.0+0x9a>
 8014f42:	461c      	mov	r4, r3
 8014f44:	42a6      	cmp	r6, r4
 8014f46:	dd23      	ble.n	8014f90 <_strtol_l.isra.0+0xb8>
 8014f48:	1c7b      	adds	r3, r7, #1
 8014f4a:	d007      	beq.n	8014f5c <_strtol_l.isra.0+0x84>
 8014f4c:	4584      	cmp	ip, r0
 8014f4e:	d31c      	bcc.n	8014f8a <_strtol_l.isra.0+0xb2>
 8014f50:	d101      	bne.n	8014f56 <_strtol_l.isra.0+0x7e>
 8014f52:	45a6      	cmp	lr, r4
 8014f54:	db19      	blt.n	8014f8a <_strtol_l.isra.0+0xb2>
 8014f56:	fb00 4006 	mla	r0, r0, r6, r4
 8014f5a:	2701      	movs	r7, #1
 8014f5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f60:	e7eb      	b.n	8014f3a <_strtol_l.isra.0+0x62>
 8014f62:	462f      	mov	r7, r5
 8014f64:	e7bf      	b.n	8014ee6 <_strtol_l.isra.0+0xe>
 8014f66:	2c2b      	cmp	r4, #43	; 0x2b
 8014f68:	bf04      	itt	eq
 8014f6a:	1cbd      	addeq	r5, r7, #2
 8014f6c:	787c      	ldrbeq	r4, [r7, #1]
 8014f6e:	461a      	mov	r2, r3
 8014f70:	e7c9      	b.n	8014f06 <_strtol_l.isra.0+0x2e>
 8014f72:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014f76:	2b19      	cmp	r3, #25
 8014f78:	d801      	bhi.n	8014f7e <_strtol_l.isra.0+0xa6>
 8014f7a:	3c37      	subs	r4, #55	; 0x37
 8014f7c:	e7e2      	b.n	8014f44 <_strtol_l.isra.0+0x6c>
 8014f7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014f82:	2b19      	cmp	r3, #25
 8014f84:	d804      	bhi.n	8014f90 <_strtol_l.isra.0+0xb8>
 8014f86:	3c57      	subs	r4, #87	; 0x57
 8014f88:	e7dc      	b.n	8014f44 <_strtol_l.isra.0+0x6c>
 8014f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8014f8e:	e7e5      	b.n	8014f5c <_strtol_l.isra.0+0x84>
 8014f90:	1c7b      	adds	r3, r7, #1
 8014f92:	d108      	bne.n	8014fa6 <_strtol_l.isra.0+0xce>
 8014f94:	2322      	movs	r3, #34	; 0x22
 8014f96:	f8c8 3000 	str.w	r3, [r8]
 8014f9a:	4608      	mov	r0, r1
 8014f9c:	f1ba 0f00 	cmp.w	sl, #0
 8014fa0:	d107      	bne.n	8014fb2 <_strtol_l.isra.0+0xda>
 8014fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fa6:	b102      	cbz	r2, 8014faa <_strtol_l.isra.0+0xd2>
 8014fa8:	4240      	negs	r0, r0
 8014faa:	f1ba 0f00 	cmp.w	sl, #0
 8014fae:	d0f8      	beq.n	8014fa2 <_strtol_l.isra.0+0xca>
 8014fb0:	b10f      	cbz	r7, 8014fb6 <_strtol_l.isra.0+0xde>
 8014fb2:	f105 39ff 	add.w	r9, r5, #4294967295
 8014fb6:	f8ca 9000 	str.w	r9, [sl]
 8014fba:	e7f2      	b.n	8014fa2 <_strtol_l.isra.0+0xca>
 8014fbc:	2430      	movs	r4, #48	; 0x30
 8014fbe:	2e00      	cmp	r6, #0
 8014fc0:	d1af      	bne.n	8014f22 <_strtol_l.isra.0+0x4a>
 8014fc2:	2608      	movs	r6, #8
 8014fc4:	e7ad      	b.n	8014f22 <_strtol_l.isra.0+0x4a>
 8014fc6:	2c30      	cmp	r4, #48	; 0x30
 8014fc8:	d0a3      	beq.n	8014f12 <_strtol_l.isra.0+0x3a>
 8014fca:	260a      	movs	r6, #10
 8014fcc:	e7a9      	b.n	8014f22 <_strtol_l.isra.0+0x4a>
	...

08014fd0 <_strtol_r>:
 8014fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014fd2:	4c06      	ldr	r4, [pc, #24]	; (8014fec <_strtol_r+0x1c>)
 8014fd4:	4d06      	ldr	r5, [pc, #24]	; (8014ff0 <_strtol_r+0x20>)
 8014fd6:	6824      	ldr	r4, [r4, #0]
 8014fd8:	6a24      	ldr	r4, [r4, #32]
 8014fda:	2c00      	cmp	r4, #0
 8014fdc:	bf08      	it	eq
 8014fde:	462c      	moveq	r4, r5
 8014fe0:	9400      	str	r4, [sp, #0]
 8014fe2:	f7ff ff79 	bl	8014ed8 <_strtol_l.isra.0>
 8014fe6:	b003      	add	sp, #12
 8014fe8:	bd30      	pop	{r4, r5, pc}
 8014fea:	bf00      	nop
 8014fec:	2000000c 	.word	0x2000000c
 8014ff0:	20000070 	.word	0x20000070

08014ff4 <_vsiprintf_r>:
 8014ff4:	b500      	push	{lr}
 8014ff6:	b09b      	sub	sp, #108	; 0x6c
 8014ff8:	9100      	str	r1, [sp, #0]
 8014ffa:	9104      	str	r1, [sp, #16]
 8014ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015000:	9105      	str	r1, [sp, #20]
 8015002:	9102      	str	r1, [sp, #8]
 8015004:	4905      	ldr	r1, [pc, #20]	; (801501c <_vsiprintf_r+0x28>)
 8015006:	9103      	str	r1, [sp, #12]
 8015008:	4669      	mov	r1, sp
 801500a:	f001 fecb 	bl	8016da4 <_svfiprintf_r>
 801500e:	9b00      	ldr	r3, [sp, #0]
 8015010:	2200      	movs	r2, #0
 8015012:	701a      	strb	r2, [r3, #0]
 8015014:	b01b      	add	sp, #108	; 0x6c
 8015016:	f85d fb04 	ldr.w	pc, [sp], #4
 801501a:	bf00      	nop
 801501c:	ffff0208 	.word	0xffff0208

08015020 <vsiprintf>:
 8015020:	4613      	mov	r3, r2
 8015022:	460a      	mov	r2, r1
 8015024:	4601      	mov	r1, r0
 8015026:	4802      	ldr	r0, [pc, #8]	; (8015030 <vsiprintf+0x10>)
 8015028:	6800      	ldr	r0, [r0, #0]
 801502a:	f7ff bfe3 	b.w	8014ff4 <_vsiprintf_r>
 801502e:	bf00      	nop
 8015030:	2000000c 	.word	0x2000000c

08015034 <quorem>:
 8015034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015038:	6903      	ldr	r3, [r0, #16]
 801503a:	690c      	ldr	r4, [r1, #16]
 801503c:	42a3      	cmp	r3, r4
 801503e:	4680      	mov	r8, r0
 8015040:	f2c0 8082 	blt.w	8015148 <quorem+0x114>
 8015044:	3c01      	subs	r4, #1
 8015046:	f101 0714 	add.w	r7, r1, #20
 801504a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801504e:	f100 0614 	add.w	r6, r0, #20
 8015052:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8015056:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801505a:	eb06 030c 	add.w	r3, r6, ip
 801505e:	3501      	adds	r5, #1
 8015060:	eb07 090c 	add.w	r9, r7, ip
 8015064:	9301      	str	r3, [sp, #4]
 8015066:	fbb0 f5f5 	udiv	r5, r0, r5
 801506a:	b395      	cbz	r5, 80150d2 <quorem+0x9e>
 801506c:	f04f 0a00 	mov.w	sl, #0
 8015070:	4638      	mov	r0, r7
 8015072:	46b6      	mov	lr, r6
 8015074:	46d3      	mov	fp, sl
 8015076:	f850 2b04 	ldr.w	r2, [r0], #4
 801507a:	b293      	uxth	r3, r2
 801507c:	fb05 a303 	mla	r3, r5, r3, sl
 8015080:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015084:	b29b      	uxth	r3, r3
 8015086:	ebab 0303 	sub.w	r3, fp, r3
 801508a:	0c12      	lsrs	r2, r2, #16
 801508c:	f8de b000 	ldr.w	fp, [lr]
 8015090:	fb05 a202 	mla	r2, r5, r2, sl
 8015094:	fa13 f38b 	uxtah	r3, r3, fp
 8015098:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801509c:	fa1f fb82 	uxth.w	fp, r2
 80150a0:	f8de 2000 	ldr.w	r2, [lr]
 80150a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80150a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80150b2:	4581      	cmp	r9, r0
 80150b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80150b8:	f84e 3b04 	str.w	r3, [lr], #4
 80150bc:	d2db      	bcs.n	8015076 <quorem+0x42>
 80150be:	f856 300c 	ldr.w	r3, [r6, ip]
 80150c2:	b933      	cbnz	r3, 80150d2 <quorem+0x9e>
 80150c4:	9b01      	ldr	r3, [sp, #4]
 80150c6:	3b04      	subs	r3, #4
 80150c8:	429e      	cmp	r6, r3
 80150ca:	461a      	mov	r2, r3
 80150cc:	d330      	bcc.n	8015130 <quorem+0xfc>
 80150ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80150d2:	4640      	mov	r0, r8
 80150d4:	f001 fbaa 	bl	801682c <__mcmp>
 80150d8:	2800      	cmp	r0, #0
 80150da:	db25      	blt.n	8015128 <quorem+0xf4>
 80150dc:	3501      	adds	r5, #1
 80150de:	4630      	mov	r0, r6
 80150e0:	f04f 0c00 	mov.w	ip, #0
 80150e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80150e8:	f8d0 e000 	ldr.w	lr, [r0]
 80150ec:	b293      	uxth	r3, r2
 80150ee:	ebac 0303 	sub.w	r3, ip, r3
 80150f2:	0c12      	lsrs	r2, r2, #16
 80150f4:	fa13 f38e 	uxtah	r3, r3, lr
 80150f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80150fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015100:	b29b      	uxth	r3, r3
 8015102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015106:	45b9      	cmp	r9, r7
 8015108:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801510c:	f840 3b04 	str.w	r3, [r0], #4
 8015110:	d2e8      	bcs.n	80150e4 <quorem+0xb0>
 8015112:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015116:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801511a:	b92a      	cbnz	r2, 8015128 <quorem+0xf4>
 801511c:	3b04      	subs	r3, #4
 801511e:	429e      	cmp	r6, r3
 8015120:	461a      	mov	r2, r3
 8015122:	d30b      	bcc.n	801513c <quorem+0x108>
 8015124:	f8c8 4010 	str.w	r4, [r8, #16]
 8015128:	4628      	mov	r0, r5
 801512a:	b003      	add	sp, #12
 801512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015130:	6812      	ldr	r2, [r2, #0]
 8015132:	3b04      	subs	r3, #4
 8015134:	2a00      	cmp	r2, #0
 8015136:	d1ca      	bne.n	80150ce <quorem+0x9a>
 8015138:	3c01      	subs	r4, #1
 801513a:	e7c5      	b.n	80150c8 <quorem+0x94>
 801513c:	6812      	ldr	r2, [r2, #0]
 801513e:	3b04      	subs	r3, #4
 8015140:	2a00      	cmp	r2, #0
 8015142:	d1ef      	bne.n	8015124 <quorem+0xf0>
 8015144:	3c01      	subs	r4, #1
 8015146:	e7ea      	b.n	801511e <quorem+0xea>
 8015148:	2000      	movs	r0, #0
 801514a:	e7ee      	b.n	801512a <quorem+0xf6>
 801514c:	0000      	movs	r0, r0
	...

08015150 <_dtoa_r>:
 8015150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015154:	ec57 6b10 	vmov	r6, r7, d0
 8015158:	b097      	sub	sp, #92	; 0x5c
 801515a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801515c:	9106      	str	r1, [sp, #24]
 801515e:	4604      	mov	r4, r0
 8015160:	920b      	str	r2, [sp, #44]	; 0x2c
 8015162:	9312      	str	r3, [sp, #72]	; 0x48
 8015164:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015168:	e9cd 6700 	strd	r6, r7, [sp]
 801516c:	b93d      	cbnz	r5, 801517e <_dtoa_r+0x2e>
 801516e:	2010      	movs	r0, #16
 8015170:	f001 f8ee 	bl	8016350 <malloc>
 8015174:	6260      	str	r0, [r4, #36]	; 0x24
 8015176:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801517a:	6005      	str	r5, [r0, #0]
 801517c:	60c5      	str	r5, [r0, #12]
 801517e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015180:	6819      	ldr	r1, [r3, #0]
 8015182:	b151      	cbz	r1, 801519a <_dtoa_r+0x4a>
 8015184:	685a      	ldr	r2, [r3, #4]
 8015186:	604a      	str	r2, [r1, #4]
 8015188:	2301      	movs	r3, #1
 801518a:	4093      	lsls	r3, r2
 801518c:	608b      	str	r3, [r1, #8]
 801518e:	4620      	mov	r0, r4
 8015190:	f001 f92c 	bl	80163ec <_Bfree>
 8015194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015196:	2200      	movs	r2, #0
 8015198:	601a      	str	r2, [r3, #0]
 801519a:	1e3b      	subs	r3, r7, #0
 801519c:	bfbb      	ittet	lt
 801519e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80151a2:	9301      	strlt	r3, [sp, #4]
 80151a4:	2300      	movge	r3, #0
 80151a6:	2201      	movlt	r2, #1
 80151a8:	bfac      	ite	ge
 80151aa:	f8c8 3000 	strge.w	r3, [r8]
 80151ae:	f8c8 2000 	strlt.w	r2, [r8]
 80151b2:	4baf      	ldr	r3, [pc, #700]	; (8015470 <_dtoa_r+0x320>)
 80151b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80151b8:	ea33 0308 	bics.w	r3, r3, r8
 80151bc:	d114      	bne.n	80151e8 <_dtoa_r+0x98>
 80151be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80151c4:	6013      	str	r3, [r2, #0]
 80151c6:	9b00      	ldr	r3, [sp, #0]
 80151c8:	b923      	cbnz	r3, 80151d4 <_dtoa_r+0x84>
 80151ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80151ce:	2800      	cmp	r0, #0
 80151d0:	f000 8542 	beq.w	8015c58 <_dtoa_r+0xb08>
 80151d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8015484 <_dtoa_r+0x334>
 80151da:	2b00      	cmp	r3, #0
 80151dc:	f000 8544 	beq.w	8015c68 <_dtoa_r+0xb18>
 80151e0:	f10b 0303 	add.w	r3, fp, #3
 80151e4:	f000 bd3e 	b.w	8015c64 <_dtoa_r+0xb14>
 80151e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80151ec:	2200      	movs	r2, #0
 80151ee:	2300      	movs	r3, #0
 80151f0:	4630      	mov	r0, r6
 80151f2:	4639      	mov	r1, r7
 80151f4:	f7eb fc80 	bl	8000af8 <__aeabi_dcmpeq>
 80151f8:	4681      	mov	r9, r0
 80151fa:	b168      	cbz	r0, 8015218 <_dtoa_r+0xc8>
 80151fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151fe:	2301      	movs	r3, #1
 8015200:	6013      	str	r3, [r2, #0]
 8015202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015204:	2b00      	cmp	r3, #0
 8015206:	f000 8524 	beq.w	8015c52 <_dtoa_r+0xb02>
 801520a:	4b9a      	ldr	r3, [pc, #616]	; (8015474 <_dtoa_r+0x324>)
 801520c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801520e:	f103 3bff 	add.w	fp, r3, #4294967295
 8015212:	6013      	str	r3, [r2, #0]
 8015214:	f000 bd28 	b.w	8015c68 <_dtoa_r+0xb18>
 8015218:	aa14      	add	r2, sp, #80	; 0x50
 801521a:	a915      	add	r1, sp, #84	; 0x54
 801521c:	ec47 6b10 	vmov	d0, r6, r7
 8015220:	4620      	mov	r0, r4
 8015222:	f001 fbf1 	bl	8016a08 <__d2b>
 8015226:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801522a:	9004      	str	r0, [sp, #16]
 801522c:	2d00      	cmp	r5, #0
 801522e:	d07c      	beq.n	801532a <_dtoa_r+0x1da>
 8015230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015234:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015238:	46b2      	mov	sl, r6
 801523a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801523e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015242:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8015246:	2200      	movs	r2, #0
 8015248:	4b8b      	ldr	r3, [pc, #556]	; (8015478 <_dtoa_r+0x328>)
 801524a:	4650      	mov	r0, sl
 801524c:	4659      	mov	r1, fp
 801524e:	f7eb f833 	bl	80002b8 <__aeabi_dsub>
 8015252:	a381      	add	r3, pc, #516	; (adr r3, 8015458 <_dtoa_r+0x308>)
 8015254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015258:	f7eb f9e6 	bl	8000628 <__aeabi_dmul>
 801525c:	a380      	add	r3, pc, #512	; (adr r3, 8015460 <_dtoa_r+0x310>)
 801525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015262:	f7eb f82b 	bl	80002bc <__adddf3>
 8015266:	4606      	mov	r6, r0
 8015268:	4628      	mov	r0, r5
 801526a:	460f      	mov	r7, r1
 801526c:	f7eb f972 	bl	8000554 <__aeabi_i2d>
 8015270:	a37d      	add	r3, pc, #500	; (adr r3, 8015468 <_dtoa_r+0x318>)
 8015272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015276:	f7eb f9d7 	bl	8000628 <__aeabi_dmul>
 801527a:	4602      	mov	r2, r0
 801527c:	460b      	mov	r3, r1
 801527e:	4630      	mov	r0, r6
 8015280:	4639      	mov	r1, r7
 8015282:	f7eb f81b 	bl	80002bc <__adddf3>
 8015286:	4606      	mov	r6, r0
 8015288:	460f      	mov	r7, r1
 801528a:	f7eb fc7d 	bl	8000b88 <__aeabi_d2iz>
 801528e:	2200      	movs	r2, #0
 8015290:	4682      	mov	sl, r0
 8015292:	2300      	movs	r3, #0
 8015294:	4630      	mov	r0, r6
 8015296:	4639      	mov	r1, r7
 8015298:	f7eb fc38 	bl	8000b0c <__aeabi_dcmplt>
 801529c:	b148      	cbz	r0, 80152b2 <_dtoa_r+0x162>
 801529e:	4650      	mov	r0, sl
 80152a0:	f7eb f958 	bl	8000554 <__aeabi_i2d>
 80152a4:	4632      	mov	r2, r6
 80152a6:	463b      	mov	r3, r7
 80152a8:	f7eb fc26 	bl	8000af8 <__aeabi_dcmpeq>
 80152ac:	b908      	cbnz	r0, 80152b2 <_dtoa_r+0x162>
 80152ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80152b2:	f1ba 0f16 	cmp.w	sl, #22
 80152b6:	d859      	bhi.n	801536c <_dtoa_r+0x21c>
 80152b8:	4970      	ldr	r1, [pc, #448]	; (801547c <_dtoa_r+0x32c>)
 80152ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80152be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152c6:	f7eb fc3f 	bl	8000b48 <__aeabi_dcmpgt>
 80152ca:	2800      	cmp	r0, #0
 80152cc:	d050      	beq.n	8015370 <_dtoa_r+0x220>
 80152ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80152d2:	2300      	movs	r3, #0
 80152d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80152d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80152d8:	1b5d      	subs	r5, r3, r5
 80152da:	f1b5 0801 	subs.w	r8, r5, #1
 80152de:	bf49      	itett	mi
 80152e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80152e4:	2300      	movpl	r3, #0
 80152e6:	9305      	strmi	r3, [sp, #20]
 80152e8:	f04f 0800 	movmi.w	r8, #0
 80152ec:	bf58      	it	pl
 80152ee:	9305      	strpl	r3, [sp, #20]
 80152f0:	f1ba 0f00 	cmp.w	sl, #0
 80152f4:	db3e      	blt.n	8015374 <_dtoa_r+0x224>
 80152f6:	2300      	movs	r3, #0
 80152f8:	44d0      	add	r8, sl
 80152fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80152fe:	9307      	str	r3, [sp, #28]
 8015300:	9b06      	ldr	r3, [sp, #24]
 8015302:	2b09      	cmp	r3, #9
 8015304:	f200 8090 	bhi.w	8015428 <_dtoa_r+0x2d8>
 8015308:	2b05      	cmp	r3, #5
 801530a:	bfc4      	itt	gt
 801530c:	3b04      	subgt	r3, #4
 801530e:	9306      	strgt	r3, [sp, #24]
 8015310:	9b06      	ldr	r3, [sp, #24]
 8015312:	f1a3 0302 	sub.w	r3, r3, #2
 8015316:	bfcc      	ite	gt
 8015318:	2500      	movgt	r5, #0
 801531a:	2501      	movle	r5, #1
 801531c:	2b03      	cmp	r3, #3
 801531e:	f200 808f 	bhi.w	8015440 <_dtoa_r+0x2f0>
 8015322:	e8df f003 	tbb	[pc, r3]
 8015326:	7f7d      	.short	0x7f7d
 8015328:	7131      	.short	0x7131
 801532a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801532e:	441d      	add	r5, r3
 8015330:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8015334:	2820      	cmp	r0, #32
 8015336:	dd13      	ble.n	8015360 <_dtoa_r+0x210>
 8015338:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801533c:	9b00      	ldr	r3, [sp, #0]
 801533e:	fa08 f800 	lsl.w	r8, r8, r0
 8015342:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015346:	fa23 f000 	lsr.w	r0, r3, r0
 801534a:	ea48 0000 	orr.w	r0, r8, r0
 801534e:	f7eb f8f1 	bl	8000534 <__aeabi_ui2d>
 8015352:	2301      	movs	r3, #1
 8015354:	4682      	mov	sl, r0
 8015356:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801535a:	3d01      	subs	r5, #1
 801535c:	9313      	str	r3, [sp, #76]	; 0x4c
 801535e:	e772      	b.n	8015246 <_dtoa_r+0xf6>
 8015360:	9b00      	ldr	r3, [sp, #0]
 8015362:	f1c0 0020 	rsb	r0, r0, #32
 8015366:	fa03 f000 	lsl.w	r0, r3, r0
 801536a:	e7f0      	b.n	801534e <_dtoa_r+0x1fe>
 801536c:	2301      	movs	r3, #1
 801536e:	e7b1      	b.n	80152d4 <_dtoa_r+0x184>
 8015370:	900f      	str	r0, [sp, #60]	; 0x3c
 8015372:	e7b0      	b.n	80152d6 <_dtoa_r+0x186>
 8015374:	9b05      	ldr	r3, [sp, #20]
 8015376:	eba3 030a 	sub.w	r3, r3, sl
 801537a:	9305      	str	r3, [sp, #20]
 801537c:	f1ca 0300 	rsb	r3, sl, #0
 8015380:	9307      	str	r3, [sp, #28]
 8015382:	2300      	movs	r3, #0
 8015384:	930e      	str	r3, [sp, #56]	; 0x38
 8015386:	e7bb      	b.n	8015300 <_dtoa_r+0x1b0>
 8015388:	2301      	movs	r3, #1
 801538a:	930a      	str	r3, [sp, #40]	; 0x28
 801538c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801538e:	2b00      	cmp	r3, #0
 8015390:	dd59      	ble.n	8015446 <_dtoa_r+0x2f6>
 8015392:	9302      	str	r3, [sp, #8]
 8015394:	4699      	mov	r9, r3
 8015396:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015398:	2200      	movs	r2, #0
 801539a:	6072      	str	r2, [r6, #4]
 801539c:	2204      	movs	r2, #4
 801539e:	f102 0014 	add.w	r0, r2, #20
 80153a2:	4298      	cmp	r0, r3
 80153a4:	6871      	ldr	r1, [r6, #4]
 80153a6:	d953      	bls.n	8015450 <_dtoa_r+0x300>
 80153a8:	4620      	mov	r0, r4
 80153aa:	f000 ffeb 	bl	8016384 <_Balloc>
 80153ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153b0:	6030      	str	r0, [r6, #0]
 80153b2:	f1b9 0f0e 	cmp.w	r9, #14
 80153b6:	f8d3 b000 	ldr.w	fp, [r3]
 80153ba:	f200 80e6 	bhi.w	801558a <_dtoa_r+0x43a>
 80153be:	2d00      	cmp	r5, #0
 80153c0:	f000 80e3 	beq.w	801558a <_dtoa_r+0x43a>
 80153c4:	ed9d 7b00 	vldr	d7, [sp]
 80153c8:	f1ba 0f00 	cmp.w	sl, #0
 80153cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80153d0:	dd74      	ble.n	80154bc <_dtoa_r+0x36c>
 80153d2:	4a2a      	ldr	r2, [pc, #168]	; (801547c <_dtoa_r+0x32c>)
 80153d4:	f00a 030f 	and.w	r3, sl, #15
 80153d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80153dc:	ed93 7b00 	vldr	d7, [r3]
 80153e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80153e4:	06f0      	lsls	r0, r6, #27
 80153e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80153ea:	d565      	bpl.n	80154b8 <_dtoa_r+0x368>
 80153ec:	4b24      	ldr	r3, [pc, #144]	; (8015480 <_dtoa_r+0x330>)
 80153ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80153f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80153f6:	f7eb fa41 	bl	800087c <__aeabi_ddiv>
 80153fa:	e9cd 0100 	strd	r0, r1, [sp]
 80153fe:	f006 060f 	and.w	r6, r6, #15
 8015402:	2503      	movs	r5, #3
 8015404:	4f1e      	ldr	r7, [pc, #120]	; (8015480 <_dtoa_r+0x330>)
 8015406:	e04c      	b.n	80154a2 <_dtoa_r+0x352>
 8015408:	2301      	movs	r3, #1
 801540a:	930a      	str	r3, [sp, #40]	; 0x28
 801540c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801540e:	4453      	add	r3, sl
 8015410:	f103 0901 	add.w	r9, r3, #1
 8015414:	9302      	str	r3, [sp, #8]
 8015416:	464b      	mov	r3, r9
 8015418:	2b01      	cmp	r3, #1
 801541a:	bfb8      	it	lt
 801541c:	2301      	movlt	r3, #1
 801541e:	e7ba      	b.n	8015396 <_dtoa_r+0x246>
 8015420:	2300      	movs	r3, #0
 8015422:	e7b2      	b.n	801538a <_dtoa_r+0x23a>
 8015424:	2300      	movs	r3, #0
 8015426:	e7f0      	b.n	801540a <_dtoa_r+0x2ba>
 8015428:	2501      	movs	r5, #1
 801542a:	2300      	movs	r3, #0
 801542c:	9306      	str	r3, [sp, #24]
 801542e:	950a      	str	r5, [sp, #40]	; 0x28
 8015430:	f04f 33ff 	mov.w	r3, #4294967295
 8015434:	9302      	str	r3, [sp, #8]
 8015436:	4699      	mov	r9, r3
 8015438:	2200      	movs	r2, #0
 801543a:	2312      	movs	r3, #18
 801543c:	920b      	str	r2, [sp, #44]	; 0x2c
 801543e:	e7aa      	b.n	8015396 <_dtoa_r+0x246>
 8015440:	2301      	movs	r3, #1
 8015442:	930a      	str	r3, [sp, #40]	; 0x28
 8015444:	e7f4      	b.n	8015430 <_dtoa_r+0x2e0>
 8015446:	2301      	movs	r3, #1
 8015448:	9302      	str	r3, [sp, #8]
 801544a:	4699      	mov	r9, r3
 801544c:	461a      	mov	r2, r3
 801544e:	e7f5      	b.n	801543c <_dtoa_r+0x2ec>
 8015450:	3101      	adds	r1, #1
 8015452:	6071      	str	r1, [r6, #4]
 8015454:	0052      	lsls	r2, r2, #1
 8015456:	e7a2      	b.n	801539e <_dtoa_r+0x24e>
 8015458:	636f4361 	.word	0x636f4361
 801545c:	3fd287a7 	.word	0x3fd287a7
 8015460:	8b60c8b3 	.word	0x8b60c8b3
 8015464:	3fc68a28 	.word	0x3fc68a28
 8015468:	509f79fb 	.word	0x509f79fb
 801546c:	3fd34413 	.word	0x3fd34413
 8015470:	7ff00000 	.word	0x7ff00000
 8015474:	0801826c 	.word	0x0801826c
 8015478:	3ff80000 	.word	0x3ff80000
 801547c:	08018170 	.word	0x08018170
 8015480:	08018148 	.word	0x08018148
 8015484:	080180d1 	.word	0x080180d1
 8015488:	07f1      	lsls	r1, r6, #31
 801548a:	d508      	bpl.n	801549e <_dtoa_r+0x34e>
 801548c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015494:	f7eb f8c8 	bl	8000628 <__aeabi_dmul>
 8015498:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801549c:	3501      	adds	r5, #1
 801549e:	1076      	asrs	r6, r6, #1
 80154a0:	3708      	adds	r7, #8
 80154a2:	2e00      	cmp	r6, #0
 80154a4:	d1f0      	bne.n	8015488 <_dtoa_r+0x338>
 80154a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80154aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154ae:	f7eb f9e5 	bl	800087c <__aeabi_ddiv>
 80154b2:	e9cd 0100 	strd	r0, r1, [sp]
 80154b6:	e01a      	b.n	80154ee <_dtoa_r+0x39e>
 80154b8:	2502      	movs	r5, #2
 80154ba:	e7a3      	b.n	8015404 <_dtoa_r+0x2b4>
 80154bc:	f000 80a0 	beq.w	8015600 <_dtoa_r+0x4b0>
 80154c0:	f1ca 0600 	rsb	r6, sl, #0
 80154c4:	4b9f      	ldr	r3, [pc, #636]	; (8015744 <_dtoa_r+0x5f4>)
 80154c6:	4fa0      	ldr	r7, [pc, #640]	; (8015748 <_dtoa_r+0x5f8>)
 80154c8:	f006 020f 	and.w	r2, r6, #15
 80154cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80154d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80154d8:	f7eb f8a6 	bl	8000628 <__aeabi_dmul>
 80154dc:	e9cd 0100 	strd	r0, r1, [sp]
 80154e0:	1136      	asrs	r6, r6, #4
 80154e2:	2300      	movs	r3, #0
 80154e4:	2502      	movs	r5, #2
 80154e6:	2e00      	cmp	r6, #0
 80154e8:	d17f      	bne.n	80155ea <_dtoa_r+0x49a>
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d1e1      	bne.n	80154b2 <_dtoa_r+0x362>
 80154ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	f000 8087 	beq.w	8015604 <_dtoa_r+0x4b4>
 80154f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80154fa:	2200      	movs	r2, #0
 80154fc:	4b93      	ldr	r3, [pc, #588]	; (801574c <_dtoa_r+0x5fc>)
 80154fe:	4630      	mov	r0, r6
 8015500:	4639      	mov	r1, r7
 8015502:	f7eb fb03 	bl	8000b0c <__aeabi_dcmplt>
 8015506:	2800      	cmp	r0, #0
 8015508:	d07c      	beq.n	8015604 <_dtoa_r+0x4b4>
 801550a:	f1b9 0f00 	cmp.w	r9, #0
 801550e:	d079      	beq.n	8015604 <_dtoa_r+0x4b4>
 8015510:	9b02      	ldr	r3, [sp, #8]
 8015512:	2b00      	cmp	r3, #0
 8015514:	dd35      	ble.n	8015582 <_dtoa_r+0x432>
 8015516:	f10a 33ff 	add.w	r3, sl, #4294967295
 801551a:	9308      	str	r3, [sp, #32]
 801551c:	4639      	mov	r1, r7
 801551e:	2200      	movs	r2, #0
 8015520:	4b8b      	ldr	r3, [pc, #556]	; (8015750 <_dtoa_r+0x600>)
 8015522:	4630      	mov	r0, r6
 8015524:	f7eb f880 	bl	8000628 <__aeabi_dmul>
 8015528:	e9cd 0100 	strd	r0, r1, [sp]
 801552c:	9f02      	ldr	r7, [sp, #8]
 801552e:	3501      	adds	r5, #1
 8015530:	4628      	mov	r0, r5
 8015532:	f7eb f80f 	bl	8000554 <__aeabi_i2d>
 8015536:	e9dd 2300 	ldrd	r2, r3, [sp]
 801553a:	f7eb f875 	bl	8000628 <__aeabi_dmul>
 801553e:	2200      	movs	r2, #0
 8015540:	4b84      	ldr	r3, [pc, #528]	; (8015754 <_dtoa_r+0x604>)
 8015542:	f7ea febb 	bl	80002bc <__adddf3>
 8015546:	4605      	mov	r5, r0
 8015548:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801554c:	2f00      	cmp	r7, #0
 801554e:	d15d      	bne.n	801560c <_dtoa_r+0x4bc>
 8015550:	2200      	movs	r2, #0
 8015552:	4b81      	ldr	r3, [pc, #516]	; (8015758 <_dtoa_r+0x608>)
 8015554:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015558:	f7ea feae 	bl	80002b8 <__aeabi_dsub>
 801555c:	462a      	mov	r2, r5
 801555e:	4633      	mov	r3, r6
 8015560:	e9cd 0100 	strd	r0, r1, [sp]
 8015564:	f7eb faf0 	bl	8000b48 <__aeabi_dcmpgt>
 8015568:	2800      	cmp	r0, #0
 801556a:	f040 8288 	bne.w	8015a7e <_dtoa_r+0x92e>
 801556e:	462a      	mov	r2, r5
 8015570:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015578:	f7eb fac8 	bl	8000b0c <__aeabi_dcmplt>
 801557c:	2800      	cmp	r0, #0
 801557e:	f040 827c 	bne.w	8015a7a <_dtoa_r+0x92a>
 8015582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015586:	e9cd 2300 	strd	r2, r3, [sp]
 801558a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801558c:	2b00      	cmp	r3, #0
 801558e:	f2c0 8150 	blt.w	8015832 <_dtoa_r+0x6e2>
 8015592:	f1ba 0f0e 	cmp.w	sl, #14
 8015596:	f300 814c 	bgt.w	8015832 <_dtoa_r+0x6e2>
 801559a:	4b6a      	ldr	r3, [pc, #424]	; (8015744 <_dtoa_r+0x5f4>)
 801559c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80155a0:	ed93 7b00 	vldr	d7, [r3]
 80155a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80155ac:	f280 80d8 	bge.w	8015760 <_dtoa_r+0x610>
 80155b0:	f1b9 0f00 	cmp.w	r9, #0
 80155b4:	f300 80d4 	bgt.w	8015760 <_dtoa_r+0x610>
 80155b8:	f040 825e 	bne.w	8015a78 <_dtoa_r+0x928>
 80155bc:	2200      	movs	r2, #0
 80155be:	4b66      	ldr	r3, [pc, #408]	; (8015758 <_dtoa_r+0x608>)
 80155c0:	ec51 0b17 	vmov	r0, r1, d7
 80155c4:	f7eb f830 	bl	8000628 <__aeabi_dmul>
 80155c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155cc:	f7eb fab2 	bl	8000b34 <__aeabi_dcmpge>
 80155d0:	464f      	mov	r7, r9
 80155d2:	464e      	mov	r6, r9
 80155d4:	2800      	cmp	r0, #0
 80155d6:	f040 8234 	bne.w	8015a42 <_dtoa_r+0x8f2>
 80155da:	2331      	movs	r3, #49	; 0x31
 80155dc:	f10b 0501 	add.w	r5, fp, #1
 80155e0:	f88b 3000 	strb.w	r3, [fp]
 80155e4:	f10a 0a01 	add.w	sl, sl, #1
 80155e8:	e22f      	b.n	8015a4a <_dtoa_r+0x8fa>
 80155ea:	07f2      	lsls	r2, r6, #31
 80155ec:	d505      	bpl.n	80155fa <_dtoa_r+0x4aa>
 80155ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80155f2:	f7eb f819 	bl	8000628 <__aeabi_dmul>
 80155f6:	3501      	adds	r5, #1
 80155f8:	2301      	movs	r3, #1
 80155fa:	1076      	asrs	r6, r6, #1
 80155fc:	3708      	adds	r7, #8
 80155fe:	e772      	b.n	80154e6 <_dtoa_r+0x396>
 8015600:	2502      	movs	r5, #2
 8015602:	e774      	b.n	80154ee <_dtoa_r+0x39e>
 8015604:	f8cd a020 	str.w	sl, [sp, #32]
 8015608:	464f      	mov	r7, r9
 801560a:	e791      	b.n	8015530 <_dtoa_r+0x3e0>
 801560c:	4b4d      	ldr	r3, [pc, #308]	; (8015744 <_dtoa_r+0x5f4>)
 801560e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015612:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015618:	2b00      	cmp	r3, #0
 801561a:	d047      	beq.n	80156ac <_dtoa_r+0x55c>
 801561c:	4602      	mov	r2, r0
 801561e:	460b      	mov	r3, r1
 8015620:	2000      	movs	r0, #0
 8015622:	494e      	ldr	r1, [pc, #312]	; (801575c <_dtoa_r+0x60c>)
 8015624:	f7eb f92a 	bl	800087c <__aeabi_ddiv>
 8015628:	462a      	mov	r2, r5
 801562a:	4633      	mov	r3, r6
 801562c:	f7ea fe44 	bl	80002b8 <__aeabi_dsub>
 8015630:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015634:	465d      	mov	r5, fp
 8015636:	e9dd 0100 	ldrd	r0, r1, [sp]
 801563a:	f7eb faa5 	bl	8000b88 <__aeabi_d2iz>
 801563e:	4606      	mov	r6, r0
 8015640:	f7ea ff88 	bl	8000554 <__aeabi_i2d>
 8015644:	4602      	mov	r2, r0
 8015646:	460b      	mov	r3, r1
 8015648:	e9dd 0100 	ldrd	r0, r1, [sp]
 801564c:	f7ea fe34 	bl	80002b8 <__aeabi_dsub>
 8015650:	3630      	adds	r6, #48	; 0x30
 8015652:	f805 6b01 	strb.w	r6, [r5], #1
 8015656:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801565a:	e9cd 0100 	strd	r0, r1, [sp]
 801565e:	f7eb fa55 	bl	8000b0c <__aeabi_dcmplt>
 8015662:	2800      	cmp	r0, #0
 8015664:	d163      	bne.n	801572e <_dtoa_r+0x5de>
 8015666:	e9dd 2300 	ldrd	r2, r3, [sp]
 801566a:	2000      	movs	r0, #0
 801566c:	4937      	ldr	r1, [pc, #220]	; (801574c <_dtoa_r+0x5fc>)
 801566e:	f7ea fe23 	bl	80002b8 <__aeabi_dsub>
 8015672:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015676:	f7eb fa49 	bl	8000b0c <__aeabi_dcmplt>
 801567a:	2800      	cmp	r0, #0
 801567c:	f040 80b7 	bne.w	80157ee <_dtoa_r+0x69e>
 8015680:	eba5 030b 	sub.w	r3, r5, fp
 8015684:	429f      	cmp	r7, r3
 8015686:	f77f af7c 	ble.w	8015582 <_dtoa_r+0x432>
 801568a:	2200      	movs	r2, #0
 801568c:	4b30      	ldr	r3, [pc, #192]	; (8015750 <_dtoa_r+0x600>)
 801568e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015692:	f7ea ffc9 	bl	8000628 <__aeabi_dmul>
 8015696:	2200      	movs	r2, #0
 8015698:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801569c:	4b2c      	ldr	r3, [pc, #176]	; (8015750 <_dtoa_r+0x600>)
 801569e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156a2:	f7ea ffc1 	bl	8000628 <__aeabi_dmul>
 80156a6:	e9cd 0100 	strd	r0, r1, [sp]
 80156aa:	e7c4      	b.n	8015636 <_dtoa_r+0x4e6>
 80156ac:	462a      	mov	r2, r5
 80156ae:	4633      	mov	r3, r6
 80156b0:	f7ea ffba 	bl	8000628 <__aeabi_dmul>
 80156b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80156b8:	eb0b 0507 	add.w	r5, fp, r7
 80156bc:	465e      	mov	r6, fp
 80156be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156c2:	f7eb fa61 	bl	8000b88 <__aeabi_d2iz>
 80156c6:	4607      	mov	r7, r0
 80156c8:	f7ea ff44 	bl	8000554 <__aeabi_i2d>
 80156cc:	3730      	adds	r7, #48	; 0x30
 80156ce:	4602      	mov	r2, r0
 80156d0:	460b      	mov	r3, r1
 80156d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156d6:	f7ea fdef 	bl	80002b8 <__aeabi_dsub>
 80156da:	f806 7b01 	strb.w	r7, [r6], #1
 80156de:	42ae      	cmp	r6, r5
 80156e0:	e9cd 0100 	strd	r0, r1, [sp]
 80156e4:	f04f 0200 	mov.w	r2, #0
 80156e8:	d126      	bne.n	8015738 <_dtoa_r+0x5e8>
 80156ea:	4b1c      	ldr	r3, [pc, #112]	; (801575c <_dtoa_r+0x60c>)
 80156ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80156f0:	f7ea fde4 	bl	80002bc <__adddf3>
 80156f4:	4602      	mov	r2, r0
 80156f6:	460b      	mov	r3, r1
 80156f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156fc:	f7eb fa24 	bl	8000b48 <__aeabi_dcmpgt>
 8015700:	2800      	cmp	r0, #0
 8015702:	d174      	bne.n	80157ee <_dtoa_r+0x69e>
 8015704:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015708:	2000      	movs	r0, #0
 801570a:	4914      	ldr	r1, [pc, #80]	; (801575c <_dtoa_r+0x60c>)
 801570c:	f7ea fdd4 	bl	80002b8 <__aeabi_dsub>
 8015710:	4602      	mov	r2, r0
 8015712:	460b      	mov	r3, r1
 8015714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015718:	f7eb f9f8 	bl	8000b0c <__aeabi_dcmplt>
 801571c:	2800      	cmp	r0, #0
 801571e:	f43f af30 	beq.w	8015582 <_dtoa_r+0x432>
 8015722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015726:	2b30      	cmp	r3, #48	; 0x30
 8015728:	f105 32ff 	add.w	r2, r5, #4294967295
 801572c:	d002      	beq.n	8015734 <_dtoa_r+0x5e4>
 801572e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015732:	e04a      	b.n	80157ca <_dtoa_r+0x67a>
 8015734:	4615      	mov	r5, r2
 8015736:	e7f4      	b.n	8015722 <_dtoa_r+0x5d2>
 8015738:	4b05      	ldr	r3, [pc, #20]	; (8015750 <_dtoa_r+0x600>)
 801573a:	f7ea ff75 	bl	8000628 <__aeabi_dmul>
 801573e:	e9cd 0100 	strd	r0, r1, [sp]
 8015742:	e7bc      	b.n	80156be <_dtoa_r+0x56e>
 8015744:	08018170 	.word	0x08018170
 8015748:	08018148 	.word	0x08018148
 801574c:	3ff00000 	.word	0x3ff00000
 8015750:	40240000 	.word	0x40240000
 8015754:	401c0000 	.word	0x401c0000
 8015758:	40140000 	.word	0x40140000
 801575c:	3fe00000 	.word	0x3fe00000
 8015760:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015764:	465d      	mov	r5, fp
 8015766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801576a:	4630      	mov	r0, r6
 801576c:	4639      	mov	r1, r7
 801576e:	f7eb f885 	bl	800087c <__aeabi_ddiv>
 8015772:	f7eb fa09 	bl	8000b88 <__aeabi_d2iz>
 8015776:	4680      	mov	r8, r0
 8015778:	f7ea feec 	bl	8000554 <__aeabi_i2d>
 801577c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015780:	f7ea ff52 	bl	8000628 <__aeabi_dmul>
 8015784:	4602      	mov	r2, r0
 8015786:	460b      	mov	r3, r1
 8015788:	4630      	mov	r0, r6
 801578a:	4639      	mov	r1, r7
 801578c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015790:	f7ea fd92 	bl	80002b8 <__aeabi_dsub>
 8015794:	f805 6b01 	strb.w	r6, [r5], #1
 8015798:	eba5 060b 	sub.w	r6, r5, fp
 801579c:	45b1      	cmp	r9, r6
 801579e:	4602      	mov	r2, r0
 80157a0:	460b      	mov	r3, r1
 80157a2:	d139      	bne.n	8015818 <_dtoa_r+0x6c8>
 80157a4:	f7ea fd8a 	bl	80002bc <__adddf3>
 80157a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157ac:	4606      	mov	r6, r0
 80157ae:	460f      	mov	r7, r1
 80157b0:	f7eb f9ca 	bl	8000b48 <__aeabi_dcmpgt>
 80157b4:	b9c8      	cbnz	r0, 80157ea <_dtoa_r+0x69a>
 80157b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157ba:	4630      	mov	r0, r6
 80157bc:	4639      	mov	r1, r7
 80157be:	f7eb f99b 	bl	8000af8 <__aeabi_dcmpeq>
 80157c2:	b110      	cbz	r0, 80157ca <_dtoa_r+0x67a>
 80157c4:	f018 0f01 	tst.w	r8, #1
 80157c8:	d10f      	bne.n	80157ea <_dtoa_r+0x69a>
 80157ca:	9904      	ldr	r1, [sp, #16]
 80157cc:	4620      	mov	r0, r4
 80157ce:	f000 fe0d 	bl	80163ec <_Bfree>
 80157d2:	2300      	movs	r3, #0
 80157d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80157d6:	702b      	strb	r3, [r5, #0]
 80157d8:	f10a 0301 	add.w	r3, sl, #1
 80157dc:	6013      	str	r3, [r2, #0]
 80157de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	f000 8241 	beq.w	8015c68 <_dtoa_r+0xb18>
 80157e6:	601d      	str	r5, [r3, #0]
 80157e8:	e23e      	b.n	8015c68 <_dtoa_r+0xb18>
 80157ea:	f8cd a020 	str.w	sl, [sp, #32]
 80157ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80157f2:	2a39      	cmp	r2, #57	; 0x39
 80157f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80157f8:	d108      	bne.n	801580c <_dtoa_r+0x6bc>
 80157fa:	459b      	cmp	fp, r3
 80157fc:	d10a      	bne.n	8015814 <_dtoa_r+0x6c4>
 80157fe:	9b08      	ldr	r3, [sp, #32]
 8015800:	3301      	adds	r3, #1
 8015802:	9308      	str	r3, [sp, #32]
 8015804:	2330      	movs	r3, #48	; 0x30
 8015806:	f88b 3000 	strb.w	r3, [fp]
 801580a:	465b      	mov	r3, fp
 801580c:	781a      	ldrb	r2, [r3, #0]
 801580e:	3201      	adds	r2, #1
 8015810:	701a      	strb	r2, [r3, #0]
 8015812:	e78c      	b.n	801572e <_dtoa_r+0x5de>
 8015814:	461d      	mov	r5, r3
 8015816:	e7ea      	b.n	80157ee <_dtoa_r+0x69e>
 8015818:	2200      	movs	r2, #0
 801581a:	4b9b      	ldr	r3, [pc, #620]	; (8015a88 <_dtoa_r+0x938>)
 801581c:	f7ea ff04 	bl	8000628 <__aeabi_dmul>
 8015820:	2200      	movs	r2, #0
 8015822:	2300      	movs	r3, #0
 8015824:	4606      	mov	r6, r0
 8015826:	460f      	mov	r7, r1
 8015828:	f7eb f966 	bl	8000af8 <__aeabi_dcmpeq>
 801582c:	2800      	cmp	r0, #0
 801582e:	d09a      	beq.n	8015766 <_dtoa_r+0x616>
 8015830:	e7cb      	b.n	80157ca <_dtoa_r+0x67a>
 8015832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015834:	2a00      	cmp	r2, #0
 8015836:	f000 808b 	beq.w	8015950 <_dtoa_r+0x800>
 801583a:	9a06      	ldr	r2, [sp, #24]
 801583c:	2a01      	cmp	r2, #1
 801583e:	dc6e      	bgt.n	801591e <_dtoa_r+0x7ce>
 8015840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015842:	2a00      	cmp	r2, #0
 8015844:	d067      	beq.n	8015916 <_dtoa_r+0x7c6>
 8015846:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801584a:	9f07      	ldr	r7, [sp, #28]
 801584c:	9d05      	ldr	r5, [sp, #20]
 801584e:	9a05      	ldr	r2, [sp, #20]
 8015850:	2101      	movs	r1, #1
 8015852:	441a      	add	r2, r3
 8015854:	4620      	mov	r0, r4
 8015856:	9205      	str	r2, [sp, #20]
 8015858:	4498      	add	r8, r3
 801585a:	f000 fea5 	bl	80165a8 <__i2b>
 801585e:	4606      	mov	r6, r0
 8015860:	2d00      	cmp	r5, #0
 8015862:	dd0c      	ble.n	801587e <_dtoa_r+0x72e>
 8015864:	f1b8 0f00 	cmp.w	r8, #0
 8015868:	dd09      	ble.n	801587e <_dtoa_r+0x72e>
 801586a:	4545      	cmp	r5, r8
 801586c:	9a05      	ldr	r2, [sp, #20]
 801586e:	462b      	mov	r3, r5
 8015870:	bfa8      	it	ge
 8015872:	4643      	movge	r3, r8
 8015874:	1ad2      	subs	r2, r2, r3
 8015876:	9205      	str	r2, [sp, #20]
 8015878:	1aed      	subs	r5, r5, r3
 801587a:	eba8 0803 	sub.w	r8, r8, r3
 801587e:	9b07      	ldr	r3, [sp, #28]
 8015880:	b1eb      	cbz	r3, 80158be <_dtoa_r+0x76e>
 8015882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015884:	2b00      	cmp	r3, #0
 8015886:	d067      	beq.n	8015958 <_dtoa_r+0x808>
 8015888:	b18f      	cbz	r7, 80158ae <_dtoa_r+0x75e>
 801588a:	4631      	mov	r1, r6
 801588c:	463a      	mov	r2, r7
 801588e:	4620      	mov	r0, r4
 8015890:	f000 ff2a 	bl	80166e8 <__pow5mult>
 8015894:	9a04      	ldr	r2, [sp, #16]
 8015896:	4601      	mov	r1, r0
 8015898:	4606      	mov	r6, r0
 801589a:	4620      	mov	r0, r4
 801589c:	f000 fe8d 	bl	80165ba <__multiply>
 80158a0:	9904      	ldr	r1, [sp, #16]
 80158a2:	9008      	str	r0, [sp, #32]
 80158a4:	4620      	mov	r0, r4
 80158a6:	f000 fda1 	bl	80163ec <_Bfree>
 80158aa:	9b08      	ldr	r3, [sp, #32]
 80158ac:	9304      	str	r3, [sp, #16]
 80158ae:	9b07      	ldr	r3, [sp, #28]
 80158b0:	1bda      	subs	r2, r3, r7
 80158b2:	d004      	beq.n	80158be <_dtoa_r+0x76e>
 80158b4:	9904      	ldr	r1, [sp, #16]
 80158b6:	4620      	mov	r0, r4
 80158b8:	f000 ff16 	bl	80166e8 <__pow5mult>
 80158bc:	9004      	str	r0, [sp, #16]
 80158be:	2101      	movs	r1, #1
 80158c0:	4620      	mov	r0, r4
 80158c2:	f000 fe71 	bl	80165a8 <__i2b>
 80158c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158c8:	4607      	mov	r7, r0
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	f000 81d0 	beq.w	8015c70 <_dtoa_r+0xb20>
 80158d0:	461a      	mov	r2, r3
 80158d2:	4601      	mov	r1, r0
 80158d4:	4620      	mov	r0, r4
 80158d6:	f000 ff07 	bl	80166e8 <__pow5mult>
 80158da:	9b06      	ldr	r3, [sp, #24]
 80158dc:	2b01      	cmp	r3, #1
 80158de:	4607      	mov	r7, r0
 80158e0:	dc40      	bgt.n	8015964 <_dtoa_r+0x814>
 80158e2:	9b00      	ldr	r3, [sp, #0]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d139      	bne.n	801595c <_dtoa_r+0x80c>
 80158e8:	9b01      	ldr	r3, [sp, #4]
 80158ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d136      	bne.n	8015960 <_dtoa_r+0x810>
 80158f2:	9b01      	ldr	r3, [sp, #4]
 80158f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158f8:	0d1b      	lsrs	r3, r3, #20
 80158fa:	051b      	lsls	r3, r3, #20
 80158fc:	b12b      	cbz	r3, 801590a <_dtoa_r+0x7ba>
 80158fe:	9b05      	ldr	r3, [sp, #20]
 8015900:	3301      	adds	r3, #1
 8015902:	9305      	str	r3, [sp, #20]
 8015904:	f108 0801 	add.w	r8, r8, #1
 8015908:	2301      	movs	r3, #1
 801590a:	9307      	str	r3, [sp, #28]
 801590c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801590e:	2b00      	cmp	r3, #0
 8015910:	d12a      	bne.n	8015968 <_dtoa_r+0x818>
 8015912:	2001      	movs	r0, #1
 8015914:	e030      	b.n	8015978 <_dtoa_r+0x828>
 8015916:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015918:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801591c:	e795      	b.n	801584a <_dtoa_r+0x6fa>
 801591e:	9b07      	ldr	r3, [sp, #28]
 8015920:	f109 37ff 	add.w	r7, r9, #4294967295
 8015924:	42bb      	cmp	r3, r7
 8015926:	bfbf      	itttt	lt
 8015928:	9b07      	ldrlt	r3, [sp, #28]
 801592a:	9707      	strlt	r7, [sp, #28]
 801592c:	1afa      	sublt	r2, r7, r3
 801592e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015930:	bfbb      	ittet	lt
 8015932:	189b      	addlt	r3, r3, r2
 8015934:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015936:	1bdf      	subge	r7, r3, r7
 8015938:	2700      	movlt	r7, #0
 801593a:	f1b9 0f00 	cmp.w	r9, #0
 801593e:	bfb5      	itete	lt
 8015940:	9b05      	ldrlt	r3, [sp, #20]
 8015942:	9d05      	ldrge	r5, [sp, #20]
 8015944:	eba3 0509 	sublt.w	r5, r3, r9
 8015948:	464b      	movge	r3, r9
 801594a:	bfb8      	it	lt
 801594c:	2300      	movlt	r3, #0
 801594e:	e77e      	b.n	801584e <_dtoa_r+0x6fe>
 8015950:	9f07      	ldr	r7, [sp, #28]
 8015952:	9d05      	ldr	r5, [sp, #20]
 8015954:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015956:	e783      	b.n	8015860 <_dtoa_r+0x710>
 8015958:	9a07      	ldr	r2, [sp, #28]
 801595a:	e7ab      	b.n	80158b4 <_dtoa_r+0x764>
 801595c:	2300      	movs	r3, #0
 801595e:	e7d4      	b.n	801590a <_dtoa_r+0x7ba>
 8015960:	9b00      	ldr	r3, [sp, #0]
 8015962:	e7d2      	b.n	801590a <_dtoa_r+0x7ba>
 8015964:	2300      	movs	r3, #0
 8015966:	9307      	str	r3, [sp, #28]
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801596e:	6918      	ldr	r0, [r3, #16]
 8015970:	f000 fdcc 	bl	801650c <__hi0bits>
 8015974:	f1c0 0020 	rsb	r0, r0, #32
 8015978:	4440      	add	r0, r8
 801597a:	f010 001f 	ands.w	r0, r0, #31
 801597e:	d047      	beq.n	8015a10 <_dtoa_r+0x8c0>
 8015980:	f1c0 0320 	rsb	r3, r0, #32
 8015984:	2b04      	cmp	r3, #4
 8015986:	dd3b      	ble.n	8015a00 <_dtoa_r+0x8b0>
 8015988:	9b05      	ldr	r3, [sp, #20]
 801598a:	f1c0 001c 	rsb	r0, r0, #28
 801598e:	4403      	add	r3, r0
 8015990:	9305      	str	r3, [sp, #20]
 8015992:	4405      	add	r5, r0
 8015994:	4480      	add	r8, r0
 8015996:	9b05      	ldr	r3, [sp, #20]
 8015998:	2b00      	cmp	r3, #0
 801599a:	dd05      	ble.n	80159a8 <_dtoa_r+0x858>
 801599c:	461a      	mov	r2, r3
 801599e:	9904      	ldr	r1, [sp, #16]
 80159a0:	4620      	mov	r0, r4
 80159a2:	f000 feef 	bl	8016784 <__lshift>
 80159a6:	9004      	str	r0, [sp, #16]
 80159a8:	f1b8 0f00 	cmp.w	r8, #0
 80159ac:	dd05      	ble.n	80159ba <_dtoa_r+0x86a>
 80159ae:	4639      	mov	r1, r7
 80159b0:	4642      	mov	r2, r8
 80159b2:	4620      	mov	r0, r4
 80159b4:	f000 fee6 	bl	8016784 <__lshift>
 80159b8:	4607      	mov	r7, r0
 80159ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159bc:	b353      	cbz	r3, 8015a14 <_dtoa_r+0x8c4>
 80159be:	4639      	mov	r1, r7
 80159c0:	9804      	ldr	r0, [sp, #16]
 80159c2:	f000 ff33 	bl	801682c <__mcmp>
 80159c6:	2800      	cmp	r0, #0
 80159c8:	da24      	bge.n	8015a14 <_dtoa_r+0x8c4>
 80159ca:	2300      	movs	r3, #0
 80159cc:	220a      	movs	r2, #10
 80159ce:	9904      	ldr	r1, [sp, #16]
 80159d0:	4620      	mov	r0, r4
 80159d2:	f000 fd22 	bl	801641a <__multadd>
 80159d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159d8:	9004      	str	r0, [sp, #16]
 80159da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80159de:	2b00      	cmp	r3, #0
 80159e0:	f000 814d 	beq.w	8015c7e <_dtoa_r+0xb2e>
 80159e4:	2300      	movs	r3, #0
 80159e6:	4631      	mov	r1, r6
 80159e8:	220a      	movs	r2, #10
 80159ea:	4620      	mov	r0, r4
 80159ec:	f000 fd15 	bl	801641a <__multadd>
 80159f0:	9b02      	ldr	r3, [sp, #8]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	4606      	mov	r6, r0
 80159f6:	dc4f      	bgt.n	8015a98 <_dtoa_r+0x948>
 80159f8:	9b06      	ldr	r3, [sp, #24]
 80159fa:	2b02      	cmp	r3, #2
 80159fc:	dd4c      	ble.n	8015a98 <_dtoa_r+0x948>
 80159fe:	e011      	b.n	8015a24 <_dtoa_r+0x8d4>
 8015a00:	d0c9      	beq.n	8015996 <_dtoa_r+0x846>
 8015a02:	9a05      	ldr	r2, [sp, #20]
 8015a04:	331c      	adds	r3, #28
 8015a06:	441a      	add	r2, r3
 8015a08:	9205      	str	r2, [sp, #20]
 8015a0a:	441d      	add	r5, r3
 8015a0c:	4498      	add	r8, r3
 8015a0e:	e7c2      	b.n	8015996 <_dtoa_r+0x846>
 8015a10:	4603      	mov	r3, r0
 8015a12:	e7f6      	b.n	8015a02 <_dtoa_r+0x8b2>
 8015a14:	f1b9 0f00 	cmp.w	r9, #0
 8015a18:	dc38      	bgt.n	8015a8c <_dtoa_r+0x93c>
 8015a1a:	9b06      	ldr	r3, [sp, #24]
 8015a1c:	2b02      	cmp	r3, #2
 8015a1e:	dd35      	ble.n	8015a8c <_dtoa_r+0x93c>
 8015a20:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a24:	9b02      	ldr	r3, [sp, #8]
 8015a26:	b963      	cbnz	r3, 8015a42 <_dtoa_r+0x8f2>
 8015a28:	4639      	mov	r1, r7
 8015a2a:	2205      	movs	r2, #5
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	f000 fcf4 	bl	801641a <__multadd>
 8015a32:	4601      	mov	r1, r0
 8015a34:	4607      	mov	r7, r0
 8015a36:	9804      	ldr	r0, [sp, #16]
 8015a38:	f000 fef8 	bl	801682c <__mcmp>
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	f73f adcc 	bgt.w	80155da <_dtoa_r+0x48a>
 8015a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a44:	465d      	mov	r5, fp
 8015a46:	ea6f 0a03 	mvn.w	sl, r3
 8015a4a:	f04f 0900 	mov.w	r9, #0
 8015a4e:	4639      	mov	r1, r7
 8015a50:	4620      	mov	r0, r4
 8015a52:	f000 fccb 	bl	80163ec <_Bfree>
 8015a56:	2e00      	cmp	r6, #0
 8015a58:	f43f aeb7 	beq.w	80157ca <_dtoa_r+0x67a>
 8015a5c:	f1b9 0f00 	cmp.w	r9, #0
 8015a60:	d005      	beq.n	8015a6e <_dtoa_r+0x91e>
 8015a62:	45b1      	cmp	r9, r6
 8015a64:	d003      	beq.n	8015a6e <_dtoa_r+0x91e>
 8015a66:	4649      	mov	r1, r9
 8015a68:	4620      	mov	r0, r4
 8015a6a:	f000 fcbf 	bl	80163ec <_Bfree>
 8015a6e:	4631      	mov	r1, r6
 8015a70:	4620      	mov	r0, r4
 8015a72:	f000 fcbb 	bl	80163ec <_Bfree>
 8015a76:	e6a8      	b.n	80157ca <_dtoa_r+0x67a>
 8015a78:	2700      	movs	r7, #0
 8015a7a:	463e      	mov	r6, r7
 8015a7c:	e7e1      	b.n	8015a42 <_dtoa_r+0x8f2>
 8015a7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015a82:	463e      	mov	r6, r7
 8015a84:	e5a9      	b.n	80155da <_dtoa_r+0x48a>
 8015a86:	bf00      	nop
 8015a88:	40240000 	.word	0x40240000
 8015a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	f000 80fa 	beq.w	8015c8c <_dtoa_r+0xb3c>
 8015a98:	2d00      	cmp	r5, #0
 8015a9a:	dd05      	ble.n	8015aa8 <_dtoa_r+0x958>
 8015a9c:	4631      	mov	r1, r6
 8015a9e:	462a      	mov	r2, r5
 8015aa0:	4620      	mov	r0, r4
 8015aa2:	f000 fe6f 	bl	8016784 <__lshift>
 8015aa6:	4606      	mov	r6, r0
 8015aa8:	9b07      	ldr	r3, [sp, #28]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d04c      	beq.n	8015b48 <_dtoa_r+0x9f8>
 8015aae:	6871      	ldr	r1, [r6, #4]
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	f000 fc67 	bl	8016384 <_Balloc>
 8015ab6:	6932      	ldr	r2, [r6, #16]
 8015ab8:	3202      	adds	r2, #2
 8015aba:	4605      	mov	r5, r0
 8015abc:	0092      	lsls	r2, r2, #2
 8015abe:	f106 010c 	add.w	r1, r6, #12
 8015ac2:	300c      	adds	r0, #12
 8015ac4:	f7fd fd08 	bl	80134d8 <memcpy>
 8015ac8:	2201      	movs	r2, #1
 8015aca:	4629      	mov	r1, r5
 8015acc:	4620      	mov	r0, r4
 8015ace:	f000 fe59 	bl	8016784 <__lshift>
 8015ad2:	9b00      	ldr	r3, [sp, #0]
 8015ad4:	f8cd b014 	str.w	fp, [sp, #20]
 8015ad8:	f003 0301 	and.w	r3, r3, #1
 8015adc:	46b1      	mov	r9, r6
 8015ade:	9307      	str	r3, [sp, #28]
 8015ae0:	4606      	mov	r6, r0
 8015ae2:	4639      	mov	r1, r7
 8015ae4:	9804      	ldr	r0, [sp, #16]
 8015ae6:	f7ff faa5 	bl	8015034 <quorem>
 8015aea:	4649      	mov	r1, r9
 8015aec:	4605      	mov	r5, r0
 8015aee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015af2:	9804      	ldr	r0, [sp, #16]
 8015af4:	f000 fe9a 	bl	801682c <__mcmp>
 8015af8:	4632      	mov	r2, r6
 8015afa:	9000      	str	r0, [sp, #0]
 8015afc:	4639      	mov	r1, r7
 8015afe:	4620      	mov	r0, r4
 8015b00:	f000 feae 	bl	8016860 <__mdiff>
 8015b04:	68c3      	ldr	r3, [r0, #12]
 8015b06:	4602      	mov	r2, r0
 8015b08:	bb03      	cbnz	r3, 8015b4c <_dtoa_r+0x9fc>
 8015b0a:	4601      	mov	r1, r0
 8015b0c:	9008      	str	r0, [sp, #32]
 8015b0e:	9804      	ldr	r0, [sp, #16]
 8015b10:	f000 fe8c 	bl	801682c <__mcmp>
 8015b14:	9a08      	ldr	r2, [sp, #32]
 8015b16:	4603      	mov	r3, r0
 8015b18:	4611      	mov	r1, r2
 8015b1a:	4620      	mov	r0, r4
 8015b1c:	9308      	str	r3, [sp, #32]
 8015b1e:	f000 fc65 	bl	80163ec <_Bfree>
 8015b22:	9b08      	ldr	r3, [sp, #32]
 8015b24:	b9a3      	cbnz	r3, 8015b50 <_dtoa_r+0xa00>
 8015b26:	9a06      	ldr	r2, [sp, #24]
 8015b28:	b992      	cbnz	r2, 8015b50 <_dtoa_r+0xa00>
 8015b2a:	9a07      	ldr	r2, [sp, #28]
 8015b2c:	b982      	cbnz	r2, 8015b50 <_dtoa_r+0xa00>
 8015b2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b32:	d029      	beq.n	8015b88 <_dtoa_r+0xa38>
 8015b34:	9b00      	ldr	r3, [sp, #0]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	dd01      	ble.n	8015b3e <_dtoa_r+0x9ee>
 8015b3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015b3e:	9b05      	ldr	r3, [sp, #20]
 8015b40:	1c5d      	adds	r5, r3, #1
 8015b42:	f883 8000 	strb.w	r8, [r3]
 8015b46:	e782      	b.n	8015a4e <_dtoa_r+0x8fe>
 8015b48:	4630      	mov	r0, r6
 8015b4a:	e7c2      	b.n	8015ad2 <_dtoa_r+0x982>
 8015b4c:	2301      	movs	r3, #1
 8015b4e:	e7e3      	b.n	8015b18 <_dtoa_r+0x9c8>
 8015b50:	9a00      	ldr	r2, [sp, #0]
 8015b52:	2a00      	cmp	r2, #0
 8015b54:	db04      	blt.n	8015b60 <_dtoa_r+0xa10>
 8015b56:	d125      	bne.n	8015ba4 <_dtoa_r+0xa54>
 8015b58:	9a06      	ldr	r2, [sp, #24]
 8015b5a:	bb1a      	cbnz	r2, 8015ba4 <_dtoa_r+0xa54>
 8015b5c:	9a07      	ldr	r2, [sp, #28]
 8015b5e:	bb0a      	cbnz	r2, 8015ba4 <_dtoa_r+0xa54>
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	ddec      	ble.n	8015b3e <_dtoa_r+0x9ee>
 8015b64:	2201      	movs	r2, #1
 8015b66:	9904      	ldr	r1, [sp, #16]
 8015b68:	4620      	mov	r0, r4
 8015b6a:	f000 fe0b 	bl	8016784 <__lshift>
 8015b6e:	4639      	mov	r1, r7
 8015b70:	9004      	str	r0, [sp, #16]
 8015b72:	f000 fe5b 	bl	801682c <__mcmp>
 8015b76:	2800      	cmp	r0, #0
 8015b78:	dc03      	bgt.n	8015b82 <_dtoa_r+0xa32>
 8015b7a:	d1e0      	bne.n	8015b3e <_dtoa_r+0x9ee>
 8015b7c:	f018 0f01 	tst.w	r8, #1
 8015b80:	d0dd      	beq.n	8015b3e <_dtoa_r+0x9ee>
 8015b82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b86:	d1d8      	bne.n	8015b3a <_dtoa_r+0x9ea>
 8015b88:	9b05      	ldr	r3, [sp, #20]
 8015b8a:	9a05      	ldr	r2, [sp, #20]
 8015b8c:	1c5d      	adds	r5, r3, #1
 8015b8e:	2339      	movs	r3, #57	; 0x39
 8015b90:	7013      	strb	r3, [r2, #0]
 8015b92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015b96:	2b39      	cmp	r3, #57	; 0x39
 8015b98:	f105 32ff 	add.w	r2, r5, #4294967295
 8015b9c:	d04f      	beq.n	8015c3e <_dtoa_r+0xaee>
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	7013      	strb	r3, [r2, #0]
 8015ba2:	e754      	b.n	8015a4e <_dtoa_r+0x8fe>
 8015ba4:	9a05      	ldr	r2, [sp, #20]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	f102 0501 	add.w	r5, r2, #1
 8015bac:	dd06      	ble.n	8015bbc <_dtoa_r+0xa6c>
 8015bae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015bb2:	d0e9      	beq.n	8015b88 <_dtoa_r+0xa38>
 8015bb4:	f108 0801 	add.w	r8, r8, #1
 8015bb8:	9b05      	ldr	r3, [sp, #20]
 8015bba:	e7c2      	b.n	8015b42 <_dtoa_r+0x9f2>
 8015bbc:	9a02      	ldr	r2, [sp, #8]
 8015bbe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015bc2:	eba5 030b 	sub.w	r3, r5, fp
 8015bc6:	4293      	cmp	r3, r2
 8015bc8:	d021      	beq.n	8015c0e <_dtoa_r+0xabe>
 8015bca:	2300      	movs	r3, #0
 8015bcc:	220a      	movs	r2, #10
 8015bce:	9904      	ldr	r1, [sp, #16]
 8015bd0:	4620      	mov	r0, r4
 8015bd2:	f000 fc22 	bl	801641a <__multadd>
 8015bd6:	45b1      	cmp	r9, r6
 8015bd8:	9004      	str	r0, [sp, #16]
 8015bda:	f04f 0300 	mov.w	r3, #0
 8015bde:	f04f 020a 	mov.w	r2, #10
 8015be2:	4649      	mov	r1, r9
 8015be4:	4620      	mov	r0, r4
 8015be6:	d105      	bne.n	8015bf4 <_dtoa_r+0xaa4>
 8015be8:	f000 fc17 	bl	801641a <__multadd>
 8015bec:	4681      	mov	r9, r0
 8015bee:	4606      	mov	r6, r0
 8015bf0:	9505      	str	r5, [sp, #20]
 8015bf2:	e776      	b.n	8015ae2 <_dtoa_r+0x992>
 8015bf4:	f000 fc11 	bl	801641a <__multadd>
 8015bf8:	4631      	mov	r1, r6
 8015bfa:	4681      	mov	r9, r0
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	220a      	movs	r2, #10
 8015c00:	4620      	mov	r0, r4
 8015c02:	f000 fc0a 	bl	801641a <__multadd>
 8015c06:	4606      	mov	r6, r0
 8015c08:	e7f2      	b.n	8015bf0 <_dtoa_r+0xaa0>
 8015c0a:	f04f 0900 	mov.w	r9, #0
 8015c0e:	2201      	movs	r2, #1
 8015c10:	9904      	ldr	r1, [sp, #16]
 8015c12:	4620      	mov	r0, r4
 8015c14:	f000 fdb6 	bl	8016784 <__lshift>
 8015c18:	4639      	mov	r1, r7
 8015c1a:	9004      	str	r0, [sp, #16]
 8015c1c:	f000 fe06 	bl	801682c <__mcmp>
 8015c20:	2800      	cmp	r0, #0
 8015c22:	dcb6      	bgt.n	8015b92 <_dtoa_r+0xa42>
 8015c24:	d102      	bne.n	8015c2c <_dtoa_r+0xadc>
 8015c26:	f018 0f01 	tst.w	r8, #1
 8015c2a:	d1b2      	bne.n	8015b92 <_dtoa_r+0xa42>
 8015c2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c30:	2b30      	cmp	r3, #48	; 0x30
 8015c32:	f105 32ff 	add.w	r2, r5, #4294967295
 8015c36:	f47f af0a 	bne.w	8015a4e <_dtoa_r+0x8fe>
 8015c3a:	4615      	mov	r5, r2
 8015c3c:	e7f6      	b.n	8015c2c <_dtoa_r+0xadc>
 8015c3e:	4593      	cmp	fp, r2
 8015c40:	d105      	bne.n	8015c4e <_dtoa_r+0xafe>
 8015c42:	2331      	movs	r3, #49	; 0x31
 8015c44:	f10a 0a01 	add.w	sl, sl, #1
 8015c48:	f88b 3000 	strb.w	r3, [fp]
 8015c4c:	e6ff      	b.n	8015a4e <_dtoa_r+0x8fe>
 8015c4e:	4615      	mov	r5, r2
 8015c50:	e79f      	b.n	8015b92 <_dtoa_r+0xa42>
 8015c52:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015cb8 <_dtoa_r+0xb68>
 8015c56:	e007      	b.n	8015c68 <_dtoa_r+0xb18>
 8015c58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015cbc <_dtoa_r+0xb6c>
 8015c5e:	b11b      	cbz	r3, 8015c68 <_dtoa_r+0xb18>
 8015c60:	f10b 0308 	add.w	r3, fp, #8
 8015c64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c66:	6013      	str	r3, [r2, #0]
 8015c68:	4658      	mov	r0, fp
 8015c6a:	b017      	add	sp, #92	; 0x5c
 8015c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c70:	9b06      	ldr	r3, [sp, #24]
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	f77f ae35 	ble.w	80158e2 <_dtoa_r+0x792>
 8015c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c7a:	9307      	str	r3, [sp, #28]
 8015c7c:	e649      	b.n	8015912 <_dtoa_r+0x7c2>
 8015c7e:	9b02      	ldr	r3, [sp, #8]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	dc03      	bgt.n	8015c8c <_dtoa_r+0xb3c>
 8015c84:	9b06      	ldr	r3, [sp, #24]
 8015c86:	2b02      	cmp	r3, #2
 8015c88:	f73f aecc 	bgt.w	8015a24 <_dtoa_r+0x8d4>
 8015c8c:	465d      	mov	r5, fp
 8015c8e:	4639      	mov	r1, r7
 8015c90:	9804      	ldr	r0, [sp, #16]
 8015c92:	f7ff f9cf 	bl	8015034 <quorem>
 8015c96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015c9a:	f805 8b01 	strb.w	r8, [r5], #1
 8015c9e:	9a02      	ldr	r2, [sp, #8]
 8015ca0:	eba5 030b 	sub.w	r3, r5, fp
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	ddb0      	ble.n	8015c0a <_dtoa_r+0xaba>
 8015ca8:	2300      	movs	r3, #0
 8015caa:	220a      	movs	r2, #10
 8015cac:	9904      	ldr	r1, [sp, #16]
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f000 fbb3 	bl	801641a <__multadd>
 8015cb4:	9004      	str	r0, [sp, #16]
 8015cb6:	e7ea      	b.n	8015c8e <_dtoa_r+0xb3e>
 8015cb8:	0801826b 	.word	0x0801826b
 8015cbc:	080180c8 	.word	0x080180c8

08015cc0 <rshift>:
 8015cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cc2:	6906      	ldr	r6, [r0, #16]
 8015cc4:	114b      	asrs	r3, r1, #5
 8015cc6:	429e      	cmp	r6, r3
 8015cc8:	f100 0414 	add.w	r4, r0, #20
 8015ccc:	dd30      	ble.n	8015d30 <rshift+0x70>
 8015cce:	f011 011f 	ands.w	r1, r1, #31
 8015cd2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015cd6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015cda:	d108      	bne.n	8015cee <rshift+0x2e>
 8015cdc:	4621      	mov	r1, r4
 8015cde:	42b2      	cmp	r2, r6
 8015ce0:	460b      	mov	r3, r1
 8015ce2:	d211      	bcs.n	8015d08 <rshift+0x48>
 8015ce4:	f852 3b04 	ldr.w	r3, [r2], #4
 8015ce8:	f841 3b04 	str.w	r3, [r1], #4
 8015cec:	e7f7      	b.n	8015cde <rshift+0x1e>
 8015cee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015cf2:	f1c1 0c20 	rsb	ip, r1, #32
 8015cf6:	40cd      	lsrs	r5, r1
 8015cf8:	3204      	adds	r2, #4
 8015cfa:	4623      	mov	r3, r4
 8015cfc:	42b2      	cmp	r2, r6
 8015cfe:	4617      	mov	r7, r2
 8015d00:	d30c      	bcc.n	8015d1c <rshift+0x5c>
 8015d02:	601d      	str	r5, [r3, #0]
 8015d04:	b105      	cbz	r5, 8015d08 <rshift+0x48>
 8015d06:	3304      	adds	r3, #4
 8015d08:	1b1a      	subs	r2, r3, r4
 8015d0a:	42a3      	cmp	r3, r4
 8015d0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015d10:	bf08      	it	eq
 8015d12:	2300      	moveq	r3, #0
 8015d14:	6102      	str	r2, [r0, #16]
 8015d16:	bf08      	it	eq
 8015d18:	6143      	streq	r3, [r0, #20]
 8015d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d1c:	683f      	ldr	r7, [r7, #0]
 8015d1e:	fa07 f70c 	lsl.w	r7, r7, ip
 8015d22:	433d      	orrs	r5, r7
 8015d24:	f843 5b04 	str.w	r5, [r3], #4
 8015d28:	f852 5b04 	ldr.w	r5, [r2], #4
 8015d2c:	40cd      	lsrs	r5, r1
 8015d2e:	e7e5      	b.n	8015cfc <rshift+0x3c>
 8015d30:	4623      	mov	r3, r4
 8015d32:	e7e9      	b.n	8015d08 <rshift+0x48>

08015d34 <__hexdig_fun>:
 8015d34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015d38:	2b09      	cmp	r3, #9
 8015d3a:	d802      	bhi.n	8015d42 <__hexdig_fun+0xe>
 8015d3c:	3820      	subs	r0, #32
 8015d3e:	b2c0      	uxtb	r0, r0
 8015d40:	4770      	bx	lr
 8015d42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015d46:	2b05      	cmp	r3, #5
 8015d48:	d801      	bhi.n	8015d4e <__hexdig_fun+0x1a>
 8015d4a:	3847      	subs	r0, #71	; 0x47
 8015d4c:	e7f7      	b.n	8015d3e <__hexdig_fun+0xa>
 8015d4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015d52:	2b05      	cmp	r3, #5
 8015d54:	d801      	bhi.n	8015d5a <__hexdig_fun+0x26>
 8015d56:	3827      	subs	r0, #39	; 0x27
 8015d58:	e7f1      	b.n	8015d3e <__hexdig_fun+0xa>
 8015d5a:	2000      	movs	r0, #0
 8015d5c:	4770      	bx	lr

08015d5e <__gethex>:
 8015d5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d62:	b08b      	sub	sp, #44	; 0x2c
 8015d64:	468a      	mov	sl, r1
 8015d66:	9002      	str	r0, [sp, #8]
 8015d68:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015d6a:	9306      	str	r3, [sp, #24]
 8015d6c:	4690      	mov	r8, r2
 8015d6e:	f000 fadf 	bl	8016330 <__localeconv_l>
 8015d72:	6803      	ldr	r3, [r0, #0]
 8015d74:	9303      	str	r3, [sp, #12]
 8015d76:	4618      	mov	r0, r3
 8015d78:	f7ea fa42 	bl	8000200 <strlen>
 8015d7c:	9b03      	ldr	r3, [sp, #12]
 8015d7e:	9001      	str	r0, [sp, #4]
 8015d80:	4403      	add	r3, r0
 8015d82:	f04f 0b00 	mov.w	fp, #0
 8015d86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015d8a:	9307      	str	r3, [sp, #28]
 8015d8c:	f8da 3000 	ldr.w	r3, [sl]
 8015d90:	3302      	adds	r3, #2
 8015d92:	461f      	mov	r7, r3
 8015d94:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015d98:	2830      	cmp	r0, #48	; 0x30
 8015d9a:	d06c      	beq.n	8015e76 <__gethex+0x118>
 8015d9c:	f7ff ffca 	bl	8015d34 <__hexdig_fun>
 8015da0:	4604      	mov	r4, r0
 8015da2:	2800      	cmp	r0, #0
 8015da4:	d16a      	bne.n	8015e7c <__gethex+0x11e>
 8015da6:	9a01      	ldr	r2, [sp, #4]
 8015da8:	9903      	ldr	r1, [sp, #12]
 8015daa:	4638      	mov	r0, r7
 8015dac:	f001 fc36 	bl	801761c <strncmp>
 8015db0:	2800      	cmp	r0, #0
 8015db2:	d166      	bne.n	8015e82 <__gethex+0x124>
 8015db4:	9b01      	ldr	r3, [sp, #4]
 8015db6:	5cf8      	ldrb	r0, [r7, r3]
 8015db8:	18fe      	adds	r6, r7, r3
 8015dba:	f7ff ffbb 	bl	8015d34 <__hexdig_fun>
 8015dbe:	2800      	cmp	r0, #0
 8015dc0:	d062      	beq.n	8015e88 <__gethex+0x12a>
 8015dc2:	4633      	mov	r3, r6
 8015dc4:	7818      	ldrb	r0, [r3, #0]
 8015dc6:	2830      	cmp	r0, #48	; 0x30
 8015dc8:	461f      	mov	r7, r3
 8015dca:	f103 0301 	add.w	r3, r3, #1
 8015dce:	d0f9      	beq.n	8015dc4 <__gethex+0x66>
 8015dd0:	f7ff ffb0 	bl	8015d34 <__hexdig_fun>
 8015dd4:	fab0 f580 	clz	r5, r0
 8015dd8:	096d      	lsrs	r5, r5, #5
 8015dda:	4634      	mov	r4, r6
 8015ddc:	f04f 0b01 	mov.w	fp, #1
 8015de0:	463a      	mov	r2, r7
 8015de2:	4616      	mov	r6, r2
 8015de4:	3201      	adds	r2, #1
 8015de6:	7830      	ldrb	r0, [r6, #0]
 8015de8:	f7ff ffa4 	bl	8015d34 <__hexdig_fun>
 8015dec:	2800      	cmp	r0, #0
 8015dee:	d1f8      	bne.n	8015de2 <__gethex+0x84>
 8015df0:	9a01      	ldr	r2, [sp, #4]
 8015df2:	9903      	ldr	r1, [sp, #12]
 8015df4:	4630      	mov	r0, r6
 8015df6:	f001 fc11 	bl	801761c <strncmp>
 8015dfa:	b950      	cbnz	r0, 8015e12 <__gethex+0xb4>
 8015dfc:	b954      	cbnz	r4, 8015e14 <__gethex+0xb6>
 8015dfe:	9b01      	ldr	r3, [sp, #4]
 8015e00:	18f4      	adds	r4, r6, r3
 8015e02:	4622      	mov	r2, r4
 8015e04:	4616      	mov	r6, r2
 8015e06:	3201      	adds	r2, #1
 8015e08:	7830      	ldrb	r0, [r6, #0]
 8015e0a:	f7ff ff93 	bl	8015d34 <__hexdig_fun>
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	d1f8      	bne.n	8015e04 <__gethex+0xa6>
 8015e12:	b10c      	cbz	r4, 8015e18 <__gethex+0xba>
 8015e14:	1ba4      	subs	r4, r4, r6
 8015e16:	00a4      	lsls	r4, r4, #2
 8015e18:	7833      	ldrb	r3, [r6, #0]
 8015e1a:	2b50      	cmp	r3, #80	; 0x50
 8015e1c:	d001      	beq.n	8015e22 <__gethex+0xc4>
 8015e1e:	2b70      	cmp	r3, #112	; 0x70
 8015e20:	d140      	bne.n	8015ea4 <__gethex+0x146>
 8015e22:	7873      	ldrb	r3, [r6, #1]
 8015e24:	2b2b      	cmp	r3, #43	; 0x2b
 8015e26:	d031      	beq.n	8015e8c <__gethex+0x12e>
 8015e28:	2b2d      	cmp	r3, #45	; 0x2d
 8015e2a:	d033      	beq.n	8015e94 <__gethex+0x136>
 8015e2c:	1c71      	adds	r1, r6, #1
 8015e2e:	f04f 0900 	mov.w	r9, #0
 8015e32:	7808      	ldrb	r0, [r1, #0]
 8015e34:	f7ff ff7e 	bl	8015d34 <__hexdig_fun>
 8015e38:	1e43      	subs	r3, r0, #1
 8015e3a:	b2db      	uxtb	r3, r3
 8015e3c:	2b18      	cmp	r3, #24
 8015e3e:	d831      	bhi.n	8015ea4 <__gethex+0x146>
 8015e40:	f1a0 0210 	sub.w	r2, r0, #16
 8015e44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015e48:	f7ff ff74 	bl	8015d34 <__hexdig_fun>
 8015e4c:	1e43      	subs	r3, r0, #1
 8015e4e:	b2db      	uxtb	r3, r3
 8015e50:	2b18      	cmp	r3, #24
 8015e52:	d922      	bls.n	8015e9a <__gethex+0x13c>
 8015e54:	f1b9 0f00 	cmp.w	r9, #0
 8015e58:	d000      	beq.n	8015e5c <__gethex+0xfe>
 8015e5a:	4252      	negs	r2, r2
 8015e5c:	4414      	add	r4, r2
 8015e5e:	f8ca 1000 	str.w	r1, [sl]
 8015e62:	b30d      	cbz	r5, 8015ea8 <__gethex+0x14a>
 8015e64:	f1bb 0f00 	cmp.w	fp, #0
 8015e68:	bf0c      	ite	eq
 8015e6a:	2706      	moveq	r7, #6
 8015e6c:	2700      	movne	r7, #0
 8015e6e:	4638      	mov	r0, r7
 8015e70:	b00b      	add	sp, #44	; 0x2c
 8015e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e76:	f10b 0b01 	add.w	fp, fp, #1
 8015e7a:	e78a      	b.n	8015d92 <__gethex+0x34>
 8015e7c:	2500      	movs	r5, #0
 8015e7e:	462c      	mov	r4, r5
 8015e80:	e7ae      	b.n	8015de0 <__gethex+0x82>
 8015e82:	463e      	mov	r6, r7
 8015e84:	2501      	movs	r5, #1
 8015e86:	e7c7      	b.n	8015e18 <__gethex+0xba>
 8015e88:	4604      	mov	r4, r0
 8015e8a:	e7fb      	b.n	8015e84 <__gethex+0x126>
 8015e8c:	f04f 0900 	mov.w	r9, #0
 8015e90:	1cb1      	adds	r1, r6, #2
 8015e92:	e7ce      	b.n	8015e32 <__gethex+0xd4>
 8015e94:	f04f 0901 	mov.w	r9, #1
 8015e98:	e7fa      	b.n	8015e90 <__gethex+0x132>
 8015e9a:	230a      	movs	r3, #10
 8015e9c:	fb03 0202 	mla	r2, r3, r2, r0
 8015ea0:	3a10      	subs	r2, #16
 8015ea2:	e7cf      	b.n	8015e44 <__gethex+0xe6>
 8015ea4:	4631      	mov	r1, r6
 8015ea6:	e7da      	b.n	8015e5e <__gethex+0x100>
 8015ea8:	1bf3      	subs	r3, r6, r7
 8015eaa:	3b01      	subs	r3, #1
 8015eac:	4629      	mov	r1, r5
 8015eae:	2b07      	cmp	r3, #7
 8015eb0:	dc49      	bgt.n	8015f46 <__gethex+0x1e8>
 8015eb2:	9802      	ldr	r0, [sp, #8]
 8015eb4:	f000 fa66 	bl	8016384 <_Balloc>
 8015eb8:	9b01      	ldr	r3, [sp, #4]
 8015eba:	f100 0914 	add.w	r9, r0, #20
 8015ebe:	f04f 0b00 	mov.w	fp, #0
 8015ec2:	f1c3 0301 	rsb	r3, r3, #1
 8015ec6:	4605      	mov	r5, r0
 8015ec8:	f8cd 9010 	str.w	r9, [sp, #16]
 8015ecc:	46da      	mov	sl, fp
 8015ece:	9308      	str	r3, [sp, #32]
 8015ed0:	42b7      	cmp	r7, r6
 8015ed2:	d33b      	bcc.n	8015f4c <__gethex+0x1ee>
 8015ed4:	9804      	ldr	r0, [sp, #16]
 8015ed6:	f840 ab04 	str.w	sl, [r0], #4
 8015eda:	eba0 0009 	sub.w	r0, r0, r9
 8015ede:	1080      	asrs	r0, r0, #2
 8015ee0:	6128      	str	r0, [r5, #16]
 8015ee2:	0147      	lsls	r7, r0, #5
 8015ee4:	4650      	mov	r0, sl
 8015ee6:	f000 fb11 	bl	801650c <__hi0bits>
 8015eea:	f8d8 6000 	ldr.w	r6, [r8]
 8015eee:	1a3f      	subs	r7, r7, r0
 8015ef0:	42b7      	cmp	r7, r6
 8015ef2:	dd64      	ble.n	8015fbe <__gethex+0x260>
 8015ef4:	1bbf      	subs	r7, r7, r6
 8015ef6:	4639      	mov	r1, r7
 8015ef8:	4628      	mov	r0, r5
 8015efa:	f000 fe21 	bl	8016b40 <__any_on>
 8015efe:	4682      	mov	sl, r0
 8015f00:	b178      	cbz	r0, 8015f22 <__gethex+0x1c4>
 8015f02:	1e7b      	subs	r3, r7, #1
 8015f04:	1159      	asrs	r1, r3, #5
 8015f06:	f003 021f 	and.w	r2, r3, #31
 8015f0a:	f04f 0a01 	mov.w	sl, #1
 8015f0e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015f12:	fa0a f202 	lsl.w	r2, sl, r2
 8015f16:	420a      	tst	r2, r1
 8015f18:	d003      	beq.n	8015f22 <__gethex+0x1c4>
 8015f1a:	4553      	cmp	r3, sl
 8015f1c:	dc46      	bgt.n	8015fac <__gethex+0x24e>
 8015f1e:	f04f 0a02 	mov.w	sl, #2
 8015f22:	4639      	mov	r1, r7
 8015f24:	4628      	mov	r0, r5
 8015f26:	f7ff fecb 	bl	8015cc0 <rshift>
 8015f2a:	443c      	add	r4, r7
 8015f2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f30:	42a3      	cmp	r3, r4
 8015f32:	da52      	bge.n	8015fda <__gethex+0x27c>
 8015f34:	4629      	mov	r1, r5
 8015f36:	9802      	ldr	r0, [sp, #8]
 8015f38:	f000 fa58 	bl	80163ec <_Bfree>
 8015f3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015f3e:	2300      	movs	r3, #0
 8015f40:	6013      	str	r3, [r2, #0]
 8015f42:	27a3      	movs	r7, #163	; 0xa3
 8015f44:	e793      	b.n	8015e6e <__gethex+0x110>
 8015f46:	3101      	adds	r1, #1
 8015f48:	105b      	asrs	r3, r3, #1
 8015f4a:	e7b0      	b.n	8015eae <__gethex+0x150>
 8015f4c:	1e73      	subs	r3, r6, #1
 8015f4e:	9305      	str	r3, [sp, #20]
 8015f50:	9a07      	ldr	r2, [sp, #28]
 8015f52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015f56:	4293      	cmp	r3, r2
 8015f58:	d018      	beq.n	8015f8c <__gethex+0x22e>
 8015f5a:	f1bb 0f20 	cmp.w	fp, #32
 8015f5e:	d107      	bne.n	8015f70 <__gethex+0x212>
 8015f60:	9b04      	ldr	r3, [sp, #16]
 8015f62:	f8c3 a000 	str.w	sl, [r3]
 8015f66:	3304      	adds	r3, #4
 8015f68:	f04f 0a00 	mov.w	sl, #0
 8015f6c:	9304      	str	r3, [sp, #16]
 8015f6e:	46d3      	mov	fp, sl
 8015f70:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015f74:	f7ff fede 	bl	8015d34 <__hexdig_fun>
 8015f78:	f000 000f 	and.w	r0, r0, #15
 8015f7c:	fa00 f00b 	lsl.w	r0, r0, fp
 8015f80:	ea4a 0a00 	orr.w	sl, sl, r0
 8015f84:	f10b 0b04 	add.w	fp, fp, #4
 8015f88:	9b05      	ldr	r3, [sp, #20]
 8015f8a:	e00d      	b.n	8015fa8 <__gethex+0x24a>
 8015f8c:	9b05      	ldr	r3, [sp, #20]
 8015f8e:	9a08      	ldr	r2, [sp, #32]
 8015f90:	4413      	add	r3, r2
 8015f92:	42bb      	cmp	r3, r7
 8015f94:	d3e1      	bcc.n	8015f5a <__gethex+0x1fc>
 8015f96:	4618      	mov	r0, r3
 8015f98:	9a01      	ldr	r2, [sp, #4]
 8015f9a:	9903      	ldr	r1, [sp, #12]
 8015f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8015f9e:	f001 fb3d 	bl	801761c <strncmp>
 8015fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	d1d8      	bne.n	8015f5a <__gethex+0x1fc>
 8015fa8:	461e      	mov	r6, r3
 8015faa:	e791      	b.n	8015ed0 <__gethex+0x172>
 8015fac:	1eb9      	subs	r1, r7, #2
 8015fae:	4628      	mov	r0, r5
 8015fb0:	f000 fdc6 	bl	8016b40 <__any_on>
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	d0b2      	beq.n	8015f1e <__gethex+0x1c0>
 8015fb8:	f04f 0a03 	mov.w	sl, #3
 8015fbc:	e7b1      	b.n	8015f22 <__gethex+0x1c4>
 8015fbe:	da09      	bge.n	8015fd4 <__gethex+0x276>
 8015fc0:	1bf7      	subs	r7, r6, r7
 8015fc2:	4629      	mov	r1, r5
 8015fc4:	463a      	mov	r2, r7
 8015fc6:	9802      	ldr	r0, [sp, #8]
 8015fc8:	f000 fbdc 	bl	8016784 <__lshift>
 8015fcc:	1be4      	subs	r4, r4, r7
 8015fce:	4605      	mov	r5, r0
 8015fd0:	f100 0914 	add.w	r9, r0, #20
 8015fd4:	f04f 0a00 	mov.w	sl, #0
 8015fd8:	e7a8      	b.n	8015f2c <__gethex+0x1ce>
 8015fda:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015fde:	42a0      	cmp	r0, r4
 8015fe0:	dd6a      	ble.n	80160b8 <__gethex+0x35a>
 8015fe2:	1b04      	subs	r4, r0, r4
 8015fe4:	42a6      	cmp	r6, r4
 8015fe6:	dc2e      	bgt.n	8016046 <__gethex+0x2e8>
 8015fe8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015fec:	2b02      	cmp	r3, #2
 8015fee:	d022      	beq.n	8016036 <__gethex+0x2d8>
 8015ff0:	2b03      	cmp	r3, #3
 8015ff2:	d024      	beq.n	801603e <__gethex+0x2e0>
 8015ff4:	2b01      	cmp	r3, #1
 8015ff6:	d115      	bne.n	8016024 <__gethex+0x2c6>
 8015ff8:	42a6      	cmp	r6, r4
 8015ffa:	d113      	bne.n	8016024 <__gethex+0x2c6>
 8015ffc:	2e01      	cmp	r6, #1
 8015ffe:	dc0b      	bgt.n	8016018 <__gethex+0x2ba>
 8016000:	9a06      	ldr	r2, [sp, #24]
 8016002:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016006:	6013      	str	r3, [r2, #0]
 8016008:	2301      	movs	r3, #1
 801600a:	612b      	str	r3, [r5, #16]
 801600c:	f8c9 3000 	str.w	r3, [r9]
 8016010:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016012:	2762      	movs	r7, #98	; 0x62
 8016014:	601d      	str	r5, [r3, #0]
 8016016:	e72a      	b.n	8015e6e <__gethex+0x110>
 8016018:	1e71      	subs	r1, r6, #1
 801601a:	4628      	mov	r0, r5
 801601c:	f000 fd90 	bl	8016b40 <__any_on>
 8016020:	2800      	cmp	r0, #0
 8016022:	d1ed      	bne.n	8016000 <__gethex+0x2a2>
 8016024:	4629      	mov	r1, r5
 8016026:	9802      	ldr	r0, [sp, #8]
 8016028:	f000 f9e0 	bl	80163ec <_Bfree>
 801602c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801602e:	2300      	movs	r3, #0
 8016030:	6013      	str	r3, [r2, #0]
 8016032:	2750      	movs	r7, #80	; 0x50
 8016034:	e71b      	b.n	8015e6e <__gethex+0x110>
 8016036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016038:	2b00      	cmp	r3, #0
 801603a:	d0e1      	beq.n	8016000 <__gethex+0x2a2>
 801603c:	e7f2      	b.n	8016024 <__gethex+0x2c6>
 801603e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016040:	2b00      	cmp	r3, #0
 8016042:	d1dd      	bne.n	8016000 <__gethex+0x2a2>
 8016044:	e7ee      	b.n	8016024 <__gethex+0x2c6>
 8016046:	1e67      	subs	r7, r4, #1
 8016048:	f1ba 0f00 	cmp.w	sl, #0
 801604c:	d131      	bne.n	80160b2 <__gethex+0x354>
 801604e:	b127      	cbz	r7, 801605a <__gethex+0x2fc>
 8016050:	4639      	mov	r1, r7
 8016052:	4628      	mov	r0, r5
 8016054:	f000 fd74 	bl	8016b40 <__any_on>
 8016058:	4682      	mov	sl, r0
 801605a:	117a      	asrs	r2, r7, #5
 801605c:	2301      	movs	r3, #1
 801605e:	f007 071f 	and.w	r7, r7, #31
 8016062:	fa03 f707 	lsl.w	r7, r3, r7
 8016066:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801606a:	4621      	mov	r1, r4
 801606c:	421f      	tst	r7, r3
 801606e:	4628      	mov	r0, r5
 8016070:	bf18      	it	ne
 8016072:	f04a 0a02 	orrne.w	sl, sl, #2
 8016076:	1b36      	subs	r6, r6, r4
 8016078:	f7ff fe22 	bl	8015cc0 <rshift>
 801607c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016080:	2702      	movs	r7, #2
 8016082:	f1ba 0f00 	cmp.w	sl, #0
 8016086:	d048      	beq.n	801611a <__gethex+0x3bc>
 8016088:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801608c:	2b02      	cmp	r3, #2
 801608e:	d015      	beq.n	80160bc <__gethex+0x35e>
 8016090:	2b03      	cmp	r3, #3
 8016092:	d017      	beq.n	80160c4 <__gethex+0x366>
 8016094:	2b01      	cmp	r3, #1
 8016096:	d109      	bne.n	80160ac <__gethex+0x34e>
 8016098:	f01a 0f02 	tst.w	sl, #2
 801609c:	d006      	beq.n	80160ac <__gethex+0x34e>
 801609e:	f8d9 3000 	ldr.w	r3, [r9]
 80160a2:	ea4a 0a03 	orr.w	sl, sl, r3
 80160a6:	f01a 0f01 	tst.w	sl, #1
 80160aa:	d10e      	bne.n	80160ca <__gethex+0x36c>
 80160ac:	f047 0710 	orr.w	r7, r7, #16
 80160b0:	e033      	b.n	801611a <__gethex+0x3bc>
 80160b2:	f04f 0a01 	mov.w	sl, #1
 80160b6:	e7d0      	b.n	801605a <__gethex+0x2fc>
 80160b8:	2701      	movs	r7, #1
 80160ba:	e7e2      	b.n	8016082 <__gethex+0x324>
 80160bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160be:	f1c3 0301 	rsb	r3, r3, #1
 80160c2:	9315      	str	r3, [sp, #84]	; 0x54
 80160c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d0f0      	beq.n	80160ac <__gethex+0x34e>
 80160ca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80160ce:	f105 0314 	add.w	r3, r5, #20
 80160d2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80160d6:	eb03 010a 	add.w	r1, r3, sl
 80160da:	f04f 0c00 	mov.w	ip, #0
 80160de:	4618      	mov	r0, r3
 80160e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80160e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80160e8:	d01c      	beq.n	8016124 <__gethex+0x3c6>
 80160ea:	3201      	adds	r2, #1
 80160ec:	6002      	str	r2, [r0, #0]
 80160ee:	2f02      	cmp	r7, #2
 80160f0:	f105 0314 	add.w	r3, r5, #20
 80160f4:	d138      	bne.n	8016168 <__gethex+0x40a>
 80160f6:	f8d8 2000 	ldr.w	r2, [r8]
 80160fa:	3a01      	subs	r2, #1
 80160fc:	42b2      	cmp	r2, r6
 80160fe:	d10a      	bne.n	8016116 <__gethex+0x3b8>
 8016100:	1171      	asrs	r1, r6, #5
 8016102:	2201      	movs	r2, #1
 8016104:	f006 061f 	and.w	r6, r6, #31
 8016108:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801610c:	fa02 f606 	lsl.w	r6, r2, r6
 8016110:	421e      	tst	r6, r3
 8016112:	bf18      	it	ne
 8016114:	4617      	movne	r7, r2
 8016116:	f047 0720 	orr.w	r7, r7, #32
 801611a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801611c:	601d      	str	r5, [r3, #0]
 801611e:	9b06      	ldr	r3, [sp, #24]
 8016120:	601c      	str	r4, [r3, #0]
 8016122:	e6a4      	b.n	8015e6e <__gethex+0x110>
 8016124:	4299      	cmp	r1, r3
 8016126:	f843 cc04 	str.w	ip, [r3, #-4]
 801612a:	d8d8      	bhi.n	80160de <__gethex+0x380>
 801612c:	68ab      	ldr	r3, [r5, #8]
 801612e:	4599      	cmp	r9, r3
 8016130:	db12      	blt.n	8016158 <__gethex+0x3fa>
 8016132:	6869      	ldr	r1, [r5, #4]
 8016134:	9802      	ldr	r0, [sp, #8]
 8016136:	3101      	adds	r1, #1
 8016138:	f000 f924 	bl	8016384 <_Balloc>
 801613c:	692a      	ldr	r2, [r5, #16]
 801613e:	3202      	adds	r2, #2
 8016140:	f105 010c 	add.w	r1, r5, #12
 8016144:	4683      	mov	fp, r0
 8016146:	0092      	lsls	r2, r2, #2
 8016148:	300c      	adds	r0, #12
 801614a:	f7fd f9c5 	bl	80134d8 <memcpy>
 801614e:	4629      	mov	r1, r5
 8016150:	9802      	ldr	r0, [sp, #8]
 8016152:	f000 f94b 	bl	80163ec <_Bfree>
 8016156:	465d      	mov	r5, fp
 8016158:	692b      	ldr	r3, [r5, #16]
 801615a:	1c5a      	adds	r2, r3, #1
 801615c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016160:	612a      	str	r2, [r5, #16]
 8016162:	2201      	movs	r2, #1
 8016164:	615a      	str	r2, [r3, #20]
 8016166:	e7c2      	b.n	80160ee <__gethex+0x390>
 8016168:	692a      	ldr	r2, [r5, #16]
 801616a:	454a      	cmp	r2, r9
 801616c:	dd0b      	ble.n	8016186 <__gethex+0x428>
 801616e:	2101      	movs	r1, #1
 8016170:	4628      	mov	r0, r5
 8016172:	f7ff fda5 	bl	8015cc0 <rshift>
 8016176:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801617a:	3401      	adds	r4, #1
 801617c:	42a3      	cmp	r3, r4
 801617e:	f6ff aed9 	blt.w	8015f34 <__gethex+0x1d6>
 8016182:	2701      	movs	r7, #1
 8016184:	e7c7      	b.n	8016116 <__gethex+0x3b8>
 8016186:	f016 061f 	ands.w	r6, r6, #31
 801618a:	d0fa      	beq.n	8016182 <__gethex+0x424>
 801618c:	449a      	add	sl, r3
 801618e:	f1c6 0620 	rsb	r6, r6, #32
 8016192:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016196:	f000 f9b9 	bl	801650c <__hi0bits>
 801619a:	42b0      	cmp	r0, r6
 801619c:	dbe7      	blt.n	801616e <__gethex+0x410>
 801619e:	e7f0      	b.n	8016182 <__gethex+0x424>

080161a0 <L_shift>:
 80161a0:	f1c2 0208 	rsb	r2, r2, #8
 80161a4:	0092      	lsls	r2, r2, #2
 80161a6:	b570      	push	{r4, r5, r6, lr}
 80161a8:	f1c2 0620 	rsb	r6, r2, #32
 80161ac:	6843      	ldr	r3, [r0, #4]
 80161ae:	6804      	ldr	r4, [r0, #0]
 80161b0:	fa03 f506 	lsl.w	r5, r3, r6
 80161b4:	432c      	orrs	r4, r5
 80161b6:	40d3      	lsrs	r3, r2
 80161b8:	6004      	str	r4, [r0, #0]
 80161ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80161be:	4288      	cmp	r0, r1
 80161c0:	d3f4      	bcc.n	80161ac <L_shift+0xc>
 80161c2:	bd70      	pop	{r4, r5, r6, pc}

080161c4 <__match>:
 80161c4:	b530      	push	{r4, r5, lr}
 80161c6:	6803      	ldr	r3, [r0, #0]
 80161c8:	3301      	adds	r3, #1
 80161ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161ce:	b914      	cbnz	r4, 80161d6 <__match+0x12>
 80161d0:	6003      	str	r3, [r0, #0]
 80161d2:	2001      	movs	r0, #1
 80161d4:	bd30      	pop	{r4, r5, pc}
 80161d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80161de:	2d19      	cmp	r5, #25
 80161e0:	bf98      	it	ls
 80161e2:	3220      	addls	r2, #32
 80161e4:	42a2      	cmp	r2, r4
 80161e6:	d0f0      	beq.n	80161ca <__match+0x6>
 80161e8:	2000      	movs	r0, #0
 80161ea:	e7f3      	b.n	80161d4 <__match+0x10>

080161ec <__hexnan>:
 80161ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161f0:	680b      	ldr	r3, [r1, #0]
 80161f2:	6801      	ldr	r1, [r0, #0]
 80161f4:	115f      	asrs	r7, r3, #5
 80161f6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80161fa:	f013 031f 	ands.w	r3, r3, #31
 80161fe:	b087      	sub	sp, #28
 8016200:	bf18      	it	ne
 8016202:	3704      	addne	r7, #4
 8016204:	2500      	movs	r5, #0
 8016206:	1f3e      	subs	r6, r7, #4
 8016208:	4682      	mov	sl, r0
 801620a:	4690      	mov	r8, r2
 801620c:	9301      	str	r3, [sp, #4]
 801620e:	f847 5c04 	str.w	r5, [r7, #-4]
 8016212:	46b1      	mov	r9, r6
 8016214:	4634      	mov	r4, r6
 8016216:	9502      	str	r5, [sp, #8]
 8016218:	46ab      	mov	fp, r5
 801621a:	784a      	ldrb	r2, [r1, #1]
 801621c:	1c4b      	adds	r3, r1, #1
 801621e:	9303      	str	r3, [sp, #12]
 8016220:	b342      	cbz	r2, 8016274 <__hexnan+0x88>
 8016222:	4610      	mov	r0, r2
 8016224:	9105      	str	r1, [sp, #20]
 8016226:	9204      	str	r2, [sp, #16]
 8016228:	f7ff fd84 	bl	8015d34 <__hexdig_fun>
 801622c:	2800      	cmp	r0, #0
 801622e:	d143      	bne.n	80162b8 <__hexnan+0xcc>
 8016230:	9a04      	ldr	r2, [sp, #16]
 8016232:	9905      	ldr	r1, [sp, #20]
 8016234:	2a20      	cmp	r2, #32
 8016236:	d818      	bhi.n	801626a <__hexnan+0x7e>
 8016238:	9b02      	ldr	r3, [sp, #8]
 801623a:	459b      	cmp	fp, r3
 801623c:	dd13      	ble.n	8016266 <__hexnan+0x7a>
 801623e:	454c      	cmp	r4, r9
 8016240:	d206      	bcs.n	8016250 <__hexnan+0x64>
 8016242:	2d07      	cmp	r5, #7
 8016244:	dc04      	bgt.n	8016250 <__hexnan+0x64>
 8016246:	462a      	mov	r2, r5
 8016248:	4649      	mov	r1, r9
 801624a:	4620      	mov	r0, r4
 801624c:	f7ff ffa8 	bl	80161a0 <L_shift>
 8016250:	4544      	cmp	r4, r8
 8016252:	d944      	bls.n	80162de <__hexnan+0xf2>
 8016254:	2300      	movs	r3, #0
 8016256:	f1a4 0904 	sub.w	r9, r4, #4
 801625a:	f844 3c04 	str.w	r3, [r4, #-4]
 801625e:	f8cd b008 	str.w	fp, [sp, #8]
 8016262:	464c      	mov	r4, r9
 8016264:	461d      	mov	r5, r3
 8016266:	9903      	ldr	r1, [sp, #12]
 8016268:	e7d7      	b.n	801621a <__hexnan+0x2e>
 801626a:	2a29      	cmp	r2, #41	; 0x29
 801626c:	d14a      	bne.n	8016304 <__hexnan+0x118>
 801626e:	3102      	adds	r1, #2
 8016270:	f8ca 1000 	str.w	r1, [sl]
 8016274:	f1bb 0f00 	cmp.w	fp, #0
 8016278:	d044      	beq.n	8016304 <__hexnan+0x118>
 801627a:	454c      	cmp	r4, r9
 801627c:	d206      	bcs.n	801628c <__hexnan+0xa0>
 801627e:	2d07      	cmp	r5, #7
 8016280:	dc04      	bgt.n	801628c <__hexnan+0xa0>
 8016282:	462a      	mov	r2, r5
 8016284:	4649      	mov	r1, r9
 8016286:	4620      	mov	r0, r4
 8016288:	f7ff ff8a 	bl	80161a0 <L_shift>
 801628c:	4544      	cmp	r4, r8
 801628e:	d928      	bls.n	80162e2 <__hexnan+0xf6>
 8016290:	4643      	mov	r3, r8
 8016292:	f854 2b04 	ldr.w	r2, [r4], #4
 8016296:	f843 2b04 	str.w	r2, [r3], #4
 801629a:	42a6      	cmp	r6, r4
 801629c:	d2f9      	bcs.n	8016292 <__hexnan+0xa6>
 801629e:	2200      	movs	r2, #0
 80162a0:	f843 2b04 	str.w	r2, [r3], #4
 80162a4:	429e      	cmp	r6, r3
 80162a6:	d2fb      	bcs.n	80162a0 <__hexnan+0xb4>
 80162a8:	6833      	ldr	r3, [r6, #0]
 80162aa:	b91b      	cbnz	r3, 80162b4 <__hexnan+0xc8>
 80162ac:	4546      	cmp	r6, r8
 80162ae:	d127      	bne.n	8016300 <__hexnan+0x114>
 80162b0:	2301      	movs	r3, #1
 80162b2:	6033      	str	r3, [r6, #0]
 80162b4:	2005      	movs	r0, #5
 80162b6:	e026      	b.n	8016306 <__hexnan+0x11a>
 80162b8:	3501      	adds	r5, #1
 80162ba:	2d08      	cmp	r5, #8
 80162bc:	f10b 0b01 	add.w	fp, fp, #1
 80162c0:	dd06      	ble.n	80162d0 <__hexnan+0xe4>
 80162c2:	4544      	cmp	r4, r8
 80162c4:	d9cf      	bls.n	8016266 <__hexnan+0x7a>
 80162c6:	2300      	movs	r3, #0
 80162c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80162cc:	2501      	movs	r5, #1
 80162ce:	3c04      	subs	r4, #4
 80162d0:	6822      	ldr	r2, [r4, #0]
 80162d2:	f000 000f 	and.w	r0, r0, #15
 80162d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80162da:	6020      	str	r0, [r4, #0]
 80162dc:	e7c3      	b.n	8016266 <__hexnan+0x7a>
 80162de:	2508      	movs	r5, #8
 80162e0:	e7c1      	b.n	8016266 <__hexnan+0x7a>
 80162e2:	9b01      	ldr	r3, [sp, #4]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d0df      	beq.n	80162a8 <__hexnan+0xbc>
 80162e8:	f04f 32ff 	mov.w	r2, #4294967295
 80162ec:	f1c3 0320 	rsb	r3, r3, #32
 80162f0:	fa22 f303 	lsr.w	r3, r2, r3
 80162f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80162f8:	401a      	ands	r2, r3
 80162fa:	f847 2c04 	str.w	r2, [r7, #-4]
 80162fe:	e7d3      	b.n	80162a8 <__hexnan+0xbc>
 8016300:	3e04      	subs	r6, #4
 8016302:	e7d1      	b.n	80162a8 <__hexnan+0xbc>
 8016304:	2004      	movs	r0, #4
 8016306:	b007      	add	sp, #28
 8016308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801630c <__locale_ctype_ptr_l>:
 801630c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016310:	4770      	bx	lr
	...

08016314 <__locale_ctype_ptr>:
 8016314:	4b04      	ldr	r3, [pc, #16]	; (8016328 <__locale_ctype_ptr+0x14>)
 8016316:	4a05      	ldr	r2, [pc, #20]	; (801632c <__locale_ctype_ptr+0x18>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	6a1b      	ldr	r3, [r3, #32]
 801631c:	2b00      	cmp	r3, #0
 801631e:	bf08      	it	eq
 8016320:	4613      	moveq	r3, r2
 8016322:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016326:	4770      	bx	lr
 8016328:	2000000c 	.word	0x2000000c
 801632c:	20000070 	.word	0x20000070

08016330 <__localeconv_l>:
 8016330:	30f0      	adds	r0, #240	; 0xf0
 8016332:	4770      	bx	lr

08016334 <_localeconv_r>:
 8016334:	4b04      	ldr	r3, [pc, #16]	; (8016348 <_localeconv_r+0x14>)
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	6a18      	ldr	r0, [r3, #32]
 801633a:	4b04      	ldr	r3, [pc, #16]	; (801634c <_localeconv_r+0x18>)
 801633c:	2800      	cmp	r0, #0
 801633e:	bf08      	it	eq
 8016340:	4618      	moveq	r0, r3
 8016342:	30f0      	adds	r0, #240	; 0xf0
 8016344:	4770      	bx	lr
 8016346:	bf00      	nop
 8016348:	2000000c 	.word	0x2000000c
 801634c:	20000070 	.word	0x20000070

08016350 <malloc>:
 8016350:	4b02      	ldr	r3, [pc, #8]	; (801635c <malloc+0xc>)
 8016352:	4601      	mov	r1, r0
 8016354:	6818      	ldr	r0, [r3, #0]
 8016356:	f000 bc71 	b.w	8016c3c <_malloc_r>
 801635a:	bf00      	nop
 801635c:	2000000c 	.word	0x2000000c

08016360 <__ascii_mbtowc>:
 8016360:	b082      	sub	sp, #8
 8016362:	b901      	cbnz	r1, 8016366 <__ascii_mbtowc+0x6>
 8016364:	a901      	add	r1, sp, #4
 8016366:	b142      	cbz	r2, 801637a <__ascii_mbtowc+0x1a>
 8016368:	b14b      	cbz	r3, 801637e <__ascii_mbtowc+0x1e>
 801636a:	7813      	ldrb	r3, [r2, #0]
 801636c:	600b      	str	r3, [r1, #0]
 801636e:	7812      	ldrb	r2, [r2, #0]
 8016370:	1c10      	adds	r0, r2, #0
 8016372:	bf18      	it	ne
 8016374:	2001      	movne	r0, #1
 8016376:	b002      	add	sp, #8
 8016378:	4770      	bx	lr
 801637a:	4610      	mov	r0, r2
 801637c:	e7fb      	b.n	8016376 <__ascii_mbtowc+0x16>
 801637e:	f06f 0001 	mvn.w	r0, #1
 8016382:	e7f8      	b.n	8016376 <__ascii_mbtowc+0x16>

08016384 <_Balloc>:
 8016384:	b570      	push	{r4, r5, r6, lr}
 8016386:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016388:	4604      	mov	r4, r0
 801638a:	460e      	mov	r6, r1
 801638c:	b93d      	cbnz	r5, 801639e <_Balloc+0x1a>
 801638e:	2010      	movs	r0, #16
 8016390:	f7ff ffde 	bl	8016350 <malloc>
 8016394:	6260      	str	r0, [r4, #36]	; 0x24
 8016396:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801639a:	6005      	str	r5, [r0, #0]
 801639c:	60c5      	str	r5, [r0, #12]
 801639e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80163a0:	68eb      	ldr	r3, [r5, #12]
 80163a2:	b183      	cbz	r3, 80163c6 <_Balloc+0x42>
 80163a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80163a6:	68db      	ldr	r3, [r3, #12]
 80163a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80163ac:	b9b8      	cbnz	r0, 80163de <_Balloc+0x5a>
 80163ae:	2101      	movs	r1, #1
 80163b0:	fa01 f506 	lsl.w	r5, r1, r6
 80163b4:	1d6a      	adds	r2, r5, #5
 80163b6:	0092      	lsls	r2, r2, #2
 80163b8:	4620      	mov	r0, r4
 80163ba:	f000 fbe2 	bl	8016b82 <_calloc_r>
 80163be:	b160      	cbz	r0, 80163da <_Balloc+0x56>
 80163c0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80163c4:	e00e      	b.n	80163e4 <_Balloc+0x60>
 80163c6:	2221      	movs	r2, #33	; 0x21
 80163c8:	2104      	movs	r1, #4
 80163ca:	4620      	mov	r0, r4
 80163cc:	f000 fbd9 	bl	8016b82 <_calloc_r>
 80163d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80163d2:	60e8      	str	r0, [r5, #12]
 80163d4:	68db      	ldr	r3, [r3, #12]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d1e4      	bne.n	80163a4 <_Balloc+0x20>
 80163da:	2000      	movs	r0, #0
 80163dc:	bd70      	pop	{r4, r5, r6, pc}
 80163de:	6802      	ldr	r2, [r0, #0]
 80163e0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80163e4:	2300      	movs	r3, #0
 80163e6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80163ea:	e7f7      	b.n	80163dc <_Balloc+0x58>

080163ec <_Bfree>:
 80163ec:	b570      	push	{r4, r5, r6, lr}
 80163ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80163f0:	4606      	mov	r6, r0
 80163f2:	460d      	mov	r5, r1
 80163f4:	b93c      	cbnz	r4, 8016406 <_Bfree+0x1a>
 80163f6:	2010      	movs	r0, #16
 80163f8:	f7ff ffaa 	bl	8016350 <malloc>
 80163fc:	6270      	str	r0, [r6, #36]	; 0x24
 80163fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016402:	6004      	str	r4, [r0, #0]
 8016404:	60c4      	str	r4, [r0, #12]
 8016406:	b13d      	cbz	r5, 8016418 <_Bfree+0x2c>
 8016408:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801640a:	686a      	ldr	r2, [r5, #4]
 801640c:	68db      	ldr	r3, [r3, #12]
 801640e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016412:	6029      	str	r1, [r5, #0]
 8016414:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016418:	bd70      	pop	{r4, r5, r6, pc}

0801641a <__multadd>:
 801641a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801641e:	690d      	ldr	r5, [r1, #16]
 8016420:	461f      	mov	r7, r3
 8016422:	4606      	mov	r6, r0
 8016424:	460c      	mov	r4, r1
 8016426:	f101 0c14 	add.w	ip, r1, #20
 801642a:	2300      	movs	r3, #0
 801642c:	f8dc 0000 	ldr.w	r0, [ip]
 8016430:	b281      	uxth	r1, r0
 8016432:	fb02 7101 	mla	r1, r2, r1, r7
 8016436:	0c0f      	lsrs	r7, r1, #16
 8016438:	0c00      	lsrs	r0, r0, #16
 801643a:	fb02 7000 	mla	r0, r2, r0, r7
 801643e:	b289      	uxth	r1, r1
 8016440:	3301      	adds	r3, #1
 8016442:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016446:	429d      	cmp	r5, r3
 8016448:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801644c:	f84c 1b04 	str.w	r1, [ip], #4
 8016450:	dcec      	bgt.n	801642c <__multadd+0x12>
 8016452:	b1d7      	cbz	r7, 801648a <__multadd+0x70>
 8016454:	68a3      	ldr	r3, [r4, #8]
 8016456:	42ab      	cmp	r3, r5
 8016458:	dc12      	bgt.n	8016480 <__multadd+0x66>
 801645a:	6861      	ldr	r1, [r4, #4]
 801645c:	4630      	mov	r0, r6
 801645e:	3101      	adds	r1, #1
 8016460:	f7ff ff90 	bl	8016384 <_Balloc>
 8016464:	6922      	ldr	r2, [r4, #16]
 8016466:	3202      	adds	r2, #2
 8016468:	f104 010c 	add.w	r1, r4, #12
 801646c:	4680      	mov	r8, r0
 801646e:	0092      	lsls	r2, r2, #2
 8016470:	300c      	adds	r0, #12
 8016472:	f7fd f831 	bl	80134d8 <memcpy>
 8016476:	4621      	mov	r1, r4
 8016478:	4630      	mov	r0, r6
 801647a:	f7ff ffb7 	bl	80163ec <_Bfree>
 801647e:	4644      	mov	r4, r8
 8016480:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016484:	3501      	adds	r5, #1
 8016486:	615f      	str	r7, [r3, #20]
 8016488:	6125      	str	r5, [r4, #16]
 801648a:	4620      	mov	r0, r4
 801648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016490 <__s2b>:
 8016490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016494:	460c      	mov	r4, r1
 8016496:	4615      	mov	r5, r2
 8016498:	461f      	mov	r7, r3
 801649a:	2209      	movs	r2, #9
 801649c:	3308      	adds	r3, #8
 801649e:	4606      	mov	r6, r0
 80164a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80164a4:	2100      	movs	r1, #0
 80164a6:	2201      	movs	r2, #1
 80164a8:	429a      	cmp	r2, r3
 80164aa:	db20      	blt.n	80164ee <__s2b+0x5e>
 80164ac:	4630      	mov	r0, r6
 80164ae:	f7ff ff69 	bl	8016384 <_Balloc>
 80164b2:	9b08      	ldr	r3, [sp, #32]
 80164b4:	6143      	str	r3, [r0, #20]
 80164b6:	2d09      	cmp	r5, #9
 80164b8:	f04f 0301 	mov.w	r3, #1
 80164bc:	6103      	str	r3, [r0, #16]
 80164be:	dd19      	ble.n	80164f4 <__s2b+0x64>
 80164c0:	f104 0809 	add.w	r8, r4, #9
 80164c4:	46c1      	mov	r9, r8
 80164c6:	442c      	add	r4, r5
 80164c8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80164cc:	4601      	mov	r1, r0
 80164ce:	3b30      	subs	r3, #48	; 0x30
 80164d0:	220a      	movs	r2, #10
 80164d2:	4630      	mov	r0, r6
 80164d4:	f7ff ffa1 	bl	801641a <__multadd>
 80164d8:	45a1      	cmp	r9, r4
 80164da:	d1f5      	bne.n	80164c8 <__s2b+0x38>
 80164dc:	eb08 0405 	add.w	r4, r8, r5
 80164e0:	3c08      	subs	r4, #8
 80164e2:	1b2d      	subs	r5, r5, r4
 80164e4:	1963      	adds	r3, r4, r5
 80164e6:	42bb      	cmp	r3, r7
 80164e8:	db07      	blt.n	80164fa <__s2b+0x6a>
 80164ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164ee:	0052      	lsls	r2, r2, #1
 80164f0:	3101      	adds	r1, #1
 80164f2:	e7d9      	b.n	80164a8 <__s2b+0x18>
 80164f4:	340a      	adds	r4, #10
 80164f6:	2509      	movs	r5, #9
 80164f8:	e7f3      	b.n	80164e2 <__s2b+0x52>
 80164fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80164fe:	4601      	mov	r1, r0
 8016500:	3b30      	subs	r3, #48	; 0x30
 8016502:	220a      	movs	r2, #10
 8016504:	4630      	mov	r0, r6
 8016506:	f7ff ff88 	bl	801641a <__multadd>
 801650a:	e7eb      	b.n	80164e4 <__s2b+0x54>

0801650c <__hi0bits>:
 801650c:	0c02      	lsrs	r2, r0, #16
 801650e:	0412      	lsls	r2, r2, #16
 8016510:	4603      	mov	r3, r0
 8016512:	b9b2      	cbnz	r2, 8016542 <__hi0bits+0x36>
 8016514:	0403      	lsls	r3, r0, #16
 8016516:	2010      	movs	r0, #16
 8016518:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801651c:	bf04      	itt	eq
 801651e:	021b      	lsleq	r3, r3, #8
 8016520:	3008      	addeq	r0, #8
 8016522:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016526:	bf04      	itt	eq
 8016528:	011b      	lsleq	r3, r3, #4
 801652a:	3004      	addeq	r0, #4
 801652c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016530:	bf04      	itt	eq
 8016532:	009b      	lsleq	r3, r3, #2
 8016534:	3002      	addeq	r0, #2
 8016536:	2b00      	cmp	r3, #0
 8016538:	db06      	blt.n	8016548 <__hi0bits+0x3c>
 801653a:	005b      	lsls	r3, r3, #1
 801653c:	d503      	bpl.n	8016546 <__hi0bits+0x3a>
 801653e:	3001      	adds	r0, #1
 8016540:	4770      	bx	lr
 8016542:	2000      	movs	r0, #0
 8016544:	e7e8      	b.n	8016518 <__hi0bits+0xc>
 8016546:	2020      	movs	r0, #32
 8016548:	4770      	bx	lr

0801654a <__lo0bits>:
 801654a:	6803      	ldr	r3, [r0, #0]
 801654c:	f013 0207 	ands.w	r2, r3, #7
 8016550:	4601      	mov	r1, r0
 8016552:	d00b      	beq.n	801656c <__lo0bits+0x22>
 8016554:	07da      	lsls	r2, r3, #31
 8016556:	d423      	bmi.n	80165a0 <__lo0bits+0x56>
 8016558:	0798      	lsls	r0, r3, #30
 801655a:	bf49      	itett	mi
 801655c:	085b      	lsrmi	r3, r3, #1
 801655e:	089b      	lsrpl	r3, r3, #2
 8016560:	2001      	movmi	r0, #1
 8016562:	600b      	strmi	r3, [r1, #0]
 8016564:	bf5c      	itt	pl
 8016566:	600b      	strpl	r3, [r1, #0]
 8016568:	2002      	movpl	r0, #2
 801656a:	4770      	bx	lr
 801656c:	b298      	uxth	r0, r3
 801656e:	b9a8      	cbnz	r0, 801659c <__lo0bits+0x52>
 8016570:	0c1b      	lsrs	r3, r3, #16
 8016572:	2010      	movs	r0, #16
 8016574:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016578:	bf04      	itt	eq
 801657a:	0a1b      	lsreq	r3, r3, #8
 801657c:	3008      	addeq	r0, #8
 801657e:	071a      	lsls	r2, r3, #28
 8016580:	bf04      	itt	eq
 8016582:	091b      	lsreq	r3, r3, #4
 8016584:	3004      	addeq	r0, #4
 8016586:	079a      	lsls	r2, r3, #30
 8016588:	bf04      	itt	eq
 801658a:	089b      	lsreq	r3, r3, #2
 801658c:	3002      	addeq	r0, #2
 801658e:	07da      	lsls	r2, r3, #31
 8016590:	d402      	bmi.n	8016598 <__lo0bits+0x4e>
 8016592:	085b      	lsrs	r3, r3, #1
 8016594:	d006      	beq.n	80165a4 <__lo0bits+0x5a>
 8016596:	3001      	adds	r0, #1
 8016598:	600b      	str	r3, [r1, #0]
 801659a:	4770      	bx	lr
 801659c:	4610      	mov	r0, r2
 801659e:	e7e9      	b.n	8016574 <__lo0bits+0x2a>
 80165a0:	2000      	movs	r0, #0
 80165a2:	4770      	bx	lr
 80165a4:	2020      	movs	r0, #32
 80165a6:	4770      	bx	lr

080165a8 <__i2b>:
 80165a8:	b510      	push	{r4, lr}
 80165aa:	460c      	mov	r4, r1
 80165ac:	2101      	movs	r1, #1
 80165ae:	f7ff fee9 	bl	8016384 <_Balloc>
 80165b2:	2201      	movs	r2, #1
 80165b4:	6144      	str	r4, [r0, #20]
 80165b6:	6102      	str	r2, [r0, #16]
 80165b8:	bd10      	pop	{r4, pc}

080165ba <__multiply>:
 80165ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165be:	4614      	mov	r4, r2
 80165c0:	690a      	ldr	r2, [r1, #16]
 80165c2:	6923      	ldr	r3, [r4, #16]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	bfb8      	it	lt
 80165c8:	460b      	movlt	r3, r1
 80165ca:	4688      	mov	r8, r1
 80165cc:	bfbc      	itt	lt
 80165ce:	46a0      	movlt	r8, r4
 80165d0:	461c      	movlt	r4, r3
 80165d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80165d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80165da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80165de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80165e2:	eb07 0609 	add.w	r6, r7, r9
 80165e6:	42b3      	cmp	r3, r6
 80165e8:	bfb8      	it	lt
 80165ea:	3101      	addlt	r1, #1
 80165ec:	f7ff feca 	bl	8016384 <_Balloc>
 80165f0:	f100 0514 	add.w	r5, r0, #20
 80165f4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80165f8:	462b      	mov	r3, r5
 80165fa:	2200      	movs	r2, #0
 80165fc:	4573      	cmp	r3, lr
 80165fe:	d316      	bcc.n	801662e <__multiply+0x74>
 8016600:	f104 0214 	add.w	r2, r4, #20
 8016604:	f108 0114 	add.w	r1, r8, #20
 8016608:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801660c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016610:	9300      	str	r3, [sp, #0]
 8016612:	9b00      	ldr	r3, [sp, #0]
 8016614:	9201      	str	r2, [sp, #4]
 8016616:	4293      	cmp	r3, r2
 8016618:	d80c      	bhi.n	8016634 <__multiply+0x7a>
 801661a:	2e00      	cmp	r6, #0
 801661c:	dd03      	ble.n	8016626 <__multiply+0x6c>
 801661e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016622:	2b00      	cmp	r3, #0
 8016624:	d05d      	beq.n	80166e2 <__multiply+0x128>
 8016626:	6106      	str	r6, [r0, #16]
 8016628:	b003      	add	sp, #12
 801662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801662e:	f843 2b04 	str.w	r2, [r3], #4
 8016632:	e7e3      	b.n	80165fc <__multiply+0x42>
 8016634:	f8b2 b000 	ldrh.w	fp, [r2]
 8016638:	f1bb 0f00 	cmp.w	fp, #0
 801663c:	d023      	beq.n	8016686 <__multiply+0xcc>
 801663e:	4689      	mov	r9, r1
 8016640:	46ac      	mov	ip, r5
 8016642:	f04f 0800 	mov.w	r8, #0
 8016646:	f859 4b04 	ldr.w	r4, [r9], #4
 801664a:	f8dc a000 	ldr.w	sl, [ip]
 801664e:	b2a3      	uxth	r3, r4
 8016650:	fa1f fa8a 	uxth.w	sl, sl
 8016654:	fb0b a303 	mla	r3, fp, r3, sl
 8016658:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801665c:	f8dc 4000 	ldr.w	r4, [ip]
 8016660:	4443      	add	r3, r8
 8016662:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016666:	fb0b 840a 	mla	r4, fp, sl, r8
 801666a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801666e:	46e2      	mov	sl, ip
 8016670:	b29b      	uxth	r3, r3
 8016672:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016676:	454f      	cmp	r7, r9
 8016678:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801667c:	f84a 3b04 	str.w	r3, [sl], #4
 8016680:	d82b      	bhi.n	80166da <__multiply+0x120>
 8016682:	f8cc 8004 	str.w	r8, [ip, #4]
 8016686:	9b01      	ldr	r3, [sp, #4]
 8016688:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801668c:	3204      	adds	r2, #4
 801668e:	f1ba 0f00 	cmp.w	sl, #0
 8016692:	d020      	beq.n	80166d6 <__multiply+0x11c>
 8016694:	682b      	ldr	r3, [r5, #0]
 8016696:	4689      	mov	r9, r1
 8016698:	46a8      	mov	r8, r5
 801669a:	f04f 0b00 	mov.w	fp, #0
 801669e:	f8b9 c000 	ldrh.w	ip, [r9]
 80166a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80166a6:	fb0a 440c 	mla	r4, sl, ip, r4
 80166aa:	445c      	add	r4, fp
 80166ac:	46c4      	mov	ip, r8
 80166ae:	b29b      	uxth	r3, r3
 80166b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80166b4:	f84c 3b04 	str.w	r3, [ip], #4
 80166b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80166bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80166c0:	0c1b      	lsrs	r3, r3, #16
 80166c2:	fb0a b303 	mla	r3, sl, r3, fp
 80166c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80166ca:	454f      	cmp	r7, r9
 80166cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80166d0:	d805      	bhi.n	80166de <__multiply+0x124>
 80166d2:	f8c8 3004 	str.w	r3, [r8, #4]
 80166d6:	3504      	adds	r5, #4
 80166d8:	e79b      	b.n	8016612 <__multiply+0x58>
 80166da:	46d4      	mov	ip, sl
 80166dc:	e7b3      	b.n	8016646 <__multiply+0x8c>
 80166de:	46e0      	mov	r8, ip
 80166e0:	e7dd      	b.n	801669e <__multiply+0xe4>
 80166e2:	3e01      	subs	r6, #1
 80166e4:	e799      	b.n	801661a <__multiply+0x60>
	...

080166e8 <__pow5mult>:
 80166e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166ec:	4615      	mov	r5, r2
 80166ee:	f012 0203 	ands.w	r2, r2, #3
 80166f2:	4606      	mov	r6, r0
 80166f4:	460f      	mov	r7, r1
 80166f6:	d007      	beq.n	8016708 <__pow5mult+0x20>
 80166f8:	3a01      	subs	r2, #1
 80166fa:	4c21      	ldr	r4, [pc, #132]	; (8016780 <__pow5mult+0x98>)
 80166fc:	2300      	movs	r3, #0
 80166fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016702:	f7ff fe8a 	bl	801641a <__multadd>
 8016706:	4607      	mov	r7, r0
 8016708:	10ad      	asrs	r5, r5, #2
 801670a:	d035      	beq.n	8016778 <__pow5mult+0x90>
 801670c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801670e:	b93c      	cbnz	r4, 8016720 <__pow5mult+0x38>
 8016710:	2010      	movs	r0, #16
 8016712:	f7ff fe1d 	bl	8016350 <malloc>
 8016716:	6270      	str	r0, [r6, #36]	; 0x24
 8016718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801671c:	6004      	str	r4, [r0, #0]
 801671e:	60c4      	str	r4, [r0, #12]
 8016720:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016728:	b94c      	cbnz	r4, 801673e <__pow5mult+0x56>
 801672a:	f240 2171 	movw	r1, #625	; 0x271
 801672e:	4630      	mov	r0, r6
 8016730:	f7ff ff3a 	bl	80165a8 <__i2b>
 8016734:	2300      	movs	r3, #0
 8016736:	f8c8 0008 	str.w	r0, [r8, #8]
 801673a:	4604      	mov	r4, r0
 801673c:	6003      	str	r3, [r0, #0]
 801673e:	f04f 0800 	mov.w	r8, #0
 8016742:	07eb      	lsls	r3, r5, #31
 8016744:	d50a      	bpl.n	801675c <__pow5mult+0x74>
 8016746:	4639      	mov	r1, r7
 8016748:	4622      	mov	r2, r4
 801674a:	4630      	mov	r0, r6
 801674c:	f7ff ff35 	bl	80165ba <__multiply>
 8016750:	4639      	mov	r1, r7
 8016752:	4681      	mov	r9, r0
 8016754:	4630      	mov	r0, r6
 8016756:	f7ff fe49 	bl	80163ec <_Bfree>
 801675a:	464f      	mov	r7, r9
 801675c:	106d      	asrs	r5, r5, #1
 801675e:	d00b      	beq.n	8016778 <__pow5mult+0x90>
 8016760:	6820      	ldr	r0, [r4, #0]
 8016762:	b938      	cbnz	r0, 8016774 <__pow5mult+0x8c>
 8016764:	4622      	mov	r2, r4
 8016766:	4621      	mov	r1, r4
 8016768:	4630      	mov	r0, r6
 801676a:	f7ff ff26 	bl	80165ba <__multiply>
 801676e:	6020      	str	r0, [r4, #0]
 8016770:	f8c0 8000 	str.w	r8, [r0]
 8016774:	4604      	mov	r4, r0
 8016776:	e7e4      	b.n	8016742 <__pow5mult+0x5a>
 8016778:	4638      	mov	r0, r7
 801677a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801677e:	bf00      	nop
 8016780:	08018238 	.word	0x08018238

08016784 <__lshift>:
 8016784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016788:	460c      	mov	r4, r1
 801678a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801678e:	6923      	ldr	r3, [r4, #16]
 8016790:	6849      	ldr	r1, [r1, #4]
 8016792:	eb0a 0903 	add.w	r9, sl, r3
 8016796:	68a3      	ldr	r3, [r4, #8]
 8016798:	4607      	mov	r7, r0
 801679a:	4616      	mov	r6, r2
 801679c:	f109 0501 	add.w	r5, r9, #1
 80167a0:	42ab      	cmp	r3, r5
 80167a2:	db32      	blt.n	801680a <__lshift+0x86>
 80167a4:	4638      	mov	r0, r7
 80167a6:	f7ff fded 	bl	8016384 <_Balloc>
 80167aa:	2300      	movs	r3, #0
 80167ac:	4680      	mov	r8, r0
 80167ae:	f100 0114 	add.w	r1, r0, #20
 80167b2:	461a      	mov	r2, r3
 80167b4:	4553      	cmp	r3, sl
 80167b6:	db2b      	blt.n	8016810 <__lshift+0x8c>
 80167b8:	6920      	ldr	r0, [r4, #16]
 80167ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80167be:	f104 0314 	add.w	r3, r4, #20
 80167c2:	f016 021f 	ands.w	r2, r6, #31
 80167c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80167ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80167ce:	d025      	beq.n	801681c <__lshift+0x98>
 80167d0:	f1c2 0e20 	rsb	lr, r2, #32
 80167d4:	2000      	movs	r0, #0
 80167d6:	681e      	ldr	r6, [r3, #0]
 80167d8:	468a      	mov	sl, r1
 80167da:	4096      	lsls	r6, r2
 80167dc:	4330      	orrs	r0, r6
 80167de:	f84a 0b04 	str.w	r0, [sl], #4
 80167e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80167e6:	459c      	cmp	ip, r3
 80167e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80167ec:	d814      	bhi.n	8016818 <__lshift+0x94>
 80167ee:	6048      	str	r0, [r1, #4]
 80167f0:	b108      	cbz	r0, 80167f6 <__lshift+0x72>
 80167f2:	f109 0502 	add.w	r5, r9, #2
 80167f6:	3d01      	subs	r5, #1
 80167f8:	4638      	mov	r0, r7
 80167fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80167fe:	4621      	mov	r1, r4
 8016800:	f7ff fdf4 	bl	80163ec <_Bfree>
 8016804:	4640      	mov	r0, r8
 8016806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801680a:	3101      	adds	r1, #1
 801680c:	005b      	lsls	r3, r3, #1
 801680e:	e7c7      	b.n	80167a0 <__lshift+0x1c>
 8016810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016814:	3301      	adds	r3, #1
 8016816:	e7cd      	b.n	80167b4 <__lshift+0x30>
 8016818:	4651      	mov	r1, sl
 801681a:	e7dc      	b.n	80167d6 <__lshift+0x52>
 801681c:	3904      	subs	r1, #4
 801681e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016822:	f841 2f04 	str.w	r2, [r1, #4]!
 8016826:	459c      	cmp	ip, r3
 8016828:	d8f9      	bhi.n	801681e <__lshift+0x9a>
 801682a:	e7e4      	b.n	80167f6 <__lshift+0x72>

0801682c <__mcmp>:
 801682c:	6903      	ldr	r3, [r0, #16]
 801682e:	690a      	ldr	r2, [r1, #16]
 8016830:	1a9b      	subs	r3, r3, r2
 8016832:	b530      	push	{r4, r5, lr}
 8016834:	d10c      	bne.n	8016850 <__mcmp+0x24>
 8016836:	0092      	lsls	r2, r2, #2
 8016838:	3014      	adds	r0, #20
 801683a:	3114      	adds	r1, #20
 801683c:	1884      	adds	r4, r0, r2
 801683e:	4411      	add	r1, r2
 8016840:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016844:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016848:	4295      	cmp	r5, r2
 801684a:	d003      	beq.n	8016854 <__mcmp+0x28>
 801684c:	d305      	bcc.n	801685a <__mcmp+0x2e>
 801684e:	2301      	movs	r3, #1
 8016850:	4618      	mov	r0, r3
 8016852:	bd30      	pop	{r4, r5, pc}
 8016854:	42a0      	cmp	r0, r4
 8016856:	d3f3      	bcc.n	8016840 <__mcmp+0x14>
 8016858:	e7fa      	b.n	8016850 <__mcmp+0x24>
 801685a:	f04f 33ff 	mov.w	r3, #4294967295
 801685e:	e7f7      	b.n	8016850 <__mcmp+0x24>

08016860 <__mdiff>:
 8016860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016864:	460d      	mov	r5, r1
 8016866:	4607      	mov	r7, r0
 8016868:	4611      	mov	r1, r2
 801686a:	4628      	mov	r0, r5
 801686c:	4614      	mov	r4, r2
 801686e:	f7ff ffdd 	bl	801682c <__mcmp>
 8016872:	1e06      	subs	r6, r0, #0
 8016874:	d108      	bne.n	8016888 <__mdiff+0x28>
 8016876:	4631      	mov	r1, r6
 8016878:	4638      	mov	r0, r7
 801687a:	f7ff fd83 	bl	8016384 <_Balloc>
 801687e:	2301      	movs	r3, #1
 8016880:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016888:	bfa4      	itt	ge
 801688a:	4623      	movge	r3, r4
 801688c:	462c      	movge	r4, r5
 801688e:	4638      	mov	r0, r7
 8016890:	6861      	ldr	r1, [r4, #4]
 8016892:	bfa6      	itte	ge
 8016894:	461d      	movge	r5, r3
 8016896:	2600      	movge	r6, #0
 8016898:	2601      	movlt	r6, #1
 801689a:	f7ff fd73 	bl	8016384 <_Balloc>
 801689e:	692b      	ldr	r3, [r5, #16]
 80168a0:	60c6      	str	r6, [r0, #12]
 80168a2:	6926      	ldr	r6, [r4, #16]
 80168a4:	f105 0914 	add.w	r9, r5, #20
 80168a8:	f104 0214 	add.w	r2, r4, #20
 80168ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80168b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80168b4:	f100 0514 	add.w	r5, r0, #20
 80168b8:	f04f 0e00 	mov.w	lr, #0
 80168bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80168c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80168c4:	fa1e f18a 	uxtah	r1, lr, sl
 80168c8:	b2a3      	uxth	r3, r4
 80168ca:	1ac9      	subs	r1, r1, r3
 80168cc:	0c23      	lsrs	r3, r4, #16
 80168ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80168d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80168d6:	b289      	uxth	r1, r1
 80168d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80168dc:	45c8      	cmp	r8, r9
 80168de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80168e2:	4694      	mov	ip, r2
 80168e4:	f845 3b04 	str.w	r3, [r5], #4
 80168e8:	d8e8      	bhi.n	80168bc <__mdiff+0x5c>
 80168ea:	45bc      	cmp	ip, r7
 80168ec:	d304      	bcc.n	80168f8 <__mdiff+0x98>
 80168ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80168f2:	b183      	cbz	r3, 8016916 <__mdiff+0xb6>
 80168f4:	6106      	str	r6, [r0, #16]
 80168f6:	e7c5      	b.n	8016884 <__mdiff+0x24>
 80168f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80168fc:	fa1e f381 	uxtah	r3, lr, r1
 8016900:	141a      	asrs	r2, r3, #16
 8016902:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016906:	b29b      	uxth	r3, r3
 8016908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801690c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016910:	f845 3b04 	str.w	r3, [r5], #4
 8016914:	e7e9      	b.n	80168ea <__mdiff+0x8a>
 8016916:	3e01      	subs	r6, #1
 8016918:	e7e9      	b.n	80168ee <__mdiff+0x8e>
	...

0801691c <__ulp>:
 801691c:	4b12      	ldr	r3, [pc, #72]	; (8016968 <__ulp+0x4c>)
 801691e:	ee10 2a90 	vmov	r2, s1
 8016922:	401a      	ands	r2, r3
 8016924:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016928:	2b00      	cmp	r3, #0
 801692a:	dd04      	ble.n	8016936 <__ulp+0x1a>
 801692c:	2000      	movs	r0, #0
 801692e:	4619      	mov	r1, r3
 8016930:	ec41 0b10 	vmov	d0, r0, r1
 8016934:	4770      	bx	lr
 8016936:	425b      	negs	r3, r3
 8016938:	151b      	asrs	r3, r3, #20
 801693a:	2b13      	cmp	r3, #19
 801693c:	f04f 0000 	mov.w	r0, #0
 8016940:	f04f 0100 	mov.w	r1, #0
 8016944:	dc04      	bgt.n	8016950 <__ulp+0x34>
 8016946:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801694a:	fa42 f103 	asr.w	r1, r2, r3
 801694e:	e7ef      	b.n	8016930 <__ulp+0x14>
 8016950:	3b14      	subs	r3, #20
 8016952:	2b1e      	cmp	r3, #30
 8016954:	f04f 0201 	mov.w	r2, #1
 8016958:	bfda      	itte	le
 801695a:	f1c3 031f 	rsble	r3, r3, #31
 801695e:	fa02 f303 	lslle.w	r3, r2, r3
 8016962:	4613      	movgt	r3, r2
 8016964:	4618      	mov	r0, r3
 8016966:	e7e3      	b.n	8016930 <__ulp+0x14>
 8016968:	7ff00000 	.word	0x7ff00000

0801696c <__b2d>:
 801696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801696e:	6905      	ldr	r5, [r0, #16]
 8016970:	f100 0714 	add.w	r7, r0, #20
 8016974:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016978:	1f2e      	subs	r6, r5, #4
 801697a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801697e:	4620      	mov	r0, r4
 8016980:	f7ff fdc4 	bl	801650c <__hi0bits>
 8016984:	f1c0 0320 	rsb	r3, r0, #32
 8016988:	280a      	cmp	r0, #10
 801698a:	600b      	str	r3, [r1, #0]
 801698c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016a04 <__b2d+0x98>
 8016990:	dc14      	bgt.n	80169bc <__b2d+0x50>
 8016992:	f1c0 0e0b 	rsb	lr, r0, #11
 8016996:	fa24 f10e 	lsr.w	r1, r4, lr
 801699a:	42b7      	cmp	r7, r6
 801699c:	ea41 030c 	orr.w	r3, r1, ip
 80169a0:	bf34      	ite	cc
 80169a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80169a6:	2100      	movcs	r1, #0
 80169a8:	3015      	adds	r0, #21
 80169aa:	fa04 f000 	lsl.w	r0, r4, r0
 80169ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80169b2:	ea40 0201 	orr.w	r2, r0, r1
 80169b6:	ec43 2b10 	vmov	d0, r2, r3
 80169ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169bc:	42b7      	cmp	r7, r6
 80169be:	bf3a      	itte	cc
 80169c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80169c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80169c8:	2100      	movcs	r1, #0
 80169ca:	380b      	subs	r0, #11
 80169cc:	d015      	beq.n	80169fa <__b2d+0x8e>
 80169ce:	4084      	lsls	r4, r0
 80169d0:	f1c0 0520 	rsb	r5, r0, #32
 80169d4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80169d8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80169dc:	42be      	cmp	r6, r7
 80169de:	fa21 fc05 	lsr.w	ip, r1, r5
 80169e2:	ea44 030c 	orr.w	r3, r4, ip
 80169e6:	bf8c      	ite	hi
 80169e8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80169ec:	2400      	movls	r4, #0
 80169ee:	fa01 f000 	lsl.w	r0, r1, r0
 80169f2:	40ec      	lsrs	r4, r5
 80169f4:	ea40 0204 	orr.w	r2, r0, r4
 80169f8:	e7dd      	b.n	80169b6 <__b2d+0x4a>
 80169fa:	ea44 030c 	orr.w	r3, r4, ip
 80169fe:	460a      	mov	r2, r1
 8016a00:	e7d9      	b.n	80169b6 <__b2d+0x4a>
 8016a02:	bf00      	nop
 8016a04:	3ff00000 	.word	0x3ff00000

08016a08 <__d2b>:
 8016a08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a0c:	460e      	mov	r6, r1
 8016a0e:	2101      	movs	r1, #1
 8016a10:	ec59 8b10 	vmov	r8, r9, d0
 8016a14:	4615      	mov	r5, r2
 8016a16:	f7ff fcb5 	bl	8016384 <_Balloc>
 8016a1a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016a1e:	4607      	mov	r7, r0
 8016a20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a24:	bb34      	cbnz	r4, 8016a74 <__d2b+0x6c>
 8016a26:	9301      	str	r3, [sp, #4]
 8016a28:	f1b8 0300 	subs.w	r3, r8, #0
 8016a2c:	d027      	beq.n	8016a7e <__d2b+0x76>
 8016a2e:	a802      	add	r0, sp, #8
 8016a30:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016a34:	f7ff fd89 	bl	801654a <__lo0bits>
 8016a38:	9900      	ldr	r1, [sp, #0]
 8016a3a:	b1f0      	cbz	r0, 8016a7a <__d2b+0x72>
 8016a3c:	9a01      	ldr	r2, [sp, #4]
 8016a3e:	f1c0 0320 	rsb	r3, r0, #32
 8016a42:	fa02 f303 	lsl.w	r3, r2, r3
 8016a46:	430b      	orrs	r3, r1
 8016a48:	40c2      	lsrs	r2, r0
 8016a4a:	617b      	str	r3, [r7, #20]
 8016a4c:	9201      	str	r2, [sp, #4]
 8016a4e:	9b01      	ldr	r3, [sp, #4]
 8016a50:	61bb      	str	r3, [r7, #24]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	bf14      	ite	ne
 8016a56:	2102      	movne	r1, #2
 8016a58:	2101      	moveq	r1, #1
 8016a5a:	6139      	str	r1, [r7, #16]
 8016a5c:	b1c4      	cbz	r4, 8016a90 <__d2b+0x88>
 8016a5e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016a62:	4404      	add	r4, r0
 8016a64:	6034      	str	r4, [r6, #0]
 8016a66:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016a6a:	6028      	str	r0, [r5, #0]
 8016a6c:	4638      	mov	r0, r7
 8016a6e:	b003      	add	sp, #12
 8016a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016a78:	e7d5      	b.n	8016a26 <__d2b+0x1e>
 8016a7a:	6179      	str	r1, [r7, #20]
 8016a7c:	e7e7      	b.n	8016a4e <__d2b+0x46>
 8016a7e:	a801      	add	r0, sp, #4
 8016a80:	f7ff fd63 	bl	801654a <__lo0bits>
 8016a84:	9b01      	ldr	r3, [sp, #4]
 8016a86:	617b      	str	r3, [r7, #20]
 8016a88:	2101      	movs	r1, #1
 8016a8a:	6139      	str	r1, [r7, #16]
 8016a8c:	3020      	adds	r0, #32
 8016a8e:	e7e5      	b.n	8016a5c <__d2b+0x54>
 8016a90:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016a94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016a98:	6030      	str	r0, [r6, #0]
 8016a9a:	6918      	ldr	r0, [r3, #16]
 8016a9c:	f7ff fd36 	bl	801650c <__hi0bits>
 8016aa0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016aa4:	e7e1      	b.n	8016a6a <__d2b+0x62>

08016aa6 <__ratio>:
 8016aa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aaa:	4688      	mov	r8, r1
 8016aac:	4669      	mov	r1, sp
 8016aae:	4681      	mov	r9, r0
 8016ab0:	f7ff ff5c 	bl	801696c <__b2d>
 8016ab4:	a901      	add	r1, sp, #4
 8016ab6:	4640      	mov	r0, r8
 8016ab8:	ec57 6b10 	vmov	r6, r7, d0
 8016abc:	f7ff ff56 	bl	801696c <__b2d>
 8016ac0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ac4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016ac8:	eba3 0c02 	sub.w	ip, r3, r2
 8016acc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016ad0:	1a9b      	subs	r3, r3, r2
 8016ad2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016ad6:	ec5b ab10 	vmov	sl, fp, d0
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	bfce      	itee	gt
 8016ade:	463a      	movgt	r2, r7
 8016ae0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016ae4:	465a      	movle	r2, fp
 8016ae6:	4659      	mov	r1, fp
 8016ae8:	463d      	mov	r5, r7
 8016aea:	bfd4      	ite	le
 8016aec:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016af0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016af4:	4630      	mov	r0, r6
 8016af6:	ee10 2a10 	vmov	r2, s0
 8016afa:	460b      	mov	r3, r1
 8016afc:	4629      	mov	r1, r5
 8016afe:	f7e9 febd 	bl	800087c <__aeabi_ddiv>
 8016b02:	ec41 0b10 	vmov	d0, r0, r1
 8016b06:	b003      	add	sp, #12
 8016b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b0c <__copybits>:
 8016b0c:	3901      	subs	r1, #1
 8016b0e:	b510      	push	{r4, lr}
 8016b10:	1149      	asrs	r1, r1, #5
 8016b12:	6914      	ldr	r4, [r2, #16]
 8016b14:	3101      	adds	r1, #1
 8016b16:	f102 0314 	add.w	r3, r2, #20
 8016b1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016b22:	42a3      	cmp	r3, r4
 8016b24:	4602      	mov	r2, r0
 8016b26:	d303      	bcc.n	8016b30 <__copybits+0x24>
 8016b28:	2300      	movs	r3, #0
 8016b2a:	428a      	cmp	r2, r1
 8016b2c:	d305      	bcc.n	8016b3a <__copybits+0x2e>
 8016b2e:	bd10      	pop	{r4, pc}
 8016b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b34:	f840 2b04 	str.w	r2, [r0], #4
 8016b38:	e7f3      	b.n	8016b22 <__copybits+0x16>
 8016b3a:	f842 3b04 	str.w	r3, [r2], #4
 8016b3e:	e7f4      	b.n	8016b2a <__copybits+0x1e>

08016b40 <__any_on>:
 8016b40:	f100 0214 	add.w	r2, r0, #20
 8016b44:	6900      	ldr	r0, [r0, #16]
 8016b46:	114b      	asrs	r3, r1, #5
 8016b48:	4298      	cmp	r0, r3
 8016b4a:	b510      	push	{r4, lr}
 8016b4c:	db11      	blt.n	8016b72 <__any_on+0x32>
 8016b4e:	dd0a      	ble.n	8016b66 <__any_on+0x26>
 8016b50:	f011 011f 	ands.w	r1, r1, #31
 8016b54:	d007      	beq.n	8016b66 <__any_on+0x26>
 8016b56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016b5a:	fa24 f001 	lsr.w	r0, r4, r1
 8016b5e:	fa00 f101 	lsl.w	r1, r0, r1
 8016b62:	428c      	cmp	r4, r1
 8016b64:	d10b      	bne.n	8016b7e <__any_on+0x3e>
 8016b66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016b6a:	4293      	cmp	r3, r2
 8016b6c:	d803      	bhi.n	8016b76 <__any_on+0x36>
 8016b6e:	2000      	movs	r0, #0
 8016b70:	bd10      	pop	{r4, pc}
 8016b72:	4603      	mov	r3, r0
 8016b74:	e7f7      	b.n	8016b66 <__any_on+0x26>
 8016b76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b7a:	2900      	cmp	r1, #0
 8016b7c:	d0f5      	beq.n	8016b6a <__any_on+0x2a>
 8016b7e:	2001      	movs	r0, #1
 8016b80:	e7f6      	b.n	8016b70 <__any_on+0x30>

08016b82 <_calloc_r>:
 8016b82:	b538      	push	{r3, r4, r5, lr}
 8016b84:	fb02 f401 	mul.w	r4, r2, r1
 8016b88:	4621      	mov	r1, r4
 8016b8a:	f000 f857 	bl	8016c3c <_malloc_r>
 8016b8e:	4605      	mov	r5, r0
 8016b90:	b118      	cbz	r0, 8016b9a <_calloc_r+0x18>
 8016b92:	4622      	mov	r2, r4
 8016b94:	2100      	movs	r1, #0
 8016b96:	f7fc fcaa 	bl	80134ee <memset>
 8016b9a:	4628      	mov	r0, r5
 8016b9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08016ba0 <_free_r>:
 8016ba0:	b538      	push	{r3, r4, r5, lr}
 8016ba2:	4605      	mov	r5, r0
 8016ba4:	2900      	cmp	r1, #0
 8016ba6:	d045      	beq.n	8016c34 <_free_r+0x94>
 8016ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bac:	1f0c      	subs	r4, r1, #4
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	bfb8      	it	lt
 8016bb2:	18e4      	addlt	r4, r4, r3
 8016bb4:	f000 fe30 	bl	8017818 <__malloc_lock>
 8016bb8:	4a1f      	ldr	r2, [pc, #124]	; (8016c38 <_free_r+0x98>)
 8016bba:	6813      	ldr	r3, [r2, #0]
 8016bbc:	4610      	mov	r0, r2
 8016bbe:	b933      	cbnz	r3, 8016bce <_free_r+0x2e>
 8016bc0:	6063      	str	r3, [r4, #4]
 8016bc2:	6014      	str	r4, [r2, #0]
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016bca:	f000 be26 	b.w	801781a <__malloc_unlock>
 8016bce:	42a3      	cmp	r3, r4
 8016bd0:	d90c      	bls.n	8016bec <_free_r+0x4c>
 8016bd2:	6821      	ldr	r1, [r4, #0]
 8016bd4:	1862      	adds	r2, r4, r1
 8016bd6:	4293      	cmp	r3, r2
 8016bd8:	bf04      	itt	eq
 8016bda:	681a      	ldreq	r2, [r3, #0]
 8016bdc:	685b      	ldreq	r3, [r3, #4]
 8016bde:	6063      	str	r3, [r4, #4]
 8016be0:	bf04      	itt	eq
 8016be2:	1852      	addeq	r2, r2, r1
 8016be4:	6022      	streq	r2, [r4, #0]
 8016be6:	6004      	str	r4, [r0, #0]
 8016be8:	e7ec      	b.n	8016bc4 <_free_r+0x24>
 8016bea:	4613      	mov	r3, r2
 8016bec:	685a      	ldr	r2, [r3, #4]
 8016bee:	b10a      	cbz	r2, 8016bf4 <_free_r+0x54>
 8016bf0:	42a2      	cmp	r2, r4
 8016bf2:	d9fa      	bls.n	8016bea <_free_r+0x4a>
 8016bf4:	6819      	ldr	r1, [r3, #0]
 8016bf6:	1858      	adds	r0, r3, r1
 8016bf8:	42a0      	cmp	r0, r4
 8016bfa:	d10b      	bne.n	8016c14 <_free_r+0x74>
 8016bfc:	6820      	ldr	r0, [r4, #0]
 8016bfe:	4401      	add	r1, r0
 8016c00:	1858      	adds	r0, r3, r1
 8016c02:	4282      	cmp	r2, r0
 8016c04:	6019      	str	r1, [r3, #0]
 8016c06:	d1dd      	bne.n	8016bc4 <_free_r+0x24>
 8016c08:	6810      	ldr	r0, [r2, #0]
 8016c0a:	6852      	ldr	r2, [r2, #4]
 8016c0c:	605a      	str	r2, [r3, #4]
 8016c0e:	4401      	add	r1, r0
 8016c10:	6019      	str	r1, [r3, #0]
 8016c12:	e7d7      	b.n	8016bc4 <_free_r+0x24>
 8016c14:	d902      	bls.n	8016c1c <_free_r+0x7c>
 8016c16:	230c      	movs	r3, #12
 8016c18:	602b      	str	r3, [r5, #0]
 8016c1a:	e7d3      	b.n	8016bc4 <_free_r+0x24>
 8016c1c:	6820      	ldr	r0, [r4, #0]
 8016c1e:	1821      	adds	r1, r4, r0
 8016c20:	428a      	cmp	r2, r1
 8016c22:	bf04      	itt	eq
 8016c24:	6811      	ldreq	r1, [r2, #0]
 8016c26:	6852      	ldreq	r2, [r2, #4]
 8016c28:	6062      	str	r2, [r4, #4]
 8016c2a:	bf04      	itt	eq
 8016c2c:	1809      	addeq	r1, r1, r0
 8016c2e:	6021      	streq	r1, [r4, #0]
 8016c30:	605c      	str	r4, [r3, #4]
 8016c32:	e7c7      	b.n	8016bc4 <_free_r+0x24>
 8016c34:	bd38      	pop	{r3, r4, r5, pc}
 8016c36:	bf00      	nop
 8016c38:	2003362c 	.word	0x2003362c

08016c3c <_malloc_r>:
 8016c3c:	b570      	push	{r4, r5, r6, lr}
 8016c3e:	1ccd      	adds	r5, r1, #3
 8016c40:	f025 0503 	bic.w	r5, r5, #3
 8016c44:	3508      	adds	r5, #8
 8016c46:	2d0c      	cmp	r5, #12
 8016c48:	bf38      	it	cc
 8016c4a:	250c      	movcc	r5, #12
 8016c4c:	2d00      	cmp	r5, #0
 8016c4e:	4606      	mov	r6, r0
 8016c50:	db01      	blt.n	8016c56 <_malloc_r+0x1a>
 8016c52:	42a9      	cmp	r1, r5
 8016c54:	d903      	bls.n	8016c5e <_malloc_r+0x22>
 8016c56:	230c      	movs	r3, #12
 8016c58:	6033      	str	r3, [r6, #0]
 8016c5a:	2000      	movs	r0, #0
 8016c5c:	bd70      	pop	{r4, r5, r6, pc}
 8016c5e:	f000 fddb 	bl	8017818 <__malloc_lock>
 8016c62:	4a21      	ldr	r2, [pc, #132]	; (8016ce8 <_malloc_r+0xac>)
 8016c64:	6814      	ldr	r4, [r2, #0]
 8016c66:	4621      	mov	r1, r4
 8016c68:	b991      	cbnz	r1, 8016c90 <_malloc_r+0x54>
 8016c6a:	4c20      	ldr	r4, [pc, #128]	; (8016cec <_malloc_r+0xb0>)
 8016c6c:	6823      	ldr	r3, [r4, #0]
 8016c6e:	b91b      	cbnz	r3, 8016c78 <_malloc_r+0x3c>
 8016c70:	4630      	mov	r0, r6
 8016c72:	f000 fc91 	bl	8017598 <_sbrk_r>
 8016c76:	6020      	str	r0, [r4, #0]
 8016c78:	4629      	mov	r1, r5
 8016c7a:	4630      	mov	r0, r6
 8016c7c:	f000 fc8c 	bl	8017598 <_sbrk_r>
 8016c80:	1c43      	adds	r3, r0, #1
 8016c82:	d124      	bne.n	8016cce <_malloc_r+0x92>
 8016c84:	230c      	movs	r3, #12
 8016c86:	6033      	str	r3, [r6, #0]
 8016c88:	4630      	mov	r0, r6
 8016c8a:	f000 fdc6 	bl	801781a <__malloc_unlock>
 8016c8e:	e7e4      	b.n	8016c5a <_malloc_r+0x1e>
 8016c90:	680b      	ldr	r3, [r1, #0]
 8016c92:	1b5b      	subs	r3, r3, r5
 8016c94:	d418      	bmi.n	8016cc8 <_malloc_r+0x8c>
 8016c96:	2b0b      	cmp	r3, #11
 8016c98:	d90f      	bls.n	8016cba <_malloc_r+0x7e>
 8016c9a:	600b      	str	r3, [r1, #0]
 8016c9c:	50cd      	str	r5, [r1, r3]
 8016c9e:	18cc      	adds	r4, r1, r3
 8016ca0:	4630      	mov	r0, r6
 8016ca2:	f000 fdba 	bl	801781a <__malloc_unlock>
 8016ca6:	f104 000b 	add.w	r0, r4, #11
 8016caa:	1d23      	adds	r3, r4, #4
 8016cac:	f020 0007 	bic.w	r0, r0, #7
 8016cb0:	1ac3      	subs	r3, r0, r3
 8016cb2:	d0d3      	beq.n	8016c5c <_malloc_r+0x20>
 8016cb4:	425a      	negs	r2, r3
 8016cb6:	50e2      	str	r2, [r4, r3]
 8016cb8:	e7d0      	b.n	8016c5c <_malloc_r+0x20>
 8016cba:	428c      	cmp	r4, r1
 8016cbc:	684b      	ldr	r3, [r1, #4]
 8016cbe:	bf16      	itet	ne
 8016cc0:	6063      	strne	r3, [r4, #4]
 8016cc2:	6013      	streq	r3, [r2, #0]
 8016cc4:	460c      	movne	r4, r1
 8016cc6:	e7eb      	b.n	8016ca0 <_malloc_r+0x64>
 8016cc8:	460c      	mov	r4, r1
 8016cca:	6849      	ldr	r1, [r1, #4]
 8016ccc:	e7cc      	b.n	8016c68 <_malloc_r+0x2c>
 8016cce:	1cc4      	adds	r4, r0, #3
 8016cd0:	f024 0403 	bic.w	r4, r4, #3
 8016cd4:	42a0      	cmp	r0, r4
 8016cd6:	d005      	beq.n	8016ce4 <_malloc_r+0xa8>
 8016cd8:	1a21      	subs	r1, r4, r0
 8016cda:	4630      	mov	r0, r6
 8016cdc:	f000 fc5c 	bl	8017598 <_sbrk_r>
 8016ce0:	3001      	adds	r0, #1
 8016ce2:	d0cf      	beq.n	8016c84 <_malloc_r+0x48>
 8016ce4:	6025      	str	r5, [r4, #0]
 8016ce6:	e7db      	b.n	8016ca0 <_malloc_r+0x64>
 8016ce8:	2003362c 	.word	0x2003362c
 8016cec:	20033630 	.word	0x20033630

08016cf0 <__ssputs_r>:
 8016cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cf4:	688e      	ldr	r6, [r1, #8]
 8016cf6:	429e      	cmp	r6, r3
 8016cf8:	4682      	mov	sl, r0
 8016cfa:	460c      	mov	r4, r1
 8016cfc:	4690      	mov	r8, r2
 8016cfe:	4699      	mov	r9, r3
 8016d00:	d837      	bhi.n	8016d72 <__ssputs_r+0x82>
 8016d02:	898a      	ldrh	r2, [r1, #12]
 8016d04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016d08:	d031      	beq.n	8016d6e <__ssputs_r+0x7e>
 8016d0a:	6825      	ldr	r5, [r4, #0]
 8016d0c:	6909      	ldr	r1, [r1, #16]
 8016d0e:	1a6f      	subs	r7, r5, r1
 8016d10:	6965      	ldr	r5, [r4, #20]
 8016d12:	2302      	movs	r3, #2
 8016d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d18:	fb95 f5f3 	sdiv	r5, r5, r3
 8016d1c:	f109 0301 	add.w	r3, r9, #1
 8016d20:	443b      	add	r3, r7
 8016d22:	429d      	cmp	r5, r3
 8016d24:	bf38      	it	cc
 8016d26:	461d      	movcc	r5, r3
 8016d28:	0553      	lsls	r3, r2, #21
 8016d2a:	d530      	bpl.n	8016d8e <__ssputs_r+0x9e>
 8016d2c:	4629      	mov	r1, r5
 8016d2e:	f7ff ff85 	bl	8016c3c <_malloc_r>
 8016d32:	4606      	mov	r6, r0
 8016d34:	b950      	cbnz	r0, 8016d4c <__ssputs_r+0x5c>
 8016d36:	230c      	movs	r3, #12
 8016d38:	f8ca 3000 	str.w	r3, [sl]
 8016d3c:	89a3      	ldrh	r3, [r4, #12]
 8016d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d42:	81a3      	strh	r3, [r4, #12]
 8016d44:	f04f 30ff 	mov.w	r0, #4294967295
 8016d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d4c:	463a      	mov	r2, r7
 8016d4e:	6921      	ldr	r1, [r4, #16]
 8016d50:	f7fc fbc2 	bl	80134d8 <memcpy>
 8016d54:	89a3      	ldrh	r3, [r4, #12]
 8016d56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d5e:	81a3      	strh	r3, [r4, #12]
 8016d60:	6126      	str	r6, [r4, #16]
 8016d62:	6165      	str	r5, [r4, #20]
 8016d64:	443e      	add	r6, r7
 8016d66:	1bed      	subs	r5, r5, r7
 8016d68:	6026      	str	r6, [r4, #0]
 8016d6a:	60a5      	str	r5, [r4, #8]
 8016d6c:	464e      	mov	r6, r9
 8016d6e:	454e      	cmp	r6, r9
 8016d70:	d900      	bls.n	8016d74 <__ssputs_r+0x84>
 8016d72:	464e      	mov	r6, r9
 8016d74:	4632      	mov	r2, r6
 8016d76:	4641      	mov	r1, r8
 8016d78:	6820      	ldr	r0, [r4, #0]
 8016d7a:	f000 fd34 	bl	80177e6 <memmove>
 8016d7e:	68a3      	ldr	r3, [r4, #8]
 8016d80:	1b9b      	subs	r3, r3, r6
 8016d82:	60a3      	str	r3, [r4, #8]
 8016d84:	6823      	ldr	r3, [r4, #0]
 8016d86:	441e      	add	r6, r3
 8016d88:	6026      	str	r6, [r4, #0]
 8016d8a:	2000      	movs	r0, #0
 8016d8c:	e7dc      	b.n	8016d48 <__ssputs_r+0x58>
 8016d8e:	462a      	mov	r2, r5
 8016d90:	f000 fd44 	bl	801781c <_realloc_r>
 8016d94:	4606      	mov	r6, r0
 8016d96:	2800      	cmp	r0, #0
 8016d98:	d1e2      	bne.n	8016d60 <__ssputs_r+0x70>
 8016d9a:	6921      	ldr	r1, [r4, #16]
 8016d9c:	4650      	mov	r0, sl
 8016d9e:	f7ff feff 	bl	8016ba0 <_free_r>
 8016da2:	e7c8      	b.n	8016d36 <__ssputs_r+0x46>

08016da4 <_svfiprintf_r>:
 8016da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da8:	461d      	mov	r5, r3
 8016daa:	898b      	ldrh	r3, [r1, #12]
 8016dac:	061f      	lsls	r7, r3, #24
 8016dae:	b09d      	sub	sp, #116	; 0x74
 8016db0:	4680      	mov	r8, r0
 8016db2:	460c      	mov	r4, r1
 8016db4:	4616      	mov	r6, r2
 8016db6:	d50f      	bpl.n	8016dd8 <_svfiprintf_r+0x34>
 8016db8:	690b      	ldr	r3, [r1, #16]
 8016dba:	b96b      	cbnz	r3, 8016dd8 <_svfiprintf_r+0x34>
 8016dbc:	2140      	movs	r1, #64	; 0x40
 8016dbe:	f7ff ff3d 	bl	8016c3c <_malloc_r>
 8016dc2:	6020      	str	r0, [r4, #0]
 8016dc4:	6120      	str	r0, [r4, #16]
 8016dc6:	b928      	cbnz	r0, 8016dd4 <_svfiprintf_r+0x30>
 8016dc8:	230c      	movs	r3, #12
 8016dca:	f8c8 3000 	str.w	r3, [r8]
 8016dce:	f04f 30ff 	mov.w	r0, #4294967295
 8016dd2:	e0c8      	b.n	8016f66 <_svfiprintf_r+0x1c2>
 8016dd4:	2340      	movs	r3, #64	; 0x40
 8016dd6:	6163      	str	r3, [r4, #20]
 8016dd8:	2300      	movs	r3, #0
 8016dda:	9309      	str	r3, [sp, #36]	; 0x24
 8016ddc:	2320      	movs	r3, #32
 8016dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016de2:	2330      	movs	r3, #48	; 0x30
 8016de4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016de8:	9503      	str	r5, [sp, #12]
 8016dea:	f04f 0b01 	mov.w	fp, #1
 8016dee:	4637      	mov	r7, r6
 8016df0:	463d      	mov	r5, r7
 8016df2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016df6:	b10b      	cbz	r3, 8016dfc <_svfiprintf_r+0x58>
 8016df8:	2b25      	cmp	r3, #37	; 0x25
 8016dfa:	d13e      	bne.n	8016e7a <_svfiprintf_r+0xd6>
 8016dfc:	ebb7 0a06 	subs.w	sl, r7, r6
 8016e00:	d00b      	beq.n	8016e1a <_svfiprintf_r+0x76>
 8016e02:	4653      	mov	r3, sl
 8016e04:	4632      	mov	r2, r6
 8016e06:	4621      	mov	r1, r4
 8016e08:	4640      	mov	r0, r8
 8016e0a:	f7ff ff71 	bl	8016cf0 <__ssputs_r>
 8016e0e:	3001      	adds	r0, #1
 8016e10:	f000 80a4 	beq.w	8016f5c <_svfiprintf_r+0x1b8>
 8016e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e16:	4453      	add	r3, sl
 8016e18:	9309      	str	r3, [sp, #36]	; 0x24
 8016e1a:	783b      	ldrb	r3, [r7, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	f000 809d 	beq.w	8016f5c <_svfiprintf_r+0x1b8>
 8016e22:	2300      	movs	r3, #0
 8016e24:	f04f 32ff 	mov.w	r2, #4294967295
 8016e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e2c:	9304      	str	r3, [sp, #16]
 8016e2e:	9307      	str	r3, [sp, #28]
 8016e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e34:	931a      	str	r3, [sp, #104]	; 0x68
 8016e36:	462f      	mov	r7, r5
 8016e38:	2205      	movs	r2, #5
 8016e3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016e3e:	4850      	ldr	r0, [pc, #320]	; (8016f80 <_svfiprintf_r+0x1dc>)
 8016e40:	f7e9 f9e6 	bl	8000210 <memchr>
 8016e44:	9b04      	ldr	r3, [sp, #16]
 8016e46:	b9d0      	cbnz	r0, 8016e7e <_svfiprintf_r+0xda>
 8016e48:	06d9      	lsls	r1, r3, #27
 8016e4a:	bf44      	itt	mi
 8016e4c:	2220      	movmi	r2, #32
 8016e4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e52:	071a      	lsls	r2, r3, #28
 8016e54:	bf44      	itt	mi
 8016e56:	222b      	movmi	r2, #43	; 0x2b
 8016e58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e5c:	782a      	ldrb	r2, [r5, #0]
 8016e5e:	2a2a      	cmp	r2, #42	; 0x2a
 8016e60:	d015      	beq.n	8016e8e <_svfiprintf_r+0xea>
 8016e62:	9a07      	ldr	r2, [sp, #28]
 8016e64:	462f      	mov	r7, r5
 8016e66:	2000      	movs	r0, #0
 8016e68:	250a      	movs	r5, #10
 8016e6a:	4639      	mov	r1, r7
 8016e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e70:	3b30      	subs	r3, #48	; 0x30
 8016e72:	2b09      	cmp	r3, #9
 8016e74:	d94d      	bls.n	8016f12 <_svfiprintf_r+0x16e>
 8016e76:	b1b8      	cbz	r0, 8016ea8 <_svfiprintf_r+0x104>
 8016e78:	e00f      	b.n	8016e9a <_svfiprintf_r+0xf6>
 8016e7a:	462f      	mov	r7, r5
 8016e7c:	e7b8      	b.n	8016df0 <_svfiprintf_r+0x4c>
 8016e7e:	4a40      	ldr	r2, [pc, #256]	; (8016f80 <_svfiprintf_r+0x1dc>)
 8016e80:	1a80      	subs	r0, r0, r2
 8016e82:	fa0b f000 	lsl.w	r0, fp, r0
 8016e86:	4318      	orrs	r0, r3
 8016e88:	9004      	str	r0, [sp, #16]
 8016e8a:	463d      	mov	r5, r7
 8016e8c:	e7d3      	b.n	8016e36 <_svfiprintf_r+0x92>
 8016e8e:	9a03      	ldr	r2, [sp, #12]
 8016e90:	1d11      	adds	r1, r2, #4
 8016e92:	6812      	ldr	r2, [r2, #0]
 8016e94:	9103      	str	r1, [sp, #12]
 8016e96:	2a00      	cmp	r2, #0
 8016e98:	db01      	blt.n	8016e9e <_svfiprintf_r+0xfa>
 8016e9a:	9207      	str	r2, [sp, #28]
 8016e9c:	e004      	b.n	8016ea8 <_svfiprintf_r+0x104>
 8016e9e:	4252      	negs	r2, r2
 8016ea0:	f043 0302 	orr.w	r3, r3, #2
 8016ea4:	9207      	str	r2, [sp, #28]
 8016ea6:	9304      	str	r3, [sp, #16]
 8016ea8:	783b      	ldrb	r3, [r7, #0]
 8016eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8016eac:	d10c      	bne.n	8016ec8 <_svfiprintf_r+0x124>
 8016eae:	787b      	ldrb	r3, [r7, #1]
 8016eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8016eb2:	d133      	bne.n	8016f1c <_svfiprintf_r+0x178>
 8016eb4:	9b03      	ldr	r3, [sp, #12]
 8016eb6:	1d1a      	adds	r2, r3, #4
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	9203      	str	r2, [sp, #12]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	bfb8      	it	lt
 8016ec0:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ec4:	3702      	adds	r7, #2
 8016ec6:	9305      	str	r3, [sp, #20]
 8016ec8:	4d2e      	ldr	r5, [pc, #184]	; (8016f84 <_svfiprintf_r+0x1e0>)
 8016eca:	7839      	ldrb	r1, [r7, #0]
 8016ecc:	2203      	movs	r2, #3
 8016ece:	4628      	mov	r0, r5
 8016ed0:	f7e9 f99e 	bl	8000210 <memchr>
 8016ed4:	b138      	cbz	r0, 8016ee6 <_svfiprintf_r+0x142>
 8016ed6:	2340      	movs	r3, #64	; 0x40
 8016ed8:	1b40      	subs	r0, r0, r5
 8016eda:	fa03 f000 	lsl.w	r0, r3, r0
 8016ede:	9b04      	ldr	r3, [sp, #16]
 8016ee0:	4303      	orrs	r3, r0
 8016ee2:	3701      	adds	r7, #1
 8016ee4:	9304      	str	r3, [sp, #16]
 8016ee6:	7839      	ldrb	r1, [r7, #0]
 8016ee8:	4827      	ldr	r0, [pc, #156]	; (8016f88 <_svfiprintf_r+0x1e4>)
 8016eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016eee:	2206      	movs	r2, #6
 8016ef0:	1c7e      	adds	r6, r7, #1
 8016ef2:	f7e9 f98d 	bl	8000210 <memchr>
 8016ef6:	2800      	cmp	r0, #0
 8016ef8:	d038      	beq.n	8016f6c <_svfiprintf_r+0x1c8>
 8016efa:	4b24      	ldr	r3, [pc, #144]	; (8016f8c <_svfiprintf_r+0x1e8>)
 8016efc:	bb13      	cbnz	r3, 8016f44 <_svfiprintf_r+0x1a0>
 8016efe:	9b03      	ldr	r3, [sp, #12]
 8016f00:	3307      	adds	r3, #7
 8016f02:	f023 0307 	bic.w	r3, r3, #7
 8016f06:	3308      	adds	r3, #8
 8016f08:	9303      	str	r3, [sp, #12]
 8016f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f0c:	444b      	add	r3, r9
 8016f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8016f10:	e76d      	b.n	8016dee <_svfiprintf_r+0x4a>
 8016f12:	fb05 3202 	mla	r2, r5, r2, r3
 8016f16:	2001      	movs	r0, #1
 8016f18:	460f      	mov	r7, r1
 8016f1a:	e7a6      	b.n	8016e6a <_svfiprintf_r+0xc6>
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	3701      	adds	r7, #1
 8016f20:	9305      	str	r3, [sp, #20]
 8016f22:	4619      	mov	r1, r3
 8016f24:	250a      	movs	r5, #10
 8016f26:	4638      	mov	r0, r7
 8016f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f2c:	3a30      	subs	r2, #48	; 0x30
 8016f2e:	2a09      	cmp	r2, #9
 8016f30:	d903      	bls.n	8016f3a <_svfiprintf_r+0x196>
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d0c8      	beq.n	8016ec8 <_svfiprintf_r+0x124>
 8016f36:	9105      	str	r1, [sp, #20]
 8016f38:	e7c6      	b.n	8016ec8 <_svfiprintf_r+0x124>
 8016f3a:	fb05 2101 	mla	r1, r5, r1, r2
 8016f3e:	2301      	movs	r3, #1
 8016f40:	4607      	mov	r7, r0
 8016f42:	e7f0      	b.n	8016f26 <_svfiprintf_r+0x182>
 8016f44:	ab03      	add	r3, sp, #12
 8016f46:	9300      	str	r3, [sp, #0]
 8016f48:	4622      	mov	r2, r4
 8016f4a:	4b11      	ldr	r3, [pc, #68]	; (8016f90 <_svfiprintf_r+0x1ec>)
 8016f4c:	a904      	add	r1, sp, #16
 8016f4e:	4640      	mov	r0, r8
 8016f50:	f7fc fb6a 	bl	8013628 <_printf_float>
 8016f54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f58:	4681      	mov	r9, r0
 8016f5a:	d1d6      	bne.n	8016f0a <_svfiprintf_r+0x166>
 8016f5c:	89a3      	ldrh	r3, [r4, #12]
 8016f5e:	065b      	lsls	r3, r3, #25
 8016f60:	f53f af35 	bmi.w	8016dce <_svfiprintf_r+0x2a>
 8016f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f66:	b01d      	add	sp, #116	; 0x74
 8016f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f6c:	ab03      	add	r3, sp, #12
 8016f6e:	9300      	str	r3, [sp, #0]
 8016f70:	4622      	mov	r2, r4
 8016f72:	4b07      	ldr	r3, [pc, #28]	; (8016f90 <_svfiprintf_r+0x1ec>)
 8016f74:	a904      	add	r1, sp, #16
 8016f76:	4640      	mov	r0, r8
 8016f78:	f7fc fe0c 	bl	8013b94 <_printf_i>
 8016f7c:	e7ea      	b.n	8016f54 <_svfiprintf_r+0x1b0>
 8016f7e:	bf00      	nop
 8016f80:	08018244 	.word	0x08018244
 8016f84:	0801824a 	.word	0x0801824a
 8016f88:	0801824e 	.word	0x0801824e
 8016f8c:	08013629 	.word	0x08013629
 8016f90:	08016cf1 	.word	0x08016cf1

08016f94 <_sungetc_r>:
 8016f94:	b538      	push	{r3, r4, r5, lr}
 8016f96:	1c4b      	adds	r3, r1, #1
 8016f98:	4614      	mov	r4, r2
 8016f9a:	d103      	bne.n	8016fa4 <_sungetc_r+0x10>
 8016f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8016fa0:	4628      	mov	r0, r5
 8016fa2:	bd38      	pop	{r3, r4, r5, pc}
 8016fa4:	8993      	ldrh	r3, [r2, #12]
 8016fa6:	f023 0320 	bic.w	r3, r3, #32
 8016faa:	8193      	strh	r3, [r2, #12]
 8016fac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016fae:	6852      	ldr	r2, [r2, #4]
 8016fb0:	b2cd      	uxtb	r5, r1
 8016fb2:	b18b      	cbz	r3, 8016fd8 <_sungetc_r+0x44>
 8016fb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016fb6:	4293      	cmp	r3, r2
 8016fb8:	dd08      	ble.n	8016fcc <_sungetc_r+0x38>
 8016fba:	6823      	ldr	r3, [r4, #0]
 8016fbc:	1e5a      	subs	r2, r3, #1
 8016fbe:	6022      	str	r2, [r4, #0]
 8016fc0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016fc4:	6863      	ldr	r3, [r4, #4]
 8016fc6:	3301      	adds	r3, #1
 8016fc8:	6063      	str	r3, [r4, #4]
 8016fca:	e7e9      	b.n	8016fa0 <_sungetc_r+0xc>
 8016fcc:	4621      	mov	r1, r4
 8016fce:	f000 fbc3 	bl	8017758 <__submore>
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	d0f1      	beq.n	8016fba <_sungetc_r+0x26>
 8016fd6:	e7e1      	b.n	8016f9c <_sungetc_r+0x8>
 8016fd8:	6921      	ldr	r1, [r4, #16]
 8016fda:	6823      	ldr	r3, [r4, #0]
 8016fdc:	b151      	cbz	r1, 8016ff4 <_sungetc_r+0x60>
 8016fde:	4299      	cmp	r1, r3
 8016fe0:	d208      	bcs.n	8016ff4 <_sungetc_r+0x60>
 8016fe2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016fe6:	42a9      	cmp	r1, r5
 8016fe8:	d104      	bne.n	8016ff4 <_sungetc_r+0x60>
 8016fea:	3b01      	subs	r3, #1
 8016fec:	3201      	adds	r2, #1
 8016fee:	6023      	str	r3, [r4, #0]
 8016ff0:	6062      	str	r2, [r4, #4]
 8016ff2:	e7d5      	b.n	8016fa0 <_sungetc_r+0xc>
 8016ff4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8016ffe:	2303      	movs	r3, #3
 8017000:	63a3      	str	r3, [r4, #56]	; 0x38
 8017002:	4623      	mov	r3, r4
 8017004:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017008:	6023      	str	r3, [r4, #0]
 801700a:	2301      	movs	r3, #1
 801700c:	e7dc      	b.n	8016fc8 <_sungetc_r+0x34>

0801700e <__ssrefill_r>:
 801700e:	b510      	push	{r4, lr}
 8017010:	460c      	mov	r4, r1
 8017012:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017014:	b169      	cbz	r1, 8017032 <__ssrefill_r+0x24>
 8017016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801701a:	4299      	cmp	r1, r3
 801701c:	d001      	beq.n	8017022 <__ssrefill_r+0x14>
 801701e:	f7ff fdbf 	bl	8016ba0 <_free_r>
 8017022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017024:	6063      	str	r3, [r4, #4]
 8017026:	2000      	movs	r0, #0
 8017028:	6360      	str	r0, [r4, #52]	; 0x34
 801702a:	b113      	cbz	r3, 8017032 <__ssrefill_r+0x24>
 801702c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801702e:	6023      	str	r3, [r4, #0]
 8017030:	bd10      	pop	{r4, pc}
 8017032:	6923      	ldr	r3, [r4, #16]
 8017034:	6023      	str	r3, [r4, #0]
 8017036:	2300      	movs	r3, #0
 8017038:	6063      	str	r3, [r4, #4]
 801703a:	89a3      	ldrh	r3, [r4, #12]
 801703c:	f043 0320 	orr.w	r3, r3, #32
 8017040:	81a3      	strh	r3, [r4, #12]
 8017042:	f04f 30ff 	mov.w	r0, #4294967295
 8017046:	e7f3      	b.n	8017030 <__ssrefill_r+0x22>

08017048 <__ssvfiscanf_r>:
 8017048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801704c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017050:	460c      	mov	r4, r1
 8017052:	2100      	movs	r1, #0
 8017054:	9144      	str	r1, [sp, #272]	; 0x110
 8017056:	9145      	str	r1, [sp, #276]	; 0x114
 8017058:	499f      	ldr	r1, [pc, #636]	; (80172d8 <__ssvfiscanf_r+0x290>)
 801705a:	91a0      	str	r1, [sp, #640]	; 0x280
 801705c:	f10d 0804 	add.w	r8, sp, #4
 8017060:	499e      	ldr	r1, [pc, #632]	; (80172dc <__ssvfiscanf_r+0x294>)
 8017062:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80172e0 <__ssvfiscanf_r+0x298>
 8017066:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801706a:	4606      	mov	r6, r0
 801706c:	4692      	mov	sl, r2
 801706e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017070:	9300      	str	r3, [sp, #0]
 8017072:	270a      	movs	r7, #10
 8017074:	f89a 3000 	ldrb.w	r3, [sl]
 8017078:	2b00      	cmp	r3, #0
 801707a:	f000 812a 	beq.w	80172d2 <__ssvfiscanf_r+0x28a>
 801707e:	4655      	mov	r5, sl
 8017080:	f7ff f948 	bl	8016314 <__locale_ctype_ptr>
 8017084:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017088:	4458      	add	r0, fp
 801708a:	7843      	ldrb	r3, [r0, #1]
 801708c:	f013 0308 	ands.w	r3, r3, #8
 8017090:	d01c      	beq.n	80170cc <__ssvfiscanf_r+0x84>
 8017092:	6863      	ldr	r3, [r4, #4]
 8017094:	2b00      	cmp	r3, #0
 8017096:	dd12      	ble.n	80170be <__ssvfiscanf_r+0x76>
 8017098:	f7ff f93c 	bl	8016314 <__locale_ctype_ptr>
 801709c:	6823      	ldr	r3, [r4, #0]
 801709e:	781a      	ldrb	r2, [r3, #0]
 80170a0:	4410      	add	r0, r2
 80170a2:	7842      	ldrb	r2, [r0, #1]
 80170a4:	0712      	lsls	r2, r2, #28
 80170a6:	d401      	bmi.n	80170ac <__ssvfiscanf_r+0x64>
 80170a8:	46aa      	mov	sl, r5
 80170aa:	e7e3      	b.n	8017074 <__ssvfiscanf_r+0x2c>
 80170ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80170ae:	3201      	adds	r2, #1
 80170b0:	9245      	str	r2, [sp, #276]	; 0x114
 80170b2:	6862      	ldr	r2, [r4, #4]
 80170b4:	3301      	adds	r3, #1
 80170b6:	3a01      	subs	r2, #1
 80170b8:	6062      	str	r2, [r4, #4]
 80170ba:	6023      	str	r3, [r4, #0]
 80170bc:	e7e9      	b.n	8017092 <__ssvfiscanf_r+0x4a>
 80170be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80170c0:	4621      	mov	r1, r4
 80170c2:	4630      	mov	r0, r6
 80170c4:	4798      	blx	r3
 80170c6:	2800      	cmp	r0, #0
 80170c8:	d0e6      	beq.n	8017098 <__ssvfiscanf_r+0x50>
 80170ca:	e7ed      	b.n	80170a8 <__ssvfiscanf_r+0x60>
 80170cc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80170d0:	f040 8082 	bne.w	80171d8 <__ssvfiscanf_r+0x190>
 80170d4:	9343      	str	r3, [sp, #268]	; 0x10c
 80170d6:	9341      	str	r3, [sp, #260]	; 0x104
 80170d8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80170dc:	2b2a      	cmp	r3, #42	; 0x2a
 80170de:	d103      	bne.n	80170e8 <__ssvfiscanf_r+0xa0>
 80170e0:	2310      	movs	r3, #16
 80170e2:	9341      	str	r3, [sp, #260]	; 0x104
 80170e4:	f10a 0502 	add.w	r5, sl, #2
 80170e8:	46aa      	mov	sl, r5
 80170ea:	f815 1b01 	ldrb.w	r1, [r5], #1
 80170ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80170f2:	2a09      	cmp	r2, #9
 80170f4:	d922      	bls.n	801713c <__ssvfiscanf_r+0xf4>
 80170f6:	2203      	movs	r2, #3
 80170f8:	4879      	ldr	r0, [pc, #484]	; (80172e0 <__ssvfiscanf_r+0x298>)
 80170fa:	f7e9 f889 	bl	8000210 <memchr>
 80170fe:	b138      	cbz	r0, 8017110 <__ssvfiscanf_r+0xc8>
 8017100:	eba0 0309 	sub.w	r3, r0, r9
 8017104:	2001      	movs	r0, #1
 8017106:	4098      	lsls	r0, r3
 8017108:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801710a:	4318      	orrs	r0, r3
 801710c:	9041      	str	r0, [sp, #260]	; 0x104
 801710e:	46aa      	mov	sl, r5
 8017110:	f89a 3000 	ldrb.w	r3, [sl]
 8017114:	2b67      	cmp	r3, #103	; 0x67
 8017116:	f10a 0501 	add.w	r5, sl, #1
 801711a:	d82b      	bhi.n	8017174 <__ssvfiscanf_r+0x12c>
 801711c:	2b65      	cmp	r3, #101	; 0x65
 801711e:	f080 809f 	bcs.w	8017260 <__ssvfiscanf_r+0x218>
 8017122:	2b47      	cmp	r3, #71	; 0x47
 8017124:	d810      	bhi.n	8017148 <__ssvfiscanf_r+0x100>
 8017126:	2b45      	cmp	r3, #69	; 0x45
 8017128:	f080 809a 	bcs.w	8017260 <__ssvfiscanf_r+0x218>
 801712c:	2b00      	cmp	r3, #0
 801712e:	d06c      	beq.n	801720a <__ssvfiscanf_r+0x1c2>
 8017130:	2b25      	cmp	r3, #37	; 0x25
 8017132:	d051      	beq.n	80171d8 <__ssvfiscanf_r+0x190>
 8017134:	2303      	movs	r3, #3
 8017136:	9347      	str	r3, [sp, #284]	; 0x11c
 8017138:	9742      	str	r7, [sp, #264]	; 0x108
 801713a:	e027      	b.n	801718c <__ssvfiscanf_r+0x144>
 801713c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801713e:	fb07 1303 	mla	r3, r7, r3, r1
 8017142:	3b30      	subs	r3, #48	; 0x30
 8017144:	9343      	str	r3, [sp, #268]	; 0x10c
 8017146:	e7cf      	b.n	80170e8 <__ssvfiscanf_r+0xa0>
 8017148:	2b5b      	cmp	r3, #91	; 0x5b
 801714a:	d06a      	beq.n	8017222 <__ssvfiscanf_r+0x1da>
 801714c:	d80c      	bhi.n	8017168 <__ssvfiscanf_r+0x120>
 801714e:	2b58      	cmp	r3, #88	; 0x58
 8017150:	d1f0      	bne.n	8017134 <__ssvfiscanf_r+0xec>
 8017152:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017158:	9241      	str	r2, [sp, #260]	; 0x104
 801715a:	2210      	movs	r2, #16
 801715c:	9242      	str	r2, [sp, #264]	; 0x108
 801715e:	2b6e      	cmp	r3, #110	; 0x6e
 8017160:	bf8c      	ite	hi
 8017162:	2304      	movhi	r3, #4
 8017164:	2303      	movls	r3, #3
 8017166:	e010      	b.n	801718a <__ssvfiscanf_r+0x142>
 8017168:	2b63      	cmp	r3, #99	; 0x63
 801716a:	d065      	beq.n	8017238 <__ssvfiscanf_r+0x1f0>
 801716c:	2b64      	cmp	r3, #100	; 0x64
 801716e:	d1e1      	bne.n	8017134 <__ssvfiscanf_r+0xec>
 8017170:	9742      	str	r7, [sp, #264]	; 0x108
 8017172:	e7f4      	b.n	801715e <__ssvfiscanf_r+0x116>
 8017174:	2b70      	cmp	r3, #112	; 0x70
 8017176:	d04b      	beq.n	8017210 <__ssvfiscanf_r+0x1c8>
 8017178:	d826      	bhi.n	80171c8 <__ssvfiscanf_r+0x180>
 801717a:	2b6e      	cmp	r3, #110	; 0x6e
 801717c:	d062      	beq.n	8017244 <__ssvfiscanf_r+0x1fc>
 801717e:	d84c      	bhi.n	801721a <__ssvfiscanf_r+0x1d2>
 8017180:	2b69      	cmp	r3, #105	; 0x69
 8017182:	d1d7      	bne.n	8017134 <__ssvfiscanf_r+0xec>
 8017184:	2300      	movs	r3, #0
 8017186:	9342      	str	r3, [sp, #264]	; 0x108
 8017188:	2303      	movs	r3, #3
 801718a:	9347      	str	r3, [sp, #284]	; 0x11c
 801718c:	6863      	ldr	r3, [r4, #4]
 801718e:	2b00      	cmp	r3, #0
 8017190:	dd68      	ble.n	8017264 <__ssvfiscanf_r+0x21c>
 8017192:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017194:	0659      	lsls	r1, r3, #25
 8017196:	d407      	bmi.n	80171a8 <__ssvfiscanf_r+0x160>
 8017198:	f7ff f8bc 	bl	8016314 <__locale_ctype_ptr>
 801719c:	6823      	ldr	r3, [r4, #0]
 801719e:	781a      	ldrb	r2, [r3, #0]
 80171a0:	4410      	add	r0, r2
 80171a2:	7842      	ldrb	r2, [r0, #1]
 80171a4:	0712      	lsls	r2, r2, #28
 80171a6:	d464      	bmi.n	8017272 <__ssvfiscanf_r+0x22a>
 80171a8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80171aa:	2b02      	cmp	r3, #2
 80171ac:	dc73      	bgt.n	8017296 <__ssvfiscanf_r+0x24e>
 80171ae:	466b      	mov	r3, sp
 80171b0:	4622      	mov	r2, r4
 80171b2:	a941      	add	r1, sp, #260	; 0x104
 80171b4:	4630      	mov	r0, r6
 80171b6:	f000 f897 	bl	80172e8 <_scanf_chars>
 80171ba:	2801      	cmp	r0, #1
 80171bc:	f000 8089 	beq.w	80172d2 <__ssvfiscanf_r+0x28a>
 80171c0:	2802      	cmp	r0, #2
 80171c2:	f47f af71 	bne.w	80170a8 <__ssvfiscanf_r+0x60>
 80171c6:	e01d      	b.n	8017204 <__ssvfiscanf_r+0x1bc>
 80171c8:	2b75      	cmp	r3, #117	; 0x75
 80171ca:	d0d1      	beq.n	8017170 <__ssvfiscanf_r+0x128>
 80171cc:	2b78      	cmp	r3, #120	; 0x78
 80171ce:	d0c0      	beq.n	8017152 <__ssvfiscanf_r+0x10a>
 80171d0:	2b73      	cmp	r3, #115	; 0x73
 80171d2:	d1af      	bne.n	8017134 <__ssvfiscanf_r+0xec>
 80171d4:	2302      	movs	r3, #2
 80171d6:	e7d8      	b.n	801718a <__ssvfiscanf_r+0x142>
 80171d8:	6863      	ldr	r3, [r4, #4]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	dd0c      	ble.n	80171f8 <__ssvfiscanf_r+0x1b0>
 80171de:	6823      	ldr	r3, [r4, #0]
 80171e0:	781a      	ldrb	r2, [r3, #0]
 80171e2:	455a      	cmp	r2, fp
 80171e4:	d175      	bne.n	80172d2 <__ssvfiscanf_r+0x28a>
 80171e6:	3301      	adds	r3, #1
 80171e8:	6862      	ldr	r2, [r4, #4]
 80171ea:	6023      	str	r3, [r4, #0]
 80171ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80171ee:	3a01      	subs	r2, #1
 80171f0:	3301      	adds	r3, #1
 80171f2:	6062      	str	r2, [r4, #4]
 80171f4:	9345      	str	r3, [sp, #276]	; 0x114
 80171f6:	e757      	b.n	80170a8 <__ssvfiscanf_r+0x60>
 80171f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80171fa:	4621      	mov	r1, r4
 80171fc:	4630      	mov	r0, r6
 80171fe:	4798      	blx	r3
 8017200:	2800      	cmp	r0, #0
 8017202:	d0ec      	beq.n	80171de <__ssvfiscanf_r+0x196>
 8017204:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017206:	2800      	cmp	r0, #0
 8017208:	d159      	bne.n	80172be <__ssvfiscanf_r+0x276>
 801720a:	f04f 30ff 	mov.w	r0, #4294967295
 801720e:	e05c      	b.n	80172ca <__ssvfiscanf_r+0x282>
 8017210:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017212:	f042 0220 	orr.w	r2, r2, #32
 8017216:	9241      	str	r2, [sp, #260]	; 0x104
 8017218:	e79b      	b.n	8017152 <__ssvfiscanf_r+0x10a>
 801721a:	2308      	movs	r3, #8
 801721c:	9342      	str	r3, [sp, #264]	; 0x108
 801721e:	2304      	movs	r3, #4
 8017220:	e7b3      	b.n	801718a <__ssvfiscanf_r+0x142>
 8017222:	4629      	mov	r1, r5
 8017224:	4640      	mov	r0, r8
 8017226:	f000 f9c7 	bl	80175b8 <__sccl>
 801722a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801722c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017230:	9341      	str	r3, [sp, #260]	; 0x104
 8017232:	4605      	mov	r5, r0
 8017234:	2301      	movs	r3, #1
 8017236:	e7a8      	b.n	801718a <__ssvfiscanf_r+0x142>
 8017238:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801723a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801723e:	9341      	str	r3, [sp, #260]	; 0x104
 8017240:	2300      	movs	r3, #0
 8017242:	e7a2      	b.n	801718a <__ssvfiscanf_r+0x142>
 8017244:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017246:	06c3      	lsls	r3, r0, #27
 8017248:	f53f af2e 	bmi.w	80170a8 <__ssvfiscanf_r+0x60>
 801724c:	9b00      	ldr	r3, [sp, #0]
 801724e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017250:	1d19      	adds	r1, r3, #4
 8017252:	9100      	str	r1, [sp, #0]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	07c0      	lsls	r0, r0, #31
 8017258:	bf4c      	ite	mi
 801725a:	801a      	strhmi	r2, [r3, #0]
 801725c:	601a      	strpl	r2, [r3, #0]
 801725e:	e723      	b.n	80170a8 <__ssvfiscanf_r+0x60>
 8017260:	2305      	movs	r3, #5
 8017262:	e792      	b.n	801718a <__ssvfiscanf_r+0x142>
 8017264:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017266:	4621      	mov	r1, r4
 8017268:	4630      	mov	r0, r6
 801726a:	4798      	blx	r3
 801726c:	2800      	cmp	r0, #0
 801726e:	d090      	beq.n	8017192 <__ssvfiscanf_r+0x14a>
 8017270:	e7c8      	b.n	8017204 <__ssvfiscanf_r+0x1bc>
 8017272:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017274:	3201      	adds	r2, #1
 8017276:	9245      	str	r2, [sp, #276]	; 0x114
 8017278:	6862      	ldr	r2, [r4, #4]
 801727a:	3a01      	subs	r2, #1
 801727c:	2a00      	cmp	r2, #0
 801727e:	6062      	str	r2, [r4, #4]
 8017280:	dd02      	ble.n	8017288 <__ssvfiscanf_r+0x240>
 8017282:	3301      	adds	r3, #1
 8017284:	6023      	str	r3, [r4, #0]
 8017286:	e787      	b.n	8017198 <__ssvfiscanf_r+0x150>
 8017288:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801728a:	4621      	mov	r1, r4
 801728c:	4630      	mov	r0, r6
 801728e:	4798      	blx	r3
 8017290:	2800      	cmp	r0, #0
 8017292:	d081      	beq.n	8017198 <__ssvfiscanf_r+0x150>
 8017294:	e7b6      	b.n	8017204 <__ssvfiscanf_r+0x1bc>
 8017296:	2b04      	cmp	r3, #4
 8017298:	dc06      	bgt.n	80172a8 <__ssvfiscanf_r+0x260>
 801729a:	466b      	mov	r3, sp
 801729c:	4622      	mov	r2, r4
 801729e:	a941      	add	r1, sp, #260	; 0x104
 80172a0:	4630      	mov	r0, r6
 80172a2:	f000 f885 	bl	80173b0 <_scanf_i>
 80172a6:	e788      	b.n	80171ba <__ssvfiscanf_r+0x172>
 80172a8:	4b0e      	ldr	r3, [pc, #56]	; (80172e4 <__ssvfiscanf_r+0x29c>)
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	f43f aefc 	beq.w	80170a8 <__ssvfiscanf_r+0x60>
 80172b0:	466b      	mov	r3, sp
 80172b2:	4622      	mov	r2, r4
 80172b4:	a941      	add	r1, sp, #260	; 0x104
 80172b6:	4630      	mov	r0, r6
 80172b8:	f7fc fd7e 	bl	8013db8 <_scanf_float>
 80172bc:	e77d      	b.n	80171ba <__ssvfiscanf_r+0x172>
 80172be:	89a3      	ldrh	r3, [r4, #12]
 80172c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80172c4:	bf18      	it	ne
 80172c6:	f04f 30ff 	movne.w	r0, #4294967295
 80172ca:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80172ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80172d4:	e7f9      	b.n	80172ca <__ssvfiscanf_r+0x282>
 80172d6:	bf00      	nop
 80172d8:	08016f95 	.word	0x08016f95
 80172dc:	0801700f 	.word	0x0801700f
 80172e0:	0801824a 	.word	0x0801824a
 80172e4:	08013db9 	.word	0x08013db9

080172e8 <_scanf_chars>:
 80172e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172ec:	4615      	mov	r5, r2
 80172ee:	688a      	ldr	r2, [r1, #8]
 80172f0:	4680      	mov	r8, r0
 80172f2:	460c      	mov	r4, r1
 80172f4:	b932      	cbnz	r2, 8017304 <_scanf_chars+0x1c>
 80172f6:	698a      	ldr	r2, [r1, #24]
 80172f8:	2a00      	cmp	r2, #0
 80172fa:	bf14      	ite	ne
 80172fc:	f04f 32ff 	movne.w	r2, #4294967295
 8017300:	2201      	moveq	r2, #1
 8017302:	608a      	str	r2, [r1, #8]
 8017304:	6822      	ldr	r2, [r4, #0]
 8017306:	06d1      	lsls	r1, r2, #27
 8017308:	bf5f      	itttt	pl
 801730a:	681a      	ldrpl	r2, [r3, #0]
 801730c:	1d11      	addpl	r1, r2, #4
 801730e:	6019      	strpl	r1, [r3, #0]
 8017310:	6817      	ldrpl	r7, [r2, #0]
 8017312:	2600      	movs	r6, #0
 8017314:	69a3      	ldr	r3, [r4, #24]
 8017316:	b1db      	cbz	r3, 8017350 <_scanf_chars+0x68>
 8017318:	2b01      	cmp	r3, #1
 801731a:	d107      	bne.n	801732c <_scanf_chars+0x44>
 801731c:	682b      	ldr	r3, [r5, #0]
 801731e:	6962      	ldr	r2, [r4, #20]
 8017320:	781b      	ldrb	r3, [r3, #0]
 8017322:	5cd3      	ldrb	r3, [r2, r3]
 8017324:	b9a3      	cbnz	r3, 8017350 <_scanf_chars+0x68>
 8017326:	2e00      	cmp	r6, #0
 8017328:	d132      	bne.n	8017390 <_scanf_chars+0xa8>
 801732a:	e006      	b.n	801733a <_scanf_chars+0x52>
 801732c:	2b02      	cmp	r3, #2
 801732e:	d007      	beq.n	8017340 <_scanf_chars+0x58>
 8017330:	2e00      	cmp	r6, #0
 8017332:	d12d      	bne.n	8017390 <_scanf_chars+0xa8>
 8017334:	69a3      	ldr	r3, [r4, #24]
 8017336:	2b01      	cmp	r3, #1
 8017338:	d12a      	bne.n	8017390 <_scanf_chars+0xa8>
 801733a:	2001      	movs	r0, #1
 801733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017340:	f7fe ffe8 	bl	8016314 <__locale_ctype_ptr>
 8017344:	682b      	ldr	r3, [r5, #0]
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	4418      	add	r0, r3
 801734a:	7843      	ldrb	r3, [r0, #1]
 801734c:	071b      	lsls	r3, r3, #28
 801734e:	d4ef      	bmi.n	8017330 <_scanf_chars+0x48>
 8017350:	6823      	ldr	r3, [r4, #0]
 8017352:	06da      	lsls	r2, r3, #27
 8017354:	bf5e      	ittt	pl
 8017356:	682b      	ldrpl	r3, [r5, #0]
 8017358:	781b      	ldrbpl	r3, [r3, #0]
 801735a:	703b      	strbpl	r3, [r7, #0]
 801735c:	682a      	ldr	r2, [r5, #0]
 801735e:	686b      	ldr	r3, [r5, #4]
 8017360:	f102 0201 	add.w	r2, r2, #1
 8017364:	602a      	str	r2, [r5, #0]
 8017366:	68a2      	ldr	r2, [r4, #8]
 8017368:	f103 33ff 	add.w	r3, r3, #4294967295
 801736c:	f102 32ff 	add.w	r2, r2, #4294967295
 8017370:	606b      	str	r3, [r5, #4]
 8017372:	f106 0601 	add.w	r6, r6, #1
 8017376:	bf58      	it	pl
 8017378:	3701      	addpl	r7, #1
 801737a:	60a2      	str	r2, [r4, #8]
 801737c:	b142      	cbz	r2, 8017390 <_scanf_chars+0xa8>
 801737e:	2b00      	cmp	r3, #0
 8017380:	dcc8      	bgt.n	8017314 <_scanf_chars+0x2c>
 8017382:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017386:	4629      	mov	r1, r5
 8017388:	4640      	mov	r0, r8
 801738a:	4798      	blx	r3
 801738c:	2800      	cmp	r0, #0
 801738e:	d0c1      	beq.n	8017314 <_scanf_chars+0x2c>
 8017390:	6823      	ldr	r3, [r4, #0]
 8017392:	f013 0310 	ands.w	r3, r3, #16
 8017396:	d105      	bne.n	80173a4 <_scanf_chars+0xbc>
 8017398:	68e2      	ldr	r2, [r4, #12]
 801739a:	3201      	adds	r2, #1
 801739c:	60e2      	str	r2, [r4, #12]
 801739e:	69a2      	ldr	r2, [r4, #24]
 80173a0:	b102      	cbz	r2, 80173a4 <_scanf_chars+0xbc>
 80173a2:	703b      	strb	r3, [r7, #0]
 80173a4:	6923      	ldr	r3, [r4, #16]
 80173a6:	441e      	add	r6, r3
 80173a8:	6126      	str	r6, [r4, #16]
 80173aa:	2000      	movs	r0, #0
 80173ac:	e7c6      	b.n	801733c <_scanf_chars+0x54>
	...

080173b0 <_scanf_i>:
 80173b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173b4:	469a      	mov	sl, r3
 80173b6:	4b74      	ldr	r3, [pc, #464]	; (8017588 <_scanf_i+0x1d8>)
 80173b8:	460c      	mov	r4, r1
 80173ba:	4683      	mov	fp, r0
 80173bc:	4616      	mov	r6, r2
 80173be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80173c2:	b087      	sub	sp, #28
 80173c4:	ab03      	add	r3, sp, #12
 80173c6:	68a7      	ldr	r7, [r4, #8]
 80173c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80173cc:	4b6f      	ldr	r3, [pc, #444]	; (801758c <_scanf_i+0x1dc>)
 80173ce:	69a1      	ldr	r1, [r4, #24]
 80173d0:	4a6f      	ldr	r2, [pc, #444]	; (8017590 <_scanf_i+0x1e0>)
 80173d2:	2903      	cmp	r1, #3
 80173d4:	bf08      	it	eq
 80173d6:	461a      	moveq	r2, r3
 80173d8:	1e7b      	subs	r3, r7, #1
 80173da:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80173de:	bf84      	itt	hi
 80173e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80173e4:	60a3      	strhi	r3, [r4, #8]
 80173e6:	6823      	ldr	r3, [r4, #0]
 80173e8:	9200      	str	r2, [sp, #0]
 80173ea:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80173ee:	bf88      	it	hi
 80173f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80173f4:	f104 091c 	add.w	r9, r4, #28
 80173f8:	6023      	str	r3, [r4, #0]
 80173fa:	bf8c      	ite	hi
 80173fc:	197f      	addhi	r7, r7, r5
 80173fe:	2700      	movls	r7, #0
 8017400:	464b      	mov	r3, r9
 8017402:	f04f 0800 	mov.w	r8, #0
 8017406:	9301      	str	r3, [sp, #4]
 8017408:	6831      	ldr	r1, [r6, #0]
 801740a:	ab03      	add	r3, sp, #12
 801740c:	2202      	movs	r2, #2
 801740e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017412:	7809      	ldrb	r1, [r1, #0]
 8017414:	f7e8 fefc 	bl	8000210 <memchr>
 8017418:	9b01      	ldr	r3, [sp, #4]
 801741a:	b330      	cbz	r0, 801746a <_scanf_i+0xba>
 801741c:	f1b8 0f01 	cmp.w	r8, #1
 8017420:	d15a      	bne.n	80174d8 <_scanf_i+0x128>
 8017422:	6862      	ldr	r2, [r4, #4]
 8017424:	b92a      	cbnz	r2, 8017432 <_scanf_i+0x82>
 8017426:	6822      	ldr	r2, [r4, #0]
 8017428:	2108      	movs	r1, #8
 801742a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801742e:	6061      	str	r1, [r4, #4]
 8017430:	6022      	str	r2, [r4, #0]
 8017432:	6822      	ldr	r2, [r4, #0]
 8017434:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017438:	6022      	str	r2, [r4, #0]
 801743a:	68a2      	ldr	r2, [r4, #8]
 801743c:	1e51      	subs	r1, r2, #1
 801743e:	60a1      	str	r1, [r4, #8]
 8017440:	b19a      	cbz	r2, 801746a <_scanf_i+0xba>
 8017442:	6832      	ldr	r2, [r6, #0]
 8017444:	1c51      	adds	r1, r2, #1
 8017446:	6031      	str	r1, [r6, #0]
 8017448:	7812      	ldrb	r2, [r2, #0]
 801744a:	701a      	strb	r2, [r3, #0]
 801744c:	1c5d      	adds	r5, r3, #1
 801744e:	6873      	ldr	r3, [r6, #4]
 8017450:	3b01      	subs	r3, #1
 8017452:	2b00      	cmp	r3, #0
 8017454:	6073      	str	r3, [r6, #4]
 8017456:	dc07      	bgt.n	8017468 <_scanf_i+0xb8>
 8017458:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801745c:	4631      	mov	r1, r6
 801745e:	4658      	mov	r0, fp
 8017460:	4798      	blx	r3
 8017462:	2800      	cmp	r0, #0
 8017464:	f040 8086 	bne.w	8017574 <_scanf_i+0x1c4>
 8017468:	462b      	mov	r3, r5
 801746a:	f108 0801 	add.w	r8, r8, #1
 801746e:	f1b8 0f03 	cmp.w	r8, #3
 8017472:	d1c8      	bne.n	8017406 <_scanf_i+0x56>
 8017474:	6862      	ldr	r2, [r4, #4]
 8017476:	b90a      	cbnz	r2, 801747c <_scanf_i+0xcc>
 8017478:	220a      	movs	r2, #10
 801747a:	6062      	str	r2, [r4, #4]
 801747c:	6862      	ldr	r2, [r4, #4]
 801747e:	4945      	ldr	r1, [pc, #276]	; (8017594 <_scanf_i+0x1e4>)
 8017480:	6960      	ldr	r0, [r4, #20]
 8017482:	9301      	str	r3, [sp, #4]
 8017484:	1a89      	subs	r1, r1, r2
 8017486:	f000 f897 	bl	80175b8 <__sccl>
 801748a:	9b01      	ldr	r3, [sp, #4]
 801748c:	f04f 0800 	mov.w	r8, #0
 8017490:	461d      	mov	r5, r3
 8017492:	68a3      	ldr	r3, [r4, #8]
 8017494:	6822      	ldr	r2, [r4, #0]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d03a      	beq.n	8017510 <_scanf_i+0x160>
 801749a:	6831      	ldr	r1, [r6, #0]
 801749c:	6960      	ldr	r0, [r4, #20]
 801749e:	f891 c000 	ldrb.w	ip, [r1]
 80174a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80174a6:	2800      	cmp	r0, #0
 80174a8:	d032      	beq.n	8017510 <_scanf_i+0x160>
 80174aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80174ae:	d121      	bne.n	80174f4 <_scanf_i+0x144>
 80174b0:	0510      	lsls	r0, r2, #20
 80174b2:	d51f      	bpl.n	80174f4 <_scanf_i+0x144>
 80174b4:	f108 0801 	add.w	r8, r8, #1
 80174b8:	b117      	cbz	r7, 80174c0 <_scanf_i+0x110>
 80174ba:	3301      	adds	r3, #1
 80174bc:	3f01      	subs	r7, #1
 80174be:	60a3      	str	r3, [r4, #8]
 80174c0:	6873      	ldr	r3, [r6, #4]
 80174c2:	3b01      	subs	r3, #1
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	6073      	str	r3, [r6, #4]
 80174c8:	dd1b      	ble.n	8017502 <_scanf_i+0x152>
 80174ca:	6833      	ldr	r3, [r6, #0]
 80174cc:	3301      	adds	r3, #1
 80174ce:	6033      	str	r3, [r6, #0]
 80174d0:	68a3      	ldr	r3, [r4, #8]
 80174d2:	3b01      	subs	r3, #1
 80174d4:	60a3      	str	r3, [r4, #8]
 80174d6:	e7dc      	b.n	8017492 <_scanf_i+0xe2>
 80174d8:	f1b8 0f02 	cmp.w	r8, #2
 80174dc:	d1ad      	bne.n	801743a <_scanf_i+0x8a>
 80174de:	6822      	ldr	r2, [r4, #0]
 80174e0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80174e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80174e8:	d1bf      	bne.n	801746a <_scanf_i+0xba>
 80174ea:	2110      	movs	r1, #16
 80174ec:	6061      	str	r1, [r4, #4]
 80174ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80174f2:	e7a1      	b.n	8017438 <_scanf_i+0x88>
 80174f4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80174f8:	6022      	str	r2, [r4, #0]
 80174fa:	780b      	ldrb	r3, [r1, #0]
 80174fc:	702b      	strb	r3, [r5, #0]
 80174fe:	3501      	adds	r5, #1
 8017500:	e7de      	b.n	80174c0 <_scanf_i+0x110>
 8017502:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017506:	4631      	mov	r1, r6
 8017508:	4658      	mov	r0, fp
 801750a:	4798      	blx	r3
 801750c:	2800      	cmp	r0, #0
 801750e:	d0df      	beq.n	80174d0 <_scanf_i+0x120>
 8017510:	6823      	ldr	r3, [r4, #0]
 8017512:	05d9      	lsls	r1, r3, #23
 8017514:	d50c      	bpl.n	8017530 <_scanf_i+0x180>
 8017516:	454d      	cmp	r5, r9
 8017518:	d908      	bls.n	801752c <_scanf_i+0x17c>
 801751a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801751e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017522:	4632      	mov	r2, r6
 8017524:	4658      	mov	r0, fp
 8017526:	4798      	blx	r3
 8017528:	1e6f      	subs	r7, r5, #1
 801752a:	463d      	mov	r5, r7
 801752c:	454d      	cmp	r5, r9
 801752e:	d029      	beq.n	8017584 <_scanf_i+0x1d4>
 8017530:	6822      	ldr	r2, [r4, #0]
 8017532:	f012 0210 	ands.w	r2, r2, #16
 8017536:	d113      	bne.n	8017560 <_scanf_i+0x1b0>
 8017538:	702a      	strb	r2, [r5, #0]
 801753a:	6863      	ldr	r3, [r4, #4]
 801753c:	9e00      	ldr	r6, [sp, #0]
 801753e:	4649      	mov	r1, r9
 8017540:	4658      	mov	r0, fp
 8017542:	47b0      	blx	r6
 8017544:	f8da 3000 	ldr.w	r3, [sl]
 8017548:	6821      	ldr	r1, [r4, #0]
 801754a:	1d1a      	adds	r2, r3, #4
 801754c:	f8ca 2000 	str.w	r2, [sl]
 8017550:	f011 0f20 	tst.w	r1, #32
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	d010      	beq.n	801757a <_scanf_i+0x1ca>
 8017558:	6018      	str	r0, [r3, #0]
 801755a:	68e3      	ldr	r3, [r4, #12]
 801755c:	3301      	adds	r3, #1
 801755e:	60e3      	str	r3, [r4, #12]
 8017560:	eba5 0509 	sub.w	r5, r5, r9
 8017564:	44a8      	add	r8, r5
 8017566:	6925      	ldr	r5, [r4, #16]
 8017568:	4445      	add	r5, r8
 801756a:	6125      	str	r5, [r4, #16]
 801756c:	2000      	movs	r0, #0
 801756e:	b007      	add	sp, #28
 8017570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017574:	f04f 0800 	mov.w	r8, #0
 8017578:	e7ca      	b.n	8017510 <_scanf_i+0x160>
 801757a:	07ca      	lsls	r2, r1, #31
 801757c:	bf4c      	ite	mi
 801757e:	8018      	strhmi	r0, [r3, #0]
 8017580:	6018      	strpl	r0, [r3, #0]
 8017582:	e7ea      	b.n	801755a <_scanf_i+0x1aa>
 8017584:	2001      	movs	r0, #1
 8017586:	e7f2      	b.n	801756e <_scanf_i+0x1be>
 8017588:	08017da8 	.word	0x08017da8
 801758c:	08014fd1 	.word	0x08014fd1
 8017590:	08017735 	.word	0x08017735
 8017594:	08018265 	.word	0x08018265

08017598 <_sbrk_r>:
 8017598:	b538      	push	{r3, r4, r5, lr}
 801759a:	4c06      	ldr	r4, [pc, #24]	; (80175b4 <_sbrk_r+0x1c>)
 801759c:	2300      	movs	r3, #0
 801759e:	4605      	mov	r5, r0
 80175a0:	4608      	mov	r0, r1
 80175a2:	6023      	str	r3, [r4, #0]
 80175a4:	f7ee fdf0 	bl	8006188 <_sbrk>
 80175a8:	1c43      	adds	r3, r0, #1
 80175aa:	d102      	bne.n	80175b2 <_sbrk_r+0x1a>
 80175ac:	6823      	ldr	r3, [r4, #0]
 80175ae:	b103      	cbz	r3, 80175b2 <_sbrk_r+0x1a>
 80175b0:	602b      	str	r3, [r5, #0]
 80175b2:	bd38      	pop	{r3, r4, r5, pc}
 80175b4:	20037fcc 	.word	0x20037fcc

080175b8 <__sccl>:
 80175b8:	b570      	push	{r4, r5, r6, lr}
 80175ba:	780b      	ldrb	r3, [r1, #0]
 80175bc:	2b5e      	cmp	r3, #94	; 0x5e
 80175be:	bf13      	iteet	ne
 80175c0:	1c4a      	addne	r2, r1, #1
 80175c2:	1c8a      	addeq	r2, r1, #2
 80175c4:	784b      	ldrbeq	r3, [r1, #1]
 80175c6:	2100      	movne	r1, #0
 80175c8:	bf08      	it	eq
 80175ca:	2101      	moveq	r1, #1
 80175cc:	1e44      	subs	r4, r0, #1
 80175ce:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80175d2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80175d6:	42ac      	cmp	r4, r5
 80175d8:	d1fb      	bne.n	80175d2 <__sccl+0x1a>
 80175da:	b913      	cbnz	r3, 80175e2 <__sccl+0x2a>
 80175dc:	3a01      	subs	r2, #1
 80175de:	4610      	mov	r0, r2
 80175e0:	bd70      	pop	{r4, r5, r6, pc}
 80175e2:	f081 0401 	eor.w	r4, r1, #1
 80175e6:	54c4      	strb	r4, [r0, r3]
 80175e8:	1c51      	adds	r1, r2, #1
 80175ea:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80175ee:	2d2d      	cmp	r5, #45	; 0x2d
 80175f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80175f4:	460a      	mov	r2, r1
 80175f6:	d006      	beq.n	8017606 <__sccl+0x4e>
 80175f8:	2d5d      	cmp	r5, #93	; 0x5d
 80175fa:	d0f0      	beq.n	80175de <__sccl+0x26>
 80175fc:	b90d      	cbnz	r5, 8017602 <__sccl+0x4a>
 80175fe:	4632      	mov	r2, r6
 8017600:	e7ed      	b.n	80175de <__sccl+0x26>
 8017602:	462b      	mov	r3, r5
 8017604:	e7ef      	b.n	80175e6 <__sccl+0x2e>
 8017606:	780e      	ldrb	r6, [r1, #0]
 8017608:	2e5d      	cmp	r6, #93	; 0x5d
 801760a:	d0fa      	beq.n	8017602 <__sccl+0x4a>
 801760c:	42b3      	cmp	r3, r6
 801760e:	dcf8      	bgt.n	8017602 <__sccl+0x4a>
 8017610:	3301      	adds	r3, #1
 8017612:	429e      	cmp	r6, r3
 8017614:	54c4      	strb	r4, [r0, r3]
 8017616:	dcfb      	bgt.n	8017610 <__sccl+0x58>
 8017618:	3102      	adds	r1, #2
 801761a:	e7e6      	b.n	80175ea <__sccl+0x32>

0801761c <strncmp>:
 801761c:	b510      	push	{r4, lr}
 801761e:	b16a      	cbz	r2, 801763c <strncmp+0x20>
 8017620:	3901      	subs	r1, #1
 8017622:	1884      	adds	r4, r0, r2
 8017624:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017628:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801762c:	4293      	cmp	r3, r2
 801762e:	d103      	bne.n	8017638 <strncmp+0x1c>
 8017630:	42a0      	cmp	r0, r4
 8017632:	d001      	beq.n	8017638 <strncmp+0x1c>
 8017634:	2b00      	cmp	r3, #0
 8017636:	d1f5      	bne.n	8017624 <strncmp+0x8>
 8017638:	1a98      	subs	r0, r3, r2
 801763a:	bd10      	pop	{r4, pc}
 801763c:	4610      	mov	r0, r2
 801763e:	e7fc      	b.n	801763a <strncmp+0x1e>

08017640 <_strtoul_l.isra.0>:
 8017640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017644:	4680      	mov	r8, r0
 8017646:	4689      	mov	r9, r1
 8017648:	4692      	mov	sl, r2
 801764a:	461e      	mov	r6, r3
 801764c:	460f      	mov	r7, r1
 801764e:	463d      	mov	r5, r7
 8017650:	9808      	ldr	r0, [sp, #32]
 8017652:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017656:	f7fe fe59 	bl	801630c <__locale_ctype_ptr_l>
 801765a:	4420      	add	r0, r4
 801765c:	7843      	ldrb	r3, [r0, #1]
 801765e:	f013 0308 	ands.w	r3, r3, #8
 8017662:	d130      	bne.n	80176c6 <_strtoul_l.isra.0+0x86>
 8017664:	2c2d      	cmp	r4, #45	; 0x2d
 8017666:	d130      	bne.n	80176ca <_strtoul_l.isra.0+0x8a>
 8017668:	787c      	ldrb	r4, [r7, #1]
 801766a:	1cbd      	adds	r5, r7, #2
 801766c:	2101      	movs	r1, #1
 801766e:	2e00      	cmp	r6, #0
 8017670:	d05c      	beq.n	801772c <_strtoul_l.isra.0+0xec>
 8017672:	2e10      	cmp	r6, #16
 8017674:	d109      	bne.n	801768a <_strtoul_l.isra.0+0x4a>
 8017676:	2c30      	cmp	r4, #48	; 0x30
 8017678:	d107      	bne.n	801768a <_strtoul_l.isra.0+0x4a>
 801767a:	782b      	ldrb	r3, [r5, #0]
 801767c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017680:	2b58      	cmp	r3, #88	; 0x58
 8017682:	d14e      	bne.n	8017722 <_strtoul_l.isra.0+0xe2>
 8017684:	786c      	ldrb	r4, [r5, #1]
 8017686:	2610      	movs	r6, #16
 8017688:	3502      	adds	r5, #2
 801768a:	f04f 32ff 	mov.w	r2, #4294967295
 801768e:	2300      	movs	r3, #0
 8017690:	fbb2 f2f6 	udiv	r2, r2, r6
 8017694:	fb06 fc02 	mul.w	ip, r6, r2
 8017698:	ea6f 0c0c 	mvn.w	ip, ip
 801769c:	4618      	mov	r0, r3
 801769e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80176a2:	2f09      	cmp	r7, #9
 80176a4:	d817      	bhi.n	80176d6 <_strtoul_l.isra.0+0x96>
 80176a6:	463c      	mov	r4, r7
 80176a8:	42a6      	cmp	r6, r4
 80176aa:	dd23      	ble.n	80176f4 <_strtoul_l.isra.0+0xb4>
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	db1e      	blt.n	80176ee <_strtoul_l.isra.0+0xae>
 80176b0:	4282      	cmp	r2, r0
 80176b2:	d31c      	bcc.n	80176ee <_strtoul_l.isra.0+0xae>
 80176b4:	d101      	bne.n	80176ba <_strtoul_l.isra.0+0x7a>
 80176b6:	45a4      	cmp	ip, r4
 80176b8:	db19      	blt.n	80176ee <_strtoul_l.isra.0+0xae>
 80176ba:	fb00 4006 	mla	r0, r0, r6, r4
 80176be:	2301      	movs	r3, #1
 80176c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176c4:	e7eb      	b.n	801769e <_strtoul_l.isra.0+0x5e>
 80176c6:	462f      	mov	r7, r5
 80176c8:	e7c1      	b.n	801764e <_strtoul_l.isra.0+0xe>
 80176ca:	2c2b      	cmp	r4, #43	; 0x2b
 80176cc:	bf04      	itt	eq
 80176ce:	1cbd      	addeq	r5, r7, #2
 80176d0:	787c      	ldrbeq	r4, [r7, #1]
 80176d2:	4619      	mov	r1, r3
 80176d4:	e7cb      	b.n	801766e <_strtoul_l.isra.0+0x2e>
 80176d6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80176da:	2f19      	cmp	r7, #25
 80176dc:	d801      	bhi.n	80176e2 <_strtoul_l.isra.0+0xa2>
 80176de:	3c37      	subs	r4, #55	; 0x37
 80176e0:	e7e2      	b.n	80176a8 <_strtoul_l.isra.0+0x68>
 80176e2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80176e6:	2f19      	cmp	r7, #25
 80176e8:	d804      	bhi.n	80176f4 <_strtoul_l.isra.0+0xb4>
 80176ea:	3c57      	subs	r4, #87	; 0x57
 80176ec:	e7dc      	b.n	80176a8 <_strtoul_l.isra.0+0x68>
 80176ee:	f04f 33ff 	mov.w	r3, #4294967295
 80176f2:	e7e5      	b.n	80176c0 <_strtoul_l.isra.0+0x80>
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	da09      	bge.n	801770c <_strtoul_l.isra.0+0xcc>
 80176f8:	2322      	movs	r3, #34	; 0x22
 80176fa:	f8c8 3000 	str.w	r3, [r8]
 80176fe:	f04f 30ff 	mov.w	r0, #4294967295
 8017702:	f1ba 0f00 	cmp.w	sl, #0
 8017706:	d107      	bne.n	8017718 <_strtoul_l.isra.0+0xd8>
 8017708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801770c:	b101      	cbz	r1, 8017710 <_strtoul_l.isra.0+0xd0>
 801770e:	4240      	negs	r0, r0
 8017710:	f1ba 0f00 	cmp.w	sl, #0
 8017714:	d0f8      	beq.n	8017708 <_strtoul_l.isra.0+0xc8>
 8017716:	b10b      	cbz	r3, 801771c <_strtoul_l.isra.0+0xdc>
 8017718:	f105 39ff 	add.w	r9, r5, #4294967295
 801771c:	f8ca 9000 	str.w	r9, [sl]
 8017720:	e7f2      	b.n	8017708 <_strtoul_l.isra.0+0xc8>
 8017722:	2430      	movs	r4, #48	; 0x30
 8017724:	2e00      	cmp	r6, #0
 8017726:	d1b0      	bne.n	801768a <_strtoul_l.isra.0+0x4a>
 8017728:	2608      	movs	r6, #8
 801772a:	e7ae      	b.n	801768a <_strtoul_l.isra.0+0x4a>
 801772c:	2c30      	cmp	r4, #48	; 0x30
 801772e:	d0a4      	beq.n	801767a <_strtoul_l.isra.0+0x3a>
 8017730:	260a      	movs	r6, #10
 8017732:	e7aa      	b.n	801768a <_strtoul_l.isra.0+0x4a>

08017734 <_strtoul_r>:
 8017734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017736:	4c06      	ldr	r4, [pc, #24]	; (8017750 <_strtoul_r+0x1c>)
 8017738:	4d06      	ldr	r5, [pc, #24]	; (8017754 <_strtoul_r+0x20>)
 801773a:	6824      	ldr	r4, [r4, #0]
 801773c:	6a24      	ldr	r4, [r4, #32]
 801773e:	2c00      	cmp	r4, #0
 8017740:	bf08      	it	eq
 8017742:	462c      	moveq	r4, r5
 8017744:	9400      	str	r4, [sp, #0]
 8017746:	f7ff ff7b 	bl	8017640 <_strtoul_l.isra.0>
 801774a:	b003      	add	sp, #12
 801774c:	bd30      	pop	{r4, r5, pc}
 801774e:	bf00      	nop
 8017750:	2000000c 	.word	0x2000000c
 8017754:	20000070 	.word	0x20000070

08017758 <__submore>:
 8017758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801775c:	460c      	mov	r4, r1
 801775e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017764:	4299      	cmp	r1, r3
 8017766:	d11d      	bne.n	80177a4 <__submore+0x4c>
 8017768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801776c:	f7ff fa66 	bl	8016c3c <_malloc_r>
 8017770:	b918      	cbnz	r0, 801777a <__submore+0x22>
 8017772:	f04f 30ff 	mov.w	r0, #4294967295
 8017776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801777a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801777e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017780:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017784:	6360      	str	r0, [r4, #52]	; 0x34
 8017786:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801778a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801778e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017792:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017796:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801779a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801779e:	6020      	str	r0, [r4, #0]
 80177a0:	2000      	movs	r0, #0
 80177a2:	e7e8      	b.n	8017776 <__submore+0x1e>
 80177a4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80177a6:	0077      	lsls	r7, r6, #1
 80177a8:	463a      	mov	r2, r7
 80177aa:	f000 f837 	bl	801781c <_realloc_r>
 80177ae:	4605      	mov	r5, r0
 80177b0:	2800      	cmp	r0, #0
 80177b2:	d0de      	beq.n	8017772 <__submore+0x1a>
 80177b4:	eb00 0806 	add.w	r8, r0, r6
 80177b8:	4601      	mov	r1, r0
 80177ba:	4632      	mov	r2, r6
 80177bc:	4640      	mov	r0, r8
 80177be:	f7fb fe8b 	bl	80134d8 <memcpy>
 80177c2:	f8c4 8000 	str.w	r8, [r4]
 80177c6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80177ca:	e7e9      	b.n	80177a0 <__submore+0x48>

080177cc <__ascii_wctomb>:
 80177cc:	b149      	cbz	r1, 80177e2 <__ascii_wctomb+0x16>
 80177ce:	2aff      	cmp	r2, #255	; 0xff
 80177d0:	bf85      	ittet	hi
 80177d2:	238a      	movhi	r3, #138	; 0x8a
 80177d4:	6003      	strhi	r3, [r0, #0]
 80177d6:	700a      	strbls	r2, [r1, #0]
 80177d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80177dc:	bf98      	it	ls
 80177de:	2001      	movls	r0, #1
 80177e0:	4770      	bx	lr
 80177e2:	4608      	mov	r0, r1
 80177e4:	4770      	bx	lr

080177e6 <memmove>:
 80177e6:	4288      	cmp	r0, r1
 80177e8:	b510      	push	{r4, lr}
 80177ea:	eb01 0302 	add.w	r3, r1, r2
 80177ee:	d807      	bhi.n	8017800 <memmove+0x1a>
 80177f0:	1e42      	subs	r2, r0, #1
 80177f2:	4299      	cmp	r1, r3
 80177f4:	d00a      	beq.n	801780c <memmove+0x26>
 80177f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80177fe:	e7f8      	b.n	80177f2 <memmove+0xc>
 8017800:	4283      	cmp	r3, r0
 8017802:	d9f5      	bls.n	80177f0 <memmove+0xa>
 8017804:	1881      	adds	r1, r0, r2
 8017806:	1ad2      	subs	r2, r2, r3
 8017808:	42d3      	cmn	r3, r2
 801780a:	d100      	bne.n	801780e <memmove+0x28>
 801780c:	bd10      	pop	{r4, pc}
 801780e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017812:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017816:	e7f7      	b.n	8017808 <memmove+0x22>

08017818 <__malloc_lock>:
 8017818:	4770      	bx	lr

0801781a <__malloc_unlock>:
 801781a:	4770      	bx	lr

0801781c <_realloc_r>:
 801781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801781e:	4607      	mov	r7, r0
 8017820:	4614      	mov	r4, r2
 8017822:	460e      	mov	r6, r1
 8017824:	b921      	cbnz	r1, 8017830 <_realloc_r+0x14>
 8017826:	4611      	mov	r1, r2
 8017828:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801782c:	f7ff ba06 	b.w	8016c3c <_malloc_r>
 8017830:	b922      	cbnz	r2, 801783c <_realloc_r+0x20>
 8017832:	f7ff f9b5 	bl	8016ba0 <_free_r>
 8017836:	4625      	mov	r5, r4
 8017838:	4628      	mov	r0, r5
 801783a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801783c:	f000 f814 	bl	8017868 <_malloc_usable_size_r>
 8017840:	42a0      	cmp	r0, r4
 8017842:	d20f      	bcs.n	8017864 <_realloc_r+0x48>
 8017844:	4621      	mov	r1, r4
 8017846:	4638      	mov	r0, r7
 8017848:	f7ff f9f8 	bl	8016c3c <_malloc_r>
 801784c:	4605      	mov	r5, r0
 801784e:	2800      	cmp	r0, #0
 8017850:	d0f2      	beq.n	8017838 <_realloc_r+0x1c>
 8017852:	4631      	mov	r1, r6
 8017854:	4622      	mov	r2, r4
 8017856:	f7fb fe3f 	bl	80134d8 <memcpy>
 801785a:	4631      	mov	r1, r6
 801785c:	4638      	mov	r0, r7
 801785e:	f7ff f99f 	bl	8016ba0 <_free_r>
 8017862:	e7e9      	b.n	8017838 <_realloc_r+0x1c>
 8017864:	4635      	mov	r5, r6
 8017866:	e7e7      	b.n	8017838 <_realloc_r+0x1c>

08017868 <_malloc_usable_size_r>:
 8017868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801786c:	1f18      	subs	r0, r3, #4
 801786e:	2b00      	cmp	r3, #0
 8017870:	bfbc      	itt	lt
 8017872:	580b      	ldrlt	r3, [r1, r0]
 8017874:	18c0      	addlt	r0, r0, r3
 8017876:	4770      	bx	lr

08017878 <_init>:
 8017878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801787a:	bf00      	nop
 801787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801787e:	bc08      	pop	{r3}
 8017880:	469e      	mov	lr, r3
 8017882:	4770      	bx	lr

08017884 <_fini>:
 8017884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017886:	bf00      	nop
 8017888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801788a:	bc08      	pop	{r3}
 801788c:	469e      	mov	lr, r3
 801788e:	4770      	bx	lr
